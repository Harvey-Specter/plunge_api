import{k as e,s as a,D as t,v as s,r as n,a as o,bb as r,bS as i,aa as l}from"./index.1a68aef2.js";import{E as c}from"./el-message-box.d9f4b59f.js";import"./el-button.a6b8d6fa.js";import"./el-input.b19e074f.js";import"./el-overlay.ca865d5d.js";const{t:g}=e(),u=e=>{const u=a({pageSize:10,currentPage:1,total:10,tableList:[],params:{},loading:!0,currentRow:null}),d=t((()=>({...u.params,pageSize:u.pageSize,page:u.currentPage})));s((()=>u.currentPage),(()=>{b.getList()})),s((()=>u.pageSize),(()=>{1===u.currentPage||(u.currentPage=1),b.getList()}));const p=n(),m=n(),v=async()=>{await l();const e=o(p);return e||console.error("The table is not registered. Please use the register method to register"),e},P=async a=>{if(await((null==e?void 0:e.delListApi)&&(null==e?void 0:e.delListApi(a)))){i.success(g("common.delSuccess"));const e=(u.total%u.pageSize===a.length||1===u.pageSize)&&u.currentPage>1?u.currentPage-1:u.currentPage;u.currentPage=e,b.getList()}},b={getList:async()=>{var a;u.loading=!0;const t=await(null==e?void 0:e.getListApi(o(d)).finally((()=>{u.loading=!1})));t&&(u.tableList=r(t.data||{},null==e?void 0:e.response.list),u.total=r(t.data||{},null==(a=null==e?void 0:e.response)?void 0:a.total)||0)},setProps:async(e={})=>{const a=await v();null==a||a.setProps(e)},setColumn:async e=>{const a=await v();null==a||a.setColumn(e)},getSelections:async()=>{const e=await v();return(null==e?void 0:e.selections)||[]},setSearchParams:e=>{u.currentPage=1,u.params=Object.assign(u.params,{pageSize:u.pageSize,page:u.currentPage,...e}),b.getList()},delList:async(e,a,t=!0)=>{const s=await v();if(a){if(!(null==s?void 0:s.selections.length))return void i.warning(g("common.delNoData"))}else if(!u.currentRow)return void i.warning(g("common.delNoData"));t?c.confirm(g("common.delMessage"),g("common.delWarning"),{confirmButtonText:g("common.delOk"),cancelButtonText:g("common.delCancel"),type:"warning"}).then((async()=>{await P(e)})):await P(e)}};return(null==e?void 0:e.props)&&b.setProps(e.props),{register:(e,a)=>{p.value=e,m.value=a},elTableRef:m,tableObject:u,methods:b}};export{u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
