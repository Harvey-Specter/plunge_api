import{s as e,D as t,v as a,r as s,a as n,bb as o,bS as r,l as i,ab as l}from"./index.b1059dae.js";import{E as c}from"./el-message-box.06586f35.js";import"./el-button.fa3cf5bb.js";import"./el-input.06003b15.js";import"./el-overlay.e2b68649.js";const{t:g}=i(),u=i=>{const u=e({pageSize:10,currentPage:1,total:10,tableList:[],params:{},loading:!0,currentRow:null}),p=t((()=>({...u.params,pageSize:u.pageSize,page:u.currentPage})));a((()=>u.currentPage),(()=>{P.getList()})),a((()=>u.pageSize),(()=>{1===u.currentPage||(u.currentPage=1),P.getList()}));const m=s(),d=s(),b=async()=>{await l();const e=n(m);return e||console.error("The table is not registered. Please use the register method to register"),e},v=async e=>{if(await((null==i?void 0:i.delListApi)&&(null==i?void 0:i.delListApi(e)))){r.success(g("common.delSuccess"));const t=(u.total%u.pageSize===e.length||1===u.pageSize)&&u.currentPage>1?u.currentPage-1:u.currentPage;u.currentPage=t,P.getList()}},P={getList:async()=>{var e;u.loading=!0;const t=await(null==i?void 0:i.getListApi(n(p)).finally((()=>{u.loading=!1})));t&&(u.tableList=o(t.data||{},null==i?void 0:i.response.list),u.total=o(t.data||{},null==(e=null==i?void 0:i.response)?void 0:e.total)||0)},setProps:async(e={})=>{const t=await b();null==t||t.setProps(e)},setColumn:async e=>{const t=await b();null==t||t.setColumn(e)},getSelections:async()=>{const e=await b();return(null==e?void 0:e.selections)||[]},setSearchParams:e=>{u.currentPage=1,u.params=Object.assign(u.params,{pageSize:u.pageSize,page:u.currentPage,...e}),P.getList()},delList:async(e,t,a=!0)=>{const s=await b();if(t){if(!(null==s?void 0:s.selections.length))return void r.warning(g("common.delNoData"))}else if(!u.currentRow)return void r.warning(g("common.delNoData"));a?c.confirm(g("common.delMessage"),g("common.delWarning"),{confirmButtonText:g("common.delOk"),cancelButtonText:g("common.delCancel"),type:"warning"}).then((async()=>{await v(e)})):await v(e)}};return(null==i?void 0:i.props)&&P.setProps(i.props),{register:(e,t)=>{m.value=e,d.value=t},elTableRef:d,tableObject:u,methods:P}};export{u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
