import{d as e,ak as l,b3 as t,Y as s,aF as r,aa as a,E as n,o,c as i,e as c,G as d,F as p,k as u,g as m,ar as b,aq as f,D as v,n as y,a2 as g,x as h,t as w,at as x,ae as k,aE as S,B as _,b as $,X as D,r as E,a as j,w as A,j as N,av as C,aQ as I,a6 as O}from"./index.63ad27ed.js";import{E as z}from"./el-popper.2e0f947e.js";import{_ as R}from"./plugin-vue_export-helper.21dcd24c.js";import{E as W}from"./index2.60738e7b.js";import{g as B}from"./vnode2.d32ae031.js";import{i as F}from"./validator2.9626479b.js";var K=e({name:"ElDescriptionsCell",props:{cell:{type:Object},tag:{type:String},type:{type:String}},setup:()=>({descriptions:l("elDescriptions",{})}),render(){var e,l,a,n,o,i;const c=B(this.cell),{border:d,direction:p}=this.descriptions,u="vertical"===p,m=(null==(a=null==(l=null==(e=this.cell)?void 0:e.children)?void 0:l.label)?void 0:a.call(l))||c.label,b=null==(i=null==(o=null==(n=this.cell)?void 0:n.children)?void 0:o.default)?void 0:i.call(o),f=c.span,v=c.align?`is-${c.align}`:"",y=c.labelAlign?`is-${c.labelAlign}`:v,g=c.className,h=c.labelClassName,w={width:t(c.width),minWidth:t(c.minWidth)},x=s("descriptions");switch(this.type){case"label":return r(this.tag,{style:w,class:[x.e("cell"),x.e("label"),x.is("bordered-label",d),x.is("vertical-label",u),y,h],colSpan:u?f:1},m);case"content":return r(this.tag,{style:w,class:[x.e("cell"),x.e("content"),x.is("bordered-content",d),x.is("vertical-content",u),v,g],colSpan:u?f:2*f-1},b);default:return r("td",{style:w,class:[x.e("cell"),v],colSpan:f},[r("span",{class:[x.e("label"),h]},m),r("span",{class:[x.e("content"),g]},b)])}}});const q=e({name:"ElDescriptionsRow",components:{[K.name]:K},props:{row:{type:Array}},setup:()=>({descriptions:l("elDescriptions",{})})}),G={key:1};var M=a(q,[["render",function(e,l,t,s,r,a){const b=n("el-descriptions-cell");return"vertical"===e.descriptions.direction?(o(),i(d,{key:0},[c("tr",null,[(o(!0),i(d,null,p(e.row,((e,l)=>(o(),u(b,{key:`tr1-${l}`,cell:e,tag:"th",type:"label"},null,8,["cell"])))),128))]),c("tr",null,[(o(!0),i(d,null,p(e.row,((e,l)=>(o(),u(b,{key:`tr2-${l}`,cell:e,tag:"td",type:"content"},null,8,["cell"])))),128))])],64)):(o(),i("tr",G,[(o(!0),i(d,null,p(e.row,((l,t)=>(o(),i(d,{key:`tr3-${t}`},[e.descriptions.border?(o(),i(d,{key:0},[m(b,{cell:l,tag:"td",type:"label"},null,8,["cell"]),m(b,{cell:l,tag:"td",type:"content"},null,8,["cell"])],64)):(o(),u(b,{key:1,cell:l,tag:"td",type:"both"},null,8,["cell"]))],64)))),128))]))}],["__file","/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/descriptions-row.vue"]]);var P=a(e({name:"ElDescriptions",components:{[M.name]:M},props:{border:{type:Boolean,default:!1},column:{type:Number,default:3},direction:{type:String,default:"horizontal"},size:{type:String,validator:F},title:{type:String,default:""},extra:{type:String,default:""}},setup(e,{slots:l}){b("elDescriptions",e);const t=f(),r=s("descriptions"),a=v((()=>[r.b(),r.m(t.value)])),n=e=>{const l=Array.isArray(e)?e:[e],t=[];return l.forEach((e=>{Array.isArray(e.children)?t.push(...n(e.children)):t.push(e)})),t},o=(e,l,t,s=!1)=>(e.props||(e.props={}),l>t&&(e.props.span=t),s&&(e.props.span=l),e);return{descriptionKls:a,getRows:()=>{var t;const s=n(null==(t=l.default)?void 0:t.call(l)).filter((e=>{var l;return"ElDescriptionsItem"===(null==(l=null==e?void 0:e.type)?void 0:l.name)})),r=[];let a=[],i=e.column,c=0;return s.forEach(((l,t)=>{var n;const d=(null==(n=l.props)?void 0:n.span)||1;if(t<s.length-1&&(c+=d>i?i:d),t===s.length-1){const t=e.column-c%e.column;return a.push(o(l,t,i,!0)),void r.push(a)}d<i?(i-=d,a.push(l)):(a.push(o(l,d,i)),r.push(a),i=e.column,a=[])})),r},ns:r}}}),[["render",function(e,l,t,s,r,a){const m=n("el-descriptions-row");return o(),i("div",{class:y(e.descriptionKls)},[e.title||e.extra||e.$slots.title||e.$slots.extra?(o(),i("div",{key:0,class:y(e.ns.e("header"))},[c("div",{class:y(e.ns.e("title"))},[g(e.$slots,"title",{},(()=>[h(w(e.title),1)]))],2),c("div",{class:y(e.ns.e("extra"))},[g(e.$slots,"extra",{},(()=>[h(w(e.extra),1)]))],2)],2)):x("v-if",!0),c("div",{class:y(e.ns.e("body"))},[c("table",{class:y([e.ns.e("table"),e.ns.is("bordered",e.border)])},[c("tbody",null,[(o(!0),i(d,null,p(e.getRows(),((e,l)=>(o(),u(m,{key:l,row:e},null,8,["row"])))),128))])],2)],2)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/descriptions/src/index.vue"]]),Q=e({name:"ElDescriptionsItem",props:{label:{type:String,default:""},span:{type:Number,default:1},width:{type:[String,Number],default:""},minWidth:{type:[String,Number],default:""},align:{type:String,default:"left"},labelAlign:{type:String,default:""},className:{type:String,default:""},labelClassName:{type:String,default:""}}});const X=k(P,{DescriptionsItem:Q}),Y=S(Q);const H={class:"flex items-center"};var J=R(e({__name:"Descriptions",props:{title:_.string.def(""),message:_.string.def(""),collapse:_.bool.def(!0),schema:{type:Array,default:()=>[]},data:{type:Object,default:()=>({})}},setup(e){const l=e,t=$(),s=v((()=>t.getMobile)),r=D(),{getPrefixCls:a}=N(),b=a("descriptions"),f=v((()=>{const e=["title","message","collapse","schema","data","class"],t={...r,...l};for(const l in t)-1!==e.indexOf(l)&&delete t[l];return t})),k=E(!0),S=()=>{l.collapse&&(k.value=!j(k))};return(l,t)=>{const r=n("Icon");return o(),i("div",{class:y([j(b),"bg-[var(--el-color-white)] dark:bg-[var(--el-bg-color)] dark:border-[var(--el-border-color)] dark:border-1px"])},[e.title?(o(),i("div",{key:0,class:y([`${j(b)}-header`,"h-50px flex justify-between items-center mb-10px border-bottom-1 border-solid border-[var(--tags-view-border-color)] px-10px cursor-pointer dark:border-[var(--el-border-color)]"]),onClick:S},[c("div",{class:y([`${j(b)}-header__title`,"relative font-18px font-bold ml-10px"])},[c("div",H,[h(w(e.title)+" ",1),e.message?(o(),u(j(z),{key:0,content:e.message,placement:"right"},{default:A((()=>[m(r,{icon:"ep:warning",class:"ml-5px"})])),_:1},8,["content"])):x("v-if",!0)])],2),e.collapse?(o(),u(r,{key:0,icon:k.value?"ep:arrow-down":"ep:arrow-up"},null,8,["icon"])):x("v-if",!0)],2)):x("v-if",!0),m(j(W),null,{default:A((()=>[C(c("div",{class:y([`${j(b)}-content`,"p-10px"])},[m(j(X),O({column:2,border:"",direction:j(s)?"vertical":"horizontal"},j(f)),{default:A((()=>[(o(!0),i(d,null,p(e.schema,(t=>(o(),u(j(Y),O({key:t.field},(e=>{const l=["field"],t={...e};for(const s in t)-1!==l.indexOf(s)&&delete t[s];return t})(t)),{label:A((()=>[g(l.$slots,`${t.field}-label`,{label:t.label},(()=>[h(w(t.label),1)]),!0)])),default:A((()=>[g(l.$slots,t.field,{row:e.data},(()=>[h(w(e.data[t.field]),1)]),!0)])),_:2},1040)))),128))])),_:3},16,["direction"])],2),[[I,k.value]])])),_:3})],2)}}}),[["__scopeId","data-v-063ffb84"]]);export{J as D};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
