import{Q as e,b6 as a,R as i,aA as t,V as n,az as s,d as l,a0 as c,a1 as o,aB as d,D as r,Y as u,aq as v,r as h,b3 as f,v as p,an as m,$ as y,a9 as b,aa as k,aM as g,ad as w,E as x,o as I,c as V,e as C,n as S,a7 as T,h as B,w as E,as as _,at as N,t as P,G as j,g as D,a4 as K,ac as z,ae as q}from"./index.1a68aef2.js";import{i as A}from"./validator2.597f6af8.js";import{U as F,C as G,I as L}from"./event2.1741f333.js";import{u as M,a as Q}from"./index2.78abe895.js";const R=e({modelValue:{type:[Boolean,String,Number],default:!1},value:{type:[Boolean,String,Number],default:!1},disabled:{type:Boolean,default:!1},width:{type:[String,Number],default:""},inlinePrompt:{type:Boolean,default:!1},activeIcon:{type:a,default:""},inactiveIcon:{type:a,default:""},activeText:{type:String,default:""},inactiveText:{type:String,default:""},activeColor:{type:String,default:""},inactiveColor:{type:String,default:""},borderColor:{type:String,default:""},activeValue:{type:[Boolean,String,Number],default:!0},inactiveValue:{type:[Boolean,String,Number],default:!1},name:{type:String,default:""},validateEvent:{type:Boolean,default:!0},id:String,loading:{type:Boolean,default:!1},beforeChange:{type:i(Function)},size:{type:String,validator:A},tabindex:{type:[String,Number]}}),U=l({name:"ElSwitch",components:{ElIcon:c,Loading:o},props:R,emits:{[F]:e=>t(e)||n(e)||s(e),[G]:e=>t(e)||n(e)||s(e),[L]:e=>t(e)||n(e)||s(e)},setup(e,{emit:a}){const{formItem:i}=M(),n=d(r((()=>e.loading))),s=u("switch"),{inputId:l}=Q(e,{formItemContext:i}),c=v(),o=h(!1!==e.modelValue),b=h(),x=h(),I=r((()=>[s.b(),s.m(c.value),s.is("disabled",n.value),s.is("checked",S.value)])),V=r((()=>({width:f(e.width)})));p((()=>e.modelValue),(()=>{o.value=!0})),p((()=>e.value),(()=>{o.value=!1}));const C=r((()=>o.value?e.modelValue:e.value)),S=r((()=>C.value===e.activeValue));[e.activeValue,e.inactiveValue].includes(C.value)||(a(F,e.inactiveValue),a(G,e.inactiveValue),a(L,e.inactiveValue)),p(S,(()=>{var a;b.value.checked=S.value,e.validateEvent&&(null==(a=null==i?void 0:i.validate)||a.call(i,"change").catch((e=>m())))}));const T=()=>{const i=S.value?e.inactiveValue:e.activeValue;a(F,i),a(G,i),a(L,i),k((()=>{b.value.checked=S.value}))},B=r((()=>s.cssVarBlock({...e.activeColor?{"on-color":e.activeColor}:null,...e.inactiveColor?{"off-color":e.inactiveColor}:null,...e.borderColor?{"border-color":e.borderColor}:null})));return y((()=>{b.value.checked=S.value})),{ns:s,input:b,inputId:l,core:x,switchDisabled:n,checked:S,switchKls:I,coreStyle:V,handleChange:T,switchValue:()=>{if(n.value)return;const{beforeChange:a}=e;if(!a)return void T();const i=a();[g(i),t(i)].some((e=>e))||w("ElSwitch","beforeChange must return type `Promise<boolean>` or `boolean`"),g(i)?i.then((e=>{e&&T()})).catch((e=>{})):i&&T()},focus:()=>{var e,a;null==(a=null==(e=b.value)?void 0:e.focus)||a.call(e)},styles:B}}}),Y=["id","aria-checked","aria-disabled","name","true-value","false-value","disabled","tabindex"],$=["aria-hidden"],H=["aria-hidden"],J=["aria-hidden"],O=["aria-hidden"];const W=q(b(U,[["render",function(e,a,i,t,n,s){const l=x("el-icon"),c=x("loading");return I(),V("div",{class:S(e.switchKls),style:K(e.styles),onClick:a[2]||(a[2]=z(((...a)=>e.switchValue&&e.switchValue(...a)),["prevent"]))},[C("input",{id:e.inputId,ref:"input",class:S(e.ns.e("input")),type:"checkbox",role:"switch","aria-checked":e.checked,"aria-disabled":e.switchDisabled,name:e.name,"true-value":e.activeValue,"false-value":e.inactiveValue,disabled:e.switchDisabled,tabindex:e.tabindex,onChange:a[0]||(a[0]=(...a)=>e.handleChange&&e.handleChange(...a)),onKeydown:a[1]||(a[1]=T(((...a)=>e.switchValue&&e.switchValue(...a)),["enter"]))},null,42,Y),e.inlinePrompt||!e.inactiveIcon&&!e.inactiveText?N("v-if",!0):(I(),V("span",{key:0,class:S([e.ns.e("label"),e.ns.em("label","left"),e.ns.is("active",!e.checked)])},[e.inactiveIcon?(I(),B(l,{key:0},{default:E((()=>[(I(),B(_(e.inactiveIcon)))])),_:1})):N("v-if",!0),!e.inactiveIcon&&e.inactiveText?(I(),V("span",{key:1,"aria-hidden":e.checked},P(e.inactiveText),9,$)):N("v-if",!0)],2)),C("span",{ref:"core",class:S(e.ns.e("core")),style:K(e.coreStyle)},[e.inlinePrompt?(I(),V("div",{key:0,class:S(e.ns.e("inner"))},[e.activeIcon||e.inactiveIcon?(I(),V(j,{key:0},[e.activeIcon?(I(),B(l,{key:0,class:S([e.ns.is("icon"),e.checked?e.ns.is("show"):e.ns.is("hide")])},{default:E((()=>[(I(),B(_(e.activeIcon)))])),_:1},8,["class"])):N("v-if",!0),e.inactiveIcon?(I(),B(l,{key:1,class:S([e.ns.is("icon"),e.checked?e.ns.is("hide"):e.ns.is("show")])},{default:E((()=>[(I(),B(_(e.inactiveIcon)))])),_:1},8,["class"])):N("v-if",!0)],64)):e.activeText||e.inactiveIcon?(I(),V(j,{key:1},[e.activeText?(I(),V("span",{key:0,class:S([e.ns.is("text"),e.checked?e.ns.is("show"):e.ns.is("hide")]),"aria-hidden":!e.checked},P(e.activeText.substring(0,3)),11,H)):N("v-if",!0),e.inactiveText?(I(),V("span",{key:1,class:S([e.ns.is("text"),e.checked?e.ns.is("hide"):e.ns.is("show")]),"aria-hidden":e.checked},P(e.inactiveText.substring(0,3)),11,J)):N("v-if",!0)],64)):N("v-if",!0)],2)):N("v-if",!0),C("div",{class:S(e.ns.e("action"))},[e.loading?(I(),B(l,{key:0,class:S(e.ns.is("loading"))},{default:E((()=>[D(c)])),_:1},8,["class"])):N("v-if",!0)],2)],6),e.inlinePrompt||!e.activeIcon&&!e.activeText?N("v-if",!0):(I(),V("span",{key:1,class:S([e.ns.e("label"),e.ns.em("label","right"),e.ns.is("active",e.checked)])},[e.activeIcon?(I(),B(l,{key:0},{default:E((()=>[(I(),B(_(e.activeIcon)))])),_:1})):N("v-if",!0),!e.activeIcon&&e.activeText?(I(),V("span",{key:1,"aria-hidden":!e.checked},P(e.activeText),9,O)):N("v-if",!0)],2))],6)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/switch/src/switch.vue"]]));export{W as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
