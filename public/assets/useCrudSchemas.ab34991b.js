import{e,t,f as o}from"./tree.b6e955f9.js";import{c7 as s,c8 as l,k as i,s as a,bh as n}from"./index.f2e05143.js";const c=s({id:"dict",state:()=>({isSetDict:!1,dictObj:{}}),persist:{enabled:!0},getters:{getDictObj(){return this.dictObj},getIsSetDict(){return this.isSetDict}},actions:{setDictObj(e){this.dictObj=e},setIsSetDict(e){this.isSetDict=e}}})(l),{t:r}=i(),d=e=>{const t=a({searchSchema:[],tableColumns:[],formSchema:[],detailSchema:[]}),o=h(e,t);t.searchSchema=o||[];const s=m(e);t.tableColumns=s||[];const l=f(e);t.formSchema=l;const i=p(e);return t.detailSchema=i,{allSchemas:t}},h=(t,o)=>{const s=[],l=[];e(t,(e=>{var t;if(null==(t=null==e?void 0:e.search)?void 0:t.show){const t={component:e.search.component||"Input",componentProps:{},...e.search,field:e.field,label:e.label};if(t.dictName){const e=c.getDictObj[t.dictName];t.componentProps.options=u(e)}else t.api&&l.push((async()=>{var e;const s=await t.api();if(s){const l=n(o.searchSchema,(e=>e.field===t.field));-1!==l&&(o.searchSchema[l].componentProps.options=u(s.data,null==(e=t.componentProps.optionsAlias)?void 0:e.labelField))}}));delete t.show,delete t.dictName,s.push(t)}}));for(const e of l)e();return s},m=e=>{const s=t(e,{conversion:e=>{var t;if(!1!==(null==(t=null==e?void 0:e.table)?void 0:t.show))return{...e.table,...e}}});return o(s,(e=>(void 0===e.children&&delete e.children,!!e.field)))},f=t=>{const o=[];return e(t,(e=>{var t;if(!1!==(null==(t=null==e?void 0:e.form)?void 0:t.show)){const t={component:e.form&&e.form.component||"Input",...e.form,field:e.field,label:e.label};delete t.show,o.push(t)}})),o},p=t=>{const o=[];return e(t,(e=>{var t;if(!1!==(null==(t=null==e?void 0:e.detail)?void 0:t.show)){const t={...e.detail,field:e.field,label:e.label};delete t.show,o.push(t)}})),o},u=(e,t)=>e.map((e=>(t?e.labelField=r(e.labelField):e.label=r(e.label),e)));export{d as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
