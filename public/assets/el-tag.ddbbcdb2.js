import{Q as a,a$ as s,aa as e,d as l,aq as o,Y as n,D as t,o as c,c as i,e as r,a2 as u,n as p,a as d,k as f,w as k,g,aU as m,a8 as y,a0 as b,at as v,a4 as C,h,ae as _}from"./index.701681eb.js";const B=a({closable:Boolean,type:{type:String,values:["success","info","warning","danger",""],default:""},hit:Boolean,disableTransitions:Boolean,color:{type:String,default:""},size:{type:String,values:s,default:""},effect:{type:String,values:["dark","light","plain"],default:"light"},round:Boolean});const E=_(e(l({name:"ElTag",props:B,emits:{close:a=>a instanceof MouseEvent,click:a=>a instanceof MouseEvent},setup(a,{emit:s}){const e=a,l=o(),_=n("tag"),B=t((()=>{const{type:a,hit:s,effect:o,closable:n,round:t}=e;return[_.b(),_.is("closable",n),_.m(a),_.m(l.value),_.m(o),_.is("hit",s),_.is("round",t)]})),E=a=>{s("close",a)},S=a=>{s("click",a)};return(a,s)=>a.disableTransitions?(c(),i("span",{key:0,class:p(d(B)),style:C({backgroundColor:a.color}),onClick:S},[r("span",{class:p(d(_).e("content"))},[u(a.$slots,"default")],2),a.closable?(c(),f(d(b),{key:0,class:p(d(_).e("close")),onClick:y(E,["stop"])},{default:k((()=>[g(d(m))])),_:1},8,["class","onClick"])):v("v-if",!0)],6)):(c(),f(h,{key:1,name:`${d(_).namespace.value}-zoom-in-center`,appear:""},{default:k((()=>[r("span",{class:p(d(B)),style:C({backgroundColor:a.color}),onClick:S},[r("span",{class:p(d(_).e("content"))},[u(a.$slots,"default")],2),a.closable?(c(),f(d(b),{key:0,class:p(d(_).e("close")),onClick:y(E,["stop"])},{default:k((()=>[g(d(m))])),_:1},8,["class","onClick"])):v("v-if",!0)],6)])),_:3},8,["name"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/tag/src/tag.vue"]]));export{E,B as t};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
