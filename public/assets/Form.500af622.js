import{H as e,I as t,J as a,K as l,L as n,M as o,N as r,O as s,S as i,P as u,Q as d,R as c,U as p,V as v,W as f,d as m,X as h,Y as g,r as b,D as y,Z as k,$ as w,o as S,k as x,w as C,e as V,g as M,a as D,c as $,a0 as O,n as _,a1 as I,F as P,a2 as T,x as E,t as A,G as N,a3 as F,a4 as B,a5 as z,a6 as R,a7 as L,a8 as q,a9 as Y,aa as j,ab as H,ac as W,ad as K,ae as U,af as G,ag as X,ah as Z,ai as Q,aj as J,ak as ee,al as te,am as ae,v as le,an as ne,ao as oe,ap as re,aq as se,ar as ie,as as ue,at as de,au as ce,av as pe,aw as ve,ax as fe,ay as me,h as he,az as ge,aA as be,aB as ye,aC as ke,s as we,aD as Se,aE as xe,aF as Ce,aG as Ve,aH as Me,E as De,aI as $e,aJ as Oe,aK as _e,aL as Ie,aM as Pe,aN as Te,aO as Ee,aP as Ae,aQ as Ne,aR as Fe,aS as Be,aT as ze,aU as Re,aV as Le,aW as qe,aX as Ye,aY as je,aZ as He,a_ as We,a$ as Ke,b0 as Ue,b1 as Ge,b2 as Xe,b3 as Ze,b4 as Qe,b5 as Je,b6 as et,b7 as tt,b8 as at,b9 as lt,ba as nt,bb as ot,bc as rt,bd as st,be as it,bf as ut,bg as dt,l as ct,B as pt,j as vt,bh as ft,bi as mt,bj as ht,bk as gt}from"./index.63ad27ed.js";import{E as bt,a as yt}from"./el-col.29973b17.js";import{u as kt,g as wt,E as St,o as xt,a as Ct,T as Vt}from"./el-popper.2e0f947e.js";import{u as Mt,E as Dt,i as $t}from"./el-input.ec3b36be.js";import{E as Ot,t as _t}from"./el-tag.1976bda3.js";import{s as It,S as Pt,c as Tt,i as Et,E as At,C as Nt,a as Ft,b as Bt,g as zt,d as Rt,e as Lt,f as qt}from"./tsxHelper.7f51eaea.js";import{E as Yt}from"./el-button.6bb32269.js";import{v as jt,E as Ht}from"./el-input-number.18339b90.js";import{E as Wt}from"./el-switch.0944b706.js";import{E as Kt}from"./el-divider.3c26984a.js";import{I as Ut}from"./InputPassword.6d2c7405.js";import{_ as Gt}from"./Editor.e5525c5f.js";import{U as Xt,I as Zt,C as Qt}from"./event2.1741f333.js";import{u as Jt}from"./index2.06b96e43.js";import{u as ea,a as ta}from"./index2.f758414f.js";import{d as aa}from"./debounce.ac76efe8.js";import{u as la}from"./index2.d473352e.js";import{i as na,f as oa,g as ra}from"./aria2.b5095a02.js";import{s as sa}from"./scroll2.2b4a5172.js";import{i as ia}from"./validator2.9626479b.js";import{m as ua}from"./typescript2.0e462989.js";import{i as da}from"./browser2.47d88281.js";import{_ as ca}from"./plugin-vue_export-helper.21dcd24c.js";function pa(e){return e!=e}function va(e,t){return!!(null==e?0:e.length)&&function(e,t,a){return t==t?function(e,t,a){for(var l=a-1,n=e.length;++l<n;)if(e[l]===t)return l;return-1}(e,t,a):function(e,t,a,l){for(var n=e.length,o=a+(l?1:-1);l?o--:++o<n;)if(t(e[o],o,e))return o;return-1}(e,pa,a)}(e,t,0)>-1}function fa(){if(!arguments.length)return[];var e=arguments[0];return l(e)?e:[e]}function ma(e){return n(e,4)}function ha(e){return o(e)&&r(e)}function ga(e,t,a){for(var l=-1,n=null==e?0:e.length;++l<n;)if(a(t,e[l]))return!0;return!1}var ba=i&&1/It(new i([,-0]))[1]==1/0?function(e){return new i(e)}:function(){};var ya,ka,wa=e(t(ya=function(e){return function(e,t,a){var l=-1,n=va,o=e.length,r=!0,s=[],i=s;if(a)r=!1,n=ga;else if(o>=200){var u=t?null:ba(e);if(u)return It(u);r=!1,n=Tt,i=new Pt}else i=t?[]:s;e:for(;++l<o;){var d=e[l],c=t?t(d):d;if(d=a||0!==d?d:0,r&&c==c){for(var p=i.length;p--;)if(i[p]===c)continue e;t&&i.push(c),s.push(d)}else n(i,c,a)||(i!==s&&i.push(c),s.push(d))}return s}(s(e,1,ha,!0))},ka,a),ya+"");const Sa=e=>{let t,a;return"touchend"===e.type?(a=e.changedTouches[0].clientY,t=e.changedTouches[0].clientX):e.type.startsWith("touch")?(a=e.touches[0].clientY,t=e.touches[0].clientX):(a=e.clientY,t=e.clientX),{clientX:t,clientY:a}},xa=e=>[...new Set(e)],Ca=e=>e||0===e?Array.isArray(e)?e:[e]:[],Va=e=>u?window.requestAnimationFrame(e):setTimeout(e,16),Ma=e=>u?window.cancelAnimationFrame(e):clearTimeout(e),Da=Symbol("radioGroupKey"),$a=Symbol("sliderContextKey"),Oa=Symbol(),_a=d({valueKey:{type:String,default:"value"},modelValue:{type:[String,Number],default:""},debounce:{type:Number,default:300},placement:{type:c(String),values:["top","top-start","top-end","bottom","bottom-start","bottom-end"],default:"bottom-start"},fetchSuggestions:{type:c([Function,Array]),default:p},popperClass:{type:String,default:""},triggerOnFocus:{type:Boolean,default:!0},selectWhenUnmatched:{type:Boolean,default:!1},hideLoading:{type:Boolean,default:!1},label:{type:String},teleported:kt.teleported,highlightFirstItem:{type:Boolean,default:!1}}),Ia=["aria-expanded","aria-owns"],Pa={key:0},Ta=["id","aria-selected","onClick"];const Ea=U(j(m({name:"ElAutocomplete",inheritAttrs:!1,props:_a,emits:{[Xt]:e=>v(e),[Zt]:e=>v(e),[Qt]:e=>v(e),focus:e=>e instanceof FocusEvent,blur:e=>e instanceof FocusEvent,clear:()=>!0,select:e=>f(e)},setup(e,{expose:t,emit:a}){const l=e,n=Mt(),o=h(),r=g("autocomplete"),s=b(),i=b(),u=b(),d=b();let c=!1;const p=b([]),v=b(-1),f=b(""),m=b(!1),j=b(!1),U=b(!1),G=y((()=>r.b(String(wt())))),X=y((()=>o.style)),Z=y((()=>(p.value.length>0||U.value)&&m.value)),Q=y((()=>!l.hideLoading&&U.value)),J=async()=>{await H(),Z.value&&(f.value=`${s.value.$el.offsetWidth}px`)},ee=aa((async e=>{if(j.value)return;const t=e=>{U.value=!1,j.value||(W(e)?(p.value=e,v.value=l.highlightFirstItem?0:-1):K("ElAutocomplete","autocomplete suggestions must be an array"))};if(U.value=!0,W(l.fetchSuggestions))t(l.fetchSuggestions);else{const a=await l.fetchSuggestions(e,t);W(a)&&t(a)}}),l.debounce),te=e=>{const t=!!e;if(a(Zt,e),a(Xt,e),j.value=!1,m.value||(m.value=c&&t),!l.triggerOnFocus&&!e)return j.value=!0,void(p.value=[]);c&&t&&(c=!1),ee(e)},ae=e=>{a(Qt,e)},le=e=>{m.value=!0,a("focus",e),l.triggerOnFocus&&ee(String(l.modelValue))},ne=e=>{a("blur",e)},oe=()=>{m.value=!1,c=!0,a(Xt,""),a("clear")},re=async()=>{Z.value&&v.value>=0&&v.value<p.value.length?ue(p.value[v.value]):l.selectWhenUnmatched&&(a("select",{value:l.modelValue}),await H(),p.value=[],v.value=-1)},se=e=>{Z.value&&(e.preventDefault(),e.stopPropagation(),ie())},ie=()=>{m.value=!1},ue=async e=>{a(Zt,e[l.valueKey]),a(Xt,e[l.valueKey]),a("select",e),await H(),p.value=[],v.value=-1},de=e=>{if(!Z.value||U.value)return;if(e<0)return void(v.value=-1);e>=p.value.length&&(e=p.value.length-1);const t=i.value.querySelector(`.${r.be("suggestion","wrap")}`),a=t.querySelectorAll(`.${r.be("suggestion","list")} li`)[e],l=t.scrollTop,{offsetTop:n,scrollHeight:o}=a;n+o>l+t.clientHeight&&(t.scrollTop+=o),n<l&&(t.scrollTop-=o),v.value=e,s.value.ref.setAttribute("aria-activedescendant",`${G.value}-item-${v.value}`)};return k(d,ie),w((()=>{s.value.ref.setAttribute("role","textbox"),s.value.ref.setAttribute("aria-autocomplete","list"),s.value.ref.setAttribute("aria-controls","id"),s.value.ref.setAttribute("aria-activedescendant",`${G.value}-item-${v.value}`)})),t({highlightedIndex:v,activated:m,loading:U,inputRef:s,popperRef:u,suggestions:p,handleSelect:ue,handleKeyEnter:re,focus:()=>{var e;null==(e=s.value)||e.focus()},close:ie,highlight:de}),(e,t)=>(S(),x(D(St),{ref_key:"popperRef",ref:u,visible:D(Z),"onUpdate:visible":t[2]||(t[2]=e=>Y(Z)?Z.value=e:null),placement:e.placement,"fallback-placements":["bottom-start","top-start"],"popper-class":[D(r).e("popper"),e.popperClass],teleported:e.teleported,"gpu-acceleration":!1,pure:"","manual-mode":"",effect:"light",trigger:"click",transition:`${D(r).namespace.value}-zoom-in-top`,persistent:"",onBeforeShow:J},{content:C((()=>[V("div",{ref_key:"regionRef",ref:i,class:_([D(r).b("suggestion"),D(r).is("loading",D(Q))]),style:B({minWidth:f.value,outline:"none"}),role:"region"},[M(D(F),{id:D(G),tag:"ul","wrap-class":D(r).be("suggestion","wrap"),"view-class":D(r).be("suggestion","list"),role:"listbox"},{default:C((()=>[D(Q)?(S(),$("li",Pa,[M(D(O),{class:_(D(r).is("loading"))},{default:C((()=>[M(D(I))])),_:1},8,["class"])])):(S(!0),$(N,{key:1},P(p.value,((t,a)=>(S(),$("li",{id:`${D(G)}-item-${a}`,key:a,class:_({highlighted:v.value===a}),role:"option","aria-selected":v.value===a,onClick:e=>ue(t)},[T(e.$slots,"default",{item:t},(()=>[E(A(t[e.valueKey]),1)]))],10,Ta)))),128))])),_:3},8,["id","wrap-class","view-class"])],6)])),default:C((()=>[V("div",{ref_key:"listboxRef",ref:d,class:_([D(r).b(),e.$attrs.class]),style:B(D(X)),role:"combobox","aria-haspopup":"listbox","aria-expanded":D(Z),"aria-owns":D(G)},[M(D(Dt),R({ref_key:"inputRef",ref:s},D(n),{"model-value":e.modelValue,onInput:te,onChange:ae,onFocus:le,onBlur:ne,onClear:oe,onKeydown:[t[0]||(t[0]=L(q((e=>de(v.value-1)),["prevent"]),["up"])),t[1]||(t[1]=L(q((e=>de(v.value+1)),["prevent"]),["down"])),L(re,["enter"]),L(ie,["tab"]),L(se,["esc"])]}),z({_:2},[e.$slots.prepend?{name:"prepend",fn:C((()=>[T(e.$slots,"prepend")]))}:void 0,e.$slots.append?{name:"append",fn:C((()=>[T(e.$slots,"append")]))}:void 0,e.$slots.prefix?{name:"prefix",fn:C((()=>[T(e.$slots,"prefix")]))}:void 0,e.$slots.suffix?{name:"suffix",fn:C((()=>[T(e.$slots,"suffix")]))}:void 0]),1040,["model-value","onKeydown"])],14,Ia)])),_:3},8,["visible","placement","popper-class","teleported","transition"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/autocomplete/src/autocomplete.vue"]]));var Aa={exports:{}},Na=Aa.exports=function(){var e=1e3,t=6e4,a=36e5,l="millisecond",n="second",o="minute",r="hour",s="day",i="week",u="month",d="quarter",c="year",p="date",v="Invalid Date",f=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,m=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,h={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},g=function(e,t,a){var l=String(e);return!l||l.length>=t?e:""+Array(t+1-l.length).join(a)+e},b={s:g,z:function(e){var t=-e.utcOffset(),a=Math.abs(t),l=Math.floor(a/60),n=a%60;return(t<=0?"+":"-")+g(l,2,"0")+":"+g(n,2,"0")},m:function e(t,a){if(t.date()<a.date())return-e(a,t);var l=12*(a.year()-t.year())+(a.month()-t.month()),n=t.clone().add(l,u),o=a-n<0,r=t.clone().add(l+(o?-1:1),u);return+(-(l+(a-n)/(o?n-r:r-n))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:u,y:c,w:i,d:s,D:p,h:r,m:o,s:n,ms:l,Q:d}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},y="en",k={};k[y]=h;var w=function(e){return e instanceof V},S=function e(t,a,l){var n;if(!t)return y;if("string"==typeof t){var o=t.toLowerCase();k[o]&&(n=o),a&&(k[o]=a,n=o);var r=t.split("-");if(!n&&r.length>1)return e(r[0])}else{var s=t.name;k[s]=t,n=s}return!l&&n&&(y=n),n||!l&&y},x=function(e,t){if(w(e))return e.clone();var a="object"==typeof t?t:{};return a.date=e,a.args=arguments,new V(a)},C=b;C.l=S,C.i=w,C.w=function(e,t){return x(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var V=function(){function h(e){this.$L=S(e.locale,null,!0),this.parse(e)}var g=h.prototype;return g.parse=function(e){this.$d=function(e){var t=e.date,a=e.utc;if(null===t)return new Date(NaN);if(C.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var l=t.match(f);if(l){var n=l[2]-1||0,o=(l[7]||"0").substring(0,3);return a?new Date(Date.UTC(l[1],n,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)):new Date(l[1],n,l[3]||1,l[4]||0,l[5]||0,l[6]||0,o)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},g.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},g.$utils=function(){return C},g.isValid=function(){return!(this.$d.toString()===v)},g.isSame=function(e,t){var a=x(e);return this.startOf(t)<=a&&a<=this.endOf(t)},g.isAfter=function(e,t){return x(e)<this.startOf(t)},g.isBefore=function(e,t){return this.endOf(t)<x(e)},g.$g=function(e,t,a){return C.u(e)?this[t]:this.set(a,e)},g.unix=function(){return Math.floor(this.valueOf()/1e3)},g.valueOf=function(){return this.$d.getTime()},g.startOf=function(e,t){var a=this,l=!!C.u(t)||t,d=C.p(e),v=function(e,t){var n=C.w(a.$u?Date.UTC(a.$y,t,e):new Date(a.$y,t,e),a);return l?n:n.endOf(s)},f=function(e,t){return C.w(a.toDate()[e].apply(a.toDate("s"),(l?[0,0,0,0]:[23,59,59,999]).slice(t)),a)},m=this.$W,h=this.$M,g=this.$D,b="set"+(this.$u?"UTC":"");switch(d){case c:return l?v(1,0):v(31,11);case u:return l?v(1,h):v(0,h+1);case i:var y=this.$locale().weekStart||0,k=(m<y?m+7:m)-y;return v(l?g-k:g+(6-k),h);case s:case p:return f(b+"Hours",0);case r:return f(b+"Minutes",1);case o:return f(b+"Seconds",2);case n:return f(b+"Milliseconds",3);default:return this.clone()}},g.endOf=function(e){return this.startOf(e,!1)},g.$set=function(e,t){var a,i=C.p(e),d="set"+(this.$u?"UTC":""),v=(a={},a[s]=d+"Date",a[p]=d+"Date",a[u]=d+"Month",a[c]=d+"FullYear",a[r]=d+"Hours",a[o]=d+"Minutes",a[n]=d+"Seconds",a[l]=d+"Milliseconds",a)[i],f=i===s?this.$D+(t-this.$W):t;if(i===u||i===c){var m=this.clone().set(p,1);m.$d[v](f),m.init(),this.$d=m.set(p,Math.min(this.$D,m.daysInMonth())).$d}else v&&this.$d[v](f);return this.init(),this},g.set=function(e,t){return this.clone().$set(e,t)},g.get=function(e){return this[C.p(e)]()},g.add=function(l,d){var p,v=this;l=Number(l);var f=C.p(d),m=function(e){var t=x(v);return C.w(t.date(t.date()+Math.round(e*l)),v)};if(f===u)return this.set(u,this.$M+l);if(f===c)return this.set(c,this.$y+l);if(f===s)return m(1);if(f===i)return m(7);var h=(p={},p[o]=t,p[r]=a,p[n]=e,p)[f]||1,g=this.$d.getTime()+l*h;return C.w(g,this)},g.subtract=function(e,t){return this.add(-1*e,t)},g.format=function(e){var t=this,a=this.$locale();if(!this.isValid())return a.invalidDate||v;var l=e||"YYYY-MM-DDTHH:mm:ssZ",n=C.z(this),o=this.$H,r=this.$m,s=this.$M,i=a.weekdays,u=a.months,d=function(e,a,n,o){return e&&(e[a]||e(t,l))||n[a].slice(0,o)},c=function(e){return C.s(o%12||12,e,"0")},p=a.meridiem||function(e,t,a){var l=e<12?"AM":"PM";return a?l.toLowerCase():l},f={YY:String(this.$y).slice(-2),YYYY:this.$y,M:s+1,MM:C.s(s+1,2,"0"),MMM:d(a.monthsShort,s,u,3),MMMM:d(u,s),D:this.$D,DD:C.s(this.$D,2,"0"),d:String(this.$W),dd:d(a.weekdaysMin,this.$W,i,2),ddd:d(a.weekdaysShort,this.$W,i,3),dddd:i[this.$W],H:String(o),HH:C.s(o,2,"0"),h:c(1),hh:c(2),a:p(o,r,!0),A:p(o,r,!1),m:String(r),mm:C.s(r,2,"0"),s:String(this.$s),ss:C.s(this.$s,2,"0"),SSS:C.s(this.$ms,3,"0"),Z:n};return l.replace(m,(function(e,t){return t||f[e]||n.replace(":","")}))},g.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},g.diff=function(l,p,v){var f,m=C.p(p),h=x(l),g=(h.utcOffset()-this.utcOffset())*t,b=this-h,y=C.m(this,h);return y=(f={},f[c]=y/12,f[u]=y,f[d]=y/3,f[i]=(b-g)/6048e5,f[s]=(b-g)/864e5,f[r]=b/a,f[o]=b/t,f[n]=b/e,f)[m]||b,v?y:C.a(y)},g.daysInMonth=function(){return this.endOf(u).$D},g.$locale=function(){return k[this.$L]},g.locale=function(e,t){if(!e)return this.$L;var a=this.clone(),l=S(e,t,!0);return l&&(a.$L=l),a},g.clone=function(){return C.w(this.$d,this)},g.toDate=function(){return new Date(this.valueOf())},g.toJSON=function(){return this.isValid()?this.toISOString():null},g.toISOString=function(){return this.$d.toISOString()},g.toString=function(){return this.$d.toUTCString()},h}(),M=V.prototype;return x.prototype=M,[["$ms",l],["$s",n],["$m",o],["$H",r],["$W",s],["$M",u],["$y",c],["$D",p]].forEach((function(e){M[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),x.extend=function(e,t){return e.$i||(e(t,V,x),e.$i=!0),x},x.locale=S,x.isDayjs=w,x.unix=function(e){return x(1e3*e)},x.en=k[y],x.Ls=k,x.p={},x}(),Fa={exports:{}},Ba=Fa.exports=function(e,t,a){var l=t.prototype,n=function(e){return e&&(e.indexOf?e:e.s)},o=function(e,t,a,l,o){var r=e.name?e:e.$locale(),s=n(r[t]),i=n(r[a]),u=s||i.map((function(e){return e.slice(0,l)}));if(!o)return u;var d=r.weekStart;return u.map((function(e,t){return u[(t+(d||0))%7]}))},r=function(){return a.Ls[a.locale()]},s=function(e,t){return e.formats[t]||e.formats[t.toUpperCase()].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,a){return t||a.slice(1)}))},i=function(){var e=this;return{months:function(t){return t?t.format("MMMM"):o(e,"months")},monthsShort:function(t){return t?t.format("MMM"):o(e,"monthsShort","months",3)},firstDayOfWeek:function(){return e.$locale().weekStart||0},weekdays:function(t){return t?t.format("dddd"):o(e,"weekdays")},weekdaysMin:function(t){return t?t.format("dd"):o(e,"weekdaysMin","weekdays",2)},weekdaysShort:function(t){return t?t.format("ddd"):o(e,"weekdaysShort","weekdays",3)},longDateFormat:function(t){return s(e.$locale(),t)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};l.localeData=function(){return i.bind(this)()},a.localeData=function(){var e=r();return{firstDayOfWeek:function(){return e.weekStart||0},weekdays:function(){return a.weekdays()},weekdaysShort:function(){return a.weekdaysShort()},weekdaysMin:function(){return a.weekdaysMin()},months:function(){return a.months()},monthsShort:function(){return a.monthsShort()},longDateFormat:function(t){return s(e,t)},meridiem:e.meridiem,ordinal:e.ordinal}},a.months=function(){return o(r(),"months")},a.monthsShort=function(){return o(r(),"monthsShort","months",3)},a.weekdays=function(e){return o(r(),"weekdays",null,null,e)},a.weekdaysShort=function(e){return o(r(),"weekdaysShort","weekdays",3,e)},a.weekdaysMin=function(e){return o(r(),"weekdaysMin","weekdays",2,e)}},za={exports:{}},Ra=za.exports=function(){var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},t=/(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,a=/\d\d/,l=/\d\d?/,n=/\d*[^-_:/,()\s\d]+/,o={},r=function(e){return(e=+e)+(e>68?1900:2e3)},s=function(e){return function(t){this[e]=+t}},i=[/[+-]\d\d:?(\d\d)?|Z/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;if("Z"===e)return 0;var t=e.match(/([+-]|\d\d)/g),a=60*t[1]+(+t[2]||0);return 0===a?0:"+"===t[0]?-a:a}(e)}],u=function(e){var t=o[e];return t&&(t.indexOf?t:t.s.concat(t.f))},d=function(e,t){var a,l=o.meridiem;if(l){for(var n=1;n<=24;n+=1)if(e.indexOf(l(n,0,t))>-1){a=n>12;break}}else a=e===(t?"pm":"PM");return a},c={A:[n,function(e){this.afternoon=d(e,!1)}],a:[n,function(e){this.afternoon=d(e,!0)}],S:[/\d/,function(e){this.milliseconds=100*+e}],SS:[a,function(e){this.milliseconds=10*+e}],SSS:[/\d{3}/,function(e){this.milliseconds=+e}],s:[l,s("seconds")],ss:[l,s("seconds")],m:[l,s("minutes")],mm:[l,s("minutes")],H:[l,s("hours")],h:[l,s("hours")],HH:[l,s("hours")],hh:[l,s("hours")],D:[l,s("day")],DD:[a,s("day")],Do:[n,function(e){var t=o.ordinal,a=e.match(/\d+/);if(this.day=a[0],t)for(var l=1;l<=31;l+=1)t(l).replace(/\[|\]/g,"")===e&&(this.day=l)}],M:[l,s("month")],MM:[a,s("month")],MMM:[n,function(e){var t=u("months"),a=(u("monthsShort")||t.map((function(e){return e.slice(0,3)}))).indexOf(e)+1;if(a<1)throw new Error;this.month=a%12||a}],MMMM:[n,function(e){var t=u("months").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\d+/,s("year")],YY:[a,function(e){this.year=r(e)}],YYYY:[/\d{4}/,s("year")],Z:i,ZZ:i};function p(a){var l,n;l=a,n=o&&o.formats;for(var r=(a=l.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,a,l){var o=l&&l.toUpperCase();return a||n[l]||e[l]||n[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,a){return t||a.slice(1)}))}))).match(t),s=r.length,i=0;i<s;i+=1){var u=r[i],d=c[u],p=d&&d[0],v=d&&d[1];r[i]=v?{regex:p,parser:v}:u.replace(/^\[|\]$/g,"")}return function(e){for(var t={},a=0,l=0;a<s;a+=1){var n=r[a];if("string"==typeof n)l+=n.length;else{var o=n.regex,i=n.parser,u=e.slice(l),d=o.exec(u)[0];i.call(t,d),e=e.replace(d,"")}}return function(e){var t=e.afternoon;if(void 0!==t){var a=e.hours;t?a<12&&(e.hours+=12):12===a&&(e.hours=0),delete e.afternoon}}(t),t}}return function(e,t,a){a.p.customParseFormat=!0,e&&e.parseTwoDigitYear&&(r=e.parseTwoDigitYear);var l=t.prototype,n=l.parse;l.parse=function(e){var t=e.date,l=e.utc,r=e.args;this.$u=l;var s=r[1];if("string"==typeof s){var i=!0===r[2],u=!0===r[3],d=i||u,c=r[2];u&&(c=r[2]),o=this.$locale(),!i&&c&&(o=a.Ls[c]),this.$d=function(e,t,a){try{if(["x","X"].indexOf(t)>-1)return new Date(("X"===t?1e3:1)*e);var l=p(t)(e),n=l.year,o=l.month,r=l.day,s=l.hours,i=l.minutes,u=l.seconds,d=l.milliseconds,c=l.zone,v=new Date,f=r||(n||o?1:v.getDate()),m=n||v.getFullYear(),h=0;n&&!o||(h=o>0?o-1:v.getMonth());var g=s||0,b=i||0,y=u||0,k=d||0;return c?new Date(Date.UTC(m,h,f,g,b,y,k+60*c.offset*1e3)):a?new Date(Date.UTC(m,h,f,g,b,y,k)):new Date(m,h,f,g,b,y,k)}catch(w){return new Date("")}}(t,s,l),this.init(),c&&!0!==c&&(this.$L=this.locale(c).$L),d&&t!=this.format(s)&&(this.$d=new Date("")),o={}}else if(s instanceof Array)for(var v=s.length,f=1;f<=v;f+=1){r[1]=s[f-1];var m=a.apply(this,r);if(m.isValid()){this.$d=m.$d,this.$L=m.$L,this.init();break}f===v&&(this.$d=new Date(""))}else n.call(this,e)}}}();const La=["hours","minutes","seconds"],qa={date:"YYYY-MM-DD",dates:"YYYY-MM-DD",week:"gggg[w]ww",year:"YYYY",month:"YYYY-MM",datetime:"YYYY-MM-DD HH:mm:ss",monthrange:"YYYY-MM",daterange:"YYYY-MM-DD",datetimerange:"YYYY-MM-DD HH:mm:ss"},Ya=(e,t)=>[e>0?e-1:void 0,e,e<t?e+1:void 0],ja=e=>Array.from(Array.from({length:e}).keys()),Ha=e=>e.replace(/\W?m{1,2}|\W?ZZ/g,"").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi,"").trim(),Wa=e=>e.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g,"").trim(),Ka=function(e,t){const a=Z(e),l=Z(t);return a&&l?e.getTime()===t.getTime():!a&&!l&&e===t},Ua=function(e,t){const a=W(e),l=W(t);return a&&l?e.length===t.length&&e.every(((e,a)=>Ka(e,t[a]))):!a&&!l&&Ka(e,t)},Ga=function(e,t,a){const l=X(t)||"x"===t?Na(e).locale(a):Na(e,t).locale(a);return l.isValid()?l:void 0},Xa=function(e,t,a){return X(t)?e:"x"===t?+e:Na(e).locale(a).format(t)},Za=(e,t)=>{var a;const l=[],n=null==t?void 0:t();for(let o=0;o<e;o++)l.push(null!=(a=null==n?void 0:n.includes(o))&&a);return l},Qa=d({disabledHours:{type:c(Function)},disabledMinutes:{type:c(Function)},disabledSeconds:{type:c(Function)}}),Ja=d({visible:Boolean,actualVisible:{type:Boolean,default:void 0},format:{type:String,default:""}}),el=d({id:{type:c([Array,String])},name:{type:c([Array,String]),default:""},popperClass:{type:String,default:""},format:String,valueFormat:String,type:{type:String,default:""},clearable:{type:Boolean,default:!0},clearIcon:{type:c([String,Object]),default:Q},editable:{type:Boolean,default:!0},prefixIcon:{type:c([String,Object]),default:""},size:J,readonly:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},placeholder:{type:String,default:""},popperOptions:{type:c(Object),default:()=>({})},modelValue:{type:c([Date,Array,String,Number]),default:""},rangeSeparator:{type:String,default:"-"},startPlaceholder:String,endPlaceholder:String,defaultValue:{type:c([Date,Array])},defaultTime:{type:c([Date,Array])},isRange:{type:Boolean,default:!1},...Qa,disabledDate:{type:Function},cellClassName:{type:Function},shortcuts:{type:Array,default:()=>[]},arrowControl:{type:Boolean,default:!1},label:{type:String,default:void 0},tabindex:{type:c([String,Number]),default:0},validateEvent:{type:Boolean,default:!0},unlinkPanels:Boolean}),tl=["id","name","placeholder","value","disabled","readonly"],al=["id","name","placeholder","value","disabled","readonly"],ll=m({name:"Picker",props:el,emits:["update:modelValue","change","focus","blur","calendar-change","panel-change","visible-change","keydown"],setup(e,{expose:t,emit:a}){const l=e,{lang:n}=la(),o=g("date"),r=g("input"),s=g("range"),i=ee(te,{}),u=ee(ae,{}),d=ee("ElPopperOptions",{}),c=b(),p=b(),v=b(!1),f=b(!1),m=b(null);let h=!1,w=!1;le(v,(e=>{e?m.value=l.modelValue:(De.value=null,H((()=>{M(l.modelValue)})))}));const M=(e,t)=>{var n;!t&&Ua(e,m.value)||(a("change",e),l.validateEvent&&(null==(n=u.validate)||n.call(u,"change").catch((e=>ne()))))},I=e=>{if(!Ua(l.modelValue,e)){let t;W(e)?t=e.map((e=>Xa(e,l.valueFormat,n.value))):e&&(t=Xa(e,l.valueFormat,n.value)),a("update:modelValue",e?t:e,n.value)}},P=y((()=>{if(p.value){const e=xe.value?p.value:p.value.$el;return Array.from(e.querySelectorAll("input"))}return[]})),E=(e,t,a)=>{const l=P.value;l.length&&(a&&"min"!==a?"max"===a&&(l[1].setSelectionRange(e,t),l[1].focus()):(l[0].setSelectionRange(e,t),l[0].focus()))},N=()=>{K(!0,!0),H((()=>{w=!1}))},F=(e="",t=!1)=>{let a;t||N(),v.value=t,a=W(e)?e.map((e=>e.toDate())):e?e.toDate():e,De.value=null,I(a)},z=()=>{f.value=!0},L=()=>{a("visible-change",!0)},Y=e=>{(null==e?void 0:e.key)===ce.esc&&K(!0,!0)},j=()=>{f.value=!1,w=!1,a("visible-change",!1)},K=(e=!0,t=!1)=>{w=t;const[a,l]=D(P);let n=a;!e&&xe.value&&(n=l),n&&n.focus()},U=e=>{l.readonly||Z.value||v.value||w||(v.value=!0,a("focus",e))};let G;const X=e=>{const t=async()=>{setTimeout((()=>{var n,o;G===t&&((null==(n=c.value)?void 0:n.isFocusInsideContent())&&!h||0!==P.value.filter((e=>e.contains(document.activeElement))).length||($e(),v.value=!1,a("blur",e),l.validateEvent&&(null==(o=u.validate)||o.call(u,"blur").catch((e=>ne())))),h=!1)}),0)};G=t,t()},Z=y((()=>l.disabled||i.disabled)),Q=y((()=>{let e;if(be.value?Be.value.getDefaultValue&&(e=Be.value.getDefaultValue()):e=W(l.modelValue)?l.modelValue.map((e=>Ga(e,l.valueFormat,n.value))):Ga(l.modelValue,l.valueFormat,n.value),Be.value.getRangeAvailableTime){const t=Be.value.getRangeAvailableTime(e);Et(t,e)||(e=t,I(W(e)?e.map((e=>e.toDate())):e.toDate()))}return W(e)&&e.some((e=>!e))&&(e=[]),e})),J=y((()=>{if(!Be.value.panelReady)return"";const e=_e(Q.value);return W(De.value)?[De.value[0]||e&&e[0]||"",De.value[1]||e&&e[1]||""]:null!==De.value?De.value:!ve.value&&be.value||!v.value&&be.value?"":e?fe.value?e.join(", "):e:""})),pe=y((()=>l.type.includes("time"))),ve=y((()=>l.type.startsWith("time"))),fe=y((()=>"dates"===l.type)),me=y((()=>l.prefixIcon||(pe.value?oe:re))),he=b(!1),ge=e=>{l.readonly||Z.value||he.value&&(e.stopPropagation(),N(),I(null),M(null,!0),he.value=!1,v.value=!1,Be.value.handleClear&&Be.value.handleClear())},be=y((()=>{const{modelValue:e}=l;return!e||W(e)&&!e.filter(Boolean).length})),ye=async e=>{var t;l.readonly||Z.value||("INPUT"!==(null==(t=e.target)?void 0:t.tagName)||P.value.includes(document.activeElement))&&(v.value=!0)},ke=()=>{l.readonly||Z.value||!be.value&&l.clearable&&(he.value=!0)},we=()=>{he.value=!1},Se=e=>{var t;("INPUT"!==(null==(t=e.touches[0].target)?void 0:t.tagName)||P.value.includes(document.activeElement))&&(v.value=!0)},xe=y((()=>l.type.includes("range"))),Ce=se(),Ve=y((()=>{var e,t;return null==(t=null==(e=D(c))?void 0:e.popperRef)?void 0:t.contentRef})),Me=y((()=>{var e;return D(xe)?D(p):null==(e=D(p))?void 0:e.$el}));k(Me,(e=>{const t=D(Ve),a=D(Me);t&&(e.target===t||e.composedPath().includes(t))||e.target===a||e.composedPath().includes(a)||(v.value=!1)}));const De=b(null),$e=()=>{if(De.value){const e=Oe(J.value);e&&Ie(e)&&(I(W(e)?e.map((e=>e.toDate())):e.toDate()),De.value=null)}""===De.value&&(I(null),M(null),De.value=null)},Oe=e=>e?Be.value.parseUserInput(e):null,_e=e=>e?Be.value.formatToString(e):null,Ie=e=>Be.value.isValidValue(e),Pe=async e=>{const{code:t}=e;if(a("keydown",e),t!==ce.esc)if(t===ce.down&&(Be.value.handleFocusPicker&&(e.preventDefault(),e.stopPropagation()),!1===v.value&&(v.value=!0,await H()),Be.value.handleFocusPicker))Be.value.handleFocusPicker();else{if(t!==ce.tab)return t===ce.enter||t===ce.numpadEnter?((null===De.value||""===De.value||Ie(Oe(J.value)))&&($e(),v.value=!1),void e.stopPropagation()):void(De.value?e.stopPropagation():Be.value.handleKeydownInput&&Be.value.handleKeydownInput(e));h=!0}else!0===v.value&&(v.value=!1,e.preventDefault(),e.stopPropagation())},Te=e=>{De.value=e,v.value||(v.value=!0)},Ee=e=>{const t=e.target;De.value?De.value=[t.value,De.value[1]]:De.value=[t.value,null]},Ae=e=>{const t=e.target;De.value?De.value=[De.value[0],t.value]:De.value=[null,t.value]},Ne=()=>{var e;const t=De.value,a=Oe(t&&t[0]),l=D(Q);if(a&&a.isValid()){De.value=[_e(a),(null==(e=J.value)?void 0:e[1])||null];const t=[a,l&&(l[1]||null)];Ie(t)&&(I(t),De.value=null)}},Fe=()=>{var e;const t=D(De),a=Oe(t&&t[1]),l=D(Q);if(a&&a.isValid()){De.value=[(null==(e=D(J))?void 0:e[0])||null,_e(a)];const t=[l&&l[0],a];Ie(t)&&(I(t),De.value=null)}},Be=b({}),ze=e=>{Be.value[e[0]]=e[1],Be.value.panelReady=!0},Re=e=>{a("calendar-change",e)},Le=(e,t,l)=>{a("panel-change",e,t,l)};return ie("EP_PICKER_BASE",{props:l}),t({focus:K,handleFocusInput:U,handleBlurInput:X,onPick:F}),(e,t)=>(S(),x(D(St),R({ref_key:"refPopper",ref:c,visible:v.value,"onUpdate:visible":t[2]||(t[2]=e=>v.value=e),effect:"light",pure:"",trigger:"click"},e.$attrs,{role:"dialog",teleported:"",transition:`${D(o).namespace.value}-zoom-in-top`,"popper-class":[`${D(o).namespace.value}-picker__popper`,e.popperClass],"popper-options":D(d),"fallback-placements":["bottom","top","right","left"],"gpu-acceleration":!1,"stop-popper-mouse-event":!1,"hide-after":0,persistent:"",onBeforeShow:z,onShow:L,onHide:j}),{default:C((()=>[D(xe)?(S(),$("div",{key:1,ref_key:"inputRef",ref:p,class:_([D(o).b("editor"),D(o).bm("editor",e.type),D(r).e("wrapper"),D(o).is("disabled",D(Z)),D(o).is("active",v.value),D(s).b("editor"),D(Ce)?D(s).bm("editor",D(Ce)):"",e.$attrs.class]),style:B(e.$attrs.style),onClick:U,onMousedown:ye,onMouseenter:ke,onMouseleave:we,onTouchstart:Se,onKeydown:Pe},[D(me)?(S(),x(D(O),{key:0,class:_([D(r).e("icon"),D(s).e("icon")]),onMousedown:ye,onTouchstart:Se},{default:C((()=>[(S(),x(ue(D(me))))])),_:1},8,["class"])):de("v-if",!0),V("input",{id:e.id&&e.id[0],autocomplete:"off",name:e.name&&e.name[0],placeholder:e.startPlaceholder,value:D(J)&&D(J)[0],disabled:D(Z),readonly:!e.editable||e.readonly,class:_(D(s).b("input")),onInput:Ee,onChange:Ne,onFocus:U,onBlur:X},null,42,tl),T(e.$slots,"range-separator",{},(()=>[V("span",{class:_(D(s).b("separator"))},A(e.rangeSeparator),3)])),V("input",{id:e.id&&e.id[1],autocomplete:"off",name:e.name&&e.name[1],placeholder:e.endPlaceholder,value:D(J)&&D(J)[1],disabled:D(Z),readonly:!e.editable||e.readonly,class:_(D(s).b("input")),onFocus:U,onBlur:X,onInput:Ae,onChange:Fe},null,42,al),e.clearIcon?(S(),x(D(O),{key:1,class:_([D(r).e("icon"),D(s).e("close-icon"),{[D(s).e("close-icon--hidden")]:!he.value}]),onClick:ge},{default:C((()=>[(S(),x(ue(e.clearIcon)))])),_:1},8,["class"])):de("v-if",!0)],38)):(S(),x(D(Dt),{key:0,id:e.id,ref_key:"inputRef",ref:p,"container-role":"combobox","model-value":D(J),name:e.name,size:D(Ce),disabled:D(Z),placeholder:e.placeholder,class:_([D(o).b("editor"),D(o).bm("editor",e.type),e.$attrs.class]),style:B(e.$attrs.style),readonly:!e.editable||e.readonly||D(fe)||"week"===e.type,label:e.label,tabindex:e.tabindex,"validate-event":e.validateEvent,onInput:Te,onFocus:U,onBlur:X,onKeydown:Pe,onChange:$e,onMousedown:ye,onMouseenter:ke,onMouseleave:we,onTouchstart:Se,onClick:t[0]||(t[0]=q((()=>{}),["stop"]))},{prefix:C((()=>[D(me)?(S(),x(D(O),{key:0,class:_(D(r).e("icon")),onMousedown:ye,onTouchstart:Se},{default:C((()=>[(S(),x(ue(D(me))))])),_:1},8,["class"])):de("v-if",!0)])),suffix:C((()=>[he.value&&e.clearIcon?(S(),x(D(O),{key:0,class:_(`${D(r).e("icon")} clear-icon`),onClick:q(ge,["stop"])},{default:C((()=>[(S(),x(ue(e.clearIcon)))])),_:1},8,["class","onClick"])):de("v-if",!0)])),_:1},8,["id","model-value","name","size","disabled","placeholder","class","style","readonly","label","tabindex","validate-event","onKeydown"]))])),content:C((()=>[T(e.$slots,"default",{visible:v.value,actualVisible:f.value,parsedValue:D(Q),format:e.format,unlinkPanels:e.unlinkPanels,type:e.type,defaultValue:e.defaultValue,onPick:F,onSelectRange:E,onSetPickerOption:ze,onCalendarChange:Re,onPanelChange:Le,onKeydown:Y,onMousedown:t[1]||(t[1]=q((()=>{}),["stop"]))})])),_:3},16,["visible","transition","popper-class","popper-options"]))}});var nl=j(ll,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/common/picker.vue"]]);const ol=d({...Ja,datetimeRole:String,parsedValue:{type:c(Object)}}),rl=({getAvailableHours:e,getAvailableMinutes:t,getAvailableSeconds:a})=>{const l={};return{timePickerOptions:l,getAvailableTime:(l,n,o,r)=>{const s={hour:e,minute:t,second:a};let i=l;return["hour","minute","second"].forEach((e=>{if(s[e]){let t;const a=s[e];switch(e){case"minute":t=a(i.hour(),n,r);break;case"second":t=a(i.hour(),i.minute(),n,r);break;default:t=a(n,r)}if((null==t?void 0:t.length)&&!t.includes(i[e]())){const a=o?0:t.length-1;i=i[e](t[a])}}})),i},onSetOption:([e,t])=>{l[e]=t}}},sl=e=>e.map(((e,t)=>e||t)).filter((e=>!0!==e)),il=(e,t,a)=>({getHoursList:(t,a)=>Za(24,e&&(()=>null==e?void 0:e(t,a))),getMinutesList:(e,a,l)=>Za(60,t&&(()=>null==t?void 0:t(e,a,l))),getSecondsList:(e,t,l,n)=>Za(60,a&&(()=>null==a?void 0:a(e,t,l,n)))}),ul=(e,t,a)=>{const{getHoursList:l,getMinutesList:n,getSecondsList:o}=il(e,t,a);return{getAvailableHours:(e,t)=>sl(l(e,t)),getAvailableMinutes:(e,t,a)=>sl(n(e,t,a)),getAvailableSeconds:(e,t,a,l)=>sl(o(e,t,a,l))}},dl=e=>{const t=b(e.parsedValue);return le((()=>e.visible),(a=>{a||(t.value=e.parsedValue)})),t},cl=d({role:{type:String,required:!0},spinnerDate:{type:c(Object),required:!0},showSeconds:{type:Boolean,default:!0},arrowControl:Boolean,amPmMode:{type:c(String),default:""},...Qa}),pl=["onClick"],vl=["onMouseenter"];var fl=j(m({__name:"basic-time-spinner",props:cl,emits:["change","select-range","set-option"],setup(e,{emit:t}){const a=e,l=g("time"),{getHoursList:n,getMinutesList:o,getSecondsList:r}=il(a.disabledHours,a.disabledMinutes,a.disabledSeconds);let s=!1;const i=b(),u={hours:b(),minutes:b(),seconds:b()},d=y((()=>a.showSeconds?La:La.slice(0,2))),c=y((()=>{const{spinnerDate:e}=a;return{hours:e.hour(),minutes:e.minute(),seconds:e.second()}})),p=y((()=>{const{hours:e,minutes:t}=D(c);return{hours:n(a.role),minutes:o(e,a.role),seconds:r(e,t,a.role)}})),v=y((()=>{const{hours:e,minutes:t,seconds:a}=D(c);return{hours:Ya(e,23),minutes:Ya(t,59),seconds:Ya(a,59)}})),f=aa((e=>{s=!1,k(e)}),200),m=e=>{if(!!!a.amPmMode)return"";let t=e<12?" am":" pm";return"A"===a.amPmMode&&(t=t.toUpperCase()),t},h=e=>{let a;switch(e){case"hours":a=[0,2];break;case"minutes":a=[3,5];break;case"seconds":a=[6,8]}const[l,n]=a;t("select-range",l,n),i.value=e},k=e=>{B(e,D(c)[e])},I=()=>{k("hours"),k("minutes"),k("seconds")},T=e=>e.querySelector(`.${l.namespace.value}-scrollbar__wrap`),B=(e,t)=>{if(a.arrowControl)return;const l=D(u[e]);l&&l.$el&&(T(l.$el).scrollTop=Math.max(0,t*z(e)))},z=e=>{const t=D(u[e]);return(null==t?void 0:t.$el.querySelector("li").offsetHeight)||0},R=()=>{q(1)},L=()=>{q(-1)},q=e=>{i.value||h("hours");const t=i.value;let a=D(c)[t];const l="hours"===i.value?24:60;a=(a+e+l)%l,Y(t,a),B(t,a),H((()=>h(t)))},Y=(e,l)=>{if(D(p)[e][l])return;const{hours:n,minutes:o,seconds:r}=D(c);let s;switch(e){case"hours":s=a.spinnerDate.hour(l).minute(o).second(r);break;case"minutes":s=a.spinnerDate.hour(n).minute(l).second(r);break;case"seconds":s=a.spinnerDate.hour(n).minute(o).second(l)}t("change",s)},j=e=>D(u[e]).$el.offsetHeight,W=()=>{const e=e=>{const t=D(u[e]);t&&t.$el&&(T(t.$el).onscroll=()=>{(e=>{s=!0,f(e);const t=Math.min(Math.round((T(D(u[e]).$el).scrollTop-(.5*j(e)-10)/z(e)+3)/z(e)),"hours"===e?23:59);Y(e,t)})(e)})};e("hours"),e("minutes"),e("seconds")};w((()=>{H((()=>{!a.arrowControl&&W(),I(),"start"===a.role&&h("hours")}))}));return t("set-option",[`${a.role}_scrollDown`,q]),t("set-option",[`${a.role}_emitSelectRange`,h]),le((()=>a.spinnerDate),(()=>{s||I()})),(e,t)=>(S(),$("div",{class:_([D(l).b("spinner"),{"has-seconds":e.showSeconds}])},[e.arrowControl?de("v-if",!0):(S(!0),$(N,{key:0},P(D(d),(t=>(S(),x(D(F),{key:t,ref_for:!0,ref:e=>{return a=e,void(u[t].value=a);var a},class:_(D(l).be("spinner","wrapper")),"wrap-style":"max-height: inherit;","view-class":D(l).be("spinner","list"),noresize:"",tag:"ul",onMouseenter:e=>h(t),onMousemove:e=>k(t)},{default:C((()=>[(S(!0),$(N,null,P(D(p)[t],((a,n)=>(S(),$("li",{key:n,class:_([D(l).be("spinner","item"),D(l).is("active",n===D(c)[t]),D(l).is("disabled",a)]),onClick:e=>((e,{value:t,disabled:a})=>{a||(Y(e,t),h(e),B(e,t))})(t,{value:n,disabled:a})},["hours"===t?(S(),$(N,{key:0},[E(A(("0"+(e.amPmMode?n%12||12:n)).slice(-2))+A(m(n)),1)],64)):(S(),$(N,{key:1},[E(A(("0"+n).slice(-2)),1)],64))],10,pl)))),128))])),_:2},1032,["class","view-class","onMouseenter","onMousemove"])))),128)),e.arrowControl?(S(!0),$(N,{key:1},P(D(d),(t=>(S(),$("div",{key:t,class:_([D(l).be("spinner","wrapper"),D(l).is("arrow")]),onMouseenter:e=>h(t)},[pe((S(),x(D(O),{class:_(["arrow-up",D(l).be("spinner","arrow")])},{default:C((()=>[M(D(ve))])),_:1},8,["class"])),[[D(jt),L]]),pe((S(),x(D(O),{class:_(["arrow-down",D(l).be("spinner","arrow")])},{default:C((()=>[M(D(fe))])),_:1},8,["class"])),[[D(jt),R]]),V("ul",{class:_(D(l).be("spinner","list"))},[(S(!0),$(N,null,P(D(v)[t],((a,n)=>(S(),$("li",{key:n,class:_([D(l).be("spinner","item"),D(l).is("active",a===D(c)[t]),D(l).is("disabled",D(p)[t][a])])},["number"==typeof a?(S(),$(N,{key:0},["hours"===t?(S(),$(N,{key:0},[E(A(("0"+(e.amPmMode?a%12||12:a)).slice(-2))+A(m(a)),1)],64)):(S(),$(N,{key:1},[E(A(("0"+a).slice(-2)),1)],64))],64)):de("v-if",!0)],2)))),128))],2)],42,vl)))),128)):de("v-if",!0)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"]]);const ml=m({__name:"panel-time-pick",props:ol,emits:["pick","select-range","set-picker-option"],setup(e,{emit:t}){const a=e,l=ee("EP_PICKER_BASE"),{arrowControl:n,disabledHours:o,disabledMinutes:r,disabledSeconds:s,defaultValue:i}=l.props,{getAvailableHours:u,getAvailableMinutes:d,getAvailableSeconds:c}=ul(o,r,s),p=g("time"),{t:v,lang:f}=la(),m=b([0,2]),h=dl(a),k=y((()=>me(a.actualVisible)?`${p.namespace.value}-zoom-in-top`:"")),w=y((()=>a.format.includes("ss"))),O=y((()=>a.format.includes("A")?"A":a.format.includes("a")?"a":"")),I=()=>{t("pick",h.value,!1)},P=e=>{if(!a.visible)return;const l=B(e).millisecond(0);t("pick",l,!0)},T=(e,a)=>{t("select-range",e,a),m.value=[e,a]},{timePickerOptions:E,onSetOption:N,getAvailableTime:F}=rl({getAvailableHours:u,getAvailableMinutes:d,getAvailableSeconds:c}),B=e=>F(e,a.datetimeRole||"",!0);return t("set-picker-option",["isValidValue",e=>{const t=Na(e).locale(f.value),a=B(t);return t.isSame(a)}]),t("set-picker-option",["formatToString",e=>e?e.format(a.format):null]),t("set-picker-option",["parseUserInput",e=>e?Na(e,a.format).locale(f.value):null]),t("set-picker-option",["handleKeydownInput",e=>{const t=e.code,{left:a,right:l,up:n,down:o}=ce;if([a,l].includes(t)){return(e=>{const t=[0,3].concat(w.value?[6]:[]),a=["hours","minutes"].concat(w.value?["seconds"]:[]),l=(t.indexOf(m.value[0])+e+t.length)%t.length;E.start_emitSelectRange(a[l])})(t===a?-1:1),void e.preventDefault()}if([n,o].includes(t)){const a=t===n?-1:1;return E.start_scrollDown(a),void e.preventDefault()}}]),t("set-picker-option",["getRangeAvailableTime",B]),t("set-picker-option",["getDefaultValue",()=>Na(i).locale(f.value)]),(e,l)=>(S(),x(he,{name:D(k)},{default:C((()=>[e.actualVisible||e.visible?(S(),$("div",{key:0,class:_(D(p).b("panel"))},[V("div",{class:_([D(p).be("panel","content"),{"has-seconds":D(w)}])},[M(fl,{ref:"spinner",role:e.datetimeRole||"start","arrow-control":D(n),"show-seconds":D(w),"am-pm-mode":D(O),"spinner-date":e.parsedValue,"disabled-hours":D(o),"disabled-minutes":D(r),"disabled-seconds":D(s),onChange:P,onSetOption:D(N),onSelectRange:T},null,8,["role","arrow-control","show-seconds","am-pm-mode","spinner-date","disabled-hours","disabled-minutes","disabled-seconds","onSetOption"])],2),V("div",{class:_(D(p).be("panel","footer"))},[V("button",{type:"button",class:_([D(p).be("panel","btn"),"cancel"]),onClick:I},A(D(v)("el.datepicker.cancel")),3),V("button",{type:"button",class:_([D(p).be("panel","btn"),"confirm"]),onClick:l[0]||(l[0]=e=>((e=!1,l=!1)=>{l||t("pick",a.parsedValue,e)})())},A(D(v)("el.datepicker.confirm")),3)],2)],2)):de("v-if",!0)])),_:1},8,["name"]))}});var hl=j(ml,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"]]);const gl=d({...Ja,parsedValue:{type:c(Array)}}),bl=["disabled"],yl=m({__name:"panel-time-range",props:gl,emits:["pick","select-range","set-picker-option"],setup(e,{emit:t}){const a=e,l=(e,t)=>{const a=[];for(let l=e;l<=t;l++)a.push(l);return a},{t:n,lang:o}=la(),r=g("time"),s=g("picker"),i=ee("EP_PICKER_BASE"),{arrowControl:u,disabledHours:d,disabledMinutes:c,disabledSeconds:p,defaultValue:v}=i.props,f=y((()=>a.parsedValue[0])),m=y((()=>a.parsedValue[1])),h=dl(a),k=y((()=>a.format.includes("ss"))),w=y((()=>a.format.includes("A")?"A":a.format.includes("a")?"a":"")),x=e=>{O(e.millisecond(0),m.value)},C=e=>{O(f.value,e.millisecond(0))},O=(e,a)=>{t("pick",[e,a],!0)},I=y((()=>f.value>m.value)),P=b([0,2]),T=(e,a)=>{t("select-range",e,a,"min"),P.value=[e,a]},E=y((()=>k.value?11:8)),N=(e,a)=>{t("select-range",e,a,"max");const l=D(E);P.value=[e+l,a+l]},F=(e,t)=>{const a=d?d(e):[],n="start"===e,o=(t||(n?m.value:f.value)).hour(),r=n?l(o+1,23):l(0,o-1);return wa(a,r)},B=(e,t,a)=>{const n=c?c(e,t):[],o="start"===t,r=a||(o?m.value:f.value);if(e!==r.hour())return n;const s=r.minute(),i=o?l(s+1,59):l(0,s-1);return wa(n,i)},z=(e,t,a,n)=>{const o=p?p(e,t,a):[],r="start"===a,s=n||(r?m.value:f.value),i=s.hour(),u=s.minute();if(e!==i||t!==u)return o;const d=s.second(),c=r?l(d+1,59):l(0,d-1);return wa(o,c)},R=([e,t])=>[H(e,"start",!0,t),H(t,"end",!1,e)],{getAvailableHours:L,getAvailableMinutes:q,getAvailableSeconds:Y}=ul(F,B,z),{timePickerOptions:j,getAvailableTime:H,onSetOption:K}=rl({getAvailableHours:L,getAvailableMinutes:q,getAvailableSeconds:Y});return t("set-picker-option",["formatToString",e=>e?W(e)?e.map((e=>e.format(a.format))):e.format(a.format):null]),t("set-picker-option",["parseUserInput",e=>e?W(e)?e.map((e=>Na(e,a.format).locale(o.value))):Na(e,a.format).locale(o.value):null]),t("set-picker-option",["isValidValue",e=>{const t=e.map((e=>Na(e).locale(o.value))),a=R(t);return t[0].isSame(a[0])&&t[1].isSame(a[1])}]),t("set-picker-option",["handleKeydownInput",e=>{const t=e.code,{left:a,right:l,up:n,down:o}=ce;if([a,l].includes(t)){return(e=>{const t=k.value?[0,3,6,11,14,17]:[0,3,8,11],a=["hours","minutes"].concat(k.value?["seconds"]:[]),l=(t.indexOf(P.value[0])+e+t.length)%t.length,n=t.length/2;l<n?j.start_emitSelectRange(a[l]):j.end_emitSelectRange(a[l-n])})(t===a?-1:1),void e.preventDefault()}if([n,o].includes(t)){const a=t===n?-1:1,l=P.value[0]<E.value?"start":"end";return j[`${l}_scrollDown`](a),void e.preventDefault()}}]),t("set-picker-option",["getDefaultValue",()=>{if(W(v))return v.map((e=>Na(e).locale(o.value)));const e=Na(v).locale(o.value);return[e,e.add(60,"m")]}]),t("set-picker-option",["getRangeAvailableTime",R]),(e,a)=>e.actualVisible?(S(),$("div",{key:0,class:_([D(r).b("range-picker"),D(s).b("panel")])},[V("div",{class:_(D(r).be("range-picker","content"))},[V("div",{class:_(D(r).be("range-picker","cell"))},[V("div",{class:_(D(r).be("range-picker","header"))},A(D(n)("el.datepicker.startTime")),3),V("div",{class:_([D(r).be("range-picker","body"),D(r).be("panel","content"),D(r).is("arrow",D(u)),{"has-seconds":D(k)}])},[M(fl,{ref:"minSpinner",role:"start","show-seconds":D(k),"am-pm-mode":D(w),"arrow-control":D(u),"spinner-date":D(f),"disabled-hours":F,"disabled-minutes":B,"disabled-seconds":z,onChange:x,onSetOption:D(K),onSelectRange:T},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","onSetOption"])],2)],2),V("div",{class:_(D(r).be("range-picker","cell"))},[V("div",{class:_(D(r).be("range-picker","header"))},A(D(n)("el.datepicker.endTime")),3),V("div",{class:_([D(r).be("range-picker","body"),D(r).be("panel","content"),D(r).is("arrow",D(u)),{"has-seconds":D(k)}])},[M(fl,{ref:"maxSpinner",role:"end","show-seconds":D(k),"am-pm-mode":D(w),"arrow-control":D(u),"spinner-date":D(m),"disabled-hours":F,"disabled-minutes":B,"disabled-seconds":z,onChange:C,onSetOption:D(K),onSelectRange:N},null,8,["show-seconds","am-pm-mode","arrow-control","spinner-date","onSetOption"])],2)],2)],2),V("div",{class:_(D(r).be("panel","footer"))},[V("button",{type:"button",class:_([D(r).be("panel","btn"),"cancel"]),onClick:a[0]||(a[0]=e=>{t("pick",h.value,!1)})},A(D(n)("el.datepicker.cancel")),3),V("button",{type:"button",class:_([D(r).be("panel","btn"),"confirm"]),disabled:D(I),onClick:a[1]||(a[1]=e=>((e=!1)=>{t("pick",[f.value,m.value],e)})())},A(D(n)("el.datepicker.confirm")),11,bl)],2)],2)):de("v-if",!0)}});var kl=j(yl,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-range.vue"]]);Na.extend(Ra);var wl=m({name:"ElTimePicker",install:null,props:{...el,isRange:{type:Boolean,default:!1}},emits:["update:modelValue"],setup(e,t){const a=b(),[l,n]=e.isRange?["timerange",kl]:["time",hl],o=e=>t.emit("update:modelValue",e);return ie("ElPopperOptions",e.popperOptions),t.expose({focus:e=>{var t;null==(t=a.value)||t.handleFocusInput(e)},blur:e=>{var t;null==(t=a.value)||t.handleBlurInput(e)}}),()=>{var t;const r=null!=(t=e.format)?t:"HH:mm:ss";return M(nl,R(e,{ref:a,type:l,format:r,"onUpdate:modelValue":o}),{default:e=>M(n,e,null)})}}});const Sl=wl;Sl.install=e=>{e.component(Sl.name,Sl)};const xl=Sl,Cl=d({size:J,disabled:Boolean,label:{type:[String,Number,Boolean],default:""}}),Vl=d({...Cl,modelValue:{type:[String,Number,Boolean],default:""},name:{type:String,default:""},border:Boolean}),Ml={[Xt]:e=>v(e)||ge(e)||be(e),[Qt]:e=>v(e)||ge(e)||be(e)},Dl=(e,t)=>{const a=b(),l=ee(Da,void 0),n=y((()=>!!l)),o=y({get:()=>n.value?l.modelValue:e.modelValue,set(o){n.value?l.changeEvent(o):t&&t(Xt,o),a.value.checked=e.modelValue===e.label}}),r=se(y((()=>null==l?void 0:l.size))),s=ye(y((()=>null==l?void 0:l.disabled))),i=b(!1),u=y((()=>s.value||n.value&&o.value!==e.label?-1:0));return{radioRef:a,isGroup:n,radioGroup:l,focus:i,size:r,disabled:s,tabIndex:u,modelValue:o}},$l=["value","name","disabled"];var Ol=j(m({name:"ElRadio",props:Vl,emits:Ml,setup(e,{emit:t}){const a=e,l=g("radio"),{radioRef:n,radioGroup:o,focus:r,size:s,disabled:i,modelValue:u}=Dl(a,t);function d(){H((()=>t("change",u.value)))}return(e,t)=>{var a;return S(),$("label",{class:_([D(l).b(),D(l).is("disabled",D(i)),D(l).is("focus",D(r)),D(l).is("bordered",e.border),D(l).is("checked",D(u)===e.label),D(l).m(D(s))])},[V("span",{class:_([D(l).e("input"),D(l).is("disabled",D(i)),D(l).is("checked",D(u)===e.label)])},[pe(V("input",{ref_key:"radioRef",ref:n,"onUpdate:modelValue":t[0]||(t[0]=e=>Y(u)?u.value=e:null),class:_(D(l).e("original")),value:e.label,name:e.name||(null==(a=D(o))?void 0:a.name),disabled:D(i),type:"radio",onFocus:t[1]||(t[1]=e=>r.value=!0),onBlur:t[2]||(t[2]=e=>r.value=!1),onChange:d},null,42,$l),[[ke,D(u)]]),V("span",{class:_(D(l).e("inner"))},null,2)],2),V("span",{class:_(D(l).e("label")),onKeydown:t[3]||(t[3]=q((()=>{}),["stop"]))},[T(e.$slots,"default",{},(()=>[E(A(e.label),1)]))],34)],2)}}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio.vue"]]);const _l=d({...Cl,name:{type:String,default:""}}),Il=["value","name","disabled"];var Pl=j(m({name:"ElRadioButton",props:_l,setup(e){const t=e,a=g("radio"),{radioRef:l,focus:n,size:o,disabled:r,modelValue:s,radioGroup:i}=Dl(t),u=y((()=>({backgroundColor:(null==i?void 0:i.fill)||"",borderColor:(null==i?void 0:i.fill)||"",boxShadow:(null==i?void 0:i.fill)?`-1px 0 0 0 ${i.fill}`:"",color:(null==i?void 0:i.textColor)||""})));return(e,t)=>{var d;return S(),$("label",{class:_([D(a).b("button"),D(a).is("active",D(s)===e.label),D(a).is("disabled",D(r)),D(a).is("focus",D(n)),D(a).bm("button",D(o))])},[pe(V("input",{ref_key:"radioRef",ref:l,"onUpdate:modelValue":t[0]||(t[0]=e=>Y(s)?s.value=e:null),class:_(D(a).be("button","original-radio")),value:e.label,type:"radio",name:e.name||(null==(d=D(i))?void 0:d.name),disabled:D(r),onFocus:t[1]||(t[1]=e=>n.value=!0),onBlur:t[2]||(t[2]=e=>n.value=!1)},null,42,Il),[[ke,D(s)]]),V("span",{class:_(D(a).be("button","inner")),style:B(D(s)===e.label?D(u):{}),onKeydown:t[3]||(t[3]=q((()=>{}),["stop"]))},[T(e.$slots,"default",{},(()=>[E(A(e.label),1)]))],38)],2)}}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-button.vue"]]);const Tl=d({id:{type:String,default:void 0},size:J,disabled:Boolean,modelValue:{type:[String,Number,Boolean],default:""},fill:{type:String,default:""},label:{type:String,default:void 0},textColor:{type:String,default:""},name:{type:String,default:void 0}}),El=["id","aria-label","aria-labelledby"];var Al=j(m({name:"ElRadioGroup",props:Tl,emits:Ml,setup(e,{emit:t}){const a=e,l=g("radio"),n=Jt(),o=b(),{formItem:r}=ea(),{inputId:s,isLabeledByFormItem:i}=ta(a,{formItemContext:r});w((()=>{const e=o.value.querySelectorAll("[type=radio]"),t=e[0];!Array.from(e).some((e=>e.checked))&&t&&(t.tabIndex=0)}));const u=y((()=>a.name||n.value));return ie(Da,we({...Se(a),changeEvent:e=>{t(Xt,e),H((()=>t("change",e)))},name:u})),le((()=>a.modelValue),(()=>null==r?void 0:r.validate("change").catch((e=>ne())))),(e,t)=>(S(),$("div",{id:D(s),ref_key:"radioGroupRef",ref:o,class:_(D(l).b("group")),role:"radiogroup","aria-label":D(i)?void 0:e.label||"radio-group","aria-labelledby":D(i)?D(r).labelId:void 0},[T(e.$slots,"default")],10,El))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/radio/src/radio-group.vue"]]);const Nl=U(Ol,{RadioButton:Pl,RadioGroup:Al}),Fl=xe(Al),Bl=xe(Pl);var zl=m({name:"NodeContent",setup:()=>({ns:g("cascader-node")}),render(){const{ns:e}=this,{node:t,panel:a}=this.$parent,{data:l,label:n}=t,{renderLabelFn:o}=a;return Ce("span",{class:e.e("label")},o?o({node:t,data:l}):n)}});const Rl=Symbol(),Ll=m({name:"ElCascaderNode",components:{ElCheckbox:At,ElRadio:Nl,NodeContent:zl,ElIcon:O,Check:Ve,Loading:I,ArrowRight:Me},props:{node:{type:Object,required:!0},menuId:String},emits:["expand"],setup(e,{emit:t}){const a=ee(Rl),l=g("cascader-node"),n=y((()=>a.isHoverMenu)),o=y((()=>a.config.multiple)),r=y((()=>a.config.checkStrictly)),s=y((()=>{var e;return null==(e=a.checkedNodes[0])?void 0:e.uid})),i=y((()=>e.node.isDisabled)),u=y((()=>e.node.isLeaf)),d=y((()=>r.value&&!u.value||!i.value)),c=y((()=>v(a.expandingNode))),p=y((()=>r.value&&a.checkedNodes.some(v))),v=t=>{var a;const{level:l,uid:n}=e.node;return(null==(a=null==t?void 0:t.pathNodes[l-1])?void 0:a.uid)===n},f=()=>{c.value||a.expandNode(e.node)},m=t=>{const{node:l}=e;t!==l.checked&&a.handleCheckChange(l,t)},h=()=>{a.lazyLoad(e.node,(()=>{u.value||f()}))},b=()=>{const{node:t}=e;d.value&&!t.loading&&(t.loaded?f():h())},k=t=>{e.node.loaded?(m(t),!r.value&&f()):h()};return{panel:a,isHoverMenu:n,multiple:o,checkStrictly:r,checkedNodeId:s,isDisabled:i,isLeaf:u,expandable:d,inExpandingPath:c,inCheckedPath:p,ns:l,handleHoverExpand:e=>{n.value&&(b(),!u.value&&t("expand",e))},handleExpand:b,handleClick:()=>{n.value&&!u.value||(!u.value||i.value||r.value||o.value?b():k(!0))},handleCheck:k,handleSelectCheck:t=>{r.value?(m(t),e.node.loaded&&f()):k(t)}}}}),ql=["id","aria-haspopup","aria-owns","aria-expanded","tabindex"],Yl=V("span",null,null,-1);const jl=m({name:"ElCascaderMenu",components:{Loading:I,ElIcon:O,ElScrollbar:F,ElCascaderNode:j(Ll,[["render",function(e,t,a,l,n,o){const r=De("el-checkbox"),s=De("el-radio"),i=De("check"),u=De("el-icon"),d=De("node-content"),c=De("loading"),p=De("arrow-right");return S(),$("li",{id:`${e.menuId}-${e.node.uid}`,role:"menuitem","aria-haspopup":!e.isLeaf,"aria-owns":e.isLeaf?null:e.menuId,"aria-expanded":e.inExpandingPath,tabindex:e.expandable?-1:void 0,class:_([e.ns.b(),e.ns.is("selectable",e.checkStrictly),e.ns.is("active",e.node.checked),e.ns.is("disabled",!e.expandable),e.inExpandingPath&&"in-active-path",e.inCheckedPath&&"in-checked-path"]),onMouseenter:t[2]||(t[2]=(...t)=>e.handleHoverExpand&&e.handleHoverExpand(...t)),onFocus:t[3]||(t[3]=(...t)=>e.handleHoverExpand&&e.handleHoverExpand(...t)),onClick:t[4]||(t[4]=(...t)=>e.handleClick&&e.handleClick(...t))},[de(" prefix "),e.multiple?(S(),x(r,{key:0,"model-value":e.node.checked,indeterminate:e.node.indeterminate,disabled:e.isDisabled,onClick:t[0]||(t[0]=q((()=>{}),["stop"])),"onUpdate:modelValue":e.handleSelectCheck},null,8,["model-value","indeterminate","disabled","onUpdate:modelValue"])):e.checkStrictly?(S(),x(s,{key:1,"model-value":e.checkedNodeId,label:e.node.uid,disabled:e.isDisabled,"onUpdate:modelValue":e.handleSelectCheck,onClick:t[1]||(t[1]=q((()=>{}),["stop"]))},{default:C((()=>[de("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),Yl])),_:1},8,["model-value","label","disabled","onUpdate:modelValue"])):e.isLeaf&&e.node.checked?(S(),x(u,{key:2,class:_(e.ns.e("prefix"))},{default:C((()=>[M(i)])),_:1},8,["class"])):de("v-if",!0),de(" content "),M(d),de(" postfix "),e.isLeaf?de("v-if",!0):(S(),$(N,{key:3},[e.node.loading?(S(),x(u,{key:0,class:_([e.ns.is("loading"),e.ns.e("postfix")])},{default:C((()=>[M(c)])),_:1},8,["class"])):(S(),x(u,{key:1,class:_(["arrow-right",e.ns.e("postfix")])},{default:C((()=>[M(p)])),_:1},8,["class"]))],64))],42,ql)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/node.vue"]])},props:{nodes:{type:Array,required:!0},index:{type:Number,required:!0}},setup(e){const t=$e(),a=g("cascader-menu"),{t:l}=la(),n=wt();let o=null,r=null;const s=ee(Rl),i=b(null),u=y((()=>!e.nodes.length)),d=y((()=>!s.initialLoaded)),c=y((()=>`cascader-menu-${n}-${e.index}`)),p=()=>{r&&(clearTimeout(r),r=null)},v=()=>{i.value&&(i.value.innerHTML="",p())};return{ns:a,panel:s,hoverZone:i,isEmpty:u,isLoading:d,menuId:c,t:l,handleExpand:e=>{o=e.target},handleMouseMove:e=>{if(s.isHoverMenu&&o&&i.value)if(o.contains(e.target)){p();const a=t.vnode.el,{left:l}=a.getBoundingClientRect(),{offsetWidth:n,offsetHeight:r}=a,s=e.clientX-l,u=o.offsetTop,d=u+o.offsetHeight;i.value.innerHTML=`\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${u} L${n} 0 V${u} Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M${s} ${d} L${n} ${r} V${d} Z" />\n        `}else r||(r=window.setTimeout(v,s.config.hoverThreshold))},clearHoverZone:v}}});var Hl=j(jl,[["render",function(e,t,a,l,n,o){const r=De("el-cascader-node"),s=De("loading"),i=De("el-icon"),u=De("el-scrollbar");return S(),x(u,{key:e.menuId,tag:"ul",role:"menu",class:_(e.ns.b()),"wrap-class":e.ns.e("wrap"),"view-class":[e.ns.e("list"),e.ns.is("empty",e.isEmpty)],onMousemove:e.handleMouseMove,onMouseleave:e.clearHoverZone},{default:C((()=>{var t;return[(S(!0),$(N,null,P(e.nodes,(t=>(S(),x(r,{key:t.uid,node:t,"menu-id":e.menuId,onExpand:e.handleExpand},null,8,["node","menu-id","onExpand"])))),128)),e.isLoading?(S(),$("div",{key:0,class:_(e.ns.e("empty-text"))},[M(i,{size:"14",class:_(e.ns.is("loading"))},{default:C((()=>[M(s)])),_:1},8,["class"]),E(" "+A(e.t("el.cascader.loading")),1)],2)):e.isEmpty?(S(),$("div",{key:1,class:_(e.ns.e("empty-text"))},A(e.t("el.cascader.noData")),3)):(null==(t=e.panel)?void 0:t.isHoverMenu)?(S(),$("svg",{key:2,ref:"hoverZone",class:_(e.ns.e("hover-zone"))},null,2)):de("v-if",!0)]})),_:1},8,["class","wrap-class","view-class","onMousemove","onMouseleave"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue"]]),Wl=(e=>(e.CLICK="click",e.HOVER="hover",e))(Wl||{});let Kl=0;class Ul{constructor(e,t,a,l=!1){this.data=e,this.config=t,this.parent=a,this.root=l,this.uid=Kl++,this.checked=!1,this.indeterminate=!1,this.loading=!1;const{value:n,label:o,children:r}=t,s=e[r],i=(e=>{const t=[e];let{parent:a}=e;for(;a;)t.unshift(a),a=a.parent;return t})(this);this.level=l?0:a?a.level+1:1,this.value=e[n],this.label=e[o],this.pathNodes=i,this.pathValues=i.map((e=>e.value)),this.pathLabels=i.map((e=>e.label)),this.childrenData=s,this.children=(s||[]).map((e=>new Ul(e,t,this))),this.loaded=!t.lazy||this.isLeaf||!X(s)}get isDisabled(){const{data:e,parent:t,config:a}=this,{disabled:l,checkStrictly:n}=a;return(Oe(l)?l(e,this):!!e[l])||!n&&(null==t?void 0:t.isDisabled)}get isLeaf(){const{data:e,config:t,childrenData:a,loaded:l}=this,{lazy:n,leaf:o}=t,r=Oe(o)?o(e,this):e[o];return me(r)?!(n&&!l)&&!(Array.isArray(a)&&a.length):!!r}get valueByOption(){return this.config.emitPath?this.pathValues:this.value}appendChild(e){const{childrenData:t,children:a}=this,l=new Ul(e,this.config,this);return Array.isArray(t)?t.push(e):this.childrenData=[e],a.push(l),l}calcText(e,t){const a=e?this.pathLabels.join(t):this.label;return this.text=a,a}broadcast(e,...t){const a=`onParent${_e(e)}`;this.children.forEach((l=>{l&&(l.broadcast(e,...t),l[a]&&l[a](...t))}))}emit(e,...t){const{parent:a}=this,l=`onChild${_e(e)}`;a&&(a[l]&&a[l](...t),a.emit(e,...t))}onParentCheck(e){this.isDisabled||this.setCheckState(e)}onChildCheck(){const{children:e}=this,t=e.filter((e=>!e.isDisabled)),a=!!t.length&&t.every((e=>e.checked));this.setCheckState(a)}setCheckState(e){const t=this.children.length,a=this.children.reduce(((e,t)=>e+(t.checked?1:t.indeterminate?.5:0)),0);this.checked=this.loaded&&this.children.filter((e=>!e.isDisabled)).every((e=>e.loaded&&e.checked))&&e,this.indeterminate=this.loaded&&a!==t&&a>0}doCheck(e){if(this.checked===e)return;const{checkStrictly:t,multiple:a}=this.config;t||!a?this.checked=e:(this.broadcast("check",e),this.setCheckState(e),this.emit("check"))}}const Gl=(e,t)=>e.reduce(((e,a)=>(a.isLeaf?e.push(a):(!t&&e.push(a),e=e.concat(Gl(a.children,t))),e)),[]);class Xl{constructor(e,t){this.config=t;const a=(e||[]).map((e=>new Ul(e,this.config)));this.nodes=a,this.allNodes=Gl(a,!1),this.leafNodes=Gl(a,!0)}getNodes(){return this.nodes}getFlattedNodes(e){return e?this.leafNodes:this.allNodes}appendNode(e,t){const a=t?t.appendChild(e):new Ul(e,this.config);t||this.nodes.push(a),this.allNodes.push(a),a.isLeaf&&this.leafNodes.push(a)}appendNodes(e,t){e.forEach((e=>this.appendNode(e,t)))}getNodeByValue(e,t=!1){if(!e&&0!==e)return null;return this.getFlattedNodes(t).find((t=>Et(t.value,e)||Et(t.pathValues,e)))||null}getSameNode(e){if(!e)return null;return this.getFlattedNodes(!1).find((({value:t,level:a})=>Et(e.value,t)&&e.level===a))||null}}const Zl={modelValue:[Number,String,Array],options:{type:Array,default:()=>[]},props:{type:Object,default:()=>({})}},Ql={expandTrigger:Wl.CLICK,multiple:!1,checkStrictly:!1,emitPath:!0,lazy:!1,lazyLoad:p,value:"value",label:"label",children:"children",leaf:"leaf",disabled:"disabled",hoverThreshold:500},Jl=e=>{if(!e)return 0;const t=e.id.split("-");return Number(t[t.length-2])},en=m({name:"ElCascaderPanel",components:{ElCascaderMenu:Hl},props:{...Zl,border:{type:Boolean,default:!0},renderLabel:Function},emits:[Xt,Qt,"close","expand-change"],setup(e,{emit:t,slots:a}){let l=!1;const n=g("cascader"),o=(e=>y((()=>({...Ql,...e.props}))))(e);let r=null;const i=b(!0),d=b([]),c=b(null),p=b([]),v=b(null),f=b([]),m=y((()=>o.value.expandTrigger===Wl.HOVER)),h=y((()=>e.renderLabel||a.default)),k=(e,t)=>{const a=o.value;(e=e||new Ul({},a,void 0,!0)).loading=!0;a.lazyLoad(e,(a=>{const l=e,n=l.root?null:l;a&&(null==r||r.appendNodes(a,n)),l.loading=!1,l.loaded=!0,l.childrenData=l.childrenData||[],t&&t(a)}))},S=(e,a)=>{var l;const{level:n}=e,o=p.value.slice(0,n);let r;e.isLeaf?r=e.pathNodes[n-2]:(r=e,o.push(e.children)),(null==(l=v.value)?void 0:l.uid)!==(null==r?void 0:r.uid)&&(v.value=e,p.value=o,!a&&t("expand-change",(null==e?void 0:e.pathValues)||[]))},x=(e,a,n=!0)=>{const{checkStrictly:r,multiple:s}=o.value,i=f.value[0];l=!0,!s&&(null==i||i.doCheck(!1)),e.doCheck(a),D(),n&&!s&&!r&&t("close"),!n&&!s&&!r&&C(e)},C=e=>{e&&(e=e.parent,C(e),e&&S(e))},V=e=>null==r?void 0:r.getFlattedNodes(e),M=e=>{var t;return null==(t=V(e))?void 0:t.filter((e=>!1!==e.checked))},D=()=>{var e;const{checkStrictly:t,multiple:a}=o.value,l=((e,t)=>{const a=t.slice(0),l=a.map((e=>e.uid)),n=e.reduce(((e,t)=>{const n=l.indexOf(t.uid);return n>-1&&(e.push(t),a.splice(n,1),l.splice(n,1)),e}),[]);return n.push(...a),n})(f.value,M(!t)),n=l.map((e=>e.valueByOption));f.value=l,c.value=a?n:null!=(e=n[0])?e:null},$=(t=!1,a=!1)=>{const{modelValue:n}=e,{lazy:u,multiple:d,checkStrictly:p}=o.value,v=!p;var f;if(i.value&&!l&&(a||!Et(n,c.value)))if(u&&!t){const e=xa(null!=(f=Ca(n))&&f.length?s(f,1/0):[]).map((e=>null==r?void 0:r.getNodeByValue(e))).filter((e=>!!e&&!e.loaded&&!e.loading));e.length?e.forEach((e=>{k(e,(()=>$(!1,a)))})):$(!0,a)}else{const e=d?Ca(n):[n],t=xa(e.map((e=>null==r?void 0:r.getNodeByValue(e,v))));O(t,!1),c.value=n}},O=(e,t=!0)=>{const{checkStrictly:a}=o.value,l=f.value,n=e.filter((e=>!!e&&(a||e.isLeaf))),s=null==r?void 0:r.getSameNode(v.value),i=t&&s||n[0];i?i.pathNodes.forEach((e=>S(e,!0))):v.value=null,l.forEach((e=>e.doCheck(!1))),n.forEach((e=>e.doCheck(!0))),f.value=n,H(_)},_=()=>{u&&d.value.forEach((e=>{const t=null==e?void 0:e.$el;if(t){const e=t.querySelector(`.${n.namespace.value}-scrollbar__wrap`),a=t.querySelector(`.${n.b("node")}.${n.is("active")}`)||t.querySelector(`.${n.b("node")}.in-active-path`);sa(e,a)}}))};return ie(Rl,we({config:o,expandingNode:v,checkedNodes:f,isHoverMenu:m,initialLoaded:i,renderLabelFn:h,lazyLoad:k,expandNode:S,handleCheckChange:x})),le([o,()=>e.options],(()=>{const{options:t}=e,a=o.value;l=!1,r=new Xl(t,a),p.value=[r.getNodes()],a.lazy&&X(e.options)?(i.value=!1,k(void 0,(e=>{e&&(r=new Xl(e,a),p.value=[r.getNodes()]),i.value=!0,$(!1,!0)}))):$(!1,!0)}),{deep:!0,immediate:!0}),le((()=>e.modelValue),(()=>{l=!1,$()})),le(c,(a=>{Et(a,e.modelValue)||(t(Xt,a),t(Qt,a))})),Ie((()=>d.value=[])),w((()=>!X(e.modelValue)&&$())),{ns:n,menuList:d,menus:p,checkedNodes:f,handleKeyDown:e=>{const t=e.target,{code:a}=e;switch(a){case ce.up:case ce.down:{e.preventDefault();const l=a===ce.up?-1:1;oa(ra(t,l,`.${n.b("node")}[tabindex="-1"]`));break}case ce.left:{e.preventDefault();const a=d.value[Jl(t)-1],l=null==a?void 0:a.$el.querySelector(`.${n.b("node")}[aria-expanded="true"]`);oa(l);break}case ce.right:{e.preventDefault();const a=d.value[Jl(t)+1],l=null==a?void 0:a.$el.querySelector(`.${n.b("node")}[tabindex="-1"]`);oa(l);break}case ce.enter:(e=>{if(!e)return;const t=e.querySelector("input");t?t.click():na(e)&&e.click()})(t)}},handleCheckChange:x,getFlattedNodes:V,getCheckedNodes:M,clearCheckedNodes:()=>{f.value.forEach((e=>e.doCheck(!1))),D()},calculateCheckedValue:D,scrollToExpandingNode:_}}});var tn=j(en,[["render",function(e,t,a,l,n,o){const r=De("el-cascader-menu");return S(),$("div",{class:_([e.ns.b("panel"),e.ns.is("bordered",e.border)]),onKeydown:t[0]||(t[0]=(...t)=>e.handleKeyDown&&e.handleKeyDown(...t))},[(S(!0),$(N,null,P(e.menus,((t,a)=>(S(),x(r,{key:a,ref_for:!0,ref:t=>e.menuList[a]=t,index:a,nodes:[...t]},null,8,["index","nodes"])))),128))],34)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/index.vue"]]);tn.install=e=>{e.component(tn.name,tn)};const an={large:36,default:32,small:28},ln={modifiers:[{name:"arrowPosition",enabled:!0,phase:"main",fn:({state:e})=>{const{modifiersData:t,placement:a}=e;["right","left","bottom","top"].includes(a)||(t.arrow.x=35)},requires:["arrow"]}]},nn=m({name:"ElCascader",components:{ElCascaderPanel:tn,ElInput:Dt,ElTooltip:St,ElScrollbar:F,ElTag:Ot,ElIcon:O,CircleClose:Q,Check:Ve,ArrowDown:fe},directives:{Clickoutside:Nt},props:{...Zl,size:{type:String,validator:ia},placeholder:{type:String},disabled:Boolean,clearable:Boolean,filterable:Boolean,filterMethod:{type:Function,default:(e,t)=>e.text.includes(t)},separator:{type:String,default:" / "},showAllLevels:{type:Boolean,default:!0},collapseTags:Boolean,collapseTagsTooltip:{type:Boolean,default:!1},debounce:{type:Number,default:300},beforeFilter:{type:Function,default:()=>!0},popperClass:{type:String,default:""},teleported:kt.teleported,tagType:{..._t.type,default:"info"}},emits:[Xt,Qt,"focus","blur","visible-change","expand-change","remove-tag"],setup(e,{emit:t}){let a=0,l=0;const n=g("cascader"),o=g("input"),{t:r}=la(),s=ee(te,{}),i=ee(ae,{}),d=b(null),c=b(null),p=b(null),v=b(null),f=b(null),m=b(!1),h=b(!1),k=b(!1),S=b(""),x=b(""),C=b([]),V=b([]),M=b([]),D=b(!1),$=y((()=>e.disabled||s.disabled)),O=y((()=>e.placeholder||r("el.cascader.placeholder"))),_=se(),I=y((()=>["small"].includes(_.value)?"small":"default")),P=y((()=>!!e.props.multiple)),T=y((()=>!e.filterable||P.value)),E=y((()=>P.value?x.value:S.value)),A=y((()=>{var e;return(null==(e=v.value)?void 0:e.checkedNodes)||[]})),N=y((()=>!(!e.clearable||$.value||k.value||!h.value)&&!!A.value.length)),F=y((()=>{const{showAllLevels:t,separator:a}=e,l=A.value;return l.length?P.value?" ":l[0].calcText(t,a):""})),B=y({get:()=>e.modelValue,set(e){var a;t(Xt,e),t(Qt,e),null==(a=i.validate)||a.call(i,"change").catch((e=>ne()))}}),z=y((()=>{var e,t;return null==(t=null==(e=d.value)?void 0:e.popperRef)?void 0:t.contentRef})),R=a=>{var l,n,o;if(!$.value&&(a=null!=a?a:!m.value)!==m.value){if(m.value=a,null==(n=null==(l=c.value)?void 0:l.input)||n.setAttribute("aria-expanded",`${a}`),a)L(),H(null==(o=v.value)?void 0:o.scrollToExpandingNode);else if(e.filterable){const{value:e}=F;S.value=e,x.value=e}t("visible-change",a)}},L=()=>{H((()=>{var e;null==(e=d.value)||e.updatePopper()}))},q=()=>{k.value=!1},Y=t=>{const{showAllLevels:a,separator:l}=e;return{node:t,key:t.uid,text:t.calcText(a,l),hitState:!1,closable:!$.value&&!t.isDisabled,isCollapseTag:!1}},j=e=>{var a;const l=e.node;l.doCheck(!1),null==(a=v.value)||a.calculateCheckedValue(),t("remove-tag",l.valueByOption)},W=()=>{var t,a;const{filterMethod:l,showAllLevels:n,separator:o}=e,r=null==(a=null==(t=v.value)?void 0:t.getFlattedNodes(!e.props.checkStrictly))?void 0:a.filter((e=>!e.isDisabled&&(e.calcText(n,o),l(e,E.value))));P.value&&(C.value.forEach((e=>{e.hitState=!1})),V.value.forEach((e=>{e.hitState=!1}))),k.value=!0,M.value=r,L()},K=()=>{var e;let t;t=k.value&&f.value?f.value.$el.querySelector(`.${n.e("suggestion-item")}`):null==(e=v.value)?void 0:e.$el.querySelector(`.${n.b("node")}[tabindex="-1"]`),t&&(t.focus(),!k.value&&t.click())},U=()=>{var e,t;const l=null==(e=c.value)?void 0:e.input,o=p.value,r=null==(t=f.value)?void 0:t.$el;if(u&&l){if(r){r.querySelector(`.${n.e("suggestion-list")}`).style.minWidth=`${l.offsetWidth}px`}if(o){const{offsetHeight:e}=o,t=C.value.length>0?`${Math.max(e+6,a)}px`:`${a}px`;l.style.height=t,L()}}},G=aa((()=>{const{value:t}=E;if(!t)return;const a=e.beforeFilter(t);Pe(a)?a.then(W).catch((()=>{})):!1!==a?W():q()}),e.debounce),X=(e,t)=>{!m.value&&R(!0),(null==t?void 0:t.isComposing)||(e?G():q())};return le(k,L),le([A,$],(()=>{if(!P.value)return;const t=A.value,a=[],l=[];if(t.forEach((e=>l.push(Y(e)))),V.value=l,t.length){const[l,...n]=t,o=n.length;a.push(Y(l)),o&&(e.collapseTags?a.push({key:-1,text:`+ ${o}`,closable:!1,isCollapseTag:!0}):n.forEach((e=>a.push(Y(e)))))}C.value=a})),le(C,(()=>{H((()=>U()))})),le(F,(e=>S.value=e),{immediate:!0}),w((()=>{var e;const t=null==(e=c.value)?void 0:e.$el;a=(null==t?void 0:t.offsetHeight)||an[_.value]||40,Te(t,U)})),{popperOptions:ln,tooltipRef:d,popperPaneRef:z,input:c,tagWrapper:p,panel:v,suggestionPanel:f,popperVisible:m,inputHover:h,inputPlaceholder:O,filtering:k,presentText:F,checkedValue:B,inputValue:S,searchInputValue:x,presentTags:C,allPresentTags:V,suggestions:M,isDisabled:$,isOnComposition:D,realSize:_,tagSize:I,multiple:P,readonly:T,clearBtnVisible:N,nsCascader:n,nsInput:o,t:r,togglePopperVisible:R,hideSuggestionPanel:q,deleteTag:j,focusFirstNode:K,getCheckedNodes:e=>{var t;return null==(t=v.value)?void 0:t.getCheckedNodes(e)},handleExpandChange:e=>{L(),t("expand-change",e)},handleKeyDown:e=>{if(!D.value)switch(e.code){case ce.enter:R();break;case ce.down:R(!0),H(K),e.preventDefault();break;case ce.esc:!0===m.value&&(e.preventDefault(),e.stopPropagation(),R(!1));break;case ce.tab:R(!1)}},handleComposition:e=>{var t;const a=null==(t=e.target)?void 0:t.value;if("compositionend"===e.type)D.value=!1,H((()=>X(a)));else{const e=a[a.length-1]||"";D.value=!$t(e)}},handleClear:()=>{var e;null==(e=v.value)||e.clearCheckedNodes(),R(!1)},handleSuggestionClick:e=>{var t,a;const{checked:l}=e;P.value?null==(t=v.value)||t.handleCheckChange(e,!l,!1):(!l&&(null==(a=v.value)||a.handleCheckChange(e,!0,!1)),R(!1))},handleSuggestionKeyDown:e=>{const t=e.target,{code:a}=e;switch(a){case ce.up:case ce.down:{const e=a===ce.up?-1:1;oa(ra(t,e,`.${n.e("suggestion-item")}[tabindex="-1"]`));break}case ce.enter:t.click()}},handleDelete:()=>{const e=C.value,t=e[e.length-1];l=x.value?0:l+1,t&&l&&(t.hitState?j(t):t.hitState=!0)},handleInput:X}}}),on={key:0},rn={class:"el-cascader__collapse-tags"},sn=["placeholder"],un=["onClick"];var dn=j(nn,[["render",function(e,t,a,l,n,o){const r=De("circle-close"),s=De("el-icon"),i=De("arrow-down"),u=De("el-input"),d=De("el-tag"),c=De("el-tooltip"),p=De("el-cascader-panel"),v=De("check"),f=De("el-scrollbar"),m=Ee("clickoutside");return S(),x(c,{ref:"tooltipRef",visible:e.popperVisible,"onUpdate:visible":t[17]||(t[17]=t=>e.popperVisible=t),teleported:e.teleported,"popper-class":[e.nsCascader.e("dropdown"),e.popperClass],"popper-options":e.popperOptions,"fallback-placements":["bottom-start","bottom","top-start","top","right","left"],"stop-popper-mouse-event":!1,"gpu-acceleration":!1,placement:"bottom-start",transition:`${e.nsCascader.namespace.value}-zoom-in-top`,effect:"light",pure:"",persistent:"",onHide:e.hideSuggestionPanel},{default:C((()=>[pe((S(),$("div",{class:_([e.nsCascader.b(),e.nsCascader.m(e.realSize),e.nsCascader.is("disabled",e.isDisabled),e.$attrs.class]),style:B(e.$attrs.style),onClick:t[11]||(t[11]=()=>e.togglePopperVisible(!e.readonly||void 0)),onKeydown:t[12]||(t[12]=(...t)=>e.handleKeyDown&&e.handleKeyDown(...t)),onMouseenter:t[13]||(t[13]=t=>e.inputHover=!0),onMouseleave:t[14]||(t[14]=t=>e.inputHover=!1)},[M(u,{ref:"input",modelValue:e.inputValue,"onUpdate:modelValue":t[1]||(t[1]=t=>e.inputValue=t),placeholder:e.searchInputValue?"":e.inputPlaceholder,readonly:e.readonly,disabled:e.isDisabled,"validate-event":!1,size:e.realSize,class:_(e.nsCascader.is("focus",e.popperVisible)),onCompositionstart:e.handleComposition,onCompositionupdate:e.handleComposition,onCompositionend:e.handleComposition,onFocus:t[2]||(t[2]=t=>e.$emit("focus",t)),onBlur:t[3]||(t[3]=t=>e.$emit("blur",t)),onInput:e.handleInput},{suffix:C((()=>[e.clearBtnVisible?(S(),x(s,{key:"clear",class:_([e.nsInput.e("icon"),"icon-circle-close"]),onClick:q(e.handleClear,["stop"])},{default:C((()=>[M(r)])),_:1},8,["class","onClick"])):(S(),x(s,{key:"arrow-down",class:_([e.nsInput.e("icon"),"icon-arrow-down",e.nsCascader.is("reverse",e.popperVisible)]),onClick:t[0]||(t[0]=q((t=>e.togglePopperVisible()),["stop"]))},{default:C((()=>[M(i)])),_:1},8,["class"]))])),_:1},8,["modelValue","placeholder","readonly","disabled","size","class","onCompositionstart","onCompositionupdate","onCompositionend","onInput"]),e.multiple?(S(),$("div",{key:0,ref:"tagWrapper",class:_(e.nsCascader.e("tags"))},[(S(!0),$(N,null,P(e.presentTags,(t=>(S(),x(d,{key:t.key,type:e.tagType,size:e.tagSize,hit:t.hitState,closable:t.closable,"disable-transitions":"",onClose:a=>e.deleteTag(t)},{default:C((()=>[!1===t.isCollapseTag?(S(),$("span",on,A(t.text),1)):(S(),x(c,{key:1,teleported:!1,disabled:e.popperVisible||!e.collapseTagsTooltip,"fallback-placements":["bottom","top","right","left"],placement:"bottom",effect:"light"},{default:C((()=>[V("span",null,A(t.text),1)])),content:C((()=>[V("div",rn,[(S(!0),$(N,null,P(e.allPresentTags,((t,a)=>(S(),$("div",{key:a,class:"el-cascader__collapse-tag"},[(S(),x(d,{key:t.key,class:"in-tooltip",type:e.tagType,size:e.tagSize,hit:t.hitState,closable:t.closable,"disable-transitions":"",onClose:a=>e.deleteTag(t)},{default:C((()=>[V("span",null,A(t.text),1)])),_:2},1032,["type","size","hit","closable","onClose"]))])))),128))])])),_:2},1032,["disabled"]))])),_:2},1032,["type","size","hit","closable","onClose"])))),128)),e.filterable&&!e.isDisabled?pe((S(),$("input",{key:0,"onUpdate:modelValue":t[4]||(t[4]=t=>e.searchInputValue=t),type:"text",class:_(e.nsCascader.e("search-input")),placeholder:e.presentText?"":e.inputPlaceholder,onInput:t[5]||(t[5]=t=>e.handleInput(e.searchInputValue,t)),onClick:t[6]||(t[6]=q((t=>e.togglePopperVisible(!0)),["stop"])),onKeydown:t[7]||(t[7]=L(((...t)=>e.handleDelete&&e.handleDelete(...t)),["delete"])),onCompositionstart:t[8]||(t[8]=(...t)=>e.handleComposition&&e.handleComposition(...t)),onCompositionupdate:t[9]||(t[9]=(...t)=>e.handleComposition&&e.handleComposition(...t)),onCompositionend:t[10]||(t[10]=(...t)=>e.handleComposition&&e.handleComposition(...t))},null,42,sn)),[[Ae,e.searchInputValue]]):de("v-if",!0)],2)):de("v-if",!0)],38)),[[m,()=>e.togglePopperVisible(!1),e.popperPaneRef]])])),content:C((()=>[pe(M(p,{ref:"panel",modelValue:e.checkedValue,"onUpdate:modelValue":t[15]||(t[15]=t=>e.checkedValue=t),options:e.options,props:e.props,border:!1,"render-label":e.$slots.default,onExpandChange:e.handleExpandChange,onClose:t[16]||(t[16]=t=>e.$nextTick((()=>e.togglePopperVisible(!1))))},null,8,["modelValue","options","props","render-label","onExpandChange"]),[[Ne,!e.filtering]]),e.filterable?pe((S(),x(f,{key:0,ref:"suggestionPanel",tag:"ul",class:_(e.nsCascader.e("suggestion-panel")),"view-class":e.nsCascader.e("suggestion-list"),onKeydown:e.handleSuggestionKeyDown},{default:C((()=>[e.suggestions.length?(S(!0),$(N,{key:0},P(e.suggestions,(t=>(S(),$("li",{key:t.uid,class:_([e.nsCascader.e("suggestion-item"),e.nsCascader.is("checked",t.checked)]),tabindex:-1,onClick:a=>e.handleSuggestionClick(t)},[V("span",null,A(t.text),1),t.checked?(S(),x(s,{key:0},{default:C((()=>[M(v)])),_:1})):de("v-if",!0)],10,un)))),128)):T(e.$slots,"empty",{key:1},(()=>[V("li",{class:_(e.nsCascader.e("empty-text"))},A(e.t("el.cascader.noMatch")),3)]))])),_:3},8,["class","view-class","onKeydown"])),[[Ne,e.filtering]]):de("v-if",!0)])),_:3},8,["visible","teleported","popper-class","popper-options","transition","onHide"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/cascader/src/index.vue"]]);dn.install=e=>{e.component(dn.name,dn)};const cn=dn;let pn=!1;function vn(e,t){if(!u)return;const a=function(e){var a;null==(a=t.drag)||a.call(t,e)},l=function(e){var n;Ct(document,"mousemove",a),Ct(document,"mouseup",l),Ct(document,"touchmove",a),Ct(document,"touchend",l),document.onselectstart=null,document.ondragstart=null,pn=!1,null==(n=t.end)||n.call(t,e)},n=function(e){var n;pn||(e.preventDefault(),document.onselectstart=()=>!1,document.ondragstart=()=>!1,xt(document,"mousemove",a),xt(document,"mouseup",l),xt(document,"touchmove",a),xt(document,"touchend",l),pn=!0,null==(n=t.start)||n.call(t,e))};xt(e,"mousedown",n),xt(e,"touchstart",n)}var fn=j(m({name:"ElColorAlphaSlider",props:{color:{type:Object,required:!0},vertical:{type:Boolean,default:!1}},setup(e){const t=$e(),a=Fe(null),l=Fe(null),n=b(0),o=b(0),r=b(null);function s(l){const n=t.vnode.el.getBoundingClientRect(),{clientX:o,clientY:r}=Sa(l);if(e.vertical){let t=r-n.top;t=Math.max(a.value.offsetHeight/2,t),t=Math.min(t,n.height-a.value.offsetHeight/2),e.color.set("alpha",Math.round((t-a.value.offsetHeight/2)/(n.height-a.value.offsetHeight)*100))}else{let t=o-n.left;t=Math.max(a.value.offsetWidth/2,t),t=Math.min(t,n.width-a.value.offsetWidth/2),e.color.set("alpha",Math.round((t-a.value.offsetWidth/2)/(n.width-a.value.offsetWidth)*100))}}function i(){n.value=function(){if(e.vertical)return 0;const l=t.vnode.el,n=e.color.get("alpha");return l?Math.round(n*(l.offsetWidth-a.value.offsetWidth/2)/100):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const n=e.color.get("alpha");return l?Math.round(n*(l.offsetHeight-a.value.offsetHeight/2)/100):0}(),r.value=function(){if(e.color&&e.color.value){const{r:t,g:a,b:l}=e.color.toRgb();return`linear-gradient(to right, rgba(${t}, ${a}, ${l}, 0) 0%, rgba(${t}, ${a}, ${l}, 1) 100%)`}return null}()}return le((()=>e.color.get("alpha")),(()=>{i()})),le((()=>e.color.value),(()=>{i()})),w((()=>{const e={drag:e=>{s(e)},end:e=>{s(e)}};vn(l.value,e),vn(a.value,e),i()})),{thumb:a,bar:l,thumbLeft:n,thumbTop:o,background:r,handleClick:function(e){e.target!==a.value&&s(e)},update:i}}}),[["render",function(e,t,a,l,n,o){return S(),$("div",{class:_(["el-color-alpha-slider",{"is-vertical":e.vertical}])},[V("div",{ref:"bar",class:"el-color-alpha-slider__bar",style:B({background:e.background}),onClick:t[0]||(t[0]=(...t)=>e.handleClick&&e.handleClick(...t))},null,4),V("div",{ref:"thumb",class:"el-color-alpha-slider__thumb",style:B({left:e.thumbLeft+"px",top:e.thumbTop+"px"})},null,4)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue"]]);var mn=j(m({name:"ElColorHueSlider",props:{color:{type:Object,required:!0},vertical:Boolean},setup(e){const t=$e(),a=b(null),l=b(null),n=b(0),o=b(0),r=y((()=>e.color.get("hue")));function s(l){const n=t.vnode.el.getBoundingClientRect(),{clientX:o,clientY:r}=Sa(l);let s;if(e.vertical){let e=r-n.top;e=Math.min(e,n.height-a.value.offsetHeight/2),e=Math.max(a.value.offsetHeight/2,e),s=Math.round((e-a.value.offsetHeight/2)/(n.height-a.value.offsetHeight)*360)}else{let e=o-n.left;e=Math.min(e,n.width-a.value.offsetWidth/2),e=Math.max(a.value.offsetWidth/2,e),s=Math.round((e-a.value.offsetWidth/2)/(n.width-a.value.offsetWidth)*360)}e.color.set("hue",s)}function i(){n.value=function(){const l=t.vnode.el;if(e.vertical)return 0;const n=e.color.get("hue");return l?Math.round(n*(l.offsetWidth-a.value.offsetWidth/2)/360):0}(),o.value=function(){const l=t.vnode.el;if(!e.vertical)return 0;const n=e.color.get("hue");return l?Math.round(n*(l.offsetHeight-a.value.offsetHeight/2)/360):0}()}return le((()=>r.value),(()=>{i()})),w((()=>{const e={drag:e=>{s(e)},end:e=>{s(e)}};vn(l.value,e),vn(a.value,e),i()})),{bar:l,thumb:a,thumbLeft:n,thumbTop:o,hueValue:r,handleClick:function(e){e.target!==a.value&&s(e)},update:i}}}),[["render",function(e,t,a,l,n,o){return S(),$("div",{class:_(["el-color-hue-slider",{"is-vertical":e.vertical}])},[V("div",{ref:"bar",class:"el-color-hue-slider__bar",onClick:t[0]||(t[0]=(...t)=>e.handleClick&&e.handleClick(...t))},null,512),V("div",{ref:"thumb",class:"el-color-hue-slider__thumb",style:B({left:e.thumbLeft+"px",top:e.thumbTop+"px"})},null,4)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/hue-slider.vue"]]);const hn=Symbol(),gn=function(e,t,a){return[e,t*a/((e=(2-t)*a)<1?e:2-e)||0,e/2]},bn=function(e,t){var a;"string"==typeof(a=e)&&a.includes(".")&&1===Number.parseFloat(a)&&(e="100%");const l=function(e){return"string"==typeof e&&e.includes("%")}(e);return e=Math.min(t,Math.max(0,Number.parseFloat(`${e}`))),l&&(e=Number.parseInt(""+e*t,10)/100),Math.abs(e-t)<1e-6?1:e%t/Number.parseFloat(t)},yn={10:"A",11:"B",12:"C",13:"D",14:"E",15:"F"},kn=function(e){e=Math.min(Math.round(e),255);const t=Math.floor(e/16),a=e%16;return`${yn[t]||t}${yn[a]||a}`},wn=function({r:e,g:t,b:a}){return Number.isNaN(+e)||Number.isNaN(+t)||Number.isNaN(+a)?"":`#${kn(e)}${kn(t)}${kn(a)}`},Sn={A:10,B:11,C:12,D:13,E:14,F:15},xn=function(e){return 2===e.length?16*(Sn[e[0].toUpperCase()]||+e[0])+(Sn[e[1].toUpperCase()]||+e[1]):Sn[e[1].toUpperCase()]||+e[1]},Cn=function(e,t,a){e=bn(e,255),t=bn(t,255),a=bn(a,255);const l=Math.max(e,t,a),n=Math.min(e,t,a);let o;const r=l,s=l-n,i=0===l?0:s/l;if(l===n)o=0;else{switch(l){case e:o=(t-a)/s+(t<a?6:0);break;case t:o=(a-e)/s+2;break;case a:o=(e-t)/s+4}o/=6}return{h:360*o,s:100*i,v:100*r}},Vn=function(e,t,a){e=6*bn(e,360),t=bn(t,100),a=bn(a,100);const l=Math.floor(e),n=e-l,o=a*(1-t),r=a*(1-n*t),s=a*(1-(1-n)*t),i=l%6,u=[a,r,o,o,s,a][i],d=[s,a,a,r,o,o][i],c=[o,o,s,a,a,r][i];return{r:Math.round(255*u),g:Math.round(255*d),b:Math.round(255*c)}};class Mn{constructor(e){this._hue=0,this._saturation=100,this._value=100,this._alpha=100,this.enableAlpha=!1,this.format="hex",this.value="",e=e||{};for(const t in e)Be(e,t)&&(this[t]=e[t]);e.value?this.fromString(e.value):this.doOnChange()}set(e,t){if(1!==arguments.length||"object"!=typeof e)this[`_${e}`]=t,this.doOnChange();else for(const a in e)Be(e,a)&&this.set(a,e[a])}get(e){return"alpha"===e?Math.floor(this[`_${e}`]):this[`_${e}`]}toRgb(){return Vn(this._hue,this._saturation,this._value)}fromString(e){if(!e)return this._hue=0,this._saturation=100,this._value=100,void this.doOnChange();const t=(e,t,a)=>{this._hue=Math.max(0,Math.min(360,e)),this._saturation=Math.max(0,Math.min(100,t)),this._value=Math.max(0,Math.min(100,a)),this.doOnChange()};if(e.includes("hsl")){const a=e.replace(/hsla|hsl|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?Number.parseFloat(e):Number.parseInt(e,10)));if(4===a.length?this._alpha=100*Number.parseFloat(a[3]):3===a.length&&(this._alpha=100),a.length>=3){const{h:e,s:l,v:n}=function(e,t,a){a/=100;let l=t/=100;const n=Math.max(a,.01);return t*=(a*=2)<=1?a:2-a,l*=n<=1?n:2-n,{h:e,s:100*(0===a?2*l/(n+l):2*t/(a+t)),v:(a+t)/2*100}}(a[0],a[1],a[2]);t(e,l,n)}}else if(e.includes("hsv")){const a=e.replace(/hsva|hsv|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?Number.parseFloat(e):Number.parseInt(e,10)));4===a.length?this._alpha=100*Number.parseFloat(a[3]):3===a.length&&(this._alpha=100),a.length>=3&&t(a[0],a[1],a[2])}else if(e.includes("rgb")){const a=e.replace(/rgba|rgb|\(|\)/gm,"").split(/\s|,/g).filter((e=>""!==e)).map(((e,t)=>t>2?Number.parseFloat(e):Number.parseInt(e,10)));if(4===a.length?this._alpha=100*Number.parseFloat(a[3]):3===a.length&&(this._alpha=100),a.length>=3){const{h:e,s:l,v:n}=Cn(a[0],a[1],a[2]);t(e,l,n)}}else if(e.includes("#")){const a=e.replace("#","").trim();if(!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(a))return;let l,n,o;3===a.length?(l=xn(a[0]+a[0]),n=xn(a[1]+a[1]),o=xn(a[2]+a[2])):6!==a.length&&8!==a.length||(l=xn(a.slice(0,2)),n=xn(a.slice(2,4)),o=xn(a.slice(4,6))),8===a.length?this._alpha=xn(a.slice(6))/255*100:3!==a.length&&6!==a.length||(this._alpha=100);const{h:r,s:s,v:i}=Cn(l,n,o);t(r,s,i)}}compare(e){return Math.abs(e._hue-this._hue)<2&&Math.abs(e._saturation-this._saturation)<1&&Math.abs(e._value-this._value)<1&&Math.abs(e._alpha-this._alpha)<1}doOnChange(){const{_hue:e,_saturation:t,_value:a,_alpha:l,format:n}=this;if(this.enableAlpha)switch(n){case"hsl":{const l=gn(e,t/100,a/100);this.value=`hsla(${e}, ${Math.round(100*l[1])}%, ${Math.round(100*l[2])}%, ${this.get("alpha")/100})`;break}case"hsv":this.value=`hsva(${e}, ${Math.round(t)}%, ${Math.round(a)}%, ${this.get("alpha")/100})`;break;case"hex":this.value=`${wn(Vn(e,t,a))}${kn(255*l/100)}`;break;default:{const{r:l,g:n,b:o}=Vn(e,t,a);this.value=`rgba(${l}, ${n}, ${o}, ${this.get("alpha")/100})`}}else switch(n){case"hsl":{const l=gn(e,t/100,a/100);this.value=`hsl(${e}, ${Math.round(100*l[1])}%, ${Math.round(100*l[2])}%)`;break}case"hsv":this.value=`hsv(${e}, ${Math.round(t)}%, ${Math.round(a)}%)`;break;case"rgb":{const{r:l,g:n,b:o}=Vn(e,t,a);this.value=`rgb(${l}, ${n}, ${o})`;break}default:this.value=wn(Vn(e,t,a))}}}const Dn=m({props:{colors:{type:Array,required:!0},color:{type:Object,required:!0}},setup(e){const{currentColor:t}=ee(hn),a=b(l(e.colors,e.color));function l(e,t){return e.map((e=>{const a=new Mn;return a.enableAlpha=!0,a.format="rgba",a.fromString(e),a.selected=a.value===t.value,a}))}return le((()=>t.value),(e=>{const t=new Mn;t.fromString(e),a.value.forEach((e=>{e.selected=t.compare(e)}))})),ze((()=>{a.value=l(e.colors,e.color)})),{rgbaColors:a,handleSelect:function(t){e.color.fromString(e.colors[t])}}}}),$n={class:"el-color-predefine"},On={class:"el-color-predefine__colors"},_n=["onClick"];var In=j(Dn,[["render",function(e,t,a,l,n,o){return S(),$("div",$n,[V("div",On,[(S(!0),$(N,null,P(e.rgbaColors,((t,a)=>(S(),$("div",{key:e.colors[a],class:_(["el-color-predefine__color-selector",{selected:t.selected,"is-alpha":t._alpha<100}]),onClick:t=>e.handleSelect(a)},[V("div",{style:B({backgroundColor:t.value})},null,4)],10,_n)))),128))])])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/predefine.vue"]]);const Pn=m({name:"ElSlPanel",props:{color:{type:Object,required:!0}},setup(e){const t=$e(),a=b(0),l=b(0),n=b("hsl(0, 100%, 50%)"),o=y((()=>({hue:e.color.get("hue"),value:e.color.get("value")})));function r(){const o=e.color.get("saturation"),r=e.color.get("value"),s=t.vnode.el,{clientWidth:i,clientHeight:u}=s;l.value=o*i/100,a.value=(100-r)*u/100,n.value=`hsl(${e.color.get("hue")}, 100%, 50%)`}function s(n){const o=t.vnode.el.getBoundingClientRect(),{clientX:r,clientY:s}=Sa(n);let i=r-o.left,u=s-o.top;i=Math.max(0,i),i=Math.min(i,o.width),u=Math.max(0,u),u=Math.min(u,o.height),l.value=i,a.value=u,e.color.set({saturation:i/o.width*100,value:100-u/o.height*100})}return le((()=>o.value),(()=>{r()})),w((()=>{vn(t.vnode.el,{drag:e=>{s(e)},end:e=>{s(e)}}),r()})),{cursorTop:a,cursorLeft:l,background:n,colorValue:o,handleDrag:s,update:r}}}),Tn=V("div",{class:"el-color-svpanel__white"},null,-1),En=V("div",{class:"el-color-svpanel__black"},null,-1),An=[V("div",null,null,-1)];const Nn=m({name:"ElColorPicker",components:{ElButton:Yt,ElTooltip:St,ElInput:Dt,ElIcon:O,Close:Re,ArrowDown:fe,SvPanel:j(Pn,[["render",function(e,t,a,l,n,o){return S(),$("div",{class:"el-color-svpanel",style:B({backgroundColor:e.background})},[Tn,En,V("div",{class:"el-color-svpanel__cursor",style:B({top:e.cursorTop+"px",left:e.cursorLeft+"px"})},An,4)],4)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/sv-panel.vue"]]),HueSlider:mn,AlphaSlider:fn,Predefine:In},directives:{ClickOutside:Nt},props:{modelValue:String,id:String,showAlpha:Boolean,colorFormat:String,disabled:Boolean,size:{type:String,validator:ia},popperClass:String,label:{type:String,default:void 0},tabindex:{type:[String,Number],default:0},predefine:Array},emits:["change","active-change",Xt],setup(e,{emit:t}){const{t:a}=la(),l=g("color"),n=ee(te,{}),o=ee(ae,{}),{inputId:r,isLabeledByFormItem:s}=ta(e,{formItemContext:o}),i=b(null),u=b(null),d=b(null),c=b(null);let p=!0;const v=we(new Mn({enableAlpha:e.showAlpha,format:e.colorFormat,value:e.modelValue})),f=b(!1),m=b(!1),h=b(""),k=y((()=>e.modelValue||m.value?function(e,t){if(!(e instanceof Mn))throw new TypeError("color should be instance of _color Class");const{r:a,g:l,b:n}=e.toRgb();return t?`rgba(${a}, ${l}, ${n}, ${e.get("alpha")/100})`:`rgb(${a}, ${l}, ${n})`}(v,e.showAlpha):"transparent")),S=se(),x=y((()=>!(!e.disabled&&!n.disabled))),C=y((()=>e.modelValue||m.value?v.value:"")),V=y((()=>s.value?void 0:e.label||a("el.colorpicker.defaultLabel"))),M=y((()=>s.value?o.labelId:void 0));le((()=>e.modelValue),(e=>{e?e&&e!==v.value&&(p=!1,v.fromString(e)):m.value=!1})),le((()=>C.value),(e=>{h.value=e,p&&t("active-change",e),p=!0})),le((()=>v.value),(()=>{e.modelValue||m.value||(m.value=!0)}));const D=aa((function(e){f.value=e}),100);function $(){H((()=>{e.modelValue?v.fromString(e.modelValue):m.value=!1}))}return w((()=>{e.modelValue&&(h.value=C.value)})),le((()=>f.value),(()=>{H((()=>{var e,t,a;null==(e=i.value)||e.update(),null==(t=u.value)||t.update(),null==(a=d.value)||a.update()}))})),ie(hn,{currentColor:C}),{color:v,colorDisabled:x,colorSize:S,displayedColor:k,showPanelColor:m,showPicker:f,customInput:h,buttonId:r,buttonAriaLabel:V,buttonAriaLabelledby:M,handleConfirm:function(){v.fromString(h.value)},hide:function(){D(!1),$()},handleTrigger:function(){x.value||D(!f.value)},clear:function(){var a;D(!1),t(Xt,null),t("change",null),null!==e.modelValue&&(null==(a=o.validate)||a.call(o,"change").catch((e=>ne()))),$()},confirmValue:function(){var a;const l=v.value;t(Xt,l),t("change",l),null==(a=o.validate)||a.call(o,"change").catch((e=>ne())),D(!1),H((()=>{const t=new Mn({enableAlpha:e.showAlpha,format:e.colorFormat,value:e.modelValue});v.compare(t)||$()}))},t:a,ns:l,hue:i,svPanel:u,alpha:d,popper:c}}}),Fn=["id","aria-label","aria-labelledby","aria-description","tabindex"];var Bn=j(Nn,[["render",function(e,t,a,l,n,o){const r=De("hue-slider"),s=De("sv-panel"),i=De("alpha-slider"),u=De("predefine"),d=De("el-input"),c=De("el-button"),p=De("arrow-down"),v=De("el-icon"),f=De("close"),m=De("el-tooltip"),h=Ee("click-outside");return S(),x(m,{ref:"popper",visible:e.showPicker,"onUpdate:visible":t[3]||(t[3]=t=>e.showPicker=t),"show-arrow":!1,"fallback-placements":["bottom","top","right","left"],offset:0,"gpu-acceleration":!1,"popper-class":[e.ns.be("picker","panel"),e.ns.b("dropdown"),e.popperClass],"stop-popper-mouse-event":!1,effect:"light",trigger:"click",transition:"el-zoom-in-top",persistent:""},{content:C((()=>[pe((S(),$("div",null,[V("div",{class:_(e.ns.be("dropdown","main-wrapper"))},[M(r,{ref:"hue",class:"hue-slider",color:e.color,vertical:""},null,8,["color"]),M(s,{ref:"svPanel",color:e.color},null,8,["color"])],2),e.showAlpha?(S(),x(i,{key:0,ref:"alpha",color:e.color},null,8,["color"])):de("v-if",!0),e.predefine?(S(),x(u,{key:1,ref:"predefine",color:e.color,colors:e.predefine},null,8,["color","colors"])):de("v-if",!0),V("div",{class:_(e.ns.be("dropdown","btns"))},[V("span",{class:_(e.ns.be("dropdown","value"))},[M(d,{modelValue:e.customInput,"onUpdate:modelValue":t[0]||(t[0]=t=>e.customInput=t),"validate-event":!1,size:"small",onKeyup:L(e.handleConfirm,["enter"]),onBlur:e.handleConfirm},null,8,["modelValue","onKeyup","onBlur"])],2),M(c,{class:_(e.ns.be("dropdown","link-btn")),text:"",size:"small",onClick:e.clear},{default:C((()=>[E(A(e.t("el.colorpicker.clear")),1)])),_:1},8,["class","onClick"]),M(c,{plain:"",size:"small",class:_(e.ns.be("dropdown","btn")),onClick:e.confirmValue},{default:C((()=>[E(A(e.t("el.colorpicker.confirm")),1)])),_:1},8,["class","onClick"])],2)])),[[h,e.hide]])])),default:C((()=>[V("div",{id:e.buttonId,class:_([e.ns.b("picker"),e.ns.is("disabled",e.colorDisabled),e.ns.bm("picker",e.colorSize)]),role:"button","aria-label":e.buttonAriaLabel,"aria-labelledby":e.buttonAriaLabelledby,"aria-description":e.t("el.colorpicker.description",{color:e.modelValue}),tabindex:e.tabindex,onKeydown:t[2]||(t[2]=L(((...t)=>e.handleTrigger&&e.handleTrigger(...t)),["enter"]))},[e.colorDisabled?(S(),$("div",{key:0,class:_(e.ns.be("picker","mask"))},null,2)):de("v-if",!0),V("div",{class:_(e.ns.be("picker","trigger")),onClick:t[1]||(t[1]=(...t)=>e.handleTrigger&&e.handleTrigger(...t))},[V("span",{class:_([e.ns.be("picker","color"),e.ns.is("alpha",e.showAlpha)])},[V("span",{class:_(e.ns.be("picker","color-inner")),style:B({backgroundColor:e.displayedColor})},[pe(M(v,{class:_([e.ns.be("picker","icon"),e.ns.is("icon-arrow-down")])},{default:C((()=>[M(p)])),_:1},8,["class"]),[[Ne,e.modelValue||e.showPanelColor]]),e.modelValue||e.showPanelColor?de("v-if",!0):(S(),x(v,{key:0,class:_([e.ns.be("picker","empty"),e.ns.is("icon-close")])},{default:C((()=>[M(f)])),_:1},8,["class"]))],6)],2)],2)],42,Fn)])),_:1},8,["visible","popper-class"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/index.vue"]]);Bn.install=e=>{e.component(Bn.name,Bn)};const zn=Bn;var Rn,Ln,qn={exports:{}},Yn=qn.exports=function(e,t,a){var l=t.prototype,n=l.format;a.en.ordinal=function(e){var t=["th","st","nd","rd"],a=e%100;return"["+e+(t[(a-20)%10]||t[a]||t[0])+"]"},l.format=function(e){var t=this,a=this.$locale();if(!this.isValid())return n.bind(this)(e);var l=this.$utils(),o=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return a.ordinal(t.$D);case"gggg":return t.weekYear();case"GGGG":return t.isoWeekYear();case"wo":return a.ordinal(t.week(),"W");case"w":case"ww":return l.s(t.week(),"w"===e?1:2,"0");case"W":case"WW":return l.s(t.isoWeek(),"W"===e?1:2,"0");case"k":case"kk":return l.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return n.bind(this)(o)}},jn={exports:{}},Hn=jn.exports=(Rn="week",Ln="year",function(e,t,a){var l=t.prototype;l.week=function(e){if(void 0===e&&(e=null),null!==e)return this.add(7*(e-this.week()),"day");var t=this.$locale().yearStart||1;if(11===this.month()&&this.date()>25){var l=a(this).startOf(Ln).add(1,Ln).date(t),n=a(this).endOf(Rn);if(l.isBefore(n))return 1}var o=a(this).startOf(Ln).date(t).startOf(Rn).subtract(1,"millisecond"),r=this.diff(o,Rn,!0);return r<0?a(this).startOf("week").week():Math.ceil(r)},l.weeks=function(e){return void 0===e&&(e=null),this.week(e)}}),Wn={exports:{}},Kn=Wn.exports=function(e,t){t.prototype.weekYear=function(){var e=this.month(),t=this.week(),a=this.year();return 1===t&&11===e?a+1:0===e&&t>=52?a-1:a}},Un={exports:{}},Gn=Un.exports=function(e,t,a){t.prototype.dayOfYear=function(e){var t=Math.round((a(this).startOf("day")-a(this).startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"day")}},Xn={exports:{}},Zn=Xn.exports=function(e,t){t.prototype.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)}},Qn={exports:{}},Jn=Qn.exports=function(e,t){t.prototype.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)}};const eo=d({type:{type:c(String),default:"date"}}),to=["date","dates","year","month","week","range"],ao=d({disabledDate:{type:c(Function)},date:{type:c(Object),required:!0},minDate:{type:c(Object)},maxDate:{type:c(Object)},parsedValue:{type:c([Object,Array])},rangeState:{type:c(Object),default:()=>({endDate:null,selecting:!1})}}),lo=d({type:{type:c(String),required:!0,values:["year","month","date","dates","week","datetime","datetimerange","daterange","monthrange"]}}),no=d({unlinkPanels:Boolean,parsedValue:{type:c(Array)}}),oo=e=>({type:String,values:to,default:e}),ro=d({...lo,parsedValue:{type:c([Object,Array])},visible:{type:Boolean},format:{type:String,default:""}}),so=d({...ao,cellClassName:{type:c(Function)},showWeekNumber:Boolean,selectionMode:oo("date")}),io=e=>{if(!W(e))return!1;const[t,a]=e;return Na.isDayjs(t)&&Na.isDayjs(a)&&t.isSameOrBefore(a)},uo=(e,{lang:t,unit:a,unlinkPanels:l})=>{let n;if(W(e)){let[n,o]=e.map((e=>Na(e).locale(t)));return l||(o=n.add(1,a)),[n,o]}return n=e?Na(e):Na(),n=n.locale(t),[n,n.add(1,a)]},co=d({cell:{type:c(Object)}});var po=m({name:"ElDatePickerCell",props:co,setup(e){const t=g("date-table-cell"),{slots:a}=ee(Oa);return()=>{const{cell:l}=e;if(a.default){const e=a.default(l).filter((e=>-2!==e.patchFlag&&"Symbol(Comment)"!==e.type.toString()));if(e.length)return e}return M("div",{class:t.b()},[M("span",{class:t.e("text")},[null==l?void 0:l.text])])}}});const vo=["aria-label"],fo={key:0,scope:"col"},mo=["aria-label"],ho=["aria-current","aria-selected","tabindex"],go=m({__name:"basic-date-table",props:so,emits:["changerange","pick","select"],setup(e,{expose:t,emit:a}){const l=e,n=g("date-table"),{t:o,lang:r}=la(),s=b(),i=b(),u=b(),d=b(),c=b([[],[],[],[],[],[]]),p=l.date.$locale().weekStart||7,v=l.date.locale("en").localeData().weekdaysShort().map((e=>e.toLowerCase())),f=y((()=>p>3?7-p:-p)),m=y((()=>{const e=l.date.startOf("month");return e.subtract(e.day()||7,"day")})),h=y((()=>v.concat(v).slice(p,p+7))),k=y((()=>I.value.flat().some((e=>e.isCurrent)))),w=y((()=>{const e=l.date.startOf("month");return{startOfMonthDay:e.day()||7,dateCountOfMonth:e.daysInMonth(),dateCountOfLastMonth:e.subtract(1,"month").daysInMonth()}})),x=y((()=>"dates"===l.selectionMode?Ca(l.parsedValue):[])),C=(e,{columnIndex:t,rowIndex:a},n)=>{const{disabledDate:o,cellClassName:r}=l,s=D(x),i=((e,{count:t,rowIndex:a,columnIndex:l})=>{const{startOfMonthDay:n,dateCountOfMonth:o,dateCountOfLastMonth:r}=D(w),s=D(f);if(!(a>=0&&a<=1))return t<=o?e.text=t:(e.text=t-o,e.type="next-month"),!0;{const o=n+s<0?7+n+s:n+s;if(l+7*a>=o)return e.text=t,!0;e.text=r-(o-l%7)+1+7*a,e.type="prev-month"}return!1})(e,{count:n,rowIndex:a,columnIndex:t}),u=e.dayjs.toDate();return e.selected=s.find((t=>t.valueOf()===e.dayjs.valueOf())),e.isSelected=!!e.selected,e.isCurrent=E(e),e.disabled=null==o?void 0:o(u),e.customClass=null==r?void 0:r(u),i},O=e=>{if("week"===l.selectionMode){const[t,a]=l.showWeekNumber?[1,7]:[0,6],n=j(e[t+1]);e[t].inRange=n,e[t].start=n,e[a].inRange=n,e[a].end=n}},I=y((()=>{const{minDate:e,maxDate:t,rangeState:a,showWeekNumber:n}=l,o=f.value,s=c.value,i="day";let u=1;if(n)for(let l=0;l<6;l++)s[l][0]||(s[l][0]={type:"week",text:m.value.add(7*l+1,i).week()});return((e,t,{columnIndexOffset:a,startDate:l,nextEndDate:n,now:o,unit:r,relativeDateGetter:s,setCellMetadata:i,setRowMetadata:u})=>{for(let d=0;d<e.row;d++){const c=t[d];for(let t=0;t<e.column;t++){let u=c[t+a];u||(u={row:d,column:t,type:"normal",inRange:!1,start:!1,end:!1});const p=s(d*e.column+t);u.dayjs=p,u.date=p.toDate(),u.timestamp=p.valueOf(),u.type="normal",u.inRange=!!(l&&p.isSameOrAfter(l,r)&&n&&p.isSameOrBefore(n,r))||!!(l&&p.isSameOrBefore(l,r)&&n&&p.isSameOrAfter(n,r)),(null==l?void 0:l.isSameOrAfter(n))?(u.start=!!n&&p.isSame(n,r),u.end=l&&p.isSame(l,r)):(u.start=!!l&&p.isSame(l,r),u.end=!!n&&p.isSame(n,r)),p.isSame(o,r)&&(u.type="today"),null==i||i(u,{rowIndex:d,columnIndex:t}),c[t+a]=u}null==u||u(c)}})({row:6,column:7},s,{startDate:e,columnIndexOffset:n?1:0,nextEndDate:a.endDate||t||a.selecting&&e||null,now:Na().locale(D(r)).startOf(i),unit:i,relativeDateGetter:e=>m.value.add(e-o,i),setCellMetadata:(...e)=>{C(...e,u)&&(u+=1)},setRowMetadata:O}),s}));le((()=>l.date),(async()=>{var e,t;(null==(e=s.value)?void 0:e.contains(document.activeElement))&&(await H(),null==(t=i.value)||t.focus())}));const T=(e="")=>["normal","today"].includes(e),E=e=>"date"===l.selectionMode&&T(e.type)&&F(e,l.parsedValue),F=(e,t)=>!!t&&Na(t).locale(r.value).isSame(l.date.date(Number(e.text)),"day"),B=e=>{const t=[];return T(e.type)&&!e.disabled?(t.push("available"),"today"===e.type&&t.push("today")):t.push(e.type),E(e)&&t.push("current"),e.inRange&&(T(e.type)||"week"===l.selectionMode)&&(t.push("in-range"),e.start&&t.push("start-date"),e.end&&t.push("end-date")),e.disabled&&t.push("disabled"),e.selected&&t.push("selected"),e.customClass&&t.push(e.customClass),t.join(" ")},z=(e,t)=>{const a=7*e+(t-(l.showWeekNumber?1:0))-f.value;return m.value.add(a,"day")},R=e=>{var t;if(!l.rangeState.selecting)return;let n=e.target;if("SPAN"===n.tagName&&(n=null==(t=n.parentNode)?void 0:t.parentNode),"DIV"===n.tagName&&(n=n.parentNode),"TD"!==n.tagName)return;const o=n.parentNode.rowIndex-1,r=n.cellIndex;I.value[o][r].disabled||o===u.value&&r===d.value||(u.value=o,d.value=r,a("changerange",{selecting:!0,endDate:z(o,r)}))},L=e=>!k.value&&1===(null==e?void 0:e.text)&&"normal"===e.type||e.isCurrent,q=e=>{k.value||"date"!==l.selectionMode||Y(e,!0)},Y=(e,t=!1)=>{const n=e.target.closest("td");if(!n||"TD"!==n.tagName)return;const o=n.parentNode.rowIndex-1,r=n.cellIndex,s=I.value[o][r];if(s.disabled||"week"===s.type)return;const i=z(o,r);if("range"===l.selectionMode)l.rangeState.selecting&&l.minDate?(i>=l.minDate?a("pick",{minDate:l.minDate,maxDate:i}):a("pick",{minDate:i,maxDate:l.minDate}),a("select",!1)):(a("pick",{minDate:i,maxDate:null}),a("select",!0));else if("date"===l.selectionMode)a("pick",i,t);else if("week"===l.selectionMode){const e=i.week(),t=`${i.year()}w${e}`;a("pick",{year:i.year(),week:e,value:t,date:i.startOf("week")})}else if("dates"===l.selectionMode){const e=s.selected?Ca(l.parsedValue).filter((e=>(null==e?void 0:e.valueOf())!==i.valueOf())):Ca(l.parsedValue).concat([i]);a("pick",e)}},j=e=>{if("week"!==l.selectionMode)return!1;let t=l.date.startOf("day");if("prev-month"===e.type&&(t=t.subtract(1,"month")),"next-month"===e.type&&(t=t.add(1,"month")),t=t.date(Number.parseInt(e.text,10)),l.parsedValue&&!Array.isArray(l.parsedValue)){const e=(l.parsedValue.day()-p+7)%7-1;return l.parsedValue.subtract(e,"day").isSame(t,"day")}return!1};return t({focus:async()=>{var e;null==(e=i.value)||e.focus()}}),(e,t)=>(S(),$("table",{role:"grid","aria-label":D(o)("el.datepicker.dateTablePrompt"),cellspacing:"0",cellpadding:"0",class:_([D(n).b(),{"is-week-mode":"week"===e.selectionMode}]),onClick:Y,onMousemove:R},[V("tbody",{ref_key:"tbodyRef",ref:s},[V("tr",null,[e.showWeekNumber?(S(),$("th",fo,A(D(o)("el.datepicker.week")),1)):de("v-if",!0),(S(!0),$(N,null,P(D(h),((e,t)=>(S(),$("th",{key:t,scope:"col","aria-label":D(o)("el.datepicker.weeksFull."+e)},A(D(o)("el.datepicker.weeks."+e)),9,mo)))),128))]),(S(!0),$(N,null,P(D(I),((e,t)=>(S(),$("tr",{key:t,class:_([D(n).e("row"),{current:j(e[1])}])},[(S(!0),$(N,null,P(e,((e,a)=>(S(),$("td",{key:`${t}.${a}`,ref_for:!0,ref:t=>{L(e)&&(i.value=t)},class:_(B(e)),"aria-current":e.isCurrent?"date":void 0,"aria-selected":e.isCurrent,tabindex:L(e)?0:-1,onFocus:q},[M(D(po),{cell:e},null,8,["cell"])],42,ho)))),128))],2)))),128))],512)],42,vo))}});var bo=j(go,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-date-table.vue"]]);const yo=d({...ao,selectionMode:oo("month")}),ko=["aria-label"],wo=["aria-selected","aria-label","tabindex","onKeydown"],So={class:"cell"},xo=m({__name:"basic-month-table",props:yo,emits:["changerange","pick","select"],setup(e,{expose:t,emit:a}){const l=e,n=g("month-table"),{t:o,lang:r}=la(),s=b(),i=b(),u=b(l.date.locale("en").localeData().monthsShort().map((e=>e.toLowerCase()))),d=b([[],[],[]]),c=b(),p=b(),v=y((()=>{var e,t;const a=d.value,n=Na().locale(r.value).startOf("month");for(let o=0;o<3;o++){const r=a[o];for(let a=0;a<4;a++){const s=r[a]||(r[a]={row:o,column:a,type:"normal",inRange:!1,start:!1,end:!1,text:-1,disabled:!1});s.type="normal";const i=4*o+a,u=l.date.startOf("year").month(i),d=l.rangeState.endDate||l.maxDate||l.rangeState.selecting&&l.minDate||null;s.inRange=!!(l.minDate&&u.isSameOrAfter(l.minDate,"month")&&d&&u.isSameOrBefore(d,"month"))||!!(l.minDate&&u.isSameOrBefore(l.minDate,"month")&&d&&u.isSameOrAfter(d,"month")),(null==(e=l.minDate)?void 0:e.isSameOrAfter(d))?(s.start=!(!d||!u.isSame(d,"month")),s.end=l.minDate&&u.isSame(l.minDate,"month")):(s.start=!(!l.minDate||!u.isSame(l.minDate,"month")),s.end=!(!d||!u.isSame(d,"month")));n.isSame(u)&&(s.type="today"),s.text=i,s.disabled=(null==(t=l.disabledDate)?void 0:t.call(l,u.toDate()))||!1}}return a})),f=e=>{const t={},a=l.date.year(),n=new Date,o=e.text;return t.disabled=!!l.disabledDate&&((e,t,a)=>{const l=Na().locale(a).startOf("month").month(t).year(e),n=l.daysInMonth();return ja(n).map((e=>l.add(e,"day").toDate()))})(a,o,r.value).every(l.disabledDate),t.current=Ca(l.parsedValue).findIndex((e=>Na.isDayjs(e)&&e.year()===a&&e.month()===o))>=0,t.today=n.getFullYear()===a&&n.getMonth()===o,e.inRange&&(t["in-range"]=!0,e.start&&(t["start-date"]=!0),e.end&&(t["end-date"]=!0)),t},m=e=>{const t=l.date.year(),a=e.text;return Ca(l.date).findIndex((e=>e.year()===t&&e.month()===a))>=0},h=e=>{var t;if(!l.rangeState.selecting)return;let n=e.target;if("A"===n.tagName&&(n=null==(t=n.parentNode)?void 0:t.parentNode),"DIV"===n.tagName&&(n=n.parentNode),"TD"!==n.tagName)return;const o=n.parentNode.rowIndex,r=n.cellIndex;v.value[o][r].disabled||o===c.value&&r===p.value||(c.value=o,p.value=r,a("changerange",{selecting:!0,endDate:l.date.startOf("year").month(4*o+r)}))},k=e=>{var t;const n=null==(t=e.target)?void 0:t.closest("td");if("TD"!==(null==n?void 0:n.tagName))return;if(Le(n,"disabled"))return;const o=n.cellIndex,r=4*n.parentNode.rowIndex+o,s=l.date.startOf("year").month(r);"range"===l.selectionMode?l.rangeState.selecting?(l.minDate&&s>=l.minDate?a("pick",{minDate:l.minDate,maxDate:s}):a("pick",{minDate:s,maxDate:l.minDate}),a("select",!1)):(a("pick",{minDate:s,maxDate:null}),a("select",!0)):a("pick",r)};return le((()=>l.date),(async()=>{var e,t;(null==(e=s.value)?void 0:e.contains(document.activeElement))&&(await H(),null==(t=i.value)||t.focus())})),t({focus:()=>{var e;null==(e=i.value)||e.focus()}}),(e,t)=>(S(),$("table",{role:"grid","aria-label":D(o)("el.datepicker.monthTablePrompt"),class:_(D(n).b()),onClick:k,onMousemove:h},[V("tbody",{ref_key:"tbodyRef",ref:s},[(S(!0),$(N,null,P(D(v),((e,t)=>(S(),$("tr",{key:t},[(S(!0),$(N,null,P(e,((e,t)=>(S(),$("td",{key:t,ref_for:!0,ref:t=>m(e)&&(i.value=t),class:_(f(e)),"aria-selected":`${m(e)}`,"aria-label":D(o)("el.datepicker.month"+(+e.text+1)),tabindex:m(e)?0:-1,onKeydown:[L(q(k,["prevent","stop"]),["space"]),L(q(k,["prevent","stop"]),["enter"])]},[V("div",null,[V("span",So,A(D(o)("el.datepicker.months."+u.value[e.text])),1)])],42,wo)))),128))])))),128))],512)],42,ko))}});var Co=j(xo,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue"]]);const{date:Vo,disabledDate:Mo,parsedValue:Do}=ao,$o=d({date:Vo,disabledDate:Mo,parsedValue:Do}),Oo=["aria-label"],_o=["aria-selected","tabindex","onKeydown"],Io={class:"cell"},Po={key:1},To=m({__name:"basic-year-table",props:$o,emits:["pick"],setup(e,{expose:t,emit:a}){const l=e,n=g("year-table"),{t:o,lang:r}=la(),s=b(),i=b(),u=y((()=>10*Math.floor(l.date.year()/10))),d=e=>{const t={},a=Na().locale(r.value);return t.disabled=!!l.disabledDate&&((e,t)=>{const a=Na(String(e)).locale(t).startOf("year"),l=a.endOf("year").dayOfYear();return ja(l).map((e=>a.add(e,"day").toDate()))})(e,r.value).every(l.disabledDate),t.current=Ca(l.parsedValue).findIndex((t=>t.year()===e))>=0,t.today=a.year()===e,t},c=e=>e===u.value&&l.date.year()<u.value&&l.date.year()>u.value+9||Ca(l.date).findIndex((t=>t.year()===e))>=0,p=e=>{const t=e.target.closest("td");if(t){if(Le(t.parentNode,"disabled"))return;const e=t.textContent||t.innerText;a("pick",Number(e))}};return le((()=>l.date),(async()=>{var e,t;(null==(e=s.value)?void 0:e.contains(document.activeElement))&&(await H(),null==(t=i.value)||t.focus())})),t({focus:()=>{var e;null==(e=i.value)||e.focus()}}),(e,t)=>(S(),$("table",{role:"grid","aria-label":D(o)("el.datepicker.yearTablePrompt"),class:_(D(n).b()),onClick:p},[V("tbody",{ref_key:"tbodyRef",ref:s},[(S(),$(N,null,P(3,((e,t)=>V("tr",{key:t},[(S(),$(N,null,P(4,((e,a)=>(S(),$(N,{key:t+"_"+a},[4*t+a<10?(S(),$("td",{key:0,ref_for:!0,ref:e=>c(D(u)+4*t+a)&&(i.value=e),class:_(["available",d(D(u)+4*t+a)]),"aria-selected":`${c(D(u)+4*t+a)}`,tabindex:c(D(u)+4*t+a)?0:-1,onKeydown:[L(q(p,["prevent","stop"]),["space"]),L(q(p,["prevent","stop"]),["enter"])]},[V("span",Io,A(D(u)+4*t+a),1)],42,_o)):(S(),$("td",Po))],64)))),64))]))),64))],512)],10,Oo))}});var Eo=j(To,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-year-table.vue"]]);const Ao=["onClick"],No=["aria-label"],Fo=["aria-label"],Bo=["aria-label"],zo=["aria-label"],Ro=m({__name:"panel-date-pick",props:ro,emits:["pick","set-picker-option","panel-change"],setup(e,{emit:t}){const a=e,l=g("picker-panel"),n=g("date-picker"),o=h(),r=qe(),{t:s,lang:i}=la(),u=ee("EP_PICKER_BASE"),d=ee(Vt),{shortcuts:c,disabledDate:p,cellClassName:v,defaultTime:f,arrowControl:m}=u.props,k=Ye(u.props,"defaultValue"),w=b(),I=b(Na().locale(i.value)),F=y((()=>Na(f).locale(i.value))),B=y((()=>I.value.month())),z=y((()=>I.value.year())),R=b([]),q=b(null),Y=b(null),j=e=>!(R.value.length>0)||(R.value,a.format,!0),K=e=>f&&!ge.value?F.value.year(e.year()).month(e.month()).date(e.date()):ie.value?e.millisecond(0):e.startOf("day"),U=(e,...a)=>{if(e)if(W(e)){const l=e.map(K);t("pick",l,...a)}else t("pick",K(e),...a);else t("pick",e,...a);q.value=null,Y.value=null},G=(e,t)=>{if("date"===te.value){let l=a.parsedValue?a.parsedValue.year(e.year()).month(e.month()).date(e.date()):e;j()||(l=R.value[0][0].year(e.year()).month(e.month()).date(e.date())),I.value=l,U(l,ie.value||t)}else"week"===te.value?U(e.date):"dates"===te.value&&U(e,!0)},X=e=>{const t=e?"add":"subtract";I.value=I.value[t](1,"month"),Pe("month")},Z=e=>{const t=I.value,a=e?"add":"subtract";I.value="year"===Q.value?t[a](10,"year"):t[a](1,"year"),Pe("year")},Q=b("date"),J=y((()=>{const e=s("el.datepicker.year");if("year"===Q.value){const t=10*Math.floor(z.value/10);return e?`${t} ${e} - ${t+9} ${e}`:`${t} - ${t+9}`}return`${z.value} ${e}`})),te=y((()=>{const{type:e}=a;return["week","month","year","dates"].includes(e)?e:"date"})),ae=y((()=>"date"===te.value?Q.value:te.value)),ne=y((()=>!!c.length)),oe=async e=>{I.value=I.value.startOf("month").month(e),"month"===te.value?U(I.value,!1):(Q.value="date",["month","year","date","week"].includes(te.value)&&(U(I.value,!0),await H(),$e())),Pe("month")},re=async e=>{"year"===te.value?(I.value=I.value.startOf("year").year(e),U(I.value,!1)):(I.value=I.value.year(e),Q.value="month",["month","year","date","week"].includes(te.value)&&(U(I.value,!0),await H(),$e())),Pe("year")},se=async e=>{Q.value=e,await H(),$e()},ie=y((()=>"datetime"===a.type||"datetimerange"===a.type)),ue=y((()=>ie.value||"dates"===te.value)),ve=()=>{if("dates"===te.value)U(a.parsedValue);else{let e=a.parsedValue;if(!e){const t=Na(f).locale(i.value),a=De();e=t.year(a.year()).month(a.month()).date(a.date())}I.value=e,U(e)}},fe=()=>{const e=Na().locale(i.value).toDate();p&&p(e)||!j()||(I.value=Na().locale(i.value),U(I.value))},me=y((()=>Wa(a.format))),he=y((()=>Ha(a.format))),ge=y((()=>Y.value?Y.value:a.parsedValue||k.value?(a.parsedValue||I.value).format(me.value):void 0)),be=y((()=>q.value?q.value:a.parsedValue||k.value?(a.parsedValue||I.value).format(he.value):void 0)),ye=b(!1),ke=()=>{ye.value=!0},we=()=>{ye.value=!1},Se=e=>({hour:e.hour(),minute:e.minute(),second:e.second(),year:e.year(),month:e.month(),date:e.date()}),xe=(e,t,l)=>{const{hour:n,minute:o,second:r}=Se(e),s=a.parsedValue?a.parsedValue.hour(n).minute(o).second(r):e;I.value=s,U(I.value,!0),l||(ye.value=t)},Ce=e=>{const t=Na(e,me.value).locale(i.value);if(t.isValid()&&j()){const{year:e,month:a,date:l}=Se(I.value);I.value=t.year(e).month(a).date(l),Y.value=null,ye.value=!1,U(I.value,!0)}},Ve=e=>{const t=Na(e,he.value).locale(i.value);if(t.isValid()){if(p&&p(t.toDate()))return;const{hour:e,minute:a,second:l}=Se(I.value);I.value=t.hour(e).minute(a).second(l),q.value=null,U(I.value,!0)}},De=()=>{const e=Na(k.value).locale(i.value);if(!k.value){const e=F.value;return Na().hour(e.hour()).minute(e.minute()).second(e.second()).locale(i.value)}return e},$e=async()=>{var e;["week","month","year","date"].includes(te.value)&&(null==(e=w.value)||e.focus(),"week"===te.value&&Ie(ce.down))},_e=e=>{const{code:t}=e;[ce.up,ce.down,ce.left,ce.right,ce.home,ce.end,ce.pageUp,ce.pageDown].includes(t)&&(Ie(t),e.stopPropagation(),e.preventDefault()),[ce.enter,ce.space].includes(t)&&null===q.value&&null===Y.value&&(e.preventDefault(),U(I.value,!1))},Ie=e=>{var a;const{up:l,down:n,left:o,right:r,home:s,end:u,pageUp:d,pageDown:c}=ce,v={year:{[l]:-4,[n]:4,[o]:-1,[r]:1,offset:(e,t)=>e.setFullYear(e.getFullYear()+t)},month:{[l]:-4,[n]:4,[o]:-1,[r]:1,offset:(e,t)=>e.setMonth(e.getMonth()+t)},week:{[l]:-1,[n]:1,[o]:-1,[r]:1,offset:(e,t)=>e.setDate(e.getDate()+7*t)},date:{[l]:-7,[n]:7,[o]:-1,[r]:1,[s]:e=>-e.getDay(),[u]:e=>6-e.getDay(),[d]:e=>-new Date(e.getFullYear(),e.getMonth(),0).getDate(),[c]:e=>new Date(e.getFullYear(),e.getMonth()+1,0).getDate(),offset:(e,t)=>e.setDate(e.getDate()+t)}},f=I.value.toDate();for(;Math.abs(I.value.diff(f,"year",!0))<1;){const l=v[ae.value];if(!l)return;if(l.offset(f,Oe(l[e])?l[e](f):null!=(a=l[e])?a:0),p&&p(f))break;const n=Na(f).locale(i.value);I.value=n,t("pick",n,!0);break}},Pe=e=>{t("panel-change",I.value.toDate(),e,Q.value)};return le((()=>te.value),(e=>{["month","year"].includes(e)?Q.value=e:Q.value="date"}),{immediate:!0}),le((()=>Q.value),(()=>{null==d||d.updatePopper()})),le((()=>k.value),(e=>{e&&(I.value=De())}),{immediate:!0}),le((()=>a.parsedValue),(e=>{if(e){if("dates"===te.value)return;if(Array.isArray(e))return;I.value=e}else I.value=De()}),{immediate:!0}),t("set-picker-option",["isValidValue",e=>Na.isDayjs(e)&&e.isValid()&&(!p||!p(e.toDate()))]),t("set-picker-option",["formatToString",e=>"dates"===te.value?e.map((e=>e.format(a.format))):e.format(a.format)]),t("set-picker-option",["parseUserInput",e=>Na(e,a.format).locale(i.value)]),t("set-picker-option",["handleFocusPicker",$e]),(e,a)=>(S(),$("div",{class:_([D(l).b(),D(n).b(),{"has-sidebar":e.$slots.sidebar||D(ne),"has-time":D(ie)}])},[V("div",{class:_(D(l).e("body-wrapper"))},[T(e.$slots,"sidebar",{class:_(D(l).e("sidebar"))}),D(ne)?(S(),$("div",{key:0,class:_(D(l).e("sidebar"))},[(S(!0),$(N,null,P(D(c),((e,a)=>(S(),$("button",{key:a,type:"button",class:_(D(l).e("shortcut")),onClick:a=>(e=>{const a=Oe(e.value)?e.value():e.value;a?U(Na(a).locale(i.value)):e.onClick&&e.onClick({attrs:o,slots:r,emit:t})})(e)},A(e.text),11,Ao)))),128))],2)):de("v-if",!0),V("div",{class:_(D(l).e("body"))},[D(ie)?(S(),$("div",{key:0,class:_(D(n).e("time-header"))},[V("span",{class:_(D(n).e("editor-wrap"))},[M(D(Dt),{placeholder:D(s)("el.datepicker.selectDate"),"model-value":D(be),size:"small",onInput:a[0]||(a[0]=e=>q.value=e),onChange:Ve},null,8,["placeholder","model-value"])],2),pe((S(),$("span",{class:_(D(n).e("editor-wrap"))},[M(D(Dt),{placeholder:D(s)("el.datepicker.selectTime"),"model-value":D(ge),size:"small",onFocus:ke,onInput:a[1]||(a[1]=e=>Y.value=e),onChange:Ce},null,8,["placeholder","model-value"]),M(D(hl),{visible:ye.value,format:D(me),"time-arrow-control":D(m),"parsed-value":I.value,onPick:xe},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[D(Nt),we]])],2)):de("v-if",!0),pe(V("div",{class:_([D(n).e("header"),("year"===Q.value||"month"===Q.value)&&D(n).e("header--bordered")])},[V("span",{class:_(D(n).e("prev-btn"))},[V("button",{type:"button","aria-label":D(s)("el.datepicker.prevYear"),class:_(["d-arrow-left",D(l).e("icon-btn")]),onClick:a[2]||(a[2]=e=>Z(!1))},[M(D(O),null,{default:C((()=>[M(D(je))])),_:1})],10,No),pe(V("button",{type:"button","aria-label":D(s)("el.datepicker.prevMonth"),class:_([D(l).e("icon-btn"),"arrow-left"]),onClick:a[3]||(a[3]=e=>X(!1))},[M(D(O),null,{default:C((()=>[M(D(He))])),_:1})],10,Fo),[[Ne,"date"===Q.value]])],2),V("span",{role:"button",class:_(D(n).e("header-label")),"aria-live":"polite",tabindex:"0",onKeydown:a[4]||(a[4]=L((e=>se("year")),["enter"])),onClick:a[5]||(a[5]=e=>se("year"))},A(D(J)),35),pe(V("span",{role:"button","aria-live":"polite",tabindex:"0",class:_([D(n).e("header-label"),{active:"month"===Q.value}]),onKeydown:a[6]||(a[6]=L((e=>se("month")),["enter"])),onClick:a[7]||(a[7]=e=>se("month"))},A(D(s)(`el.datepicker.month${D(B)+1}`)),35),[[Ne,"date"===Q.value]]),V("span",{class:_(D(n).e("next-btn"))},[pe(V("button",{type:"button","aria-label":D(s)("el.datepicker.nextMonth"),class:_([D(l).e("icon-btn"),"arrow-right"]),onClick:a[8]||(a[8]=e=>X(!0))},[M(D(O),null,{default:C((()=>[M(D(Me))])),_:1})],10,Bo),[[Ne,"date"===Q.value]]),V("button",{type:"button","aria-label":D(s)("el.datepicker.nextYear"),class:_([D(l).e("icon-btn"),"d-arrow-right"]),onClick:a[9]||(a[9]=e=>Z(!0))},[M(D(O),null,{default:C((()=>[M(D(We))])),_:1})],10,zo)],2)],2),[[Ne,"time"!==Q.value]]),V("div",{class:_(D(l).e("content")),onKeydown:_e},["date"===Q.value?(S(),x(bo,{key:0,ref_key:"currentViewRef",ref:w,"selection-mode":D(te),date:I.value,"parsed-value":e.parsedValue,"disabled-date":D(p),"cell-class-name":D(v),onPick:G},null,8,["selection-mode","date","parsed-value","disabled-date","cell-class-name"])):de("v-if",!0),"year"===Q.value?(S(),x(Eo,{key:1,ref_key:"currentViewRef",ref:w,date:I.value,"disabled-date":D(p),"parsed-value":e.parsedValue,onPick:re},null,8,["date","disabled-date","parsed-value"])):de("v-if",!0),"month"===Q.value?(S(),x(Co,{key:2,ref_key:"currentViewRef",ref:w,date:I.value,"parsed-value":e.parsedValue,"disabled-date":D(p),onPick:oe},null,8,["date","parsed-value","disabled-date"])):de("v-if",!0)],34)],2)],2),pe(V("div",{class:_(D(l).e("footer"))},[pe(M(D(Yt),{text:"",size:"small",class:_(D(l).e("link-btn")),onClick:fe},{default:C((()=>[E(A(D(s)("el.datepicker.now")),1)])),_:1},8,["class"]),[[Ne,"dates"!==D(te)]]),M(D(Yt),{plain:"",size:"small",class:_(D(l).e("link-btn")),onClick:ve},{default:C((()=>[E(A(D(s)("el.datepicker.confirm")),1)])),_:1},8,["class"])],2),[[Ne,D(ue)&&"date"===Q.value]])],2))}});var Lo=j(Ro,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-pick.vue"]]);const qo=d({...lo,...no}),Yo=(e,{defaultValue:t,leftDate:a,rightDate:l,unit:n,onParsedValueChanged:o})=>{const{emit:r}=$e(),{pickerNs:s}=ee(Oa),i=g("date-range-picker"),{t:u,lang:d}=la(),c=(e=>{const{emit:t}=$e(),a=h(),l=qe();return n=>{const o=Oe(n.value)?n.value():n.value;o?t("pick",[Na(o[0]).locale(e.value),Na(o[1]).locale(e.value)]):n.onClick&&n.onClick({attrs:a,slots:l,emit:t})}})(d),p=b(),v=b(),f=b({endDate:null,selecting:!1}),m=()=>{const[o,r]=uo(D(t),{lang:D(d),unit:n,unlinkPanels:e.unlinkPanels});p.value=void 0,v.value=void 0,a.value=o,l.value=r};return le(t,(e=>{e&&m()}),{immediate:!0}),le((()=>e.parsedValue),(e=>{if(W(e)&&2===e.length){const[t,l]=e;p.value=t,a.value=t,v.value=l,o(D(p),D(v))}else m()}),{immediate:!0}),{minDate:p,maxDate:v,rangeState:f,lang:d,ppNs:s,drpNs:i,handleChangeRange:e=>{f.value=e},handleRangeConfirm:(e=!1)=>{const t=D(p),a=D(v);io([t,a])&&r("pick",[t,a],e)},handleShortcutClick:c,onSelect:e=>{f.value.selecting=e,e||(f.value.endDate=null)},t:u}},jo=["onClick"],Ho=["disabled"],Wo=["disabled"],Ko=["disabled"],Uo=["disabled"],Go=m({__name:"panel-date-range",props:qo,emits:["pick","set-picker-option","calendar-change","panel-change"],setup(e,{emit:t}){const a=e,l="month",n=ee("EP_PICKER_BASE"),{disabledDate:o,cellClassName:r,format:s,defaultTime:i,arrowControl:u,clearable:d}=n.props,c=Ye(n.props,"shortcuts"),p=Ye(n.props,"defaultValue"),{lang:v}=la(),f=b(Na().locale(v.value)),m=b(Na().locale(v.value).add(1,l)),{minDate:h,maxDate:g,rangeState:k,ppNs:w,drpNs:I,handleChangeRange:F,handleRangeConfirm:B,handleShortcutClick:z,onSelect:R,t:L}=Yo(a,{defaultValue:p,leftDate:f,rightDate:m,unit:l,onParsedValueChanged:function(e,t){if(a.unlinkPanels&&t){const a=(null==e?void 0:e.year())||0,n=(null==e?void 0:e.month())||0,o=t.year(),r=t.month();m.value=a===o&&n===r?t.add(1,l):t}else m.value=f.value.add(1,l),t&&(m.value=m.value.hour(t.hour()).minute(t.minute()).second(t.second()))}}),q=b({min:null,max:null}),Y=b({min:null,max:null}),j=y((()=>`${f.value.year()} ${L("el.datepicker.year")} ${L(`el.datepicker.month${f.value.month()+1}`)}`)),H=y((()=>`${m.value.year()} ${L("el.datepicker.year")} ${L(`el.datepicker.month${m.value.month()+1}`)}`)),K=y((()=>f.value.year())),U=y((()=>f.value.month())),G=y((()=>m.value.year())),X=y((()=>m.value.month())),Z=y((()=>!!c.value.length)),Q=y((()=>null!==q.value.min?q.value.min:h.value?h.value.format(ne.value):"")),J=y((()=>null!==q.value.max?q.value.max:g.value||h.value?(g.value||h.value).format(ne.value):"")),te=y((()=>null!==Y.value.min?Y.value.min:h.value?h.value.format(le.value):"")),ae=y((()=>null!==Y.value.max?Y.value.max:g.value||h.value?(g.value||h.value).format(le.value):"")),le=y((()=>Wa(s))),ne=y((()=>Ha(s))),oe=()=>{f.value=f.value.subtract(1,"year"),a.unlinkPanels||(m.value=f.value.add(1,"month")),me("year")},re=()=>{f.value=f.value.subtract(1,"month"),a.unlinkPanels||(m.value=f.value.add(1,"month")),me("month")},se=()=>{a.unlinkPanels?m.value=m.value.add(1,"year"):(f.value=f.value.add(1,"year"),m.value=f.value.add(1,"month")),me("year")},ie=()=>{a.unlinkPanels?m.value=m.value.add(1,"month"):(f.value=f.value.add(1,"month"),m.value=f.value.add(1,"month")),me("month")},ue=()=>{f.value=f.value.add(1,"year"),me("year")},ce=()=>{f.value=f.value.add(1,"month"),me("month")},ve=()=>{m.value=m.value.subtract(1,"year"),me("year")},fe=()=>{m.value=m.value.subtract(1,"month"),me("month")},me=e=>{t("panel-change",[f.value.toDate(),m.value.toDate()],e)},he=y((()=>{const e=(U.value+1)%12,t=U.value+1>=12?1:0;return a.unlinkPanels&&new Date(K.value+t,e)<new Date(G.value,X.value)})),ge=y((()=>a.unlinkPanels&&12*G.value+X.value-(12*K.value+U.value+1)>=12)),be=y((()=>!(h.value&&g.value&&!k.value.selecting&&io([h.value,g.value])))),ye=y((()=>"datetime"===a.type||"datetimerange"===a.type)),ke=(e,t)=>{if(e){if(i){return Na(i[t]||i).locale(v.value).year(e.year()).month(e.month()).date(e.date())}return e}},we=(e,a=!0)=>{const l=e.minDate,n=e.maxDate,o=ke(l,0),r=ke(n,1);g.value===r&&h.value===o||(t("calendar-change",[l.toDate(),n&&n.toDate()]),g.value=r,h.value=o,a&&!ye.value&&B())},Se=b(!1),xe=b(!1),Ce=()=>{Se.value=!1},Ve=()=>{xe.value=!1},De=(e,t)=>{q.value[t]=e;const l=Na(e,ne.value).locale(v.value);if(l.isValid()){if(o&&o(l.toDate()))return;"min"===t?(f.value=l,h.value=(h.value||f.value).year(l.year()).month(l.month()).date(l.date()),a.unlinkPanels||(m.value=l.add(1,"month"),g.value=h.value.add(1,"month"))):(m.value=l,g.value=(g.value||m.value).year(l.year()).month(l.month()).date(l.date()),a.unlinkPanels||(f.value=l.subtract(1,"month"),h.value=g.value.subtract(1,"month")))}},$e=(e,t)=>{q.value[t]=null},Oe=(e,t)=>{Y.value[t]=e;const a=Na(e,le.value).locale(v.value);a.isValid()&&("min"===t?(Se.value=!0,h.value=(h.value||f.value).hour(a.hour()).minute(a.minute()).second(a.second()),g.value&&!g.value.isBefore(h.value)||(g.value=h.value)):(xe.value=!0,g.value=(g.value||m.value).hour(a.hour()).minute(a.minute()).second(a.second()),m.value=g.value,g.value&&g.value.isBefore(h.value)&&(h.value=g.value)))},_e=(e,t)=>{Y.value[t]=null,"min"===t?(f.value=h.value,Se.value=!1):(m.value=g.value,xe.value=!1)},Ie=(e,t,a)=>{Y.value.min||(e&&(f.value=e,h.value=(h.value||f.value).hour(e.hour()).minute(e.minute()).second(e.second())),a||(Se.value=t),g.value&&!g.value.isBefore(h.value)||(g.value=h.value,m.value=e))},Pe=(e,t,a)=>{Y.value.max||(e&&(m.value=e,g.value=(g.value||m.value).hour(e.hour()).minute(e.minute()).second(e.second())),a||(xe.value=t),g.value&&g.value.isBefore(h.value)&&(h.value=g.value))},Te=()=>{f.value=uo(D(p),{lang:D(v),unit:"month",unlinkPanels:a.unlinkPanels})[0],m.value=f.value.add(1,"month"),t("pick",null)};return t("set-picker-option",["isValidValue",io]),t("set-picker-option",["parseUserInput",e=>W(e)?e.map((e=>Na(e,s).locale(v.value))):Na(e,s).locale(v.value)]),t("set-picker-option",["formatToString",e=>W(e)?e.map((e=>e.format(s))):e.format(s)]),t("set-picker-option",["handleClear",Te]),(e,t)=>(S(),$("div",{class:_([D(w).b(),D(I).b(),{"has-sidebar":e.$slots.sidebar||D(Z),"has-time":D(ye)}])},[V("div",{class:_(D(w).e("body-wrapper"))},[T(e.$slots,"sidebar",{class:_(D(w).e("sidebar"))}),D(Z)?(S(),$("div",{key:0,class:_(D(w).e("sidebar"))},[(S(!0),$(N,null,P(D(c),((e,t)=>(S(),$("button",{key:t,type:"button",class:_(D(w).e("shortcut")),onClick:t=>D(z)(e)},A(e.text),11,jo)))),128))],2)):de("v-if",!0),V("div",{class:_(D(w).e("body"))},[D(ye)?(S(),$("div",{key:0,class:_(D(I).e("time-header"))},[V("span",{class:_(D(I).e("editors-wrap"))},[V("span",{class:_(D(I).e("time-picker-wrap"))},[M(D(Dt),{size:"small",disabled:D(k).selecting,placeholder:D(L)("el.datepicker.startDate"),class:_(D(I).e("editor")),"model-value":D(Q),onInput:t[0]||(t[0]=e=>De(e,"min")),onChange:t[1]||(t[1]=e=>$e(0,"min"))},null,8,["disabled","placeholder","class","model-value"])],2),pe((S(),$("span",{class:_(D(I).e("time-picker-wrap"))},[M(D(Dt),{size:"small",class:_(D(I).e("editor")),disabled:D(k).selecting,placeholder:D(L)("el.datepicker.startTime"),"model-value":D(te),onFocus:t[2]||(t[2]=e=>Se.value=!0),onInput:t[3]||(t[3]=e=>Oe(e,"min")),onChange:t[4]||(t[4]=e=>_e(0,"min"))},null,8,["class","disabled","placeholder","model-value"]),M(D(hl),{visible:Se.value,format:D(le),"datetime-role":"start","time-arrow-control":D(u),"parsed-value":f.value,onPick:Ie},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[D(Nt),Ce]])],2),V("span",null,[M(D(O),null,{default:C((()=>[M(D(Me))])),_:1})]),V("span",{class:_([D(I).e("editors-wrap"),"is-right"])},[V("span",{class:_(D(I).e("time-picker-wrap"))},[M(D(Dt),{size:"small",class:_(D(I).e("editor")),disabled:D(k).selecting,placeholder:D(L)("el.datepicker.endDate"),"model-value":D(J),readonly:!D(h),onInput:t[5]||(t[5]=e=>De(e,"max")),onChange:t[6]||(t[6]=e=>$e(0,"max"))},null,8,["class","disabled","placeholder","model-value","readonly"])],2),pe((S(),$("span",{class:_(D(I).e("time-picker-wrap"))},[M(D(Dt),{size:"small",class:_(D(I).e("editor")),disabled:D(k).selecting,placeholder:D(L)("el.datepicker.endTime"),"model-value":D(ae),readonly:!D(h),onFocus:t[7]||(t[7]=e=>D(h)&&(xe.value=!0)),onInput:t[8]||(t[8]=e=>Oe(e,"max")),onChange:t[9]||(t[9]=e=>_e(0,"max"))},null,8,["class","disabled","placeholder","model-value","readonly"]),M(D(hl),{"datetime-role":"end",visible:xe.value,format:D(le),"time-arrow-control":D(u),"parsed-value":m.value,onPick:Pe},null,8,["visible","format","time-arrow-control","parsed-value"])],2)),[[D(Nt),Ve]])],2)],2)):de("v-if",!0),V("div",{class:_([[D(w).e("content"),D(I).e("content")],"is-left"])},[V("div",{class:_(D(I).e("header"))},[V("button",{type:"button",class:_([D(w).e("icon-btn"),"d-arrow-left"]),onClick:oe},[M(D(O),null,{default:C((()=>[M(D(je))])),_:1})],2),V("button",{type:"button",class:_([D(w).e("icon-btn"),"arrow-left"]),onClick:re},[M(D(O),null,{default:C((()=>[M(D(He))])),_:1})],2),e.unlinkPanels?(S(),$("button",{key:0,type:"button",disabled:!D(ge),class:_([[D(w).e("icon-btn"),{"is-disabled":!D(ge)}],"d-arrow-right"]),onClick:ue},[M(D(O),null,{default:C((()=>[M(D(We))])),_:1})],10,Ho)):de("v-if",!0),e.unlinkPanels?(S(),$("button",{key:1,type:"button",disabled:!D(he),class:_([[D(w).e("icon-btn"),{"is-disabled":!D(he)}],"arrow-right"]),onClick:ce},[M(D(O),null,{default:C((()=>[M(D(Me))])),_:1})],10,Wo)):de("v-if",!0),V("div",null,A(D(j)),1)],2),M(bo,{"selection-mode":"range",date:f.value,"min-date":D(h),"max-date":D(g),"range-state":D(k),"disabled-date":D(o),"cell-class-name":D(r),onChangerange:D(F),onPick:we,onSelect:D(R)},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onSelect"])],2),V("div",{class:_([[D(w).e("content"),D(I).e("content")],"is-right"])},[V("div",{class:_(D(I).e("header"))},[e.unlinkPanels?(S(),$("button",{key:0,type:"button",disabled:!D(ge),class:_([[D(w).e("icon-btn"),{"is-disabled":!D(ge)}],"d-arrow-left"]),onClick:ve},[M(D(O),null,{default:C((()=>[M(D(je))])),_:1})],10,Ko)):de("v-if",!0),e.unlinkPanels?(S(),$("button",{key:1,type:"button",disabled:!D(he),class:_([[D(w).e("icon-btn"),{"is-disabled":!D(he)}],"arrow-left"]),onClick:fe},[M(D(O),null,{default:C((()=>[M(D(He))])),_:1})],10,Uo)):de("v-if",!0),V("button",{type:"button",class:_([D(w).e("icon-btn"),"d-arrow-right"]),onClick:se},[M(D(O),null,{default:C((()=>[M(D(We))])),_:1})],2),V("button",{type:"button",class:_([D(w).e("icon-btn"),"arrow-right"]),onClick:ie},[M(D(O),null,{default:C((()=>[M(D(Me))])),_:1})],2),V("div",null,A(D(H)),1)],2),M(bo,{"selection-mode":"range",date:m.value,"min-date":D(h),"max-date":D(g),"range-state":D(k),"disabled-date":D(o),"cell-class-name":D(r),onChangerange:D(F),onPick:we,onSelect:D(R)},null,8,["date","min-date","max-date","range-state","disabled-date","cell-class-name","onChangerange","onSelect"])],2)],2)],2),D(ye)?(S(),$("div",{key:0,class:_(D(w).e("footer"))},[D(d)?(S(),x(D(Yt),{key:0,text:"",size:"small",class:_(D(w).e("link-btn")),onClick:Te},{default:C((()=>[E(A(D(L)("el.datepicker.clear")),1)])),_:1},8,["class"])):de("v-if",!0),M(D(Yt),{plain:"",size:"small",class:_(D(w).e("link-btn")),disabled:D(be),onClick:t[10]||(t[10]=e=>D(B)(!1))},{default:C((()=>[E(A(D(L)("el.datepicker.confirm")),1)])),_:1},8,["class","disabled"])],2)):de("v-if",!0)],2))}});var Xo=j(Go,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-date-range.vue"]]);const Zo=d({...no}),Qo=["onClick"],Jo=["disabled"],er=["disabled"],tr=m({name:"DatePickerMonthRange",props:Zo,emits:["pick","set-picker-option"],setup(e,{emit:t}){const a=e,l="year",{lang:n}=la(),o=ee("EP_PICKER_BASE"),{shortcuts:r,disabledDate:s,format:i}=o.props,u=Ye(o.props,"defaultValue"),d=b(Na().locale(n.value)),c=b(Na().locale(n.value).add(1,l)),{minDate:p,maxDate:v,rangeState:f,ppNs:m,drpNs:h,handleChangeRange:g,handleRangeConfirm:k,handleShortcutClick:w,onSelect:x}=Yo(a,{defaultValue:u,leftDate:d,rightDate:c,unit:l,onParsedValueChanged:function(e,t){if(a.unlinkPanels&&t){const a=(null==e?void 0:e.year())||0,n=t.year();c.value=a===n?t.add(1,l):t}else c.value=d.value.add(1,l)}}),I=y((()=>!!r.length)),{leftPrevYear:E,rightNextYear:F,leftNextYear:B,rightPrevYear:z,leftLabel:R,rightLabel:L,leftYear:q,rightYear:Y}=(({unlinkPanels:e,leftDate:t,rightDate:a})=>{const{t:l}=la();return{leftPrevYear:()=>{t.value=t.value.subtract(1,"year"),e||(a.value=a.value.subtract(1,"year"))},rightNextYear:()=>{e||(t.value=t.value.add(1,"year")),a.value=a.value.add(1,"year")},leftNextYear:()=>{t.value=t.value.add(1,"year")},rightPrevYear:()=>{a.value=a.value.subtract(1,"year")},leftLabel:y((()=>`${t.value.year()} ${l("el.datepicker.year")}`)),rightLabel:y((()=>`${a.value.year()} ${l("el.datepicker.year")}`)),leftYear:y((()=>t.value.year())),rightYear:y((()=>a.value.year()===t.value.year()?t.value.year()+1:a.value.year()))}})({unlinkPanels:Ye(a,"unlinkPanels"),leftDate:d,rightDate:c}),j=y((()=>a.unlinkPanels&&Y.value>q.value+1)),H=(e,t=!0)=>{const a=e.minDate,l=e.maxDate;v.value===l&&p.value===a||(v.value=l,p.value=a,t&&k())};return t("set-picker-option",["formatToString",e=>e.map((e=>e.format(i)))]),(e,t)=>(S(),$("div",{class:_([D(m).b(),D(h).b(),{"has-sidebar":Boolean(e.$slots.sidebar)||D(I)}])},[V("div",{class:_(D(m).e("body-wrapper"))},[T(e.$slots,"sidebar",{class:_(D(m).e("sidebar"))}),D(I)?(S(),$("div",{key:0,class:_(D(m).e("sidebar"))},[(S(!0),$(N,null,P(D(r),((e,t)=>(S(),$("button",{key:t,type:"button",class:_(D(m).e("shortcut")),onClick:t=>D(w)(e)},A(e.text),11,Qo)))),128))],2)):de("v-if",!0),V("div",{class:_(D(m).e("body"))},[V("div",{class:_([[D(m).e("content"),D(h).e("content")],"is-left"])},[V("div",{class:_(D(h).e("header"))},[V("button",{type:"button",class:_([D(m).e("icon-btn"),"d-arrow-left"]),onClick:t[0]||(t[0]=(...e)=>D(E)&&D(E)(...e))},[M(D(O),null,{default:C((()=>[M(D(je))])),_:1})],2),e.unlinkPanels?(S(),$("button",{key:0,type:"button",disabled:!D(j),class:_([[D(m).e("icon-btn"),{[D(m).is("disabled")]:!D(j)}],"d-arrow-right"]),onClick:t[1]||(t[1]=(...e)=>D(B)&&D(B)(...e))},[M(D(O),null,{default:C((()=>[M(D(We))])),_:1})],10,Jo)):de("v-if",!0),V("div",null,A(D(R)),1)],2),M(Co,{"selection-mode":"range",date:d.value,"min-date":D(p),"max-date":D(v),"range-state":D(f),"disabled-date":D(s),onChangerange:D(g),onPick:H,onSelect:D(x)},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onSelect"])],2),V("div",{class:_([[D(m).e("content"),D(h).e("content")],"is-right"])},[V("div",{class:_(D(h).e("header"))},[e.unlinkPanels?(S(),$("button",{key:0,type:"button",disabled:!D(j),class:_([[D(m).e("icon-btn"),{"is-disabled":!D(j)}],"d-arrow-left"]),onClick:t[2]||(t[2]=(...e)=>D(z)&&D(z)(...e))},[M(D(O),null,{default:C((()=>[M(D(je))])),_:1})],10,er)):de("v-if",!0),V("button",{type:"button",class:_([D(m).e("icon-btn"),"d-arrow-right"]),onClick:t[3]||(t[3]=(...e)=>D(F)&&D(F)(...e))},[M(D(O),null,{default:C((()=>[M(D(We))])),_:1})],2),V("div",null,A(D(L)),1)],2),M(Co,{"selection-mode":"range",date:c.value,"min-date":D(p),"max-date":D(v),"range-state":D(f),"disabled-date":D(s),onChangerange:D(g),onPick:H,onSelect:D(x)},null,8,["date","min-date","max-date","range-state","disabled-date","onChangerange","onSelect"])],2)],2)],2)],2))}});var ar=j(tr,[["__file","/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/panel-month-range.vue"]]);Na.extend(Ba),Na.extend(Yn),Na.extend(Ra),Na.extend(Hn),Na.extend(Kn),Na.extend(Gn),Na.extend(Zn),Na.extend(Jn);const lr=m({name:"ElDatePicker",install:null,props:{...el,...eo},emits:["update:modelValue"],setup(e,{expose:t,emit:a,slots:l}){const n=g("picker-panel");ie("ElPopperOptions",we(Ye(e,"popperOptions"))),ie(Oa,{slots:l,pickerNs:n});const o=b();t({focus:(e=!0)=>{var t;null==(t=o.value)||t.focus(e)}});const r=e=>{a("update:modelValue",e)};return()=>{var t;const a=null!=(t=e.format)?t:qa[e.type]||"YYYY-MM-DD",n=function(e){switch(e){case"daterange":case"datetimerange":return Xo;case"monthrange":return ar;default:return Lo}}(e.type);return M(nl,R(e,{format:a,type:e.type,ref:o,"onUpdate:modelValue":r}),{default:e=>M(n,e,null),"range-separator":l["range-separator"]})}}});lr.install=e=>{e.component(lr.name,lr)};const nr=lr,or=d({model:Object,rules:{type:c(Object)},labelPosition:{type:String,values:["left","right","top"],default:"right"},labelWidth:{type:[String,Number],default:""},labelSuffix:{type:String,default:""},inline:Boolean,inlineMessage:Boolean,statusIcon:Boolean,showMessage:{type:Boolean,default:!0},size:{type:String,values:Ke},disabled:Boolean,validateOnRuleChange:{type:Boolean,default:!0},hideRequiredAsterisk:{type:Boolean,default:!1},scrollToError:Boolean});function rr(){const e=b([]);function t(t){return e.value.indexOf(t)}return{autoLabelWidth:y((()=>{if(!e.value.length)return"0";const t=Math.max(...e.value);return t?`${t}px`:""})),registerLabelWidth:function(a,l){if(a&&l){const n=t(l);e.value.splice(n,1,a)}else a&&e.value.push(a)},deregisterLabelWidth:function(a){const l=t(a);l>-1&&e.value.splice(l,1)}}}const sr=(e,t)=>{const a=fa(t);return a.length>0?e.filter((e=>e.prop&&a.includes(e.prop))):e},ir=m({name:"ElForm",props:or,emits:{validate:(e,t,a)=>(W(e)||v(e))&&be(t)&&v(a)},setup(e,{expose:t,emit:a}){const l=e,n=[],o=se(),r=g("form"),s=y((()=>{const{labelPosition:e,inline:t}=l;return[r.b(),r.m(o.value||"default"),{[r.m(`label-${e}`)]:e,[r.m("inline")]:t}]})),i=(e=[])=>{l.model&&sr(n,e).forEach((e=>e.resetField()))},u=(e=[])=>{sr(n,e).forEach((e=>e.clearValidate()))},d=y((()=>!!l.model)),c=async e=>v(void 0,e),p=async(e=[])=>{if(!d.value)return!1;const t=(e=>{if(0===n.length)return[];const t=sr(n,e);return t.length?t:[]})(e);if(0===t.length)return!0;let a={};for(const n of t)try{await n.validate("")}catch(l){a={...a,...l}}return 0===Object.keys(a).length||Promise.reject(a)},v=async(e=[],t)=>{const a=!Oe(t);try{const a=await p(e);return!0===a&&(null==t||t(a)),a}catch(Rn){const n=Rn;return l.scrollToError&&f(Object.keys(n)[0]),null==t||t(!1,n),a&&Promise.reject(n)}},f=e=>{var t;const a=sr(n,e)[0];a&&(null==(t=a.$el)||t.scrollIntoView())};return le((()=>l.rules),(()=>{l.validateOnRuleChange&&c().catch((e=>ne()))}),{deep:!0}),ie(te,we({...Se(l),emit:a,resetFields:i,clearValidate:u,validateField:v,addField:e=>{n.push(e)},removeField:e=>{e.prop&&n.splice(n.indexOf(e),1)},...rr()})),t({validate:c,validateField:v,resetFields:i,clearValidate:u,scrollToField:f}),(e,t)=>(S(),$("form",{class:_(D(s))},[T(e.$slots,"default")],2))}});var ur=j(ir,[["__file","/home/runner/work/element-plus/element-plus/packages/components/form/src/form.vue"]]);function dr(){return dr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var l in a)Object.prototype.hasOwnProperty.call(a,l)&&(e[l]=a[l])}return e},dr.apply(this,arguments)}function cr(e){return(cr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function pr(e,t){return(pr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function vr(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(Rn){return!1}}function fr(e,t,a){return(fr=vr()?Reflect.construct.bind():function(e,t,a){var l=[null];l.push.apply(l,t);var n=new(Function.bind.apply(e,l));return a&&pr(n,a.prototype),n}).apply(null,arguments)}function mr(e){var t="function"==typeof Map?new Map:void 0;return mr=function(e){if(null===e||(a=e,-1===Function.toString.call(a).indexOf("[native code]")))return e;var a;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,l)}function l(){return fr(e,arguments,cr(this).constructor)}return l.prototype=Object.create(e.prototype,{constructor:{value:l,enumerable:!1,writable:!0,configurable:!0}}),pr(l,e)},mr(e)}var hr=/%[sdj%]/g,gr=function(){};function br(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var a=e.field;t[a]=t[a]||[],t[a].push(e)})),t}function yr(e){for(var t=arguments.length,a=new Array(t>1?t-1:0),l=1;l<t;l++)a[l-1]=arguments[l];var n=0,o=a.length;if("function"==typeof e)return e.apply(null,a);if("string"==typeof e){var r=e.replace(hr,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(a[n++]);case"%d":return Number(a[n++]);case"%j":try{return JSON.stringify(a[n++])}catch(t){return"[Circular]"}break;default:return e}}));return r}return e}function kr(e,t){return null==e||(!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e))}function wr(e,t,a){var l=0,n=e.length;!function o(r){if(r&&r.length)a(r);else{var s=l;l+=1,s<n?t(e[s],o):a([])}}([])}"undefined"!=typeof process&&process.env;var Sr=function(e){var t,a;function l(t,a){var l;return(l=e.call(this,"Async Validation Error")||this).errors=t,l.fields=a,l}return a=e,(t=l).prototype=Object.create(a.prototype),t.prototype.constructor=t,pr(t,a),l}(mr(Error));function xr(e,t,a,l,n){if(t.first){var o=new Promise((function(t,o){var r=function(e){var t=[];return Object.keys(e).forEach((function(a){t.push.apply(t,e[a]||[])})),t}(e);wr(r,a,(function(e){return l(e),e.length?o(new Sr(e,br(e))):t(n)}))}));return o.catch((function(e){return e})),o}var r=!0===t.firstFields?Object.keys(e):t.firstFields||[],s=Object.keys(e),i=s.length,u=0,d=[],c=new Promise((function(t,o){var c=function(e){if(d.push.apply(d,e),++u===i)return l(d),d.length?o(new Sr(d,br(d))):t(n)};s.length||(l(d),t(n)),s.forEach((function(t){var l=e[t];-1!==r.indexOf(t)?wr(l,a,c):function(e,t,a){var l=[],n=0,o=e.length;function r(e){l.push.apply(l,e||[]),++n===o&&a(l)}e.forEach((function(e){t(e,r)}))}(l,a,c)}))}));return c.catch((function(e){return e})),c}function Cr(e,t){return function(a){var l,n;return l=e.fullFields?function(e,t){for(var a=e,l=0;l<t.length;l++){if(null==a)return a;a=a[t[l]]}return a}(t,e.fullFields):t[a.field||e.fullField],(n=a)&&void 0!==n.message?(a.field=a.field||e.fullField,a.fieldValue=l,a):{message:"function"==typeof a?a():a,fieldValue:l,field:a.field||e.fullField}}}function Vr(e,t){if(t)for(var a in t)if(t.hasOwnProperty(a)){var l=t[a];"object"==typeof l&&"object"==typeof e[a]?e[a]=dr({},e[a],l):e[a]=l}return e}var Mr,Dr=function(e,t,a,l,n,o){!e.required||a.hasOwnProperty(e.field)&&!kr(t,o||e.type)||l.push(yr(n.messages.required,e.fullField))},$r=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,Or=/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,_r={integer:function(e){return _r.number(e)&&parseInt(e,10)===e},float:function(e){return _r.number(e)&&!_r.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(Rn){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!_r.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&e.length<=320&&!!e.match($r)},url:function(e){return"string"==typeof e&&e.length<=2048&&!!e.match(function(){if(Mr)return Mr;var e="[a-fA-F\\d:]",t=function(t){return t&&t.includeBoundaries?"(?:(?<=\\s|^)(?="+e+")|(?<="+e+")(?=\\s|$))":""},a="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",l="[a-fA-F\\d]{1,4}",n=("\n(?:\n(?:"+l+":){7}(?:"+l+"|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:"+l+":){6}(?:"+a+"|:"+l+"|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:"+l+":){5}(?::"+a+"|(?::"+l+"){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:"+l+":){4}(?:(?::"+l+"){0,1}:"+a+"|(?::"+l+"){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:"+l+":){3}(?:(?::"+l+"){0,2}:"+a+"|(?::"+l+"){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:"+l+":){2}(?:(?::"+l+"){0,3}:"+a+"|(?::"+l+"){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:"+l+":){1}(?:(?::"+l+"){0,4}:"+a+"|(?::"+l+"){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::"+l+"){0,5}:"+a+"|(?::"+l+"){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),o=new RegExp("(?:^"+a+"$)|(?:^"+n+"$)"),r=new RegExp("^"+a+"$"),s=new RegExp("^"+n+"$"),i=function(e){return e&&e.exact?o:new RegExp("(?:"+t(e)+a+t(e)+")|(?:"+t(e)+n+t(e)+")","g")};i.v4=function(e){return e&&e.exact?r:new RegExp(""+t(e)+a+t(e),"g")},i.v6=function(e){return e&&e.exact?s:new RegExp(""+t(e)+n+t(e),"g")};var u=i.v4().source,d=i.v6().source;return Mr=new RegExp("(?:^(?:(?:(?:[a-z]+:)?//)|www\\.)(?:\\S+(?::\\S*)?@)?(?:localhost|"+u+"|"+d+'|(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#][^\\s"]*)?$)',"i")}())},hex:function(e){return"string"==typeof e&&!!e.match(Or)}},Ir={required:Dr,whitespace:function(e,t,a,l,n){(/^\s+$/.test(t)||""===t)&&l.push(yr(n.messages.whitespace,e.fullField))},type:function(e,t,a,l,n){if(e.required&&void 0===t)Dr(e,t,a,l,n);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?_r[o](t)||l.push(yr(n.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&l.push(yr(n.messages.types[o],e.fullField,e.type))}},range:function(e,t,a,l,n){var o="number"==typeof e.len,r="number"==typeof e.min,s="number"==typeof e.max,i=t,u=null,d="number"==typeof t,c="string"==typeof t,p=Array.isArray(t);if(d?u="number":c?u="string":p&&(u="array"),!u)return!1;p&&(i=t.length),c&&(i=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?i!==e.len&&l.push(yr(n.messages[u].len,e.fullField,e.len)):r&&!s&&i<e.min?l.push(yr(n.messages[u].min,e.fullField,e.min)):s&&!r&&i>e.max?l.push(yr(n.messages[u].max,e.fullField,e.max)):r&&s&&(i<e.min||i>e.max)&&l.push(yr(n.messages[u].range,e.fullField,e.min,e.max))},enum:function(e,t,a,l,n){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&l.push(yr(n.messages.enum,e.fullField,e.enum.join(", ")))},pattern:function(e,t,a,l,n){if(e.pattern)if(e.pattern instanceof RegExp)e.pattern.lastIndex=0,e.pattern.test(t)||l.push(yr(n.messages.pattern.mismatch,e.fullField,t,e.pattern));else if("string"==typeof e.pattern){new RegExp(e.pattern).test(t)||l.push(yr(n.messages.pattern.mismatch,e.fullField,t,e.pattern))}}},Pr=function(e,t,a,l,n){var o=e.type,r=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t,o)&&!e.required)return a();Ir.required(e,t,l,r,n,o),kr(t,o)||Ir.type(e,t,l,r,n)}a(r)},Tr={string:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t,"string")&&!e.required)return a();Ir.required(e,t,l,o,n,"string"),kr(t,"string")||(Ir.type(e,t,l,o,n),Ir.range(e,t,l,o,n),Ir.pattern(e,t,l,o,n),!0===e.whitespace&&Ir.whitespace(e,t,l,o,n))}a(o)},method:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&Ir.type(e,t,l,o,n)}a(o)},number:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(""===t&&(t=void 0),kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&(Ir.type(e,t,l,o,n),Ir.range(e,t,l,o,n))}a(o)},boolean:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&Ir.type(e,t,l,o,n)}a(o)},regexp:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),kr(t)||Ir.type(e,t,l,o,n)}a(o)},integer:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&(Ir.type(e,t,l,o,n),Ir.range(e,t,l,o,n))}a(o)},float:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&(Ir.type(e,t,l,o,n),Ir.range(e,t,l,o,n))}a(o)},array:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(null==t&&!e.required)return a();Ir.required(e,t,l,o,n,"array"),null!=t&&(Ir.type(e,t,l,o,n),Ir.range(e,t,l,o,n))}a(o)},object:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&Ir.type(e,t,l,o,n)}a(o)},enum:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n),void 0!==t&&Ir.enum(e,t,l,o,n)}a(o)},pattern:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t,"string")&&!e.required)return a();Ir.required(e,t,l,o,n),kr(t,"string")||Ir.pattern(e,t,l,o,n)}a(o)},date:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t,"date")&&!e.required)return a();var r;if(Ir.required(e,t,l,o,n),!kr(t,"date"))r=t instanceof Date?t:new Date(t),Ir.type(e,r,l,o,n),r&&Ir.range(e,r.getTime(),l,o,n)}a(o)},url:Pr,hex:Pr,email:Pr,required:function(e,t,a,l,n){var o=[],r=Array.isArray(t)?"array":typeof t;Ir.required(e,t,l,o,n,r),a(o)},any:function(e,t,a,l,n){var o=[];if(e.required||!e.required&&l.hasOwnProperty(e.field)){if(kr(t)&&!e.required)return a();Ir.required(e,t,l,o,n)}a(o)}};function Er(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var Ar=Er(),Nr=function(){function e(e){this.rules=null,this._messages=Ar,this.define(e)}var t=e.prototype;return t.define=function(e){var t=this;if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");this.rules={},Object.keys(e).forEach((function(a){var l=e[a];t.rules[a]=Array.isArray(l)?l:[l]}))},t.messages=function(e){return e&&(this._messages=Vr(Er(),e)),this._messages},t.validate=function(t,a,l){var n=this;void 0===a&&(a={}),void 0===l&&(l=function(){});var o=t,r=a,s=l;if("function"==typeof r&&(s=r,r={}),!this.rules||0===Object.keys(this.rules).length)return s&&s(null,o),Promise.resolve(o);if(r.messages){var i=this.messages();i===Ar&&(i=Er()),Vr(i,r.messages),r.messages=i}else r.messages=this.messages();var u={};(r.keys||Object.keys(this.rules)).forEach((function(e){var a=n.rules[e],l=o[e];a.forEach((function(a){var r=a;"function"==typeof r.transform&&(o===t&&(o=dr({},o)),l=o[e]=r.transform(l)),(r="function"==typeof r?{validator:r}:dr({},r)).validator=n.getValidationMethod(r),r.validator&&(r.field=e,r.fullField=r.fullField||e,r.type=n.getType(r),u[e]=u[e]||[],u[e].push({rule:r,value:l,source:o,field:e}))}))}));var d={};return xr(u,r,(function(t,a){var l,n=t.rule,s=!("object"!==n.type&&"array"!==n.type||"object"!=typeof n.fields&&"object"!=typeof n.defaultField);function i(e,t){return dr({},t,{fullField:n.fullField+"."+e,fullFields:n.fullFields?[].concat(n.fullFields,[e]):[e]})}function u(l){void 0===l&&(l=[]);var u=Array.isArray(l)?l:[l];!r.suppressWarning&&u.length&&e.warning("async-validator:",u),u.length&&void 0!==n.message&&(u=[].concat(n.message));var c=u.map(Cr(n,o));if(r.first&&c.length)return d[n.field]=1,a(c);if(s){if(n.required&&!t.value)return void 0!==n.message?c=[].concat(n.message).map(Cr(n,o)):r.error&&(c=[r.error(n,yr(r.messages.required,n.field))]),a(c);var p={};n.defaultField&&Object.keys(t.value).map((function(e){p[e]=n.defaultField})),p=dr({},p,t.rule.fields);var v={};Object.keys(p).forEach((function(e){var t=p[e],a=Array.isArray(t)?t:[t];v[e]=a.map(i.bind(null,e))}));var f=new e(v);f.messages(r.messages),t.rule.options&&(t.rule.options.messages=r.messages,t.rule.options.error=r.error),f.validate(t.value,t.rule.options||r,(function(e){var t=[];c&&c.length&&t.push.apply(t,c),e&&e.length&&t.push.apply(t,e),a(t.length?t:null)}))}else a(c)}if(s=s&&(n.required||!n.required&&t.value),n.field=t.field,n.asyncValidator)l=n.asyncValidator(n,t.value,u,t.source,r);else if(n.validator){try{l=n.validator(n,t.value,u,t.source,r)}catch(c){null==console.error||console.error(c),r.suppressValidatorError||setTimeout((function(){throw c}),0),u(c.message)}!0===l?u():!1===l?u("function"==typeof n.message?n.message(n.fullField||n.field):n.message||(n.fullField||n.field)+" fails"):l instanceof Array?u(l):l instanceof Error&&u(l.message)}l&&l.then&&l.then((function(){return u()}),(function(e){return u(e)}))}),(function(e){!function(e){var t=[],a={};function l(e){var a;Array.isArray(e)?t=(a=t).concat.apply(a,e):t.push(e)}for(var n=0;n<e.length;n++)l(e[n]);t.length?(a=br(t),s(t,a)):s(null,o)}(e)}),o)},t.getType=function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!Tr.hasOwnProperty(e.type))throw new Error(yr("Unknown rule type %s",e.type));return e.type||"string"},t.getValidationMethod=function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),a=t.indexOf("message");return-1!==a&&t.splice(a,1),1===t.length&&"required"===t[0]?Tr.required:Tr[this.getType(e)]||void 0},e}();Nr.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");Tr[e]=t},Nr.warning=gr,Nr.messages=Ar,Nr.validators=Tr;const Fr=d({label:String,labelWidth:{type:[String,Number],default:""},prop:{type:c([String,Array])},required:{type:Boolean,default:void 0},rules:{type:c([Object,Array])},error:String,validateStatus:{type:String,values:["","error","validating","success"]},for:String,inlineMessage:{type:[String,Boolean],default:""},showMessage:{type:Boolean,default:!0},size:{type:String,values:Ke}});var Br=m({name:"ElLabelWrap",props:{isAutoWidth:Boolean,updateAll:Boolean},setup(e,{slots:t}){const a=ee(te,void 0);ee(ae)||K("ElLabelWrap","usage: <el-form-item><label-wrap /></el-form-item>");const l=g("form"),n=b(),o=b(0),r=(l="update")=>{H((()=>{t.default&&e.isAutoWidth&&("update"===l?o.value=(()=>{var e;if(null==(e=n.value)?void 0:e.firstElementChild){const e=window.getComputedStyle(n.value.firstElementChild).width;return Math.ceil(Number.parseFloat(e))}return 0})():"remove"===l&&(null==a||a.deregisterLabelWidth(o.value)))}))},s=()=>r("update");return w((()=>{s()})),Ue((()=>{r("remove")})),Ge((()=>s())),le(o,((t,l)=>{e.updateAll&&(null==a||a.registerLabelWidth(t,l))})),Te(y((()=>{var e,t;return null!=(t=null==(e=n.value)?void 0:e.firstElementChild)?t:null})),s),()=>{var r,s;if(!t)return null;const{isAutoWidth:i}=e;if(i){const e=null==a?void 0:a.autoLabelWidth,s={};if(e&&"auto"!==e){const t=Math.max(0,Number.parseInt(e,10)-o.value),l="left"===a.labelPosition?"marginRight":"marginLeft";t&&(s[l]=`${t}px`)}return M("div",{ref:n,class:[l.be("item","label-wrap")],style:s},[null==(r=t.default)?void 0:r.call(t)])}return M(N,{ref:n},[null==(s=t.default)?void 0:s.call(t)])}}});const zr=["role","aria-labelledby"];var Rr=j(m({name:"ElFormItem",props:Fr,setup(e,{expose:t}){const a=e,l=qe(),n=ee(te,void 0),o=ee(ae,void 0),r=se(void 0,{formItem:!1}),s=g("form-item"),i=Jt().value,u=b([]),d=b(""),c=Xe(d,100),p=b(""),f=b();let m,h=!1;const k=y((()=>{if("top"===(null==n?void 0:n.labelPosition))return{};const e=Ze(a.labelWidth||(null==n?void 0:n.labelWidth)||"");return e?{width:e}:{}})),O=y((()=>{if("top"===(null==n?void 0:n.labelPosition)||(null==n?void 0:n.inline))return{};if(!a.label&&!a.labelWidth&&q)return{};const e=Ze(a.labelWidth||(null==n?void 0:n.labelWidth)||"");return a.label||l.label?{}:{marginLeft:e}})),I=y((()=>[s.b(),s.m(r.value),s.is("error","error"===d.value),s.is("validating","validating"===d.value),s.is("success","success"===d.value),s.is("required",K.value||a.required),s.is("no-asterisk",null==n?void 0:n.hideRequiredAsterisk),{[s.m("feedback")]:null==n?void 0:n.statusIcon}])),P=y((()=>be(a.inlineMessage)?a.inlineMessage:(null==n?void 0:n.inlineMessage)||!1)),N=y((()=>[s.e("error"),{[s.em("error","inline")]:P.value}])),F=y((()=>a.prop?v(a.prop)?a.prop:a.prop.join("."):"")),z=y((()=>!(!a.label&&!l.label))),R=y((()=>a.for||1===u.value.length?u.value[0]:void 0)),L=y((()=>!R.value&&z.value)),q=!!o,Y=y((()=>{const e=null==n?void 0:n.model;if(e&&a.prop)return Qe(e,a.prop).value})),j=y((()=>{const e=a.rules?fa(a.rules):[],t=null==n?void 0:n.rules;if(t&&a.prop){const l=Qe(t,a.prop).value;l&&e.push(...fa(l))}return void 0!==a.required&&e.push({required:!!a.required}),e})),W=y((()=>j.value.length>0)),K=y((()=>j.value.some((e=>!0===e.required)))),U=y((()=>{var e;return"error"===c.value&&a.showMessage&&(null==(e=null==n?void 0:n.showMessage)||e)})),G=y((()=>`${a.label||""}${(null==n?void 0:n.labelSuffix)||""}`)),X=e=>{d.value=e},Z=async e=>{const t=F.value;return new Nr({[t]:e}).validate({[t]:Y.value},{firstFields:!0}).then((()=>(X("success"),null==n||n.emit("validate",a.prop,!0,""),!0))).catch((e=>((e=>{var t,l;const{errors:o,fields:r}=e;o&&r||console.error(e),X("error"),p.value=o?null!=(l=null==(t=null==o?void 0:o[0])?void 0:t.message)?l:`${a.prop} is required`:"",null==n||n.emit("validate",a.prop,!1,p.value)})(e),Promise.reject(e))))},Q=async(e,t)=>{if(h)return h=!1,!1;const a=Oe(t);if(!W.value)return null==t||t(!1),!1;const l=(e=>j.value.filter((t=>!t.trigger||!e||(Array.isArray(t.trigger)?t.trigger.includes(e):t.trigger===e))).map((({trigger:e,...t})=>t)))(e);return 0===l.length?(null==t||t(!0),!0):(X("validating"),Z(l).then((()=>(null==t||t(!0),!0))).catch((e=>{const{fields:l}=e;return null==t||t(!1,l),!a&&Promise.reject(l)})))},J=()=>{X(""),p.value=""},ne=async()=>{const e=null==n?void 0:n.model;if(!e||!a.prop)return;const t=Qe(e,a.prop);Et(t.value,m)||(h=!0),t.value=ma(m),await H(),J()};le((()=>a.error),(e=>{p.value=e||"",X(e?"error":"")}),{immediate:!0}),le((()=>a.validateStatus),(e=>X(e||"")));const oe=we({...Se(a),$el:f,size:r,validateState:d,labelId:i,inputIds:u,isGroup:L,addInputId:e=>{u.value.includes(e)||u.value.push(e)},removeInputId:e=>{u.value=u.value.filter((t=>t!==e))},resetField:ne,clearValidate:J,validate:Q});return ie(ae,oe),w((()=>{a.prop&&(null==n||n.addField(oe),m=ma(Y.value))})),Ue((()=>{null==n||n.removeField(oe)})),t({size:r,validateMessage:p,validateState:d,validate:Q,clearValidate:J,resetField:ne}),(e,t)=>{var a;return S(),$("div",{ref_key:"formItemRef",ref:f,class:_(D(I)),role:D(L)?"group":void 0,"aria-labelledby":D(L)?D(i):void 0},[M(D(Br),{"is-auto-width":"auto"===D(k).width,"update-all":"auto"===(null==(a=D(n))?void 0:a.labelWidth)},{default:C((()=>[D(z)?(S(),x(ue(D(R)?"label":"div"),{key:0,id:D(i),for:D(R),class:_(D(s).e("label")),style:B(D(k))},{default:C((()=>[T(e.$slots,"label",{label:D(G)},(()=>[E(A(D(G)),1)]))])),_:3},8,["id","for","class","style"])):de("v-if",!0)])),_:3},8,["is-auto-width","update-all"]),V("div",{class:_(D(s).e("content")),style:B(D(O))},[T(e.$slots,"default"),M(he,{name:`${D(s).namespace.value}-zoom-in-top`},{default:C((()=>[D(U)?T(e.$slots,"error",{key:0,error:p.value},(()=>[V("div",{class:_(D(N))},A(p.value),3)])):de("v-if",!0)])),_:3},8,["name"])],6)],10,zr)}}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue"]]);const Lr=U(ur,{FormItem:Rr}),qr=xe(Rr),Yr=d({modelValue:{type:Number,default:0},id:{type:String,default:void 0},lowThreshold:{type:Number,default:2},highThreshold:{type:Number,default:4},max:{type:Number,default:5},colors:{type:c([Array,Object]),default:()=>ua(["","",""])},voidColor:{type:String,default:""},disabledVoidColor:{type:String,default:""},icons:{type:c([Array,Object]),default:()=>[Je,Je,Je]},voidIcon:{type:et,default:()=>tt},disabledVoidIcon:{type:et,default:()=>Je},disabled:{type:Boolean},allowHalf:{type:Boolean},showText:{type:Boolean},showScore:{type:Boolean},textColor:{type:String,default:""},texts:{type:c(Array),default:()=>ua(["Extremely bad","Disappointed","Fair","Satisfied","Surprise"])},scoreTemplate:{type:String,default:"{value}"},size:{type:String,validator:ia},label:{type:String,default:void 0}}),jr=["id","aria-label","aria-labelledby","aria-valuenow","aria-valuetext","aria-valuemax"],Hr=["onMousemove","onClick"],Wr=m({name:"ElRate",props:Yr,emits:{[Qt]:e=>ge(e),[Xt]:e=>ge(e)},setup(e,{expose:t,emit:a}){const l=e;function n(e,t){const a=e=>f(e),l=Object.keys(t).map((e=>+e)).filter((l=>{const n=t[l];return!!a(n)&&n.excluded?e<l:e<=l})).sort(((e,t)=>e-t)),n=t[l[0]];return a(n)&&n.value||n}const o=ee(te,void 0),r=ee(ae,void 0),s=se(),i=g("rate"),{inputId:u,isLabeledByFormItem:d}=ta(l,{formItemContext:r}),c=b(l.modelValue),p=b(-1),v=b(!0),m=y((()=>[i.b(),i.m(s.value)])),h=y((()=>l.disabled||(null==o?void 0:o.disabled))),k=y((()=>i.cssVarBlock({"void-color":l.voidColor,"disabled-void-color":l.disabledVoidColor,"fill-color":T.value}))),w=y((()=>{let e="";return l.showScore?e=l.scoreTemplate.replace(/\{\s*value\s*\}/,h.value?`${l.modelValue}`:`${c.value}`):l.showText&&(e=l.texts[Math.ceil(c.value)-1]),e})),V=y((()=>100*l.modelValue-100*Math.floor(l.modelValue))),I=y((()=>W(l.colors)?{[l.lowThreshold]:l.colors[0],[l.highThreshold]:{value:l.colors[1],excluded:!0},[l.max]:l.colors[2]}:l.colors)),T=y((()=>{const e=n(c.value,I.value);return f(e)?"":e})),E=y((()=>{let e="";return h.value?e=`${V.value}%`:l.allowHalf&&(e="50%"),{color:T.value,width:e}})),F=y((()=>W(l.icons)?{[l.lowThreshold]:l.icons[0],[l.highThreshold]:{value:l.icons[1],excluded:!0},[l.max]:l.icons[2]}:l.icons)),z=y((()=>n(l.modelValue,F.value))),R=y((()=>h.value?l.disabledVoidIcon:l.voidIcon)),L=y((()=>n(c.value,F.value))),q=y((()=>{const e=Array.from({length:l.max}),t=c.value;return e.fill(L.value,0,t),e.fill(R.value,t,l.max),e}));function Y(e){const t=h.value&&V.value>0&&e-1<l.modelValue&&e>l.modelValue,a=l.allowHalf&&v.value&&e-.5<=c.value&&e>c.value;return t||a}function j(e){if(h.value)return;let t=c.value;const n=e.code;return n===ce.up||n===ce.right?(l.allowHalf?t+=.5:t+=1,e.stopPropagation(),e.preventDefault()):n!==ce.left&&n!==ce.down||(l.allowHalf?t-=.5:t-=1,e.stopPropagation(),e.preventDefault()),t=t<0?0:t,t=t>l.max?l.max:t,a(Xt,t),a("change",t),t}function H(e,t){if(!h.value){if(l.allowHalf){let a=t.target;Le(a,i.e("item"))&&(a=a.querySelector(`.${i.e("icon")}`)),(0===a.clientWidth||Le(a,i.e("decimal")))&&(a=a.parentNode),v.value=2*t.offsetX<=a.clientWidth,c.value=v.value?e-.5:e}else c.value=e;p.value=e}}function K(){h.value||(l.allowHalf&&(v.value=l.modelValue!==Math.floor(l.modelValue)),c.value=l.modelValue,p.value=-1)}return le((()=>l.modelValue),(e=>{c.value=e,v.value=l.modelValue!==Math.floor(l.modelValue)})),l.modelValue||a(Xt,0),t({setCurrentValue:H,resetCurrentValue:K}),(e,t)=>(S(),$("div",{id:D(u),class:_([D(m),D(i).is("disabled",D(h))]),role:"slider","aria-label":D(d)?void 0:e.label||"rating","aria-labelledby":D(d)?D(r).labelId:void 0,"aria-valuenow":c.value,"aria-valuetext":D(w)||void 0,"aria-valuemin":"0","aria-valuemax":e.max,tabindex:"0",style:B(D(k)),onKeydown:j},[(S(!0),$(N,null,P(e.max,((e,t)=>(S(),$("span",{key:t,class:_(D(i).e("item")),onMousemove:t=>H(e,t),onMouseleave:K,onClick:t=>{return n=e,void(h.value||(l.allowHalf&&v.value?(a(Xt,c.value),l.modelValue!==c.value&&a("change",c.value)):(a(Xt,n),l.modelValue!==n&&a("change",n))));var n}},[M(D(O),{class:_([D(i).e("icon"),{hover:p.value===e},D(i).is("active",e<=c.value)])},{default:C((()=>[Y(e)?de("v-if",!0):(S(),x(ue(D(q)[e-1]),{key:0})),Y(e)?(S(),x(D(O),{key:1,style:B(D(E)),class:_([D(i).e("icon"),D(i).e("decimal")])},{default:C((()=>[(S(),x(ue(D(z))))])),_:1},8,["style","class"])):de("v-if",!0)])),_:2},1032,["class"])],42,Hr)))),128)),e.showText||e.showScore?(S(),$("span",{key:0,class:_(D(i).e("text"))},A(D(w)),3)):de("v-if",!0)],46,jr))}});const Kr=U(j(Wr,[["__file","/home/runner/work/element-plus/element-plus/packages/components/rate/src/rate.vue"]]));var Ur=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function Gr(e,t){if(e.length!==t.length)return!1;for(var a=0;a<e.length;a++)if(l=e[a],n=t[a],!(l===n||Ur(l)&&Ur(n)))return!1;var l,n;return!0}const Xr=()=>{const e=$e().proxy.$props;return y((()=>{const t=(e,t,a)=>({});return e.perfMode?at(t):function(e,t){void 0===t&&(t=Gr);var a=null;function l(){for(var l=[],n=0;n<arguments.length;n++)l[n]=arguments[n];if(a&&a.lastThis===this&&t(l,a.lastArgs))return a.lastResult;var o=e.apply(this,l);return a={lastResult:o,lastArgs:l,lastThis:this},o}return l.clear=function(){a=null},l}(t)}))},Zr={horizontal:"left",vertical:"top"},Qr={horizontal:"deltaX",vertical:"deltaY"},Jr=lt({type:c([Number,Function]),required:!0}),es=lt({type:Number}),ts=lt({type:Number,default:2}),as=lt({type:String,values:["ltr","rtl"],default:"ltr"}),ls=lt({type:Number,default:0}),ns=lt({type:Number,required:!0}),os=lt({type:String,values:["horizontal","vertical"],default:"vertical"}),rs=d({className:{type:String,default:""},containerElement:{type:c([String,Object]),default:"div"},data:{type:c(Array),default:()=>ua([])},direction:as,height:{type:[String,Number],required:!0},innerElement:{type:[String,Object],default:"div"},style:{type:c([Object,String,Array])},useIsScrolling:{type:Boolean,default:!1},width:{type:[Number,String],required:!1},perfMode:{type:Boolean,default:!0},scrollbarAlwaysOn:{type:Boolean,default:!1}}),ss=d({cache:ts,estimatedItemSize:es,layout:os,initScrollOffset:ls,total:ns,itemSize:Jr,...rs}),is={type:Number,default:6},us={type:Number,default:0},ds={type:Number,default:2};d({columnCache:ts,columnWidth:Jr,estimatedColumnWidth:es,estimatedRowHeight:es,initScrollLeft:ls,initScrollTop:ls,itemKey:{type:c(Function),default:({columnIndex:e,rowIndex:t})=>`${t}:${e}`},rowCache:ts,rowHeight:Jr,totalColumn:ns,totalRow:ns,hScrollbarSize:is,vScrollbarSize:is,scrollbarStartGap:us,scrollbarEndGap:ds,...rs});const cs=d({alwaysOn:Boolean,class:String,layout:os,total:ns,ratio:{type:Number,required:!0},clientSize:{type:Number,required:!0},scrollFrom:{type:Number,required:!0},scrollbarSize:is,startGap:us,endGap:ds,visible:Boolean}),ps=(e,t)=>e<t?"forward":"backward",vs=e=>"ltr"===e||"rtl"===e||"horizontal"===e;let fs=null;function ms(e=!1){if(null===fs||e){const e=document.createElement("div"),t=e.style;t.width="50px",t.height="50px",t.overflow="scroll",t.direction="rtl";const a=document.createElement("div"),l=a.style;return l.width="100px",l.height="100px",e.appendChild(a),document.body.appendChild(e),e.scrollLeft>0?fs="positive-descending":(e.scrollLeft=1,fs=0===e.scrollLeft?"negative":"positive-ascending"),document.body.removeChild(e),fs}return fs}const hs=m({name:"ElVirtualScrollBar",props:cs,emits:["scroll","start-move","stop-move"],setup(e,{emit:t}){const a=y((()=>e.startGap+e.endGap)),l=g("virtual-scrollbar"),n=g("scrollbar"),o=b(),r=b();let s=null,i=null;const u=we({isDragging:!1,traveled:0}),d=y((()=>nt[e.layout])),c=y((()=>e.clientSize-D(a))),p=y((()=>({position:"absolute",width:`${"horizontal"===e.layout?c.value:e.scrollbarSize}px`,height:`${"horizontal"===e.layout?e.scrollbarSize:c.value}px`,[Zr[e.layout]]:"2px",right:"2px",bottom:"2px",borderRadius:"4px"}))),v=y((()=>{const t=e.ratio,a=e.clientSize;if(t>=100)return Number.POSITIVE_INFINITY;if(t>=50)return t*a/100;const l=a/3;return Math.floor(Math.min(Math.max(t*a,20),l))})),f=y((()=>{if(!Number.isFinite(v.value))return{display:"none"};const t=`${v.value}px`,a=function({move:e,size:t,bar:a},l){const n={},o=`translate${a.axis}(${e}px)`;return n[a.size]=t,n.transform=o,n.msTransform=o,n.webkitTransform=o,"horizontal"===l?n.height="100%":n.width="100%",n}({bar:d.value,size:t,move:u.traveled},e.layout);return a})),m=y((()=>Math.floor(e.clientSize-v.value-D(a)))),h=()=>{window.removeEventListener("mousemove",S),window.removeEventListener("mouseup",w),document.onselectstart=i,i=null;const e=D(r);e&&(e.removeEventListener("touchmove",S),e.removeEventListener("touchend",w))},k=e=>{e.stopImmediatePropagation(),e.ctrlKey||[1,2].includes(e.button)||(u.isDragging=!0,u[d.value.axis]=e.currentTarget[d.value.offset]-(e[d.value.client]-e.currentTarget.getBoundingClientRect()[d.value.direction]),t("start-move"),(()=>{window.addEventListener("mousemove",S),window.addEventListener("mouseup",w);const e=D(r);e&&(i=document.onselectstart,document.onselectstart=()=>!1,e.addEventListener("touchmove",S),e.addEventListener("touchend",w))})())},w=()=>{u.isDragging=!1,u[d.value.axis]=0,t("stop-move"),h()},S=a=>{const{isDragging:l}=u;if(!l)return;if(!r.value||!o.value)return;const n=u[d.value.axis];if(!n)return;Ma(s);const i=-1*(o.value.getBoundingClientRect()[d.value.direction]-a[d.value.client])-(r.value[d.value.offset]-n);s=Va((()=>{u.traveled=Math.max(e.startGap,Math.min(i,m.value)),t("scroll",i,m.value)}))},x=e=>{const a=Math.abs(e.target.getBoundingClientRect()[d.value.direction]-e[d.value.client])-r.value[d.value.offset]/2;u.traveled=Math.max(0,Math.min(a,m.value)),t("scroll",a,m.value)};return le((()=>e.scrollFrom),(e=>{u.isDragging||(u.traveled=Math.ceil(e*m.value))})),Ue((()=>{h()})),()=>Ce("div",{role:"presentation",ref:o,class:[l.b(),e.class,(e.alwaysOn||u.isDragging)&&"always-on"],style:p.value,onMousedown:q(x,["stop","prevent"]),onTouchstartPrevent:k},Ce("div",{ref:r,class:n.e("thumb"),style:f.value,onMousedown:k},[]))}}),gs=({name:e,getOffset:t,getItemSize:a,getItemOffset:l,getEstimatedTotalSize:n,getStartIndexForOffset:o,getStopIndexForStartIndex:r,initCache:s,clearCache:i,validateProps:d})=>m({name:null!=e?e:"ElVirtualList",props:ss,emits:["itemRendered","scroll"],setup(e,{emit:c,expose:p}){d(e);const v=$e(),f=g("vl"),m=b(s(e,v)),h=Xr(),k=b(),S=b(),x=b(),C=b({isScrolling:!1,scrollDir:"forward",scrollOffset:ge(e.initScrollOffset)?e.initScrollOffset:0,updateRequested:!1,isScrollbarDragging:!1,scrollbarAlwaysOn:e.scrollbarAlwaysOn}),V=y((()=>{const{total:t,cache:a}=e,{isScrolling:l,scrollDir:n,scrollOffset:s}=D(C);if(0===t)return[0,0,0,0];const i=o(e,s,D(m)),u=r(e,i,s,D(m)),d=l&&"backward"!==n?1:Math.max(1,a),c=l&&"forward"!==n?1:Math.max(1,a);return[Math.max(0,i-d),Math.max(0,Math.min(t-1,u+c)),i,u]})),M=y((()=>n(e,D(m)))),$=y((()=>vs(e.layout))),O=y((()=>[{position:"relative",["overflow-"+($.value?"x":"y")]:"scroll",WebkitOverflowScrolling:"touch",willChange:"transform"},{direction:e.direction,height:ge(e.height)?`${e.height}px`:e.height,width:ge(e.width)?`${e.width}px`:e.width},e.style])),_=y((()=>{const e=D(M),t=D($);return{height:t?"100%":`${e}px`,pointerEvents:D(C).isScrolling?"none":void 0,width:t?`${e}px`:"100%"}})),I=y((()=>$.value?e.width:e.height)),{onWheel:P}=(({atEndEdge:e,atStartEdge:t,layout:a},l)=>{let n,o=0;const r=a=>a<0&&t.value||a>0&&e.value;return{hasReachedEdge:r,onWheel:e=>{Ma(n);const t=e[Qr[a.value]];r(o)&&r(o+t)||(o+=t,da()||e.preventDefault(),n=Va((()=>{l(o),o=0})))}}})({atStartEdge:y((()=>C.value.scrollOffset<=0)),atEndEdge:y((()=>C.value.scrollOffset>=M.value)),layout:y((()=>e.layout))},(e=>{var t,a;null==(a=(t=x.value).onMouseUp)||a.call(t),E(Math.min(C.value.scrollOffset+e,M.value-I.value))})),T=()=>{const{total:t}=e;if(t>0){const[e,t,a,l]=D(V);c("itemRendered",e,t,a,l)}const{scrollDir:a,scrollOffset:l,updateRequested:n}=D(C);c("scroll",a,l,n)},E=e=>{(e=Math.max(e,0))!==D(C).scrollOffset&&(C.value={...D(C),scrollOffset:e,scrollDir:ps(D(C).scrollOffset,e),updateRequested:!0},H(N))},A=(a,l="auto")=>{const{scrollOffset:n}=D(C);a=Math.max(0,Math.min(a,e.total-1)),E(t(e,a,l,n,D(m)))},N=()=>{C.value.isScrolling=!1,H((()=>{h.value(-1,null,null)}))},F=()=>{const e=k.value;e&&(e.scrollTop=0)};w((()=>{if(!u)return;const{initScrollOffset:t}=e,a=D(k);ge(t)&&a&&(D($)?a.scrollLeft=t:a.scrollTop=t),T()})),Ge((()=>{const{direction:t,layout:a}=e,{scrollOffset:l,updateRequested:n}=D(C),o=D(k);if(n&&o)if("horizontal"===a)if("rtl"===t)switch(ms()){case"negative":o.scrollLeft=-l;break;case"positive-ascending":o.scrollLeft=l;break;default:{const{clientWidth:e,scrollWidth:t}=o;o.scrollLeft=t-e-l;break}}else o.scrollLeft=l;else o.scrollTop=l}));const B={ns:f,clientSize:I,estimatedTotalSize:M,windowStyle:O,windowRef:k,innerRef:S,innerStyle:_,itemsToRender:V,scrollbarRef:x,states:C,getItemStyle:t=>{const{direction:n,itemSize:o,layout:r}=e,s=h.value(i&&o,i&&r,i&&n);let u;if(Be(s,String(t)))u=s[t];else{const o=l(e,t,D(m)),r=a(e,t,D(m)),i=D($),d="rtl"===n,c=i?o:0;s[t]=u={position:"absolute",left:d?void 0:`${c}px`,right:d?`${c}px`:void 0,top:i?0:`${o}px`,height:i?"100%":`${r}px`,width:i?`${r}px`:"100%"}}return u},onScroll:t=>{D($)?(t=>{const{clientWidth:a,scrollLeft:l,scrollWidth:n}=t.currentTarget,o=D(C);if(o.scrollOffset===l)return;const{direction:r}=e;let s=l;if("rtl"===r)switch(ms()){case"negative":s=-l;break;case"positive-descending":s=n-a-l}s=Math.max(0,Math.min(s,n-a)),C.value={...o,isScrolling:!0,scrollDir:ps(o.scrollOffset,s),scrollOffset:s,updateRequested:!1},H(N)})(t):(e=>{const{clientHeight:t,scrollHeight:a,scrollTop:l}=e.currentTarget,n=D(C);if(n.scrollOffset===l)return;const o=Math.max(0,Math.min(l,a-t));C.value={...n,isScrolling:!0,scrollDir:ps(n.scrollOffset,o),scrollOffset:o,updateRequested:!1},H(N)})(t),T()},onScrollbarScroll:(e,t)=>{const a=(M.value-I.value)/t*e;E(Math.min(M.value-I.value,a))},onWheel:P,scrollTo:E,scrollToItem:A,resetScrollTop:F};return p({windowRef:k,innerRef:S,getItemStyleCache:h,scrollTo:E,scrollToItem:A,resetScrollTop:F,states:C}),B},render(e){var t;const{$slots:a,className:l,clientSize:n,containerElement:o,data:r,getItemStyle:s,innerElement:i,itemsToRender:u,innerStyle:d,layout:c,total:p,onScroll:f,onScrollbarScroll:m,onWheel:h,states:g,useIsScrolling:b,windowStyle:y,ns:k}=e,[w,S]=u,x=ue(o),C=ue(i),V=[];if(p>0)for(let v=w;v<=S;v++)V.push(null==(t=a.default)?void 0:t.call(a,{data:r,key:v,index:v,isScrolling:b?g.isScrolling:void 0,style:s(v)}));const M=[Ce(C,{style:d,ref:"innerRef"},v(C)?V:{default:()=>V})],D=Ce(hs,{ref:"scrollbarRef",clientSize:n,layout:c,onScroll:m,ratio:100*n/this.estimatedTotalSize,scrollFrom:g.scrollOffset/(this.estimatedTotalSize-n),total:p}),$=Ce(x,{class:[k.e("window"),l],style:y,onScroll:f,onWheel:h,ref:"windowRef",key:0},v(x)?[M]:{default:()=>[M]});return Ce("div",{key:0,class:[k.e("wrapper"),g.scrollbarAlwaysOn?"always-on":""]},[$,D])}}),bs=gs({name:"ElFixedSizeList",getItemOffset:({itemSize:e},t)=>t*e,getItemSize:({itemSize:e})=>e,getEstimatedTotalSize:({total:e,itemSize:t})=>t*e,getOffset:({height:e,total:t,itemSize:a,layout:l,width:n},o,r,s)=>{const i=vs(l)?n:e,u=Math.max(0,t*a-i),d=Math.min(u,o*a),c=Math.max(0,(o+1)*a-i);switch("smart"===r&&(r=s>=c-i&&s<=d+i?"auto":"center"),r){case"start":return d;case"end":return c;case"center":{const e=Math.round(c+(d-c)/2);return e<Math.ceil(i/2)?0:e>u+Math.floor(i/2)?u:e}default:return s>=c&&s<=d?s:s<c?c:d}},getStartIndexForOffset:({total:e,itemSize:t},a)=>Math.max(0,Math.min(e-1,Math.floor(a/t))),getStopIndexForStartIndex:({height:e,total:t,itemSize:a,layout:l,width:n},o,r)=>{const s=o*a,i=vs(l)?n:e,u=Math.ceil((i+r-s)/a);return Math.max(0,Math.min(t-1,o+u-1))},initCache(){},clearCache:!0,validateProps(){}}),ys=(e,t,a)=>{const{itemSize:l}=e,{items:n,lastVisitedIndex:o}=a;if(t>o){let e=0;if(o>=0){const t=n[o];e=t.offset+t.size}for(let a=o+1;a<=t;a++){const t=l(a);n[a]={offset:e,size:t},e+=t}a.lastVisitedIndex=t}return n[t]},ks=(e,t,a,l,n)=>{for(;a<=l;){const o=a+Math.floor((l-a)/2),r=ys(e,o,t).offset;if(r===n)return o;r<n?a=o+1:r>n&&(l=o-1)}return Math.max(0,a-1)},ws=(e,t,a,l)=>{const{total:n}=e;let o=1;for(;a<n&&ys(e,a,t).offset<l;)a+=o,o*=2;return ks(e,t,Math.floor(a/2),Math.min(a,n-1),l)},Ss=({total:e},{items:t,estimatedItemSize:a,lastVisitedIndex:l})=>{let n=0;if(l>=e&&(l=e-1),l>=0){const e=t[l];n=e.offset+e.size}return n+(e-l-1)*a},xs=gs({name:"ElDynamicSizeList",getItemOffset:(e,t,a)=>ys(e,t,a).offset,getItemSize:(e,t,{items:a})=>a[t].size,getEstimatedTotalSize:Ss,getOffset:(e,t,a,l,n)=>{const{height:o,layout:r,width:s}=e,i=vs(r)?s:o,u=ys(e,t,n),d=Ss(e,n),c=Math.max(0,Math.min(d-i,u.offset)),p=Math.max(0,u.offset-i+u.size);switch("smart"===a&&(a=l>=p-i&&l<=c+i?"auto":"center"),a){case"start":return c;case"end":return p;case"center":return Math.round(p+(c-p)/2);default:return l>=p&&l<=c?l:l<p?p:c}},getStartIndexForOffset:(e,t,a)=>((e,t,a)=>{const{items:l,lastVisitedIndex:n}=t;return(n>0?l[n].offset:0)>=a?ks(e,t,0,n,a):ws(e,t,Math.max(0,n),a)})(e,a,t),getStopIndexForStartIndex:(e,t,a,l)=>{const{height:n,total:o,layout:r,width:s}=e,i=vs(r)?s:n,u=ys(e,t,l),d=a+i;let c=u.offset+u.size,p=t;for(;p<o-1&&c<d;)p++,c+=ys(e,p,l).size;return p},initCache({estimatedItemSize:e=50},t){const a={items:{},estimatedItemSize:e,lastVisitedIndex:-1,clearCacheAfterIndex:(e,l=!0)=>{var n,o;a.lastVisitedIndex=Math.min(a.lastVisitedIndex,e-1),null==(n=t.exposed)||n.getItemStyleCache(-1),l&&(null==(o=t.proxy)||o.$forceUpdate())}};return a},clearCache:!1,validateProps:({itemSize:e})=>{}});var Cs=j(m({props:{item:{type:Object,required:!0},style:Object,height:Number},setup:()=>({ns:g("select")})}),[["render",function(e,t,a,l,n,o){return e.item.isTitle?(S(),$("div",{key:0,class:_(e.ns.be("group","title")),style:B([e.style,{lineHeight:`${e.height}px`}])},A(e.item.label),7)):(S(),$("div",{key:1,class:_(e.ns.be("group","split")),style:B(e.style)},[V("span",{class:_(e.ns.be("group","split-dash")),style:B({top:e.height/2+"px"})},null,6)],6))}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/group-item.vue"]]);const Vs={allowCreate:Boolean,autocomplete:{type:String,default:"none"},automaticDropdown:Boolean,clearable:Boolean,clearIcon:{type:[String,Object],default:Q},effect:{type:String,default:"light"},collapseTags:Boolean,collapseTagsTooltip:{type:Boolean,default:!1},defaultFirstOption:Boolean,disabled:Boolean,estimatedOptionHeight:{type:Number,default:void 0},filterable:Boolean,filterMethod:Function,height:{type:Number,default:170},itemHeight:{type:Number,default:34},id:String,loading:Boolean,loadingText:String,label:String,modelValue:[Array,String,Number,Boolean,Object],multiple:Boolean,multipleLimit:{type:Number,default:0},name:String,noDataText:String,noMatchText:String,remoteMethod:Function,reserveKeyword:{type:Boolean,default:!0},options:{type:Array,required:!0},placeholder:{type:String},teleported:kt.teleported,persistent:{type:Boolean,default:!0},popperClass:{type:String,default:""},popperOptions:{type:Object,default:()=>({})},remote:Boolean,size:{type:String,validator:ia},valueKey:{type:String,default:"value"},scrollbarAlwaysOn:{type:Boolean,default:!1}},Ms={data:Array,disabled:Boolean,hovering:Boolean,item:Object,index:Number,style:Object,selected:Boolean,created:Boolean},Ds=m({props:Ms,emits:["select","hover"],setup(e,{emit:t}){const a=g("select"),{hoverItem:l,selectOptionClick:n}=function(e,{emit:t}){return{hoverItem:()=>{e.disabled||t("hover",e.index)},selectOptionClick:()=>{e.disabled||t("select",e.item,e.index)}}}(e,{emit:t});return{ns:a,hoverItem:l,selectOptionClick:n}}}),$s=["aria-selected"];var Os=j(Ds,[["render",function(e,t,a,l,n,o){return S(),$("li",{"aria-selected":e.selected,style:B(e.style),class:_([e.ns.be("dropdown","option-item"),e.ns.is("selected",e.selected),e.ns.is("disabled",e.disabled),e.ns.is("created",e.created),{hover:e.hovering}]),onMouseenter:t[0]||(t[0]=(...t)=>e.hoverItem&&e.hoverItem(...t)),onClick:t[1]||(t[1]=q(((...t)=>e.selectOptionClick&&e.selectOptionClick(...t)),["stop"]))},[T(e.$slots,"default",{item:e.item,index:e.index,disabled:e.disabled},(()=>[V("span",null,A(e.item.label),1)]))],46,$s)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/option-item.vue"]]);var _s=m({name:"ElSelectDropdown",props:{data:{type:Array,required:!0},hoveringIndex:Number,width:Number},setup(e,{slots:t,expose:a}){const l=ee("ElSelectV2Injection"),n=g("select"),o=b([]),r=b(),s=y((()=>me(l.props.estimatedOptionHeight))),i=y((()=>s.value?{itemSize:l.props.itemHeight}:{estimatedSize:l.props.estimatedOptionHeight,itemSize:e=>o.value[e]})),u=(e,t)=>{const{valueKey:a}=l.props;return l.props.multiple?((e=[],t)=>{const{props:{valueKey:a}}=l;return f(t)?e&&e.some((e=>ot(e,a)===ot(t,a))):e.includes(t)})(e,ot(t,a)):((e,t)=>{if(f(t)){const{valueKey:a}=l.props;return ot(e,a)===ot(t,a)}return e===t})(e,ot(t,a))},d=(e,t)=>{const{disabled:a,multiple:n,multipleLimit:o}=l.props;return a||!t&&!!n&&o>0&&e.length>=o},c=t=>e.hoveringIndex===t;a({listRef:r,isSized:s,isItemDisabled:d,isItemHovering:c,isItemSelected:u,scrollToItem:e=>{const t=r.value;t&&t.scrollToItem(e)},resetScrollTop:()=>{const e=r.value;e&&e.resetScrollTop()}});const p=e=>{const{index:a,data:n,style:o}=e,r=D(s),{itemSize:p,estimatedSize:v}=D(i),{modelValue:f}=l.props,{onSelect:m,onHover:h}=l,g=n[a];if("Group"===g.type)return M(Cs,{item:g,style:o,height:r?p:v},null);const b=u(f,g),y=d(f,b),k=c(a);return M(Os,R(e,{selected:b,disabled:g.disabled||y,created:!!g.created,hovering:k,item:g,onSelect:m,onHover:h}),{default:e=>{var a;return(null==(a=t.default)?void 0:a.call(t,e))||M("span",null,[g.label])}})},{onKeyboardNavigate:v,onKeyboardSelect:m}=l,h=e=>{const{code:t}=e,{tab:a,esc:n,down:o,up:r,enter:s}=ce;switch(t!==a&&(e.preventDefault(),e.stopPropagation()),t){case a:case n:l.expanded=!1;break;case o:v("forward");break;case r:v("backward");break;case s:m()}};return()=>{var a;const{data:o,width:u}=e,{height:d,multiple:c,scrollbarAlwaysOn:v}=l.props;if(0===o.length)return M("div",{class:n.b("dropdown"),style:{width:`${u}px`}},[null==(a=t.empty)?void 0:a.call(t)]);const f=D(s)?bs:xs;return M("div",{class:[n.b("dropdown"),n.is("multiple",c)]},[M(f,R({ref:r},D(i),{className:n.be("dropdown","list"),scrollbarAlwaysOn:v,data:o,height:d,width:u,total:o.length,onKeydown:h}),{default:e=>M(p,e,null)})])}}});function Is(e,t){const a=b(0),l=b(null),n=y((()=>e.allowCreate&&e.filterable));return{createNewOption:function(o){if(n.value)if(o&&o.length>0&&!function(a){const l=e=>e.value===a;return e.options&&e.options.some(l)||t.createdOptions.some(l)}(o)){const e={value:o,label:o,created:!0,disabled:!1};t.createdOptions.length>=a.value?t.createdOptions[a.value]=e:t.createdOptions.push(e)}else if(e.multiple)t.createdOptions.length=a.value;else{const e=l.value;t.createdOptions.length=0,e&&e.created&&t.createdOptions.push(e)}},removeNewOption:function(l){if(!n.value||!l||!l.created||l.created&&e.reserveKeyword&&t.inputValue===l.label)return;const o=t.createdOptions.findIndex((e=>e.value===l.value));~o&&(t.createdOptions.splice(o,1),a.value--)},selectNewOption:function(t){n.value&&(e.multiple&&t.created?a.value++:l.value=t)},clearAllNewOption:function(){n.value&&(t.createdOptions.length=0,a.value=0)}}}const Ps={larget:51,default:42,small:33},Ts=(e,t)=>{const{t:a}=la(),l=g("select-v2"),n=g("input"),{form:o,formItem:r}=ea(),s=we({inputValue:"",displayInputValue:"",calculatedWidth:0,cachedPlaceholder:"",cachedOptions:[],createdOptions:[],createdLabel:"",createdSelected:!1,currentPlaceholder:"",hoveringIndex:-1,comboBoxHovering:!1,isOnComposition:!1,isSilentBlur:!1,isComposing:!1,inputLength:20,selectWidth:200,initialInputHeight:0,previousQuery:null,previousValue:"",query:"",selectedLabel:"",softFocus:!1,tagInMultiLine:!1}),i=b(-1),u=b(-1),d=b(null),c=b(null),p=b(null),v=b(null),m=b(null),h=b(null),k=b(null),S=b(!1),x=y((()=>e.disabled||(null==o?void 0:o.disabled))),C=y((()=>{const t=34*T.value.length;return t>e.height?e.height:t})),V=y((()=>void 0!==e.modelValue&&null!==e.modelValue&&""!==e.modelValue)),M=y((()=>{const t=e.multiple?Array.isArray(e.modelValue)&&e.modelValue.length>0:V.value;return e.clearable&&!x.value&&s.comboBoxHovering&&t})),D=y((()=>e.remote&&e.filterable?"":ve)),$=y((()=>D.value&&l.is("reverse",S.value))),O=y((()=>(null==r?void 0:r.validateState)||"")),_=y((()=>rt[O.value])),I=y((()=>e.remote?300:0)),P=y((()=>{const t=T.value;return e.loading?e.loadingText||a("el.select.loading"):(!e.remote||""!==s.inputValue||0!==t.length)&&(e.filterable&&s.inputValue&&t.length>0?e.noMatchText||a("el.select.noMatch"):0===t.length?e.noDataText||a("el.select.noData"):null)})),T=y((()=>{const t=e=>{const t=s.inputValue;return!t||e.label.includes(t)};return e.loading?[]:(e=>{const t=[];return e.forEach((e=>{W(e.options)?(t.push({label:e.label,isTitle:!0,type:"Group"}),e.options.forEach((e=>{t.push(e)})),t.push({type:"Group"})):t.push(e)})),t})(e.options.concat(s.createdOptions).map((a=>{if(W(a.options)){const e=a.options.filter(t);if(e.length>0)return{...a,options:e}}else if(e.remote||t(a))return a;return null})).filter((e=>null!==e)))})),E=y((()=>T.value.every((e=>e.disabled)))),A=se(),N=y((()=>"small"===A.value?"small":"default")),F=y((()=>{const e=h.value,t=N.value||"default",a=e?Number.parseInt(getComputedStyle(e).paddingLeft):0,l=e?Number.parseInt(getComputedStyle(e).paddingRight):0;return s.selectWidth-l-a-Ps[t]})),B=()=>{var e,t,a;u.value=(null==(a=null==(t=null==(e=m.value)?void 0:e.getBoundingClientRect)?void 0:t.call(e))?void 0:a.width)||200},z=y((()=>({width:`${0===s.calculatedWidth?11:Math.ceil(s.calculatedWidth)+11}px`}))),R=y((()=>W(e.modelValue)?0===e.modelValue.length&&!s.displayInputValue:!e.filterable||0===s.displayInputValue.length)),L=y((()=>{const t=e.placeholder||a("el.select.placeholder");return e.multiple?t:s.selectedLabel||t})),q=y((()=>{var e,t;return null==(t=null==(e=v.value)?void 0:e.popperRef)?void 0:t.contentRef})),Y=y((()=>{if(e.multiple){const t=e.modelValue.length;if(e.modelValue.length>0)return T.value.findIndex((a=>a.value===e.modelValue[t-1]))}else if(e.modelValue)return T.value.findIndex((t=>t.value===e.modelValue));return-1})),j=y({get:()=>S.value&&!1!==P.value,set(e){S.value=e}}),{createNewOption:K,removeNewOption:U,selectNewOption:G,clearAllNewOption:X}=Is(e,s),{handleCompositionStart:Z,handleCompositionUpdate:Q,handleCompositionEnd:J}=function(e){const t=b(!1);return{handleCompositionStart:()=>{t.value=!0},handleCompositionUpdate:e=>{const a=e.target.value,l=a[a.length-1]||"";t.value=!$t(l)},handleCompositionEnd:a=>{t.value&&(t.value=!1,Oe(e)&&e(a))}}}((e=>ke(e))),ee=()=>{var e,t,a;null==(t=(e=c.value).focus)||t.call(e),null==(a=v.value)||a.updatePopper()},te=()=>{if(!e.automaticDropdown)return x.value?void 0:(s.isComposing&&(s.softFocus=!0),H((()=>{var e,t;S.value=!S.value,null==(t=null==(e=c.value)?void 0:e.focus)||t.call(e)})))},ae=()=>(e.filterable&&s.inputValue!==s.selectedLabel&&(s.query=s.selectedLabel),re(s.inputValue),H((()=>{K(s.inputValue)}))),oe=aa(ae,I.value),re=t=>{s.previousQuery!==t&&(s.previousQuery=t,e.filterable&&Oe(e.filterMethod)?e.filterMethod(t):e.filterable&&e.remote&&Oe(e.remoteMethod)&&e.remoteMethod(t))},ie=a=>{t(Xt,a),(a=>{Et(e.modelValue,a)||t(Qt,a)})(a),s.previousValue=a.toString()},ue=t=>f(t)?ot(t,e.valueKey):t,de=()=>{if(!e.collapseTags||e.filterable)return H((()=>{var e,t;if(!c.value)return;const a=h.value;m.value.height=a.offsetHeight,S.value&&!1!==P.value&&(null==(t=null==(e=v.value)?void 0:e.updatePopper)||t.call(e))}))},ce=()=>{var t,a;if(pe(),B(),null==(a=null==(t=v.value)?void 0:t.updatePopper)||a.call(t),e.multiple)return de()},pe=()=>{const e=h.value;e&&(s.selectWidth=e.getBoundingClientRect().width)},fe=(t,a,l=!0)=>{var n,o;if(e.multiple){let l=e.modelValue.slice();const r=((t=[],a)=>{if(!f(a))return t.indexOf(a);const l=e.valueKey;let n=-1;return t.some(((e,t)=>ot(e,l)===ot(a,l)&&(n=t,!0))),n})(l,ue(t));r>-1?(l=[...l.slice(0,r),...l.slice(r+1)],s.cachedOptions.splice(r,1),U(t)):(e.multipleLimit<=0||l.length<e.multipleLimit)&&(l=[...l,ue(t)],s.cachedOptions.push(t),G(t),be(a)),ie(l),t.created&&(s.query="",re(""),s.inputLength=20),e.filterable&&!e.reserveKeyword&&(null==(o=(n=c.value).focus)||o.call(n),he("")),e.filterable&&(s.calculatedWidth=k.value.getBoundingClientRect().width),de(),ye()}else i.value=a,s.selectedLabel=t.label,ie(ue(t)),S.value=!1,s.isComposing=!1,s.isSilentBlur=l,G(t),t.created||X(),be(a)},me=()=>(s.softFocus=!1,H((()=>{var e,a;null==(a=null==(e=c.value)?void 0:e.blur)||a.call(e),k.value&&(s.calculatedWidth=k.value.getBoundingClientRect().width),s.isSilentBlur?s.isSilentBlur=!1:s.isComposing&&t("blur"),s.isComposing=!1}))),he=e=>{s.displayInputValue=e,s.inputValue=e},ge=(e,t)=>{const a=T.value;if(!["forward","backward"].includes(e)||x.value||a.length<=0||E.value)return;if(!S.value)return te();void 0===t&&(t=s.hoveringIndex);let l=-1;"forward"===e?(l=t+1,l>=a.length&&(l=0)):"backward"===e&&(l=t-1,l<0&&(l=a.length-1));const n=a[l];if(n.disabled||"Group"===n.type)return ge(e,l);be(l),Se(l)},be=e=>{s.hoveringIndex=e},ye=()=>{var e;const t=c.value;t&&(null==(e=t.focus)||e.call(t))},ke=t=>{const a=t.target.value;if(he(a),s.displayInputValue.length>0&&!S.value&&(S.value=!0),s.calculatedWidth=k.value.getBoundingClientRect().width,e.multiple&&de(),!e.remote)return ae();oe()},Se=e=>{p.value.scrollToItem(e)},xe=()=>{if(s.hoveringIndex=-1,e.multiple)if(e.modelValue.length>0){let t=!1;s.cachedOptions.length=0,s.previousValue=e.modelValue.toString(),e.modelValue.forEach((e=>{const a=T.value.findIndex((t=>ue(t)===e));~a&&(s.cachedOptions.push(T.value[a]),t||be(a),t=!0)}))}else s.cachedOptions=[],s.previousValue="";else if(V.value){s.previousValue=e.modelValue;const t=T.value,a=t.findIndex((t=>ue(t)===ue(e.modelValue)));~a?(s.selectedLabel=t[a].label,be(a)):s.selectedLabel=`${e.modelValue}`}else s.selectedLabel="",s.previousValue="";X(),B()};return le(S,(e=>{var a,l;t("visible-change",e),e?null==(l=(a=v.value).update)||l.call(a):(s.displayInputValue="",s.previousQuery=null,K(""))})),le((()=>e.modelValue),((e,t)=>{var a;e&&e.toString()===s.previousValue||xe(),Et(e,t)||null==(a=null==r?void 0:r.validate)||a.call(r,"change").catch((e=>ne()))}),{deep:!0}),le((()=>e.options),(()=>{const e=c.value;(!e||e&&document.activeElement!==e)&&xe()}),{deep:!0}),le(T,(()=>H(p.value.resetScrollTop))),w((()=>{xe()})),Te(m,ce),{collapseTagSize:N,currentPlaceholder:L,expanded:S,emptyText:P,popupHeight:C,debounce:I,filteredOptions:T,iconComponent:D,iconReverse:$,inputWrapperStyle:z,popperSize:u,dropdownMenuVisible:j,hasModelValue:V,shouldShowPlaceholder:R,selectDisabled:x,selectSize:A,showClearBtn:M,states:s,tagMaxWidth:F,nsSelectV2:l,nsInput:n,calculatorRef:k,controlRef:d,inputRef:c,menuRef:p,popper:v,selectRef:m,selectionRef:h,popperRef:q,validateState:O,validateIcon:_,debouncedOnInputChange:oe,deleteTag:(a,l)=>{const{valueKey:n}=e,o=e.modelValue.indexOf(ot(l,n));if(o>-1&&!x.value){const a=[...e.modelValue.slice(0,o),...e.modelValue.slice(o+1)];return s.cachedOptions.splice(o,1),ie(a),t("remove-tag",ot(l,n)),s.softFocus=!0,U(l),H(ee)}a.stopPropagation()},getLabel:e=>f(e)?e.label:e,getValueKey:ue,handleBlur:me,handleClear:()=>{let a;return a=W(e.modelValue)?[]:"",s.softFocus=!0,e.multiple?s.cachedOptions=[]:s.selectedLabel="",S.value=!1,ie(a),t("clear"),X(),H(ee)},handleClickOutside:()=>(S.value=!1,me()),handleDel:t=>{if(0===s.displayInputValue.length){t.preventDefault();const a=e.modelValue.slice();a.pop(),U(s.cachedOptions.pop()),ie(a)}},handleEsc:()=>{s.displayInputValue.length>0?he(""):S.value=!1},handleFocus:e=>{const a=s.isComposing;s.isComposing=!0,s.softFocus?s.softFocus=!1:a||t("focus",e)},handleMenuEnter:()=>(s.inputValue=s.displayInputValue,H((()=>{~Y.value&&(be(Y.value),Se(s.hoveringIndex))}))),handleResize:ce,toggleMenu:te,scrollTo:Se,onInput:ke,onKeyboardNavigate:ge,onKeyboardSelect:()=>{if(!S.value)return te();~s.hoveringIndex&&T.value[s.hoveringIndex]&&fe(T.value[s.hoveringIndex],s.hoveringIndex,!1)},onSelect:fe,onHover:be,onUpdateInputValue:he,handleCompositionStart:Z,handleCompositionEnd:J,handleCompositionUpdate:Q}},Es=m({name:"ElSelectV2",components:{ElSelectMenu:_s,ElTag:Ot,ElTooltip:St,ElIcon:O},directives:{ClickOutside:Nt,ModelText:Ae},props:Vs,emits:[Xt,Qt,"remove-tag","clear","visible-change","focus","blur"],setup(e,{emit:t}){const a=Ts(e,t);return ie("ElSelectV2Injection",{props:we({...Se(e),height:a.popupHeight}),onSelect:a.onSelect,onHover:a.onHover,onKeyboardNavigate:a.onKeyboardNavigate,onKeyboardSelect:a.onKeyboardSelect}),a}}),As={key:0},Ns=["id","autocomplete","aria-expanded","aria-labelledby","disabled","readonly","name","unselectable"],Fs=["textContent"],Bs=["id","aria-labelledby","aria-expanded","autocomplete","disabled","name","readonly","unselectable"],zs=["textContent"];var Rs=j(Es,[["render",function(e,t,a,l,n,o){const r=De("el-tag"),s=De("el-tooltip"),i=De("el-icon"),u=De("el-select-menu"),d=Ee("model-text"),c=Ee("click-outside");return pe((S(),$("div",{ref:"selectRef",class:_([e.nsSelectV2.b(),e.nsSelectV2.m(e.selectSize)]),onClick:t[24]||(t[24]=q(((...t)=>e.toggleMenu&&e.toggleMenu(...t)),["stop"])),onMouseenter:t[25]||(t[25]=t=>e.states.comboBoxHovering=!0),onMouseleave:t[26]||(t[26]=t=>e.states.comboBoxHovering=!1)},[M(s,{ref:"popper",visible:e.dropdownMenuVisible,"onUpdate:visible":t[22]||(t[22]=t=>e.dropdownMenuVisible=t),teleported:e.teleported,"popper-class":[e.nsSelectV2.e("popper"),e.popperClass],"gpu-acceleration":!1,"stop-popper-mouse-event":!1,"popper-options":e.popperOptions,"fallback-placements":["bottom-start","top-start","right","left"],effect:e.effect,placement:"bottom-start",pure:"",transition:`${e.nsSelectV2.namespace.value}-zoom-in-top`,trigger:"click",persistent:e.persistent,onBeforeShow:e.handleMenuEnter,onHide:t[23]||(t[23]=t=>e.states.inputValue=e.states.displayInputValue)},{default:C((()=>{var a;return[V("div",{ref:"selectionRef",class:_([e.nsSelectV2.e("wrapper"),e.nsSelectV2.is("focused",e.states.isComposing),e.nsSelectV2.is("hovering",e.states.comboBoxHovering),e.nsSelectV2.is("filterable",e.filterable),e.nsSelectV2.is("disabled",e.selectDisabled)])},[e.$slots.prefix?(S(),$("div",As,[T(e.$slots,"prefix")])):de("v-if",!0),e.multiple?(S(),$("div",{key:1,class:_(e.nsSelectV2.e("selection"))},[e.collapseTags&&e.modelValue.length>0?(S(),$("div",{key:0,class:_(e.nsSelectV2.e("selected-item"))},[M(r,{closable:!e.selectDisabled&&!(null==(a=e.states.cachedOptions[0])?void 0:a.disable),size:e.collapseTagSize,type:"info","disable-transitions":"",onClose:t[0]||(t[0]=t=>e.deleteTag(t,e.states.cachedOptions[0]))},{default:C((()=>{var t;return[V("span",{class:_(e.nsSelectV2.e("tags-text")),style:B({maxWidth:`${e.tagMaxWidth}px`})},A(null==(t=e.states.cachedOptions[0])?void 0:t.label),7)]})),_:1},8,["closable","size"]),e.modelValue.length>1?(S(),x(r,{key:0,closable:!1,size:e.collapseTagSize,type:"info","disable-transitions":""},{default:C((()=>[e.collapseTagsTooltip?(S(),x(s,{key:0,disabled:e.dropdownMenuVisible,"fallback-placements":["bottom","top","right","left"],effect:e.effect,placement:"bottom",teleported:!1},{default:C((()=>[V("span",{class:_(e.nsSelectV2.e("tags-text")),style:B({maxWidth:`${e.tagMaxWidth}px`})},"+ "+A(e.modelValue.length-1),7)])),content:C((()=>[V("div",{class:_(e.nsSelectV2.e("selection"))},[(S(!0),$(N,null,P(e.states.cachedOptions,((t,a)=>(S(),$("div",{key:a,class:_(e.nsSelectV2.e("selected-item"))},[(S(),x(r,{key:e.getValueKey(t),closable:!e.selectDisabled&&!t.disabled,size:e.collapseTagSize,class:"in-tooltip",type:"info","disable-transitions":"",onClose:a=>e.deleteTag(a,t)},{default:C((()=>[V("span",{class:_(e.nsSelectV2.e("tags-text")),style:B({maxWidth:`${e.tagMaxWidth}px`})},A(e.getLabel(t)),7)])),_:2},1032,["closable","size","onClose"]))],2)))),128))],2)])),_:1},8,["disabled","effect"])):(S(),$("span",{key:1,class:_(e.nsSelectV2.e("tags-text")),style:B({maxWidth:`${e.tagMaxWidth}px`})},"+ "+A(e.modelValue.length-1),7))])),_:1},8,["size"])):de("v-if",!0)],2)):(S(!0),$(N,{key:1},P(e.states.cachedOptions,((t,a)=>(S(),$("div",{key:a,class:_(e.nsSelectV2.e("selected-item"))},[(S(),x(r,{key:e.getValueKey(t),closable:!e.selectDisabled&&!t.disabled,size:e.collapseTagSize,type:"info","disable-transitions":"",onClose:a=>e.deleteTag(a,t)},{default:C((()=>[V("span",{class:_(e.nsSelectV2.e("tags-text")),style:B({maxWidth:`${e.tagMaxWidth}px`})},A(e.getLabel(t)),7)])),_:2},1032,["closable","size","onClose"]))],2)))),128)),V("div",{class:_([e.nsSelectV2.e("selected-item"),e.nsSelectV2.e("input-wrapper")]),style:B(e.inputWrapperStyle)},[pe(V("input",{id:e.id,ref:"inputRef",autocomplete:e.autocomplete,"aria-autocomplete":"list","aria-haspopup":"listbox",autocapitalize:"off","aria-expanded":e.expanded,"aria-labelledby":e.label,class:_([e.nsSelectV2.is(e.selectSize),e.nsSelectV2.e("combobox-input")]),disabled:e.disabled,role:"combobox",readonly:!e.filterable,spellcheck:"false",type:"text",name:e.name,unselectable:e.expanded?"on":void 0,"onUpdate:modelValue":t[1]||(t[1]=(...t)=>e.onUpdateInputValue&&e.onUpdateInputValue(...t)),onFocus:t[2]||(t[2]=(...t)=>e.handleFocus&&e.handleFocus(...t)),onInput:t[3]||(t[3]=(...t)=>e.onInput&&e.onInput(...t)),onCompositionstart:t[4]||(t[4]=(...t)=>e.handleCompositionStart&&e.handleCompositionStart(...t)),onCompositionupdate:t[5]||(t[5]=(...t)=>e.handleCompositionUpdate&&e.handleCompositionUpdate(...t)),onCompositionend:t[6]||(t[6]=(...t)=>e.handleCompositionEnd&&e.handleCompositionEnd(...t)),onKeydown:[t[7]||(t[7]=L(q((t=>e.onKeyboardNavigate("backward")),["stop","prevent"]),["up"])),t[8]||(t[8]=L(q((t=>e.onKeyboardNavigate("forward")),["stop","prevent"]),["down"])),t[9]||(t[9]=L(q(((...t)=>e.onKeyboardSelect&&e.onKeyboardSelect(...t)),["stop","prevent"]),["enter"])),t[10]||(t[10]=L(q(((...t)=>e.handleEsc&&e.handleEsc(...t)),["stop","prevent"]),["esc"])),t[11]||(t[11]=L(q(((...t)=>e.handleDel&&e.handleDel(...t)),["stop"]),["delete"]))]},null,42,Ns),[[d,e.states.displayInputValue]]),e.filterable?(S(),$("span",{key:0,ref:"calculatorRef","aria-hidden":"true",class:_(e.nsSelectV2.e("input-calculator")),textContent:A(e.states.displayInputValue)},null,10,Fs)):de("v-if",!0)],6)],2)):(S(),$(N,{key:2},[V("div",{class:_([e.nsSelectV2.e("selected-item"),e.nsSelectV2.e("input-wrapper")])},[pe(V("input",{id:e.id,ref:"inputRef","aria-autocomplete":"list","aria-haspopup":"listbox","aria-labelledby":e.label,"aria-expanded":e.expanded,autocapitalize:"off",autocomplete:e.autocomplete,class:_(e.nsSelectV2.e("combobox-input")),disabled:e.disabled,name:e.name,role:"combobox",readonly:!e.filterable,spellcheck:"false",type:"text",unselectable:e.expanded?"on":void 0,onCompositionstart:t[12]||(t[12]=(...t)=>e.handleCompositionStart&&e.handleCompositionStart(...t)),onCompositionupdate:t[13]||(t[13]=(...t)=>e.handleCompositionUpdate&&e.handleCompositionUpdate(...t)),onCompositionend:t[14]||(t[14]=(...t)=>e.handleCompositionEnd&&e.handleCompositionEnd(...t)),onFocus:t[15]||(t[15]=(...t)=>e.handleFocus&&e.handleFocus(...t)),onInput:t[16]||(t[16]=(...t)=>e.onInput&&e.onInput(...t)),onKeydown:[t[17]||(t[17]=L(q((t=>e.onKeyboardNavigate("backward")),["stop","prevent"]),["up"])),t[18]||(t[18]=L(q((t=>e.onKeyboardNavigate("forward")),["stop","prevent"]),["down"])),t[19]||(t[19]=L(q(((...t)=>e.onKeyboardSelect&&e.onKeyboardSelect(...t)),["stop","prevent"]),["enter"])),t[20]||(t[20]=L(q(((...t)=>e.handleEsc&&e.handleEsc(...t)),["stop","prevent"]),["esc"]))],"onUpdate:modelValue":t[21]||(t[21]=(...t)=>e.onUpdateInputValue&&e.onUpdateInputValue(...t))},null,42,Bs),[[d,e.states.displayInputValue]])],2),e.filterable?(S(),$("span",{key:0,ref:"calculatorRef","aria-hidden":"true",class:_([e.nsSelectV2.e("selected-item"),e.nsSelectV2.e("input-calculator")]),textContent:A(e.states.displayInputValue)},null,10,zs)):de("v-if",!0)],64)),e.shouldShowPlaceholder?(S(),$("span",{key:3,class:_([e.nsSelectV2.e("placeholder"),e.nsSelectV2.is("transparent",e.states.isComposing||(e.placeholder&&e.multiple?0===e.modelValue.length:!e.hasModelValue))])},A(e.currentPlaceholder),3)):de("v-if",!0),V("span",{class:_(e.nsSelectV2.e("suffix"))},[e.iconComponent?pe((S(),x(i,{key:0,class:_([e.nsSelectV2.e("caret"),e.nsInput.e("icon"),e.iconReverse])},{default:C((()=>[(S(),x(ue(e.iconComponent)))])),_:1},8,["class"])),[[Ne,!e.showClearBtn]]):de("v-if",!0),e.showClearBtn&&e.clearIcon?(S(),x(i,{key:1,class:_([e.nsSelectV2.e("caret"),e.nsInput.e("icon")]),onClick:q(e.handleClear,["prevent","stop"])},{default:C((()=>[(S(),x(ue(e.clearIcon)))])),_:1},8,["class","onClick"])):de("v-if",!0),e.validateState&&e.validateIcon?(S(),x(i,{key:2,class:_([e.nsInput.e("icon"),e.nsInput.e("validateIcon")])},{default:C((()=>[(S(),x(ue(e.validateIcon)))])),_:1},8,["class"])):de("v-if",!0)],2)],2)]})),content:C((()=>[M(u,{ref:"menuRef",data:e.filteredOptions,width:e.popperSize,"hovering-index":e.states.hoveringIndex,"scrollbar-always-on":e.scrollbarAlwaysOn},{default:C((t=>[T(e.$slots,"default",st(it(t)))])),empty:C((()=>[T(e.$slots,"empty",{},(()=>[V("p",{class:_(e.nsSelectV2.e("empty"))},A(e.emptyText?e.emptyText:""),3)]))])),_:3},8,["data","width","hovering-index","scrollbar-always-on"])])),_:3},8,["visible","teleported","popper-class","popper-options","effect","transition","persistent","onBeforeShow"])],34)),[[c,e.handleClickOutside,e.popperRef]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select-v2/src/select.vue"]]);Rs.install=e=>{e.component(Rs.name,Rs)};const Ls=Rs,qs=d({modelValue:{type:c([Number,Array]),default:0},id:{type:String,default:void 0},min:{type:Number,default:0},max:{type:Number,default:100},step:{type:Number,default:1},showInput:Boolean,showInputControls:{type:Boolean,default:!0},size:J,inputSize:J,showStops:Boolean,showTooltip:{type:Boolean,default:!0},formatTooltip:{type:c(Function),default:void 0},disabled:Boolean,range:Boolean,vertical:Boolean,height:String,debounce:{type:Number,default:300},label:{type:String,default:void 0},rangeStartLabel:{type:String,default:void 0},rangeEndLabel:{type:String,default:void 0},formatValueText:{type:c(Function),default:void 0},tooltipClass:{type:String,default:void 0},marks:{type:c(Object)}}),Ys=e=>ge(e)||W(e)&&e.every(ge),js={[Xt]:Ys,[Zt]:Ys,[Qt]:Ys},Hs=(e,t,a)=>{const{form:l,formItem:n}=ea(),o=Fe(),r=b(),s=b(),i={firstButton:r,secondButton:s},u=y((()=>e.disabled||(null==l?void 0:l.disabled)||!1)),d=y((()=>Math.min(t.firstValue,t.secondValue))),c=y((()=>Math.max(t.firstValue,t.secondValue))),p=y((()=>e.range?100*(c.value-d.value)/(e.max-e.min)+"%":100*(t.firstValue-e.min)/(e.max-e.min)+"%")),v=y((()=>e.range?100*(d.value-e.min)/(e.max-e.min)+"%":"0%")),f=y((()=>e.vertical?{height:e.height}:{})),m=y((()=>e.vertical?{height:p.value,bottom:v.value}:{width:p.value,left:v.value})),h=()=>{o.value&&(t.sliderSize=o.value["client"+(e.vertical?"Height":"Width")])},g=a=>{const l=(a=>{const l=e.min+a*(e.max-e.min)/100;if(!e.range)return r;let n;return n=Math.abs(d.value-l)<Math.abs(c.value-l)?t.firstValue<t.secondValue?"firstButton":"secondButton":t.firstValue>t.secondValue?"firstButton":"secondButton",i[n]})(a);return l.value.setPosition(a),l},k=e=>{a(Xt,e),a(Zt,e)},w=async()=>{await H(),a(Qt,e.range?[d.value,c.value]:e.modelValue)},S=a=>{var l,n,r,s,i,d;if(u.value||t.dragging)return;h();let c=0;if(e.vertical){const e=null!=(r=null==(n=null==(l=a.touches)?void 0:l.item(0))?void 0:n.clientY)?r:a.clientY;c=(o.value.getBoundingClientRect().bottom-e)/t.sliderSize*100}else{c=((null!=(d=null==(i=null==(s=a.touches)?void 0:s.item(0))?void 0:i.clientX)?d:a.clientX)-o.value.getBoundingClientRect().left)/t.sliderSize*100}return c<0||c>100?void 0:g(c)};return{elFormItem:n,slider:o,firstButton:r,secondButton:s,sliderDisabled:u,minValue:d,maxValue:c,runwayStyle:f,barStyle:m,resetSize:h,setPosition:g,emitChange:w,onSliderWrapperPrevent:e=>{var t,a;((null==(t=i.firstButton.value)?void 0:t.dragging)||(null==(a=i.secondButton.value)?void 0:a.dragging))&&e.preventDefault()},onSliderClick:e=>{S(e)&&w()},onSliderDown:async e=>{const t=S(e);t&&(await H(),t.value.onButtonDown(e))},setFirstValue:a=>{t.firstValue=a,k(e.range?[d.value,c.value]:a)},setSecondValue:a=>{t.secondValue=a,e.range&&k([d.value,c.value])}}},{left:Ws,down:Ks,right:Us,up:Gs,home:Xs,end:Zs,pageUp:Qs,pageDown:Js}=ce,ei=(e,t,a)=>{const{disabled:l,min:n,max:o,step:r,showTooltip:s,precision:i,sliderSize:u,formatTooltip:d,emitChange:c,resetSize:p,updateDragging:v}=ee($a),{tooltip:f,tooltipVisible:m,formatValue:h,displayTooltip:g,hideTooltip:k}=((e,t,a)=>{const l=b(),n=b(!1),o=y((()=>t.value instanceof Function)),r=y((()=>o.value&&t.value(e.modelValue)||e.modelValue)),s=aa((()=>{a.value&&(n.value=!0)}),50),i=aa((()=>{a.value&&(n.value=!1)}),50);return{tooltip:l,tooltipVisible:n,formatValue:r,displayTooltip:s,hideTooltip:i}})(e,d,s),w=b(),S=y((()=>(e.modelValue-n.value)/(o.value-n.value)*100+"%")),x=y((()=>e.vertical?{bottom:S.value}:{left:S.value})),C=e=>{l.value||(t.newPosition=Number.parseFloat(S.value)+e/(o.value-n.value)*100,O(t.newPosition),c())},V=e=>{let t,a;return e.type.startsWith("touch")?(a=e.touches[0].clientY,t=e.touches[0].clientX):(a=e.clientY,t=e.clientX),{clientX:t,clientY:a}},M=a=>{t.dragging=!0,t.isClick=!0;const{clientX:l,clientY:n}=V(a);e.vertical?t.startY=n:t.startX=l,t.startPosition=Number.parseFloat(S.value),t.newPosition=t.startPosition},D=a=>{if(t.dragging){let l;t.isClick=!1,g(),p();const{clientX:n,clientY:o}=V(a);e.vertical?(t.currentY=o,l=(t.startY-t.currentY)/u.value*100):(t.currentX=n,l=(t.currentX-t.startX)/u.value*100),t.newPosition=t.startPosition+l,O(t.newPosition)}},$=()=>{t.dragging&&(setTimeout((()=>{t.dragging=!1,t.hovering||k(),t.isClick||(O(t.newPosition),c())}),0),window.removeEventListener("mousemove",D),window.removeEventListener("touchmove",D),window.removeEventListener("mouseup",$),window.removeEventListener("touchend",$),window.removeEventListener("contextmenu",$))},O=async l=>{if(null===l||Number.isNaN(+l))return;l<0?l=0:l>100&&(l=100);const s=100/((o.value-n.value)/r.value);let u=Math.round(l/s)*s*(o.value-n.value)*.01+n.value;u=Number.parseFloat(u.toFixed(i.value)),a(Xt,u),t.dragging||e.modelValue===t.oldValue||(t.oldValue=e.modelValue),await H(),t.dragging&&g(),f.value.updatePopper()};return le((()=>t.dragging),(e=>{v(e)})),{button:w,tooltip:f,tooltipVisible:m,showTooltip:s,wrapperStyle:x,formatValue:h,handleMouseEnter:()=>{t.hovering=!0,g()},handleMouseLeave:()=>{t.hovering=!1,t.dragging||k()},onButtonDown:e=>{l.value||(e.preventDefault(),M(e),window.addEventListener("mousemove",D),window.addEventListener("touchmove",D),window.addEventListener("mouseup",$),window.addEventListener("touchend",$),window.addEventListener("contextmenu",$),w.value.focus())},onKeyDown:e=>{let t=!0;[Ws,Ks].includes(e.key)?C(-r.value):[Us,Gs].includes(e.key)?C(r.value):e.key===Xs?l.value||(O(0),c()):e.key===Zs?l.value||(O(100),c()):e.key===Js?C(4*-r.value):e.key===Qs?C(4*r.value):t=!1,t&&e.preventDefault()},setPosition:O}},ti=d({modelValue:{type:Number,default:0},vertical:Boolean,tooltipClass:String});var ai=j(m({name:"ElSliderButton",props:ti,emits:{[Xt]:e=>ge(e)},setup(e,{expose:t,emit:a}){const l=e,n=g("slider"),o=we({hovering:!1,dragging:!1,isClick:!1,startX:0,currentX:0,startY:0,currentY:0,startPosition:0,newPosition:0,oldValue:l.modelValue}),{button:r,tooltip:s,showTooltip:i,tooltipVisible:u,wrapperStyle:d,formatValue:c,handleMouseEnter:p,handleMouseLeave:v,onButtonDown:f,onKeyDown:m,setPosition:h}=ei(l,o,a),{hovering:b,dragging:y}=Se(o);return t({onButtonDown:f,onKeyDown:m,setPosition:h,hovering:b,dragging:y}),(e,t)=>(S(),$("div",{ref_key:"button",ref:r,class:_([D(n).e("button-wrapper"),{hover:D(b),dragging:D(y)}]),style:B(D(d)),tabindex:"0",onMouseenter:t[1]||(t[1]=(...e)=>D(p)&&D(p)(...e)),onMouseleave:t[2]||(t[2]=(...e)=>D(v)&&D(v)(...e)),onMousedown:t[3]||(t[3]=(...e)=>D(f)&&D(f)(...e)),onTouchstart:t[4]||(t[4]=(...e)=>D(f)&&D(f)(...e)),onFocus:t[5]||(t[5]=(...e)=>D(p)&&D(p)(...e)),onBlur:t[6]||(t[6]=(...e)=>D(v)&&D(v)(...e)),onKeydown:t[7]||(t[7]=(...e)=>D(m)&&D(m)(...e))},[M(D(St),{ref_key:"tooltip",ref:s,visible:D(u),"onUpdate:visible":t[0]||(t[0]=e=>Y(u)?u.value=e:null),placement:"top","stop-popper-mouse-event":!1,"popper-class":e.tooltipClass,disabled:!D(i),persistent:""},{content:C((()=>[V("span",null,A(D(c)),1)])),default:C((()=>[V("div",{class:_([D(n).e("button"),{hover:D(b),dragging:D(y)}])},null,2)])),_:1},8,["visible","popper-class","disabled"])],38))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/slider/src/button.vue"]]);const li=d({mark:{type:c([String,Object]),default:void 0}});var ni=m({name:"ElSliderMarker",props:li,setup(e){const t=g("slider"),a=y((()=>v(e.mark)?e.mark:e.mark.label)),l=y((()=>v(e.mark)?void 0:e.mark.style));return()=>Ce("div",{class:t.e("marks-text"),style:l},a.value)}});const oi=["id","role","aria-label","aria-labelledby"],ri={key:1},si=m({name:"ElSlider",props:qs,emits:js,setup(e,{expose:t,emit:a}){const l=e,n=g("slider"),{t:o}=la(),r=we({firstValue:0,secondValue:0,oldValue:0,dragging:!1,sliderSize:1}),{elFormItem:s,slider:i,firstButton:u,secondButton:d,sliderDisabled:c,minValue:p,maxValue:v,runwayStyle:f,barStyle:m,resetSize:h,emitChange:k,onSliderWrapperPrevent:C,onSliderClick:O,onSliderDown:I,setFirstValue:T,setSecondValue:E}=Hs(l,r,a),{stops:A,getStopStyle:F}=((e,t,a,l)=>({stops:y((()=>{if(!e.showStops||e.min>e.max)return[];if(0===e.step)return[];const n=(e.max-e.min)/e.step,o=100*e.step/(e.max-e.min),r=Array.from({length:n-1}).map(((e,t)=>(t+1)*o));return e.range?r.filter((t=>t<100*(a.value-e.min)/(e.max-e.min)||t>100*(l.value-e.min)/(e.max-e.min))):r.filter((a=>a>100*(t.firstValue-e.min)/(e.max-e.min)))})),getStopStyle:t=>e.vertical?{bottom:`${t}%`}:{left:`${t}%`}}))(l,r,p,v),{inputId:z,isLabeledByFormItem:R}=ta(l,{formItemContext:s}),L=se(),q=y((()=>l.inputSize||L.value)),Y=y((()=>l.label||o("el.slider.defaultLabel",{min:l.min,max:l.max}))),j=y((()=>l.range?l.rangeStartLabel||o("el.slider.defaultRangeStartLabel"):Y.value)),W=y((()=>l.formatValueText?l.formatValueText(ee.value):`${ee.value}`)),U=y((()=>l.rangeEndLabel||o("el.slider.defaultRangeEndLabel"))),G=y((()=>l.formatValueText?l.formatValueText(te.value):`${te.value}`)),X=y((()=>[n.b(),n.m(L.value),n.is("vertical",l.vertical),{[n.m("with-input")]:l.showInput}])),Z=(e=>y((()=>e.marks?Object.keys(e.marks).map(parseFloat).sort(((e,t)=>e-t)).filter((t=>t<=e.max&&t>=e.min)).map((t=>({point:t,position:100*(t-e.min)/(e.max-e.min),mark:e.marks[t]}))):[])))(l);((e,t,a,l,n,o)=>{const r=e=>{n(Xt,e),n(Zt,e)},s=()=>e.range?![a.value,l.value].every(((e,a)=>e===t.oldValue[a])):e.modelValue!==t.oldValue,i=()=>{var a,l;if(e.min>e.max)return void K("Slider","min should not be greater than max.");const n=e.modelValue;e.range&&Array.isArray(n)?n[1]<e.min?r([e.min,e.min]):n[0]>e.max?r([e.max,e.max]):n[0]<e.min?r([e.min,n[1]]):n[1]>e.max?r([n[0],e.max]):(t.firstValue=n[0],t.secondValue=n[1],s()&&(null==(a=null==o?void 0:o.validate)||a.call(o,"change").catch((e=>ne())),t.oldValue=n.slice())):e.range||"number"!=typeof n||Number.isNaN(n)||(n<e.min?r(e.min):n>e.max?r(e.max):(t.firstValue=n,s()&&(null==(l=null==o?void 0:o.validate)||l.call(o,"change").catch((e=>ne())),t.oldValue=n)))};i(),le((()=>t.dragging),(e=>{e||i()})),le((()=>e.modelValue),((e,a)=>{t.dragging||Array.isArray(e)&&Array.isArray(a)&&e.every(((e,t)=>e===a[t]))&&t.firstValue===e[0]&&t.secondValue===e[1]||i()}),{deep:!0}),le((()=>[e.min,e.max]),(()=>{i()}))})(l,r,p,v,a,s);const Q=y((()=>{const e=[l.min,l.max,l.step].map((e=>{const t=`${e}`.split(".")[1];return t?t.length:0}));return Math.max.apply(null,e)})),{sliderWrapper:J}=((e,t,a)=>{const l=b();return w((async()=>{e.range?(Array.isArray(e.modelValue)?(t.firstValue=Math.max(e.min,e.modelValue[0]),t.secondValue=Math.min(e.max,e.modelValue[1])):(t.firstValue=e.min,t.secondValue=e.max),t.oldValue=[t.firstValue,t.secondValue]):("number"!=typeof e.modelValue||Number.isNaN(e.modelValue)?t.firstValue=e.min:t.firstValue=Math.min(e.max,Math.max(e.min,e.modelValue)),t.oldValue=t.firstValue),ut(window,"resize",a),await H(),a()})),{sliderWrapper:l}})(l,r,h),{firstValue:ee,secondValue:te,sliderSize:ae}=Se(r);return ie($a,{...Se(l),sliderSize:ae,disabled:c,precision:Q,emitChange:k,resetSize:h,updateDragging:e=>{r.dragging=e}}),t({onSliderClick:O}),(e,t)=>{var a,l;return S(),$("div",{id:e.range?D(z):void 0,ref_key:"sliderWrapper",ref:J,class:_(D(X)),role:e.range?"group":void 0,"aria-label":e.range&&!D(R)?D(Y):void 0,"aria-labelledby":e.range&&D(R)?null==(a=D(s))?void 0:a.labelId:void 0,onTouchstart:t[2]||(t[2]=(...e)=>D(C)&&D(C)(...e)),onTouchmove:t[3]||(t[3]=(...e)=>D(C)&&D(C)(...e))},[V("div",{ref_key:"slider",ref:i,class:_([D(n).e("runway"),{"show-input":e.showInput&&!e.range},D(n).is("disabled",D(c))]),style:B(D(f)),onMousedown:t[0]||(t[0]=(...e)=>D(I)&&D(I)(...e)),onTouchstart:t[1]||(t[1]=(...e)=>D(I)&&D(I)(...e))},[V("div",{class:_(D(n).e("bar")),style:B(D(m))},null,6),M(ai,{id:e.range?void 0:D(z),ref_key:"firstButton",ref:u,"model-value":D(ee),vertical:e.vertical,"tooltip-class":e.tooltipClass,role:"slider","aria-label":e.range||!D(R)?D(j):void 0,"aria-labelledby":!e.range&&D(R)?null==(l=D(s))?void 0:l.labelId:void 0,"aria-valuemin":e.min,"aria-valuemax":e.range?D(te):e.max,"aria-valuenow":D(ee),"aria-valuetext":D(W),"aria-orientation":e.vertical?"vertical":"horizontal","aria-disabled":D(c),"onUpdate:modelValue":D(T)},null,8,["id","model-value","vertical","tooltip-class","aria-label","aria-labelledby","aria-valuemin","aria-valuemax","aria-valuenow","aria-valuetext","aria-orientation","aria-disabled","onUpdate:modelValue"]),e.range?(S(),x(ai,{key:0,ref_key:"secondButton",ref:d,"model-value":D(te),vertical:e.vertical,"tooltip-class":e.tooltipClass,role:"slider","aria-label":D(U),"aria-valuemin":D(ee),"aria-valuemax":e.max,"aria-valuenow":D(te),"aria-valuetext":D(G),"aria-orientation":e.vertical?"vertical":"horizontal","aria-disabled":D(c),"onUpdate:modelValue":D(E)},null,8,["model-value","vertical","tooltip-class","aria-label","aria-valuemin","aria-valuemax","aria-valuenow","aria-valuetext","aria-orientation","aria-disabled","onUpdate:modelValue"])):de("v-if",!0),e.showStops?(S(),$("div",ri,[(S(!0),$(N,null,P(D(A),((e,t)=>(S(),$("div",{key:t,class:_(D(n).e("stop")),style:B(D(F)(e))},null,6)))),128))])):de("v-if",!0),D(Z).length>0?(S(),$(N,{key:2},[V("div",null,[(S(!0),$(N,null,P(D(Z),((e,t)=>(S(),$("div",{key:t,style:B(D(F)(e.position)),class:_([D(n).e("stop"),D(n).e("marks-stop")])},null,6)))),128))]),V("div",{class:_(D(n).e("marks"))},[(S(!0),$(N,null,P(D(Z),((e,t)=>(S(),x(D(ni),{key:t,mark:e.mark,style:B(D(F)(e.position))},null,8,["mark","style"])))),128))],2)],64)):de("v-if",!0)],38),e.showInput&&!e.range?(S(),x(D(Ht),{key:0,ref:"input","model-value":D(ee),class:_(D(n).e("input")),step:e.step,disabled:D(c),controls:e.showInputControls,min:e.min,max:e.max,debounce:e.debounce,size:D(q),"onUpdate:modelValue":D(T),onChange:D(k)},null,8,["model-value","class","step","disabled","controls","min","max","debounce","size","onUpdate:modelValue","onChange"])):de("v-if",!0)],42,oi)}}});const ii=U(j(si,[["__file","/home/runner/work/element-plus/element-plus/packages/components/slider/src/slider.vue"]])),ui=d({format:{type:String,default:"HH:mm"},modelValue:String,disabled:Boolean,editable:{type:Boolean,default:!0},effect:{type:String,default:"light"},clearable:{type:Boolean,default:!0},size:J,placeholder:String,start:{type:String,default:"09:00"},end:{type:String,default:"18:00"},step:{type:String,default:"00:30"},minTime:String,maxTime:String,name:String,prefixIcon:{type:c([String,Object]),default:()=>oe},clearIcon:{type:c([String,Object]),default:()=>Q}}),di=e=>{const t=(e||"").split(":");if(t.length>=2){let a=Number.parseInt(t[0],10);const l=Number.parseInt(t[1],10),n=e.toUpperCase();return n.includes("AM")&&12===a?a=0:n.includes("PM")&&12!==a&&(a+=12),{hours:a,minutes:l}}return null},ci=(e,t)=>{const a=di(e);if(!a)return-1;const l=di(t);if(!l)return-1;const n=a.minutes+60*a.hours,o=l.minutes+60*l.hours;return n===o?0:n>o?1:-1},pi=e=>`${e}`.padStart(2,"0"),vi=e=>`${pi(e.hours)}:${pi(e.minutes)}`,fi=(e,t)=>{const a=di(e);if(!a)return"";const l=di(t);if(!l)return"";const n={hours:a.hours,minutes:a.minutes};return n.minutes+=l.minutes,n.hours+=l.hours,n.hours+=Math.floor(n.minutes/60),n.minutes=n.minutes%60,vi(n)},mi=m({name:"ElTimeSelect",props:ui,emits:["change","blur","focus","update:modelValue"],setup(e,{expose:t}){const a=e;Na.extend(Ra);const{Option:l}=Ft,n=g("input"),o=b(),r=y((()=>a.modelValue)),s=y((()=>{const e=di(a.start);return e?vi(e):null})),i=y((()=>{const e=di(a.end);return e?vi(e):null})),u=y((()=>{const e=di(a.step);return e?vi(e):null})),d=y((()=>{const e=di(a.minTime||"");return e?vi(e):null})),c=y((()=>{const e=di(a.maxTime||"");return e?vi(e):null})),p=y((()=>{const e=[];if(a.start&&a.end&&a.step){let t,l=s.value;for(;l&&i.value&&ci(l,i.value)<=0;)t=Na(l,"HH:mm").format(a.format),e.push({value:t,disabled:ci(l,d.value||"-1:-1")<=0||ci(l,c.value||"100:100")>=0}),l=fi(l,u.value)}return e}));return t({blur:()=>{var e,t;null==(t=null==(e=o.value)?void 0:e.blur)||t.call(e)},focus:()=>{var e,t;null==(t=null==(e=o.value)?void 0:e.focus)||t.call(e)}}),(e,t)=>(S(),x(D(Ft),{ref_key:"select",ref:o,"model-value":D(r),disabled:e.disabled,clearable:e.clearable,"clear-icon":e.clearIcon,size:e.size,effect:e.effect,placeholder:e.placeholder,"default-first-option":"",filterable:e.editable,"onUpdate:modelValue":t[0]||(t[0]=t=>e.$emit("update:modelValue",t)),onChange:t[1]||(t[1]=t=>e.$emit("change",t)),onBlur:t[2]||(t[2]=t=>e.$emit("blur",t)),onFocus:t[3]||(t[3]=t=>e.$emit("focus",t))},{prefix:C((()=>[e.prefixIcon?(S(),x(D(O),{key:0,class:_(D(n).e("prefix-icon"))},{default:C((()=>[(S(),x(ue(e.prefixIcon)))])),_:1},8,["class"])):de("v-if",!0)])),default:C((()=>[(S(!0),$(N,null,P(D(p),(e=>(S(),x(D(l),{key:e.value,label:e.value,value:e.value,disabled:e.disabled},null,8,["label","value","disabled"])))),128))])),_:1},8,["model-value","disabled","clearable","clear-icon","size","effect","placeholder","filterable"]))}});var hi=j(mi,[["__file","/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue"]]);hi.install=e=>{e.component(hi.name,hi)};const gi=hi,bi={data:{type:Array,default:()=>[]},optionRender:Function,placeholder:String,title:String,filterable:Boolean,format:Object,filterMethod:Function,defaultChecked:Array,props:Object},yi=m({name:"ElTransferPanel",components:{ElCheckboxGroup:Bt,ElCheckbox:At,ElInput:Dt,OptionContent:({option:e})=>e},props:bi,emits:["checked-change"],setup(e,{slots:t}){const{t:a}=la(),l=g("transfer"),n=we({checked:[],allChecked:!1,query:"",inputHover:!1,checkChangeByUser:!0}),{labelProp:o,keyProp:r,disabledProp:s,filteredData:i,checkedSummary:u,isIndeterminate:d,handleAllCheckedChange:c}=((e,t)=>{const{emit:a}=$e(),l=y((()=>e.props.label||"label")),n=y((()=>e.props.key||"key")),o=y((()=>e.props.disabled||"disabled")),r=y((()=>e.data.filter((a=>"function"==typeof e.filterMethod?e.filterMethod(t.query,a):(a[l.value]||a[n.value].toString()).toLowerCase().includes(t.query.toLowerCase()))))),s=y((()=>r.value.filter((e=>!e[o.value])))),i=y((()=>{const a=t.checked.length,l=e.data.length,{noChecked:n,hasChecked:o}=e.format;return n&&o?a>0?o.replace(/\${checked}/g,a.toString()).replace(/\${total}/g,l.toString()):n.replace(/\${total}/g,l.toString()):`${a}/${l}`})),u=y((()=>{const e=t.checked.length;return e>0&&e<s.value.length})),d=()=>{const e=s.value.map((e=>e[n.value]));t.allChecked=e.length>0&&e.every((e=>t.checked.includes(e)))};return le((()=>t.checked),((e,l)=>{if(d(),t.checkChangeByUser){const t=e.concat(l).filter((t=>!e.includes(t)||!l.includes(t)));a("checked-change",e,t)}else a("checked-change",e),t.checkChangeByUser=!0})),le(s,(()=>{d()})),le((()=>e.data),(()=>{const e=[],a=r.value.map((e=>e[n.value]));t.checked.forEach((t=>{a.includes(t)&&e.push(t)})),t.checkChangeByUser=!1,t.checked=e})),le((()=>e.defaultChecked),((e,a)=>{if(a&&e.length===a.length&&e.every((e=>a.includes(e))))return;const l=[],o=s.value.map((e=>e[n.value]));e.forEach((e=>{o.includes(e)&&l.push(e)})),t.checkChangeByUser=!1,t.checked=l}),{immediate:!0}),{labelProp:l,keyProp:n,disabledProp:o,filteredData:r,checkableData:s,checkedSummary:i,isIndeterminate:u,updateAllChecked:d,handleAllCheckedChange:e=>{t.checked=e?s.value.map((e=>e[n.value])):[]}}})(e,n),p=y((()=>n.query.length>0&&0===i.value.length)),v=y((()=>!!t.default()[0].children.length)),{checked:f,allChecked:m,query:h,inputHover:b,checkChangeByUser:k}=Se(n);return{ns:l,labelProp:o,keyProp:r,disabledProp:s,filteredData:i,checkedSummary:u,isIndeterminate:d,handleAllCheckedChange:c,checked:f,allChecked:m,query:h,inputHover:b,checkChangeByUser:k,hasNoMatch:p,SearchIcon:dt,hasFooter:v,t:a}}});const ki=m({name:"ElTransfer",components:{TransferPanel:j(yi,[["render",function(e,t,a,l,n,o){const r=De("el-checkbox"),s=De("el-input"),i=De("option-content"),u=De("el-checkbox-group");return S(),$("div",{class:_(e.ns.b("panel"))},[V("p",{class:_(e.ns.be("panel","header"))},[M(r,{modelValue:e.allChecked,"onUpdate:modelValue":t[0]||(t[0]=t=>e.allChecked=t),indeterminate:e.isIndeterminate,onChange:e.handleAllCheckedChange},{default:C((()=>[E(A(e.title)+" ",1),V("span",null,A(e.checkedSummary),1)])),_:1},8,["modelValue","indeterminate","onChange"])],2),V("div",{class:_([e.ns.be("panel","body"),e.ns.is("with-footer",e.hasFooter)])},[e.filterable?(S(),x(s,{key:0,modelValue:e.query,"onUpdate:modelValue":t[1]||(t[1]=t=>e.query=t),class:_(e.ns.be("panel","filter")),size:"default",placeholder:e.placeholder,"prefix-icon":e.SearchIcon,clearable:"",onMouseenter:t[2]||(t[2]=t=>e.inputHover=!0),onMouseleave:t[3]||(t[3]=t=>e.inputHover=!1)},null,8,["modelValue","class","placeholder","prefix-icon"])):de("v-if",!0),pe(M(u,{modelValue:e.checked,"onUpdate:modelValue":t[4]||(t[4]=t=>e.checked=t),class:_([e.ns.is("filterable",e.filterable),e.ns.be("panel","list")])},{default:C((()=>[(S(!0),$(N,null,P(e.filteredData,(t=>(S(),x(r,{key:t[e.keyProp],class:_(e.ns.be("panel","item")),label:t[e.keyProp],disabled:t[e.disabledProp]},{default:C((()=>[M(i,{option:e.optionRender(t)},null,8,["option"])])),_:2},1032,["class","label","disabled"])))),128))])),_:1},8,["modelValue","class"]),[[Ne,!e.hasNoMatch&&e.data.length>0]]),pe(V("p",{class:_(e.ns.be("panel","empty"))},A(e.hasNoMatch?e.t("el.transfer.noMatch"):e.t("el.transfer.noData")),3),[[Ne,e.hasNoMatch||0===e.data.length]])],2),e.hasFooter?(S(),$("p",{key:0,class:_(e.ns.be("panel","footer"))},[T(e.$slots,"default")],2)):de("v-if",!0)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/transfer/src/transfer-panel.vue"]]),ElButton:Yt,ElIcon:O,ArrowLeft:He,ArrowRight:Me},props:{data:{type:Array,default:()=>[]},titles:{type:Array,default:()=>[]},buttonTexts:{type:Array,default:()=>[]},filterPlaceholder:{type:String,default:""},filterMethod:Function,leftDefaultChecked:{type:Array,default:()=>[]},rightDefaultChecked:{type:Array,default:()=>[]},renderContent:Function,modelValue:{type:Array,default:()=>[]},format:{type:Object,default:()=>({})},filterable:{type:Boolean,default:!1},props:{type:Object,default:()=>({label:"label",key:"key",disabled:"disabled"})},targetOrder:{type:String,default:"original",validator:e=>["original","push","unshift"].includes(e)}},emits:[Xt,Qt,"left-check-change","right-check-change"],setup(e,{emit:t,slots:a}){const{t:l}=la(),n=g("transfer"),o=ee(ae,{}),r=we({leftChecked:[],rightChecked:[]}),{propsKey:s,sourceData:i,targetData:u}=(e=>{const t=y((()=>e.props.key)),a=y((()=>e.data.reduce(((e,a)=>(e[a[t.value]]=a)&&e),{}))),l=y((()=>e.data.filter((a=>!e.modelValue.includes(a[t.value]))))),n=y((()=>"original"===e.targetOrder?e.data.filter((a=>e.modelValue.includes(a[t.value]))):e.modelValue.reduce(((e,t)=>{const l=a.value[t];return l&&e.push(l),e}),[])));return{propsKey:t,sourceData:l,targetData:n}})(e),{onSourceCheckedChange:d,onTargetCheckedChange:c}=((e,t)=>({onSourceCheckedChange:(a,l)=>{e.leftChecked=a,void 0!==l&&t("left-check-change",a,l)},onTargetCheckedChange:(a,l)=>{e.rightChecked=a,void 0!==l&&t("right-check-change",a,l)}}))(r,t),{addToLeft:p,addToRight:v}=((e,t,a,l)=>{const n=(e,t,a)=>{l(Xt,e),l(Qt,e,t,a)};return{addToLeft:()=>{const a=e.modelValue.slice();t.rightChecked.forEach((e=>{const t=a.indexOf(e);t>-1&&a.splice(t,1)})),n(a,"left",t.rightChecked)},addToRight:()=>{let l=e.modelValue.slice();const o=e.data.filter((l=>{const n=l[a.value];return t.leftChecked.includes(n)&&!e.modelValue.includes(n)})).map((e=>e[a.value]));l="unshift"===e.targetOrder?o.concat(l):l.concat(o),"original"===e.targetOrder&&(l=e.data.filter((e=>l.includes(e[a.value]))).map((e=>e[a.value]))),n(l,"right",t.leftChecked)}}})(e,r,s,t),f=b(),m=b(),h=y((()=>2===e.buttonTexts.length)),k=y((()=>e.titles[0]||l("el.transfer.titles.0"))),w=y((()=>e.titles[1]||l("el.transfer.titles.1"))),S=y((()=>e.filterPlaceholder||l("el.transfer.filterPlaceholder")));le((()=>e.modelValue),(()=>{var e;null==(e=o.validate)||e.call(o,"change").catch((e=>ne()))}));const x=y((()=>t=>e.renderContent?e.renderContent(Ce,t):a.default?a.default({option:t}):Ce("span",t[e.props.label]||t[e.props.key])));return{ns:n,sourceData:i,targetData:u,onSourceCheckedChange:d,onTargetCheckedChange:c,addToLeft:p,addToRight:v,...Se(r),hasButtonTexts:h,leftPanelTitle:k,rightPanelTitle:w,panelFilterPlaceholder:S,clearQuery:e=>{switch(e){case"left":f.value.query="";break;case"right":m.value.query=""}},leftPanel:f,rightPanel:m,optionRender:x}}}),wi={key:0},Si={key:0};var xi=j(ki,[["render",function(e,t,a,l,n,o){const r=De("transfer-panel"),s=De("arrow-left"),i=De("el-icon"),u=De("el-button"),d=De("arrow-right");return S(),$("div",{class:_(e.ns.b())},[M(r,{ref:"leftPanel",data:e.sourceData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,title:e.leftPanelTitle,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,"default-checked":e.leftDefaultChecked,props:e.props,onCheckedChange:e.onSourceCheckedChange},{default:C((()=>[T(e.$slots,"left-footer")])),_:3},8,["data","option-render","placeholder","title","filterable","format","filter-method","default-checked","props","onCheckedChange"]),V("div",{class:_(e.ns.e("buttons"))},[M(u,{type:"primary",class:_([e.ns.e("button"),e.ns.is("with-texts",e.hasButtonTexts)]),disabled:0===e.rightChecked.length,onClick:e.addToLeft},{default:C((()=>[M(i,null,{default:C((()=>[M(s)])),_:1}),void 0!==e.buttonTexts[0]?(S(),$("span",wi,A(e.buttonTexts[0]),1)):de("v-if",!0)])),_:1},8,["class","disabled","onClick"]),M(u,{type:"primary",class:_([e.ns.e("button"),e.ns.is("with-texts",e.hasButtonTexts)]),disabled:0===e.leftChecked.length,onClick:e.addToRight},{default:C((()=>[void 0!==e.buttonTexts[1]?(S(),$("span",Si,A(e.buttonTexts[1]),1)):de("v-if",!0),M(i,null,{default:C((()=>[M(d)])),_:1})])),_:1},8,["class","disabled","onClick"])],2),M(r,{ref:"rightPanel",data:e.targetData,"option-render":e.optionRender,placeholder:e.panelFilterPlaceholder,filterable:e.filterable,format:e.format,"filter-method":e.filterMethod,title:e.rightPanelTitle,"default-checked":e.rightDefaultChecked,props:e.props,onCheckedChange:e.onTargetCheckedChange},{default:C((()=>[T(e.$slots,"right-footer")])),_:3},8,["data","option-render","placeholder","filterable","format","filter-method","title","default-checked","props","onCheckedChange"])],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/transfer/src/index.vue"]]);xi.install=e=>{e.component(xi.name,xi)};const Ci=xi;const Vi={Radio:Fl,Checkbox:Bt,CheckboxButton:Bt,Input:Dt,Autocomplete:Ea,InputNumber:Ht,Select:Ft,Cascader:cn,Switch:Wt,Slider:ii,TimePicker:xl,DatePicker:nr,Rate:Kr,ColorPicker:zn,Transfer:Ci,Divider:Kt,TimeSelect:gi,SelectV2:Ls,RadioButton:Fl,InputPassword:Ut,Editor:Gt},{t:Mi}=ct(),Di=(e,t={},a)=>{const l={};for(const n in t)t[n]&&(l[n]=t=>zt(e,`${a}-${n}`,t));return l};function $i(e){return"function"==typeof e||"[object Object]"===Object.prototype.toString.call(e)&&!ht(e)}const{getPrefixCls:Oi}=vt(),_i=Oi("form");var Ii=m({name:"Form",props:{schema:{type:Array,default:()=>[]},isCol:pt.bool.def(!0),model:{type:Object,default:()=>({})},autoSetPlaceholder:pt.bool.def(!0),isCustom:pt.bool.def(!1),labelWidth:pt.oneOfType([String,Number]).def("auto")},emits:["register"],setup(e,{slots:t,expose:a,emit:l}){const n=b(),o=b({}),r=b({}),s=y((()=>{const t={...e};return Object.assign(t,D(r)),t})),i=b({});w((()=>{var e;l("register",null==(e=D(n))?void 0:e.$parent,D(n))}));a({setValues:(e={})=>{i.value=Object.assign(D(i),e)},formModel:i,setProps:(e={})=>{r.value=Object.assign(D(r),e),o.value=e},delSchema:e=>{const{schema:t}=D(s),a=ft(t,(t=>t.field===e));a>-1&&t.splice(a,1)},addSchema:(e,t)=>{const{schema:a}=D(s);void 0===t?a.push(e):a.splice(t,0,e)},setSchema:e=>{const{schema:t}=D(s);for(const a of t)for(const t of e)a.field===t.field&&mt(a,t.path,t.value)},getElFormRef:()=>D(n)}),le((()=>D(s).schema),((e=[])=>{i.value=((e,t)=>{const a={...t};return e.map((e=>{if(e.hidden)delete a[e.field];else if(e.component&&"Divider"!==e.component){const t=Reflect.has(a,e.field);a[e.field]=t?a[e.field]:void 0!==e.value?e.value:""}})),a})(e,D(i))}),{immediate:!0,deep:!0});const u=()=>{const{schema:e=[],isCol:t}=D(s);return e.filter((e=>!e.hidden)).map((e=>{let a;return"Divider"===e.component?M(Vi.Divider,{contentPosition:"left",...e.componentProps},{default:()=>[null==e?void 0:e.label]}):t?M(bt,((e={})=>({...e.span?{}:{xs:24,sm:12,md:12,lg:12,xl:12},...e}))(e.colProps),$i(a=d(e))?a:{default:()=>[a]}):d(e)}))},d=e=>{var a,l;const n=["SelectV2","Cascader","Transfer"],o={...Di(t,null==(a=null==e?void 0:e.componentProps)?void 0:a.slots,e.field)};"SelectV2"!==(null==e?void 0:e.component)&&"Cascader"!==(null==e?void 0:e.component)&&(null==(l=null==e?void 0:e.componentProps)?void 0:l.options)&&(o.default=()=>c(e));const r=((e,t)=>{const a={};return e[`${t}-error`]&&(a.error=a=>zt(e,`${t}-error`,a)),e[`${t}-label`]&&(a.label=a=>zt(e,`${t}-label`,a)),a})(t,e.field);return(null==e?void 0:e.labelMessage)&&(r.label=()=>M(N,null,[M("span",null,[e.label]),M(St,{placement:"right","raw-content":!0},{content:()=>M("span",{innerHTML:e.labelMessage},null),default:()=>M(gt,{icon:"ep:warning",size:16,color:"var(--el-color-primary)",class:"ml-2px relative top-1px"},null)})])),M(qr,R(e.formItemProps||{},{prop:e.field,label:e.label||""}),{...r,default:()=>{var a,l;const r=Vi[e.component],{autoSetPlaceholder:u}=D(s);return t[e.field]?zt(t,e.field,i.value):M(r,R({modelValue:i.value[e.field],"onUpdate:modelValue":t=>i.value[e.field]=t},u&&(e=>{var t,a;if(["Input","Autocomplete","InputNumber","InputPassword"].includes(null==e?void 0:e.component))return{placeholder:Mi("common.inputText")};if(["Select","TimePicker","DatePicker","TimeSelect","TimeSelect"].includes(null==e?void 0:e.component))return["datetimerange","daterange","monthrange","datetimerange","daterange"].includes((null==(t=null==e?void 0:e.componentProps)?void 0:t.type)||(null==(a=null==e?void 0:e.componentProps)?void 0:a.isRange))?{startPlaceholder:Mi("common.startTimeText"),endPlaceholder:Mi("common.endTimeText"),rangeSeparator:"-"}:{placeholder:Mi("common.selectText")};return{}})(e),(e=>{const t=["ColorPicker"].includes(e.component)?{...e.componentProps}:{clearable:!0,...e.componentProps};return null==t||delete t.slots,t})(e),n.includes(null==e?void 0:e.component)&&(null==(a=null==e?void 0:e.componentProps)?void 0:a.options)?{options:(null==(l=null==e?void 0:e.componentProps)?void 0:l.options)||[]}:{}),{...o})}})},c=e=>{switch(e.component){case"Select":const{renderSelectOptions:a}=(e=>{const t=(t,a)=>{var l,n,o,r;const s=null==(n=null==(l=null==t?void 0:t.componentProps)?void 0:l.optionsAlias)?void 0:n.labelField,i=null==(r=null==(o=null==t?void 0:t.componentProps)?void 0:o.optionsAlias)?void 0:r.valueField;return M(Rt,{label:a[s||"label"],value:a[i||"value"]},{default:()=>{var l;return(null==(l=null==t?void 0:t.componentProps)?void 0:l.optionsSlot)?zt(e,`${t.field}-option`,{item:a}):void 0}})};return{renderSelectOptions:e=>{var a,l,n,o;const r=null==(l=null==(a=null==e?void 0:e.componentProps)?void 0:a.optionsAlias)?void 0:l.labelField;return null==(o=null==(n=null==e?void 0:e.componentProps)?void 0:n.options)?void 0:o.map((a=>{var l;return(null==(l=null==a?void 0:a.options)?void 0:l.length)?M(Lt,{label:a[r||"label"]},{default:()=>{var l;return null==(l=null==a?void 0:a.options)?void 0:l.map((a=>t(e,a)))}}):t(e,a)}))}}})(t);return a(e);case"Radio":case"RadioButton":const{renderRadioOptions:l}={renderRadioOptions:e=>{var t,a,l,n,o,r;const s=null==(a=null==(t=null==e?void 0:e.componentProps)?void 0:t.optionsAlias)?void 0:a.labelField,i=null==(n=null==(l=null==e?void 0:e.componentProps)?void 0:l.optionsAlias)?void 0:n.valueField,u="Radio"===e.component?Nl:Bl;return null==(r=null==(o=null==e?void 0:e.componentProps)?void 0:o.options)?void 0:r.map((e=>M(u,{label:e[s||"value"]},{default:()=>[e[i||"label"]]})))}};return l(e);case"Checkbox":case"CheckboxButton":const{renderChcekboxOptions:n}={renderChcekboxOptions:e=>{var t,a,l,n,o,r;const s=null==(a=null==(t=null==e?void 0:e.componentProps)?void 0:t.optionsAlias)?void 0:a.labelField,i=null==(n=null==(l=null==e?void 0:e.componentProps)?void 0:l.optionsAlias)?void 0:n.valueField,u="Checkbox"===e.component?At:qt;return null==(r=null==(o=null==e?void 0:e.componentProps)?void 0:o.options)?void 0:r.map((e=>M(u,{label:e[s||"value"]},{default:()=>[e[i||"label"]]})))}};return n(e)}};return()=>M(Lr,R({ref:n},(()=>{const e=["schema","isCol","autoSetPlaceholder","isCustom","model"],t={...D(s)};for(const a in t)-1!==e.indexOf(a)&&delete t[a];return t})(),{model:e.isCustom?e.model:i,class:_i}),{default:()=>{const{isCustom:e}=D(s);return e?zt(t,"default"):(()=>{let e;const{isCol:t}=D(s);return t?M(yt,{gutter:20},$i(e=u())?e:{default:()=>[e]}):u()})()}})}}),Pi=ca(Ii,[["__scopeId","data-v-2d79713f"]]);export{qr as E,Pi as F};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
