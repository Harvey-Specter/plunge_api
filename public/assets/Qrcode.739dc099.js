import{d as t,B as e,r as n,D as r,v as o,E as i,aO as s,av as a,o as l,c as u,k as c,as as d,n as f,a as h,e as g,g as p,t as m,at as w,a4 as v,j as y,ab as E,c0 as b,cg as x,b as C,l as A,w as B,bS as T}from"./index.63ad27ed.js";import{_ as I}from"./plugin-vue_export-helper.21dcd24c.js";import{_ as M}from"./ContentWrap.851f508f.js";import{E as P,a as N}from"./el-col.29973b17.js";import{E as R}from"./el-card.9f27dd59.js";import{_ as L}from"./logo.32bb2b9e.js";import"./el-popper.2e0f947e.js";import"./index2.06b96e43.js";import"./typescript2.0e462989.js";var S={},_={},U={};let D;const k=[0,26,44,70,100,134,172,196,242,292,346,404,466,532,581,655,733,815,901,991,1085,1156,1258,1364,1474,1588,1706,1828,1921,2051,2185,2323,2465,2611,2761,2876,3034,3196,3362,3532,3706];U.getSymbolSize=function(t){if(!t)throw new Error('"version" cannot be null or undefined');if(t<1||t>40)throw new Error('"version" should be in range from 1 to 40');return 4*t+17},U.getSymbolTotalCodewords=function(t){return k[t]},U.getBCHDigit=function(t){let e=0;for(;0!==t;)e++,t>>>=1;return e},U.setToSJISFunction=function(t){if("function"!=typeof t)throw new Error('"toSJISFunc" is not a valid function.');D=t},U.isKanjiModeEnabled=function(){return void 0!==D},U.toSJIS=function(t){return D(t)};var z,j={};function q(){this.buffer=[],this.length=0}(z=j).L={bit:1},z.M={bit:0},z.Q={bit:3},z.H={bit:2},z.isValid=function(t){return t&&void 0!==t.bit&&t.bit>=0&&t.bit<4},z.from=function(t,e){if(z.isValid(t))return t;try{return function(t){if("string"!=typeof t)throw new Error("Param is not a string");switch(t.toLowerCase()){case"l":case"low":return z.L;case"m":case"medium":return z.M;case"q":case"quartile":return z.Q;case"h":case"high":return z.H;default:throw new Error("Unknown EC Level: "+t)}}(t)}catch(n){return e}},q.prototype={get:function(t){const e=Math.floor(t/8);return 1==(this.buffer[e]>>>7-t%8&1)},put:function(t,e){for(let n=0;n<e;n++)this.putBit(1==(t>>>e-n-1&1))},getLengthInBits:function(){return this.length},putBit:function(t){const e=Math.floor(this.length/8);this.buffer.length<=e&&this.buffer.push(0),t&&(this.buffer[e]|=128>>>this.length%8),this.length++}};var F=q;function H(t){if(!t||t<1)throw new Error("BitMatrix size must be defined and greater than 0");this.size=t,this.data=new Uint8Array(t*t),this.reservedBit=new Uint8Array(t*t)}H.prototype.set=function(t,e,n,r){const o=t*this.size+e;this.data[o]=n,r&&(this.reservedBit[o]=!0)},H.prototype.get=function(t,e){return this.data[t*this.size+e]},H.prototype.xor=function(t,e,n){this.data[t*this.size+e]^=n},H.prototype.isReserved=function(t,e){return this.reservedBit[t*this.size+e]};var J=H,K={};!function(t){const e=U.getSymbolSize;t.getRowColCoords=function(t){if(1===t)return[];const n=Math.floor(t/7)+2,r=e(t),o=145===r?26:2*Math.ceil((r-13)/(2*n-2)),i=[r-7];for(let e=1;e<n-1;e++)i[e]=i[e-1]-o;return i.push(6),i.reverse()},t.getPositions=function(e){const n=[],r=t.getRowColCoords(e),o=r.length;for(let t=0;t<o;t++)for(let e=0;e<o;e++)0===t&&0===e||0===t&&e===o-1||t===o-1&&0===e||n.push([r[t],r[e]]);return n}}(K);var Y={};const O=U.getSymbolSize;Y.getPositions=function(t){const e=O(t);return[[0,0],[e-7,0],[0,e-7]]};var Q={};!function(t){t.Patterns={PATTERN000:0,PATTERN001:1,PATTERN010:2,PATTERN011:3,PATTERN100:4,PATTERN101:5,PATTERN110:6,PATTERN111:7};const e=3,n=3,r=40,o=10;function i(e,n,r){switch(e){case t.Patterns.PATTERN000:return(n+r)%2==0;case t.Patterns.PATTERN001:return n%2==0;case t.Patterns.PATTERN010:return r%3==0;case t.Patterns.PATTERN011:return(n+r)%3==0;case t.Patterns.PATTERN100:return(Math.floor(n/2)+Math.floor(r/3))%2==0;case t.Patterns.PATTERN101:return n*r%2+n*r%3==0;case t.Patterns.PATTERN110:return(n*r%2+n*r%3)%2==0;case t.Patterns.PATTERN111:return(n*r%3+(n+r)%2)%2==0;default:throw new Error("bad maskPattern:"+e)}}t.isValid=function(t){return null!=t&&""!==t&&!isNaN(t)&&t>=0&&t<=7},t.from=function(e){return t.isValid(e)?parseInt(e,10):void 0},t.getPenaltyN1=function(t){const n=t.size;let r=0,o=0,i=0,s=null,a=null;for(let l=0;l<n;l++){o=i=0,s=a=null;for(let u=0;u<n;u++){let n=t.get(l,u);n===s?o++:(o>=5&&(r+=e+(o-5)),s=n,o=1),n=t.get(u,l),n===a?i++:(i>=5&&(r+=e+(i-5)),a=n,i=1)}o>=5&&(r+=e+(o-5)),i>=5&&(r+=e+(i-5))}return r},t.getPenaltyN2=function(t){const e=t.size;let r=0;for(let n=0;n<e-1;n++)for(let o=0;o<e-1;o++){const e=t.get(n,o)+t.get(n,o+1)+t.get(n+1,o)+t.get(n+1,o+1);4!==e&&0!==e||r++}return r*n},t.getPenaltyN3=function(t){const e=t.size;let n=0,o=0,i=0;for(let r=0;r<e;r++){o=i=0;for(let s=0;s<e;s++)o=o<<1&2047|t.get(r,s),s>=10&&(1488===o||93===o)&&n++,i=i<<1&2047|t.get(s,r),s>=10&&(1488===i||93===i)&&n++}return n*r},t.getPenaltyN4=function(t){let e=0;const n=t.data.length;for(let r=0;r<n;r++)e+=t.data[r];return Math.abs(Math.ceil(100*e/n/5)-10)*o},t.applyMask=function(t,e){const n=e.size;for(let r=0;r<n;r++)for(let o=0;o<n;o++)e.isReserved(o,r)||e.xor(o,r,i(t,o,r))},t.getBestMask=function(e,n){const r=Object.keys(t.Patterns).length;let o=0,i=1/0;for(let s=0;s<r;s++){n(s),t.applyMask(s,e);const r=t.getPenaltyN1(e)+t.getPenaltyN2(e)+t.getPenaltyN3(e)+t.getPenaltyN4(e);t.applyMask(s,e),r<i&&(i=r,o=s)}return o}}(Q);var V={};const $=j,Z=[1,1,1,1,1,1,1,1,1,1,2,2,1,2,2,4,1,2,4,4,2,4,4,4,2,4,6,5,2,4,6,6,2,5,8,8,4,5,8,8,4,5,8,11,4,8,10,11,4,9,12,16,4,9,16,16,6,10,12,18,6,10,17,16,6,11,16,19,6,13,18,21,7,14,21,25,8,16,20,25,8,17,23,25,9,17,23,34,9,18,25,30,10,20,27,32,12,21,29,35,12,23,34,37,12,25,34,40,13,26,35,42,14,28,38,45,15,29,40,48,16,31,43,51,17,33,45,54,18,35,48,57,19,37,51,60,19,38,53,63,20,40,56,66,21,43,59,70,22,45,62,74,24,47,65,77,25,49,68,81],W=[7,10,13,17,10,16,22,28,15,26,36,44,20,36,52,64,26,48,72,88,36,64,96,112,40,72,108,130,48,88,132,156,60,110,160,192,72,130,192,224,80,150,224,264,96,176,260,308,104,198,288,352,120,216,320,384,132,240,360,432,144,280,408,480,168,308,448,532,180,338,504,588,196,364,546,650,224,416,600,700,224,442,644,750,252,476,690,816,270,504,750,900,300,560,810,960,312,588,870,1050,336,644,952,1110,360,700,1020,1200,390,728,1050,1260,420,784,1140,1350,450,812,1200,1440,480,868,1290,1530,510,924,1350,1620,540,980,1440,1710,570,1036,1530,1800,570,1064,1590,1890,600,1120,1680,1980,630,1204,1770,2100,660,1260,1860,2220,720,1316,1950,2310,750,1372,2040,2430];V.getBlocksCount=function(t,e){switch(e){case $.L:return Z[4*(t-1)+0];case $.M:return Z[4*(t-1)+1];case $.Q:return Z[4*(t-1)+2];case $.H:return Z[4*(t-1)+3];default:return}},V.getTotalCodewordsCount=function(t,e){switch(e){case $.L:return W[4*(t-1)+0];case $.M:return W[4*(t-1)+1];case $.Q:return W[4*(t-1)+2];case $.H:return W[4*(t-1)+3];default:return}};var X={},G={};const tt=new Uint8Array(512),et=new Uint8Array(256);!function(){let t=1;for(let e=0;e<255;e++)tt[e]=t,et[t]=e,t<<=1,256&t&&(t^=285);for(let e=255;e<512;e++)tt[e]=tt[e-255]}(),G.log=function(t){if(t<1)throw new Error("log("+t+")");return et[t]},G.exp=function(t){return tt[t]},G.mul=function(t,e){return 0===t||0===e?0:tt[et[t]+et[e]]},function(t){const e=G;t.mul=function(t,n){const r=new Uint8Array(t.length+n.length-1);for(let o=0;o<t.length;o++)for(let i=0;i<n.length;i++)r[o+i]^=e.mul(t[o],n[i]);return r},t.mod=function(t,n){let r=new Uint8Array(t);for(;r.length-n.length>=0;){const t=r[0];for(let i=0;i<n.length;i++)r[i]^=e.mul(n[i],t);let o=0;for(;o<r.length&&0===r[o];)o++;r=r.slice(o)}return r},t.generateECPolynomial=function(n){let r=new Uint8Array([1]);for(let o=0;o<n;o++)r=t.mul(r,new Uint8Array([1,e.exp(o)]));return r}}(X);const nt=X;function rt(t){this.genPoly=void 0,this.degree=t,this.degree&&this.initialize(this.degree)}rt.prototype.initialize=function(t){this.degree=t,this.genPoly=nt.generateECPolynomial(this.degree)},rt.prototype.encode=function(t){if(!this.genPoly)throw new Error("Encoder not initialized");const e=new Uint8Array(t.length+this.degree);e.set(t);const n=nt.mod(e,this.genPoly),r=this.degree-n.length;if(r>0){const t=new Uint8Array(this.degree);return t.set(n,r),t}return n};var ot=rt,it={},st={},at={isValid:function(t){return!isNaN(t)&&t>=1&&t<=40}},lt={};let ut="(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";ut=ut.replace(/u/g,"\\u");const ct="(?:(?![A-Z0-9 $%*+\\-./:]|"+ut+")(?:.|[\r\n]))+";lt.KANJI=new RegExp(ut,"g"),lt.BYTE_KANJI=new RegExp("[^A-Z0-9 $%*+\\-./:]+","g"),lt.BYTE=new RegExp(ct,"g"),lt.NUMERIC=new RegExp("[0-9]+","g"),lt.ALPHANUMERIC=new RegExp("[A-Z $%*+\\-./:]+","g");const dt=new RegExp("^"+ut+"$"),ft=new RegExp("^[0-9]+$"),ht=new RegExp("^[A-Z0-9 $%*+\\-./:]+$");lt.testKanji=function(t){return dt.test(t)},lt.testNumeric=function(t){return ft.test(t)},lt.testAlphanumeric=function(t){return ht.test(t)},function(t){const e=at,n=lt;t.NUMERIC={id:"Numeric",bit:1,ccBits:[10,12,14]},t.ALPHANUMERIC={id:"Alphanumeric",bit:2,ccBits:[9,11,13]},t.BYTE={id:"Byte",bit:4,ccBits:[8,16,16]},t.KANJI={id:"Kanji",bit:8,ccBits:[8,10,12]},t.MIXED={bit:-1},t.getCharCountIndicator=function(t,n){if(!t.ccBits)throw new Error("Invalid mode: "+t);if(!e.isValid(n))throw new Error("Invalid version: "+n);return n>=1&&n<10?t.ccBits[0]:n<27?t.ccBits[1]:t.ccBits[2]},t.getBestModeForData=function(e){return n.testNumeric(e)?t.NUMERIC:n.testAlphanumeric(e)?t.ALPHANUMERIC:n.testKanji(e)?t.KANJI:t.BYTE},t.toString=function(t){if(t&&t.id)return t.id;throw new Error("Invalid mode")},t.isValid=function(t){return t&&t.bit&&t.ccBits},t.from=function(e,n){if(t.isValid(e))return e;try{return function(e){if("string"!=typeof e)throw new Error("Param is not a string");switch(e.toLowerCase()){case"numeric":return t.NUMERIC;case"alphanumeric":return t.ALPHANUMERIC;case"kanji":return t.KANJI;case"byte":return t.BYTE;default:throw new Error("Unknown mode: "+e)}}(e)}catch(r){return n}}}(st),function(t){const e=U,n=V,r=j,o=st,i=at,s=e.getBCHDigit(7973);function a(t,e){return o.getCharCountIndicator(t,e)+4}function l(t,e){let n=0;return t.forEach((function(t){const r=a(t.mode,e);n+=r+t.getBitsLength()})),n}t.from=function(t,e){return i.isValid(t)?parseInt(t,10):e},t.getCapacity=function(t,r,s){if(!i.isValid(t))throw new Error("Invalid QR Code version");void 0===s&&(s=o.BYTE);const l=8*(e.getSymbolTotalCodewords(t)-n.getTotalCodewordsCount(t,r));if(s===o.MIXED)return l;const u=l-a(s,t);switch(s){case o.NUMERIC:return Math.floor(u/10*3);case o.ALPHANUMERIC:return Math.floor(u/11*2);case o.KANJI:return Math.floor(u/13);case o.BYTE:default:return Math.floor(u/8)}},t.getBestVersionForData=function(e,n){let i;const s=r.from(n,r.M);if(Array.isArray(e)){if(e.length>1)return function(e,n){for(let r=1;r<=40;r++)if(l(e,r)<=t.getCapacity(r,n,o.MIXED))return r}(e,s);if(0===e.length)return 1;i=e[0]}else i=e;return function(e,n,r){for(let o=1;o<=40;o++)if(n<=t.getCapacity(o,r,e))return o}(i.mode,i.getLength(),s)},t.getEncodedBits=function(t){if(!i.isValid(t)||t<7)throw new Error("Invalid QR Code version");let n=t<<12;for(;e.getBCHDigit(n)-s>=0;)n^=7973<<e.getBCHDigit(n)-s;return t<<12|n}}(it);var gt={};const pt=U,mt=pt.getBCHDigit(1335);gt.getEncodedBits=function(t,e){const n=t.bit<<3|e;let r=n<<10;for(;pt.getBCHDigit(r)-mt>=0;)r^=1335<<pt.getBCHDigit(r)-mt;return 21522^(n<<10|r)};var wt={};const vt=st;function yt(t){this.mode=vt.NUMERIC,this.data=t.toString()}yt.getBitsLength=function(t){return 10*Math.floor(t/3)+(t%3?t%3*3+1:0)},yt.prototype.getLength=function(){return this.data.length},yt.prototype.getBitsLength=function(){return yt.getBitsLength(this.data.length)},yt.prototype.write=function(t){let e,n,r;for(e=0;e+3<=this.data.length;e+=3)n=this.data.substr(e,3),r=parseInt(n,10),t.put(r,10);const o=this.data.length-e;o>0&&(n=this.data.substr(e),r=parseInt(n,10),t.put(r,3*o+1))};var Et=yt;const bt=st,xt=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","$","%","*","+","-",".","/",":"];function Ct(t){this.mode=bt.ALPHANUMERIC,this.data=t}Ct.getBitsLength=function(t){return 11*Math.floor(t/2)+t%2*6},Ct.prototype.getLength=function(){return this.data.length},Ct.prototype.getBitsLength=function(){return Ct.getBitsLength(this.data.length)},Ct.prototype.write=function(t){let e;for(e=0;e+2<=this.data.length;e+=2){let n=45*xt.indexOf(this.data[e]);n+=xt.indexOf(this.data[e+1]),t.put(n,11)}this.data.length%2&&t.put(xt.indexOf(this.data[e]),6)};var At=Ct;const Bt=function(t){for(var e=[],n=t.length,r=0;r<n;r++){var o=t.charCodeAt(r);if(o>=55296&&o<=56319&&n>r+1){var i=t.charCodeAt(r+1);i>=56320&&i<=57343&&(o=1024*(o-55296)+i-56320+65536,r+=1)}o<128?e.push(o):o<2048?(e.push(o>>6|192),e.push(63&o|128)):o<55296||o>=57344&&o<65536?(e.push(o>>12|224),e.push(o>>6&63|128),e.push(63&o|128)):o>=65536&&o<=1114111?(e.push(o>>18|240),e.push(o>>12&63|128),e.push(o>>6&63|128),e.push(63&o|128)):e.push(239,191,189)}return new Uint8Array(e).buffer},Tt=st;function It(t){this.mode=Tt.BYTE,this.data=new Uint8Array(Bt(t))}It.getBitsLength=function(t){return 8*t},It.prototype.getLength=function(){return this.data.length},It.prototype.getBitsLength=function(){return It.getBitsLength(this.data.length)},It.prototype.write=function(t){for(let e=0,n=this.data.length;e<n;e++)t.put(this.data[e],8)};var Mt=It;const Pt=st,Nt=U;function Rt(t){this.mode=Pt.KANJI,this.data=t}Rt.getBitsLength=function(t){return 13*t},Rt.prototype.getLength=function(){return this.data.length},Rt.prototype.getBitsLength=function(){return Rt.getBitsLength(this.data.length)},Rt.prototype.write=function(t){let e;for(e=0;e<this.data.length;e++){let n=Nt.toSJIS(this.data[e]);if(n>=33088&&n<=40956)n-=33088;else{if(!(n>=57408&&n<=60351))throw new Error("Invalid SJIS character: "+this.data[e]+"\nMake sure your charset is UTF-8");n-=49472}n=192*(n>>>8&255)+(255&n),t.put(n,13)}};var Lt,St=Rt,_t={exports:{}};_t.exports=Lt={single_source_shortest_paths:function(t,e,n){var r={},o={};o[e]=0;var i,s,a,l,u,c,d,f=Lt.PriorityQueue.make();for(f.push(e,0);!f.empty();)for(a in s=(i=f.pop()).value,l=i.cost,u=t[s]||{})u.hasOwnProperty(a)&&(c=l+u[a],d=o[a],(void 0===o[a]||d>c)&&(o[a]=c,f.push(a,c),r[a]=s));if(void 0!==n&&void 0===o[n]){var h=["Could not find a path from ",e," to ",n,"."].join("");throw new Error(h)}return r},extract_shortest_path_from_predecessor_list:function(t,e){for(var n=[],r=e;r;)n.push(r),t[r],r=t[r];return n.reverse(),n},find_path:function(t,e,n){var r=Lt.single_source_shortest_paths(t,e,n);return Lt.extract_shortest_path_from_predecessor_list(r,n)},PriorityQueue:{make:function(t){var e,n=Lt.PriorityQueue,r={};for(e in t=t||{},n)n.hasOwnProperty(e)&&(r[e]=n[e]);return r.queue=[],r.sorter=t.sorter||n.default_sorter,r},default_sorter:function(t,e){return t.cost-e.cost},push:function(t,e){var n={value:t,cost:e};this.queue.push(n),this.queue.sort(this.sorter)},pop:function(){return this.queue.shift()},empty:function(){return 0===this.queue.length}}},function(t){const e=st,n=Et,r=At,o=Mt,i=St,s=lt,a=U,l=_t.exports;function u(t){return unescape(encodeURIComponent(t)).length}function c(t,e,n){const r=[];let o;for(;null!==(o=t.exec(n));)r.push({data:o[0],index:o.index,mode:e,length:o[0].length});return r}function d(t){const n=c(s.NUMERIC,e.NUMERIC,t),r=c(s.ALPHANUMERIC,e.ALPHANUMERIC,t);let o,i;a.isKanjiModeEnabled()?(o=c(s.BYTE,e.BYTE,t),i=c(s.KANJI,e.KANJI,t)):(o=c(s.BYTE_KANJI,e.BYTE,t),i=[]);return n.concat(r,o,i).sort((function(t,e){return t.index-e.index})).map((function(t){return{data:t.data,mode:t.mode,length:t.length}}))}function f(t,s){switch(s){case e.NUMERIC:return n.getBitsLength(t);case e.ALPHANUMERIC:return r.getBitsLength(t);case e.KANJI:return i.getBitsLength(t);case e.BYTE:return o.getBitsLength(t)}}function h(t,s){let l;const u=e.getBestModeForData(t);if(l=e.from(s,u),l!==e.BYTE&&l.bit<u.bit)throw new Error('"'+t+'" cannot be encoded with mode '+e.toString(l)+".\n Suggested mode is: "+e.toString(u));switch(l!==e.KANJI||a.isKanjiModeEnabled()||(l=e.BYTE),l){case e.NUMERIC:return new n(t);case e.ALPHANUMERIC:return new r(t);case e.KANJI:return new i(t);case e.BYTE:return new o(t)}}t.fromArray=function(t){return t.reduce((function(t,e){return"string"==typeof e?t.push(h(e,null)):e.data&&t.push(h(e.data,e.mode)),t}),[])},t.fromString=function(n,r){const o=function(t){const n=[];for(let r=0;r<t.length;r++){const o=t[r];switch(o.mode){case e.NUMERIC:n.push([o,{data:o.data,mode:e.ALPHANUMERIC,length:o.length},{data:o.data,mode:e.BYTE,length:o.length}]);break;case e.ALPHANUMERIC:n.push([o,{data:o.data,mode:e.BYTE,length:o.length}]);break;case e.KANJI:n.push([o,{data:o.data,mode:e.BYTE,length:u(o.data)}]);break;case e.BYTE:n.push([{data:o.data,mode:e.BYTE,length:u(o.data)}])}}return n}(d(n,a.isKanjiModeEnabled())),i=function(t,n){const r={},o={start:{}};let i=["start"];for(let s=0;s<t.length;s++){const a=t[s],l=[];for(let t=0;t<a.length;t++){const u=a[t],c=""+s+t;l.push(c),r[c]={node:u,lastCount:0},o[c]={};for(let t=0;t<i.length;t++){const s=i[t];r[s]&&r[s].node.mode===u.mode?(o[s][c]=f(r[s].lastCount+u.length,u.mode)-f(r[s].lastCount,u.mode),r[s].lastCount+=u.length):(r[s]&&(r[s].lastCount=u.length),o[s][c]=f(u.length,u.mode)+4+e.getCharCountIndicator(u.mode,n))}}i=l}for(let e=0;e<i.length;e++)o[i[e]].end=0;return{map:o,table:r}}(o,r),s=l.find_path(i.map,"start","end"),c=[];for(let t=1;t<s.length-1;t++)c.push(i.table[s[t]].node);return t.fromArray(function(t){return t.reduce((function(t,e){const n=t.length-1>=0?t[t.length-1]:null;return n&&n.mode===e.mode?(t[t.length-1].data+=e.data,t):(t.push(e),t)}),[])}(c))},t.rawSplit=function(e){return t.fromArray(d(e,a.isKanjiModeEnabled()))}}(wt);const Ut=U,Dt=j,kt=F,zt=J,jt=K,qt=Y,Ft=Q,Ht=V,Jt=ot,Kt=it,Yt=gt,Ot=st,Qt=wt;function Vt(t,e,n){const r=t.size,o=Yt.getEncodedBits(e,n);let i,s;for(i=0;i<15;i++)s=1==(o>>i&1),i<6?t.set(i,8,s,!0):i<8?t.set(i+1,8,s,!0):t.set(r-15+i,8,s,!0),i<8?t.set(8,r-i-1,s,!0):i<9?t.set(8,15-i-1+1,s,!0):t.set(8,15-i-1,s,!0);t.set(r-8,8,1,!0)}function $t(t,e,n){const r=new kt;n.forEach((function(e){r.put(e.mode.bit,4),r.put(e.getLength(),Ot.getCharCountIndicator(e.mode,t)),e.write(r)}));const o=8*(Ut.getSymbolTotalCodewords(t)-Ht.getTotalCodewordsCount(t,e));for(r.getLengthInBits()+4<=o&&r.put(0,4);r.getLengthInBits()%8!=0;)r.putBit(0);const i=(o-r.getLengthInBits())/8;for(let s=0;s<i;s++)r.put(s%2?17:236,8);return function(t,e,n){const r=Ut.getSymbolTotalCodewords(e),o=Ht.getTotalCodewordsCount(e,n),i=r-o,s=Ht.getBlocksCount(e,n),a=s-r%s,l=Math.floor(r/s),u=Math.floor(i/s),c=u+1,d=l-u,f=new Jt(d);let h=0;const g=new Array(s),p=new Array(s);let m=0;const w=new Uint8Array(t.buffer);for(let x=0;x<s;x++){const t=x<a?u:c;g[x]=w.slice(h,h+t),p[x]=f.encode(g[x]),h+=t,m=Math.max(m,t)}const v=new Uint8Array(r);let y,E,b=0;for(y=0;y<m;y++)for(E=0;E<s;E++)y<g[E].length&&(v[b++]=g[E][y]);for(y=0;y<d;y++)for(E=0;E<s;E++)v[b++]=p[E][y];return v}(r,t,e)}function Zt(t,e,n,r){let o;if(Array.isArray(t))o=Qt.fromArray(t);else{if("string"!=typeof t)throw new Error("Invalid data");{let r=e;if(!r){const e=Qt.rawSplit(t);r=Kt.getBestVersionForData(e,n)}o=Qt.fromString(t,r||40)}}const i=Kt.getBestVersionForData(o,n);if(!i)throw new Error("The amount of data is too big to be stored in a QR Code");if(e){if(e<i)throw new Error("\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: "+i+".\n")}else e=i;const s=$t(e,n,o),a=Ut.getSymbolSize(e),l=new zt(a);return function(t,e){const n=t.size,r=qt.getPositions(e);for(let o=0;o<r.length;o++){const e=r[o][0],i=r[o][1];for(let r=-1;r<=7;r++)if(!(e+r<=-1||n<=e+r))for(let o=-1;o<=7;o++)i+o<=-1||n<=i+o||(r>=0&&r<=6&&(0===o||6===o)||o>=0&&o<=6&&(0===r||6===r)||r>=2&&r<=4&&o>=2&&o<=4?t.set(e+r,i+o,!0,!0):t.set(e+r,i+o,!1,!0))}}(l,e),function(t){const e=t.size;for(let n=8;n<e-8;n++){const e=n%2==0;t.set(n,6,e,!0),t.set(6,n,e,!0)}}(l),function(t,e){const n=jt.getPositions(e);for(let r=0;r<n.length;r++){const e=n[r][0],o=n[r][1];for(let n=-2;n<=2;n++)for(let r=-2;r<=2;r++)-2===n||2===n||-2===r||2===r||0===n&&0===r?t.set(e+n,o+r,!0,!0):t.set(e+n,o+r,!1,!0)}}(l,e),Vt(l,n,0),e>=7&&function(t,e){const n=t.size,r=Kt.getEncodedBits(e);let o,i,s;for(let a=0;a<18;a++)o=Math.floor(a/3),i=a%3+n-8-3,s=1==(r>>a&1),t.set(o,i,s,!0),t.set(i,o,s,!0)}(l,e),function(t,e){const n=t.size;let r=-1,o=n-1,i=7,s=0;for(let a=n-1;a>0;a-=2)for(6===a&&a--;;){for(let n=0;n<2;n++)if(!t.isReserved(o,a-n)){let r=!1;s<e.length&&(r=1==(e[s]>>>i&1)),t.set(o,a-n,r),i--,-1===i&&(s++,i=7)}if(o+=r,o<0||n<=o){o-=r,r=-r;break}}}(l,s),isNaN(r)&&(r=Ft.getBestMask(l,Vt.bind(null,l,n))),Ft.applyMask(r,l),Vt(l,n,r),{modules:l,version:e,errorCorrectionLevel:n,maskPattern:r,segments:o}}_.create=function(t,e){if(void 0===t||""===t)throw new Error("No input text");let n,r,o=Dt.M;return void 0!==e&&(o=Dt.from(e.errorCorrectionLevel,Dt.M),n=Kt.from(e.version),r=Ft.from(e.maskPattern),e.toSJISFunc&&Ut.setToSJISFunction(e.toSJISFunc)),Zt(t,n,o,r)};var Wt={},Xt={};!function(t){function e(t){if("number"==typeof t&&(t=t.toString()),"string"!=typeof t)throw new Error("Color should be defined as hex string");let e=t.slice().replace("#","").split("");if(e.length<3||5===e.length||e.length>8)throw new Error("Invalid hex color: "+t);3!==e.length&&4!==e.length||(e=Array.prototype.concat.apply([],e.map((function(t){return[t,t]})))),6===e.length&&e.push("F","F");const n=parseInt(e.join(""),16);return{r:n>>24&255,g:n>>16&255,b:n>>8&255,a:255&n,hex:"#"+e.slice(0,6).join("")}}t.getOptions=function(t){t||(t={}),t.color||(t.color={});const n=void 0===t.margin||null===t.margin||t.margin<0?4:t.margin,r=t.width&&t.width>=21?t.width:void 0,o=t.scale||4;return{width:r,scale:r?4:o,margin:n,color:{dark:e(t.color.dark||"#000000ff"),light:e(t.color.light||"#ffffffff")},type:t.type,rendererOpts:t.rendererOpts||{}}},t.getScale=function(t,e){return e.width&&e.width>=t+2*e.margin?e.width/(t+2*e.margin):e.scale},t.getImageWidth=function(e,n){const r=t.getScale(e,n);return Math.floor((e+2*n.margin)*r)},t.qrToImageData=function(e,n,r){const o=n.modules.size,i=n.modules.data,s=t.getScale(o,r),a=Math.floor((o+2*r.margin)*s),l=r.margin*s,u=[r.color.light,r.color.dark];for(let t=0;t<a;t++)for(let n=0;n<a;n++){let c=4*(t*a+n),d=r.color.light;if(t>=l&&n>=l&&t<a-l&&n<a-l){d=u[i[Math.floor((t-l)/s)*o+Math.floor((n-l)/s)]?1:0]}e[c++]=d.r,e[c++]=d.g,e[c++]=d.b,e[c]=d.a}}}(Xt),function(t){const e=Xt;t.render=function(t,n,r){let o=r,i=n;void 0!==o||n&&n.getContext||(o=n,n=void 0),n||(i=function(){try{return document.createElement("canvas")}catch(t){throw new Error("You need to specify a canvas element")}}()),o=e.getOptions(o);const s=e.getImageWidth(t.modules.size,o),a=i.getContext("2d"),l=a.createImageData(s,s);return e.qrToImageData(l.data,t,o),function(t,e,n){t.clearRect(0,0,e.width,e.height),e.style||(e.style={}),e.height=n,e.width=n,e.style.height=n+"px",e.style.width=n+"px"}(a,i,s),a.putImageData(l,0,0),i},t.renderToDataURL=function(e,n,r){let o=r;void 0!==o||n&&n.getContext||(o=n,n=void 0),o||(o={});const i=t.render(e,n,o),s=o.type||"image/png",a=o.rendererOpts||{};return i.toDataURL(s,a.quality)}}(Wt);var Gt={};const te=Xt;function ee(t,e){const n=t.a/255,r=e+'="'+t.hex+'"';return n<1?r+" "+e+'-opacity="'+n.toFixed(2).slice(1)+'"':r}function ne(t,e,n){let r=t+e;return void 0!==n&&(r+=" "+n),r}Gt.render=function(t,e,n){const r=te.getOptions(e),o=t.modules.size,i=t.modules.data,s=o+2*r.margin,a=r.color.light.a?"<path "+ee(r.color.light,"fill")+' d="M0 0h'+s+"v"+s+'H0z"/>':"",l="<path "+ee(r.color.dark,"stroke")+' d="'+function(t,e,n){let r="",o=0,i=!1,s=0;for(let a=0;a<t.length;a++){const l=Math.floor(a%e),u=Math.floor(a/e);l||i||(i=!0),t[a]?(s++,a>0&&l>0&&t[a-1]||(r+=i?ne("M",l+n,.5+u+n):ne("m",o,0),o=0,i=!1),l+1<e&&t[a+1]||(r+=ne("h",s),s=0)):o++}return r}(i,o,r.margin)+'"/>',u='viewBox="0 0 '+s+" "+s+'"',c='<svg xmlns="http://www.w3.org/2000/svg" '+(r.width?'width="'+r.width+'" height="'+r.width+'" ':"")+u+' shape-rendering="crispEdges">'+a+l+"</svg>\n";return"function"==typeof n&&n(null,c),c};const re=function(){return"function"==typeof Promise&&Promise.prototype&&Promise.prototype.then},oe=_,ie=Wt,se=Gt;function ae(t,e,n,r,o){const i=[].slice.call(arguments,1),s=i.length,a="function"==typeof i[s-1];if(!a&&!re())throw new Error("Callback required as last argument");if(!a){if(s<1)throw new Error("Too few arguments provided");return 1===s?(n=e,e=r=void 0):2!==s||e.getContext||(r=n,n=e,e=void 0),new Promise((function(o,i){try{const i=oe.create(n,r);o(t(i,e,r))}catch(s){i(s)}}))}if(s<2)throw new Error("Too few arguments provided");2===s?(o=n,n=e,e=r=void 0):3===s&&(e.getContext&&void 0===o?(o=r,r=void 0):(o=r,r=n,n=e,e=void 0));try{const i=oe.create(n,r);o(null,t(i,e,r))}catch(l){o(l)}}S.create=oe.create,S.toCanvas=ae.bind(null,ie.render),S.toDataURL=ae.bind(null,ie.renderToDataURL),S.toString=ae.bind(null,(function(t,e,n){return se.render(t,n)}));const le={class:"absolute top-[50%] left-[50%] font-bold"};var ue=I(t({__name:"Qrcode",props:{tag:e.string.validate((t=>["canvas","img"].includes(t))).def("canvas"),text:{type:[String,Array],default:null},options:{type:Object,default:()=>({})},width:e.number.def(200),logo:{type:[String,Object],default:""},disabled:e.bool.def(!1),disabledText:e.string.def("")},emits:["done","click","disabled-click"],setup(t,{emit:e}){const C=t,{getPrefixCls:A}=y(),B=A("qrcode"),{toCanvas:T,toDataURL:I}=S,M=n(!0),P=n(null),N=r((()=>String(C.text))),R=r((()=>({width:C.width+"px",height:C.width+"px"})));o((()=>N.value),(t=>{t&&(async()=>{await E();const t=b(C.options||{});if("canvas"===C.tag){t.errorCorrectionLevel=t.errorCorrectionLevel||U(h(N));const n=await _(h(N),t);t.scale=0===C.width?void 0:C.width/n*4;const r=await T(h(P),h(N),t);if(C.logo){const t=await L(r);e("done",t),M.value=!1}else e("done",r.toDataURL()),M.value=!1}else{const n=await I(N.value,{errorCorrectionLevel:"H",width:C.width,...t});h(P).src=n,e("done",n),M.value=!1}})()}),{deep:!0,immediate:!0});const L=t=>{const e=t.width,n=Object.assign({logoSize:.15,bgColor:"#ffffff",borderSize:.05,crossOrigin:"anonymous",borderRadius:8,logoRadius:0},x(C.logo)?{}:C.logo),{logoSize:r=.15,bgColor:o="#ffffff",borderSize:i=.05,crossOrigin:s="anonymous",borderRadius:a=8,logoRadius:l=0}=n,u=x(C.logo)?C.logo:C.logo.src,c=e*r,d=e*(1-r)/2,f=e*(r+i),h=e*(1-r-i)/2,g=t.getContext("2d");if(!g)return;D(g)(h,h,f,f,a),g.fillStyle=o,g.fill();const p=new Image;(s||l)&&p.setAttribute("crossOrigin",s),p.src=u;return new Promise((e=>{p.onload=()=>{var n;l?(t=>{const e=document.createElement("canvas");e.width=d+c,e.height=d+c;const n=e.getContext("2d");if(!n||!g)return;if(n.drawImage(t,d,d,c,c),D(g)(d,d,c,c,l),!g)return;const r=g.createPattern(e,"no-repeat");r&&(g.fillStyle=r,g.fill())})(p):(n=p,g.drawImage(n,d,d,c,c)),e(t.toDataURL())}}))},_=async(t,e)=>{const n=document.createElement("canvas");return await T(n,t,e),n.width},U=t=>t.length>36?"M":t.length>16?"Q":"H",D=t=>(e,n,r,o,i)=>{const s=Math.min(r,o);return i>s/2&&(i=s/2),t.beginPath(),t.moveTo(e+i,n),t.arcTo(e+r,n,e+r,n+o,i),t.arcTo(e+r,n+o,e,n+o,i),t.arcTo(e,n+o,e,n,i),t.arcTo(e,n,e+r,n,i),t.closePath(),t},k=()=>{e("click")},z=()=>{e("disabled-click")};return(e,n)=>{const r=i("Icon"),o=s("loading");return a((l(),u("div",{class:f([h(B),"relative inline-block"]),style:v(h(R))},[(l(),c(d(t.tag),{ref_key:"wrapRef",ref:P,onClick:k},null,512)),t.disabled?(l(),u("div",{key:0,class:f([`${h(B)}--disabled`,"absolute top-0 left-0 flex w-full h-full items-center justify-center"]),onClick:z},[g("div",le,[p(r,{icon:"ep:refresh-right",size:30,color:"var(--el-color-primary)"}),g("div",null,m(t.disabledText),1)])],2)):w("v-if",!0)],6)),[[o,M.value]])}}}),[["__scopeId","data-v-02facc7f"]]);const ce={class:"font-bold"},de={class:"font-bold"},fe={class:"font-bold"},he={class:"font-bold"},ge={class:"font-bold"},pe={class:"font-bold"},me={class:"font-bold"},we={class:"font-bold"},ve={class:"font-bold"},ye=t({__name:"Qrcode",setup(t){const e=C(),{t:o}=A(),i=r((()=>e.getTitle)),s=n("");setTimeout((()=>{s.value=h(i)}),3e3);const a=()=>{T.info(o("qrcodeDemo.click"))},u=()=>{T.info(o("qrcodeDemo.invalid"))};return(t,e)=>(l(),c(h(M),{title:h(o)("qrcodeDemo.qrcode"),message:h(o)("qrcodeDemo.qrcodeDes")},{default:B((()=>[p(h(N),{gutter:20,justify:"space-between"},{default:B((()=>[p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",ce,m(h(o)("qrcodeDemo.basicUsage")),1),p(h(ue),{text:h(i)},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",de,m(h(o)("qrcodeDemo.imgTag")),1),p(h(ue),{text:h(i),tag:"img"},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",fe,m(h(o)("qrcodeDemo.style")),1),p(h(ue),{text:h(i),options:{color:{dark:"#55D187",light:"#2d8cf0"}}},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",he,m(h(o)("qrcodeDemo.click")),1),p(h(ue),{text:h(i),onClick:a},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",ge,m(h(o)("qrcodeDemo.asynchronousContent")),1),p(h(ue),{text:s.value},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",pe,m(h(o)("qrcodeDemo.invalid")),1),p(h(ue),{text:h(i),disabled:"",onDisabledClick:u},null,8,["text"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",me,m(h(o)("qrcodeDemo.logoConfig")),1),p(h(ue),{text:h(i),logo:h(L)},null,8,["text","logo"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",we,m(h(o)("qrcodeDemo.logoStyle")),1),p(h(ue),{text:h(i),logo:{src:h(L),logoSize:.2,borderSize:.05,borderRadius:50,bgColor:"blue"}},null,8,["text","logo"])])),_:1})])),_:1}),p(h(P),{xl:6,lg:6,md:12,sm:24,xs:24},{default:B((()=>[p(h(R),{shadow:"hover",class:"mb-10px text-center"},{default:B((()=>[g("div",ve,m(h(o)("qrcodeDemo.size")),1),p(h(ue),{text:h(i),width:100},null,8,["text"])])),_:1})])),_:1})])),_:1})])),_:1},8,["title","message"]))}});export{ye as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXJjb2RlLjczOWRjMDk5LmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS91dGlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK3FyY29kZUAxLjUuMC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1idWZmZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWxldmVsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYml0LW1hdHJpeC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK3FyY29kZUAxLjUuMC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FsaWdubWVudC1wYXR0ZXJuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZmluZGVyLXBhdHRlcm4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9tYXNrLXBhdHRlcm4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWNvZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9nYWxvaXMtZmllbGQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9wb2x5bm9taWFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVlZC1zb2xvbW9uLWVuY29kZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS92ZXJzaW9uLWNoZWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVnZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9tb2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK3FyY29kZUAxLjUuMC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Zvcm1hdC1pbmZvLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvbnVtZXJpYy1kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxwaGFudW1lcmljLWRhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9ieXRlLWRhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbmNvZGUtdXRmOEAxLjAuMy9ub2RlX21vZHVsZXMvZW5jb2RlLXV0ZjgvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9rYW5qaS1kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZGlqa3N0cmFqc0AxLjAuMi9ub2RlX21vZHVsZXMvZGlqa3N0cmFqcy9kaWprc3RyYS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK3FyY29kZUAxLjUuMC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3NlZ21lbnRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcXJjb2RlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL2NhbnZhcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK3FyY29kZUAxLjUuMC9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmctdGFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rcXJjb2RlQDEuNS4wL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2Jyb3dzZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStxcmNvZGVAMS41LjAvbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY2FuLXByb21pc2UuanMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9RcmNvZGUvc3JjL1FyY29kZS52dWUiLCIuLi8uLi9zcmMvdmlld3MvQ29tcG9uZW50cy9RcmNvZGUudnVlIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0b1NKSVNGdW5jdGlvblxuY29uc3QgQ09ERVdPUkRTX0NPVU5UID0gW1xuICAwLCAvLyBOb3QgdXNlZFxuICAyNiwgNDQsIDcwLCAxMDAsIDEzNCwgMTcyLCAxOTYsIDI0MiwgMjkyLCAzNDYsXG4gIDQwNCwgNDY2LCA1MzIsIDU4MSwgNjU1LCA3MzMsIDgxNSwgOTAxLCA5OTEsIDEwODUsXG4gIDExNTYsIDEyNTgsIDEzNjQsIDE0NzQsIDE1ODgsIDE3MDYsIDE4MjgsIDE5MjEsIDIwNTEsIDIxODUsXG4gIDIzMjMsIDI0NjUsIDI2MTEsIDI3NjEsIDI4NzYsIDMwMzQsIDMxOTYsIDMzNjIsIDM1MzIsIDM3MDZcbl1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBRUiBDb2RlIHNpemUgZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBzaXplIG9mIFFSIGNvZGVcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xTaXplID0gZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZSAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJylcbiAgaWYgKHZlcnNpb24gPCAxIHx8IHZlcnNpb24gPiA0MCkgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBzaG91bGQgYmUgaW4gcmFuZ2UgZnJvbSAxIHRvIDQwJylcbiAgcmV0dXJuIHZlcnNpb24gKiA0ICsgMTdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgY29kZXdvcmRzIHVzZWQgdG8gc3RvcmUgZGF0YSBhbmQgRUMgaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIERhdGEgbGVuZ3RoIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xUb3RhbENvZGV3b3JkcyA9IGZ1bmN0aW9uIGdldFN5bWJvbFRvdGFsQ29kZXdvcmRzICh2ZXJzaW9uKSB7XG4gIHJldHVybiBDT0RFV09SRFNfQ09VTlRbdmVyc2lvbl1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIEJvc2UtQ2hhdWRodXJpLUhvY3F1ZW5naGVtXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkYXRhIFZhbHVlIHRvIGVuY29kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIEVuY29kZWQgdmFsdWVcbiAqL1xuZXhwb3J0cy5nZXRCQ0hEaWdpdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBkaWdpdCA9IDBcblxuICB3aGlsZSAoZGF0YSAhPT0gMCkge1xuICAgIGRpZ2l0KytcbiAgICBkYXRhID4+Pj0gMVxuICB9XG5cbiAgcmV0dXJuIGRpZ2l0XG59XG5cbmV4cG9ydHMuc2V0VG9TSklTRnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRUb1NKSVNGdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widG9TSklTRnVuY1wiIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLicpXG4gIH1cblxuICB0b1NKSVNGdW5jdGlvbiA9IGZcbn1cblxuZXhwb3J0cy5pc0thbmppTW9kZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgdG9TSklTRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnXG59XG5cbmV4cG9ydHMudG9TSklTID0gZnVuY3Rpb24gdG9TSklTIChrYW5qaSkge1xuICByZXR1cm4gdG9TSklTRnVuY3Rpb24oa2FuamkpXG59XG4iLCJmdW5jdGlvbiBCaXRCdWZmZXIgKCkge1xuICB0aGlzLmJ1ZmZlciA9IFtdXG4gIHRoaXMubGVuZ3RoID0gMFxufVxuXG5CaXRCdWZmZXIucHJvdG90eXBlID0ge1xuXG4gIGdldDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgY29uc3QgYnVmSW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gOClcbiAgICByZXR1cm4gKCh0aGlzLmJ1ZmZlcltidWZJbmRleF0gPj4+ICg3IC0gaW5kZXggJSA4KSkgJiAxKSA9PT0gMVxuICB9LFxuXG4gIHB1dDogZnVuY3Rpb24gKG51bSwgbGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wdXRCaXQoKChudW0gPj4+IChsZW5ndGggLSBpIC0gMSkpICYgMSkgPT09IDEpXG4gICAgfVxuICB9LFxuXG4gIGdldExlbmd0aEluQml0czogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aFxuICB9LFxuXG4gIHB1dEJpdDogZnVuY3Rpb24gKGJpdCkge1xuICAgIGNvbnN0IGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCgwKVxuICAgIH1cblxuICAgIGlmIChiaXQpIHtcbiAgICAgIHRoaXMuYnVmZmVyW2J1ZkluZGV4XSB8PSAoMHg4MCA+Pj4gKHRoaXMubGVuZ3RoICUgOCkpXG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGgrK1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0QnVmZmVyXG4iLCJleHBvcnRzLkwgPSB7IGJpdDogMSB9XG5leHBvcnRzLk0gPSB7IGJpdDogMCB9XG5leHBvcnRzLlEgPSB7IGJpdDogMyB9XG5leHBvcnRzLkggPSB7IGJpdDogMiB9XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtIGlzIG5vdCBhIHN0cmluZycpXG4gIH1cblxuICBjb25zdCBsY1N0ciA9IHN0cmluZy50b0xvd2VyQ2FzZSgpXG5cbiAgc3dpdGNoIChsY1N0cikge1xuICAgIGNhc2UgJ2wnOlxuICAgIGNhc2UgJ2xvdyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5MXG5cbiAgICBjYXNlICdtJzpcbiAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTVxuXG4gICAgY2FzZSAncSc6XG4gICAgY2FzZSAncXVhcnRpbGUnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuUVxuXG4gICAgY2FzZSAnaCc6XG4gICAgY2FzZSAnaGlnaCc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5IXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIEVDIExldmVsOiAnICsgc3RyaW5nKVxuICB9XG59XG5cbmV4cG9ydHMuaXNWYWxpZCA9IGZ1bmN0aW9uIGlzVmFsaWQgKGxldmVsKSB7XG4gIHJldHVybiBsZXZlbCAmJiB0eXBlb2YgbGV2ZWwuYml0ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIGxldmVsLmJpdCA+PSAwICYmIGxldmVsLmJpdCA8IDRcbn1cblxuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoZXhwb3J0cy5pc1ZhbGlkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgfVxufVxuIiwiLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gaGFuZGxlIFFSIENvZGUgc3ltYm9sIG1vZHVsZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZSBTeW1ib2wgc2l6ZVxuICovXG5mdW5jdGlvbiBCaXRNYXRyaXggKHNpemUpIHtcbiAgaWYgKCFzaXplIHx8IHNpemUgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCaXRNYXRyaXggc2l6ZSBtdXN0IGJlIGRlZmluZWQgYW5kIGdyZWF0ZXIgdGhhbiAwJylcbiAgfVxuXG4gIHRoaXMuc2l6ZSA9IHNpemVcbiAgdGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSAqIHNpemUpXG4gIHRoaXMucmVzZXJ2ZWRCaXQgPSBuZXcgVWludDhBcnJheShzaXplICogc2l6ZSlcbn1cblxuLyoqXG4gKiBTZXQgYml0IHZhbHVlIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICogSWYgcmVzZXJ2ZWQgZmxhZyBpcyBzZXQsIHRoaXMgYml0IHdpbGwgYmUgaWdub3JlZCBkdXJpbmcgbWFza2luZyBwcm9jZXNzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9ICByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSAgY29sXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHJlc2VydmVkXG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHJvdywgY29sLCB2YWx1ZSwgcmVzZXJ2ZWQpIHtcbiAgY29uc3QgaW5kZXggPSByb3cgKiB0aGlzLnNpemUgKyBjb2xcbiAgdGhpcy5kYXRhW2luZGV4XSA9IHZhbHVlXG4gIGlmIChyZXNlcnZlZCkgdGhpcy5yZXNlcnZlZEJpdFtpbmRleF0gPSB0cnVlXG59XG5cbi8qKlxuICogUmV0dXJucyBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG4vKipcbiAqIEFwcGxpZXMgeG9yIG9wZXJhdG9yIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICogKHVzZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2VzcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlKSB7XG4gIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdIF49IHZhbHVlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYml0IGF0IHNwZWNpZmllZCBsb2NhdGlvbiBpcyByZXNlcnZlZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMucmVzZXJ2ZWRCaXRbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdE1hdHJpeFxuIiwiLyoqXG4gKiBBbGlnbm1lbnQgcGF0dGVybiBhcmUgZml4ZWQgcmVmZXJlbmNlIHBhdHRlcm4gaW4gZGVmaW5lZCBwb3NpdGlvbnNcbiAqIGluIGEgbWF0cml4IHN5bWJvbG9neSwgd2hpY2ggZW5hYmxlcyB0aGUgZGVjb2RlIHNvZnR3YXJlIHRvIHJlLXN5bmNocm9uaXNlXG4gKiB0aGUgY29vcmRpbmF0ZSBtYXBwaW5nIG9mIHRoZSBpbWFnZSBtb2R1bGVzIGluIHRoZSBldmVudCBvZiBtb2RlcmF0ZSBhbW91bnRzXG4gKiBvZiBkaXN0b3J0aW9uIG9mIHRoZSBpbWFnZS5cbiAqXG4gKiBBbGlnbm1lbnQgcGF0dGVybnMgYXJlIHByZXNlbnQgb25seSBpbiBRUiBDb2RlIHN5bWJvbHMgb2YgdmVyc2lvbiAyIG9yIGxhcmdlclxuICogYW5kIHRoZWlyIG51bWJlciBkZXBlbmRzIG9uIHRoZSBzeW1ib2wgdmVyc2lvbi5cbiAqL1xuXG5jb25zdCBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJvdy9jb2x1bW4gY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBtb2R1bGUgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVyblxuICogZm9yIHRoZSBzcGVjaWZpZWQgUVIgQ29kZSB2ZXJzaW9uLlxuICpcbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMgYXJlIHBvc2l0aW9uZWQgc3ltbWV0cmljYWxseSBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgZGlhZ29uYWxcbiAqIHJ1bm5pbmcgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBzeW1ib2wgdG8gdGhlIGJvdHRvbSByaWdodCBjb3JuZXIuXG4gKlxuICogU2luY2UgcG9zaXRpb25zIGFyZSBzaW1tZXRyaWNhbCBvbmx5IGhhbGYgb2YgdGhlIGNvb3JkaW5hdGVzIGFyZSByZXR1cm5lZC5cbiAqIEVhY2ggaXRlbSBvZiB0aGUgYXJyYXkgd2lsbCByZXByZXNlbnQgaW4gdHVybiB0aGUgeCBhbmQgeSBjb29yZGluYXRlLlxuICogQHNlZSB7QGxpbmsgZ2V0UG9zaXRpb25zfVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlXG4gKi9cbmV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzID0gZnVuY3Rpb24gZ2V0Um93Q29sQ29vcmRzICh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxKSByZXR1cm4gW11cblxuICBjb25zdCBwb3NDb3VudCA9IE1hdGguZmxvb3IodmVyc2lvbiAvIDcpICsgMlxuICBjb25zdCBzaXplID0gZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICBjb25zdCBpbnRlcnZhbHMgPSBzaXplID09PSAxNDUgPyAyNiA6IE1hdGguY2VpbCgoc2l6ZSAtIDEzKSAvICgyICogcG9zQ291bnQgLSAyKSkgKiAyXG4gIGNvbnN0IHBvc2l0aW9ucyA9IFtzaXplIC0gN10gLy8gTGFzdCBjb29yZCBpcyBhbHdheXMgKHNpemUgLSA3KVxuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcG9zQ291bnQgLSAxOyBpKyspIHtcbiAgICBwb3NpdGlvbnNbaV0gPSBwb3NpdGlvbnNbaSAtIDFdIC0gaW50ZXJ2YWxzXG4gIH1cblxuICBwb3NpdGlvbnMucHVzaCg2KSAvLyBGaXJzdCBjb29yZCBpcyBhbHdheXMgNlxuXG4gIHJldHVybiBwb3NpdGlvbnMucmV2ZXJzZSgpXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVybi5cbiAqIEVhY2ggYXJyYXkncyBlbGVtZW50IHJlcHJlc2VudCB0aGUgY2VudGVyIHBvaW50IG9mIHRoZSBwYXR0ZXJuIGFzICh4LCB5KSBjb29yZGluYXRlc1xuICpcbiAqIENvb3JkaW5hdGVzIGFyZSBjYWxjdWxhdGVkIGV4cGFuZGluZyB0aGUgcm93L2NvbHVtbiBjb29yZGluYXRlcyByZXR1cm5lZCBieSB7QGxpbmsgZ2V0Um93Q29sQ29vcmRzfVxuICogYW5kIGZpbHRlcmluZyBvdXQgdGhlIGl0ZW1zIHRoYXQgb3ZlcmxhcHMgd2l0aCBmaW5kZXIgcGF0dGVyblxuICpcbiAqIEBleGFtcGxlXG4gKiBGb3IgYSBWZXJzaW9uIDcgc3ltYm9sIHtAbGluayBnZXRSb3dDb2xDb29yZHN9IHJldHVybnMgdmFsdWVzIDYsIDIyIGFuZCAzOC5cbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMsIHRoZXJlZm9yZSwgYXJlIHRvIGJlIGNlbnRlcmVkIG9uIChyb3csIGNvbHVtbilcbiAqIHBvc2l0aW9ucyAoNiwyMiksICgyMiw2KSwgKDIyLDIyKSwgKDIyLDM4KSwgKDM4LDIyKSwgKDM4LDM4KS5cbiAqIE5vdGUgdGhhdCB0aGUgY29vcmRpbmF0ZXMgKDYsNiksICg2LDM4KSwgKDM4LDYpIGFyZSBvY2N1cGllZCBieSBmaW5kZXIgcGF0dGVybnNcbiAqIGFuZCBhcmUgbm90IHRoZXJlZm9yZSB1c2VkIGZvciBhbGlnbm1lbnQgcGF0dGVybnMuXG4gKlxuICogbGV0IHBvcyA9IGdldFBvc2l0aW9ucyg3KVxuICogLy8gW1s2LDIyXSwgWzIyLDZdLCBbMjIsMjJdLCBbMjIsMzhdLCBbMzgsMjJdLCBbMzgsMzhdXVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlc1xuICovXG5leHBvcnRzLmdldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyAodmVyc2lvbikge1xuICBjb25zdCBjb29yZHMgPSBbXVxuICBjb25zdCBwb3MgPSBleHBvcnRzLmdldFJvd0NvbENvb3Jkcyh2ZXJzaW9uKVxuICBjb25zdCBwb3NMZW5ndGggPSBwb3MubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3NMZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcG9zTGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIFNraXAgaWYgcG9zaXRpb24gaXMgb2NjdXBpZWQgYnkgZmluZGVyIHBhdHRlcm5zXG4gICAgICBpZiAoKGkgPT09IDAgJiYgaiA9PT0gMCkgfHwgLy8gdG9wLWxlZnRcbiAgICAgICAgICAoaSA9PT0gMCAmJiBqID09PSBwb3NMZW5ndGggLSAxKSB8fCAvLyBib3R0b20tbGVmdFxuICAgICAgICAgIChpID09PSBwb3NMZW5ndGggLSAxICYmIGogPT09IDApKSB7IC8vIHRvcC1yaWdodFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb29yZHMucHVzaChbcG9zW2ldLCBwb3Nbal1dKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb29yZHNcbn1cbiIsImNvbnN0IGdldFN5bWJvbFNpemUgPSByZXF1aXJlKCcuL3V0aWxzJykuZ2V0U3ltYm9sU2l6ZVxuY29uc3QgRklOREVSX1BBVFRFUk5fU0laRSA9IDdcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHBvc2l0aW9ucyBvZiBlYWNoIGZpbmRlciBwYXR0ZXJuLlxuICogRWFjaCBhcnJheSdzIGVsZW1lbnQgcmVwcmVzZW50IHRoZSB0b3AtbGVmdCBwb2ludCBvZiB0aGUgcGF0dGVybiBhcyAoeCwgeSkgY29vcmRpbmF0ZXNcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZXNcbiAqL1xuZXhwb3J0cy5nZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbnMgKHZlcnNpb24pIHtcbiAgY29uc3Qgc2l6ZSA9IGdldFN5bWJvbFNpemUodmVyc2lvbilcblxuICByZXR1cm4gW1xuICAgIC8vIHRvcC1sZWZ0XG4gICAgWzAsIDBdLFxuICAgIC8vIHRvcC1yaWdodFxuICAgIFtzaXplIC0gRklOREVSX1BBVFRFUk5fU0laRSwgMF0sXG4gICAgLy8gYm90dG9tLWxlZnRcbiAgICBbMCwgc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkVdXG4gIF1cbn1cbiIsIi8qKlxuICogRGF0YSBtYXNrIHBhdHRlcm4gcmVmZXJlbmNlXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLlBhdHRlcm5zID0ge1xuICBQQVRURVJOMDAwOiAwLFxuICBQQVRURVJOMDAxOiAxLFxuICBQQVRURVJOMDEwOiAyLFxuICBQQVRURVJOMDExOiAzLFxuICBQQVRURVJOMTAwOiA0LFxuICBQQVRURVJOMTAxOiA1LFxuICBQQVRURVJOMTEwOiA2LFxuICBQQVRURVJOMTExOiA3XG59XG5cbi8qKlxuICogV2VpZ2h0ZWQgcGVuYWx0eSBzY29yZXMgZm9yIHRoZSB1bmRlc2lyYWJsZSBmZWF0dXJlc1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuY29uc3QgUGVuYWx0eVNjb3JlcyA9IHtcbiAgTjE6IDMsXG4gIE4yOiAzLFxuICBOMzogNDAsXG4gIE40OiAxMFxufVxuXG4vKipcbiAqIENoZWNrIGlmIG1hc2sgcGF0dGVybiB2YWx1ZSBpcyB2YWxpZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gIG1hc2sgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICAgIHRydWUgaWYgdmFsaWQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkIChtYXNrKSB7XG4gIHJldHVybiBtYXNrICE9IG51bGwgJiYgbWFzayAhPT0gJycgJiYgIWlzTmFOKG1hc2spICYmIG1hc2sgPj0gMCAmJiBtYXNrIDw9IDdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIG1hc2sgcGF0dGVybiBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgdmFsaWQsIHJldHVybnMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfFN0cmluZ30gdmFsdWUgICAgICAgIE1hc2sgcGF0dGVybiB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgIFZhbGlkIG1hc2sgcGF0dGVybiBvciB1bmRlZmluZWRcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUpIHtcbiAgcmV0dXJuIGV4cG9ydHMuaXNWYWxpZCh2YWx1ZSkgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogdW5kZWZpbmVkXG59XG5cbi8qKlxuKiBGaW5kIGFkamFjZW50IG1vZHVsZXMgaW4gcm93L2NvbHVtbiB3aXRoIHRoZSBzYW1lIGNvbG9yXG4qIGFuZCBhc3NpZ24gYSBwZW5hbHR5IHZhbHVlLlxuKlxuKiBQb2ludHM6IE4xICsgaVxuKiBpIGlzIHRoZSBhbW91bnQgYnkgd2hpY2ggdGhlIG51bWJlciBvZiBhZGphY2VudCBtb2R1bGVzIG9mIHRoZSBzYW1lIGNvbG9yIGV4Y2VlZHMgNVxuKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU4xID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU4xIChkYXRhKSB7XG4gIGNvbnN0IHNpemUgPSBkYXRhLnNpemVcbiAgbGV0IHBvaW50cyA9IDBcbiAgbGV0IHNhbWVDb3VudENvbCA9IDBcbiAgbGV0IHNhbWVDb3VudFJvdyA9IDBcbiAgbGV0IGxhc3RDb2wgPSBudWxsXG4gIGxldCBsYXN0Um93ID0gbnVsbFxuXG4gIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHNpemU7IHJvdysrKSB7XG4gICAgc2FtZUNvdW50Q29sID0gc2FtZUNvdW50Um93ID0gMFxuICAgIGxhc3RDb2wgPSBsYXN0Um93ID0gbnVsbFxuXG4gICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgc2l6ZTsgY29sKyspIHtcbiAgICAgIGxldCBtb2R1bGUgPSBkYXRhLmdldChyb3csIGNvbClcbiAgICAgIGlmIChtb2R1bGUgPT09IGxhc3RDb2wpIHtcbiAgICAgICAgc2FtZUNvdW50Q29sKytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzYW1lQ291bnRDb2wgPj0gNSkgcG9pbnRzICs9IFBlbmFsdHlTY29yZXMuTjEgKyAoc2FtZUNvdW50Q29sIC0gNSlcbiAgICAgICAgbGFzdENvbCA9IG1vZHVsZVxuICAgICAgICBzYW1lQ291bnRDb2wgPSAxXG4gICAgICB9XG5cbiAgICAgIG1vZHVsZSA9IGRhdGEuZ2V0KGNvbCwgcm93KVxuICAgICAgaWYgKG1vZHVsZSA9PT0gbGFzdFJvdykge1xuICAgICAgICBzYW1lQ291bnRSb3crK1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHNhbWVDb3VudFJvdyA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRSb3cgLSA1KVxuICAgICAgICBsYXN0Um93ID0gbW9kdWxlXG4gICAgICAgIHNhbWVDb3VudFJvdyA9IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2FtZUNvdW50Q29sID49IDUpIHBvaW50cyArPSBQZW5hbHR5U2NvcmVzLk4xICsgKHNhbWVDb3VudENvbCAtIDUpXG4gICAgaWYgKHNhbWVDb3VudFJvdyA+PSA1KSBwb2ludHMgKz0gUGVuYWx0eVNjb3Jlcy5OMSArIChzYW1lQ291bnRSb3cgLSA1KVxuICB9XG5cbiAgcmV0dXJuIHBvaW50c1xufVxuXG4vKipcbiAqIEZpbmQgMngyIGJsb2NrcyB3aXRoIHRoZSBzYW1lIGNvbG9yIGFuZCBhc3NpZ24gYSBwZW5hbHR5IHZhbHVlXG4gKlxuICogUG9pbnRzOiBOMiAqIChtIC0gMSkgKiAobiAtIDEpXG4gKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU4yID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU4yIChkYXRhKSB7XG4gIGNvbnN0IHNpemUgPSBkYXRhLnNpemVcbiAgbGV0IHBvaW50cyA9IDBcblxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBzaXplIC0gMTsgcm93KyspIHtcbiAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBzaXplIC0gMTsgY29sKyspIHtcbiAgICAgIGNvbnN0IGxhc3QgPSBkYXRhLmdldChyb3csIGNvbCkgK1xuICAgICAgICBkYXRhLmdldChyb3csIGNvbCArIDEpICtcbiAgICAgICAgZGF0YS5nZXQocm93ICsgMSwgY29sKSArXG4gICAgICAgIGRhdGEuZ2V0KHJvdyArIDEsIGNvbCArIDEpXG5cbiAgICAgIGlmIChsYXN0ID09PSA0IHx8IGxhc3QgPT09IDApIHBvaW50cysrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvaW50cyAqIFBlbmFsdHlTY29yZXMuTjJcbn1cblxuLyoqXG4gKiBGaW5kIDE6MTozOjE6MSByYXRpbyAoZGFyazpsaWdodDpkYXJrOmxpZ2h0OmRhcmspIHBhdHRlcm4gaW4gcm93L2NvbHVtbixcbiAqIHByZWNlZGVkIG9yIGZvbGxvd2VkIGJ5IGxpZ2h0IGFyZWEgNCBtb2R1bGVzIHdpZGVcbiAqXG4gKiBQb2ludHM6IE4zICogbnVtYmVyIG9mIHBhdHRlcm4gZm91bmRcbiAqL1xuZXhwb3J0cy5nZXRQZW5hbHR5TjMgPSBmdW5jdGlvbiBnZXRQZW5hbHR5TjMgKGRhdGEpIHtcbiAgY29uc3Qgc2l6ZSA9IGRhdGEuc2l6ZVxuICBsZXQgcG9pbnRzID0gMFxuICBsZXQgYml0c0NvbCA9IDBcbiAgbGV0IGJpdHNSb3cgPSAwXG5cbiAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgc2l6ZTsgcm93KyspIHtcbiAgICBiaXRzQ29sID0gYml0c1JvdyA9IDBcbiAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBzaXplOyBjb2wrKykge1xuICAgICAgYml0c0NvbCA9ICgoYml0c0NvbCA8PCAxKSAmIDB4N0ZGKSB8IGRhdGEuZ2V0KHJvdywgY29sKVxuICAgICAgaWYgKGNvbCA+PSAxMCAmJiAoYml0c0NvbCA9PT0gMHg1RDAgfHwgYml0c0NvbCA9PT0gMHgwNUQpKSBwb2ludHMrK1xuXG4gICAgICBiaXRzUm93ID0gKChiaXRzUm93IDw8IDEpICYgMHg3RkYpIHwgZGF0YS5nZXQoY29sLCByb3cpXG4gICAgICBpZiAoY29sID49IDEwICYmIChiaXRzUm93ID09PSAweDVEMCB8fCBiaXRzUm93ID09PSAweDA1RCkpIHBvaW50cysrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvaW50cyAqIFBlbmFsdHlTY29yZXMuTjNcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgcHJvcG9ydGlvbiBvZiBkYXJrIG1vZHVsZXMgaW4gZW50aXJlIHN5bWJvbFxuICpcbiAqIFBvaW50czogTjQgKiBrXG4gKlxuICogayBpcyB0aGUgcmF0aW5nIG9mIHRoZSBkZXZpYXRpb24gb2YgdGhlIHByb3BvcnRpb24gb2YgZGFyayBtb2R1bGVzXG4gKiBpbiB0aGUgc3ltYm9sIGZyb20gNTAlIGluIHN0ZXBzIG9mIDUlXG4gKi9cbmV4cG9ydHMuZ2V0UGVuYWx0eU40ID0gZnVuY3Rpb24gZ2V0UGVuYWx0eU40IChkYXRhKSB7XG4gIGxldCBkYXJrQ291bnQgPSAwXG4gIGNvbnN0IG1vZHVsZXNDb3VudCA9IGRhdGEuZGF0YS5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZHVsZXNDb3VudDsgaSsrKSBkYXJrQ291bnQgKz0gZGF0YS5kYXRhW2ldXG5cbiAgY29uc3QgayA9IE1hdGguYWJzKE1hdGguY2VpbCgoZGFya0NvdW50ICogMTAwIC8gbW9kdWxlc0NvdW50KSAvIDUpIC0gMTApXG5cbiAgcmV0dXJuIGsgKiBQZW5hbHR5U2NvcmVzLk40XG59XG5cbi8qKlxuICogUmV0dXJuIG1hc2sgdmFsdWUgYXQgZ2l2ZW4gcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc2tQYXR0ZXJuIFBhdHRlcm4gcmVmZXJlbmNlIHZhbHVlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGkgICAgICAgICAgIFJvd1xuICogQHBhcmFtICB7TnVtYmVyfSBqICAgICAgICAgICBDb2x1bW5cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgICAgTWFzayB2YWx1ZVxuICovXG5mdW5jdGlvbiBnZXRNYXNrQXQgKG1hc2tQYXR0ZXJuLCBpLCBqKSB7XG4gIHN3aXRjaCAobWFza1BhdHRlcm4pIHtcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAwMDogcmV0dXJuIChpICsgaikgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4wMDE6IHJldHVybiBpICUgMiA9PT0gMFxuICAgIGNhc2UgZXhwb3J0cy5QYXR0ZXJucy5QQVRURVJOMDEwOiByZXR1cm4gaiAlIDMgPT09IDBcbiAgICBjYXNlIGV4cG9ydHMuUGF0dGVybnMuUEFUVEVSTjAxMTogcmV0dXJuIChpICsgaikgJSAzID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMDA6IHJldHVybiAoTWF0aC5mbG9vcihpIC8gMikgKyBNYXRoLmZsb29yKGogLyAzKSkgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMDE6IHJldHVybiAoaSAqIGopICUgMiArIChpICogaikgJSAzID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMTA6IHJldHVybiAoKGkgKiBqKSAlIDIgKyAoaSAqIGopICUgMykgJSAyID09PSAwXG4gICAgY2FzZSBleHBvcnRzLlBhdHRlcm5zLlBBVFRFUk4xMTE6IHJldHVybiAoKGkgKiBqKSAlIDMgKyAoaSArIGopICUgMikgJSAyID09PSAwXG5cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2JhZCBtYXNrUGF0dGVybjonICsgbWFza1BhdHRlcm4pXG4gIH1cbn1cblxuLyoqXG4gKiBBcHBseSBhIG1hc2sgcGF0dGVybiB0byBhIEJpdE1hdHJpeFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gICAgcGF0dGVybiBQYXR0ZXJuIHJlZmVyZW5jZSBudW1iZXJcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gZGF0YSAgICBCaXRNYXRyaXggZGF0YVxuICovXG5leHBvcnRzLmFwcGx5TWFzayA9IGZ1bmN0aW9uIGFwcGx5TWFzayAocGF0dGVybiwgZGF0YSkge1xuICBjb25zdCBzaXplID0gZGF0YS5zaXplXG5cbiAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgc2l6ZTsgY29sKyspIHtcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBzaXplOyByb3crKykge1xuICAgICAgaWYgKGRhdGEuaXNSZXNlcnZlZChyb3csIGNvbCkpIGNvbnRpbnVlXG4gICAgICBkYXRhLnhvcihyb3csIGNvbCwgZ2V0TWFza0F0KHBhdHRlcm4sIHJvdywgY29sKSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiZXN0IG1hc2sgcGF0dGVybiBmb3IgZGF0YVxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gZGF0YVxuICogQHJldHVybiB7TnVtYmVyfSBNYXNrIHBhdHRlcm4gcmVmZXJlbmNlIG51bWJlclxuICovXG5leHBvcnRzLmdldEJlc3RNYXNrID0gZnVuY3Rpb24gZ2V0QmVzdE1hc2sgKGRhdGEsIHNldHVwRm9ybWF0RnVuYykge1xuICBjb25zdCBudW1QYXR0ZXJucyA9IE9iamVjdC5rZXlzKGV4cG9ydHMuUGF0dGVybnMpLmxlbmd0aFxuICBsZXQgYmVzdFBhdHRlcm4gPSAwXG4gIGxldCBsb3dlclBlbmFsdHkgPSBJbmZpbml0eVxuXG4gIGZvciAobGV0IHAgPSAwOyBwIDwgbnVtUGF0dGVybnM7IHArKykge1xuICAgIHNldHVwRm9ybWF0RnVuYyhwKVxuICAgIGV4cG9ydHMuYXBwbHlNYXNrKHAsIGRhdGEpXG5cbiAgICAvLyBDYWxjdWxhdGUgcGVuYWx0eVxuICAgIGNvbnN0IHBlbmFsdHkgPVxuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjEoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjIoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjMoZGF0YSkgK1xuICAgICAgZXhwb3J0cy5nZXRQZW5hbHR5TjQoZGF0YSlcblxuICAgIC8vIFVuZG8gcHJldmlvdXNseSBhcHBsaWVkIG1hc2tcbiAgICBleHBvcnRzLmFwcGx5TWFzayhwLCBkYXRhKVxuXG4gICAgaWYgKHBlbmFsdHkgPCBsb3dlclBlbmFsdHkpIHtcbiAgICAgIGxvd2VyUGVuYWx0eSA9IHBlbmFsdHlcbiAgICAgIGJlc3RQYXR0ZXJuID0gcFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBiZXN0UGF0dGVyblxufVxuIiwiY29uc3QgRUNMZXZlbCA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1sZXZlbCcpXHJcblxyXG5jb25zdCBFQ19CTE9DS1NfVEFCTEUgPSBbXHJcbi8vIEwgIE0gIFEgIEhcclxuICAxLCAxLCAxLCAxLFxyXG4gIDEsIDEsIDEsIDEsXHJcbiAgMSwgMSwgMiwgMixcclxuICAxLCAyLCAyLCA0LFxyXG4gIDEsIDIsIDQsIDQsXHJcbiAgMiwgNCwgNCwgNCxcclxuICAyLCA0LCA2LCA1LFxyXG4gIDIsIDQsIDYsIDYsXHJcbiAgMiwgNSwgOCwgOCxcclxuICA0LCA1LCA4LCA4LFxyXG4gIDQsIDUsIDgsIDExLFxyXG4gIDQsIDgsIDEwLCAxMSxcclxuICA0LCA5LCAxMiwgMTYsXHJcbiAgNCwgOSwgMTYsIDE2LFxyXG4gIDYsIDEwLCAxMiwgMTgsXHJcbiAgNiwgMTAsIDE3LCAxNixcclxuICA2LCAxMSwgMTYsIDE5LFxyXG4gIDYsIDEzLCAxOCwgMjEsXHJcbiAgNywgMTQsIDIxLCAyNSxcclxuICA4LCAxNiwgMjAsIDI1LFxyXG4gIDgsIDE3LCAyMywgMjUsXHJcbiAgOSwgMTcsIDIzLCAzNCxcclxuICA5LCAxOCwgMjUsIDMwLFxyXG4gIDEwLCAyMCwgMjcsIDMyLFxyXG4gIDEyLCAyMSwgMjksIDM1LFxyXG4gIDEyLCAyMywgMzQsIDM3LFxyXG4gIDEyLCAyNSwgMzQsIDQwLFxyXG4gIDEzLCAyNiwgMzUsIDQyLFxyXG4gIDE0LCAyOCwgMzgsIDQ1LFxyXG4gIDE1LCAyOSwgNDAsIDQ4LFxyXG4gIDE2LCAzMSwgNDMsIDUxLFxyXG4gIDE3LCAzMywgNDUsIDU0LFxyXG4gIDE4LCAzNSwgNDgsIDU3LFxyXG4gIDE5LCAzNywgNTEsIDYwLFxyXG4gIDE5LCAzOCwgNTMsIDYzLFxyXG4gIDIwLCA0MCwgNTYsIDY2LFxyXG4gIDIxLCA0MywgNTksIDcwLFxyXG4gIDIyLCA0NSwgNjIsIDc0LFxyXG4gIDI0LCA0NywgNjUsIDc3LFxyXG4gIDI1LCA0OSwgNjgsIDgxXHJcbl1cclxuXHJcbmNvbnN0IEVDX0NPREVXT1JEU19UQUJMRSA9IFtcclxuLy8gTCAgTSAgUSAgSFxyXG4gIDcsIDEwLCAxMywgMTcsXHJcbiAgMTAsIDE2LCAyMiwgMjgsXHJcbiAgMTUsIDI2LCAzNiwgNDQsXHJcbiAgMjAsIDM2LCA1MiwgNjQsXHJcbiAgMjYsIDQ4LCA3MiwgODgsXHJcbiAgMzYsIDY0LCA5NiwgMTEyLFxyXG4gIDQwLCA3MiwgMTA4LCAxMzAsXHJcbiAgNDgsIDg4LCAxMzIsIDE1NixcclxuICA2MCwgMTEwLCAxNjAsIDE5MixcclxuICA3MiwgMTMwLCAxOTIsIDIyNCxcclxuICA4MCwgMTUwLCAyMjQsIDI2NCxcclxuICA5NiwgMTc2LCAyNjAsIDMwOCxcclxuICAxMDQsIDE5OCwgMjg4LCAzNTIsXHJcbiAgMTIwLCAyMTYsIDMyMCwgMzg0LFxyXG4gIDEzMiwgMjQwLCAzNjAsIDQzMixcclxuICAxNDQsIDI4MCwgNDA4LCA0ODAsXHJcbiAgMTY4LCAzMDgsIDQ0OCwgNTMyLFxyXG4gIDE4MCwgMzM4LCA1MDQsIDU4OCxcclxuICAxOTYsIDM2NCwgNTQ2LCA2NTAsXHJcbiAgMjI0LCA0MTYsIDYwMCwgNzAwLFxyXG4gIDIyNCwgNDQyLCA2NDQsIDc1MCxcclxuICAyNTIsIDQ3NiwgNjkwLCA4MTYsXHJcbiAgMjcwLCA1MDQsIDc1MCwgOTAwLFxyXG4gIDMwMCwgNTYwLCA4MTAsIDk2MCxcclxuICAzMTIsIDU4OCwgODcwLCAxMDUwLFxyXG4gIDMzNiwgNjQ0LCA5NTIsIDExMTAsXHJcbiAgMzYwLCA3MDAsIDEwMjAsIDEyMDAsXHJcbiAgMzkwLCA3MjgsIDEwNTAsIDEyNjAsXHJcbiAgNDIwLCA3ODQsIDExNDAsIDEzNTAsXHJcbiAgNDUwLCA4MTIsIDEyMDAsIDE0NDAsXHJcbiAgNDgwLCA4NjgsIDEyOTAsIDE1MzAsXHJcbiAgNTEwLCA5MjQsIDEzNTAsIDE2MjAsXHJcbiAgNTQwLCA5ODAsIDE0NDAsIDE3MTAsXHJcbiAgNTcwLCAxMDM2LCAxNTMwLCAxODAwLFxyXG4gIDU3MCwgMTA2NCwgMTU5MCwgMTg5MCxcclxuICA2MDAsIDExMjAsIDE2ODAsIDE5ODAsXHJcbiAgNjMwLCAxMjA0LCAxNzcwLCAyMTAwLFxyXG4gIDY2MCwgMTI2MCwgMTg2MCwgMjIyMCxcclxuICA3MjAsIDEzMTYsIDE5NTAsIDIzMTAsXHJcbiAgNzUwLCAxMzcyLCAyMDQwLCAyNDMwXHJcbl1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBibG9jayB0aGF0IHRoZSBRUiBDb2RlIHNob3VsZCBjb250YWluXHJcbiAqIGZvciB0aGUgc3BlY2lmaWVkIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGJsb2Nrc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRCbG9ja3NDb3VudCA9IGZ1bmN0aW9uIGdldEJsb2Nrc0NvdW50ICh2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xyXG4gIHN3aXRjaCAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICAgIGNhc2UgRUNMZXZlbC5MOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMF1cclxuICAgIGNhc2UgRUNMZXZlbC5NOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMV1cclxuICAgIGNhc2UgRUNMZXZlbC5ROlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgMl1cclxuICAgIGNhc2UgRUNMZXZlbC5IOlxyXG4gICAgICByZXR1cm4gRUNfQkxPQ0tTX1RBQkxFWyh2ZXJzaW9uIC0gMSkgKiA0ICsgM11cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHMgdG8gdXNlIGZvciB0aGUgc3BlY2lmaWVkXHJcbiAqIHZlcnNpb24gYW5kIGVycm9yIGNvcnJlY3Rpb24gbGV2ZWwuXHJcbiAqXHJcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSAge051bWJlcn0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIE51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xyXG4gKi9cclxuZXhwb3J0cy5nZXRUb3RhbENvZGV3b3Jkc0NvdW50ID0gZnVuY3Rpb24gZ2V0VG90YWxDb2Rld29yZHNDb3VudCAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcclxuICBzd2l0Y2ggKGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XHJcbiAgICBjYXNlIEVDTGV2ZWwuTDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDBdXHJcbiAgICBjYXNlIEVDTGV2ZWwuTTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDFdXHJcbiAgICBjYXNlIEVDTGV2ZWwuUTpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDJdXHJcbiAgICBjYXNlIEVDTGV2ZWwuSDpcclxuICAgICAgcmV0dXJuIEVDX0NPREVXT1JEU19UQUJMRVsodmVyc2lvbiAtIDEpICogNCArIDNdXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IEVYUF9UQUJMRSA9IG5ldyBVaW50OEFycmF5KDUxMilcbmNvbnN0IExPR19UQUJMRSA9IG5ldyBVaW50OEFycmF5KDI1Nilcbi8qKlxuICogUHJlY29tcHV0ZSB0aGUgbG9nIGFuZCBhbnRpLWxvZyB0YWJsZXMgZm9yIGZhc3RlciBjb21wdXRhdGlvbiBsYXRlclxuICpcbiAqIEZvciBlYWNoIHBvc3NpYmxlIHZhbHVlIGluIHRoZSBnYWxvaXMgZmllbGQgMl44LCB3ZSB3aWxsIHByZS1jb21wdXRlXG4gKiB0aGUgbG9nYXJpdGhtIGFuZCBhbnRpLWxvZ2FyaXRobSAoZXhwb25lbnRpYWwpIG9mIHRoaXMgdmFsdWVcbiAqXG4gKiByZWYge0BsaW5rIGh0dHBzOi8vZW4ud2lraXZlcnNpdHkub3JnL3dpa2kvUmVlZCVFMiU4MCU5M1NvbG9tb25fY29kZXNfZm9yX2NvZGVycyNJbnRyb2R1Y3Rpb25fdG9fbWF0aGVtYXRpY2FsX2ZpZWxkc31cbiAqL1xuOyhmdW5jdGlvbiBpbml0VGFibGVzICgpIHtcbiAgbGV0IHggPSAxXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMjU1OyBpKyspIHtcbiAgICBFWFBfVEFCTEVbaV0gPSB4XG4gICAgTE9HX1RBQkxFW3hdID0gaVxuXG4gICAgeCA8PD0gMSAvLyBtdWx0aXBseSBieSAyXG5cbiAgICAvLyBUaGUgUVIgY29kZSBzcGVjaWZpY2F0aW9uIHNheXMgdG8gdXNlIGJ5dGUtd2lzZSBtb2R1bG8gMTAwMDExMTAxIGFyaXRobWV0aWMuXG4gICAgLy8gVGhpcyBtZWFucyB0aGF0IHdoZW4gYSBudW1iZXIgaXMgMjU2IG9yIGxhcmdlciwgaXQgc2hvdWxkIGJlIFhPUmVkIHdpdGggMHgxMUQuXG4gICAgaWYgKHggJiAweDEwMCkgeyAvLyBzaW1pbGFyIHRvIHggPj0gMjU2LCBidXQgYSBsb3QgZmFzdGVyIChiZWNhdXNlIDB4MTAwID09IDI1NilcbiAgICAgIHggXj0gMHgxMURcbiAgICB9XG4gIH1cblxuICAvLyBPcHRpbWl6YXRpb246IGRvdWJsZSB0aGUgc2l6ZSBvZiB0aGUgYW50aS1sb2cgdGFibGUgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIG1vZCAyNTUgdG9cbiAgLy8gc3RheSBpbnNpZGUgdGhlIGJvdW5kcyAoYmVjYXVzZSB3ZSB3aWxsIG1haW5seSB1c2UgdGhpcyB0YWJsZSBmb3IgdGhlIG11bHRpcGxpY2F0aW9uIG9mXG4gIC8vIHR3byBHRiBudW1iZXJzLCBubyBtb3JlKS5cbiAgLy8gQHNlZSB7QGxpbmsgbXVsfVxuICBmb3IgKGxldCBpID0gMjU1OyBpIDwgNTEyOyBpKyspIHtcbiAgICBFWFBfVEFCTEVbaV0gPSBFWFBfVEFCTEVbaSAtIDI1NV1cbiAgfVxufSgpKVxuXG4vKipcbiAqIFJldHVybnMgbG9nIHZhbHVlIG9mIG4gaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gblxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uIGxvZyAobikge1xuICBpZiAobiA8IDEpIHRocm93IG5ldyBFcnJvcignbG9nKCcgKyBuICsgJyknKVxuICByZXR1cm4gTE9HX1RBQkxFW25dXG59XG5cbi8qKlxuICogUmV0dXJucyBhbnRpLWxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5leHAgPSBmdW5jdGlvbiBleHAgKG4pIHtcbiAgcmV0dXJuIEVYUF9UQUJMRVtuXVxufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG51bWJlciBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5tdWwgPSBmdW5jdGlvbiBtdWwgKHgsIHkpIHtcbiAgaWYgKHggPT09IDAgfHwgeSA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBzaG91bGQgYmUgRVhQX1RBQkxFWyhMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV0pICUgMjU1XSBpZiBFWFBfVEFCTEUgd2Fzbid0IG92ZXJzaXplZFxuICAvLyBAc2VlIHtAbGluayBpbml0VGFibGVzfVxuICByZXR1cm4gRVhQX1RBQkxFW0xPR19UQUJMRVt4XSArIExPR19UQUJMRVt5XV1cbn1cbiIsImNvbnN0IEdGID0gcmVxdWlyZSgnLi9nYWxvaXMtZmllbGQnKVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHBvbHlub21pYWxzIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBwMSBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBwMiBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICBQcm9kdWN0IG9mIHAxIGFuZCBwMlxuICovXG5leHBvcnRzLm11bCA9IGZ1bmN0aW9uIG11bCAocDEsIHAyKSB7XG4gIGNvbnN0IGNvZWZmID0gbmV3IFVpbnQ4QXJyYXkocDEubGVuZ3RoICsgcDIubGVuZ3RoIC0gMSlcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHAxLmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwMi5sZW5ndGg7IGorKykge1xuICAgICAgY29lZmZbaSArIGpdIF49IEdGLm11bChwMVtpXSwgcDJbal0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvZWZmXG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSByZW1haW5kZXIgb2YgcG9seW5vbWlhbHMgZGl2aXNpb25cbiAqXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBkaXZpZGVudCBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBkaXZpc29yICBQb2x5bm9taWFsXG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICBSZW1haW5kZXJcbiAqL1xuZXhwb3J0cy5tb2QgPSBmdW5jdGlvbiBtb2QgKGRpdmlkZW50LCBkaXZpc29yKSB7XG4gIGxldCByZXN1bHQgPSBuZXcgVWludDhBcnJheShkaXZpZGVudClcblxuICB3aGlsZSAoKHJlc3VsdC5sZW5ndGggLSBkaXZpc29yLmxlbmd0aCkgPj0gMCkge1xuICAgIGNvbnN0IGNvZWZmID0gcmVzdWx0WzBdXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpdmlzb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSBePSBHRi5tdWwoZGl2aXNvcltpXSwgY29lZmYpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCB6ZXJvcyBmcm9tIGJ1ZmZlciBoZWFkXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICB3aGlsZSAob2Zmc2V0IDwgcmVzdWx0Lmxlbmd0aCAmJiByZXN1bHRbb2Zmc2V0XSA9PT0gMCkgb2Zmc2V0KytcbiAgICByZXN1bHQgPSByZXN1bHQuc2xpY2Uob2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGlycmVkdWNpYmxlIGdlbmVyYXRvciBwb2x5bm9taWFsIG9mIHNwZWNpZmllZCBkZWdyZWVcbiAqICh1c2VkIGJ5IFJlZWQtU29sb21vbiBlbmNvZGVyKVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlIERlZ3JlZSBvZiB0aGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9ICAgIEJ1ZmZlciBjb250YWluaW5nIHBvbHlub21pYWwgY29lZmZpY2llbnRzXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVFQ1BvbHlub21pYWwgPSBmdW5jdGlvbiBnZW5lcmF0ZUVDUG9seW5vbWlhbCAoZGVncmVlKSB7XG4gIGxldCBwb2x5ID0gbmV3IFVpbnQ4QXJyYXkoWzFdKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZ3JlZTsgaSsrKSB7XG4gICAgcG9seSA9IGV4cG9ydHMubXVsKHBvbHksIG5ldyBVaW50OEFycmF5KFsxLCBHRi5leHAoaSldKSlcbiAgfVxuXG4gIHJldHVybiBwb2x5XG59XG4iLCJjb25zdCBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge1VpbnQ4QXJyYXl9IGRhdGEgQnVmZmVyIGNvbnRhaW5pbmcgaW5wdXQgZGF0YVxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGRhdGFcbiAqL1xuUmVlZFNvbG9tb25FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUgKGRhdGEpIHtcbiAgaWYgKCF0aGlzLmdlblBvbHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuY29kZXIgbm90IGluaXRpYWxpemVkJylcbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSBFQyBmb3IgdGhpcyBkYXRhIGJsb2NrXG4gIC8vIGV4dGVuZHMgZGF0YSBzaXplIHRvIGRhdGErZ2VuUG9seSBzaXplXG4gIGNvbnN0IHBhZGRlZERhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuICBwYWRkZWREYXRhLnNldChkYXRhKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICBjb25zdCByZW1haW5kZXIgPSBQb2x5bm9taWFsLm1vZChwYWRkZWREYXRhLCB0aGlzLmdlblBvbHkpXG5cbiAgLy8gcmV0dXJuIEVDIGRhdGEgYmxvY2tzIChsYXN0IG4gYnl0ZSwgd2hlcmUgbiBpcyB0aGUgZGVncmVlIG9mIGdlblBvbHkpXG4gIC8vIElmIGNvZWZmaWNpZW50cyBudW1iZXIgaW4gcmVtYWluZGVyIGFyZSBsZXNzIHRoYW4gZ2VuUG9seSBkZWdyZWUsXG4gIC8vIHBhZCB3aXRoIDBzIHRvIHRoZSBsZWZ0IHRvIHJlYWNoIHRoZSBuZWVkZWQgbnVtYmVyIG9mIGNvZWZmaWNpZW50c1xuICBjb25zdCBzdGFydCA9IHRoaXMuZGVncmVlIC0gcmVtYWluZGVyLmxlbmd0aFxuICBpZiAoc3RhcnQgPiAwKSB7XG4gICAgY29uc3QgYnVmZiA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGVncmVlKVxuICAgIGJ1ZmYuc2V0KHJlbWFpbmRlciwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIiwiLyoqXG4gKiBDaGVjayBpZiBRUiBDb2RlIHZlcnNpb24gaXMgdmFsaWRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgICB0cnVlIGlmIHZhbGlkIHZlcnNpb24sIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnRzLmlzVmFsaWQgPSBmdW5jdGlvbiBpc1ZhbGlkICh2ZXJzaW9uKSB7XG4gIHJldHVybiAhaXNOYU4odmVyc2lvbikgJiYgdmVyc2lvbiA+PSAxICYmIHZlcnNpb24gPD0gNDBcbn1cbiIsImNvbnN0IG51bWVyaWMgPSAnWzAtOV0rJ1xuY29uc3QgYWxwaGFudW1lcmljID0gJ1tBLVogJCUqK1xcXFwtLi86XSsnXG5sZXQga2FuamkgPSAnKD86W3UzMDAwLXUzMDNGXXxbdTMwNDAtdTMwOUZdfFt1MzBBMC11MzBGRl18JyArXG4gICdbdUZGMDAtdUZGRUZdfFt1NEUwMC11OUZBRl18W3UyNjA1LXUyNjA2XXxbdTIxOTAtdTIxOTVdfHUyMDNCfCcgK1xuICAnW3UyMDEwdTIwMTV1MjAxOHUyMDE5dTIwMjV1MjAyNnUyMDFDdTIwMUR1MjIyNXUyMjYwXXwnICtcbiAgJ1t1MDM5MS11MDQ1MV18W3UwMEE3dTAwQTh1MDBCMXUwMEI0dTAwRDd1MDBGN10pKydcbmthbmppID0ga2FuamkucmVwbGFjZSgvdS9nLCAnXFxcXHUnKVxuXG5jb25zdCBieXRlID0gJyg/Oig/IVtBLVowLTkgJCUqK1xcXFwtLi86XXwnICsga2FuamkgKyAnKSg/Oi58W1xcclxcbl0pKSsnXG5cbmV4cG9ydHMuS0FOSkkgPSBuZXcgUmVnRXhwKGthbmppLCAnZycpXG5leHBvcnRzLkJZVEVfS0FOSkkgPSBuZXcgUmVnRXhwKCdbXkEtWjAtOSAkJSorXFxcXC0uLzpdKycsICdnJylcbmV4cG9ydHMuQllURSA9IG5ldyBSZWdFeHAoYnl0ZSwgJ2cnKVxuZXhwb3J0cy5OVU1FUklDID0gbmV3IFJlZ0V4cChudW1lcmljLCAnZycpXG5leHBvcnRzLkFMUEhBTlVNRVJJQyA9IG5ldyBSZWdFeHAoYWxwaGFudW1lcmljLCAnZycpXG5cbmNvbnN0IFRFU1RfS0FOSkkgPSBuZXcgUmVnRXhwKCdeJyArIGthbmppICsgJyQnKVxuY29uc3QgVEVTVF9OVU1FUklDID0gbmV3IFJlZ0V4cCgnXicgKyBudW1lcmljICsgJyQnKVxuY29uc3QgVEVTVF9BTFBIQU5VTUVSSUMgPSBuZXcgUmVnRXhwKCdeW0EtWjAtOSAkJSorXFxcXC0uLzpdKyQnKVxuXG5leHBvcnRzLnRlc3RLYW5qaSA9IGZ1bmN0aW9uIHRlc3RLYW5qaSAoc3RyKSB7XG4gIHJldHVybiBURVNUX0tBTkpJLnRlc3Qoc3RyKVxufVxuXG5leHBvcnRzLnRlc3ROdW1lcmljID0gZnVuY3Rpb24gdGVzdE51bWVyaWMgKHN0cikge1xuICByZXR1cm4gVEVTVF9OVU1FUklDLnRlc3Qoc3RyKVxufVxuXG5leHBvcnRzLnRlc3RBbHBoYW51bWVyaWMgPSBmdW5jdGlvbiB0ZXN0QWxwaGFudW1lcmljIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfQUxQSEFOVU1FUklDLnRlc3Qoc3RyKVxufVxuIiwiY29uc3QgVmVyc2lvbkNoZWNrID0gcmVxdWlyZSgnLi92ZXJzaW9uLWNoZWNrJylcbmNvbnN0IFJlZ2V4ID0gcmVxdWlyZSgnLi9yZWdleCcpXG5cbi8qKlxuICogTnVtZXJpYyBtb2RlIGVuY29kZXMgZGF0YSBmcm9tIHRoZSBkZWNpbWFsIGRpZ2l0IHNldCAoMCAtIDkpXG4gKiAoYnl0ZSB2YWx1ZXMgMzBIRVggdG8gMzlIRVgpLlxuICogTm9ybWFsbHksIDMgZGF0YSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSAxMCBiaXRzLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuTlVNRVJJQyA9IHtcbiAgaWQ6ICdOdW1lcmljJyxcbiAgYml0OiAxIDw8IDAsXG4gIGNjQml0czogWzEwLCAxMiwgMTRdXG59XG5cbi8qKlxuICogQWxwaGFudW1lcmljIG1vZGUgZW5jb2RlcyBkYXRhIGZyb20gYSBzZXQgb2YgNDUgY2hhcmFjdGVycyxcbiAqIGkuZS4gMTAgbnVtZXJpYyBkaWdpdHMgKDAgLSA5KSxcbiAqICAgICAgMjYgYWxwaGFiZXRpYyBjaGFyYWN0ZXJzIChBIC0gWiksXG4gKiAgIGFuZCA5IHN5bWJvbHMgKFNQLCAkLCAlLCAqLCArLCAtLCAuLCAvLCA6KS5cbiAqIE5vcm1hbGx5LCB0d28gaW5wdXQgY2hhcmFjdGVycyBhcmUgcmVwcmVzZW50ZWQgYnkgMTEgYml0cy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLkFMUEhBTlVNRVJJQyA9IHtcbiAgaWQ6ICdBbHBoYW51bWVyaWMnLFxuICBiaXQ6IDEgPDwgMSxcbiAgY2NCaXRzOiBbOSwgMTEsIDEzXVxufVxuXG4vKipcbiAqIEluIGJ5dGUgbW9kZSwgZGF0YSBpcyBlbmNvZGVkIGF0IDggYml0cyBwZXIgY2hhcmFjdGVyLlxuICpcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydHMuQllURSA9IHtcbiAgaWQ6ICdCeXRlJyxcbiAgYml0OiAxIDw8IDIsXG4gIGNjQml0czogWzgsIDE2LCAxNl1cbn1cblxuLyoqXG4gKiBUaGUgS2FuamkgbW9kZSBlZmZpY2llbnRseSBlbmNvZGVzIEthbmppIGNoYXJhY3RlcnMgaW4gYWNjb3JkYW5jZSB3aXRoXG4gKiB0aGUgU2hpZnQgSklTIHN5c3RlbSBiYXNlZCBvbiBKSVMgWCAwMjA4LlxuICogVGhlIFNoaWZ0IEpJUyB2YWx1ZXMgYXJlIHNoaWZ0ZWQgZnJvbSB0aGUgSklTIFggMDIwOCB2YWx1ZXMuXG4gKiBKSVMgWCAwMjA4IGdpdmVzIGRldGFpbHMgb2YgdGhlIHNoaWZ0IGNvZGVkIHJlcHJlc2VudGF0aW9uLlxuICogRWFjaCB0d28tYnl0ZSBjaGFyYWN0ZXIgdmFsdWUgaXMgY29tcGFjdGVkIHRvIGEgMTMtYml0IGJpbmFyeSBjb2Rld29yZC5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLktBTkpJID0ge1xuICBpZDogJ0thbmppJyxcbiAgYml0OiAxIDw8IDMsXG4gIGNjQml0czogWzgsIDEwLCAxMl1cbn1cblxuLyoqXG4gKiBNaXhlZCBtb2RlIHdpbGwgY29udGFpbiBhIHNlcXVlbmNlcyBvZiBkYXRhIGluIGEgY29tYmluYXRpb24gb2YgYW55IG9mXG4gKiB0aGUgbW9kZXMgZGVzY3JpYmVkIGFib3ZlXG4gKlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0cy5NSVhFRCA9IHtcbiAgYml0OiAtMVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiBiaXRzIG5lZWRlZCB0byBzdG9yZSB0aGUgZGF0YSBsZW5ndGhcbiAqIGFjY29yZGluZyB0byBRUiBDb2RlIHNwZWNpZmljYXRpb25zLlxuICpcbiAqIEBwYXJhbSAge01vZGV9ICAgbW9kZSAgICBEYXRhIG1vZGVcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBOdW1iZXIgb2YgYml0c1xuICovXG5leHBvcnRzLmdldENoYXJDb3VudEluZGljYXRvciA9IGZ1bmN0aW9uIGdldENoYXJDb3VudEluZGljYXRvciAobW9kZSwgdmVyc2lvbikge1xuICBpZiAoIW1vZGUuY2NCaXRzKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZTogJyArIG1vZGUpXG5cbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2ZXJzaW9uOiAnICsgdmVyc2lvbilcbiAgfVxuXG4gIGlmICh2ZXJzaW9uID49IDEgJiYgdmVyc2lvbiA8IDEwKSByZXR1cm4gbW9kZS5jY0JpdHNbMF1cbiAgZWxzZSBpZiAodmVyc2lvbiA8IDI3KSByZXR1cm4gbW9kZS5jY0JpdHNbMV1cbiAgcmV0dXJuIG1vZGUuY2NCaXRzWzJdXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbW9zdCBlZmZpY2llbnQgbW9kZSB0byBzdG9yZSB0aGUgc3BlY2lmaWVkIGRhdGFcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGRhdGFTdHIgSW5wdXQgZGF0YSBzdHJpbmdcbiAqIEByZXR1cm4ge01vZGV9ICAgICAgICAgICBCZXN0IG1vZGVcbiAqL1xuZXhwb3J0cy5nZXRCZXN0TW9kZUZvckRhdGEgPSBmdW5jdGlvbiBnZXRCZXN0TW9kZUZvckRhdGEgKGRhdGFTdHIpIHtcbiAgaWYgKFJlZ2V4LnRlc3ROdW1lcmljKGRhdGFTdHIpKSByZXR1cm4gZXhwb3J0cy5OVU1FUklDXG4gIGVsc2UgaWYgKFJlZ2V4LnRlc3RBbHBoYW51bWVyaWMoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLkFMUEhBTlVNRVJJQ1xuICBlbHNlIGlmIChSZWdleC50ZXN0S2FuamkoZGF0YVN0cikpIHJldHVybiBleHBvcnRzLktBTkpJXG4gIGVsc2UgcmV0dXJuIGV4cG9ydHMuQllURVxufVxuXG4vKipcbiAqIFJldHVybiBtb2RlIG5hbWUgYXMgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtNb2RlfSBtb2RlIE1vZGUgb2JqZWN0XG4gKiBAcmV0dXJucyB7U3RyaW5nfSAgTW9kZSBuYW1lXG4gKi9cbmV4cG9ydHMudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAobW9kZSkge1xuICBpZiAobW9kZSAmJiBtb2RlLmlkKSByZXR1cm4gbW9kZS5pZFxuICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbW9kZScpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgaW5wdXQgcGFyYW0gaXMgYSB2YWxpZCBtb2RlIG9iamVjdFxuICpcbiAqIEBwYXJhbSAgIHtNb2RlfSAgICBtb2RlIE1vZGUgb2JqZWN0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB2YWxpZCBtb2RlLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobW9kZSkge1xuICByZXR1cm4gbW9kZSAmJiBtb2RlLmJpdCAmJiBtb2RlLmNjQml0c1xufVxuXG4vKipcbiAqIEdldCBtb2RlIG9iamVjdCBmcm9tIGl0cyBuYW1lXG4gKlxuICogQHBhcmFtICAge1N0cmluZ30gc3RyaW5nIE1vZGUgbmFtZVxuICogQHJldHVybnMge01vZGV9ICAgICAgICAgIE1vZGUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtIGlzIG5vdCBhIHN0cmluZycpXG4gIH1cblxuICBjb25zdCBsY1N0ciA9IHN0cmluZy50b0xvd2VyQ2FzZSgpXG5cbiAgc3dpdGNoIChsY1N0cikge1xuICAgIGNhc2UgJ251bWVyaWMnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuTlVNRVJJQ1xuICAgIGNhc2UgJ2FscGhhbnVtZXJpYyc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5BTFBIQU5VTUVSSUNcbiAgICBjYXNlICdrYW5qaSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5LQU5KSVxuICAgIGNhc2UgJ2J5dGUnOlxuICAgICAgcmV0dXJuIGV4cG9ydHMuQllURVxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbW9kZTogJyArIHN0cmluZylcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgbW9kZSBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgYSB2YWxpZCBtb2RlLCByZXR1cm5zIGRlZmF1bHRWYWx1ZVxuICpcbiAqIEBwYXJhbSAge01vZGV8U3RyaW5nfSB2YWx1ZSAgICAgICAgRW5jb2RpbmcgbW9kZVxuICogQHBhcmFtICB7TW9kZX0gICAgICAgIGRlZmF1bHRWYWx1ZSBGYWxsYmFjayB2YWx1ZVxuICogQHJldHVybiB7TW9kZX0gICAgICAgICAgICAgICAgICAgICBFbmNvZGluZyBtb2RlXG4gKi9cbmV4cG9ydHMuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGV4cG9ydHMuaXNWYWxpZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlXG4gIH1cbn1cbiIsImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5jb25zdCBFQ0NvZGUgPSByZXF1aXJlKCcuL2Vycm9yLWNvcnJlY3Rpb24tY29kZScpXG5jb25zdCBFQ0xldmVsID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWxldmVsJylcbmNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuY29uc3QgVmVyc2lvbkNoZWNrID0gcmVxdWlyZSgnLi92ZXJzaW9uLWNoZWNrJylcblxuLy8gR2VuZXJhdG9yIHBvbHlub21pYWwgdXNlZCB0byBlbmNvZGUgdmVyc2lvbiBpbmZvcm1hdGlvblxuY29uc3QgRzE4ID0gKDEgPDwgMTIpIHwgKDEgPDwgMTEpIHwgKDEgPDwgMTApIHwgKDEgPDwgOSkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgMikgfCAoMSA8PCAwKVxuY29uc3QgRzE4X0JDSCA9IFV0aWxzLmdldEJDSERpZ2l0KEcxOClcblxuZnVuY3Rpb24gZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoIChtb2RlLCBsZW5ndGgsIGVycm9yQ29ycmVjdGlvbkxldmVsKSB7XG4gIGZvciAobGV0IGN1cnJlbnRWZXJzaW9uID0gMTsgY3VycmVudFZlcnNpb24gPD0gNDA7IGN1cnJlbnRWZXJzaW9uKyspIHtcbiAgICBpZiAobGVuZ3RoIDw9IGV4cG9ydHMuZ2V0Q2FwYWNpdHkoY3VycmVudFZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtb2RlKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRWZXJzaW9uXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBnZXRSZXNlcnZlZEJpdHNDb3VudCAobW9kZSwgdmVyc2lvbikge1xuICAvLyBDaGFyYWN0ZXIgY291bnQgaW5kaWNhdG9yICsgbW9kZSBpbmRpY2F0b3IgYml0c1xuICByZXR1cm4gTW9kZS5nZXRDaGFyQ291bnRJbmRpY2F0b3IobW9kZSwgdmVyc2lvbikgKyA0XG59XG5cbmZ1bmN0aW9uIGdldFRvdGFsQml0c0Zyb21EYXRhQXJyYXkgKHNlZ21lbnRzLCB2ZXJzaW9uKSB7XG4gIGxldCB0b3RhbEJpdHMgPSAwXG5cbiAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgIGNvbnN0IHJlc2VydmVkQml0cyA9IGdldFJlc2VydmVkQml0c0NvdW50KGRhdGEubW9kZSwgdmVyc2lvbilcbiAgICB0b3RhbEJpdHMgKz0gcmVzZXJ2ZWRCaXRzICsgZGF0YS5nZXRCaXRzTGVuZ3RoKClcbiAgfSlcblxuICByZXR1cm4gdG90YWxCaXRzXG59XG5cbmZ1bmN0aW9uIGdldEJlc3RWZXJzaW9uRm9yTWl4ZWREYXRhIChzZWdtZW50cywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgZm9yIChsZXQgY3VycmVudFZlcnNpb24gPSAxOyBjdXJyZW50VmVyc2lvbiA8PSA0MDsgY3VycmVudFZlcnNpb24rKykge1xuICAgIGNvbnN0IGxlbmd0aCA9IGdldFRvdGFsQml0c0Zyb21EYXRhQXJyYXkoc2VnbWVudHMsIGN1cnJlbnRWZXJzaW9uKVxuICAgIGlmIChsZW5ndGggPD0gZXhwb3J0cy5nZXRDYXBhY2l0eShjdXJyZW50VmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIE1vZGUuTUlYRUQpKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZlcnNpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogUmV0dXJucyB2ZXJzaW9uIG51bWJlciBmcm9tIGEgdmFsdWUuXG4gKiBJZiB2YWx1ZSBpcyBub3QgYSB2YWxpZCB2ZXJzaW9uLCByZXR1cm5zIGRlZmF1bHRWYWx1ZVxuICpcbiAqIEBwYXJhbSAge051bWJlcnxTdHJpbmd9IHZhbHVlICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge051bWJlcn0gICAgICAgIGRlZmF1bHRWYWx1ZSBGYWxsYmFjayB2YWx1ZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvbiBudW1iZXJcbiAqL1xuZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoVmVyc2lvbkNoZWNrLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMClcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0VmFsdWVcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGhvdyBtdWNoIGRhdGEgY2FuIGJlIHN0b3JlZCB3aXRoIHRoZSBzcGVjaWZpZWQgUVIgY29kZSB2ZXJzaW9uXG4gKiBhbmQgZXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uICgxLTQwKVxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtNb2RlfSAgIG1vZGUgICAgICAgICAgICAgICAgIERhdGEgbW9kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBRdWFudGl0eSBvZiBzdG9yYWJsZSBkYXRhXG4gKi9cbmV4cG9ydHMuZ2V0Q2FwYWNpdHkgPSBmdW5jdGlvbiBnZXRDYXBhY2l0eSAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1vZGUpIHtcbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBRUiBDb2RlIHZlcnNpb24nKVxuICB9XG5cbiAgLy8gVXNlIEJ5dGUgbW9kZSBhcyBkZWZhdWx0XG4gIGlmICh0eXBlb2YgbW9kZSA9PT0gJ3VuZGVmaW5lZCcpIG1vZGUgPSBNb2RlLkJZVEVcblxuICAvLyBUb3RhbCBjb2Rld29yZHMgZm9yIHRoaXMgUVIgY29kZSB2ZXJzaW9uIChEYXRhICsgRXJyb3IgY29ycmVjdGlvbilcbiAgY29uc3QgdG90YWxDb2Rld29yZHMgPSBVdGlscy5nZXRTeW1ib2xUb3RhbENvZGV3b3Jkcyh2ZXJzaW9uKVxuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3Jkc1xuICBjb25zdCBlY1RvdGFsQ29kZXdvcmRzID0gRUNDb2RlLmdldFRvdGFsQ29kZXdvcmRzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gVG90YWwgbnVtYmVyIG9mIGRhdGEgY29kZXdvcmRzXG4gIGNvbnN0IGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMgPSAodG90YWxDb2Rld29yZHMgLSBlY1RvdGFsQ29kZXdvcmRzKSAqIDhcblxuICBpZiAobW9kZSA9PT0gTW9kZS5NSVhFRCkgcmV0dXJuIGRhdGFUb3RhbENvZGV3b3Jkc0JpdHNcblxuICBjb25zdCB1c2FibGVCaXRzID0gZGF0YVRvdGFsQ29kZXdvcmRzQml0cyAtIGdldFJlc2VydmVkQml0c0NvdW50KG1vZGUsIHZlcnNpb24pXG5cbiAgLy8gUmV0dXJuIG1heCBudW1iZXIgb2Ygc3RvcmFibGUgY29kZXdvcmRzXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgTW9kZS5OVU1FUklDOlxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKHVzYWJsZUJpdHMgLyAxMCkgKiAzKVxuXG4gICAgY2FzZSBNb2RlLkFMUEhBTlVNRVJJQzpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKCh1c2FibGVCaXRzIC8gMTEpICogMilcblxuICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHVzYWJsZUJpdHMgLyAxMylcblxuICAgIGNhc2UgTW9kZS5CWVRFOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcih1c2FibGVCaXRzIC8gOClcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gdmVyc2lvbiBuZWVkZWQgdG8gY29udGFpbiB0aGUgYW1vdW50IG9mIGRhdGFcbiAqXG4gKiBAcGFyYW0gIHtTZWdtZW50fSBkYXRhICAgICAgICAgICAgICAgICAgICBTZWdtZW50IG9mIGRhdGFcbiAqIEBwYXJhbSAge051bWJlcn0gW2Vycm9yQ29ycmVjdGlvbkxldmVsPUhdIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge01vZGV9IG1vZGUgICAgICAgICAgICAgICAgICAgICAgIERhdGEgbW9kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmV4cG9ydHMuZ2V0QmVzdFZlcnNpb25Gb3JEYXRhID0gZnVuY3Rpb24gZ2V0QmVzdFZlcnNpb25Gb3JEYXRhIChkYXRhLCBlcnJvckNvcnJlY3Rpb25MZXZlbCkge1xuICBsZXQgc2VnXG5cbiAgY29uc3QgZWNsID0gRUNMZXZlbC5mcm9tKGVycm9yQ29ycmVjdGlvbkxldmVsLCBFQ0xldmVsLk0pXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gZ2V0QmVzdFZlcnNpb25Gb3JNaXhlZERhdGEoZGF0YSwgZWNsKVxuICAgIH1cblxuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG5cbiAgICBzZWcgPSBkYXRhWzBdXG4gIH0gZWxzZSB7XG4gICAgc2VnID0gZGF0YVxuICB9XG5cbiAgcmV0dXJuIGdldEJlc3RWZXJzaW9uRm9yRGF0YUxlbmd0aChzZWcubW9kZSwgc2VnLmdldExlbmd0aCgpLCBlY2wpXG59XG5cbi8qKlxuICogUmV0dXJucyB2ZXJzaW9uIGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIHZlcnNpb24gaW5mb3JtYXRpb24gaXMgaW5jbHVkZWQgaW4gUVIgQ29kZSBzeW1ib2xzIG9mIHZlcnNpb24gNyBvciBsYXJnZXIuXG4gKiBJdCBjb25zaXN0cyBvZiBhbiAxOC1iaXQgc2VxdWVuY2UgY29udGFpbmluZyA2IGRhdGEgYml0cyxcbiAqIHdpdGggMTIgZXJyb3IgY29ycmVjdGlvbiBiaXRzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlICgxOCwgNikgR29sYXkgY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgRW5jb2RlZCB2ZXJzaW9uIGluZm8gYml0c1xuICovXG5leHBvcnRzLmdldEVuY29kZWRCaXRzID0gZnVuY3Rpb24gZ2V0RW5jb2RlZEJpdHMgKHZlcnNpb24pIHtcbiAgaWYgKCFWZXJzaW9uQ2hlY2suaXNWYWxpZCh2ZXJzaW9uKSB8fCB2ZXJzaW9uIDwgNykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBRUiBDb2RlIHZlcnNpb24nKVxuICB9XG5cbiAgbGV0IGQgPSB2ZXJzaW9uIDw8IDEyXG5cbiAgd2hpbGUgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE4X0JDSCA+PSAwKSB7XG4gICAgZCBePSAoRzE4IDw8IChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxOF9CQ0gpKVxuICB9XG5cbiAgcmV0dXJuICh2ZXJzaW9uIDw8IDEyKSB8IGRcbn1cbiIsImNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmNvbnN0IEcxNSA9ICgxIDw8IDEwKSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCA0KSB8ICgxIDw8IDIpIHwgKDEgPDwgMSkgfCAoMSA8PCAwKVxuY29uc3QgRzE1X01BU0sgPSAoMSA8PCAxNCkgfCAoMSA8PCAxMikgfCAoMSA8PCAxMCkgfCAoMSA8PCA0KSB8ICgxIDw8IDEpXG5jb25zdCBHMTVfQkNIID0gVXRpbHMuZ2V0QkNIRGlnaXQoRzE1KVxuXG4vKipcbiAqIFJldHVybnMgZm9ybWF0IGluZm9ybWF0aW9uIHdpdGggcmVsYXRpdmUgZXJyb3IgY29ycmVjdGlvbiBiaXRzXG4gKlxuICogVGhlIGZvcm1hdCBpbmZvcm1hdGlvbiBpcyBhIDE1LWJpdCBzZXF1ZW5jZSBjb250YWluaW5nIDUgZGF0YSBiaXRzLFxuICogd2l0aCAxMCBlcnJvciBjb3JyZWN0aW9uIGJpdHMgY2FsY3VsYXRlZCB1c2luZyB0aGUgKDE1LCA1KSBCQ0ggY29kZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge051bWJlcn0gbWFzayAgICAgICAgICAgICAgICAgTWFzayBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIEVuY29kZWQgZm9ybWF0IGluZm9ybWF0aW9uIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRFbmNvZGVkQml0cyA9IGZ1bmN0aW9uIGdldEVuY29kZWRCaXRzIChlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFzaykge1xuICBjb25zdCBkYXRhID0gKChlcnJvckNvcnJlY3Rpb25MZXZlbC5iaXQgPDwgMykgfCBtYXNrKVxuICBsZXQgZCA9IGRhdGEgPDwgMTBcblxuICB3aGlsZSAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMTVfQkNIID49IDApIHtcbiAgICBkIF49IChHMTUgPDwgKFV0aWxzLmdldEJDSERpZ2l0KGQpIC0gRzE1X0JDSCkpXG4gIH1cblxuICAvLyB4b3IgZmluYWwgZGF0YSB3aXRoIG1hc2sgcGF0dGVybiBpbiBvcmRlciB0byBlbnN1cmUgdGhhdFxuICAvLyBubyBjb21iaW5hdGlvbiBvZiBFcnJvciBDb3JyZWN0aW9uIExldmVsIGFuZCBkYXRhIG1hc2sgcGF0dGVyblxuICAvLyB3aWxsIHJlc3VsdCBpbiBhbiBhbGwtemVybyBkYXRhIHN0cmluZ1xuICByZXR1cm4gKChkYXRhIDw8IDEwKSB8IGQpIF4gRzE1X01BU0tcbn1cbiIsImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG5mdW5jdGlvbiBOdW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLk5VTUVSSUNcbiAgdGhpcy5kYXRhID0gZGF0YS50b1N0cmluZygpXG59XG5cbk51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIDEwICogTWF0aC5mbG9vcihsZW5ndGggLyAzKSArICgobGVuZ3RoICUgMykgPyAoKGxlbmd0aCAlIDMpICogMyArIDEpIDogMClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBOdW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbk51bWVyaWNEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChiaXRCdWZmZXIpIHtcbiAgbGV0IGksIGdyb3VwLCB2YWx1ZVxuXG4gIC8vIFRoZSBpbnB1dCBkYXRhIHN0cmluZyBpcyBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHRocmVlIGRpZ2l0cyxcbiAgLy8gYW5kIGVhY2ggZ3JvdXAgaXMgY29udmVydGVkIHRvIGl0cyAxMC1iaXQgYmluYXJ5IGVxdWl2YWxlbnQuXG4gIGZvciAoaSA9IDA7IGkgKyAzIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMykge1xuICAgIGdyb3VwID0gdGhpcy5kYXRhLnN1YnN0cihpLCAzKVxuICAgIHZhbHVlID0gcGFyc2VJbnQoZ3JvdXAsIDEwKVxuXG4gICAgYml0QnVmZmVyLnB1dCh2YWx1ZSwgMTApXG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG9mIGlucHV0IGRpZ2l0cyBpcyBub3QgYW4gZXhhY3QgbXVsdGlwbGUgb2YgdGhyZWUsXG4gIC8vIHRoZSBmaW5hbCBvbmUgb3IgdHdvIGRpZ2l0cyBhcmUgY29udmVydGVkIHRvIDQgb3IgNyBiaXRzIHJlc3BlY3RpdmVseS5cbiAgY29uc3QgcmVtYWluaW5nTnVtID0gdGhpcy5kYXRhLmxlbmd0aCAtIGlcbiAgaWYgKHJlbWFpbmluZ051bSA+IDApIHtcbiAgICBncm91cCA9IHRoaXMuZGF0YS5zdWJzdHIoaSlcbiAgICB2YWx1ZSA9IHBhcnNlSW50KGdyb3VwLCAxMClcblxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIHJlbWFpbmluZ051bSAqIDMgKyAxKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtZXJpY0RhdGFcbiIsImNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG4vKipcbiAqIEFycmF5IG9mIGNoYXJhY3RlcnMgYXZhaWxhYmxlIGluIGFscGhhbnVtZXJpYyBtb2RlXG4gKlxuICogQXMgcGVyIFFSIENvZGUgc3BlY2lmaWNhdGlvbiwgdG8gZWFjaCBjaGFyYWN0ZXJcbiAqIGlzIGFzc2lnbmVkIGEgdmFsdWUgZnJvbSAwIHRvIDQ0IHdoaWNoIGluIHRoaXMgY2FzZSBjb2luY2lkZXNcbiAqIHdpdGggdGhlIGFycmF5IGluZGV4XG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBBTFBIQV9OVU1fQ0hBUlMgPSBbXG4gICcwJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JyxcbiAgJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLFxuICAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWicsXG4gICcgJywgJyQnLCAnJScsICcqJywgJysnLCAnLScsICcuJywgJy8nLCAnOidcbl1cblxuZnVuY3Rpb24gQWxwaGFudW1lcmljRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLkFMUEhBTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhXG59XG5cbkFscGhhbnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTEgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDIpICsgNiAqIChsZW5ndGggJSAyKVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5BbHBoYW51bWVyaWNEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBBbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoYml0QnVmZmVyKSB7XG4gIGxldCBpXG5cbiAgLy8gSW5wdXQgZGF0YSBjaGFyYWN0ZXJzIGFyZSBkaXZpZGVkIGludG8gZ3JvdXBzIG9mIHR3byBjaGFyYWN0ZXJzXG4gIC8vIGFuZCBlbmNvZGVkIGFzIDExLWJpdCBiaW5hcnkgY29kZXMuXG4gIGZvciAoaSA9IDA7IGkgKyAyIDw9IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gMikge1xuICAgIC8vIFRoZSBjaGFyYWN0ZXIgdmFsdWUgb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBtdWx0aXBsaWVkIGJ5IDQ1XG4gICAgbGV0IHZhbHVlID0gQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSAqIDQ1XG5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBzZWNvbmQgZGlnaXQgaXMgYWRkZWQgdG8gdGhlIHByb2R1Y3RcbiAgICB2YWx1ZSArPSBBTFBIQV9OVU1fQ0hBUlMuaW5kZXhPZih0aGlzLmRhdGFbaSArIDFdKVxuXG4gICAgLy8gVGhlIHN1bSBpcyB0aGVuIHN0b3JlZCBhcyAxMS1iaXQgYmluYXJ5IG51bWJlclxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIDExKVxuICB9XG5cbiAgLy8gSWYgdGhlIG51bWJlciBvZiBpbnB1dCBkYXRhIGNoYXJhY3RlcnMgaXMgbm90IGEgbXVsdGlwbGUgb2YgdHdvLFxuICAvLyB0aGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBmaW5hbCBjaGFyYWN0ZXIgaXMgZW5jb2RlZCBhcyBhIDYtYml0IGJpbmFyeSBudW1iZXIuXG4gIGlmICh0aGlzLmRhdGEubGVuZ3RoICUgMikge1xuICAgIGJpdEJ1ZmZlci5wdXQoQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2ldKSwgNilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFscGhhbnVtZXJpY0RhdGFcbiIsImNvbnN0IGVuY29kZVV0ZjggPSByZXF1aXJlKCdlbmNvZGUtdXRmOCcpXG5jb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gQnl0ZURhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5CWVRFXG4gIHRoaXMuZGF0YSA9IG5ldyBVaW50OEFycmF5KGVuY29kZVV0ZjgoZGF0YSkpXG59XG5cbkJ5dGVEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDhcbn1cblxuQnl0ZURhdGEucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIGdldExlbmd0aCAoKSB7XG4gIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBCeXRlRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChiaXRCdWZmZXIpIHtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYml0QnVmZmVyLnB1dCh0aGlzLmRhdGFbaV0sIDgpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCeXRlRGF0YVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5jb2RlVXRmOCAoaW5wdXQpIHtcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBzaXplID0gaW5wdXQubGVuZ3RoXG5cbiAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHNpemU7IGluZGV4KyspIHtcbiAgICB2YXIgcG9pbnQgPSBpbnB1dC5jaGFyQ29kZUF0KGluZGV4KVxuXG4gICAgaWYgKHBvaW50ID49IDB4RDgwMCAmJiBwb2ludCA8PSAweERCRkYgJiYgc2l6ZSA+IGluZGV4ICsgMSkge1xuICAgICAgdmFyIHNlY29uZCA9IGlucHV0LmNoYXJDb2RlQXQoaW5kZXggKyAxKVxuXG4gICAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICBwb2ludCA9IChwb2ludCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDBcbiAgICAgICAgaW5kZXggKz0gMVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVTLUFTQ0lJXG4gICAgaWYgKHBvaW50IDwgMHg4MCkge1xuICAgICAgcmVzdWx0LnB1c2gocG9pbnQpXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIDItYnl0ZSBVVEYtOFxuICAgIGlmIChwb2ludCA8IDB4ODAwKSB7XG4gICAgICByZXN1bHQucHVzaCgocG9pbnQgPj4gNikgfCAxOTIpXG4gICAgICByZXN1bHQucHVzaCgocG9pbnQgJiA2MykgfCAxMjgpXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIDMtYnl0ZSBVVEYtOFxuICAgIGlmIChwb2ludCA8IDB4RDgwMCB8fCAocG9pbnQgPj0gMHhFMDAwICYmIHBvaW50IDwgMHgxMDAwMCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKChwb2ludCA+PiAxMikgfCAyMjQpXG4gICAgICByZXN1bHQucHVzaCgoKHBvaW50ID4+IDYpICYgNjMpIHwgMTI4KVxuICAgICAgcmVzdWx0LnB1c2goKHBvaW50ICYgNjMpIHwgMTI4KVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvLyA0LWJ5dGUgVVRGLThcbiAgICBpZiAocG9pbnQgPj0gMHgxMDAwMCAmJiBwb2ludCA8PSAweDEwRkZGRikge1xuICAgICAgcmVzdWx0LnB1c2goKHBvaW50ID4+IDE4KSB8IDI0MClcbiAgICAgIHJlc3VsdC5wdXNoKCgocG9pbnQgPj4gMTIpICYgNjMpIHwgMTI4KVxuICAgICAgcmVzdWx0LnB1c2goKChwb2ludCA+PiA2KSAmIDYzKSB8IDEyOClcbiAgICAgIHJlc3VsdC5wdXNoKChwb2ludCAmIDYzKSB8IDEyOClcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gSW52YWxpZCBjaGFyYWN0ZXJcbiAgICByZXN1bHQucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuYnVmZmVyXG59XG4iLCJjb25zdCBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIEthbmppRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLktBTkpJXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuS2FuamlEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDEzXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBLYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJpdEJ1ZmZlcikge1xuICBsZXQgaVxuXG4gIC8vIEluIHRoZSBTaGlmdCBKSVMgc3lzdGVtLCBLYW5qaSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSBhIHR3byBieXRlIGNvbWJpbmF0aW9uLlxuICAvLyBUaGVzZSBieXRlIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAgLy8gSklTIFggMDIwOCBnaXZlcyBkZXRhaWxzIG9mIHRoZSBzaGlmdCBjb2RlZCByZXByZXNlbnRhdGlvbi5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGxldCB2YWx1ZSA9IFV0aWxzLnRvU0pJUyh0aGlzLmRhdGFbaV0pXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweDgxNDAgdG8gMHg5RkZDOlxuICAgIGlmICh2YWx1ZSA+PSAweDgxNDAgJiYgdmFsdWUgPD0gMHg5RkZDKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweDgxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4ODE0MFxuXG4gICAgLy8gRm9yIGNoYXJhY3RlcnMgd2l0aCBTaGlmdCBKSVMgdmFsdWVzIGZyb20gMHhFMDQwIHRvIDB4RUJCRlxuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gMHhFMDQwICYmIHZhbHVlIDw9IDB4RUJCRikge1xuICAgICAgLy8gU3VidHJhY3QgMHhDMTQwIGZyb20gU2hpZnQgSklTIHZhbHVlXG4gICAgICB2YWx1ZSAtPSAweEMxNDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBTSklTIGNoYXJhY3RlcjogJyArIHRoaXMuZGF0YVtpXSArICdcXG4nICtcbiAgICAgICAgJ01ha2Ugc3VyZSB5b3VyIGNoYXJzZXQgaXMgVVRGLTgnKVxuICAgIH1cblxuICAgIC8vIE11bHRpcGx5IG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvZiByZXN1bHQgYnkgMHhDMFxuICAgIC8vIGFuZCBhZGQgbGVhc3Qgc2lnbmlmaWNhbnQgYnl0ZSB0byBwcm9kdWN0XG4gICAgdmFsdWUgPSAoKCh2YWx1ZSA+Pj4gOCkgJiAweGZmKSAqIDB4QzApICsgKHZhbHVlICYgMHhmZilcblxuICAgIC8vIENvbnZlcnQgcmVzdWx0IHRvIGEgMTMtYml0IGJpbmFyeSBzdHJpbmdcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEthbmppRGF0YVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDcmVhdGVkIDIwMDgtMDgtMTkuXG4gKlxuICogRGlqa3N0cmEgcGF0aC1maW5kaW5nIGZ1bmN0aW9ucy4gQWRhcHRlZCBmcm9tIHRoZSBEaWprc3RhciBQeXRob24gcHJvamVjdC5cbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMDhcbiAqICAgV3lhdHQgQmFsZHdpbiA8c2VsZkB3eWF0dGJhbGR3aW4uY29tPlxuICogICBBbGwgcmlnaHRzIHJlc2VydmVkXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICpcbiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbnZhciBkaWprc3RyYSA9IHtcbiAgc2luZ2xlX3NvdXJjZV9zaG9ydGVzdF9wYXRoczogZnVuY3Rpb24oZ3JhcGgsIHMsIGQpIHtcbiAgICAvLyBQcmVkZWNlc3NvciBtYXAgZm9yIGVhY2ggbm9kZSB0aGF0IGhhcyBiZWVuIGVuY291bnRlcmVkLlxuICAgIC8vIG5vZGUgSUQgPT4gcHJlZGVjZXNzb3Igbm9kZSBJRFxuICAgIHZhciBwcmVkZWNlc3NvcnMgPSB7fTtcblxuICAgIC8vIENvc3RzIG9mIHNob3J0ZXN0IHBhdGhzIGZyb20gcyB0byBhbGwgbm9kZXMgZW5jb3VudGVyZWQuXG4gICAgLy8gbm9kZSBJRCA9PiBjb3N0XG4gICAgdmFyIGNvc3RzID0ge307XG4gICAgY29zdHNbc10gPSAwO1xuXG4gICAgLy8gQ29zdHMgb2Ygc2hvcnRlc3QgcGF0aHMgZnJvbSBzIHRvIGFsbCBub2RlcyBlbmNvdW50ZXJlZDsgZGlmZmVycyBmcm9tXG4gICAgLy8gYGNvc3RzYCBpbiB0aGF0IGl0IHByb3ZpZGVzIGVhc3kgYWNjZXNzIHRvIHRoZSBub2RlIHRoYXQgY3VycmVudGx5IGhhc1xuICAgIC8vIHRoZSBrbm93biBzaG9ydGVzdCBwYXRoIGZyb20gcy5cbiAgICAvLyBYWFg6IERvIHdlIGFjdHVhbGx5IG5lZWQgYm90aCBgY29zdHNgIGFuZCBgb3BlbmA/XG4gICAgdmFyIG9wZW4gPSBkaWprc3RyYS5Qcmlvcml0eVF1ZXVlLm1ha2UoKTtcbiAgICBvcGVuLnB1c2gocywgMCk7XG5cbiAgICB2YXIgY2xvc2VzdCxcbiAgICAgICAgdSwgdixcbiAgICAgICAgY29zdF9vZl9zX3RvX3UsXG4gICAgICAgIGFkamFjZW50X25vZGVzLFxuICAgICAgICBjb3N0X29mX2UsXG4gICAgICAgIGNvc3Rfb2Zfc190b191X3BsdXNfY29zdF9vZl9lLFxuICAgICAgICBjb3N0X29mX3NfdG9fdixcbiAgICAgICAgZmlyc3RfdmlzaXQ7XG4gICAgd2hpbGUgKCFvcGVuLmVtcHR5KCkpIHtcbiAgICAgIC8vIEluIHRoZSBub2RlcyByZW1haW5pbmcgaW4gZ3JhcGggdGhhdCBoYXZlIGEga25vd24gY29zdCBmcm9tIHMsXG4gICAgICAvLyBmaW5kIHRoZSBub2RlLCB1LCB0aGF0IGN1cnJlbnRseSBoYXMgdGhlIHNob3J0ZXN0IHBhdGggZnJvbSBzLlxuICAgICAgY2xvc2VzdCA9IG9wZW4ucG9wKCk7XG4gICAgICB1ID0gY2xvc2VzdC52YWx1ZTtcbiAgICAgIGNvc3Rfb2Zfc190b191ID0gY2xvc2VzdC5jb3N0O1xuXG4gICAgICAvLyBHZXQgbm9kZXMgYWRqYWNlbnQgdG8gdS4uLlxuICAgICAgYWRqYWNlbnRfbm9kZXMgPSBncmFwaFt1XSB8fCB7fTtcblxuICAgICAgLy8gLi4uYW5kIGV4cGxvcmUgdGhlIGVkZ2VzIHRoYXQgY29ubmVjdCB1IHRvIHRob3NlIG5vZGVzLCB1cGRhdGluZ1xuICAgICAgLy8gdGhlIGNvc3Qgb2YgdGhlIHNob3J0ZXN0IHBhdGhzIHRvIGFueSBvciBhbGwgb2YgdGhvc2Ugbm9kZXMgYXNcbiAgICAgIC8vIG5lY2Vzc2FyeS4gdiBpcyB0aGUgbm9kZSBhY3Jvc3MgdGhlIGN1cnJlbnQgZWRnZSBmcm9tIHUuXG4gICAgICBmb3IgKHYgaW4gYWRqYWNlbnRfbm9kZXMpIHtcbiAgICAgICAgaWYgKGFkamFjZW50X25vZGVzLmhhc093blByb3BlcnR5KHYpKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBjb3N0IG9mIHRoZSBlZGdlIHJ1bm5pbmcgZnJvbSB1IHRvIHYuXG4gICAgICAgICAgY29zdF9vZl9lID0gYWRqYWNlbnRfbm9kZXNbdl07XG5cbiAgICAgICAgICAvLyBDb3N0IG9mIHMgdG8gdSBwbHVzIHRoZSBjb3N0IG9mIHUgdG8gdiBhY3Jvc3MgZS0tdGhpcyBpcyAqYSpcbiAgICAgICAgICAvLyBjb3N0IGZyb20gcyB0byB2IHRoYXQgbWF5IG9yIG1heSBub3QgYmUgbGVzcyB0aGFuIHRoZSBjdXJyZW50XG4gICAgICAgICAgLy8ga25vd24gY29zdCB0byB2LlxuICAgICAgICAgIGNvc3Rfb2Zfc190b191X3BsdXNfY29zdF9vZl9lID0gY29zdF9vZl9zX3RvX3UgKyBjb3N0X29mX2U7XG5cbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHZpc2l0ZWQgdiB5ZXQgT1IgaWYgdGhlIGN1cnJlbnQga25vd24gY29zdCBmcm9tIHMgdG9cbiAgICAgICAgICAvLyB2IGlzIGdyZWF0ZXIgdGhhbiB0aGUgbmV3IGNvc3Qgd2UganVzdCBmb3VuZCAoY29zdCBvZiBzIHRvIHUgcGx1c1xuICAgICAgICAgIC8vIGNvc3Qgb2YgdSB0byB2IGFjcm9zcyBlKSwgdXBkYXRlIHYncyBjb3N0IGluIHRoZSBjb3N0IGxpc3QgYW5kXG4gICAgICAgICAgLy8gdXBkYXRlIHYncyBwcmVkZWNlc3NvciBpbiB0aGUgcHJlZGVjZXNzb3IgbGlzdCAoaXQncyBub3cgdSkuXG4gICAgICAgICAgY29zdF9vZl9zX3RvX3YgPSBjb3N0c1t2XTtcbiAgICAgICAgICBmaXJzdF92aXNpdCA9ICh0eXBlb2YgY29zdHNbdl0gPT09ICd1bmRlZmluZWQnKTtcbiAgICAgICAgICBpZiAoZmlyc3RfdmlzaXQgfHwgY29zdF9vZl9zX3RvX3YgPiBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSkge1xuICAgICAgICAgICAgY29zdHNbdl0gPSBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZTtcbiAgICAgICAgICAgIG9wZW4ucHVzaCh2LCBjb3N0X29mX3NfdG9fdV9wbHVzX2Nvc3Rfb2ZfZSk7XG4gICAgICAgICAgICBwcmVkZWNlc3NvcnNbdl0gPSB1O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvc3RzW2RdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIG1zZyA9IFsnQ291bGQgbm90IGZpbmQgYSBwYXRoIGZyb20gJywgcywgJyB0byAnLCBkLCAnLiddLmpvaW4oJycpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWRlY2Vzc29ycztcbiAgfSxcblxuICBleHRyYWN0X3Nob3J0ZXN0X3BhdGhfZnJvbV9wcmVkZWNlc3Nvcl9saXN0OiBmdW5jdGlvbihwcmVkZWNlc3NvcnMsIGQpIHtcbiAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICB2YXIgdSA9IGQ7XG4gICAgdmFyIHByZWRlY2Vzc29yO1xuICAgIHdoaWxlICh1KSB7XG4gICAgICBub2Rlcy5wdXNoKHUpO1xuICAgICAgcHJlZGVjZXNzb3IgPSBwcmVkZWNlc3NvcnNbdV07XG4gICAgICB1ID0gcHJlZGVjZXNzb3JzW3VdO1xuICAgIH1cbiAgICBub2Rlcy5yZXZlcnNlKCk7XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9LFxuXG4gIGZpbmRfcGF0aDogZnVuY3Rpb24oZ3JhcGgsIHMsIGQpIHtcbiAgICB2YXIgcHJlZGVjZXNzb3JzID0gZGlqa3N0cmEuc2luZ2xlX3NvdXJjZV9zaG9ydGVzdF9wYXRocyhncmFwaCwgcywgZCk7XG4gICAgcmV0dXJuIGRpamtzdHJhLmV4dHJhY3Rfc2hvcnRlc3RfcGF0aF9mcm9tX3ByZWRlY2Vzc29yX2xpc3QoXG4gICAgICBwcmVkZWNlc3NvcnMsIGQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBIHZlcnkgbmFpdmUgcHJpb3JpdHkgcXVldWUgaW1wbGVtZW50YXRpb24uXG4gICAqL1xuICBQcmlvcml0eVF1ZXVlOiB7XG4gICAgbWFrZTogZnVuY3Rpb24gKG9wdHMpIHtcbiAgICAgIHZhciBUID0gZGlqa3N0cmEuUHJpb3JpdHlRdWV1ZSxcbiAgICAgICAgICB0ID0ge30sXG4gICAgICAgICAga2V5O1xuICAgICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgICBmb3IgKGtleSBpbiBUKSB7XG4gICAgICAgIGlmIChULmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB0W2tleV0gPSBUW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHQucXVldWUgPSBbXTtcbiAgICAgIHQuc29ydGVyID0gb3B0cy5zb3J0ZXIgfHwgVC5kZWZhdWx0X3NvcnRlcjtcbiAgICAgIHJldHVybiB0O1xuICAgIH0sXG5cbiAgICBkZWZhdWx0X3NvcnRlcjogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmNvc3QgLSBiLmNvc3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBpdGVtIHRvIHRoZSBxdWV1ZSBhbmQgZW5zdXJlIHRoZSBoaWdoZXN0IHByaW9yaXR5IGVsZW1lbnRcbiAgICAgKiBpcyBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlLlxuICAgICAqL1xuICAgIHB1c2g6IGZ1bmN0aW9uICh2YWx1ZSwgY29zdCkge1xuICAgICAgdmFyIGl0ZW0gPSB7dmFsdWU6IHZhbHVlLCBjb3N0OiBjb3N0fTtcbiAgICAgIHRoaXMucXVldWUucHVzaChpdGVtKTtcbiAgICAgIHRoaXMucXVldWUuc29ydCh0aGlzLnNvcnRlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgaGlnaGVzdCBwcmlvcml0eSBlbGVtZW50IGluIHRoZSBxdWV1ZS5cbiAgICAgKi9cbiAgICBwb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgfSxcblxuICAgIGVtcHR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWV1ZS5sZW5ndGggPT09IDA7XG4gICAgfVxuICB9XG59O1xuXG5cbi8vIG5vZGUuanMgbW9kdWxlIGV4cG9ydHNcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGRpamtzdHJhO1xufVxuIiwiY29uc3QgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5jb25zdCBOdW1lcmljRGF0YSA9IHJlcXVpcmUoJy4vbnVtZXJpYy1kYXRhJylcbmNvbnN0IEFscGhhbnVtZXJpY0RhdGEgPSByZXF1aXJlKCcuL2FscGhhbnVtZXJpYy1kYXRhJylcbmNvbnN0IEJ5dGVEYXRhID0gcmVxdWlyZSgnLi9ieXRlLWRhdGEnKVxuY29uc3QgS2FuamlEYXRhID0gcmVxdWlyZSgnLi9rYW5qaS1kYXRhJylcbmNvbnN0IFJlZ2V4ID0gcmVxdWlyZSgnLi9yZWdleCcpXG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3QgZGlqa3N0cmEgPSByZXF1aXJlKCdkaWprc3RyYWpzJylcblxuLyoqXG4gKiBSZXR1cm5zIFVURjggYnl0ZSBsZW5ndGhcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciBJbnB1dCBzdHJpbmdcbiAqIEByZXR1cm4ge051bWJlcn0gICAgIE51bWJlciBvZiBieXRlXG4gKi9cbmZ1bmN0aW9uIGdldFN0cmluZ0J5dGVMZW5ndGggKHN0cikge1xuICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpLmxlbmd0aFxufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2Ygc2VnbWVudHMgb2YgdGhlIHNwZWNpZmllZCBtb2RlXG4gKiBmcm9tIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtICB7TW9kZX0gICBtb2RlIFNlZ21lbnQgbW9kZVxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgIFN0cmluZyB0byBwcm9jZXNzXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBnZXRTZWdtZW50cyAocmVnZXgsIG1vZGUsIHN0cikge1xuICBjb25zdCBzZWdtZW50cyA9IFtdXG4gIGxldCByZXN1bHRcblxuICB3aGlsZSAoKHJlc3VsdCA9IHJlZ2V4LmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgIGRhdGE6IHJlc3VsdFswXSxcbiAgICAgIGluZGV4OiByZXN1bHQuaW5kZXgsXG4gICAgICBtb2RlOiBtb2RlLFxuICAgICAgbGVuZ3RoOiByZXN1bHRbMF0ubGVuZ3RoXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50c1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGEgc2VyaWVzIG9mIHNlZ21lbnRzIHdpdGggdGhlIGFwcHJvcHJpYXRlXG4gKiBtb2RlcyBmcm9tIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhU3RyIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgIEFycmF5IG9mIG9iamVjdCB3aXRoIHNlZ21lbnRzIGRhdGFcbiAqL1xuZnVuY3Rpb24gZ2V0U2VnbWVudHNGcm9tU3RyaW5nIChkYXRhU3RyKSB7XG4gIGNvbnN0IG51bVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5OVU1FUklDLCBNb2RlLk5VTUVSSUMsIGRhdGFTdHIpXG4gIGNvbnN0IGFscGhhTnVtU2VncyA9IGdldFNlZ21lbnRzKFJlZ2V4LkFMUEhBTlVNRVJJQywgTW9kZS5BTFBIQU5VTUVSSUMsIGRhdGFTdHIpXG4gIGxldCBieXRlU2Vnc1xuICBsZXQga2FuamlTZWdzXG5cbiAgaWYgKFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKSB7XG4gICAgYnl0ZVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5CWVRFLCBNb2RlLkJZVEUsIGRhdGFTdHIpXG4gICAga2FuamlTZWdzID0gZ2V0U2VnbWVudHMoUmVnZXguS0FOSkksIE1vZGUuS0FOSkksIGRhdGFTdHIpXG4gIH0gZWxzZSB7XG4gICAgYnl0ZVNlZ3MgPSBnZXRTZWdtZW50cyhSZWdleC5CWVRFX0tBTkpJLCBNb2RlLkJZVEUsIGRhdGFTdHIpXG4gICAga2FuamlTZWdzID0gW11cbiAgfVxuXG4gIGNvbnN0IHNlZ3MgPSBudW1TZWdzLmNvbmNhdChhbHBoYU51bVNlZ3MsIGJ5dGVTZWdzLCBrYW5qaVNlZ3MpXG5cbiAgcmV0dXJuIHNlZ3NcbiAgICAuc29ydChmdW5jdGlvbiAoczEsIHMyKSB7XG4gICAgICByZXR1cm4gczEuaW5kZXggLSBzMi5pbmRleFxuICAgIH0pXG4gICAgLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiBvYmouZGF0YSxcbiAgICAgICAgbW9kZTogb2JqLm1vZGUsXG4gICAgICAgIGxlbmd0aDogb2JqLmxlbmd0aFxuICAgICAgfVxuICAgIH0pXG59XG5cbi8qKlxuICogUmV0dXJucyBob3cgbWFueSBiaXRzIGFyZSBuZWVkZWQgdG8gZW5jb2RlIGEgc3RyaW5nIG9mXG4gKiBzcGVjaWZpZWQgbGVuZ3RoIHdpdGggdGhlIHNwZWNpZmllZCBtb2RlXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBsZW5ndGggU3RyaW5nIGxlbmd0aFxuICogQHBhcmFtICB7TW9kZX0gbW9kZSAgICAgU2VnbWVudCBtb2RlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgICBCaXQgbGVuZ3RoXG4gKi9cbmZ1bmN0aW9uIGdldFNlZ21lbnRCaXRzTGVuZ3RoIChsZW5ndGgsIG1vZGUpIHtcbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSBNb2RlLk5VTUVSSUM6XG4gICAgICByZXR1cm4gTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gICAgY2FzZSBNb2RlLkFMUEhBTlVNRVJJQzpcbiAgICAgIHJldHVybiBBbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgobGVuZ3RoKVxuICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgIHJldHVybiBLYW5qaURhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gICAgY2FzZSBNb2RlLkJZVEU6XG4gICAgICByZXR1cm4gQnl0ZURhdGEuZ2V0Qml0c0xlbmd0aChsZW5ndGgpXG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZXMgYWRqYWNlbnQgc2VnbWVudHMgd2hpY2ggaGF2ZSB0aGUgc2FtZSBtb2RlXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IHNlZ3MgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZVNlZ21lbnRzIChzZWdzKSB7XG4gIHJldHVybiBzZWdzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyKSB7XG4gICAgY29uc3QgcHJldlNlZyA9IGFjYy5sZW5ndGggLSAxID49IDAgPyBhY2NbYWNjLmxlbmd0aCAtIDFdIDogbnVsbFxuICAgIGlmIChwcmV2U2VnICYmIHByZXZTZWcubW9kZSA9PT0gY3Vyci5tb2RlKSB7XG4gICAgICBhY2NbYWNjLmxlbmd0aCAtIDFdLmRhdGEgKz0gY3Vyci5kYXRhXG4gICAgICByZXR1cm4gYWNjXG4gICAgfVxuXG4gICAgYWNjLnB1c2goY3VycilcbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBhIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIG5vZGVzIGNvbWJpbmF0aW9uIHdoaWNoXG4gKiB3aWxsIGJlIHVzZWQgdG8gYnVpbGQgYSBzZWdtZW50cyBncmFwaC5cbiAqXG4gKiBOb2RlcyBhcmUgZGl2aWRlZCBieSBncm91cHMuIEVhY2ggZ3JvdXAgd2lsbCBjb250YWluIGEgbGlzdCBvZiBhbGwgdGhlIG1vZGVzXG4gKiBpbiB3aGljaCBpcyBwb3NzaWJsZSB0byBlbmNvZGUgdGhlIGdpdmVuIHRleHQuXG4gKlxuICogRm9yIGV4YW1wbGUgdGhlIHRleHQgJzEyMzQ1JyBjYW4gYmUgZW5jb2RlZCBhcyBOdW1lcmljLCBBbHBoYW51bWVyaWMgb3IgQnl0ZS5cbiAqIFRoZSBncm91cCBmb3IgJzEyMzQ1JyB3aWxsIGNvbnRhaW4gdGhlbiAzIG9iamVjdHMsIG9uZSBmb3IgZWFjaFxuICogcG9zc2libGUgZW5jb2RpbmcgbW9kZS5cbiAqXG4gKiBFYWNoIG5vZGUgcmVwcmVzZW50cyBhIHBvc3NpYmxlIHNlZ21lbnQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IHNlZ3MgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICogQHJldHVybiB7QXJyYXl9ICAgICAgQXJyYXkgb2Ygb2JqZWN0IHdpdGggc2VnbWVudHMgZGF0YVxuICovXG5mdW5jdGlvbiBidWlsZE5vZGVzIChzZWdzKSB7XG4gIGNvbnN0IG5vZGVzID0gW11cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnID0gc2Vnc1tpXVxuXG4gICAgc3dpdGNoIChzZWcubW9kZSkge1xuICAgICAgY2FzZSBNb2RlLk5VTUVSSUM6XG4gICAgICAgIG5vZGVzLnB1c2goW3NlZyxcbiAgICAgICAgICB7IGRhdGE6IHNlZy5kYXRhLCBtb2RlOiBNb2RlLkFMUEhBTlVNRVJJQywgbGVuZ3RoOiBzZWcubGVuZ3RoIH0sXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IHNlZy5sZW5ndGggfVxuICAgICAgICBdKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBNb2RlLkFMUEhBTlVNRVJJQzpcbiAgICAgICAgbm9kZXMucHVzaChbc2VnLFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBzZWcubGVuZ3RoIH1cbiAgICAgICAgXSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgICAgbm9kZXMucHVzaChbc2VnLFxuICAgICAgICAgIHsgZGF0YTogc2VnLmRhdGEsIG1vZGU6IE1vZGUuQllURSwgbGVuZ3RoOiBnZXRTdHJpbmdCeXRlTGVuZ3RoKHNlZy5kYXRhKSB9XG4gICAgICAgIF0pXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgICAgbm9kZXMucHVzaChbXG4gICAgICAgICAgeyBkYXRhOiBzZWcuZGF0YSwgbW9kZTogTW9kZS5CWVRFLCBsZW5ndGg6IGdldFN0cmluZ0J5dGVMZW5ndGgoc2VnLmRhdGEpIH1cbiAgICAgICAgXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbm9kZXNcbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBncmFwaCBmcm9tIGEgbGlzdCBvZiBub2Rlcy5cbiAqIEFsbCBzZWdtZW50cyBpbiBlYWNoIG5vZGUgZ3JvdXAgd2lsbCBiZSBjb25uZWN0ZWQgd2l0aCBhbGwgdGhlIHNlZ21lbnRzIG9mXG4gKiB0aGUgbmV4dCBncm91cCBhbmQgc28gb24uXG4gKlxuICogQXQgZWFjaCBjb25uZWN0aW9uIHdpbGwgYmUgYXNzaWduZWQgYSB3ZWlnaHQgZGVwZW5kaW5nIG9uIHRoZVxuICogc2VnbWVudCdzIGJ5dGUgbGVuZ3RoLlxuICpcbiAqIEBwYXJhbSAge0FycmF5fSBub2RlcyAgICBBcnJheSBvZiBvYmplY3Qgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgR3JhcGggb2YgYWxsIHBvc3NpYmxlIHNlZ21lbnRzXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkR3JhcGggKG5vZGVzLCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHRhYmxlID0ge31cbiAgY29uc3QgZ3JhcGggPSB7IHN0YXJ0OiB7fSB9XG4gIGxldCBwcmV2Tm9kZUlkcyA9IFsnc3RhcnQnXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBub2RlR3JvdXAgPSBub2Rlc1tpXVxuICAgIGNvbnN0IGN1cnJlbnROb2RlSWRzID0gW11cblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZUdyb3VwLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBub2RlID0gbm9kZUdyb3VwW2pdXG4gICAgICBjb25zdCBrZXkgPSAnJyArIGkgKyBqXG5cbiAgICAgIGN1cnJlbnROb2RlSWRzLnB1c2goa2V5KVxuICAgICAgdGFibGVba2V5XSA9IHsgbm9kZTogbm9kZSwgbGFzdENvdW50OiAwIH1cbiAgICAgIGdyYXBoW2tleV0gPSB7fVxuXG4gICAgICBmb3IgKGxldCBuID0gMDsgbiA8IHByZXZOb2RlSWRzLmxlbmd0aDsgbisrKSB7XG4gICAgICAgIGNvbnN0IHByZXZOb2RlSWQgPSBwcmV2Tm9kZUlkc1tuXVxuXG4gICAgICAgIGlmICh0YWJsZVtwcmV2Tm9kZUlkXSAmJiB0YWJsZVtwcmV2Tm9kZUlkXS5ub2RlLm1vZGUgPT09IG5vZGUubW9kZSkge1xuICAgICAgICAgIGdyYXBoW3ByZXZOb2RlSWRdW2tleV0gPVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50ICsgbm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgLVxuICAgICAgICAgICAgZ2V0U2VnbWVudEJpdHNMZW5ndGgodGFibGVbcHJldk5vZGVJZF0ubGFzdENvdW50LCBub2RlLm1vZGUpXG5cbiAgICAgICAgICB0YWJsZVtwcmV2Tm9kZUlkXS5sYXN0Q291bnQgKz0gbm9kZS5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGFibGVbcHJldk5vZGVJZF0pIHRhYmxlW3ByZXZOb2RlSWRdLmxhc3RDb3VudCA9IG5vZGUubGVuZ3RoXG5cbiAgICAgICAgICBncmFwaFtwcmV2Tm9kZUlkXVtrZXldID0gZ2V0U2VnbWVudEJpdHNMZW5ndGgobm9kZS5sZW5ndGgsIG5vZGUubW9kZSkgK1xuICAgICAgICAgICAgNCArIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yKG5vZGUubW9kZSwgdmVyc2lvbikgLy8gc3dpdGNoIGNvc3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZOb2RlSWRzID0gY3VycmVudE5vZGVJZHNcbiAgfVxuXG4gIGZvciAobGV0IG4gPSAwOyBuIDwgcHJldk5vZGVJZHMubGVuZ3RoOyBuKyspIHtcbiAgICBncmFwaFtwcmV2Tm9kZUlkc1tuXV0uZW5kID0gMFxuICB9XG5cbiAgcmV0dXJuIHsgbWFwOiBncmFwaCwgdGFibGU6IHRhYmxlIH1cbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBzZWdtZW50IGZyb20gYSBzcGVjaWZpZWQgZGF0YSBhbmQgbW9kZS5cbiAqIElmIGEgbW9kZSBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgbW9yZSBzdWl0YWJsZSB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhICAgICAgICAgICAgIElucHV0IGRhdGFcbiAqIEBwYXJhbSAge01vZGUgfCBTdHJpbmd9IG1vZGVzSGludCBEYXRhIG1vZGVcbiAqIEByZXR1cm4ge1NlZ21lbnR9ICAgICAgICAgICAgICAgICBTZWdtZW50XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU2luZ2xlU2VnbWVudCAoZGF0YSwgbW9kZXNIaW50KSB7XG4gIGxldCBtb2RlXG4gIGNvbnN0IGJlc3RNb2RlID0gTW9kZS5nZXRCZXN0TW9kZUZvckRhdGEoZGF0YSlcblxuICBtb2RlID0gTW9kZS5mcm9tKG1vZGVzSGludCwgYmVzdE1vZGUpXG5cbiAgLy8gTWFrZSBzdXJlIGRhdGEgY2FuIGJlIGVuY29kZWRcbiAgaWYgKG1vZGUgIT09IE1vZGUuQllURSAmJiBtb2RlLmJpdCA8IGJlc3RNb2RlLmJpdCkge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgZGF0YSArICdcIicgK1xuICAgICAgJyBjYW5ub3QgYmUgZW5jb2RlZCB3aXRoIG1vZGUgJyArIE1vZGUudG9TdHJpbmcobW9kZSkgK1xuICAgICAgJy5cXG4gU3VnZ2VzdGVkIG1vZGUgaXM6ICcgKyBNb2RlLnRvU3RyaW5nKGJlc3RNb2RlKSlcbiAgfVxuXG4gIC8vIFVzZSBNb2RlLkJZVEUgaWYgS2Fuamkgc3VwcG9ydCBpcyBkaXNhYmxlZFxuICBpZiAobW9kZSA9PT0gTW9kZS5LQU5KSSAmJiAhVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpIHtcbiAgICBtb2RlID0gTW9kZS5CWVRFXG4gIH1cblxuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlIE1vZGUuTlVNRVJJQzpcbiAgICAgIHJldHVybiBuZXcgTnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5BTFBIQU5VTUVSSUM6XG4gICAgICByZXR1cm4gbmV3IEFscGhhbnVtZXJpY0RhdGEoZGF0YSlcblxuICAgIGNhc2UgTW9kZS5LQU5KSTpcbiAgICAgIHJldHVybiBuZXcgS2FuamlEYXRhKGRhdGEpXG5cbiAgICBjYXNlIE1vZGUuQllURTpcbiAgICAgIHJldHVybiBuZXcgQnl0ZURhdGEoZGF0YSlcbiAgfVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhIGxpc3Qgb2Ygc2VnbWVudHMgZnJvbSBhbiBhcnJheS5cbiAqIEFycmF5IGNhbiBjb250YWluIFN0cmluZ3Mgb3IgT2JqZWN0cyB3aXRoIHNlZ21lbnQncyBpbmZvLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYSBzdHJpbmcsIHdpbGwgYmUgZ2VuZXJhdGVkIGEgc2VnbWVudCB3aXRoIHRoZSBnaXZlblxuICogc3RyaW5nIGFuZCB0aGUgbW9yZSBhcHByb3ByaWF0ZSBlbmNvZGluZyBtb2RlLlxuICpcbiAqIEZvciBlYWNoIGl0ZW0gd2hpY2ggaXMgYW4gb2JqZWN0LCB3aWxsIGJlIGdlbmVyYXRlZCBhIHNlZ21lbnQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGRhdGEgYW5kIG1vZGUuXG4gKiBPYmplY3RzIG11c3QgY29udGFpbiBhdCBsZWFzdCB0aGUgcHJvcGVydHkgXCJkYXRhXCIuXG4gKiBJZiBwcm9wZXJ0eSBcIm1vZGVcIiBpcyBub3QgcHJlc2VudCwgdGhlIG1vcmUgc3VpdGFibGUgbW9kZSB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFycmF5IEFycmF5IG9mIG9iamVjdHMgd2l0aCBzZWdtZW50cyBkYXRhXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgQXJyYXkgb2YgU2VnbWVudHNcbiAqL1xuZXhwb3J0cy5mcm9tQXJyYXkgPSBmdW5jdGlvbiBmcm9tQXJyYXkgKGFycmF5KSB7XG4gIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc2VnKSB7XG4gICAgaWYgKHR5cGVvZiBzZWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLCBudWxsKSlcbiAgICB9IGVsc2UgaWYgKHNlZy5kYXRhKSB7XG4gICAgICBhY2MucHVzaChidWlsZFNpbmdsZVNlZ21lbnQoc2VnLmRhdGEsIHNlZy5tb2RlKSlcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjXG4gIH0sIFtdKVxufVxuXG4vKipcbiAqIEJ1aWxkcyBhbiBvcHRpbWl6ZWQgc2VxdWVuY2Ugb2Ygc2VnbWVudHMgZnJvbSBhIHN0cmluZyxcbiAqIHdoaWNoIHdpbGwgcHJvZHVjZSB0aGUgc2hvcnRlc3QgcG9zc2libGUgYml0c3RyZWFtLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gZGF0YSAgICBJbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBzZWdtZW50c1xuICovXG5leHBvcnRzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiBmcm9tU3RyaW5nIChkYXRhLCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHNlZ3MgPSBnZXRTZWdtZW50c0Zyb21TdHJpbmcoZGF0YSwgVXRpbHMuaXNLYW5qaU1vZGVFbmFibGVkKCkpXG5cbiAgY29uc3Qgbm9kZXMgPSBidWlsZE5vZGVzKHNlZ3MpXG4gIGNvbnN0IGdyYXBoID0gYnVpbGRHcmFwaChub2RlcywgdmVyc2lvbilcbiAgY29uc3QgcGF0aCA9IGRpamtzdHJhLmZpbmRfcGF0aChncmFwaC5tYXAsICdzdGFydCcsICdlbmQnKVxuXG4gIGNvbnN0IG9wdGltaXplZFNlZ3MgPSBbXVxuICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgb3B0aW1pemVkU2Vncy5wdXNoKGdyYXBoLnRhYmxlW3BhdGhbaV1dLm5vZGUpXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5mcm9tQXJyYXkobWVyZ2VTZWdtZW50cyhvcHRpbWl6ZWRTZWdzKSlcbn1cblxuLyoqXG4gKiBTcGxpdHMgYSBzdHJpbmcgaW4gdmFyaW91cyBzZWdtZW50cyB3aXRoIHRoZSBtb2RlcyB3aGljaFxuICogYmVzdCByZXByZXNlbnQgdGhlaXIgY29udGVudC5cbiAqIFRoZSBwcm9kdWNlZCBzZWdtZW50cyBhcmUgZmFyIGZyb20gYmVpbmcgb3B0aW1pemVkLlxuICogVGhlIG91dHB1dCBvZiB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCB0byBlc3RpbWF0ZSBhIFFSIENvZGUgdmVyc2lvblxuICogd2hpY2ggbWF5IGNvbnRhaW4gdGhlIGRhdGEuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBkYXRhIElucHV0IHN0cmluZ1xuICogQHJldHVybiB7QXJyYXl9ICAgICAgIEFycmF5IG9mIHNlZ21lbnRzXG4gKi9cbmV4cG9ydHMucmF3U3BsaXQgPSBmdW5jdGlvbiByYXdTcGxpdCAoZGF0YSkge1xuICByZXR1cm4gZXhwb3J0cy5mcm9tQXJyYXkoXG4gICAgZ2V0U2VnbWVudHNGcm9tU3RyaW5nKGRhdGEsIFV0aWxzLmlzS2FuamlNb2RlRW5hYmxlZCgpKVxuICApXG59XG4iLCJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3QgRUNMZXZlbCA9IHJlcXVpcmUoJy4vZXJyb3ItY29ycmVjdGlvbi1sZXZlbCcpXG5jb25zdCBCaXRCdWZmZXIgPSByZXF1aXJlKCcuL2JpdC1idWZmZXInKVxuY29uc3QgQml0TWF0cml4ID0gcmVxdWlyZSgnLi9iaXQtbWF0cml4JylcbmNvbnN0IEFsaWdubWVudFBhdHRlcm4gPSByZXF1aXJlKCcuL2FsaWdubWVudC1wYXR0ZXJuJylcbmNvbnN0IEZpbmRlclBhdHRlcm4gPSByZXF1aXJlKCcuL2ZpbmRlci1wYXR0ZXJuJylcbmNvbnN0IE1hc2tQYXR0ZXJuID0gcmVxdWlyZSgnLi9tYXNrLXBhdHRlcm4nKVxuY29uc3QgRUNDb2RlID0gcmVxdWlyZSgnLi9lcnJvci1jb3JyZWN0aW9uLWNvZGUnKVxuY29uc3QgUmVlZFNvbG9tb25FbmNvZGVyID0gcmVxdWlyZSgnLi9yZWVkLXNvbG9tb24tZW5jb2RlcicpXG5jb25zdCBWZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uJylcbmNvbnN0IEZvcm1hdEluZm8gPSByZXF1aXJlKCcuL2Zvcm1hdC1pbmZvJylcbmNvbnN0IE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuY29uc3QgU2VnbWVudHMgPSByZXF1aXJlKCcuL3NlZ21lbnRzJylcblxuLyoqXG4gKiBRUkNvZGUgZm9yIEphdmFTY3JpcHRcbiAqXG4gKiBtb2RpZmllZCBieSBSeWFuIERheSBmb3Igbm9kZWpzIHN1cHBvcnRcbiAqIENvcHlyaWdodCAoYykgMjAxMSBSeWFuIERheVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqICAgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAqXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUVJDb2RlIGZvciBKYXZhU2NyaXB0XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDA5IEthenVoaWtvIEFyYXNlXG4vL1xuLy8gVVJMOiBodHRwOi8vd3d3LmQtcHJvamVjdC5jb20vXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuLy8gICBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuLy9cbi8vIFRoZSB3b3JkIFwiUVIgQ29kZVwiIGlzIHJlZ2lzdGVyZWQgdHJhZGVtYXJrIG9mXG4vLyBERU5TTyBXQVZFIElOQ09SUE9SQVRFRFxuLy8gICBodHRwOi8vd3d3LmRlbnNvLXdhdmUuY29tL3FyY29kZS9mYXFwYXRlbnQtZS5odG1sXG4vL1xuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiovXG5cbi8qKlxuICogQWRkIGZpbmRlciBwYXR0ZXJucyBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIEBwYXJhbSAge0JpdE1hdHJpeH0gbWF0cml4ICBNb2R1bGVzIG1hdHJpeFxuICogQHBhcmFtICB7TnVtYmVyfSAgICB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICovXG5mdW5jdGlvbiBzZXR1cEZpbmRlclBhdHRlcm4gKG1hdHJpeCwgdmVyc2lvbikge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgY29uc3QgcG9zID0gRmluZGVyUGF0dGVybi5nZXRQb3NpdGlvbnModmVyc2lvbilcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IHBvc1tpXVswXVxuICAgIGNvbnN0IGNvbCA9IHBvc1tpXVsxXVxuXG4gICAgZm9yIChsZXQgciA9IC0xOyByIDw9IDc7IHIrKykge1xuICAgICAgaWYgKHJvdyArIHIgPD0gLTEgfHwgc2l6ZSA8PSByb3cgKyByKSBjb250aW51ZVxuXG4gICAgICBmb3IgKGxldCBjID0gLTE7IGMgPD0gNzsgYysrKSB7XG4gICAgICAgIGlmIChjb2wgKyBjIDw9IC0xIHx8IHNpemUgPD0gY29sICsgYykgY29udGludWVcblxuICAgICAgICBpZiAoKHIgPj0gMCAmJiByIDw9IDYgJiYgKGMgPT09IDAgfHwgYyA9PT0gNikpIHx8XG4gICAgICAgICAgKGMgPj0gMCAmJiBjIDw9IDYgJiYgKHIgPT09IDAgfHwgciA9PT0gNikpIHx8XG4gICAgICAgICAgKHIgPj0gMiAmJiByIDw9IDQgJiYgYyA+PSAyICYmIGMgPD0gNCkpIHtcbiAgICAgICAgICBtYXRyaXguc2V0KHJvdyArIHIsIGNvbCArIGMsIHRydWUsIHRydWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFkZCB0aW1pbmcgcGF0dGVybiBiaXRzIHRvIG1hdHJpeFxuICpcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgYmVmb3JlIHtAbGluayBzZXR1cEFsaWdubWVudFBhdHRlcm59XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggTW9kdWxlcyBtYXRyaXhcbiAqL1xuZnVuY3Rpb24gc2V0dXBUaW1pbmdQYXR0ZXJuIChtYXRyaXgpIHtcbiAgY29uc3Qgc2l6ZSA9IG1hdHJpeC5zaXplXG5cbiAgZm9yIChsZXQgciA9IDg7IHIgPCBzaXplIC0gODsgcisrKSB7XG4gICAgY29uc3QgdmFsdWUgPSByICUgMiA9PT0gMFxuICAgIG1hdHJpeC5zZXQociwgNiwgdmFsdWUsIHRydWUpXG4gICAgbWF0cml4LnNldCg2LCByLCB2YWx1ZSwgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEFkZCBhbGlnbm1lbnQgcGF0dGVybnMgYml0cyB0byBtYXRyaXhcbiAqXG4gKiBOb3RlOiB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGFmdGVyIHtAbGluayBzZXR1cFRpbWluZ1BhdHRlcm59XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwQWxpZ25tZW50UGF0dGVybiAobWF0cml4LCB2ZXJzaW9uKSB7XG4gIGNvbnN0IHBvcyA9IEFsaWdubWVudFBhdHRlcm4uZ2V0UG9zaXRpb25zKHZlcnNpb24pXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByb3cgPSBwb3NbaV1bMF1cbiAgICBjb25zdCBjb2wgPSBwb3NbaV1bMV1cblxuICAgIGZvciAobGV0IHIgPSAtMjsgciA8PSAyOyByKyspIHtcbiAgICAgIGZvciAobGV0IGMgPSAtMjsgYyA8PSAyOyBjKyspIHtcbiAgICAgICAgaWYgKHIgPT09IC0yIHx8IHIgPT09IDIgfHwgYyA9PT0gLTIgfHwgYyA9PT0gMiB8fFxuICAgICAgICAgIChyID09PSAwICYmIGMgPT09IDApKSB7XG4gICAgICAgICAgbWF0cml4LnNldChyb3cgKyByLCBjb2wgKyBjLCB0cnVlLCB0cnVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeC5zZXQocm93ICsgciwgY29sICsgYywgZmFsc2UsIHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgdmVyc2lvbiBpbmZvIGJpdHMgdG8gbWF0cml4XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSBtYXRyaXggIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKi9cbmZ1bmN0aW9uIHNldHVwVmVyc2lvbkluZm8gKG1hdHJpeCwgdmVyc2lvbikge1xuICBjb25zdCBzaXplID0gbWF0cml4LnNpemVcbiAgY29uc3QgYml0cyA9IFZlcnNpb24uZ2V0RW5jb2RlZEJpdHModmVyc2lvbilcbiAgbGV0IHJvdywgY29sLCBtb2RcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE4OyBpKyspIHtcbiAgICByb3cgPSBNYXRoLmZsb29yKGkgLyAzKVxuICAgIGNvbCA9IGkgJSAzICsgc2l6ZSAtIDggLSAzXG4gICAgbW9kID0gKChiaXRzID4+IGkpICYgMSkgPT09IDFcblxuICAgIG1hdHJpeC5zZXQocm93LCBjb2wsIG1vZCwgdHJ1ZSlcbiAgICBtYXRyaXguc2V0KGNvbCwgcm93LCBtb2QsIHRydWUpXG4gIH1cbn1cblxuLyoqXG4gKiBBZGQgZm9ybWF0IGluZm8gYml0cyB0byBtYXRyaXhcbiAqXG4gKiBAcGFyYW0gIHtCaXRNYXRyaXh9IG1hdHJpeCAgICAgICAgICAgICAgIE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtICB7TnVtYmVyfSAgICBtYXNrUGF0dGVybiAgICAgICAgICBNYXNrIHBhdHRlcm4gcmVmZXJlbmNlIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRm9ybWF0SW5mbyAobWF0cml4LCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pIHtcbiAgY29uc3Qgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIGNvbnN0IGJpdHMgPSBGb3JtYXRJbmZvLmdldEVuY29kZWRCaXRzKGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrUGF0dGVybilcbiAgbGV0IGksIG1vZFxuXG4gIGZvciAoaSA9IDA7IGkgPCAxNTsgaSsrKSB7XG4gICAgbW9kID0gKChiaXRzID4+IGkpICYgMSkgPT09IDFcblxuICAgIC8vIHZlcnRpY2FsXG4gICAgaWYgKGkgPCA2KSB7XG4gICAgICBtYXRyaXguc2V0KGksIDgsIG1vZCwgdHJ1ZSlcbiAgICB9IGVsc2UgaWYgKGkgPCA4KSB7XG4gICAgICBtYXRyaXguc2V0KGkgKyAxLCA4LCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hdHJpeC5zZXQoc2l6ZSAtIDE1ICsgaSwgOCwgbW9kLCB0cnVlKVxuICAgIH1cblxuICAgIC8vIGhvcml6b250YWxcbiAgICBpZiAoaSA8IDgpIHtcbiAgICAgIG1hdHJpeC5zZXQoOCwgc2l6ZSAtIGkgLSAxLCBtb2QsIHRydWUpXG4gICAgfSBlbHNlIGlmIChpIDwgOSkge1xuICAgICAgbWF0cml4LnNldCg4LCAxNSAtIGkgLSAxICsgMSwgbW9kLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXRyaXguc2V0KDgsIDE1IC0gaSAtIDEsIG1vZCwgdHJ1ZSlcbiAgICB9XG4gIH1cblxuICAvLyBmaXhlZCBtb2R1bGVcbiAgbWF0cml4LnNldChzaXplIC0gOCwgOCwgMSwgdHJ1ZSlcbn1cblxuLyoqXG4gKiBBZGQgZW5jb2RlZCBkYXRhIGJpdHMgdG8gbWF0cml4XG4gKlxuICogQHBhcmFtICB7Qml0TWF0cml4fSAgbWF0cml4IE1vZHVsZXMgbWF0cml4XG4gKiBAcGFyYW0gIHtVaW50OEFycmF5fSBkYXRhICAgRGF0YSBjb2Rld29yZHNcbiAqL1xuZnVuY3Rpb24gc2V0dXBEYXRhIChtYXRyaXgsIGRhdGEpIHtcbiAgY29uc3Qgc2l6ZSA9IG1hdHJpeC5zaXplXG4gIGxldCBpbmMgPSAtMVxuICBsZXQgcm93ID0gc2l6ZSAtIDFcbiAgbGV0IGJpdEluZGV4ID0gN1xuICBsZXQgYnl0ZUluZGV4ID0gMFxuXG4gIGZvciAobGV0IGNvbCA9IHNpemUgLSAxOyBjb2wgPiAwOyBjb2wgLT0gMikge1xuICAgIGlmIChjb2wgPT09IDYpIGNvbC0tXG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCAyOyBjKyspIHtcbiAgICAgICAgaWYgKCFtYXRyaXguaXNSZXNlcnZlZChyb3csIGNvbCAtIGMpKSB7XG4gICAgICAgICAgbGV0IGRhcmsgPSBmYWxzZVxuXG4gICAgICAgICAgaWYgKGJ5dGVJbmRleCA8IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBkYXJrID0gKCgoZGF0YVtieXRlSW5kZXhdID4+PiBiaXRJbmRleCkgJiAxKSA9PT0gMSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRyaXguc2V0KHJvdywgY29sIC0gYywgZGFyaylcbiAgICAgICAgICBiaXRJbmRleC0tXG5cbiAgICAgICAgICBpZiAoYml0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBieXRlSW5kZXgrK1xuICAgICAgICAgICAgYml0SW5kZXggPSA3XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJvdyArPSBpbmNcblxuICAgICAgaWYgKHJvdyA8IDAgfHwgc2l6ZSA8PSByb3cpIHtcbiAgICAgICAgcm93IC09IGluY1xuICAgICAgICBpbmMgPSAtaW5jXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGVuY29kZWQgY29kZXdvcmRzIGZyb20gZGF0YSBpbnB1dFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gICB2ZXJzaW9uICAgICAgICAgICAgICBRUiBDb2RlIHZlcnNpb25cbiAqIEBwYXJhbSAge0Vycm9yQ29ycmVjdGlvbkxldmVsfSAgIGVycm9yQ29ycmVjdGlvbkxldmVsIEVycm9yIGNvcnJlY3Rpb24gbGV2ZWxcbiAqIEBwYXJhbSAge0J5dGVEYXRhfSBkYXRhICAgICAgICAgICAgICAgICBEYXRhIGlucHV0XG4gKiBAcmV0dXJuIHtVaW50OEFycmF5fSAgICAgICAgICAgICAgICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgZW5jb2RlZCBjb2Rld29yZHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGF0YSAodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIHNlZ21lbnRzKSB7XG4gIC8vIFByZXBhcmUgZGF0YSBidWZmZXJcbiAgY29uc3QgYnVmZmVyID0gbmV3IEJpdEJ1ZmZlcigpXG5cbiAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgIC8vIHByZWZpeCBkYXRhIHdpdGggbW9kZSBpbmRpY2F0b3IgKDQgYml0cylcbiAgICBidWZmZXIucHV0KGRhdGEubW9kZS5iaXQsIDQpXG5cbiAgICAvLyBQcmVmaXggZGF0YSB3aXRoIGNoYXJhY3RlciBjb3VudCBpbmRpY2F0b3IuXG4gICAgLy8gVGhlIGNoYXJhY3RlciBjb3VudCBpbmRpY2F0b3IgaXMgYSBzdHJpbmcgb2YgYml0cyB0aGF0IHJlcHJlc2VudHMgdGhlXG4gICAgLy8gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgYmVpbmcgZW5jb2RlZC5cbiAgICAvLyBUaGUgY2hhcmFjdGVyIGNvdW50IGluZGljYXRvciBtdXN0IGJlIHBsYWNlZCBhZnRlciB0aGUgbW9kZSBpbmRpY2F0b3JcbiAgICAvLyBhbmQgbXVzdCBiZSBhIGNlcnRhaW4gbnVtYmVyIG9mIGJpdHMgbG9uZywgZGVwZW5kaW5nIG9uIHRoZSBRUiB2ZXJzaW9uXG4gICAgLy8gYW5kIGRhdGEgbW9kZVxuICAgIC8vIEBzZWUge0BsaW5rIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yfS5cbiAgICBidWZmZXIucHV0KGRhdGEuZ2V0TGVuZ3RoKCksIE1vZGUuZ2V0Q2hhckNvdW50SW5kaWNhdG9yKGRhdGEubW9kZSwgdmVyc2lvbikpXG5cbiAgICAvLyBhZGQgYmluYXJ5IGRhdGEgc2VxdWVuY2UgdG8gYnVmZmVyXG4gICAgZGF0YS53cml0ZShidWZmZXIpXG4gIH0pXG5cbiAgLy8gQ2FsY3VsYXRlIHJlcXVpcmVkIG51bWJlciBvZiBiaXRzXG4gIGNvbnN0IHRvdGFsQ29kZXdvcmRzID0gVXRpbHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHModmVyc2lvbilcbiAgY29uc3QgZWNUb3RhbENvZGV3b3JkcyA9IEVDQ29kZS5nZXRUb3RhbENvZGV3b3Jkc0NvdW50KHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuICBjb25zdCBkYXRhVG90YWxDb2Rld29yZHNCaXRzID0gKHRvdGFsQ29kZXdvcmRzIC0gZWNUb3RhbENvZGV3b3JkcykgKiA4XG5cbiAgLy8gQWRkIGEgdGVybWluYXRvci5cbiAgLy8gSWYgdGhlIGJpdCBzdHJpbmcgaXMgc2hvcnRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgcmVxdWlyZWQgYml0cyxcbiAgLy8gYSB0ZXJtaW5hdG9yIG9mIHVwIHRvIGZvdXIgMHMgbXVzdCBiZSBhZGRlZCB0byB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgc3RyaW5nLlxuICAvLyBJZiB0aGUgYml0IHN0cmluZyBpcyBtb3JlIHRoYW4gZm91ciBiaXRzIHNob3J0ZXIgdGhhbiB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGJpdHMsXG4gIC8vIGFkZCBmb3VyIDBzIHRvIHRoZSBlbmQuXG4gIGlmIChidWZmZXIuZ2V0TGVuZ3RoSW5CaXRzKCkgKyA0IDw9IGRhdGFUb3RhbENvZGV3b3Jkc0JpdHMpIHtcbiAgICBidWZmZXIucHV0KDAsIDQpXG4gIH1cblxuICAvLyBJZiB0aGUgYml0IHN0cmluZyBpcyBmZXdlciB0aGFuIGZvdXIgYml0cyBzaG9ydGVyLCBhZGQgb25seSB0aGUgbnVtYmVyIG9mIDBzIHRoYXRcbiAgLy8gYXJlIG5lZWRlZCB0byByZWFjaCB0aGUgcmVxdWlyZWQgbnVtYmVyIG9mIGJpdHMuXG5cbiAgLy8gQWZ0ZXIgYWRkaW5nIHRoZSB0ZXJtaW5hdG9yLCBpZiB0aGUgbnVtYmVyIG9mIGJpdHMgaW4gdGhlIHN0cmluZyBpcyBub3QgYSBtdWx0aXBsZSBvZiA4LFxuICAvLyBwYWQgdGhlIHN0cmluZyBvbiB0aGUgcmlnaHQgd2l0aCAwcyB0byBtYWtlIHRoZSBzdHJpbmcncyBsZW5ndGggYSBtdWx0aXBsZSBvZiA4LlxuICB3aGlsZSAoYnVmZmVyLmdldExlbmd0aEluQml0cygpICUgOCAhPT0gMCkge1xuICAgIGJ1ZmZlci5wdXRCaXQoMClcbiAgfVxuXG4gIC8vIEFkZCBwYWQgYnl0ZXMgaWYgdGhlIHN0cmluZyBpcyBzdGlsbCBzaG9ydGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiByZXF1aXJlZCBiaXRzLlxuICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB0byBmaWxsIHRoZSBkYXRhIGNhcGFjaXR5IG9mIHRoZSBzeW1ib2wgY29ycmVzcG9uZGluZyB0b1xuICAvLyB0aGUgVmVyc2lvbiBhbmQgRXJyb3IgQ29ycmVjdGlvbiBMZXZlbCBieSBhZGRpbmcgdGhlIFBhZCBDb2Rld29yZHMgMTExMDExMDAgKDB4RUMpXG4gIC8vIGFuZCAwMDAxMDAwMSAoMHgxMSkgYWx0ZXJuYXRlbHkuXG4gIGNvbnN0IHJlbWFpbmluZ0J5dGUgPSAoZGF0YVRvdGFsQ29kZXdvcmRzQml0cyAtIGJ1ZmZlci5nZXRMZW5ndGhJbkJpdHMoKSkgLyA4XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtYWluaW5nQnl0ZTsgaSsrKSB7XG4gICAgYnVmZmVyLnB1dChpICUgMiA/IDB4MTEgOiAweEVDLCA4KVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUNvZGV3b3JkcyhidWZmZXIsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxufVxuXG4vKipcbiAqIEVuY29kZSBpbnB1dCBkYXRhIHdpdGggUmVlZC1Tb2xvbW9uIGFuZCByZXR1cm4gY29kZXdvcmRzIHdpdGhcbiAqIHJlbGF0aXZlIGVycm9yIGNvcnJlY3Rpb24gYml0c1xuICpcbiAqIEBwYXJhbSAge0JpdEJ1ZmZlcn0gYml0QnVmZmVyICAgICAgICAgICAgRGF0YSB0byBlbmNvZGVcbiAqIEBwYXJhbSAge051bWJlcn0gICAgdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtFcnJvckNvcnJlY3Rpb25MZXZlbH0gZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHJldHVybiB7VWludDhBcnJheX0gICAgICAgICAgICAgICAgICAgICBCdWZmZXIgY29udGFpbmluZyBlbmNvZGVkIGNvZGV3b3Jkc1xuICovXG5mdW5jdGlvbiBjcmVhdGVDb2Rld29yZHMgKGJpdEJ1ZmZlciwgdmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpIHtcbiAgLy8gVG90YWwgY29kZXdvcmRzIGZvciB0aGlzIFFSIGNvZGUgdmVyc2lvbiAoRGF0YSArIEVycm9yIGNvcnJlY3Rpb24pXG4gIGNvbnN0IHRvdGFsQ29kZXdvcmRzID0gVXRpbHMuZ2V0U3ltYm9sVG90YWxDb2Rld29yZHModmVyc2lvbilcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgZXJyb3IgY29ycmVjdGlvbiBjb2Rld29yZHNcbiAgY29uc3QgZWNUb3RhbENvZGV3b3JkcyA9IEVDQ29kZS5nZXRUb3RhbENvZGV3b3Jkc0NvdW50KHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsKVxuXG4gIC8vIFRvdGFsIG51bWJlciBvZiBkYXRhIGNvZGV3b3Jkc1xuICBjb25zdCBkYXRhVG90YWxDb2Rld29yZHMgPSB0b3RhbENvZGV3b3JkcyAtIGVjVG90YWxDb2Rld29yZHNcblxuICAvLyBUb3RhbCBudW1iZXIgb2YgYmxvY2tzXG4gIGNvbnN0IGVjVG90YWxCbG9ja3MgPSBFQ0NvZGUuZ2V0QmxvY2tzQ291bnQodmVyc2lvbiwgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpXG5cbiAgLy8gQ2FsY3VsYXRlIGhvdyBtYW55IGJsb2NrcyBlYWNoIGdyb3VwIHNob3VsZCBjb250YWluXG4gIGNvbnN0IGJsb2Nrc0luR3JvdXAyID0gdG90YWxDb2Rld29yZHMgJSBlY1RvdGFsQmxvY2tzXG4gIGNvbnN0IGJsb2Nrc0luR3JvdXAxID0gZWNUb3RhbEJsb2NrcyAtIGJsb2Nrc0luR3JvdXAyXG5cbiAgY29uc3QgdG90YWxDb2Rld29yZHNJbkdyb3VwMSA9IE1hdGguZmxvb3IodG90YWxDb2Rld29yZHMgLyBlY1RvdGFsQmxvY2tzKVxuXG4gIGNvbnN0IGRhdGFDb2Rld29yZHNJbkdyb3VwMSA9IE1hdGguZmxvb3IoZGF0YVRvdGFsQ29kZXdvcmRzIC8gZWNUb3RhbEJsb2NrcylcbiAgY29uc3QgZGF0YUNvZGV3b3Jkc0luR3JvdXAyID0gZGF0YUNvZGV3b3Jkc0luR3JvdXAxICsgMVxuXG4gIC8vIE51bWJlciBvZiBFQyBjb2Rld29yZHMgaXMgdGhlIHNhbWUgZm9yIGJvdGggZ3JvdXBzXG4gIGNvbnN0IGVjQ291bnQgPSB0b3RhbENvZGV3b3Jkc0luR3JvdXAxIC0gZGF0YUNvZGV3b3Jkc0luR3JvdXAxXG5cbiAgLy8gSW5pdGlhbGl6ZSBhIFJlZWQtU29sb21vbiBlbmNvZGVyIHdpdGggYSBnZW5lcmF0b3IgcG9seW5vbWlhbCBvZiBkZWdyZWUgZWNDb3VudFxuICBjb25zdCBycyA9IG5ldyBSZWVkU29sb21vbkVuY29kZXIoZWNDb3VudClcblxuICBsZXQgb2Zmc2V0ID0gMFxuICBjb25zdCBkY0RhdGEgPSBuZXcgQXJyYXkoZWNUb3RhbEJsb2NrcylcbiAgY29uc3QgZWNEYXRhID0gbmV3IEFycmF5KGVjVG90YWxCbG9ja3MpXG4gIGxldCBtYXhEYXRhU2l6ZSA9IDBcbiAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYml0QnVmZmVyLmJ1ZmZlcilcblxuICAvLyBEaXZpZGUgdGhlIGJ1ZmZlciBpbnRvIHRoZSByZXF1aXJlZCBudW1iZXIgb2YgYmxvY2tzXG4gIGZvciAobGV0IGIgPSAwOyBiIDwgZWNUb3RhbEJsb2NrczsgYisrKSB7XG4gICAgY29uc3QgZGF0YVNpemUgPSBiIDwgYmxvY2tzSW5Hcm91cDEgPyBkYXRhQ29kZXdvcmRzSW5Hcm91cDEgOiBkYXRhQ29kZXdvcmRzSW5Hcm91cDJcblxuICAgIC8vIGV4dHJhY3QgYSBibG9jayBvZiBkYXRhIGZyb20gYnVmZmVyXG4gICAgZGNEYXRhW2JdID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZGF0YVNpemUpXG5cbiAgICAvLyBDYWxjdWxhdGUgRUMgY29kZXdvcmRzIGZvciB0aGlzIGRhdGEgYmxvY2tcbiAgICBlY0RhdGFbYl0gPSBycy5lbmNvZGUoZGNEYXRhW2JdKVxuXG4gICAgb2Zmc2V0ICs9IGRhdGFTaXplXG4gICAgbWF4RGF0YVNpemUgPSBNYXRoLm1heChtYXhEYXRhU2l6ZSwgZGF0YVNpemUpXG4gIH1cblxuICAvLyBDcmVhdGUgZmluYWwgZGF0YVxuICAvLyBJbnRlcmxlYXZlIHRoZSBkYXRhIGFuZCBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBmcm9tIGVhY2ggYmxvY2tcbiAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KHRvdGFsQ29kZXdvcmRzKVxuICBsZXQgaW5kZXggPSAwXG4gIGxldCBpLCByXG5cbiAgLy8gQWRkIGRhdGEgY29kZXdvcmRzXG4gIGZvciAoaSA9IDA7IGkgPCBtYXhEYXRhU2l6ZTsgaSsrKSB7XG4gICAgZm9yIChyID0gMDsgciA8IGVjVG90YWxCbG9ja3M7IHIrKykge1xuICAgICAgaWYgKGkgPCBkY0RhdGFbcl0ubGVuZ3RoKSB7XG4gICAgICAgIGRhdGFbaW5kZXgrK10gPSBkY0RhdGFbcl1baV1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBBcHBlZCBFQyBjb2Rld29yZHNcbiAgZm9yIChpID0gMDsgaSA8IGVjQ291bnQ7IGkrKykge1xuICAgIGZvciAociA9IDA7IHIgPCBlY1RvdGFsQmxvY2tzOyByKyspIHtcbiAgICAgIGRhdGFbaW5kZXgrK10gPSBlY0RhdGFbcl1baV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YVxufVxuXG4vKipcbiAqIEJ1aWxkIFFSIENvZGUgc3ltYm9sXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBkYXRhICAgICAgICAgICAgICAgICBJbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiAgICAgICAgICAgICAgUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcGFyYW0gIHtFcnJvckNvcnJldGlvbkxldmVsfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBsZXZlbFxuICogQHBhcmFtICB7TWFza1BhdHRlcm59IG1hc2tQYXR0ZXJuICAgICBNYXNrIHBhdHRlcm5cbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgT2JqZWN0IGNvbnRhaW5pbmcgc3ltYm9sIGRhdGFcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU3ltYm9sIChkYXRhLCB2ZXJzaW9uLCBlcnJvckNvcnJlY3Rpb25MZXZlbCwgbWFza1BhdHRlcm4pIHtcbiAgbGV0IHNlZ21lbnRzXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICBzZWdtZW50cyA9IFNlZ21lbnRzLmZyb21BcnJheShkYXRhKVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGxldCBlc3RpbWF0ZWRWZXJzaW9uID0gdmVyc2lvblxuXG4gICAgaWYgKCFlc3RpbWF0ZWRWZXJzaW9uKSB7XG4gICAgICBjb25zdCByYXdTZWdtZW50cyA9IFNlZ21lbnRzLnJhd1NwbGl0KGRhdGEpXG5cbiAgICAgIC8vIEVzdGltYXRlIGJlc3QgdmVyc2lvbiB0aGF0IGNhbiBjb250YWluIHJhdyBzcGxpdHRlZCBzZWdtZW50c1xuICAgICAgZXN0aW1hdGVkVmVyc2lvbiA9IFZlcnNpb24uZ2V0QmVzdFZlcnNpb25Gb3JEYXRhKHJhd1NlZ21lbnRzLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcbiAgICB9XG5cbiAgICAvLyBCdWlsZCBvcHRpbWl6ZWQgc2VnbWVudHNcbiAgICAvLyBJZiBlc3RpbWF0ZWQgdmVyc2lvbiBpcyB1bmRlZmluZWQsIHRyeSB3aXRoIHRoZSBoaWdoZXN0IHZlcnNpb25cbiAgICBzZWdtZW50cyA9IFNlZ21lbnRzLmZyb21TdHJpbmcoZGF0YSwgZXN0aW1hdGVkVmVyc2lvbiB8fCA0MClcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGF0YScpXG4gIH1cblxuICAvLyBHZXQgdGhlIG1pbiB2ZXJzaW9uIHRoYXQgY2FuIGNvbnRhaW4gZGF0YVxuICBjb25zdCBiZXN0VmVyc2lvbiA9IFZlcnNpb24uZ2V0QmVzdFZlcnNpb25Gb3JEYXRhKHNlZ21lbnRzLCBlcnJvckNvcnJlY3Rpb25MZXZlbClcblxuICAvLyBJZiBubyB2ZXJzaW9uIGlzIGZvdW5kLCBkYXRhIGNhbm5vdCBiZSBzdG9yZWRcbiAgaWYgKCFiZXN0VmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIGFtb3VudCBvZiBkYXRhIGlzIHRvbyBiaWcgdG8gYmUgc3RvcmVkIGluIGEgUVIgQ29kZScpXG4gIH1cblxuICAvLyBJZiBub3Qgc3BlY2lmaWVkLCB1c2UgbWluIHZlcnNpb24gYXMgZGVmYXVsdFxuICBpZiAoIXZlcnNpb24pIHtcbiAgICB2ZXJzaW9uID0gYmVzdFZlcnNpb25cblxuICAvLyBDaGVjayBpZiB0aGUgc3BlY2lmaWVkIHZlcnNpb24gY2FuIGNvbnRhaW4gdGhlIGRhdGFcbiAgfSBlbHNlIGlmICh2ZXJzaW9uIDwgYmVzdFZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcbicgK1xuICAgICAgJ1RoZSBjaG9zZW4gUVIgQ29kZSB2ZXJzaW9uIGNhbm5vdCBjb250YWluIHRoaXMgYW1vdW50IG9mIGRhdGEuXFxuJyArXG4gICAgICAnTWluaW11bSB2ZXJzaW9uIHJlcXVpcmVkIHRvIHN0b3JlIGN1cnJlbnQgZGF0YSBpczogJyArIGJlc3RWZXJzaW9uICsgJy5cXG4nXG4gICAgKVxuICB9XG5cbiAgY29uc3QgZGF0YUJpdHMgPSBjcmVhdGVEYXRhKHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBzZWdtZW50cylcblxuICAvLyBBbGxvY2F0ZSBtYXRyaXggYnVmZmVyXG4gIGNvbnN0IG1vZHVsZUNvdW50ID0gVXRpbHMuZ2V0U3ltYm9sU2l6ZSh2ZXJzaW9uKVxuICBjb25zdCBtb2R1bGVzID0gbmV3IEJpdE1hdHJpeChtb2R1bGVDb3VudClcblxuICAvLyBBZGQgZnVuY3Rpb24gbW9kdWxlc1xuICBzZXR1cEZpbmRlclBhdHRlcm4obW9kdWxlcywgdmVyc2lvbilcbiAgc2V0dXBUaW1pbmdQYXR0ZXJuKG1vZHVsZXMpXG4gIHNldHVwQWxpZ25tZW50UGF0dGVybihtb2R1bGVzLCB2ZXJzaW9uKVxuXG4gIC8vIEFkZCB0ZW1wb3JhcnkgZHVtbXkgYml0cyBmb3IgZm9ybWF0IGluZm8ganVzdCB0byBzZXQgdGhlbSBhcyByZXNlcnZlZC5cbiAgLy8gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudCB0aGVzZSBiaXRzIGZyb20gYmVpbmcgbWFza2VkIGJ5IHtAbGluayBNYXNrUGF0dGVybi5hcHBseU1hc2t9XG4gIC8vIHNpbmNlIHRoZSBtYXNraW5nIG9wZXJhdGlvbiBtdXN0IGJlIHBlcmZvcm1lZCBvbmx5IG9uIHRoZSBlbmNvZGluZyByZWdpb24uXG4gIC8vIFRoZXNlIGJsb2NrcyB3aWxsIGJlIHJlcGxhY2VkIHdpdGggY29ycmVjdCB2YWx1ZXMgbGF0ZXIgaW4gY29kZS5cbiAgc2V0dXBGb3JtYXRJbmZvKG1vZHVsZXMsIGVycm9yQ29ycmVjdGlvbkxldmVsLCAwKVxuXG4gIGlmICh2ZXJzaW9uID49IDcpIHtcbiAgICBzZXR1cFZlcnNpb25JbmZvKG1vZHVsZXMsIHZlcnNpb24pXG4gIH1cblxuICAvLyBBZGQgZGF0YSBjb2Rld29yZHNcbiAgc2V0dXBEYXRhKG1vZHVsZXMsIGRhdGFCaXRzKVxuXG4gIGlmIChpc05hTihtYXNrUGF0dGVybikpIHtcbiAgICAvLyBGaW5kIGJlc3QgbWFzayBwYXR0ZXJuXG4gICAgbWFza1BhdHRlcm4gPSBNYXNrUGF0dGVybi5nZXRCZXN0TWFzayhtb2R1bGVzLFxuICAgICAgc2V0dXBGb3JtYXRJbmZvLmJpbmQobnVsbCwgbW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwpKVxuICB9XG5cbiAgLy8gQXBwbHkgbWFzayBwYXR0ZXJuXG4gIE1hc2tQYXR0ZXJuLmFwcGx5TWFzayhtYXNrUGF0dGVybiwgbW9kdWxlcylcblxuICAvLyBSZXBsYWNlIGZvcm1hdCBpbmZvIGJpdHMgd2l0aCBjb3JyZWN0IHZhbHVlc1xuICBzZXR1cEZvcm1hdEluZm8obW9kdWxlcywgZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2tQYXR0ZXJuKVxuXG4gIHJldHVybiB7XG4gICAgbW9kdWxlczogbW9kdWxlcyxcbiAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgIGVycm9yQ29ycmVjdGlvbkxldmVsOiBlcnJvckNvcnJlY3Rpb25MZXZlbCxcbiAgICBtYXNrUGF0dGVybjogbWFza1BhdHRlcm4sXG4gICAgc2VnbWVudHM6IHNlZ21lbnRzXG4gIH1cbn1cblxuLyoqXG4gKiBRUiBDb2RlXG4gKlxuICogQHBhcmFtIHtTdHJpbmcgfCBBcnJheX0gZGF0YSAgICAgICAgICAgICAgICAgSW5wdXQgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgICAgICAgICAgICAgICAgICAgICAgT3B0aW9uYWwgY29uZmlndXJhdGlvbnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnZlcnNpb24gICAgICAgICAgICAgIFFSIENvZGUgdmVyc2lvblxuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuZXJyb3JDb3JyZWN0aW9uTGV2ZWwgRXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy50b1NKSVNGdW5jICAgICAgICAgSGVscGVyIGZ1bmMgdG8gY29udmVydCB1dGY4IHRvIHNqaXNcbiAqL1xuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyB8fCBkYXRhID09PSAnJykge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5wdXQgdGV4dCcpXG4gIH1cblxuICBsZXQgZXJyb3JDb3JyZWN0aW9uTGV2ZWwgPSBFQ0xldmVsLk1cbiAgbGV0IHZlcnNpb25cbiAgbGV0IG1hc2tcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gVXNlIGhpZ2hlciBlcnJvciBjb3JyZWN0aW9uIGxldmVsIGFzIGRlZmF1bHRcbiAgICBlcnJvckNvcnJlY3Rpb25MZXZlbCA9IEVDTGV2ZWwuZnJvbShvcHRpb25zLmVycm9yQ29ycmVjdGlvbkxldmVsLCBFQ0xldmVsLk0pXG4gICAgdmVyc2lvbiA9IFZlcnNpb24uZnJvbShvcHRpb25zLnZlcnNpb24pXG4gICAgbWFzayA9IE1hc2tQYXR0ZXJuLmZyb20ob3B0aW9ucy5tYXNrUGF0dGVybilcblxuICAgIGlmIChvcHRpb25zLnRvU0pJU0Z1bmMpIHtcbiAgICAgIFV0aWxzLnNldFRvU0pJU0Z1bmN0aW9uKG9wdGlvbnMudG9TSklTRnVuYylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlU3ltYm9sKGRhdGEsIHZlcnNpb24sIGVycm9yQ29ycmVjdGlvbkxldmVsLCBtYXNrKVxufVxuIiwiZnVuY3Rpb24gaGV4MnJnYmEgKGhleCkge1xuICBpZiAodHlwZW9mIGhleCA9PT0gJ251bWJlcicpIHtcbiAgICBoZXggPSBoZXgudG9TdHJpbmcoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvciBzaG91bGQgYmUgZGVmaW5lZCBhcyBoZXggc3RyaW5nJylcbiAgfVxuXG4gIGxldCBoZXhDb2RlID0gaGV4LnNsaWNlKCkucmVwbGFjZSgnIycsICcnKS5zcGxpdCgnJylcbiAgaWYgKGhleENvZGUubGVuZ3RoIDwgMyB8fCBoZXhDb2RlLmxlbmd0aCA9PT0gNSB8fCBoZXhDb2RlLmxlbmd0aCA+IDgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaGV4IGNvbG9yOiAnICsgaGV4KVxuICB9XG5cbiAgLy8gQ29udmVydCBmcm9tIHNob3J0IHRvIGxvbmcgZm9ybSAoZmZmIC0+IGZmZmZmZilcbiAgaWYgKGhleENvZGUubGVuZ3RoID09PSAzIHx8IGhleENvZGUubGVuZ3RoID09PSA0KSB7XG4gICAgaGV4Q29kZSA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGhleENvZGUubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gW2MsIGNdXG4gICAgfSkpXG4gIH1cblxuICAvLyBBZGQgZGVmYXVsdCBhbHBoYSB2YWx1ZVxuICBpZiAoaGV4Q29kZS5sZW5ndGggPT09IDYpIGhleENvZGUucHVzaCgnRicsICdGJylcblxuICBjb25zdCBoZXhWYWx1ZSA9IHBhcnNlSW50KGhleENvZGUuam9pbignJyksIDE2KVxuXG4gIHJldHVybiB7XG4gICAgcjogKGhleFZhbHVlID4+IDI0KSAmIDI1NSxcbiAgICBnOiAoaGV4VmFsdWUgPj4gMTYpICYgMjU1LFxuICAgIGI6IChoZXhWYWx1ZSA+PiA4KSAmIDI1NSxcbiAgICBhOiBoZXhWYWx1ZSAmIDI1NSxcbiAgICBoZXg6ICcjJyArIGhleENvZGUuc2xpY2UoMCwgNikuam9pbignJylcbiAgfVxufVxuXG5leHBvcnRzLmdldE9wdGlvbnMgPSBmdW5jdGlvbiBnZXRPcHRpb25zIChvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG4gIGlmICghb3B0aW9ucy5jb2xvcikgb3B0aW9ucy5jb2xvciA9IHt9XG5cbiAgY29uc3QgbWFyZ2luID0gdHlwZW9mIG9wdGlvbnMubWFyZ2luID09PSAndW5kZWZpbmVkJyB8fFxuICAgIG9wdGlvbnMubWFyZ2luID09PSBudWxsIHx8XG4gICAgb3B0aW9ucy5tYXJnaW4gPCAwXG4gICAgPyA0XG4gICAgOiBvcHRpb25zLm1hcmdpblxuXG4gIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLndpZHRoID49IDIxID8gb3B0aW9ucy53aWR0aCA6IHVuZGVmaW5lZFxuICBjb25zdCBzY2FsZSA9IG9wdGlvbnMuc2NhbGUgfHwgNFxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIHNjYWxlOiB3aWR0aCA/IDQgOiBzY2FsZSxcbiAgICBtYXJnaW46IG1hcmdpbixcbiAgICBjb2xvcjoge1xuICAgICAgZGFyazogaGV4MnJnYmEob3B0aW9ucy5jb2xvci5kYXJrIHx8ICcjMDAwMDAwZmYnKSxcbiAgICAgIGxpZ2h0OiBoZXgycmdiYShvcHRpb25zLmNvbG9yLmxpZ2h0IHx8ICcjZmZmZmZmZmYnKVxuICAgIH0sXG4gICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgIHJlbmRlcmVyT3B0czogb3B0aW9ucy5yZW5kZXJlck9wdHMgfHwge31cbiAgfVxufVxuXG5leHBvcnRzLmdldFNjYWxlID0gZnVuY3Rpb24gZ2V0U2NhbGUgKHFyU2l6ZSwgb3B0cykge1xuICByZXR1cm4gb3B0cy53aWR0aCAmJiBvcHRzLndpZHRoID49IHFyU2l6ZSArIG9wdHMubWFyZ2luICogMlxuICAgID8gb3B0cy53aWR0aCAvIChxclNpemUgKyBvcHRzLm1hcmdpbiAqIDIpXG4gICAgOiBvcHRzLnNjYWxlXG59XG5cbmV4cG9ydHMuZ2V0SW1hZ2VXaWR0aCA9IGZ1bmN0aW9uIGdldEltYWdlV2lkdGggKHFyU2l6ZSwgb3B0cykge1xuICBjb25zdCBzY2FsZSA9IGV4cG9ydHMuZ2V0U2NhbGUocXJTaXplLCBvcHRzKVxuICByZXR1cm4gTWF0aC5mbG9vcigocXJTaXplICsgb3B0cy5tYXJnaW4gKiAyKSAqIHNjYWxlKVxufVxuXG5leHBvcnRzLnFyVG9JbWFnZURhdGEgPSBmdW5jdGlvbiBxclRvSW1hZ2VEYXRhIChpbWdEYXRhLCBxciwgb3B0cykge1xuICBjb25zdCBzaXplID0gcXIubW9kdWxlcy5zaXplXG4gIGNvbnN0IGRhdGEgPSBxci5tb2R1bGVzLmRhdGFcbiAgY29uc3Qgc2NhbGUgPSBleHBvcnRzLmdldFNjYWxlKHNpemUsIG9wdHMpXG4gIGNvbnN0IHN5bWJvbFNpemUgPSBNYXRoLmZsb29yKChzaXplICsgb3B0cy5tYXJnaW4gKiAyKSAqIHNjYWxlKVxuICBjb25zdCBzY2FsZWRNYXJnaW4gPSBvcHRzLm1hcmdpbiAqIHNjYWxlXG4gIGNvbnN0IHBhbGV0dGUgPSBbb3B0cy5jb2xvci5saWdodCwgb3B0cy5jb2xvci5kYXJrXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3ltYm9sU2l6ZTsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzeW1ib2xTaXplOyBqKyspIHtcbiAgICAgIGxldCBwb3NEc3QgPSAoaSAqIHN5bWJvbFNpemUgKyBqKSAqIDRcbiAgICAgIGxldCBweENvbG9yID0gb3B0cy5jb2xvci5saWdodFxuXG4gICAgICBpZiAoaSA+PSBzY2FsZWRNYXJnaW4gJiYgaiA+PSBzY2FsZWRNYXJnaW4gJiZcbiAgICAgICAgaSA8IHN5bWJvbFNpemUgLSBzY2FsZWRNYXJnaW4gJiYgaiA8IHN5bWJvbFNpemUgLSBzY2FsZWRNYXJnaW4pIHtcbiAgICAgICAgY29uc3QgaVNyYyA9IE1hdGguZmxvb3IoKGkgLSBzY2FsZWRNYXJnaW4pIC8gc2NhbGUpXG4gICAgICAgIGNvbnN0IGpTcmMgPSBNYXRoLmZsb29yKChqIC0gc2NhbGVkTWFyZ2luKSAvIHNjYWxlKVxuICAgICAgICBweENvbG9yID0gcGFsZXR0ZVtkYXRhW2lTcmMgKiBzaXplICsgalNyY10gPyAxIDogMF1cbiAgICAgIH1cblxuICAgICAgaW1nRGF0YVtwb3NEc3QrK10gPSBweENvbG9yLnJcbiAgICAgIGltZ0RhdGFbcG9zRHN0KytdID0gcHhDb2xvci5nXG4gICAgICBpbWdEYXRhW3Bvc0RzdCsrXSA9IHB4Q29sb3IuYlxuICAgICAgaW1nRGF0YVtwb3NEc3RdID0gcHhDb2xvci5hXG4gICAgfVxuICB9XG59XG4iLCJjb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBjbGVhckNhbnZhcyAoY3R4LCBjYW52YXMsIHNpemUpIHtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG5cbiAgaWYgKCFjYW52YXMuc3R5bGUpIGNhbnZhcy5zdHlsZSA9IHt9XG4gIGNhbnZhcy5oZWlnaHQgPSBzaXplXG4gIGNhbnZhcy53aWR0aCA9IHNpemVcbiAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnXG4gIGNhbnZhcy5zdHlsZS53aWR0aCA9IHNpemUgKyAncHgnXG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc0VsZW1lbnQgKCkge1xuICB0cnkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgY2FudmFzIGVsZW1lbnQnKVxuICB9XG59XG5cbmV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyIChxckRhdGEsIGNhbnZhcywgb3B0aW9ucykge1xuICBsZXQgb3B0cyA9IG9wdGlvbnNcbiAgbGV0IGNhbnZhc0VsID0gY2FudmFzXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFjYW52YXMpIHtcbiAgICBjYW52YXNFbCA9IGdldENhbnZhc0VsZW1lbnQoKVxuICB9XG5cbiAgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0cylcbiAgY29uc3Qgc2l6ZSA9IFV0aWxzLmdldEltYWdlV2lkdGgocXJEYXRhLm1vZHVsZXMuc2l6ZSwgb3B0cylcblxuICBjb25zdCBjdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpXG4gIGNvbnN0IGltYWdlID0gY3R4LmNyZWF0ZUltYWdlRGF0YShzaXplLCBzaXplKVxuICBVdGlscy5xclRvSW1hZ2VEYXRhKGltYWdlLmRhdGEsIHFyRGF0YSwgb3B0cylcblxuICBjbGVhckNhbnZhcyhjdHgsIGNhbnZhc0VsLCBzaXplKVxuICBjdHgucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKVxuXG4gIHJldHVybiBjYW52YXNFbFxufVxuXG5leHBvcnRzLnJlbmRlclRvRGF0YVVSTCA9IGZ1bmN0aW9uIHJlbmRlclRvRGF0YVVSTCAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgbGV0IG9wdHMgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBvcHRzID09PSAndW5kZWZpbmVkJyAmJiAoIWNhbnZhcyB8fCAhY2FudmFzLmdldENvbnRleHQpKSB7XG4gICAgb3B0cyA9IGNhbnZhc1xuICAgIGNhbnZhcyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgaWYgKCFvcHRzKSBvcHRzID0ge31cblxuICBjb25zdCBjYW52YXNFbCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgY2FudmFzLCBvcHRzKVxuXG4gIGNvbnN0IHR5cGUgPSBvcHRzLnR5cGUgfHwgJ2ltYWdlL3BuZydcbiAgY29uc3QgcmVuZGVyZXJPcHRzID0gb3B0cy5yZW5kZXJlck9wdHMgfHwge31cblxuICByZXR1cm4gY2FudmFzRWwudG9EYXRhVVJMKHR5cGUsIHJlbmRlcmVyT3B0cy5xdWFsaXR5KVxufVxuIiwiY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gZ2V0Q29sb3JBdHRyaWIgKGNvbG9yLCBhdHRyaWIpIHtcbiAgY29uc3QgYWxwaGEgPSBjb2xvci5hIC8gMjU1XG4gIGNvbnN0IHN0ciA9IGF0dHJpYiArICc9XCInICsgY29sb3IuaGV4ICsgJ1wiJ1xuXG4gIHJldHVybiBhbHBoYSA8IDFcbiAgICA/IHN0ciArICcgJyArIGF0dHJpYiArICctb3BhY2l0eT1cIicgKyBhbHBoYS50b0ZpeGVkKDIpLnNsaWNlKDEpICsgJ1wiJ1xuICAgIDogc3RyXG59XG5cbmZ1bmN0aW9uIHN2Z0NtZCAoY21kLCB4LCB5KSB7XG4gIGxldCBzdHIgPSBjbWQgKyB4XG4gIGlmICh0eXBlb2YgeSAhPT0gJ3VuZGVmaW5lZCcpIHN0ciArPSAnICcgKyB5XG5cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBxclRvUGF0aCAoZGF0YSwgc2l6ZSwgbWFyZ2luKSB7XG4gIGxldCBwYXRoID0gJydcbiAgbGV0IG1vdmVCeSA9IDBcbiAgbGV0IG5ld1JvdyA9IGZhbHNlXG4gIGxldCBsaW5lTGVuZ3RoID0gMFxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvbCA9IE1hdGguZmxvb3IoaSAlIHNpemUpXG4gICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihpIC8gc2l6ZSlcblxuICAgIGlmICghY29sICYmICFuZXdSb3cpIG5ld1JvdyA9IHRydWVcblxuICAgIGlmIChkYXRhW2ldKSB7XG4gICAgICBsaW5lTGVuZ3RoKytcblxuICAgICAgaWYgKCEoaSA+IDAgJiYgY29sID4gMCAmJiBkYXRhW2kgLSAxXSkpIHtcbiAgICAgICAgcGF0aCArPSBuZXdSb3dcbiAgICAgICAgICA/IHN2Z0NtZCgnTScsIGNvbCArIG1hcmdpbiwgMC41ICsgcm93ICsgbWFyZ2luKVxuICAgICAgICAgIDogc3ZnQ21kKCdtJywgbW92ZUJ5LCAwKVxuXG4gICAgICAgIG1vdmVCeSA9IDBcbiAgICAgICAgbmV3Um93ID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCEoY29sICsgMSA8IHNpemUgJiYgZGF0YVtpICsgMV0pKSB7XG4gICAgICAgIHBhdGggKz0gc3ZnQ21kKCdoJywgbGluZUxlbmd0aClcbiAgICAgICAgbGluZUxlbmd0aCA9IDBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbW92ZUJ5KytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aFxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBjb25zdCBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICBjb25zdCBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICBjb25zdCBkYXRhID0gcXJEYXRhLm1vZHVsZXMuZGF0YVxuICBjb25zdCBxcmNvZGVzaXplID0gc2l6ZSArIG9wdHMubWFyZ2luICogMlxuXG4gIGNvbnN0IGJnID0gIW9wdHMuY29sb3IubGlnaHQuYVxuICAgID8gJydcbiAgICA6ICc8cGF0aCAnICsgZ2V0Q29sb3JBdHRyaWIob3B0cy5jb2xvci5saWdodCwgJ2ZpbGwnKSArXG4gICAgICAnIGQ9XCJNMCAwaCcgKyBxcmNvZGVzaXplICsgJ3YnICsgcXJjb2Rlc2l6ZSArICdIMHpcIi8+J1xuXG4gIGNvbnN0IHBhdGggPVxuICAgICc8cGF0aCAnICsgZ2V0Q29sb3JBdHRyaWIob3B0cy5jb2xvci5kYXJrLCAnc3Ryb2tlJykgK1xuICAgICcgZD1cIicgKyBxclRvUGF0aChkYXRhLCBzaXplLCBvcHRzLm1hcmdpbikgKyAnXCIvPidcblxuICBjb25zdCB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCInICsgJzAgMCAnICsgcXJjb2Rlc2l6ZSArICcgJyArIHFyY29kZXNpemUgKyAnXCInXG5cbiAgY29uc3Qgd2lkdGggPSAhb3B0cy53aWR0aCA/ICcnIDogJ3dpZHRoPVwiJyArIG9wdHMud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIG9wdHMud2lkdGggKyAnXCIgJ1xuXG4gIGNvbnN0IHN2Z1RhZyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAnICsgd2lkdGggKyB2aWV3Qm94ICsgJyBzaGFwZS1yZW5kZXJpbmc9XCJjcmlzcEVkZ2VzXCI+JyArIGJnICsgcGF0aCArICc8L3N2Zz5cXG4nXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiKG51bGwsIHN2Z1RhZylcbiAgfVxuXG4gIHJldHVybiBzdmdUYWdcbn1cbiIsIlxuY29uc3QgY2FuUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuLXByb21pc2UnKVxuXG5jb25zdCBRUkNvZGUgPSByZXF1aXJlKCcuL2NvcmUvcXJjb2RlJylcbmNvbnN0IENhbnZhc1JlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlci9jYW52YXMnKVxuY29uc3QgU3ZnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3N2Zy10YWcuanMnKVxuXG5mdW5jdGlvbiByZW5kZXJDYW52YXMgKHJlbmRlckZ1bmMsIGNhbnZhcywgdGV4dCwgb3B0cywgY2IpIHtcbiAgY29uc3QgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICBjb25zdCBhcmdzTnVtID0gYXJncy5sZW5ndGhcbiAgY29uc3QgaXNMYXN0QXJnQ2IgPSB0eXBlb2YgYXJnc1thcmdzTnVtIC0gMV0gPT09ICdmdW5jdGlvbidcblxuICBpZiAoIWlzTGFzdEFyZ0NiICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIHJlcXVpcmVkIGFzIGxhc3QgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKGlzTGFzdEFyZ0NiKSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMikge1xuICAgICAgY2IgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAzKSB7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQgJiYgdHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhcmdzTnVtIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDEpIHtcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDIgJiYgIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICBvcHRzID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgICAgIHJlc29sdmUocmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgIGNiKG51bGwsIHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNiKGUpXG4gIH1cbn1cblxuZXhwb3J0cy5jcmVhdGUgPSBRUkNvZGUuY3JlYXRlXG5leHBvcnRzLnRvQ2FudmFzID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgQ2FudmFzUmVuZGVyZXIucmVuZGVyKVxuZXhwb3J0cy50b0RhdGFVUkwgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXJUb0RhdGFVUkwpXG5cbi8vIG9ubHkgc3ZnIGZvciBub3cuXG5leHBvcnRzLnRvU3RyaW5nID0gcmVuZGVyQ2FudmFzLmJpbmQobnVsbCwgZnVuY3Rpb24gKGRhdGEsIF8sIG9wdHMpIHtcbiAgcmV0dXJuIFN2Z1JlbmRlcmVyLnJlbmRlcihkYXRhLCBvcHRzKVxufSlcbiIsIi8vIGNhbi1wcm9taXNlIGhhcyBhIGNyYXNoIGluIHNvbWUgdmVyc2lvbnMgb2YgcmVhY3QgbmF0aXZlIHRoYXQgZG9udCBoYXZlXG4vLyBzdGFuZGFyZCBnbG9iYWwgb2JqZWN0c1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NvbGRhaXIvbm9kZS1xcmNvZGUvaXNzdWVzLzE1N1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nICYmIFByb21pc2UucHJvdG90eXBlICYmIFByb21pc2UucHJvdG90eXBlLnRoZW5cbn1cbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XHJcbmltcG9ydCB7IFByb3BUeXBlLCBuZXh0VGljaywgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIHVucmVmIH0gZnJvbSAndnVlJ1xyXG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSdcclxuaW1wb3J0IHsgUVJDb2RlUmVuZGVyZXJzT3B0aW9ucyB9IGZyb20gJ3FyY29kZSdcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJ1xyXG5pbXBvcnQgeyBwcm9wVHlwZXMgfSBmcm9tICdAL3V0aWxzL3Byb3BUeXBlcydcclxuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJ0AvdXRpbHMvaXMnXHJcblxyXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcclxuICAvLyBpbWcg5oiW6ICFIGNhbnZhcyxpbWfkuI3mlK/mjIFsb2dv5bWM5aWXXHJcbiAgdGFnOiBwcm9wVHlwZXMuc3RyaW5nLnZhbGlkYXRlKCh2OiBzdHJpbmcpID0+IFsnY2FudmFzJywgJ2ltZyddLmluY2x1ZGVzKHYpKS5kZWYoJ2NhbnZhcycpLFxyXG4gIC8vIOS6jOe7tOeggeWGheWuuVxyXG4gIHRleHQ6IHtcclxuICAgIHR5cGU6IFtTdHJpbmcsIEFycmF5XSBhcyBQcm9wVHlwZTxzdHJpbmcgfCBSZWNvcmRhYmxlW10+LFxyXG4gICAgZGVmYXVsdDogbnVsbFxyXG4gIH0sXHJcbiAgLy8gcXJjb2RlLmpz6YWN572u6aG5XHJcbiAgb3B0aW9uczoge1xyXG4gICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPFFSQ29kZVJlbmRlcmVyc09wdGlvbnM+LFxyXG4gICAgZGVmYXVsdDogKCkgPT4gKHt9KVxyXG4gIH0sXHJcbiAgLy8g5a695bqmXHJcbiAgd2lkdGg6IHByb3BUeXBlcy5udW1iZXIuZGVmKDIwMCksXHJcbiAgLy8gbG9nb1xyXG4gIGxvZ286IHtcclxuICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF0gYXMgUHJvcFR5cGU8UGFydGlhbDxRcmNvZGVMb2dvPiB8IHN0cmluZz4sXHJcbiAgICBkZWZhdWx0OiAnJ1xyXG4gIH0sXHJcbiAgLy8g5piv5ZCm6L+H5pyfXHJcbiAgZGlzYWJsZWQ6IHByb3BUeXBlcy5ib29sLmRlZihmYWxzZSksXHJcbiAgLy8g6L+H5pyf5o+Q56S65YaF5a65XHJcbiAgZGlzYWJsZWRUZXh0OiBwcm9wVHlwZXMuc3RyaW5nLmRlZignJylcclxufSlcclxuXHJcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RvbmUnLCAnY2xpY2snLCAnZGlzYWJsZWQtY2xpY2snXSlcclxuXHJcbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxyXG5cclxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdxcmNvZGUnKVxyXG5cclxuY29uc3QgeyB0b0NhbnZhcywgdG9EYXRhVVJMIH0gPSBRUkNvZGVcclxuXHJcbmNvbnN0IGxvYWRpbmcgPSByZWYodHJ1ZSlcclxuXHJcbmNvbnN0IHdyYXBSZWYgPSByZWY8TnVsbGFibGU8SFRNTENhbnZhc0VsZW1lbnQgfCBIVE1MSW1hZ2VFbGVtZW50Pj4obnVsbClcclxuXHJcbmNvbnN0IHJlbmRlclRleHQgPSBjb21wdXRlZCgoKSA9PiBTdHJpbmcocHJvcHMudGV4dCkpXHJcblxyXG5jb25zdCB3cmFwU3R5bGUgPSBjb21wdXRlZCgoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHdpZHRoOiBwcm9wcy53aWR0aCArICdweCcsXHJcbiAgICBoZWlnaHQ6IHByb3BzLndpZHRoICsgJ3B4J1xyXG4gIH1cclxufSlcclxuXHJcbmNvbnN0IGluaXRRcmNvZGUgPSBhc3luYyAoKSA9PiB7XHJcbiAgYXdhaXQgbmV4dFRpY2soKVxyXG4gIGNvbnN0IG9wdGlvbnMgPSBjbG9uZURlZXAocHJvcHMub3B0aW9ucyB8fCB7fSlcclxuICBpZiAocHJvcHMudGFnID09PSAnY2FudmFzJykge1xyXG4gICAgLy8g5a656ZSZ546H77yM6buY6K6k5a+55YaF5a655bCR55qE5LqM57u056CB6YeH55So6auY5a656ZSZ546H77yM5YaF5a655aSa55qE5LqM57u056CB6YeH55So5L2O5a656ZSZ546HXHJcbiAgICBvcHRpb25zLmVycm9yQ29ycmVjdGlvbkxldmVsID1cclxuICAgICAgb3B0aW9ucy5lcnJvckNvcnJlY3Rpb25MZXZlbCB8fCBnZXRFcnJvckNvcnJlY3Rpb25MZXZlbCh1bnJlZihyZW5kZXJUZXh0KSlcclxuICAgIGNvbnN0IF93aWR0aDogbnVtYmVyID0gYXdhaXQgZ2V0T3JpZ2luV2lkdGgodW5yZWYocmVuZGVyVGV4dCksIG9wdGlvbnMpXHJcbiAgICBvcHRpb25zLnNjYWxlID0gcHJvcHMud2lkdGggPT09IDAgPyB1bmRlZmluZWQgOiAocHJvcHMud2lkdGggLyBfd2lkdGgpICogNFxyXG4gICAgY29uc3QgY2FudmFzUmVmOiBIVE1MQ2FudmFzRWxlbWVudCA9IGF3YWl0IHRvQ2FudmFzKFxyXG4gICAgICB1bnJlZih3cmFwUmVmKSBhcyBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgICAgdW5yZWYocmVuZGVyVGV4dCksXHJcbiAgICAgIG9wdGlvbnNcclxuICAgIClcclxuICAgIGlmIChwcm9wcy5sb2dvKSB7XHJcbiAgICAgIGNvbnN0IHVybCA9IGF3YWl0IGNyZWF0ZUxvZ29Db2RlKGNhbnZhc1JlZilcclxuICAgICAgZW1pdCgnZG9uZScsIHVybClcclxuICAgICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbWl0KCdkb25lJywgY2FudmFzUmVmLnRvRGF0YVVSTCgpKVxyXG4gICAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2VcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgdXJsID0gYXdhaXQgdG9EYXRhVVJMKHJlbmRlclRleHQudmFsdWUsIHtcclxuICAgICAgZXJyb3JDb3JyZWN0aW9uTGV2ZWw6ICdIJyxcclxuICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxyXG4gICAgICAuLi5vcHRpb25zXHJcbiAgICB9KVxyXG4gICAgOyh1bnJlZih3cmFwUmVmKSBhcyBIVE1MSW1hZ2VFbGVtZW50KS5zcmMgPSB1cmxcclxuICAgIGVtaXQoJ2RvbmUnLCB1cmwpXHJcbiAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbndhdGNoKFxyXG4gICgpID0+IHJlbmRlclRleHQudmFsdWUsXHJcbiAgKHZhbCkgPT4ge1xyXG4gICAgaWYgKCF2YWwpIHJldHVyblxyXG4gICAgaW5pdFFyY29kZSgpXHJcbiAgfSxcclxuICB7XHJcbiAgICBkZWVwOiB0cnVlLFxyXG4gICAgaW1tZWRpYXRlOiB0cnVlXHJcbiAgfVxyXG4pXHJcblxyXG5jb25zdCBjcmVhdGVMb2dvQ29kZSA9IChjYW52YXNSZWY6IEhUTUxDYW52YXNFbGVtZW50KSA9PiB7XHJcbiAgY29uc3QgY2FudmFzV2lkdGggPSBjYW52YXNSZWYud2lkdGhcclxuICBjb25zdCBsb2dvT3B0aW9uczogUXJjb2RlTG9nbyA9IE9iamVjdC5hc3NpZ24oXHJcbiAgICB7XHJcbiAgICAgIGxvZ29TaXplOiAwLjE1LFxyXG4gICAgICBiZ0NvbG9yOiAnI2ZmZmZmZicsXHJcbiAgICAgIGJvcmRlclNpemU6IDAuMDUsXHJcbiAgICAgIGNyb3NzT3JpZ2luOiAnYW5vbnltb3VzJyxcclxuICAgICAgYm9yZGVyUmFkaXVzOiA4LFxyXG4gICAgICBsb2dvUmFkaXVzOiAwXHJcbiAgICB9LFxyXG4gICAgaXNTdHJpbmcocHJvcHMubG9nbykgPyB7fSA6IHByb3BzLmxvZ29cclxuICApXHJcbiAgY29uc3Qge1xyXG4gICAgbG9nb1NpemUgPSAwLjE1LFxyXG4gICAgYmdDb2xvciA9ICcjZmZmZmZmJyxcclxuICAgIGJvcmRlclNpemUgPSAwLjA1LFxyXG4gICAgY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJyxcclxuICAgIGJvcmRlclJhZGl1cyA9IDgsXHJcbiAgICBsb2dvUmFkaXVzID0gMFxyXG4gIH0gPSBsb2dvT3B0aW9uc1xyXG4gIGNvbnN0IGxvZ29TcmMgPSBpc1N0cmluZyhwcm9wcy5sb2dvKSA/IHByb3BzLmxvZ28gOiBwcm9wcy5sb2dvLnNyY1xyXG4gIGNvbnN0IGxvZ29XaWR0aCA9IGNhbnZhc1dpZHRoICogbG9nb1NpemVcclxuICBjb25zdCBsb2dvWFkgPSAoY2FudmFzV2lkdGggKiAoMSAtIGxvZ29TaXplKSkgLyAyXHJcbiAgY29uc3QgbG9nb0JnV2lkdGggPSBjYW52YXNXaWR0aCAqIChsb2dvU2l6ZSArIGJvcmRlclNpemUpXHJcbiAgY29uc3QgbG9nb0JnWFkgPSAoY2FudmFzV2lkdGggKiAoMSAtIGxvZ29TaXplIC0gYm9yZGVyU2l6ZSkpIC8gMlxyXG5cclxuICBjb25zdCBjdHggPSBjYW52YXNSZWYuZ2V0Q29udGV4dCgnMmQnKVxyXG4gIGlmICghY3R4KSByZXR1cm5cclxuXHJcbiAgLy8gbG9nbyDlupXoibJcclxuICBjYW52YXNSb3VuZFJlY3QoY3R4KShsb2dvQmdYWSwgbG9nb0JnWFksIGxvZ29CZ1dpZHRoLCBsb2dvQmdXaWR0aCwgYm9yZGVyUmFkaXVzKVxyXG4gIGN0eC5maWxsU3R5bGUgPSBiZ0NvbG9yXHJcbiAgY3R4LmZpbGwoKVxyXG5cclxuICAvLyBsb2dvXHJcbiAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKVxyXG4gIGlmIChjcm9zc09yaWdpbiB8fCBsb2dvUmFkaXVzKSB7XHJcbiAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ2Nyb3NzT3JpZ2luJywgY3Jvc3NPcmlnaW4pXHJcbiAgfVxyXG4gIDsoaW1hZ2UgYXMgYW55KS5zcmMgPSBsb2dvU3JjXHJcblxyXG4gIC8vIOS9v+eUqGltYWdl57uY5Yi25Y+v5Lul6YG/5YWN5p+Q5Lqb6Leo5Z+f5oOF5Ya1XHJcbiAgY29uc3QgZHJhd0xvZ29XaXRoSW1hZ2UgPSAoaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQpID0+IHtcclxuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIGxvZ29YWSwgbG9nb1hZLCBsb2dvV2lkdGgsIGxvZ29XaWR0aClcclxuICB9XHJcblxyXG4gIC8vIOS9v+eUqGNhbnZhc+e7mOWItuS7peiOt+W+l+abtOWkmueahOWKn+iDvVxyXG4gIGNvbnN0IGRyYXdMb2dvV2l0aENhbnZhcyA9IChpbWFnZTogSFRNTEltYWdlRWxlbWVudCkgPT4ge1xyXG4gICAgY29uc3QgY2FudmFzSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxyXG4gICAgY2FudmFzSW1hZ2Uud2lkdGggPSBsb2dvWFkgKyBsb2dvV2lkdGhcclxuICAgIGNhbnZhc0ltYWdlLmhlaWdodCA9IGxvZ29YWSArIGxvZ29XaWR0aFxyXG4gICAgY29uc3QgaW1hZ2VDYW52YXMgPSBjYW52YXNJbWFnZS5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICBpZiAoIWltYWdlQ2FudmFzIHx8ICFjdHgpIHJldHVyblxyXG4gICAgaW1hZ2VDYW52YXMuZHJhd0ltYWdlKGltYWdlLCBsb2dvWFksIGxvZ29YWSwgbG9nb1dpZHRoLCBsb2dvV2lkdGgpXHJcblxyXG4gICAgY2FudmFzUm91bmRSZWN0KGN0eCkobG9nb1hZLCBsb2dvWFksIGxvZ29XaWR0aCwgbG9nb1dpZHRoLCBsb2dvUmFkaXVzKVxyXG4gICAgaWYgKCFjdHgpIHJldHVyblxyXG4gICAgY29uc3QgZmlsbFN0eWxlID0gY3R4LmNyZWF0ZVBhdHRlcm4oY2FudmFzSW1hZ2UsICduby1yZXBlYXQnKVxyXG4gICAgaWYgKGZpbGxTdHlsZSkge1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gZmlsbFN0eWxlXHJcbiAgICAgIGN0eC5maWxsKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOWwhiBsb2dv57uY5Yi25YiwIGNhbnZhc+S4ilxyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55KSA9PiB7XHJcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgIGxvZ29SYWRpdXMgPyBkcmF3TG9nb1dpdGhDYW52YXMoaW1hZ2UpIDogZHJhd0xvZ29XaXRoSW1hZ2UoaW1hZ2UpXHJcbiAgICAgIHJlc29sdmUoY2FudmFzUmVmLnRvRGF0YVVSTCgpKVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIOW+l+WIsOWOn1FyQ29kZeeahOWkp+Wwj++8jOS7peS+v+e8qeaUvuW+l+WIsOato+ehrueahFFyQ29kZeWkp+Wwj1xyXG5jb25zdCBnZXRPcmlnaW5XaWR0aCA9IGFzeW5jIChjb250ZW50OiBzdHJpbmcsIG9wdGlvbnM6IFFSQ29kZVJlbmRlcmVyc09wdGlvbnMpID0+IHtcclxuICBjb25zdCBfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcclxuICBhd2FpdCB0b0NhbnZhcyhfY2FudmFzLCBjb250ZW50LCBvcHRpb25zKVxyXG4gIHJldHVybiBfY2FudmFzLndpZHRoXHJcbn1cclxuXHJcbi8vIOWvueS6juWGheWuueWwkeeahFFyQ29kZe+8jOWinuWkp+WuuemUmeeOh1xyXG5jb25zdCBnZXRFcnJvckNvcnJlY3Rpb25MZXZlbCA9IChjb250ZW50OiBzdHJpbmcpID0+IHtcclxuICBpZiAoY29udGVudC5sZW5ndGggPiAzNikge1xyXG4gICAgcmV0dXJuICdNJ1xyXG4gIH0gZWxzZSBpZiAoY29udGVudC5sZW5ndGggPiAxNikge1xyXG4gICAgcmV0dXJuICdRJ1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJ0gnXHJcbiAgfVxyXG59XHJcblxyXG4vLyBjb3B55p2l55qE5pa55rOV77yM55So5LqO57uY5Yi25ZyG6KeSXHJcbmNvbnN0IGNhbnZhc1JvdW5kUmVjdCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4ge1xyXG4gIHJldHVybiAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyLCByOiBudW1iZXIpID0+IHtcclxuICAgIGNvbnN0IG1pblNpemUgPSBNYXRoLm1pbih3LCBoKVxyXG4gICAgaWYgKHIgPiBtaW5TaXplIC8gMikge1xyXG4gICAgICByID0gbWluU2l6ZSAvIDJcclxuICAgIH1cclxuICAgIGN0eC5iZWdpblBhdGgoKVxyXG4gICAgY3R4Lm1vdmVUbyh4ICsgciwgeSlcclxuICAgIGN0eC5hcmNUbyh4ICsgdywgeSwgeCArIHcsIHkgKyBoLCByKVxyXG4gICAgY3R4LmFyY1RvKHggKyB3LCB5ICsgaCwgeCwgeSArIGgsIHIpXHJcbiAgICBjdHguYXJjVG8oeCwgeSArIGgsIHgsIHksIHIpXHJcbiAgICBjdHguYXJjVG8oeCwgeSwgeCArIHcsIHksIHIpXHJcbiAgICBjdHguY2xvc2VQYXRoKClcclxuICAgIHJldHVybiBjdHhcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGNsaWNrQ29kZSA9ICgpID0+IHtcclxuICBlbWl0KCdjbGljaycpXHJcbn1cclxuXHJcbmNvbnN0IGRpc2FibGVkQ2xpY2sgPSAoKSA9PiB7XHJcbiAgZW1pdCgnZGlzYWJsZWQtY2xpY2snKVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHRlbXBsYXRlPlxyXG4gIDxkaXYgdi1sb2FkaW5nPVwibG9hZGluZ1wiIDpjbGFzcz1cIltwcmVmaXhDbHMsICdyZWxhdGl2ZSBpbmxpbmUtYmxvY2snXVwiIDpzdHlsZT1cIndyYXBTdHlsZVwiPlxyXG4gICAgPGNvbXBvbmVudCA6aXM9XCJ0YWdcIiByZWY9XCJ3cmFwUmVmXCIgQGNsaWNrPVwiY2xpY2tDb2RlXCIgLz5cclxuICAgIDxkaXZcclxuICAgICAgdi1pZj1cImRpc2FibGVkXCJcclxuICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfS0tZGlzYWJsZWRgXCJcclxuICAgICAgY2xhc3M9XCJhYnNvbHV0ZSB0b3AtMCBsZWZ0LTAgZmxleCB3LWZ1bGwgaC1mdWxsIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiXHJcbiAgICAgIEBjbGljaz1cImRpc2FibGVkQ2xpY2tcIlxyXG4gICAgPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUgdG9wLVs1MCVdIGxlZnQtWzUwJV0gZm9udC1ib2xkXCI+XHJcbiAgICAgICAgPEljb24gaWNvbj1cImVwOnJlZnJlc2gtcmlnaHRcIiA6c2l6ZT1cIjMwXCIgY29sb3I9XCJ2YXIoLS1lbC1jb2xvci1wcmltYXJ5KVwiIC8+XHJcbiAgICAgICAgPGRpdj57eyBkaXNhYmxlZFRleHQgfX08L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD5cclxuQHByZWZpeC1jbHM6IH4nQHtuYW1lc3BhY2V9LXFyY29kZSc7XHJcblxyXG4uQHtwcmVmaXgtY2xzfSB7XHJcbiAgJi0tZGlzYWJsZWQge1xyXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjk1KTtcclxuXHJcbiAgICAmID4gZGl2IHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbjwvc3R5bGU+XHJcbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XHJcbmltcG9ydCB7IFFyY29kZSB9IGZyb20gJ0AvY29tcG9uZW50cy9RcmNvZGUnXHJcbmltcG9ydCB7IENvbnRlbnRXcmFwIH0gZnJvbSAnQC9jb21wb25lbnRzL0NvbnRlbnRXcmFwJ1xyXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcclxuaW1wb3J0IHsgY29tcHV0ZWQsIHJlZiwgdW5yZWYgfSBmcm9tICd2dWUnXHJcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcclxuaW1wb3J0IHsgRWxSb3csIEVsQ2FyZCwgRWxDb2wsIEVsTWVzc2FnZSB9IGZyb20gJ2VsZW1lbnQtcGx1cydcclxuLy8gQHRzLWlnbm9yZVxyXG5pbXBvcnQgbG9nb0ltZyBmcm9tICdAL2Fzc2V0cy9pbWdzL2xvZ28ucG5nJ1xyXG5cclxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXHJcblxyXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxyXG5cclxuY29uc3QgdGl0bGUgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUaXRsZSlcclxuXHJcbmNvbnN0IGFzeW5jVGl0bGUgPSByZWYoJycpXHJcblxyXG5zZXRUaW1lb3V0KCgpID0+IHtcclxuICBhc3luY1RpdGxlLnZhbHVlID0gdW5yZWYodGl0bGUpXHJcbn0sIDMwMDApXHJcblxyXG5jb25zdCBjb2RlQ2xpY2sgPSAoKSA9PiB7XHJcbiAgRWxNZXNzYWdlLmluZm8odCgncXJjb2RlRGVtby5jbGljaycpKVxyXG59XHJcblxyXG5jb25zdCBkaXNhYmxlZENsaWNrID0gKCkgPT4ge1xyXG4gIEVsTWVzc2FnZS5pbmZvKHQoJ3FyY29kZURlbW8uaW52YWxpZCcpKVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHRlbXBsYXRlPlxyXG4gIDxDb250ZW50V3JhcCA6dGl0bGU9XCJ0KCdxcmNvZGVEZW1vLnFyY29kZScpXCIgOm1lc3NhZ2U9XCJ0KCdxcmNvZGVEZW1vLnFyY29kZURlcycpXCI+XHJcbiAgICA8RWxSb3cgOmd1dHRlcj1cIjIwXCIganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIj5cclxuICAgICAgPEVsQ29sIDp4bD1cIjZcIiA6bGc9XCI2XCIgOm1kPVwiMTJcIiA6c209XCIyNFwiIDp4cz1cIjI0XCI+XHJcbiAgICAgICAgPEVsQ2FyZCBzaGFkb3c9XCJob3ZlclwiIGNsYXNzPVwibWItMTBweCB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZFwiPnt7IHQoJ3FyY29kZURlbW8uYmFzaWNVc2FnZScpIH19PC9kaXY+XHJcbiAgICAgICAgICA8UXJjb2RlIDp0ZXh0PVwidGl0bGVcIiAvPlxyXG4gICAgICAgIDwvRWxDYXJkPlxyXG4gICAgICA8L0VsQ29sPlxyXG4gICAgICA8RWxDb2wgOnhsPVwiNlwiIDpsZz1cIjZcIiA6bWQ9XCIxMlwiIDpzbT1cIjI0XCIgOnhzPVwiMjRcIj5cclxuICAgICAgICA8RWxDYXJkIHNoYWRvdz1cImhvdmVyXCIgY2xhc3M9XCJtYi0xMHB4IHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9udC1ib2xkXCI+e3sgdCgncXJjb2RlRGVtby5pbWdUYWcnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgPFFyY29kZSA6dGV4dD1cInRpdGxlXCIgdGFnPVwiaW1nXCIgLz5cclxuICAgICAgICA8L0VsQ2FyZD5cclxuICAgICAgPC9FbENvbD5cclxuICAgICAgPEVsQ29sIDp4bD1cIjZcIiA6bGc9XCI2XCIgOm1kPVwiMTJcIiA6c209XCIyNFwiIDp4cz1cIjI0XCI+XHJcbiAgICAgICAgPEVsQ2FyZCBzaGFkb3c9XCJob3ZlclwiIGNsYXNzPVwibWItMTBweCB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZFwiPnt7IHQoJ3FyY29kZURlbW8uc3R5bGUnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgPFFyY29kZVxyXG4gICAgICAgICAgICA6dGV4dD1cInRpdGxlXCJcclxuICAgICAgICAgICAgOm9wdGlvbnM9XCJ7XHJcbiAgICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgIGRhcms6ICcjNTVEMTg3JyxcclxuICAgICAgICAgICAgICAgIGxpZ2h0OiAnIzJkOGNmMCdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cIlxyXG4gICAgICAgICAgLz5cclxuICAgICAgICA8L0VsQ2FyZD5cclxuICAgICAgPC9FbENvbD5cclxuICAgICAgPEVsQ29sIDp4bD1cIjZcIiA6bGc9XCI2XCIgOm1kPVwiMTJcIiA6c209XCIyNFwiIDp4cz1cIjI0XCI+XHJcbiAgICAgICAgPEVsQ2FyZCBzaGFkb3c9XCJob3ZlclwiIGNsYXNzPVwibWItMTBweCB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZFwiPnt7IHQoJ3FyY29kZURlbW8uY2xpY2snKSB9fTwvZGl2PlxyXG4gICAgICAgICAgPFFyY29kZSA6dGV4dD1cInRpdGxlXCIgQGNsaWNrPVwiY29kZUNsaWNrXCIgLz5cclxuICAgICAgICA8L0VsQ2FyZD5cclxuICAgICAgPC9FbENvbD5cclxuICAgICAgPEVsQ29sIDp4bD1cIjZcIiA6bGc9XCI2XCIgOm1kPVwiMTJcIiA6c209XCIyNFwiIDp4cz1cIjI0XCI+XHJcbiAgICAgICAgPEVsQ2FyZCBzaGFkb3c9XCJob3ZlclwiIGNsYXNzPVwibWItMTBweCB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZFwiPnt7IHQoJ3FyY29kZURlbW8uYXN5bmNocm9ub3VzQ29udGVudCcpIH19PC9kaXY+XHJcbiAgICAgICAgICA8UXJjb2RlIDp0ZXh0PVwiYXN5bmNUaXRsZVwiIC8+XHJcbiAgICAgICAgPC9FbENhcmQ+XHJcbiAgICAgIDwvRWxDb2w+XHJcbiAgICAgIDxFbENvbCA6eGw9XCI2XCIgOmxnPVwiNlwiIDptZD1cIjEyXCIgOnNtPVwiMjRcIiA6eHM9XCIyNFwiPlxyXG4gICAgICAgIDxFbENhcmQgc2hhZG93PVwiaG92ZXJcIiBjbGFzcz1cIm1iLTEwcHggdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb250LWJvbGRcIj57eyB0KCdxcmNvZGVEZW1vLmludmFsaWQnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgPFFyY29kZSA6dGV4dD1cInRpdGxlXCIgZGlzYWJsZWQgQGRpc2FibGVkLWNsaWNrPVwiZGlzYWJsZWRDbGlja1wiIC8+XHJcbiAgICAgICAgPC9FbENhcmQ+XHJcbiAgICAgIDwvRWxDb2w+XHJcbiAgICAgIDxFbENvbCA6eGw9XCI2XCIgOmxnPVwiNlwiIDptZD1cIjEyXCIgOnNtPVwiMjRcIiA6eHM9XCIyNFwiPlxyXG4gICAgICAgIDxFbENhcmQgc2hhZG93PVwiaG92ZXJcIiBjbGFzcz1cIm1iLTEwcHggdGV4dC1jZW50ZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb250LWJvbGRcIj57eyB0KCdxcmNvZGVEZW1vLmxvZ29Db25maWcnKSB9fTwvZGl2PlxyXG4gICAgICAgICAgPFFyY29kZSA6dGV4dD1cInRpdGxlXCIgOmxvZ289XCJsb2dvSW1nXCIgLz5cclxuICAgICAgICA8L0VsQ2FyZD5cclxuICAgICAgPC9FbENvbD5cclxuICAgICAgPEVsQ29sIDp4bD1cIjZcIiA6bGc9XCI2XCIgOm1kPVwiMTJcIiA6c209XCIyNFwiIDp4cz1cIjI0XCI+XHJcbiAgICAgICAgPEVsQ2FyZCBzaGFkb3c9XCJob3ZlclwiIGNsYXNzPVwibWItMTBweCB0ZXh0LWNlbnRlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvbnQtYm9sZFwiPnt7IHQoJ3FyY29kZURlbW8ubG9nb1N0eWxlJykgfX08L2Rpdj5cclxuICAgICAgICAgIDxRcmNvZGVcclxuICAgICAgICAgICAgOnRleHQ9XCJ0aXRsZVwiXHJcbiAgICAgICAgICAgIDpsb2dvPVwie1xyXG4gICAgICAgICAgICAgIHNyYzogbG9nb0ltZyxcclxuICAgICAgICAgICAgICBsb2dvU2l6ZTogMC4yLFxyXG4gICAgICAgICAgICAgIGJvcmRlclNpemU6IDAuMDUsXHJcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA1MCxcclxuICAgICAgICAgICAgICBiZ0NvbG9yOiAnYmx1ZSdcclxuICAgICAgICAgICAgfVwiXHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvRWxDYXJkPlxyXG4gICAgICA8L0VsQ29sPlxyXG4gICAgICA8RWxDb2wgOnhsPVwiNlwiIDpsZz1cIjZcIiA6bWQ9XCIxMlwiIDpzbT1cIjI0XCIgOnhzPVwiMjRcIj5cclxuICAgICAgICA8RWxDYXJkIHNoYWRvdz1cImhvdmVyXCIgY2xhc3M9XCJtYi0xMHB4IHRleHQtY2VudGVyXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9udC1ib2xkXCI+e3sgdCgncXJjb2RlRGVtby5zaXplJykgfX08L2Rpdj5cclxuICAgICAgICAgIDxRcmNvZGUgOnRleHQ9XCJ0aXRsZVwiIDp3aWR0aD1cIjEwMFwiIC8+XHJcbiAgICAgICAgPC9FbENhcmQ+XHJcbiAgICAgIDwvRWxDb2w+XHJcbiAgICA8L0VsUm93PlxyXG4gIDwvQ29udGVudFdyYXA+XHJcbjwvdGVtcGxhdGU+XHJcbiJdLCJuYW1lcyI6WyJ0b1NKSVNGdW5jdGlvbiIsIkNPREVXT1JEU19DT1VOVCIsInV0aWxzIiwiZ2V0U3ltYm9sU2l6ZSIsInZlcnNpb24yIiwiRXJyb3IiLCJnZXRTeW1ib2xUb3RhbENvZGV3b3JkcyIsImdldEJDSERpZ2l0IiwiZGF0YSIsImRpZ2l0Iiwic2V0VG9TSklTRnVuY3Rpb24iLCJmIiwiaXNLYW5qaU1vZGVFbmFibGVkIiwidG9TSklTIiwia2FuamkyIiwiQml0QnVmZmVyJDEiLCJ0aGlzIiwiYnVmZmVyIiwibGVuZ3RoIiwiTCIsImJpdCIsImV4cG9ydHMiLCJNIiwiUSIsIkgiLCJpc1ZhbGlkIiwibGV2ZWwiLCJmcm9tIiwidmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImZyb21TdHJpbmciLCJlIiwiQml0QnVmZmVyIiwicHJvdG90eXBlIiwiZ2V0IiwiaW5kZXgiLCJidWZJbmRleCIsIk1hdGgiLCJmbG9vciIsInB1dCIsIm51bSIsImkiLCJwdXRCaXQiLCJnZXRMZW5ndGhJbkJpdHMiLCJwdXNoIiwiYml0QnVmZmVyIiwiQml0TWF0cml4JDEiLCJzaXplIiwiVWludDhBcnJheSIsInJlc2VydmVkQml0IiwiQml0TWF0cml4Iiwic2V0Iiwicm93IiwiY29sIiwicmVzZXJ2ZWQiLCJ4b3IiLCJpc1Jlc2VydmVkIiwiYml0TWF0cml4IiwiZ2V0U3ltYm9sU2l6ZTMiLCJyZXF1aXJlJCQwIiwiZ2V0Um93Q29sQ29vcmRzIiwicG9zQ291bnQiLCJpbnRlcnZhbHMiLCJjZWlsIiwicG9zaXRpb25zIiwicmV2ZXJzZSIsImdldFBvc2l0aW9ucyIsImNvb3JkcyIsInBvcyIsInBvc0xlbmd0aCIsImoiLCJnZXRTeW1ib2xTaXplMiIsImZpbmRlclBhdHRlcm4iLCJQYXR0ZXJucyIsIlBBVFRFUk4wMDAiLCJQQVRURVJOMDAxIiwiUEFUVEVSTjAxMCIsIlBBVFRFUk4wMTEiLCJQQVRURVJOMTAwIiwiUEFUVEVSTjEwMSIsIlBBVFRFUk4xMTAiLCJQQVRURVJOMTExIiwiUGVuYWx0eVNjb3JlcyIsImdldE1hc2tBdCIsIm1hc2tQYXR0ZXJuMiIsIm1hc2siLCJpc05hTiIsInBhcnNlSW50IiwiZ2V0UGVuYWx0eU4xIiwicG9pbnRzIiwic2FtZUNvdW50Q29sIiwic2FtZUNvdW50Um93IiwibGFzdENvbCIsImxhc3RSb3ciLCJtb2R1bGUiLCJnZXRQZW5hbHR5TjIiLCJsYXN0IiwiZ2V0UGVuYWx0eU4zIiwiYml0c0NvbCIsImJpdHNSb3ciLCJnZXRQZW5hbHR5TjQiLCJkYXJrQ291bnQiLCJtb2R1bGVzQ291bnQiLCJhYnMiLCJhcHBseU1hc2siLCJwYXR0ZXJuIiwiZ2V0QmVzdE1hc2siLCJzZXR1cEZvcm1hdEZ1bmMiLCJudW1QYXR0ZXJucyIsIk9iamVjdCIsImtleXMiLCJiZXN0UGF0dGVybiIsImxvd2VyUGVuYWx0eSIsIkluZmluaXR5IiwicCIsInBlbmFsdHkiLCJFQ0xldmVsIiwiRUNfQkxPQ0tTX1RBQkxFIiwiRUNfQ09ERVdPUkRTX1RBQkxFIiwiZXJyb3JDb3JyZWN0aW9uQ29kZSIsImdldEJsb2Nrc0NvdW50IiwiZXJyb3JDb3JyZWN0aW9uTGV2ZWwyIiwiZ2V0VG90YWxDb2Rld29yZHNDb3VudCIsIkVYUF9UQUJMRSIsIkxPR19UQUJMRSIsIngiLCJnYWxvaXNGaWVsZCIsImxvZyIsIm4iLCJleHAiLCJtdWwiLCJ5IiwiR0YiLCJwMSIsInAyIiwiY29lZmYiLCJtb2QiLCJkaXZpZGVudCIsImRpdmlzb3IiLCJyZXN1bHQiLCJvZmZzZXQiLCJzbGljZSIsImdlbmVyYXRlRUNQb2x5bm9taWFsIiwiZGVncmVlIiwicG9seSIsIlBvbHlub21pYWwiLCJSZWVkU29sb21vbkVuY29kZXIkMSIsImdlblBvbHkiLCJpbml0aWFsaXplIiwiUmVlZFNvbG9tb25FbmNvZGVyIiwiZW5jb2RlIiwicGFkZGVkRGF0YSIsInJlbWFpbmRlciIsInN0YXJ0IiwiYnVmZiIsInJlZWRTb2xvbW9uRW5jb2RlciIsInZlcnNpb25DaGVjayIsImthbmppIiwicmVwbGFjZSIsImJ5dGUiLCJyZWdleCIsIktBTkpJIiwiUmVnRXhwIiwiQllURV9LQU5KSSIsIkJZVEUiLCJOVU1FUklDIiwiQUxQSEFOVU1FUklDIiwiVEVTVF9LQU5KSSIsIlRFU1RfTlVNRVJJQyIsIlRFU1RfQUxQSEFOVU1FUklDIiwidGVzdEthbmppIiwic3RyIiwidGVzdCIsInRlc3ROdW1lcmljIiwidGVzdEFscGhhbnVtZXJpYyIsIlZlcnNpb25DaGVjayIsIlJlZ2V4IiwicmVxdWlyZSQkMSIsImlkIiwiY2NCaXRzIiwiTUlYRUQiLCJnZXRDaGFyQ291bnRJbmRpY2F0b3IiLCJtb2RlMiIsImdldEJlc3RNb2RlRm9yRGF0YSIsImRhdGFTdHIiLCJ0b1N0cmluZyIsIlV0aWxzMiIsIkVDQ29kZTIiLCJFQ0xldmVsMiIsInJlcXVpcmUkJDIiLCJNb2RlMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwiRzE4X0JDSCIsImdldFJlc2VydmVkQml0c0NvdW50IiwiZ2V0VG90YWxCaXRzRnJvbURhdGFBcnJheSIsInNlZ21lbnRzMiIsInRvdGFsQml0cyIsImZvckVhY2giLCJyZXNlcnZlZEJpdHMiLCJtb2RlIiwiZ2V0Qml0c0xlbmd0aCIsImdldENhcGFjaXR5IiwiZGF0YVRvdGFsQ29kZXdvcmRzQml0cyIsInVzYWJsZUJpdHMiLCJnZXRCZXN0VmVyc2lvbkZvckRhdGEiLCJzZWciLCJlY2wiLCJBcnJheSIsImlzQXJyYXkiLCJjdXJyZW50VmVyc2lvbiIsImdldEJlc3RWZXJzaW9uRm9yTWl4ZWREYXRhIiwiZ2V0QmVzdFZlcnNpb25Gb3JEYXRhTGVuZ3RoIiwiZ2V0TGVuZ3RoIiwiZ2V0RW5jb2RlZEJpdHMiLCJkIiwiVXRpbHMiLCJHMTVfQkNIIiwiZm9ybWF0SW5mbyIsIk1vZGUiLCJOdW1lcmljRGF0YSIsIndyaXRlIiwiYml0QnVmZmVyMiIsImdyb3VwIiwic3Vic3RyIiwicmVtYWluaW5nTnVtIiwibnVtZXJpY0RhdGEiLCJBTFBIQV9OVU1fQ0hBUlMiLCJBbHBoYW51bWVyaWNEYXRhIiwiaW5kZXhPZiIsImFscGhhbnVtZXJpY0RhdGEiLCJlbmNvZGVVdGY4MiIsImlucHV0IiwicG9pbnQiLCJjaGFyQ29kZUF0Iiwic2Vjb25kIiwiQnl0ZURhdGEiLCJsIiwiYnl0ZURhdGEiLCJLYW5qaURhdGEiLCJkaWprc3RyYTIiLCJrYW5qaURhdGEiLCJzaW5nbGVfc291cmNlX3Nob3J0ZXN0X3BhdGhzIiwiZ3JhcGgiLCJzIiwicHJlZGVjZXNzb3JzIiwiY29zdHMiLCJjbG9zZXN0IiwidSIsInYiLCJjb3N0X29mX3NfdG9fdSIsImFkamFjZW50X25vZGVzIiwiY29zdF9vZl9zX3RvX3VfcGx1c19jb3N0X29mX2UiLCJjb3N0X29mX3NfdG9fdiIsIm9wZW4iLCJQcmlvcml0eVF1ZXVlIiwibWFrZSIsImVtcHR5IiwicG9wIiwiY29zdCIsImhhc093blByb3BlcnR5IiwibXNnIiwiam9pbiIsImV4dHJhY3Rfc2hvcnRlc3RfcGF0aF9mcm9tX3ByZWRlY2Vzc29yX2xpc3QiLCJub2RlcyIsImZpbmRfcGF0aCIsIm9wdHMiLCJrZXkiLCJUIiwidCIsInF1ZXVlIiwic29ydGVyIiwiZGVmYXVsdF9zb3J0ZXIiLCJhIiwiYiIsIml0ZW0iLCJzb3J0Iiwic2hpZnQiLCJOdW1lcmljRGF0YTIiLCJBbHBoYW51bWVyaWNEYXRhMiIsIkJ5dGVEYXRhMiIsIkthbmppRGF0YTIiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsImRpamtzdHJhIiwicmVxdWlyZSQkNyIsImdldFN0cmluZ0J5dGVMZW5ndGgiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImdldFNlZ21lbnRzIiwicmVnZXgyIiwiZXhlYyIsImdldFNlZ21lbnRzRnJvbVN0cmluZyIsIm51bVNlZ3MiLCJhbHBoYU51bVNlZ3MiLCJieXRlU2VncyIsImthbmppU2VncyIsImNvbmNhdCIsInMxIiwiczIiLCJtYXAiLCJvYmoiLCJnZXRTZWdtZW50Qml0c0xlbmd0aCIsImJ1aWxkU2luZ2xlU2VnbWVudCIsIm1vZGVzSGludCIsImJlc3RNb2RlIiwiZnJvbUFycmF5IiwiYXJyYXkiLCJyZWR1Y2UiLCJhY2MiLCJzZWdzIiwiYnVpbGROb2RlcyIsInRhYmxlIiwicHJldk5vZGVJZHMiLCJub2RlR3JvdXAiLCJjdXJyZW50Tm9kZUlkcyIsIm5vZGUiLCJsYXN0Q291bnQiLCJwcmV2Tm9kZUlkIiwiZW5kIiwiYnVpbGRHcmFwaCIsInBhdGgiLCJvcHRpbWl6ZWRTZWdzIiwiY3VyciIsInByZXZTZWciLCJtZXJnZVNlZ21lbnRzIiwicmF3U3BsaXQiLCJBbGlnbm1lbnRQYXR0ZXJuIiwiRmluZGVyUGF0dGVybiIsIk1hc2tQYXR0ZXJuIiwiRUNDb2RlIiwicmVxdWlyZSQkOCIsIlZlcnNpb24iLCJyZXF1aXJlJCQ5IiwiRm9ybWF0SW5mbyIsInJlcXVpcmUkJDEwIiwicmVxdWlyZSQkMTEiLCJTZWdtZW50cyIsInJlcXVpcmUkJDEyIiwic2V0dXBGb3JtYXRJbmZvIiwibWF0cml4IiwiYml0cyIsImNyZWF0ZURhdGEiLCJyZW1haW5pbmdCeXRlIiwidG90YWxDb2Rld29yZHMiLCJlY1RvdGFsQ29kZXdvcmRzIiwiZGF0YVRvdGFsQ29kZXdvcmRzIiwiZWNUb3RhbEJsb2NrcyIsImJsb2Nrc0luR3JvdXAxIiwidG90YWxDb2Rld29yZHNJbkdyb3VwMSIsImRhdGFDb2Rld29yZHNJbkdyb3VwMSIsImRhdGFDb2Rld29yZHNJbkdyb3VwMiIsImVjQ291bnQiLCJycyIsImRjRGF0YSIsImVjRGF0YSIsIm1heERhdGFTaXplIiwiZGF0YVNpemUiLCJtYXgiLCJyIiwiY3JlYXRlQ29kZXdvcmRzIiwiY3JlYXRlU3ltYm9sIiwiZXN0aW1hdGVkVmVyc2lvbiIsInJhd1NlZ21lbnRzIiwiYmVzdFZlcnNpb24iLCJkYXRhQml0cyIsIm1vZHVsZUNvdW50IiwibW9kdWxlcyIsImMiLCJzZXR1cEZpbmRlclBhdHRlcm4iLCJzZXR1cFRpbWluZ1BhdHRlcm4iLCJzZXR1cEFsaWdubWVudFBhdHRlcm4iLCJzZXR1cFZlcnNpb25JbmZvIiwiaW5jIiwiYml0SW5kZXgiLCJieXRlSW5kZXgiLCJkYXJrIiwic2V0dXBEYXRhIiwiYmluZCIsInZlcnNpb24iLCJlcnJvckNvcnJlY3Rpb25MZXZlbCIsIm1hc2tQYXR0ZXJuIiwic2VnbWVudHMiLCJxcmNvZGUiLCJjcmVhdGUiLCJvcHRpb25zIiwidG9TSklTRnVuYyIsIlV0aWxzJDEiLCJoZXgycmdiYSIsImhleCIsImhleENvZGUiLCJzcGxpdCIsImFwcGx5IiwiaGV4VmFsdWUiLCJnIiwiZ2V0T3B0aW9ucyIsImNvbG9yIiwibWFyZ2luIiwid2lkdGgiLCJzY2FsZSIsImxpZ2h0IiwidHlwZSIsInJlbmRlcmVyT3B0cyIsImdldFNjYWxlIiwicXJTaXplIiwiZ2V0SW1hZ2VXaWR0aCIsInFyVG9JbWFnZURhdGEiLCJpbWdEYXRhIiwicXIiLCJzeW1ib2xTaXplIiwic2NhbGVkTWFyZ2luIiwicGFsZXR0ZSIsInBvc0RzdCIsInB4Q29sb3IiLCJyZW5kZXIiLCJxckRhdGEiLCJjYW52YXMyIiwiY2FudmFzRWwiLCJnZXRDb250ZXh0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q2FudmFzRWxlbWVudCIsImN0eCIsImltYWdlIiwiY3JlYXRlSW1hZ2VEYXRhIiwiY2xlYXJSZWN0IiwiaGVpZ2h0Iiwic3R5bGUiLCJjbGVhckNhbnZhcyIsInB1dEltYWdlRGF0YSIsInJlbmRlclRvRGF0YVVSTCIsInRvRGF0YVVSTCIsInF1YWxpdHkiLCJnZXRDb2xvckF0dHJpYiIsImF0dHJpYiIsImFscGhhIiwidG9GaXhlZCIsInN2Z0NtZCIsImNtZCIsInN2Z1RhZyIsImNiIiwicXJjb2Rlc2l6ZSIsImJnIiwibW92ZUJ5IiwibmV3Um93IiwibGluZUxlbmd0aCIsInFyVG9QYXRoIiwidmlld0JveCIsInN2Z1RhZzIiLCJjYW5Qcm9taXNlIiwiUHJvbWlzZSIsInRoZW4iLCJRUkNvZGUiLCJDYW52YXNSZW5kZXJlciIsIlN2Z1JlbmRlcmVyIiwicmVuZGVyQ2FudmFzIiwicmVuZGVyRnVuYyIsInRleHQiLCJhcmdzIiwiY2FsbCIsImFyZ3VtZW50cyIsImFyZ3NOdW0iLCJpc0xhc3RBcmdDYiIsInJlc29sdmUiLCJyZWplY3QiLCJicm93c2VyIiwidG9DYW52YXMiLCJfIiwiZ2V0UHJlZml4Q2xzIiwidXNlRGVzaWduIiwicHJlZml4Q2xzIiwibG9hZGluZyIsInJlZiIsIndyYXBSZWYiLCJyZW5kZXJUZXh0IiwiY29tcHV0ZWQiLCJTdHJpbmciLCJwcm9wcyIsIndyYXBTdHlsZSIsIndhdGNoIiwidmFsIiwiYXN5bmMiLCJuZXh0VGljayIsImNsb25lRGVlcCIsInRhZyIsImdldEVycm9yQ29ycmVjdGlvbkxldmVsIiwidW5yZWYiLCJfd2lkdGgiLCJnZXRPcmlnaW5XaWR0aCIsImNhbnZhc1JlZiIsImxvZ28iLCJ1cmwiLCJjcmVhdGVMb2dvQ29kZSIsImVtaXQiLCJzcmMiLCJkZWVwIiwiaW1tZWRpYXRlIiwiY2FudmFzV2lkdGgiLCJsb2dvT3B0aW9ucyIsImFzc2lnbiIsImxvZ29TaXplIiwiYmdDb2xvciIsImJvcmRlclNpemUiLCJjcm9zc09yaWdpbiIsImJvcmRlclJhZGl1cyIsImxvZ29SYWRpdXMiLCJpc1N0cmluZyIsImxvZ29TcmMiLCJsb2dvV2lkdGgiLCJsb2dvWFkiLCJsb2dvQmdXaWR0aCIsImxvZ29CZ1hZIiwiY2FudmFzUm91bmRSZWN0IiwiZmlsbFN0eWxlIiwiZmlsbCIsIkltYWdlIiwic2V0QXR0cmlidXRlIiwib25sb2FkIiwiaW1hZ2UyIiwiY2FudmFzSW1hZ2UiLCJpbWFnZUNhbnZhcyIsImRyYXdJbWFnZSIsImNyZWF0ZVBhdHRlcm4iLCJkcmF3TG9nb1dpdGhDYW52YXMiLCJjb250ZW50IiwiX2NhbnZhcyIsInciLCJoIiwibWluU2l6ZSIsIm1pbiIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImFyY1RvIiwiY2xvc2VQYXRoIiwiY2xpY2tDb2RlIiwiZGlzYWJsZWRDbGljayIsImFwcFN0b3JlIiwidXNlQXBwU3RvcmUiLCJ1c2VJMThuIiwidGl0bGUiLCJnZXRUaXRsZSIsImFzeW5jVGl0bGUiLCJzZXRUaW1lb3V0IiwiY29kZUNsaWNrIiwiRWxNZXNzYWdlIiwiaW5mbyJdLCJtYXBwaW5ncyI6Im1rQkFBQSxJQUFJQSxFQUNKLE1BQU1DLEVBQWtCLENBQ3RCLEVBQ0EsR0FBSSxHQUFJLEdBQUksSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDMUMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssS0FDN0MsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FDdEQsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFTeERDLEVBQUFDLGNBQXdCLFNBQXdCQyxHQUM5QyxJQUFLQSxFQUFlLE1BQUEsSUFBSUMsTUFBTSx5Q0FDMUIsR0FBQUQsRUFBVSxHQUFLQSxFQUFVLEdBQVUsTUFBQSxJQUFJQyxNQUFNLDZDQUNqRCxPQUFpQixFQUFWRCxFQUFjLElBU3ZCRixFQUFBSSx3QkFBa0MsU0FBa0NGLEdBQ2xFLE9BQU9ILEVBQWdCRyxJQVNORixFQUFBSyxZQUFHLFNBQVVDLEdBQzlCLElBQUlDLEVBQVEsRUFFWixLQUFnQixJQUFURCxHQUNMQyxJQUNVRCxLQUFBLEVBR0wsT0FBQUMsR0FHVFAsRUFBQVEsa0JBQTRCLFNBQTRCQyxHQUNsRCxHQUFhLG1CQUFOQSxFQUNILE1BQUEsSUFBSU4sTUFBTSx5Q0FHREwsRUFBQVcsR0FHbkJULEVBQUFVLG1CQUE2QixXQUMzQixZQUFpQyxJQUFuQlosR0FHaEJFLEVBQUFX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R0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLElBR1JDLEVBQXFCLENBRXpCLEVBQUcsR0FBSSxHQUFJLEdBQ1gsR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxHQUNaLEdBQUksR0FBSSxHQUFJLEdBQ1osR0FBSSxHQUFJLEdBQUksR0FDWixHQUFJLEdBQUksR0FBSSxJQUNaLEdBQUksR0FBSSxJQUFLLElBQ2IsR0FBSSxHQUFJLElBQUssSUFDYixHQUFJLElBQUssSUFBSyxJQUNkLEdBQUksSUFBSyxJQUFLLElBQ2QsR0FBSSxJQUFLLElBQUssSUFDZCxHQUFJLElBQUssSUFBSyxJQUNkLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLElBQ2YsSUFBSyxJQUFLLElBQUssSUFDZixJQUFLLElBQUssSUFBSyxJQUNmLElBQUssSUFBSyxJQUFLLEtBQ2YsSUFBSyxJQUFLLElBQUssS0FDZixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLElBQUssS0FBTSxLQUNoQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FBTSxLQUNqQixJQUFLLEtBQU0sS0FB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
