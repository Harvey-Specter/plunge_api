import{Q as e,R as t,d as s,ak as a,D as u,Y as l,az as r,W as p,o as n,k as o,w as c,a2 as d,n as f,a as m,a4 as i,as as g,aa as b,ae as y,ar as $}from"./index.63ad27ed.js";import{m as h}from"./typescript2.0e462989.js";const j=Symbol("rowContextKey");const v=y(b(s({name:"ElCol",props:e({tag:{type:String,default:"div"},span:{type:Number,default:24},offset:{type:Number,default:0},pull:{type:Number,default:0},push:{type:Number,default:0},xs:{type:t([Number,Object]),default:()=>h({})},sm:{type:t([Number,Object]),default:()=>h({})},md:{type:t([Number,Object]),default:()=>h({})},lg:{type:t([Number,Object]),default:()=>h({})},xl:{type:t([Number,Object]),default:()=>h({})}}),setup(e){const t=e,{gutter:s}=a(j,{gutter:u((()=>0))}),b=l("col"),y=u((()=>{const e={};return s.value&&(e.paddingLeft=e.paddingRight=s.value/2+"px"),e})),$=u((()=>{const e=[];["span","offset","pull","push"].forEach((s=>{const a=t[s];r(a)&&("span"===s?e.push(b.b(`${t[s]}`)):a>0&&e.push(b.b(`${s}-${t[s]}`)))}));return["xs","sm","md","lg","xl"].forEach((s=>{r(t[s])?e.push(b.b(`${s}-${t[s]}`)):p(t[s])&&Object.entries(t[s]).forEach((([t,a])=>{e.push("span"!==t?b.b(`${s}-${t}-${a}`):b.b(`${s}-${a}`))}))})),s.value&&e.push(b.is("guttered")),e}));return(e,t)=>(n(),o(g(e.tag),{class:f([m(b).b(),m($)]),style:i(m(y))},{default:c((()=>[d(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/col/src/col.vue"]]));const N=y(b(s({name:"ElRow",props:e({tag:{type:String,default:"div"},gutter:{type:Number,default:0},justify:{type:String,values:["start","center","end","space-around","space-between","space-evenly"],default:"start"},align:{type:String,values:["top","middle","bottom"],default:"top"}}),setup(e){const t=e,s=l("row"),a=u((()=>t.gutter));$(j,{gutter:a});const r=u((()=>{const e={};return t.gutter?(e.marginRight=e.marginLeft=`-${t.gutter/2}px`,e):e}));return(e,a)=>(n(),o(g(e.tag),{class:f([m(s).b(),m(s).is(`justify-${t.justify}`,"start"!==e.justify),m(s).is(`align-${t.align}`,"top"!==e.align)]),style:i(m(r))},{default:c((()=>[d(e.$slots,"default")])),_:3},8,["class","style"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/row/src/row.vue"]]));export{v as E,N as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
