import{d as e,r as t,aR as n,$ as r,v as o,aT as i,bA as a,o as u,c as s,B as l,C as c,D as f,a as d,b0 as p,g as h,a4 as g,aa as v,bS as y,bX as m}from"./index.1a68aef2.js";var b;if("undefined"==typeof global){if("ActiveXObject"in window){"\n Sorry, wangEditor V5+ versions do not support IE browser.",console.error("抱歉，wangEditor V5+ 版本开始，不在支持 IE 浏览器\n Sorry, wangEditor V5+ versions do not support IE browser.")}w(),E()}else global&&(null===(b=global.navigator)||void 0===b?void 0:b.userAgent.match("QQBrowser"))&&(w(),E());function w(){"undefined"==typeof globalThis&&(window.globalThis=window)}function E(){"undefined"==typeof AggregateError&&(window.AggregateError=function(e,t){var n=new Error(t);return n.errors=e,n})}if("object"==typeof global){var D=Object.getOwnPropertyDescriptor(global,"window");global.window&&!D.set||(global.window=global,global.requestAnimationFrame=function(){},global.navigator={userAgent:""},global.location={hostname:"0.0.0.0",port:0,protocol:"http:"},global.btoa=function(){},global.crypto={getRandomValues:function(e){return nodeCrypto.randomFillSync(e)}}),null!=global.document&&null==global.document.getElementsByTagName&&(global.document.getElementsByTagName=function(){return[]})}
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function C(e){return"[object Object]"===Object.prototype.toString.call(e)}function x(e){var t,n;return!1!==C(e)&&(void 0===(t=e.constructor)||!1!==C(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf"))}function S(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=de[e],i=o?"function"==typeof o?o.apply(null,n):o:"unknown error nr: "+e;throw Error("[Immer] "+i)}function A(e){return!!e&&!!e[fe]}function O(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===pe}(e)||Array.isArray(e)||!!e[ce]||!!e.constructor[ce]||_(e)||P(e))}function k(e,t,n){void 0===n&&(n=!1),0===B(e)?(n?Object.keys:he)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function B(e){var t=e[fe];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:_(e)?2:P(e)?3:0}function F(e,t){return 2===B(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function T(e,t,n){var r=B(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function _(e){return ae&&e instanceof Map}function P(e){return ue&&e instanceof Set}function j(e){return e.o||e.t}function N(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=ge(e);delete t[fe];for(var n=he(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function I(e,t){return void 0===t&&(t=!1),R(e)||A(e)||!O(e)||(B(e)>1&&(e.set=e.add=e.clear=e.delete=L),Object.freeze(e),t&&k(e,(function(e,t){return I(t,!0)}),!0)),e}function L(){S(2)}function R(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function M(e){var t=ve[e];return t||S(18,e),t}function z(){return oe||S(0),oe}function $(e,t){t&&(M("Patches"),e.u=[],e.s=[],e.v=t)}function H(e){V(e),e.p.forEach(W),e.p=null}function V(e){e===oe&&(oe=e.l)}function U(e){return oe={p:[],l:oe,h:e,m:!0,_:0}}function W(e){var t=e[fe];0===t.i||1===t.i?t.j():t.O=!0}function q(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||M("ES5").S(t,e,r),r?(n[fe].P&&(H(t),S(4)),O(e)&&(e=G(t,e),t.l||Y(t,e)),t.u&&M("Patches").M(n[fe],e,t.u,t.s)):e=G(t,n,[]),H(t),t.u&&t.v(t.u,t.s),e!==le?e:void 0}function G(e,t,n){if(R(t))return t;var r=t[fe];if(!r)return k(t,(function(o,i){return K(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return Y(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=N(r.k):r.o;k(3===r.i?new Set(o):o,(function(t,i){return K(e,r,o,t,i,n)})),Y(e,o,!1),n&&e.u&&M("Patches").R(r,n,e.u,e.s)}return r.o}function K(e,t,n,r,o,i){if(o===n&&S(5),A(o)){var a=G(e,o,i&&t&&3!==t.i&&!F(t.D,r)?i.concat(r):void 0);if(T(n,r,a),!A(a))return;e.m=!1}if(O(o)&&!R(o)){if(!e.h.F&&e._<1)return;G(e,o),t&&t.A.l||Y(e,o)}}function Y(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&I(t,n)}function X(e,t){var n=e[fe];return(n?j(n):e)[t]}function Z(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function J(e){e.P||(e.P=!0,e.l&&J(e.l))}function Q(e){e.o||(e.o=N(e.t))}function ee(e,t,n){var r=_(t)?M("MapSet").N(t,n):P(t)?M("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:z(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=ye;n&&(o=[r],i=me);var a=Proxy.revocable(o,i),u=a.revoke,s=a.proxy;return r.k=s,r.j=u,s}(t,n):M("ES5").J(t,n);return(n?n.A:z()).p.push(r),r}function te(e){return A(e)||S(22,e),function e(t){if(!O(t))return t;var n,r=t[fe],o=B(t);if(r){if(!r.P&&(r.i<4||!M("ES5").K(r)))return r.t;r.I=!0,n=ne(t,o),r.I=!1}else n=ne(t,o);return k(n,(function(t,o){r&&function(e,t){return 2===B(e)?e.get(t):e[t]}(r.t,t)===o||T(n,t,e(o))})),3===o?new Set(n):n}(e)}function ne(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return N(e)}var re,oe,ie="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),ae="undefined"!=typeof Map,ue="undefined"!=typeof Set,se="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,le=ie?Symbol.for("immer-nothing"):((re={})["immer-nothing"]=!0,re),ce=ie?Symbol.for("immer-draftable"):"__$immer_draftable",fe=ie?Symbol.for("immer-state"):"__$immer_state",de={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(e){return"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+e},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(e){return"Cannot apply patch, path doesn't resolve: "+e},16:'Sets cannot have "replace" patches.',17:function(e){return"Unsupported patch operation: "+e},18:function(e){return"The plugin for '"+e+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+e+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(e){return"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+e+"'"},22:function(e){return"'current' expects a draft, got: "+e},23:function(e){return"'original' expects a draft, got: "+e},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},pe=""+Object.prototype.constructor,he="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,ge=Object.getOwnPropertyDescriptors||function(e){var t={};return he(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},ve={},ye={get:function(e,t){if(t===fe)return e;var n,r,o,i=j(e);if(!F(i,t))return n=e,(o=Z(i,t))?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(n.k):void 0;var a=i[t];return e.I||!O(a)?a:a===X(e.t,t)?(Q(e),e.o[t]=ee(e.A.h,a,e)):a},has:function(e,t){return t in j(e)},ownKeys:function(e){return Reflect.ownKeys(j(e))},set:function(e,t,n){var r=Z(j(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=X(j(e),t),i=null==o?void 0:o[fe];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,o)&&(void 0!==n||F(e.t,t)))return!0;Q(e),J(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==X(e.t,t)||t in e.t?(e.D[t]=!1,Q(e),J(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=j(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){S(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){S(12)}},me={};k(ye,(function(e,t){me[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),me.deleteProperty=function(e,t){return isNaN(parseInt(t))&&S(13),ye.deleteProperty.call(this,e[0],t)},me.set=function(e,t,n){return"length"!==t&&isNaN(parseInt(t))&&S(14),ye.set.call(this,e[0],t,n,e[0])};var be=function(){function e(e){var t=this;this.g=se,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),u=1;u<r;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&S(6),void 0!==r&&"function"!=typeof r&&S(7),O(e)){var u=U(t),s=ee(t,e,void 0),l=!0;try{a=n(s),l=!1}finally{l?H(u):V(u)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return $(u,r),q(e,u)}),(function(e){throw H(u),e})):($(u,r),q(a,u))}if(!e||"object"!=typeof e){if((a=n(e))===le)return;return void 0===a&&(a=e),t.F&&I(a,!0),a}S(21,e)},this.produceWithPatches=function(e,n){return"function"==typeof e?function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))}:[t.produce(e,n,(function(e,t){r=e,o=t})),r,o];var r,o},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){O(e)||S(8),A(e)&&(e=te(e));var t=U(this),n=ee(this,e,void 0);return n[fe].C=!0,V(t),n},t.finishDraft=function(e,t){var n=e&&e[fe];n&&n.C||S(9),n.I&&S(10);var r=n.A;return $(r,t),q(void 0,r)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!se&&S(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=M("Patches").$;return A(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),we=new be,Ee=we.produce;we.produceWithPatches.bind(we),we.setAutoFreeze.bind(we),we.setUseProxies.bind(we),we.applyPatches.bind(we);var De=we.createDraft.bind(we),Ce=we.finishDraft.bind(we);function xe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Se=new WeakMap,Ae=new WeakMap,Oe=new WeakMap,ke=new WeakMap,Be=new WeakMap,Fe=new WeakMap;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _e(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pe=e=>{switch(e.type){case"insert_text":case"remove_text":case"set_node":var{path:t}=e;return St.levels(t);case"insert_node":var{node:n,path:r}=e;return[...St.levels(r),...zt.isText(n)?[]:Array.from(Et.nodes(n),(e=>{var[,t]=e;return r.concat(t)}))];case"merge_node":var{path:o}=e;return[...St.ancestors(o),St.previous(o)];case"move_node":var{path:i,newPath:a}=e;if(St.equals(i,a))return[];var u=[],s=[];for(var l of St.ancestors(i)){var c=St.transform(l,e);u.push(c)}for(var f of St.ancestors(a)){var d=St.transform(f,e);s.push(d)}var p=s[s.length-1],h=a[a.length-1],g=p.concat(h);return[...u,...s,g];case"remove_node":var{path:v}=e;return[...St.ancestors(v)];case"split_node":var{path:y}=e;return[...St.levels(y),St.next(y)];default:return[]}};function je(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ne,Ie,Le=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=!t,r=t?Ve(e):e,o=Ne.None,i=Ne.None,a=0,u=null;for(var s of r){var l=s.codePointAt(0);if(!l)break;var c=tt(s,l);if([o,i]=n?[i,c]:[c,o],nt(o,Ne.ZWJ)&&nt(i,Ne.ExtPict)&&!at(n?e.substring(0,a):e.substring(0,e.length-a)))break;if(nt(o,Ne.RI)&&nt(i,Ne.RI)&&!(u=null!==u?!u:!!n||st(e.substring(0,e.length-a))))break;if(o!==Ne.None&&i!==Ne.None&&ot(o,i))break;a+=s.length}return a||1},Re=/\s/,Me=/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/,ze=/['\u2018\u2019]/,$e=(e,t,n)=>{if(n){var r=e.length-t;return[e.slice(r,e.length),e.slice(0,r)]}return[e.slice(0,t),e.slice(t)]},He=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Re.test(t))return!1;if(ze.test(t)){var o=Le(n,r),[i,a]=$e(n,o,r);if(e(i,a,r))return!0}return!Me.test(t)},Ve=function*(e){for(var t=e.length-1,n=0;n<e.length;n++){var r=e.charAt(t-n);if(We(r.charCodeAt(0))){var o=e.charAt(t-n-1);if(Ue(o.charCodeAt(0))){yield o+r,n++;continue}}yield r}},Ue=e=>e>=55296&&e<=56319,We=e=>e>=56320&&e<=57343;(Ie=Ne||(Ne={}))[Ie.None=0]="None",Ie[Ie.Extend=1]="Extend",Ie[Ie.ZWJ=2]="ZWJ",Ie[Ie.RI=4]="RI",Ie[Ie.Prepend=8]="Prepend",Ie[Ie.SpacingMark=16]="SpacingMark",Ie[Ie.L=32]="L",Ie[Ie.V=64]="V",Ie[Ie.T=128]="T",Ie[Ie.LV=256]="LV",Ie[Ie.LVT=512]="LVT",Ie[Ie.ExtPict=1024]="ExtPict",Ie[Ie.Any=2048]="Any";var qe=/^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/,Ge=/^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/,Ke=/^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/,Ye=/^[\u1100-\u115F\uA960-\uA97C]$/,Xe=/^[\u1160-\u11A7\uD7B0-\uD7C6]$/,Ze=/^[\u11A8-\u11FF\uD7CB-\uD7FB]$/,Je=/^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/,Qe=/^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/,et=/^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/,tt=(e,t)=>{var n=Ne.Any;return-1!==e.search(qe)&&(n|=Ne.Extend),8205===t&&(n|=Ne.ZWJ),t>=127462&&t<=127487&&(n|=Ne.RI),-1!==e.search(Ge)&&(n|=Ne.Prepend),-1!==e.search(Ke)&&(n|=Ne.SpacingMark),-1!==e.search(Ye)&&(n|=Ne.L),-1!==e.search(Xe)&&(n|=Ne.V),-1!==e.search(Ze)&&(n|=Ne.T),-1!==e.search(Je)&&(n|=Ne.LV),-1!==e.search(Qe)&&(n|=Ne.LVT),-1!==e.search(et)&&(n|=Ne.ExtPict),n};function nt(e,t){return 0!=(e&t)}var rt=[[Ne.L,Ne.L|Ne.V|Ne.LV|Ne.LVT],[Ne.LV|Ne.V,Ne.V|Ne.T],[Ne.LVT|Ne.T,Ne.T],[Ne.Any,Ne.Extend|Ne.ZWJ],[Ne.Any,Ne.SpacingMark],[Ne.Prepend,Ne.Any],[Ne.ZWJ,Ne.ExtPict],[Ne.RI,Ne.RI]];function ot(e,t){return-1===rt.findIndex((n=>nt(e,n[0])&&nt(t,n[1])))}var it=/(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/,at=e=>-1!==e.search(it),ut=/(?:\uD83C[\uDDE6-\uDDFF])+$/g,st=e=>{var t=e.match(ut);return null!==t&&t[0].length/2%2==1},lt=e=>x(e)&&Et.isNodeList(e.children)&&!vt.isEditor(e),ct={isAncestor:e=>x(e)&&Et.isNodeList(e.children),isElement:lt,isElementList:e=>Array.isArray(e)&&e.every((e=>ct.isElement(e))),isElementProps:e=>void 0!==e.children,isElementType:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"type";return lt(e)&&e[n]===t},matches(e,t){for(var n in t)if("children"!==n&&e[n]!==t[n])return!1;return!0}},ft=["text"],dt=["text"];function pt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?pt(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):pt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gt=new WeakMap,vt={above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:n=!1,mode:r="lowest",at:o=e.selection,match:i}=t;if(o){var a=vt.path(e,o),u="lowest"===r;for(var[s,l]of vt.levels(e,{at:a,voids:n,match:i,reverse:u}))if(!zt.isText(s)&&!St.equals(a,l))return[s,l]}},addMark(e,t,n){e.addMark(t,n)},after(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={anchor:vt.point(e,t,{edge:"end"}),focus:vt.end(e,[])},{distance:i=1}=r,a=0;for(var u of vt.positions(e,ht(ht({},r),{},{at:o}))){if(a>i)break;0!==a&&(n=u),a++}return n},before(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={anchor:vt.start(e,[]),focus:vt.point(e,t,{edge:"start"})},{distance:i=1}=r,a=0;for(var u of vt.positions(e,ht(ht({},r),{},{at:o,reverse:!0}))){if(a>i)break;0!==a&&(n=u),a++}return n},deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n="character"}=t;e.deleteBackward(n)},deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n="character"}=t;e.deleteForward(n)},deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:n="forward"}=t;e.deleteFragment(n)},edges:(e,t)=>[vt.start(e,t),vt.end(e,t)],end:(e,t)=>vt.point(e,t,{edge:"end"}),first(e,t){var n=vt.path(e,t,{edge:"start"});return vt.node(e,n)},fragment(e,t){var n=vt.range(e,t);return Et.fragment(e,n)},hasBlocks:(e,t)=>t.children.some((t=>vt.isBlock(e,t))),hasInlines:(e,t)=>t.children.some((t=>zt.isText(t)||vt.isInline(e,t))),hasTexts:(e,t)=>t.children.every((e=>zt.isText(e))),insertBreak(e){e.insertBreak()},insertFragment(e,t){e.insertFragment(t)},insertNode(e,t){e.insertNode(t)},insertText(e,t){e.insertText(t)},isBlock:(e,t)=>ct.isElement(t)&&!e.isInline(t),isEditor(e){if(!x(e))return!1;var t=gt.get(e);if(void 0!==t)return t;var n="function"==typeof e.addMark&&"function"==typeof e.apply&&"function"==typeof e.deleteBackward&&"function"==typeof e.deleteForward&&"function"==typeof e.deleteFragment&&"function"==typeof e.insertBreak&&"function"==typeof e.insertFragment&&"function"==typeof e.insertNode&&"function"==typeof e.insertText&&"function"==typeof e.isInline&&"function"==typeof e.isVoid&&"function"==typeof e.normalizeNode&&"function"==typeof e.onChange&&"function"==typeof e.removeMark&&(null===e.marks||x(e.marks))&&(null===e.selection||Pt.isRange(e.selection))&&Et.isNodeList(e.children)&&xt.isOperationList(e.operations);return gt.set(e,n),n},isEnd(e,t,n){var r=vt.end(e,n);return Bt.equals(t,r)},isEdge:(e,t,n)=>vt.isStart(e,t,n)||vt.isEnd(e,t,n),isEmpty(e,t){var{children:n}=t,[r]=n;return 0===n.length||1===n.length&&zt.isText(r)&&""===r.text&&!e.isVoid(t)},isInline:(e,t)=>ct.isElement(t)&&e.isInline(t),isNormalizing(e){var t=Oe.get(e);return void 0===t||t},isStart(e,t,n){if(0!==t.offset)return!1;var r=vt.start(e,n);return Bt.equals(t,r)},isVoid:(e,t)=>ct.isElement(t)&&e.isVoid(t),last(e,t){var n=vt.path(e,t,{edge:"end"});return vt.node(e,n)},leaf(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=vt.path(e,t,n);return[Et.leaf(e,r),r]},*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,reverse:r=!1,voids:o=!1}=t,{match:i}=t;if(null==i&&(i=()=>!0),n){var a=[],u=vt.path(e,n);for(var[s,l]of Et.levels(e,u))if(i(s,l)&&(a.push([s,l]),!o&&vt.isVoid(e,s)))break;r&&a.reverse(),yield*a}},marks(e){var{marks:t,selection:n}=e;if(!n)return null;if(t)return t;if(Pt.isExpanded(n)){var[r]=vt.nodes(e,{match:zt.isText});if(r){var[o]=r;return je(o,ft)}return{}}var{anchor:i}=n,{path:a}=i,[u]=vt.leaf(e,a);if(0===i.offset){var s=vt.previous(e,{at:a,match:zt.isText}),l=vt.above(e,{match:t=>vt.isBlock(e,t)});if(s&&l){var[c,f]=s,[,d]=l;St.isAncestor(d,f)&&(u=c)}}return je(u,dt)},next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection}=t;if(i){var a=vt.after(e,i,{voids:r});if(a){var[,u]=vt.last(e,[]),s=[a.path,u];if(St.isPath(i)&&0===i.length)throw new Error("Cannot get the next node from the root node!");if(null==o)if(St.isPath(i)){var[l]=vt.parent(e,i);o=e=>l.children.includes(e)}else o=()=>!0;var[c]=vt.nodes(e,{at:s,match:o,mode:n,voids:r});return c}}},node(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=vt.path(e,t,n);return[Et.get(e,r),r]},*nodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,mode:r="all",universal:o=!1,reverse:i=!1,voids:a=!1}=t,{match:u}=t;if(u||(u=()=>!0),n){var s,l;if(yt.isSpan(n))s=n[0],l=n[1];else{var c=vt.path(e,n,{edge:"start"}),f=vt.path(e,n,{edge:"end"});s=i?f:c,l=i?c:f}var d,p=Et.nodes(e,{reverse:i,from:s,to:l,pass:t=>{var[n]=t;return!a&&vt.isVoid(e,n)}}),h=[];for(var[g,v]of p){var y=d&&0===St.compare(v,d[1]);if("highest"!==r||!y)if(u(g,v))if("lowest"===r&&y)d=[g,v];else{var m="lowest"===r?d:[g,v];m&&(o?h.push(m):yield m),d=[g,v]}else if(o&&!y&&zt.isText(g))return}"lowest"===r&&d&&(o?h.push(d):yield d),o&&(yield*h)}},normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:n=!1}=t,r=e=>Se.get(e)||[];if(vt.isNormalizing(e)){if(n){var o=Array.from(Et.nodes(e),(e=>{var[,t]=e;return t}));Se.set(e,o)}0!==r(e).length&&vt.withoutNormalizing(e,(()=>{for(var t of r(e))if(Et.has(e,t)){var n=vt.node(e,t),[o,i]=n;ct.isElement(o)&&0===o.children.length&&e.normalizeNode(n)}for(var a=42*r(e).length,u=0;0!==r(e).length;){if(u>a)throw new Error("\n            Could not completely normalize the editor after ".concat(a," iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));var s=r(e).pop();if(Et.has(e,s)){var l=vt.node(e,s);e.normalizeNode(l)}u++}}))}},parent(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=vt.path(e,t,n),o=St.parent(r);return vt.node(e,o)},path(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:r,edge:o}=n;if(St.isPath(t))if("start"===o){var[,i]=Et.first(e,t);t=i}else if("end"===o){var[,a]=Et.last(e,t);t=a}return Pt.isRange(t)&&(t="start"===o?Pt.start(t):"end"===o?Pt.end(t):St.common(t.anchor.path,t.focus.path)),Bt.isPoint(t)&&(t=t.path),null!=r&&(t=t.slice(0,r)),t},hasPath:(e,t)=>Et.has(e,t),pathRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return vt.pathRefs(e).delete(o),o.current=null,t}};return vt.pathRefs(e).add(o),o},pathRefs(e){var t=ke.get(e);return t||(t=new Set,ke.set(e,t)),t},point(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:r="start"}=n;if(St.isPath(t)){var o;if("end"===r){var[,i]=Et.last(e,t);o=i}else{var[,a]=Et.first(e,t);o=a}var u=Et.get(e,o);if(!zt.isText(u))throw new Error("Cannot get the ".concat(r," point in the node at path [").concat(t,"] because it has no ").concat(r," text node."));return{path:o,offset:"end"===r?u.text.length:0}}if(Pt.isRange(t)){var[s,l]=Pt.edges(t);return"start"===r?s:l}return t},pointRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return vt.pointRefs(e).delete(o),o.current=null,t}};return vt.pointRefs(e).add(o),o},pointRefs(e){var t=Be.get(e);return t||(t=new Set,Be.set(e,t)),t},*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,unit:r="offset",reverse:o=!1,voids:i=!1}=t;if(n){var a=vt.range(e,n),[u,s]=Pt.edges(a),l=o?s:u,c=!1,f="",d=0,p=0,h=0;for(var[g,v]of vt.nodes(e,{at:n,reverse:o,voids:i})){if(ct.isElement(g)){if(!i&&e.isVoid(g)){yield vt.start(e,v);continue}if(e.isInline(g))continue;if(vt.hasInlines(e,g)){var y=St.isAncestor(v,s.path)?s:vt.end(e,v),m=St.isAncestor(v,u.path)?u:vt.start(e,v);f=vt.string(e,{anchor:m,focus:y},{voids:i}),c=!0}}if(zt.isText(g)){var b=St.equals(v,l.path);for(b?(p=o?l.offset:g.text.length-l.offset,h=l.offset):(p=g.text.length,h=o?p:0),(b||c||"offset"===r)&&(yield{path:v,offset:h},c=!1);;){if(0===d){if(""===f)break;d=w(f,r,o),f=$e(f,d,o)[1]}if(h=o?h-d:h+d,(p-=d)<0){d=-p;break}d=0,yield{path:v,offset:h}}}}}function w(e,t,n){return"character"===t?Le(e,n):"word"===t?function(e){for(var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0,r=!1;e.length>0;){var o=Le(e,t),[i,a]=$e(e,o,t);if(He(i,a,t))r=!0,n+=o;else{if(r)break;n+=o}e=a}return n}(e,n):"line"===t||"block"===t?e.length:1}},previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection}=t;if(i){var a=vt.before(e,i,{voids:r});if(a){var[,u]=vt.first(e,[]),s=[a.path,u];if(St.isPath(i)&&0===i.length)throw new Error("Cannot get the previous node from the root node!");if(null==o)if(St.isPath(i)){var[l]=vt.parent(e,i);o=e=>l.children.includes(e)}else o=()=>!0;var[c]=vt.nodes(e,{reverse:!0,at:s,match:o,mode:n,voids:r});return c}}},range:(e,t,n)=>Pt.isRange(t)&&!n?t:{anchor:vt.start(e,t),focus:vt.end(e,n||t)},rangeRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return vt.rangeRefs(e).delete(o),o.current=null,t}};return vt.rangeRefs(e).add(o),o},rangeRefs(e){var t=Fe.get(e);return t||(t=new Set,Fe.set(e,t)),t},removeMark(e,t){e.removeMark(t)},setNormalizing(e,t){Oe.set(e,t)},start:(e,t)=>vt.point(e,t,{edge:"start"}),string(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,o=vt.range(e,t),[i,a]=Pt.edges(o),u="";for(var[s,l]of vt.nodes(e,{at:o,match:zt.isText,voids:r})){var c=s.text;St.equals(l,a.path)&&(c=c.slice(0,a.offset)),St.equals(l,i.path)&&(c=c.slice(i.offset)),u+=c}return u},unhangRange(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,[o,i]=Pt.edges(t);if(0!==o.offset||0!==i.offset||Pt.isCollapsed(t))return t;var a=vt.above(e,{at:i,match:t=>vt.isBlock(e,t)}),u=a?a[1]:[],s={anchor:vt.start(e,[]),focus:i},l=!0;for(var[c,f]of vt.nodes(e,{at:s,match:zt.isText,reverse:!0,voids:r}))if(l)l=!1;else if(""!==c.text||St.isBefore(f,u)){i={path:f,offset:c.text.length};break}return{anchor:o,focus:i}},void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return vt.above(e,ht(ht({},t),{},{match:t=>vt.isVoid(e,t)}))},withoutNormalizing(e,t){var n=vt.isNormalizing(e);vt.setNormalizing(e,!1);try{t()}finally{vt.setNormalizing(e,n)}vt.normalize(e)}},yt={isSpan:e=>Array.isArray(e)&&2===e.length&&e.every(St.isPath)},mt=["children"],bt=["text"],wt=new WeakMap,Et={ancestor(e,t){var n=Et.get(e,t);if(zt.isText(n))throw new Error("Cannot get the ancestor node at path [".concat(t,"] because it refers to a text node instead: ").concat(n));return n},*ancestors(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of St.ancestors(t,n)){var o=[Et.ancestor(e,r),r];yield o}},child(e,t){if(zt.isText(e))throw new Error("Cannot get the child of a text node: ".concat(JSON.stringify(e)));var n=e.children[t];if(null==n)throw new Error("Cannot get child at index `".concat(t,"` in node: ").concat(JSON.stringify(e)));return n},*children(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:r=!1}=n,o=Et.ancestor(e,t),{children:i}=o,a=r?i.length-1:0;r?a>=0:a<i.length;){var u=Et.child(o,a),s=t.concat(a);yield[u,s],a=r?a-1:a+1}},common(e,t,n){var r=St.common(t,n);return[Et.get(e,r),r]},descendant(e,t){var n=Et.get(e,t);if(vt.isEditor(n))throw new Error("Cannot get the descendant node at path [".concat(t,"] because it refers to the root editor node instead: ").concat(n));return n},*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Et.nodes(e,t))0!==r.length&&(yield[n,r])},*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Et.nodes(e,t))ct.isElement(n)&&(yield[n,r])},extractProps:e=>ct.isAncestor(e)?je(e,mt):je(e,bt),first(e,t){for(var n=t.slice(),r=Et.get(e,n);r&&!zt.isText(r)&&0!==r.children.length;)r=r.children[0],n.push(0);return[r,n]},fragment(e,t){if(zt.isText(e))throw new Error("Cannot get a fragment starting from a root text node: ".concat(JSON.stringify(e)));return Ee({children:e.children},(e=>{var[n,r]=Pt.edges(t),o=Et.nodes(e,{reverse:!0,pass:e=>{var[,n]=e;return!Pt.includes(t,n)}});for(var[,i]of o){if(!Pt.includes(t,i)){var a=Et.parent(e,i),u=i[i.length-1];a.children.splice(u,1)}if(St.equals(i,r.path)){var s=Et.leaf(e,i);s.text=s.text.slice(0,r.offset)}if(St.equals(i,n.path)){var l=Et.leaf(e,i);l.text=l.text.slice(n.offset)}}vt.isEditor(e)&&(e.selection=null)})).children},get(e,t){for(var n=e,r=0;r<t.length;r++){var o=t[r];if(zt.isText(n)||!n.children[o])throw new Error("Cannot find a descendant at path [".concat(t,"] in node: ").concat(JSON.stringify(e)));n=n.children[o]}return n},has(e,t){for(var n=e,r=0;r<t.length;r++){var o=t[r];if(zt.isText(n)||!n.children[o])return!1;n=n.children[o]}return!0},isNode:e=>zt.isText(e)||ct.isElement(e)||vt.isEditor(e),isNodeList(e){if(!Array.isArray(e))return!1;var t=wt.get(e);if(void 0!==t)return t;var n=e.every((e=>Et.isNode(e)));return wt.set(e,n),n},last(e,t){for(var n=t.slice(),r=Et.get(e,n);r&&!zt.isText(r)&&0!==r.children.length;){var o=r.children.length-1;r=r.children[o],n.push(o)}return[r,n]},leaf(e,t){var n=Et.get(e,t);if(!zt.isText(n))throw new Error("Cannot get the leaf node at path [".concat(t,"] because it refers to a non-leaf node: ").concat(n));return n},*levels(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of St.levels(t,n)){var o=Et.get(e,r);yield[o,r]}},matches:(e,t)=>ct.isElement(e)&&ct.isElementProps(t)&&ct.matches(e,t)||zt.isText(e)&&zt.isTextProps(t)&&zt.matches(e,t),*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:n,reverse:r=!1}=t,{from:o=[],to:i}=t,a=new Set,u=[],s=e;!i||!(r?St.isBefore(u,i):St.isAfter(u,i));)if(a.has(s)||(yield[s,u]),a.has(s)||zt.isText(s)||0===s.children.length||null!=n&&!1!==n([s,u])){if(0===u.length)break;if(!r){var l=St.next(u);if(Et.has(e,l)){u=l,s=Et.get(e,u);continue}}if(r&&0!==u[u.length-1])u=St.previous(u),s=Et.get(e,u);else u=St.parent(u),s=Et.get(e,u),a.add(s)}else{a.add(s);var c=r?s.children.length-1:0;St.isAncestor(u,o)&&(c=o[u.length]),u=u.concat(c),s=Et.get(e,u)}},parent(e,t){var n=St.parent(t),r=Et.get(e,n);if(zt.isText(r))throw new Error("Cannot get the parent of path [".concat(t,"] because it does not exist in the root."));return r},string:e=>zt.isText(e)?e.text:e.children.map(Et.string).join(""),*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Et.nodes(e,t))zt.isText(n)&&(yield[n,r])}};function Dt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ct(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dt(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xt={isNodeOperation:e=>xt.isOperation(e)&&e.type.endsWith("_node"),isOperation(e){if(!x(e))return!1;switch(e.type){case"insert_node":case"remove_node":return St.isPath(e.path)&&Et.isNode(e.node);case"insert_text":case"remove_text":return"number"==typeof e.offset&&"string"==typeof e.text&&St.isPath(e.path);case"merge_node":return"number"==typeof e.position&&St.isPath(e.path)&&x(e.properties);case"move_node":return St.isPath(e.path)&&St.isPath(e.newPath);case"set_node":return St.isPath(e.path)&&x(e.properties)&&x(e.newProperties);case"set_selection":return null===e.properties&&Pt.isRange(e.newProperties)||null===e.newProperties&&Pt.isRange(e.properties)||x(e.properties)&&x(e.newProperties);case"split_node":return St.isPath(e.path)&&"number"==typeof e.position&&x(e.properties);default:return!1}},isOperationList:e=>Array.isArray(e)&&e.every((e=>xt.isOperation(e))),isSelectionOperation:e=>xt.isOperation(e)&&e.type.endsWith("_selection"),isTextOperation:e=>xt.isOperation(e)&&e.type.endsWith("_text"),inverse(e){switch(e.type){case"insert_node":return Ct(Ct({},e),{},{type:"remove_node"});case"insert_text":return Ct(Ct({},e),{},{type:"remove_text"});case"merge_node":return Ct(Ct({},e),{},{type:"split_node",path:St.previous(e.path)});case"move_node":var{newPath:t,path:n}=e;if(St.equals(t,n))return e;if(St.isSibling(n,t))return Ct(Ct({},e),{},{path:t,newPath:n});var r=St.transform(n,e),o=St.transform(St.next(n),e);return Ct(Ct({},e),{},{path:r,newPath:o});case"remove_node":return Ct(Ct({},e),{},{type:"insert_node"});case"remove_text":return Ct(Ct({},e),{},{type:"insert_text"});case"set_node":var{properties:i,newProperties:a}=e;return Ct(Ct({},e),{},{properties:a,newProperties:i});case"set_selection":var{properties:u,newProperties:s}=e;return Ct(Ct({},e),{},null==u?{properties:s,newProperties:null}:null==s?{properties:null,newProperties:u}:{properties:s,newProperties:u});case"split_node":return Ct(Ct({},e),{},{type:"merge_node",path:St.next(e.path)})}}},St={ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=St.levels(e,t);return r=n?r.slice(1):r.slice(0,-1)},common(e,t){for(var n=[],r=0;r<e.length&&r<t.length;r++){var o=e[r];if(o!==t[r])break;n.push(o)}return n},compare(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){if(e[r]<t[r])return-1;if(e[r]>t[r])return 1}return 0},endsAfter(e,t){var n=e.length-1,r=e.slice(0,n),o=t.slice(0,n),i=e[n],a=t[n];return St.equals(r,o)&&i>a},endsAt(e,t){var n=e.length,r=e.slice(0,n),o=t.slice(0,n);return St.equals(r,o)},endsBefore(e,t){var n=e.length-1,r=e.slice(0,n),o=t.slice(0,n),i=e[n],a=t[n];return St.equals(r,o)&&i<a},equals:(e,t)=>e.length===t.length&&e.every(((e,n)=>e===t[n])),hasPrevious:e=>e[e.length-1]>0,isAfter:(e,t)=>1===St.compare(e,t),isAncestor:(e,t)=>e.length<t.length&&0===St.compare(e,t),isBefore:(e,t)=>-1===St.compare(e,t),isChild:(e,t)=>e.length===t.length+1&&0===St.compare(e,t),isCommon:(e,t)=>e.length<=t.length&&0===St.compare(e,t),isDescendant:(e,t)=>e.length>t.length&&0===St.compare(e,t),isParent:(e,t)=>e.length+1===t.length&&0===St.compare(e,t),isPath:e=>Array.isArray(e)&&(0===e.length||"number"==typeof e[0]),isSibling(e,t){if(e.length!==t.length)return!1;var n=e.slice(0,-1),r=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&St.equals(n,r)},levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=[],o=0;o<=e.length;o++)r.push(e.slice(0,o));return n&&r.reverse(),r},next(e){if(0===e.length)throw new Error("Cannot get the next path of a root path [".concat(e,"], because it has no next index."));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)},parent(e){if(0===e.length)throw new Error("Cannot get the parent path of the root path [".concat(e,"]."));return e.slice(0,-1)},previous(e){if(0===e.length)throw new Error("Cannot get the previous path of a root path [".concat(e,"], because it has no previous index."));var t=e[e.length-1];if(t<=0)throw new Error("Cannot get the previous path of a first child path [".concat(e,"] because it would result in a negative index."));return e.slice(0,-1).concat(t-1)},relative(e,t){if(!St.isAncestor(t,e)&&!St.equals(e,t))throw new Error("Cannot get the relative path of [".concat(e,"] inside ancestor [").concat(t,"], because it is not above or equal to the path."));return e.slice(t.length)},transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Ee(e,(r=>{var{affinity:o="forward"}=n;if(e&&0!==(null==e?void 0:e.length)){if(null===r)return null;switch(t.type){case"insert_node":var{path:i}=t;(St.equals(i,r)||St.endsBefore(i,r)||St.isAncestor(i,r))&&(r[i.length-1]+=1);break;case"remove_node":var{path:a}=t;if(St.equals(a,r)||St.isAncestor(a,r))return null;St.endsBefore(a,r)&&(r[a.length-1]-=1);break;case"merge_node":var{path:u,position:s}=t;St.equals(u,r)||St.endsBefore(u,r)?r[u.length-1]-=1:St.isAncestor(u,r)&&(r[u.length-1]-=1,r[u.length]+=s);break;case"split_node":var{path:l,position:c}=t;if(St.equals(l,r)){if("forward"===o)r[r.length-1]+=1;else if("backward"!==o)return null}else St.endsBefore(l,r)?r[l.length-1]+=1:St.isAncestor(l,r)&&e[l.length]>=c&&(r[l.length-1]+=1,r[l.length]-=c);break;case"move_node":var{path:f,newPath:d}=t;if(St.equals(f,d))return;if(St.isAncestor(f,r)||St.equals(f,r)){var p=d.slice();return St.endsBefore(f,d)&&f.length<d.length&&(p[f.length-1]-=1),p.concat(r.slice(f.length))}St.isSibling(f,d)&&(St.isAncestor(d,r)||St.equals(d,r))?St.endsBefore(f,r)?r[f.length-1]-=1:r[f.length-1]+=1:St.endsBefore(d,r)||St.equals(d,r)||St.isAncestor(d,r)?(St.endsBefore(f,r)&&(r[f.length-1]-=1),r[d.length-1]+=1):St.endsBefore(f,r)&&(St.equals(d,r)&&(r[d.length-1]+=1),r[f.length-1]-=1)}}}))}},At={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=St.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}};function Ot(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function kt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ot(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ot(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Bt={compare(e,t){var n=St.compare(e.path,t.path);return 0===n?e.offset<t.offset?-1:e.offset>t.offset?1:0:n},isAfter:(e,t)=>1===Bt.compare(e,t),isBefore:(e,t)=>-1===Bt.compare(e,t),equals:(e,t)=>e.offset===t.offset&&St.equals(e.path,t.path),isPoint:e=>x(e)&&"number"==typeof e.offset&&St.isPath(e.path),transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Ee(e,(e=>{if(null===e)return null;var{affinity:r="forward"}=n,{path:o,offset:i}=e;switch(t.type){case"insert_node":case"move_node":e.path=St.transform(o,t,n);break;case"insert_text":St.equals(t.path,o)&&t.offset<=i&&(e.offset+=t.text.length);break;case"merge_node":St.equals(t.path,o)&&(e.offset+=t.position),e.path=St.transform(o,t,n);break;case"remove_text":St.equals(t.path,o)&&t.offset<=i&&(e.offset-=Math.min(i-t.offset,t.text.length));break;case"remove_node":if(St.equals(t.path,o)||St.isAncestor(t.path,o))return null;e.path=St.transform(o,t,n);break;case"split_node":if(St.equals(t.path,o)){if(t.position===i&&null==r)return null;(t.position<i||t.position===i&&"forward"===r)&&(e.offset-=t.position,e.path=St.transform(o,t,kt(kt({},n),{},{affinity:"forward"})))}else e.path=St.transform(o,t,n)}}))}},Ft={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=Bt.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}},Tt=["anchor","focus"];function _t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var Pt={edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,{anchor:r,focus:o}=e;return Pt.isBackward(e)===n?[r,o]:[o,r]},end(e){var[,t]=Pt.edges(e);return t},equals:(e,t)=>Bt.equals(e.anchor,t.anchor)&&Bt.equals(e.focus,t.focus),includes(e,t){if(Pt.isRange(t)){if(Pt.includes(e,t.anchor)||Pt.includes(e,t.focus))return!0;var[n,r]=Pt.edges(e),[o,i]=Pt.edges(t);return Bt.isBefore(n,o)&&Bt.isAfter(r,i)}var[a,u]=Pt.edges(e),s=!1,l=!1;return Bt.isPoint(t)?(s=Bt.compare(t,a)>=0,l=Bt.compare(t,u)<=0):(s=St.compare(t,a.path)>=0,l=St.compare(t,u.path)<=0),s&&l},intersection(e,t){var n=je(e,Tt),[r,o]=Pt.edges(e),[i,a]=Pt.edges(t),u=Bt.isBefore(r,i)?i:r,s=Bt.isBefore(o,a)?o:a;return Bt.isBefore(s,u)?null:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_t(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_t(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({anchor:u,focus:s},n)},isBackward(e){var{anchor:t,focus:n}=e;return Bt.isAfter(t,n)},isCollapsed(e){var{anchor:t,focus:n}=e;return Bt.equals(t,n)},isExpanded:e=>!Pt.isCollapsed(e),isForward:e=>!Pt.isBackward(e),isRange:e=>x(e)&&Bt.isPoint(e.anchor)&&Bt.isPoint(e.focus),*points(e){yield[e.anchor,"anchor"],yield[e.focus,"focus"]},start(e){var[t]=Pt.edges(e);return t},transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Ee(e,(e=>{if(null===e)return null;var r,o,{affinity:i="inward"}=n;if("inward"===i){var a=Pt.isCollapsed(e);Pt.isForward(e)?(r="forward",o=a?r:"backward"):(r="backward",o=a?r:"forward")}else"outward"===i?Pt.isForward(e)?(r="backward",o="forward"):(r="forward",o="backward"):(r=i,o=i);var u=Bt.transform(e.anchor,t,{affinity:r}),s=Bt.transform(e.focus,t,{affinity:o});if(!u||!s)return null;e.anchor=u,e.focus=s}))}},jt={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=Pt.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}},Nt=(e,t)=>{for(var n in e){var r=e[n],o=t[n];if(x(r)&&x(o)){if(!Nt(r,o))return!1}else if(Array.isArray(r)&&Array.isArray(o)){if(r.length!==o.length)return!1;for(var i=0;i<r.length;i++)if(r[i]!==o[i])return!1}else if(r!==o)return!1}for(var a in t)if(void 0===e[a]&&void 0!==t[a])return!1;return!0},It=["text"],Lt=["anchor","focus"];function Rt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Mt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rt(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var zt={equals(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:r=!1}=n;function o(e){return je(e,It)}return Nt(r?o(e):e,r?o(t):t)},isText:e=>x(e)&&"string"==typeof e.text,isTextList:e=>Array.isArray(e)&&e.every((e=>zt.isText(e))),isTextProps:e=>void 0!==e.text,matches(e,t){for(var n in t)if("text"!==n&&(!e.hasOwnProperty(n)||e[n]!==t[n]))return!1;return!0},decorations(e,t){var n=[Mt({},e)];for(var r of t){var o=je(r,Lt),[i,a]=Pt.edges(r),u=[],s=0;for(var l of n){var{length:c}=l.text,f=s;if(s+=c,i.offset<=f&&a.offset>=s)Object.assign(l,o),u.push(l);else if(i.offset!==a.offset&&(i.offset===s||a.offset===f)||i.offset>s||a.offset<f||a.offset===f&&0!==f)u.push(l);else{var d=l,p=void 0,h=void 0;if(a.offset<s){var g=a.offset-f;h=Mt(Mt({},d),{},{text:d.text.slice(g)}),d=Mt(Mt({},d),{},{text:d.text.slice(0,g)})}if(i.offset>f){var v=i.offset-f;p=Mt(Mt({},d),{},{text:d.text.slice(0,v)}),d=Mt(Mt({},d),{},{text:d.text.slice(v)})}Object.assign(d,o),p&&u.push(p),u.push(d),h&&u.push(h)}}n=u}return n}};function $t(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ht(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$t(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$t(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Vt={transform(e,t){e.children=De(e.children);var n=e.selection&&De(e.selection);try{n=((e,t,n)=>{switch(n.type){case"insert_node":var{path:r,node:o}=n,i=Et.parent(e,r),a=r[r.length-1];if(a>i.children.length)throw new Error('Cannot apply an "insert_node" operation at path ['.concat(r,"] because the destination is past the end of the node."));if(i.children.splice(a,0,o),t)for(var[u,s]of Pt.points(t))t[s]=Bt.transform(u,n);break;case"insert_text":var{path:l,offset:c,text:f}=n;if(0===f.length)break;var d=Et.leaf(e,l),p=d.text.slice(0,c),h=d.text.slice(c);if(d.text=p+f+h,t)for(var[g,v]of Pt.points(t))t[v]=Bt.transform(g,n);break;case"merge_node":var{path:y}=n,m=Et.get(e,y),b=St.previous(y),w=Et.get(e,b),E=Et.parent(e,y),D=y[y.length-1];if(zt.isText(m)&&zt.isText(w))w.text+=m.text;else{if(zt.isText(m)||zt.isText(w))throw new Error('Cannot apply a "merge_node" operation at path ['.concat(y,"] to nodes of different interfaces: ").concat(m," ").concat(w));w.children.push(...m.children)}if(E.children.splice(D,1),t)for(var[C,x]of Pt.points(t))t[x]=Bt.transform(C,n);break;case"move_node":var{path:S,newPath:A}=n;if(St.isAncestor(S,A))throw new Error("Cannot move a path [".concat(S,"] to new path [").concat(A,"] because the destination is inside itself."));var O=Et.get(e,S),k=Et.parent(e,S),B=S[S.length-1];k.children.splice(B,1);var F=St.transform(S,n),T=Et.get(e,St.parent(F)),_=F[F.length-1];if(T.children.splice(_,0,O),t)for(var[P,j]of Pt.points(t))t[j]=Bt.transform(P,n);break;case"remove_node":var{path:N}=n,I=N[N.length-1];if(Et.parent(e,N).children.splice(I,1),t)for(var[L,R]of Pt.points(t)){var M=Bt.transform(L,n);if(null!=t&&null!=M)t[R]=M;else{var z=void 0,$=void 0;for(var[H,V]of Et.texts(e)){if(-1!==St.compare(V,N)){$=[H,V];break}z=[H,V]}var U=!1;z&&$&&(U=St.equals($[1],N)?!St.hasPrevious($[1]):St.common(z[1],N).length<St.common($[1],N).length),z&&!U?(L.path=z[1],L.offset=z[0].text.length):$?(L.path=$[1],L.offset=0):t=null}}break;case"remove_text":var{path:W,offset:q,text:G}=n;if(0===G.length)break;var K=Et.leaf(e,W),Y=K.text.slice(0,q),X=K.text.slice(q+G.length);if(K.text=Y+X,t)for(var[Z,J]of Pt.points(t))t[J]=Bt.transform(Z,n);break;case"set_node":var{path:Q,properties:ee,newProperties:te}=n;if(0===Q.length)throw new Error("Cannot set properties on the root node!");var ne=Et.get(e,Q);for(var re in te){if("children"===re||"text"===re)throw new Error('Cannot set the "'.concat(re,'" property of nodes!'));var oe=te[re];null==oe?delete ne[re]:ne[re]=oe}for(var ie in ee)te.hasOwnProperty(ie)||delete ne[ie];break;case"set_selection":var{newProperties:ae}=n;if(null==ae)t=ae;else{if(null==t){if(!Pt.isRange(ae))throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(JSON.stringify(ae)," when there is no current selection."));t=Ht({},ae)}for(var ue in ae){var se=ae[ue];if(null==se){if("anchor"===ue||"focus"===ue)throw new Error('Cannot remove the "'.concat(ue,'" selection property'));delete t[ue]}else t[ue]=se}}break;case"split_node":var{path:le,position:ce,properties:fe}=n;if(0===le.length)throw new Error('Cannot apply a "split_node" operation at path ['.concat(le,"] because the root node cannot be split."));var de,pe=Et.get(e,le),he=Et.parent(e,le),ge=le[le.length-1];if(zt.isText(pe)){var ve=pe.text.slice(0,ce),ye=pe.text.slice(ce);pe.text=ve,de=Ht(Ht({},fe),{},{text:ye})}else{var me=pe.children.slice(0,ce),be=pe.children.slice(ce);pe.children=me,de=Ht(Ht({},fe),{},{children:be})}if(he.children.splice(ge+1,0,de),t)for(var[we,Ee]of Pt.points(t))t[Ee]=Bt.transform(we,n)}return t})(e,n,t)}finally{e.children=Ce(e.children),e.selection=n?A(n)?Ce(n):n:null}}},Ut=["text"],Wt=["children"];function qt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?qt(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):qt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Kt={insertNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};vt.withoutNormalizing(e,(()=>{var{hanging:r=!1,voids:o=!1,mode:i="lowest"}=n,{at:a,match:u,select:s}=n;if(Et.isNode(t)&&(t=[t]),0!==t.length){var[l]=t;if(a||(a=e.selection?e.selection:e.children.length>0?vt.end(e,[]):[0],s=!0),null==s&&(s=!1),Pt.isRange(a))if(r||(a=vt.unhangRange(e,a)),Pt.isCollapsed(a))a=a.anchor;else{var[,c]=Pt.edges(a),f=vt.pointRef(e,c);on.delete(e,{at:a}),a=f.unref()}if(Bt.isPoint(a)){null==u&&(u=zt.isText(l)?e=>zt.isText(e):e.isInline(l)?t=>zt.isText(t)||vt.isInline(e,t):t=>vt.isBlock(e,t));var[d]=vt.nodes(e,{at:a.path,match:u,mode:i,voids:o});if(!d)return;var[,p]=d,h=vt.pathRef(e,p),g=vt.isEnd(e,a,p);on.splitNodes(e,{at:a,match:u,mode:i,voids:o});var v=h.unref();a=g?St.next(v):v}var y=St.parent(a),m=a[a.length-1];if(o||!vt.void(e,{at:y})){for(var b of t){var w=y.concat(m);m++,e.apply({type:"insert_node",path:w,node:b}),a=St.next(a)}if(a=St.previous(a),s){var E=vt.end(e,a);E&&on.select(e,E)}}}}))},liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{at:n=e.selection,mode:r="lowest",voids:o=!1}=t,{match:i}=t;if(null==i&&(i=St.isPath(n)?Zt(e,n):t=>vt.isBlock(e,t)),n){var a=vt.nodes(e,{at:n,match:i,mode:r,voids:o}),u=Array.from(a,(t=>{var[,n]=t;return vt.pathRef(e,n)}));for(var s of u){var l=s.unref();if(l.length<2)throw new Error("Cannot lift node at a path [".concat(l,"] because it has a depth of less than `2`."));var c=vt.node(e,St.parent(l)),[f,d]=c,p=l[l.length-1],{length:h}=f.children;if(1===h){var g=St.next(d);on.moveNodes(e,{at:l,to:g,voids:o}),on.removeNodes(e,{at:d,voids:o})}else if(0===p)on.moveNodes(e,{at:l,to:d,voids:o});else if(p===h-1){var v=St.next(d);on.moveNodes(e,{at:l,to:v,voids:o})}else{var y=St.next(l),m=St.next(d);on.splitNodes(e,{at:y,voids:o}),on.moveNodes(e,{at:l,to:m,voids:o})}}}}))},mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{match:n,at:r=e.selection}=t,{hanging:o=!1,voids:i=!1,mode:a="lowest"}=t;if(r){if(null==n)if(St.isPath(r)){var[u]=vt.parent(e,r);n=e=>u.children.includes(e)}else n=t=>vt.isBlock(e,t);if(!o&&Pt.isRange(r)&&(r=vt.unhangRange(e,r)),Pt.isRange(r))if(Pt.isCollapsed(r))r=r.anchor;else{var[,s]=Pt.edges(r),l=vt.pointRef(e,s);on.delete(e,{at:r}),r=l.unref(),null==t.at&&on.select(e,r)}var[c]=vt.nodes(e,{at:r,match:n,voids:i,mode:a}),f=vt.previous(e,{at:r,match:n,voids:i,mode:a});if(c&&f){var[d,p]=c,[h,g]=f;if(0!==p.length&&0!==g.length){var v,y,m=St.next(g),b=St.common(p,g),w=St.isSibling(p,g),E=Array.from(vt.levels(e,{at:p}),(e=>{var[t]=e;return t})).slice(b.length).slice(0,-1),D=vt.above(e,{at:p,mode:"highest",match:t=>E.includes(t)&&Yt(e,t)}),C=D&&vt.pathRef(e,D[1]);if(zt.isText(d)&&zt.isText(h)){var x=je(d,Ut);y=h.text.length,v=x}else{if(!ct.isElement(d)||!ct.isElement(h))throw new Error("Cannot merge the node at path [".concat(p,"] with the previous sibling because it is not the same kind: ").concat(JSON.stringify(d)," ").concat(JSON.stringify(h)));x=je(d,Wt);y=h.children.length,v=x}w||on.moveNodes(e,{at:p,to:m,voids:i}),C&&on.removeNodes(e,{at:C.current,voids:i}),ct.isElement(h)&&vt.isEmpty(e,h)||zt.isText(h)&&""===h.text&&0!==g[g.length-1]?on.removeNodes(e,{at:g,voids:i}):e.apply({type:"merge_node",path:m,position:y,properties:v}),C&&C.unref()}}}}))},moveNodes(e,t){vt.withoutNormalizing(e,(()=>{var{to:n,at:r=e.selection,mode:o="lowest",voids:i=!1}=t,{match:a}=t;if(r){null==a&&(a=St.isPath(r)?Zt(e,r):t=>vt.isBlock(e,t));var u=vt.pathRef(e,n),s=vt.nodes(e,{at:r,match:a,mode:o,voids:i}),l=Array.from(s,(t=>{var[,n]=t;return vt.pathRef(e,n)}));for(var c of l){var f=c.unref(),d=u.current;0!==f.length&&e.apply({type:"move_node",path:f,newPath:d}),u.current&&St.isSibling(d,f)&&St.isAfter(d,f)&&(u.current=St.next(u.current))}u.unref()}}))},removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{hanging:n=!1,voids:r=!1,mode:o="lowest"}=t,{at:i=e.selection,match:a}=t;if(i){null==a&&(a=St.isPath(i)?Zt(e,i):t=>vt.isBlock(e,t)),!n&&Pt.isRange(i)&&(i=vt.unhangRange(e,i));var u=vt.nodes(e,{at:i,match:a,mode:o,voids:r}),s=Array.from(u,(t=>{var[,n]=t;return vt.pathRef(e,n)}));for(var l of s){var c=l.unref();if(c){var[f]=vt.node(e,c);e.apply({type:"remove_node",path:c,node:f})}}}}))},setNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};vt.withoutNormalizing(e,(()=>{var{match:r,at:o=e.selection}=n,{hanging:i=!1,mode:a="lowest",split:u=!1,voids:s=!1}=n;if(o){if(null==r&&(r=St.isPath(o)?Zt(e,o):t=>vt.isBlock(e,t)),!i&&Pt.isRange(o)&&(o=vt.unhangRange(e,o)),u&&Pt.isRange(o)){if(Pt.isCollapsed(o)&&vt.leaf(e,o.anchor)[0].text.length>0)return;var l=vt.rangeRef(e,o,{affinity:"inward"}),[c,f]=Pt.edges(o),d="lowest"===a?"lowest":"highest",p=vt.isEnd(e,f,f.path);on.splitNodes(e,{at:f,match:r,mode:d,voids:s,always:!p});var h=vt.isStart(e,c,c.path);on.splitNodes(e,{at:c,match:r,mode:d,voids:s,always:!h}),o=l.unref(),null==n.at&&on.select(e,o)}for(var[g,v]of vt.nodes(e,{at:o,match:r,mode:a,voids:s})){var y={},m={};if(0!==v.length){var b=!1;for(var w in t)"children"!==w&&"text"!==w&&t[w]!==g[w]&&(b=!0,g.hasOwnProperty(w)&&(y[w]=g[w]),null!=t[w]&&(m[w]=t[w]));b&&e.apply({type:"set_node",path:v,properties:y,newProperties:m})}}}}))},splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection,height:a=0,always:u=!1}=t;if(null==o&&(o=t=>vt.isBlock(e,t)),Pt.isRange(i)&&(i=Xt(e,i)),St.isPath(i)){var s=i,l=vt.point(e,s),[c]=vt.parent(e,s);o=e=>e===c,a=l.path.length-s.length+1,i=l,u=!0}if(i){var f=vt.pointRef(e,i,{affinity:"backward"}),[d]=vt.nodes(e,{at:i,match:o,mode:n,voids:r});if(d){var p=vt.void(e,{at:i,mode:"highest"});if(!r&&p){var[h,g]=p;if(ct.isElement(h)&&e.isInline(h)){var v=vt.after(e,g);if(!v){var y=St.next(g);on.insertNodes(e,{text:""},{at:y,voids:r}),v=vt.point(e,y)}i=v,u=!0}a=i.path.length-g.length+1,u=!0}var m=vt.pointRef(e,i),b=i.path.length-a,[,w]=d,E=i.path.slice(0,b),D=0===a?i.offset:i.path[b]+0;for(var[C,x]of vt.levels(e,{at:E,reverse:!0,voids:r})){var S=!1;if(x.length<w.length||0===x.length||!r&&vt.isVoid(e,C))break;var A=f.current,O=vt.isEnd(e,A,x);if(u||!f||!vt.isEdge(e,A,x)){S=!0;var k=Et.extractProps(C);e.apply({type:"split_node",path:x,position:D,properties:k})}D=x[x.length-1]+(S||O?1:0)}if(null==t.at){var B=m.current||vt.end(e,[]);on.select(e,B)}f.unref(),m.unref()}}}))},unsetNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Array.isArray(t)||(t=[t]);var r={};for(var o of t)r[o]=null;on.setNodes(e,r,n)},unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{mode:n="lowest",split:r=!1,voids:o=!1}=t,{at:i=e.selection,match:a}=t;if(i){null==a&&(a=St.isPath(i)?Zt(e,i):t=>vt.isBlock(e,t)),St.isPath(i)&&(i=vt.range(e,i));var u=Pt.isRange(i)?vt.rangeRef(e,i):null,s=vt.nodes(e,{at:i,match:a,mode:n,voids:o}),l=Array.from(s,(t=>{var[,n]=t;return vt.pathRef(e,n)})).reverse(),c=function(t){var n=t.unref(),[i]=vt.node(e,n),a=vt.range(e,n);r&&u&&(a=Pt.intersection(u.current,a)),on.liftNodes(e,{at:a,match:e=>ct.isAncestor(i)&&i.children.includes(e),voids:o})};for(var f of l)c(f);u&&u.unref()}}))},wrapNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};vt.withoutNormalizing(e,(()=>{var{mode:r="lowest",split:o=!1,voids:i=!1}=n,{match:a,at:u=e.selection}=n;if(u){if(null==a&&(a=St.isPath(u)?Zt(e,u):e.isInline(t)?t=>vt.isInline(e,t)||zt.isText(t):t=>vt.isBlock(e,t)),o&&Pt.isRange(u)){var[s,l]=Pt.edges(u),c=vt.rangeRef(e,u,{affinity:"inward"});on.splitNodes(e,{at:l,match:a,voids:i}),on.splitNodes(e,{at:s,match:a,voids:i}),u=c.unref(),null==n.at&&on.select(e,u)}var f=Array.from(vt.nodes(e,{at:u,match:e.isInline(t)?t=>vt.isBlock(e,t):e=>vt.isEditor(e),mode:"lowest",voids:i}));for(var[,d]of f){var p=Pt.isRange(u)?Pt.intersection(u,vt.range(e,d)):u;if(p){var h=Array.from(vt.nodes(e,{at:p,match:a,mode:r,voids:i}));if(h.length>0)if("continue"===function(){var[n]=h,r=h[h.length-1],[,o]=n,[,a]=r;if(0===o.length&&0===a.length)return"continue";var u=St.equals(o,a)?St.parent(o):St.common(o,a),s=vt.range(e,o,a),l=vt.node(e,u),[c]=l,f=u.length+1,d=St.next(a.slice(0,f)),p=Gt(Gt({},t),{},{children:[]});on.insertNodes(e,p,{at:d,voids:i}),on.moveNodes(e,{at:s,match:e=>ct.isAncestor(c)&&c.children.includes(e),to:d.concat(0),voids:i})}())continue}}}}))}},Yt=(e,t)=>{if(ct.isElement(t)){var n=t;return!!vt.isVoid(e,t)||1===n.children.length&&Yt(e,n.children[0])}return!vt.isEditor(t)},Xt=(e,t)=>{if(Pt.isCollapsed(t))return t.anchor;var[,n]=Pt.edges(t),r=vt.pointRef(e,n);return on.delete(e,{at:t}),r.unref()},Zt=(e,t)=>{var[n]=vt.node(e,t);return e=>e===n};function Jt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Jt(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Jt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var en={collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:n="anchor"}=t,{selection:r}=e;if(r)if("anchor"===n)on.select(e,r.anchor);else if("focus"===n)on.select(e,r.focus);else if("start"===n){var[o]=Pt.edges(r);on.select(e,o)}else if("end"===n){var[,i]=Pt.edges(r);on.select(e,i)}},deselect(e){var{selection:t}=e;t&&e.apply({type:"set_selection",properties:t,newProperties:null})},move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:n}=e,{distance:r=1,unit:o="character",reverse:i=!1}=t,{edge:a=null}=t;if(n){"start"===a&&(a=Pt.isBackward(n)?"focus":"anchor"),"end"===a&&(a=Pt.isBackward(n)?"anchor":"focus");var{anchor:u,focus:s}=n,l={distance:r,unit:o},c={};if(null==a||"anchor"===a){var f=i?vt.before(e,u,l):vt.after(e,u,l);f&&(c.anchor=f)}if(null==a||"focus"===a){var d=i?vt.before(e,s,l):vt.after(e,s,l);d&&(c.focus=d)}on.setSelection(e,c)}},select(e,t){var{selection:n}=e;if(t=vt.range(e,t),n)on.setSelection(e,t);else{if(!Pt.isRange(t))throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(JSON.stringify(t)));e.apply({type:"set_selection",properties:n,newProperties:t})}},setPoint(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:r}=e,{edge:o="both"}=n;if(r){"start"===o&&(o=Pt.isBackward(r)?"focus":"anchor"),"end"===o&&(o=Pt.isBackward(r)?"anchor":"focus");var{anchor:i,focus:a}=r,u="anchor"===o?i:a;on.setSelection(e,{["anchor"===o?"anchor":"focus"]:Qt(Qt({},u),t)})}},setSelection(e,t){var{selection:n}=e,r={},o={};if(n){for(var i in t)("anchor"===i&&null!=t.anchor&&!Bt.equals(t.anchor,n.anchor)||"focus"===i&&null!=t.focus&&!Bt.equals(t.focus,n.focus)||"anchor"!==i&&"focus"!==i&&t[i]!==n[i])&&(r[i]=n[i],o[i]=t[i]);Object.keys(r).length>0&&e.apply({type:"set_selection",properties:r,newProperties:o})}}},tn={delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};vt.withoutNormalizing(e,(()=>{var{reverse:n=!1,unit:r="character",distance:o=1,voids:i=!1}=t,{at:a=e.selection,hanging:u=!1}=t;if(a){if(Pt.isRange(a)&&Pt.isCollapsed(a)&&(a=a.anchor),Bt.isPoint(a)){var s=vt.void(e,{at:a,mode:"highest"});if(!i&&s){var[,l]=s;a=l}else{var c={unit:r,distance:o};a={anchor:a,focus:n?vt.before(e,a,c)||vt.start(e,[]):vt.after(e,a,c)||vt.end(e,[])},u=!0}}if(St.isPath(a))on.removeNodes(e,{at:a,voids:i});else if(!Pt.isCollapsed(a)){if(!u){var[,f]=Pt.edges(a),d=vt.end(e,[]);Bt.equals(f,d)||(a=vt.unhangRange(e,a,{voids:i}))}var[p,h]=Pt.edges(a),g=vt.above(e,{match:t=>vt.isBlock(e,t),at:p,voids:i}),v=vt.above(e,{match:t=>vt.isBlock(e,t),at:h,voids:i}),y=g&&v&&!St.equals(g[1],v[1]),m=St.equals(p.path,h.path),b=i?null:vt.void(e,{at:p,mode:"highest"}),w=i?null:vt.void(e,{at:h,mode:"highest"});if(b){var E=vt.before(e,p);E&&g&&St.isAncestor(g[1],E.path)&&(p=E)}if(w){var D=vt.after(e,h);D&&v&&St.isAncestor(v[1],D.path)&&(h=D)}var C,x=[];for(var S of vt.nodes(e,{at:a,voids:i})){var[A,O]=S;C&&0===St.compare(O,C)||(!i&&vt.isVoid(e,A)||!St.isCommon(O,p.path)&&!St.isCommon(O,h.path))&&(x.push(S),C=O)}var k=Array.from(x,(t=>{var[,n]=t;return vt.pathRef(e,n)})),B=vt.pointRef(e,p),F=vt.pointRef(e,h);if(!m&&!b){var T=B.current,[_]=vt.leaf(e,T),{path:P}=T,{offset:j}=p,N=_.text.slice(j);N.length>0&&e.apply({type:"remove_text",path:P,offset:j,text:N})}for(var I of k){var L=I.unref();on.removeNodes(e,{at:L,voids:i})}if(!w){var R=F.current,[M]=vt.leaf(e,R),{path:z}=R,$=m?p.offset:0,H=M.text.slice($,h.offset);H.length>0&&e.apply({type:"remove_text",path:z,offset:$,text:H})}!m&&y&&F.current&&B.current&&on.mergeNodes(e,{at:F.current,hanging:!0,voids:i});var V=n?B.unref()||F.unref():F.unref()||B.unref();null==t.at&&V&&on.select(e,V)}}}))},insertFragment(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};vt.withoutNormalizing(e,(()=>{var{hanging:r=!1,voids:o=!1}=n,{at:i=e.selection}=n;if(t.length&&i){if(Pt.isRange(i))if(r||(i=vt.unhangRange(e,i)),Pt.isCollapsed(i))i=i.anchor;else{var[,a]=Pt.edges(i);if(!o&&vt.void(e,{at:a}))return;var u=vt.pointRef(e,a);on.delete(e,{at:i}),i=u.unref()}else St.isPath(i)&&(i=vt.start(e,i));if(o||!vt.void(e,{at:i})){var s=vt.above(e,{at:i,match:t=>vt.isInline(e,t),mode:"highest",voids:o});if(s){var[,l]=s;if(vt.isEnd(e,i,l))i=vt.after(e,l);else if(vt.isStart(e,i,l)){i=vt.before(e,l)}}var c=vt.above(e,{match:t=>vt.isBlock(e,t),at:i,voids:o}),[,f]=c,d=vt.isStart(e,i,f),p=vt.isEnd(e,i,f),h=d&&p,g=!d||d&&p,v=!p,[,y]=Et.first({children:t},[]),[,m]=Et.last({children:t},[]),b=[],w=t=>{var[n,r]=t;return!(0===r.length)&&(!!h||!(g&&St.isAncestor(r,y)&&ct.isElement(n)&&!e.isVoid(n)&&!e.isInline(n))&&!(v&&St.isAncestor(r,m)&&ct.isElement(n)&&!e.isVoid(n)&&!e.isInline(n)))};for(var E of Et.nodes({children:t},{pass:w}))w(E)&&b.push(E);var D=[],C=[],x=[],S=!0,A=!1;for(var[O]of b)ct.isElement(O)&&!e.isInline(O)?(S=!1,A=!0,C.push(O)):S?D.push(O):x.push(O);var[k]=vt.nodes(e,{at:i,match:t=>zt.isText(t)||vt.isInline(e,t),mode:"highest",voids:o}),[,B]=k,F=vt.isStart(e,i,B),T=vt.isEnd(e,i,B),_=vt.pathRef(e,p?St.next(f):f),P=vt.pathRef(e,T?St.next(B):B),j=vt.pathRef(e,f);on.splitNodes(e,{at:i,match:t=>A?vt.isBlock(e,t):zt.isText(t)||vt.isInline(e,t),mode:A?"lowest":"highest",voids:o});var N=vt.pathRef(e,!F||F&&T?St.next(B):B);if(on.insertNodes(e,D,{at:N.current,match:t=>zt.isText(t)||vt.isInline(e,t),mode:"highest",voids:o}),h&&C.length&&on.delete(e,{at:j.unref(),voids:o}),on.insertNodes(e,C,{at:_.current,match:t=>vt.isBlock(e,t),mode:"lowest",voids:o}),on.insertNodes(e,x,{at:P.current,match:t=>zt.isText(t)||vt.isInline(e,t),mode:"highest",voids:o}),!n.at){var I;I=x.length>0?St.previous(P.current):C.length>0?St.previous(_.current):St.previous(N.current);var L=vt.end(e,I);on.select(e,L)}N.unref(),_.unref(),P.unref()}}}))},insertText(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};vt.withoutNormalizing(e,(()=>{var{voids:r=!1}=n,{at:o=e.selection}=n;if(o){if(St.isPath(o)&&(o=vt.range(e,o)),Pt.isRange(o))if(Pt.isCollapsed(o))o=o.anchor;else{var i=Pt.end(o);if(!r&&vt.void(e,{at:i}))return;var a=vt.pointRef(e,i);on.delete(e,{at:o,voids:r}),o=a.unref(),on.setSelection(e,{anchor:o,focus:o})}if(r||!vt.void(e,{at:o})){var{path:u,offset:s}=o;t.length>0&&e.apply({type:"insert_text",path:u,offset:s,text:t})}}}))}};function nn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function rn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?nn(Object(n),!0).forEach((function(t){xe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):nn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var on=rn(rn(rn(rn({},Vt),Kt),en),tn),an="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function un(e){var t={exports:{}};return e(t,t.exports),t.exports}var sn="[object Map]",ln="[object Set]",cn=/^\[object .+?Constructor\]$/,fn=/^(?:0|[1-9]\d*)$/,dn="[\\ud800-\\udfff]",pn="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",hn="\\ud83c[\\udffb-\\udfff]",gn="[^\\ud800-\\udfff]",vn="(?:\\ud83c[\\udde6-\\uddff]){2}",yn="[\\ud800-\\udbff][\\udc00-\\udfff]",mn="(?:"+pn+"|"+hn+")"+"?",bn="[\\ufe0e\\ufe0f]?"+mn+("(?:\\u200d(?:"+[gn,vn,yn].join("|")+")[\\ufe0e\\ufe0f]?"+mn+")*"),wn="(?:"+[gn+pn+"?",pn,vn,yn,dn].join("|")+")",En=RegExp(hn+"(?="+hn+")|"+wn+bn,"g"),Dn=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Cn="object"==typeof an&&an&&an.Object===Object&&an,xn="object"==typeof self&&self&&self.Object===Object&&self,Sn=Cn||xn||Function("return this")();function An(e,t){return function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(t,(function(t){return e[t]}))}function On(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function kn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Bn(e){return function(e){return Dn.test(e)}(e)?function(e){return e.match(En)||[]}(e):function(e){return e.split("")}(e)}var Fn,Tn,_n,Pn=Function.prototype,jn=Object.prototype,Nn=Sn["__core-js_shared__"],In=(Fn=/[^.]+$/.exec(Nn&&Nn.keys&&Nn.keys.IE_PROTO||""))?"Symbol(src)_1."+Fn:"",Ln=Pn.toString,Rn=jn.hasOwnProperty,Mn=jn.toString,zn=RegExp("^"+Ln.call(Rn).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),$n=Sn.Symbol,Hn=$n?$n.iterator:void 0,Vn=jn.propertyIsEnumerable,Un=(Tn=Object.keys,_n=Object,function(e){return Tn(_n(e))}),Wn=or(Sn,"DataView"),qn=or(Sn,"Map"),Gn=or(Sn,"Promise"),Kn=or(Sn,"Set"),Yn=or(Sn,"WeakMap"),Xn=ur(Wn),Zn=ur(qn),Jn=ur(Gn),Qn=ur(Kn),er=ur(Yn);function tr(e,t){var n=sr(e)||function(e){return function(e){return dr(e)&&lr(e)}(e)&&Rn.call(e,"callee")&&(!Vn.call(e,"callee")||"[object Arguments]"==Mn.call(e))}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var i in e)!t&&!Rn.call(e,i)||o&&("length"==i||ar(i,r))||n.push(i);return n}function nr(e){if(!fr(e)||function(e){return!!In&&In in e}(e))return!1;var t=cr(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(eg){}return t}(e)?zn:cn;return t.test(ur(e))}function rr(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||jn,t!==r)return Un(e);var t,n,r,o=[];for(var i in Object(e))Rn.call(e,i)&&"constructor"!=i&&o.push(i);return o}function or(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return nr(n)?n:void 0}var ir=function(e){return Mn.call(e)};function ar(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||fn.test(e))&&e>-1&&e%1==0&&e<t}function ur(e){if(null!=e){try{return Ln.call(e)}catch(eg){}try{return e+""}catch(eg){}}return""}(Wn&&"[object DataView]"!=ir(new Wn(new ArrayBuffer(1)))||qn&&ir(new qn)!=sn||Gn&&"[object Promise]"!=ir(Gn.resolve())||Kn&&ir(new Kn)!=ln||Yn&&"[object WeakMap]"!=ir(new Yn))&&(ir=function(e){var t=Mn.call(e),n="[object Object]"==t?e.constructor:void 0,r=n?ur(n):void 0;if(r)switch(r){case Xn:return"[object DataView]";case Zn:return sn;case Jn:return"[object Promise]";case Qn:return ln;case er:return"[object WeakMap]"}return t});var sr=Array.isArray;function lr(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!cr(e)}function cr(e){var t=fr(e)?Mn.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}function fr(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function dr(e){return!!e&&"object"==typeof e}function pr(e){return e?An(e,function(e){return lr(e)?tr(e):rr(e)}(e)):[]}var hr=function(e){if(!e)return[];if(lr(e))return function(e){return"string"==typeof e||!sr(e)&&dr(e)&&"[object String]"==Mn.call(e)}(e)?Bn(e):function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(e);if(Hn&&e[Hn])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Hn]());var t=ir(e);return(t==sn?On:t==ln?kn:pr)(e)};function gr(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function vr(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(n){void 0===e[n]?e[n]=t[n]:gr(t[n])&&gr(e[n])&&Object.keys(t[n]).length>0&&vr(e[n],t[n])}))}var yr={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function mr(){var e="undefined"!=typeof document?document:{};return vr(e,yr),e}var br={document:yr,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function wr(){var e="undefined"!=typeof window?window:{};return vr(e,br),e}function Er(e){return(Er=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Dr(e,t){return(Dr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Cr(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(eg){return!1}}function xr(e,t,n){return(xr=Cr()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&Dr(o,n.prototype),o}).apply(null,arguments)}function Sr(e){var t="function"==typeof Map?new Map:void 0;return Sr=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return xr(e,arguments,Er(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Dr(r,e)},Sr(e)}var Ar=function(e){var t,n;function r(t){var n,r,o;return n=e.call.apply(e,[this].concat(t))||this,r=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n),o=r.__proto__,Object.defineProperty(r,"__proto__",{get:function(){return o},set:function(e){o.__proto__=e}}),n}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r}(Sr(Array));function Or(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,Or(e)):t.push(e)})),t}function kr(e,t){return Array.prototype.filter.call(e,t)}function Br(e,t){var n=wr(),r=mr(),o=[];if(!t&&e instanceof Ar)return e;if(!e)return new Ar(o);if("string"==typeof e){var i=e.trim();if(i.indexOf("<")>=0&&i.indexOf(">")>=0){var a="div";0===i.indexOf("<li")&&(a="ul"),0===i.indexOf("<tr")&&(a="tbody"),0!==i.indexOf("<td")&&0!==i.indexOf("<th")||(a="tr"),0===i.indexOf("<tbody")&&(a="table"),0===i.indexOf("<option")&&(a="select");var u=r.createElement(a);u.innerHTML=i;for(var s=0;s<u.childNodes.length;s+=1)o.push(u.childNodes[s])}else o=function(e,t){if("string"!=typeof e)return[e];for(var n=[],r=t.querySelectorAll(e),o=0;o<r.length;o+=1)n.push(r[o]);return n}(e.trim(),t||r)}else if(e.nodeType||e===n||e===r)o.push(e);else if(Array.isArray(e)){if(e instanceof Ar)return e;o=e}return new Ar(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(o))}function Fr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Or(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,r)})),this}function Tr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Or(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,r)})),this}function _r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Or(t.map((function(e){return e.split(" ")})));return kr(this,(function(e){return r.filter((function(t){return e.classList.contains(t)})).length>0})).length>0}function Pr(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var r in e)this[n][r]=e[r],this[n].setAttribute(r,e[r]);return this}function jr(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this}function Nr(){var e=this[0];if(e){var t,n={};if(e.dataset)for(var r in e.dataset)n[r]=e.dataset[r];else for(var o=0;o<e.attributes.length;o+=1){var i=e.attributes[o];i.name.indexOf("data-")>=0&&(n[(t=i.name.split("data-")[1],t.toLowerCase().replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=i.value)}for(var a in n)"false"===n[a]?n[a]=!1:"true"===n[a]?n[a]=!0:parseFloat(n[a])===1*n[a]&&(n[a]*=1);return n}}function Ir(e){if(void 0===e){var t=this[0];if(!t)return;if(t.multiple&&"select"===t.nodeName.toLowerCase()){for(var n=[],r=0;r<t.selectedOptions.length;r+=1)n.push(t.selectedOptions[r].value);return n}return t.value}for(var o=0;o<this.length;o+=1){var i=this[o];if(Array.isArray(e)&&i.multiple&&"select"===i.nodeName.toLowerCase())for(var a=0;a<i.options.length;a+=1)i.options[a].selected=e.indexOf(i.options[a].value)>=0;else i.value=e}return this}function Lr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],i=t[2],a=t[3];function u(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),Br(t).is(o))i.apply(t,n);else for(var r=Br(t).parents(),a=0;a<r.length;a+=1)Br(r[a]).is(o)&&i.apply(r[a],n)}}function s(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),i.apply(this,t)}"function"==typeof t[1]&&(r=t[0],i=t[1],a=t[2],o=void 0),a||(a=!1);for(var l,c=r.split(" "),f=0;f<this.length;f+=1){var d=this[f];if(o)for(l=0;l<c.length;l+=1){var p=c[l];d.dom7LiveListeners||(d.dom7LiveListeners={}),d.dom7LiveListeners[p]||(d.dom7LiveListeners[p]=[]),d.dom7LiveListeners[p].push({listener:i,proxyListener:u}),d.addEventListener(p,u,a)}else for(l=0;l<c.length;l+=1){var h=c[l];d.dom7Listeners||(d.dom7Listeners={}),d.dom7Listeners[h]||(d.dom7Listeners[h]=[]),d.dom7Listeners[h].push({listener:i,proxyListener:s}),d.addEventListener(h,s,a)}}return this}function Rr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],i=t[2],a=t[3];"function"==typeof t[1]&&(r=t[0],i=t[1],a=t[2],o=void 0),a||(a=!1);for(var u=r.split(" "),s=0;s<u.length;s+=1)for(var l=u[s],c=0;c<this.length;c+=1){var f=this[c],d=void 0;if(!o&&f.dom7Listeners?d=f.dom7Listeners[l]:o&&f.dom7LiveListeners&&(d=f.dom7LiveListeners[l]),d&&d.length)for(var p=d.length-1;p>=0;p-=1){var h=d[p];i&&h.listener===i||i&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===i?(f.removeEventListener(l,h.proxyListener,a),d.splice(p,1)):i||(f.removeEventListener(l,h.proxyListener,a),d.splice(p,1))}}return this}function Mr(){var e=wr();return this[0]===e?e.innerWidth:this.length>0?parseFloat(this.css("width")):null}function zr(){var e=wr();return this[0]===e?e.innerHeight:this.length>0?parseFloat(this.css("height")):null}function $r(){if(this.length>0){var e=wr(),t=mr(),n=this[0],r=n.getBoundingClientRect(),o=t.body,i=n.clientTop||o.clientTop||0,a=n.clientLeft||o.clientLeft||0,u=n===e?e.scrollY:n.scrollTop,s=n===e?e.scrollX:n.scrollLeft;return{top:r.top+u-i,left:r.left+s-a}}return null}function Hr(){for(var e=0;e<this.length;e+=1)this[e].style.display="none";return this}function Vr(){for(var e=wr(),t=0;t<this.length;t+=1){var n=this[t];"none"===n.style.display&&(n.style.display=""),"none"===e.getComputedStyle(n,null).getPropertyValue("display")&&(n.style.display="block")}return this}function Ur(e,t){var n,r=wr();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var o in e)this[n].style[o]=e[o];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this}function Wr(e){return e?(this.forEach((function(t,n){e.apply(t,[t,n])})),this):this}function qr(e){return Br(kr(this,e))}function Gr(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this}function Kr(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this}function Yr(e){var t,n,r=wr(),o=mr(),i=this[0];if(!i||void 0===e)return!1;if("string"==typeof e){if(i.matches)return i.matches(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);for(t=Br(e),n=0;n<t.length;n+=1)if(t[n]===i)return!0;return!1}if(e===o)return i===o;if(e===r)return i===r;if(e.nodeType||e instanceof Ar){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===i)return!0;return!1}return!1}function Xr(){for(var e,t=mr(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var r=0;r<this.length;r+=1)if("string"==typeof e){var o=t.createElement("div");for(o.innerHTML=e;o.firstChild;)this[r].appendChild(o.firstChild)}else if(e instanceof Ar)for(var i=0;i<e.length;i+=1)this[r].appendChild(e[i]);else this[r].appendChild(e)}return this}function Zr(e){var t,n,r=mr();for(t=0;t<this.length;t+=1)if("string"==typeof e){var o=r.createElement("div");for(o.innerHTML=e,n=o.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(o.childNodes[n],this[t].childNodes[0])}else if(e instanceof Ar)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this}function Jr(e){for(var t=[],n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?Br(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return Br(t)}function Qr(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].parentNode;r;)e?Br(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return Br(t)}function eo(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].querySelectorAll(e),o=0;o<r.length;o+=1)t.push(r[o]);return Br(t)}function to(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].children,o=0;o<r.length;o+=1)e&&!Br(r[o]).is(e)||t.push(r[o]);return Br(t)}function no(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}function ro(){for(var e=0;e<this.length;e+=1){var t=this[e];if(1===t.nodeType){for(var n=0;n<t.childNodes.length;n+=1)t.childNodes[n].parentNode&&t.childNodes[n].parentNode.removeChild(t.childNodes[n]);t.textContent=""}}return this}Br.fn=Ar.prototype;var oo="resize scroll".split(" ");function io(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];if(void 0===n[0]){for(var o=0;o<this.length;o+=1)oo.indexOf(e)<0&&(e in this[o]?this[o][e]():Br(this[o]).trigger(e));return this}return this.on.apply(this,[e].concat(n))}}var ao=io("click"),uo=io("focus"),so="[object GeneratorFunction]",lo=/^(?:0|[1-9]\d*)$/;function co(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););return e}var fo=Object.prototype,po=fo.hasOwnProperty,ho=fo.toString,go=fo.propertyIsEnumerable,vo=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object);function yo(e,t){var n=xo(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&So(e)}(e)&&po.call(e,"callee")&&(!go.call(e,"callee")||"[object Arguments]"==ho.call(e))}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var i in e)!t&&!po.call(e,i)||o&&("length"==i||Co(i,r))||n.push(i);return n}var mo,bo,wo=(mo=function(e,t){return e&&Eo(e,t,Ao)},function(e,t){if(null==e)return e;if(!So(e))return mo(e,t);for(var n=e.length,r=bo?n:-1,o=Object(e);(bo?r--:++r<n)&&!1!==t(o[r],r,o););return e}),Eo=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),u=a.length;u--;){var s=a[e?u:++o];if(!1===n(i[s],s,i))break}return t}}();function Do(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||fo,t!==r)return vo(e);var t,n,r,o=[];for(var i in Object(e))po.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Co(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||lo.test(e))&&e>-1&&e%1==0&&e<t}var xo=Array.isArray;function So(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)?ho.call(e):"";return"[object Function]"==t||t==so}(e)}function Ao(e){return So(e)?yo(e):Do(e)}function Oo(e){return e}var ko=function(e,t){return(xo(e)?co:wo)(e,"function"==typeof t?t:Oo)};if("undefined"!=typeof navigator&&"ReactNative"===navigator.product&&"undefined"==typeof crypto)throw new Error("React Native does not have a built-in secure random generator. If you don’t need unpredictable IDs use `nanoid/non-secure`. For secure IDs, import `react-native-get-random-values` before Nano ID.");if("undefined"!=typeof msCrypto&&"undefined"==typeof crypto)throw new Error("Import file with `if (!window.crypto) window.crypto = window.msCrypto` before importing Nano ID to fix IE 11 support");if("undefined"==typeof crypto)throw new Error("Your browser does not have secure random generator. If you don’t need unpredictable IDs, you can use nanoid/non-secure.");let Bo=(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t};var Fo=/^\s+|\s+$/g,To=/^[-+]0x[0-9a-f]+$/i,_o=/^0b[01]+$/i,Po=/^0o[0-7]+$/i,jo=parseInt,No="object"==typeof an&&an&&an.Object===Object&&an,Io="object"==typeof self&&self&&self.Object===Object&&self,Lo=No||Io||Function("return this")(),Ro=Object.prototype.toString,Mo=Math.max,zo=Math.min,$o=function(){return Lo.Date.now()};function Ho(e,t,n){var r,o,i,a,u,s,l=0,c=!1,f=!1,d=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function p(t){var n=r,i=o;return r=o=void 0,l=t,a=e.apply(i,n)}function h(e){return l=e,u=setTimeout(v,t),c?p(e):a}function g(e){var n=e-s;return void 0===s||n>=t||n<0||f&&e-l>=i}function v(){var e=$o();if(g(e))return y(e);u=setTimeout(v,function(e){var n=t-(e-s);return f?zo(n,i-(e-l)):n}(e))}function y(e){return u=void 0,d&&r?p(e):(r=o=void 0,a)}function m(){var e=$o(),n=g(e);if(r=arguments,o=this,s=e,n){if(void 0===u)return h(s);if(f)return u=setTimeout(v,t),p(s)}return void 0===u&&(u=setTimeout(v,t)),a}return t=Uo(t)||0,Vo(n)&&(c=!!n.leading,i=(f="maxWait"in n)?Mo(Uo(n.maxWait)||0,t):i,d="trailing"in n?!!n.trailing:d),m.cancel=function(){void 0!==u&&clearTimeout(u),l=0,r=s=o=u=void 0},m.flush=function(){return void 0===u?a:y($o())},m}function Vo(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Uo(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==Ro.call(e)}(e))return NaN;if(Vo(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Vo(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Fo,"");var n=_o.test(e);return n||Po.test(e)?jo(e.slice(2),n?2:8):To.test(e)?NaN:+e}var Wo=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return Vo(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),Ho(e,t,{leading:r,maxWait:t,trailing:o})};const qo={createElement:function(e,t){return document.createElement(e,t)},createElementNS:function(e,t,n){return document.createElementNS(e,t,n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},getTextContent:function(e){return e.textContent},isElement:function(e){return 1===e.nodeType},isText:function(e){return 3===e.nodeType},isComment:function(e){return 8===e.nodeType}};function Go(e,t,n,r,o){return{sel:e,data:t,children:n,text:r,elm:o,key:void 0===t?void 0:t.key}}const Ko=Array.isArray;function Yo(e){return"string"==typeof e||"number"==typeof e||e instanceof String||e instanceof Number}function Xo(e){return void 0===e}function Zo(e){return void 0!==e}const Jo=Go("",{},[],void 0,void 0);function Qo(e,t){var n,r;const o=e.key===t.key,i=(null===(n=e.data)||void 0===n?void 0:n.is)===(null===(r=t.data)||void 0===r?void 0:r.is);return e.sel===t.sel&&o&&i}function ei(e,t,n){var r;const o={};for(let i=t;i<=n;++i){const t=null===(r=e[i])||void 0===r?void 0:r.key;void 0!==t&&(o[t]=i)}return o}const ti=["create","update","remove","destroy","pre","post"];function ni(e,t){const n={create:[],update:[],remove:[],destroy:[],pre:[],post:[]},r=void 0!==t?t:qo;for(const c of ti)for(const t of e){const e=t[c];void 0!==e&&n[c].push(e)}function o(e,t){return function(){if(0==--t){const t=r.parentNode(e);r.removeChild(t,e)}}}function i(e,t){var o,a;let u,s=e.data;if(void 0!==s){const t=null===(o=s.hook)||void 0===o?void 0:o.init;Zo(t)&&(t(e),s=e.data)}const l=e.children,c=e.sel;if("!"===c)Xo(e.text)&&(e.text=""),e.elm=r.createComment(e.text);else if(void 0!==c){const o=c.indexOf("#"),f=c.indexOf(".",o),d=o>0?o:c.length,p=f>0?f:c.length,h=-1!==o||-1!==f?c.slice(0,Math.min(d,p)):c,g=e.elm=Zo(s)&&Zo(u=s.ns)?r.createElementNS(u,h,s):r.createElement(h,s);for(d<p&&g.setAttribute("id",c.slice(d+1,p)),f>0&&g.setAttribute("class",c.slice(p+1).replace(/\./g," ")),u=0;u<n.create.length;++u)n.create[u](Jo,e);if(Ko(l))for(u=0;u<l.length;++u){const e=l[u];null!=e&&r.appendChild(g,i(e,t))}else Yo(e.text)&&r.appendChild(g,r.createTextNode(e.text));const v=e.data.hook;Zo(v)&&(null===(a=v.create)||void 0===a||a.call(v,Jo,e),v.insert&&t.push(e))}else e.elm=r.createTextNode(e.text);return e.elm}function a(e,t,n,o,a,u){for(;o<=a;++o){const a=n[o];null!=a&&r.insertBefore(e,i(a,u),t)}}function u(e){var t,r;const o=e.data;if(void 0!==o){null===(r=null===(t=null==o?void 0:o.hook)||void 0===t?void 0:t.destroy)||void 0===r||r.call(t,e);for(let t=0;t<n.destroy.length;++t)n.destroy[t](e);if(void 0!==e.children)for(let t=0;t<e.children.length;++t){const n=e.children[t];null!=n&&"string"!=typeof n&&u(n)}}}function s(e,t,i,a){for(var s,l;i<=a;++i){let a,c;const f=t[i];if(null!=f)if(Zo(f.sel)){u(f),a=n.remove.length+1,c=o(f.elm,a);for(let t=0;t<n.remove.length;++t)n.remove[t](f,c);const e=null===(l=null===(s=null==f?void 0:f.data)||void 0===s?void 0:s.hook)||void 0===l?void 0:l.remove;Zo(e)?e(f,c):c()}else r.removeChild(e,f.elm)}}function l(e,t,o){var u,c,f,d,p;const h=null===(u=t.data)||void 0===u?void 0:u.hook;null===(c=null==h?void 0:h.prepatch)||void 0===c||c.call(h,e,t);const g=t.elm=e.elm,v=e.children,y=t.children;if(e!==t){if(void 0!==t.data){for(let r=0;r<n.update.length;++r)n.update[r](e,t);null===(d=null===(f=t.data.hook)||void 0===f?void 0:f.update)||void 0===d||d.call(f,e,t)}Xo(t.text)?Zo(v)&&Zo(y)?v!==y&&function(e,t,n,o){let u,c,f,d,p=0,h=0,g=t.length-1,v=t[0],y=t[g],m=n.length-1,b=n[0],w=n[m];for(;p<=g&&h<=m;)null==v?v=t[++p]:null==y?y=t[--g]:null==b?b=n[++h]:null==w?w=n[--m]:Qo(v,b)?(l(v,b,o),v=t[++p],b=n[++h]):Qo(y,w)?(l(y,w,o),y=t[--g],w=n[--m]):Qo(v,w)?(l(v,w,o),r.insertBefore(e,v.elm,r.nextSibling(y.elm)),v=t[++p],w=n[--m]):Qo(y,b)?(l(y,b,o),r.insertBefore(e,y.elm,v.elm),y=t[--g],b=n[++h]):(void 0===u&&(u=ei(t,p,g)),c=u[b.key],Xo(c)?r.insertBefore(e,i(b,o),v.elm):(f=t[c],f.sel!==b.sel?r.insertBefore(e,i(b,o),v.elm):(l(f,b,o),t[c]=void 0,r.insertBefore(e,f.elm,v.elm))),b=n[++h]);(p<=g||h<=m)&&(p>g?(d=null==n[m+1]?null:n[m+1].elm,a(e,d,n,h,m,o)):s(e,t,p,g))}(g,v,y,o):Zo(y)?(Zo(e.text)&&r.setTextContent(g,""),a(g,null,y,0,y.length-1,o)):Zo(v)?s(g,v,0,v.length-1):Zo(e.text)&&r.setTextContent(g,""):e.text!==t.text&&(Zo(v)&&s(g,v,0,v.length-1),r.setTextContent(g,t.text)),null===(p=null==h?void 0:h.postpatch)||void 0===p||p.call(h,e,t)}}return function(e,t){let o,a,u;const c=[];for(o=0;o<n.pre.length;++o)n.pre[o]();for(function(e){return void 0!==e.sel}(e)||(e=function(e){const t=e.id?"#"+e.id:"",n=e.getAttribute("class"),o=n?"."+n.split(" ").join("."):"";return Go(r.tagName(e).toLowerCase()+t+o,{},[],void 0,e)}(e)),Qo(e,t)?l(e,t,c):(a=e.elm,u=r.parentNode(a),i(t,c),null!==u&&(r.insertBefore(u,t.elm,r.nextSibling(a)),s(u,[e],0,0))),o=0;o<c.length;++o)c[o].data.hook.insert(c[o]);for(o=0;o<n.post.length;++o)n.post[o]();return t}}function ri(e,t,n){if(e.ns="http://www.w3.org/2000/svg","foreignObject"!==n&&void 0!==t)for(let r=0;r<t.length;++r){const e=t[r].data;void 0!==e&&ri(e,t[r].children,t[r].sel)}}function oi(e,t,n){let r,o,i,a={};if(void 0!==n?(null!==t&&(a=t),Ko(n)?r=n:Yo(n)?o=n.toString():n&&n.sel&&(r=[n])):null!=t&&(Ko(t)?r=t:Yo(t)?o=t.toString():t&&t.sel?r=[t]:a=t),void 0!==r)for(i=0;i<r.length;++i)Yo(r[i])&&(r[i]=Go(void 0,void 0,void 0,r[i],void 0));return"s"!==e[0]||"v"!==e[1]||"g"!==e[2]||3!==e.length&&"."!==e[3]&&"#"!==e[3]||ri(a,r,e),Go(e,a,r,o,void 0)}function ii(e,t){let n;const r=t.elm;let o=e.data.attrs,i=t.data.attrs;if((o||i)&&o!==i){for(n in o=o||{},i=i||{},i){const e=i[n];o[n]!==e&&(!0===e?r.setAttribute(n,""):!1===e?r.removeAttribute(n):120!==n.charCodeAt(0)?r.setAttribute(n,e):58===n.charCodeAt(3)?r.setAttributeNS("http://www.w3.org/XML/1998/namespace",n,e):58===n.charCodeAt(5)?r.setAttributeNS("http://www.w3.org/1999/xlink",n,e):r.setAttribute(n,e))}for(n in o)n in i||r.removeAttribute(n)}}const ai={create:ii,update:ii};function ui(e,t){let n,r;const o=t.elm;let i=e.data.class,a=t.data.class;if((i||a)&&i!==a){for(r in i=i||{},a=a||{},i)i[r]&&!Object.prototype.hasOwnProperty.call(a,r)&&o.classList.remove(r);for(r in a)n=a[r],n!==i[r]&&o.classList[n?"add":"remove"](r)}}const si={create:ui,update:ui},li=/[A-Z]/g;function ci(e,t){const n=t.elm;let r,o=e.data.dataset,i=t.data.dataset;if(!o&&!i)return;if(o===i)return;o=o||{},i=i||{};const a=n.dataset;for(r in o)i[r]||(a?r in a&&delete a[r]:n.removeAttribute("data-"+r.replace(li,"-$&").toLowerCase()));for(r in i)o[r]!==i[r]&&(a?a[r]=i[r]:n.setAttribute("data-"+r.replace(li,"-$&").toLowerCase(),i[r]))}const fi={create:ci,update:ci};function di(e,t,n){if("function"==typeof e)e.call(t,n,t);else if("object"==typeof e)for(let r=0;r<e.length;r++)di(e[r],t,n)}function pi(e,t){const n=e.type,r=t.data.on;r&&r[n]&&di(r[n],t,e)}function hi(e,t){const n=e.data.on,r=e.listener,o=e.elm,i=t&&t.data.on,a=t&&t.elm;let u;if(n!==i){if(n&&r)if(i)for(u in n)i[u]||o.removeEventListener(u,r,!1);else for(u in n)o.removeEventListener(u,r,!1);if(i){const r=t.listener=e.listener||function e(t){pi(t,e.vnode)};if(r.vnode=t,n)for(u in i)n[u]||a.addEventListener(u,r,!1);else for(u in i)a.addEventListener(u,r,!1)}}}const gi={create:hi,update:hi,destroy:hi};function vi(e,t){let n,r,o;const i=t.elm;let a=e.data.props,u=t.data.props;if((a||u)&&a!==u)for(n in a=a||{},u=u||{},u)r=u[n],o=a[n],o===r||"value"===n&&i[n]===r||(i[n]=r)}const yi={create:vi,update:vi},mi="undefined"!=typeof window&&window.requestAnimationFrame.bind(window)||setTimeout;let bi=!1;function wi(e,t,n){var r;r=function(){e[t]=n},mi((function(){mi(r)}))}function Ei(e,t){let n,r;const o=t.elm;let i=e.data.style,a=t.data.style;if(!i&&!a)return;if(i===a)return;i=i||{},a=a||{};const u="delayed"in i;for(r in i)a[r]||("-"===r[0]&&"-"===r[1]?o.style.removeProperty(r):o.style[r]="");for(r in a)if(n=a[r],"delayed"===r&&a.delayed)for(const e in a.delayed)n=a.delayed[e],u&&n===i.delayed[e]||wi(o.style,e,n);else"remove"!==r&&n!==i[r]&&("-"===r[0]&&"-"===r[1]?o.style.setProperty(r,n):o.style[r]=n)}const Di={pre:function(){bi=!1},create:Ei,update:Ei,destroy:function(e){let t,n;const r=e.elm,o=e.data.style;if(o&&(t=o.destroy))for(n in t)r.style[n]=t[n]},remove:function(e,t){const n=e.data.style;if(!n||!n.remove)return void t();let r;bi||(e.elm.offsetLeft,bi=!0);const o=e.elm;let i=0;const a=n.remove;let u=0;const s=[];for(r in a)s.push(r),o.style[r]=a[r];const l=getComputedStyle(o)["transition-property"].split(", ");for(;i<l.length;++i)-1!==s.indexOf(l[i])&&u++;o.addEventListener("transitionend",(function(e){e.target===o&&--u,0===u&&t()}))}};function Ci(e,t){for(const n of e)null!=n&&!1!==n&&""!==n&&(Array.isArray(n)?Ci(n,t):"string"==typeof n||"number"==typeof n||"boolean"==typeof n?t.push(Go(void 0,void 0,void 0,String(n),void 0)):t.push(n));return t}function xi(e,t,...n){const r=Ci(n,[]);return"function"==typeof e?e(t,r):1===r.length&&!r[0].sel&&r[0].text?oi(e,t,r[0].text):oi(e,t,r)}xi||(xi={});var Si=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Ai=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Oi="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",ki="[\\ud800-\\udfff]",Bi="["+Oi+"]",Fi="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",Ti="\\d+",_i="[\\u2700-\\u27bf]",Pi="[a-z\\xdf-\\xf6\\xf8-\\xff]",ji="[^\\ud800-\\udfff"+Oi+Ti+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Ni="\\ud83c[\\udffb-\\udfff]",Ii="[^\\ud800-\\udfff]",Li="(?:\\ud83c[\\udde6-\\uddff]){2}",Ri="[\\ud800-\\udbff][\\udc00-\\udfff]",Mi="[A-Z\\xc0-\\xd6\\xd8-\\xde]",zi="(?:"+Pi+"|"+ji+")",$i="(?:"+Mi+"|"+ji+")",Hi="(?:"+Fi+"|"+Ni+")"+"?",Vi="[\\ufe0e\\ufe0f]?"+Hi+("(?:\\u200d(?:"+[Ii,Li,Ri].join("|")+")[\\ufe0e\\ufe0f]?"+Hi+")*"),Ui="(?:"+[_i,Li,Ri].join("|")+")"+Vi,Wi="(?:"+[Ii+Fi+"?",Fi,Li,Ri,ki].join("|")+")",qi=RegExp("['’]","g"),Gi=RegExp(Fi,"g"),Ki=RegExp(Ni+"(?="+Ni+")|"+Wi+Vi,"g"),Yi=RegExp([Mi+"?"+Pi+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[Bi,Mi,"$"].join("|")+")",$i+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[Bi,Mi+zi,"$"].join("|")+")",Mi+"?"+zi+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Mi+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",Ti,Ui].join("|"),"g"),Xi=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Zi=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ji="object"==typeof an&&an&&an.Object===Object&&an,Qi="object"==typeof self&&self&&self.Object===Object&&self,ea=Ji||Qi||Function("return this")();var ta,na=(ta={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==ta?void 0:ta[e]});function ra(e){return Xi.test(e)}function oa(e){return ra(e)?function(e){return e.match(Ki)||[]}(e):function(e){return e.split("")}(e)}var ia=Object.prototype.toString,aa=ea.Symbol,ua=aa?aa.prototype:void 0,sa=ua?ua.toString:void 0;function la(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==ia.call(e)}(e))return sa?sa.call(e):"";var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}function ca(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}(e,t,n)}function fa(e){return null==e?"":la(e)}var da,pa=(da=function(e,t,n){return t=t.toLowerCase(),e+(n?ga(fa(t).toLowerCase()):t)},function(e){return function(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}(function(e,t,n){return e=fa(e),void 0===(t=n?void 0:t)?function(e){return Zi.test(e)}(e)?function(e){return e.match(Yi)||[]}(e):function(e){return e.match(Si)||[]}(e):e.match(t)||[]}(function(e){return(e=fa(e))&&e.replace(Ai,na).replace(Gi,"")}(e).replace(qi,"")),da,"")});var ha,ga=(ha="toUpperCase",function(e){var t=ra(e=fa(e))?oa(e):void 0,n=t?t[0]:e.charAt(0),r=t?ca(t,1).join(""):e.slice(1);return n[ha]()+r});for(var va=pa,ya="undefined"!=typeof window&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),ma={alt:"altKey",control:"ctrlKey",meta:"metaKey",shift:"shiftKey"},ba={add:"+",break:"pause",cmd:"meta",command:"meta",ctl:"control",ctrl:"control",del:"delete",down:"arrowdown",esc:"escape",ins:"insert",left:"arrowleft",mod:ya?"meta":"control",opt:"alt",option:"alt",return:"enter",right:"arrowright",space:" ",spacebar:" ",up:"arrowup",win:"meta",windows:"meta"},wa={backspace:8,tab:9,enter:13,shift:16,control:17,alt:18,pause:19,capslock:20,escape:27," ":32,pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,insert:45,delete:46,meta:91,numlock:144,scrolllock:145,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},Ea=1;Ea<20;Ea++)wa["f"+Ea]=111+Ea;function Da(e,t,n){t&&!("byKey"in t)&&(n=t,t=null),Array.isArray(e)||(e=[e]);var r=e.map((function(e){return function(e,t){var n=t&&t.byKey,r={},o=(e=e.replace("++","+add")).split("+"),i=o.length;for(var a in ma)r[ma[a]]=!1;var u=!0,s=!1,l=void 0;try{for(var c,f=o[Symbol.iterator]();!(u=(c=f.next()).done);u=!0){var d=c.value,p=d.endsWith("?")&&d.length>1;p&&(d=d.slice(0,-1));var h=xa(d),g=ma[h];if(d.length>1&&!g&&!ba[d]&&!wa[h])throw new TypeError('Unknown modifier: "'+d+'"');1!==i&&g||(n?r.key=h:r.which=Ca(d)),g&&(r[g]=!p||null)}}catch(v){s=!0,l=v}finally{try{!u&&f.return&&f.return()}finally{if(s)throw l}}return r}(e,t)})),o=function(e){return r.some((function(t){return function(e,t){for(var n in e){var r=e[n],o=void 0;if(null!=r&&((null!=(o="key"===n&&null!=t.key?t.key.toLowerCase():"which"===n?91===r&&93===t.which?91:t.which:t[n])||!1!==r)&&o!==r))return!1}return!0}(t,e)}))};return null==n?o:o(n)}function Ca(e){return e=xa(e),wa[e]||e.toUpperCase().charCodeAt(0)}function xa(e){return e=e.toLowerCase(),e=ba[e]||e}var Sa=Da,Aa=function(e,t){return Da(e,{byKey:!0},t)},Oa=/^\s+|\s+$/g,ka=/^[-+]0x[0-9a-f]+$/i,Ba=/^0b[01]+$/i,Fa=/^0o[0-7]+$/i,Ta=parseInt,_a="object"==typeof an&&an&&an.Object===Object&&an,Pa="object"==typeof self&&self&&self.Object===Object&&self,ja=_a||Pa||Function("return this")(),Na=Object.prototype.toString,Ia=Math.max,La=Math.min,Ra=function(){return ja.Date.now()};function Ma(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function za(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==Na.call(e)}(e))return NaN;if(Ma(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Ma(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Oa,"");var n=Ba.test(e);return n||Fa.test(e)?Ta(e.slice(2),n?2:8):ka.test(e)?NaN:+e}var $a,Ha=function(e,t,n){var r,o,i,a,u,s,l=0,c=!1,f=!1,d=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function p(t){var n=r,i=o;return r=o=void 0,l=t,a=e.apply(i,n)}function h(e){return l=e,u=setTimeout(v,t),c?p(e):a}function g(e){var n=e-s;return void 0===s||n>=t||n<0||f&&e-l>=i}function v(){var e=Ra();if(g(e))return y(e);u=setTimeout(v,function(e){var n=t-(e-s);return f?La(n,i-(e-l)):n}(e))}function y(e){return u=void 0,d&&r?p(e):(r=o=void 0,a)}function m(){var e=Ra(),n=g(e);if(r=arguments,o=this,s=e,n){if(void 0===u)return h(s);if(f)return u=setTimeout(v,t),p(s)}return void 0===u&&(u=setTimeout(v,t)),a}return t=za(t)||0,Ma(n)&&(c=!!n.leading,i=(f="maxWait"in n)?Ia(za(n.maxWait)||0,t):i,d="trailing"in n?!!n.trailing:d),m.cancel=function(){void 0!==u&&clearTimeout(u),l=0,r=s=o=u=void 0},m.flush=function(){return void 0===u?a:y(Ra())},m},Va=un((function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,o="[object Arguments]",i="[object Boolean]",a="[object Date]",u="[object Function]",s="[object GeneratorFunction]",l="[object Map]",c="[object Number]",f="[object Object]",d="[object Promise]",p="[object RegExp]",h="[object Set]",g="[object String]",v="[object Symbol]",y="[object WeakMap]",m="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",E="[object Float64Array]",D="[object Int8Array]",C="[object Int16Array]",x="[object Int32Array]",S="[object Uint8Array]",A="[object Uint8ClampedArray]",O="[object Uint16Array]",k="[object Uint32Array]",B=/\w*$/,F=/^\[object .+?Constructor\]$/,T=/^(?:0|[1-9]\d*)$/,_={};_[o]=_["[object Array]"]=_[m]=_[b]=_[i]=_[a]=_[w]=_[E]=_[D]=_[C]=_[x]=_[l]=_[c]=_[f]=_[p]=_[h]=_[g]=_[v]=_[S]=_[A]=_[O]=_[k]=!0,_["[object Error]"]=_[u]=_[y]=!1;var P="object"==typeof an&&an&&an.Object===Object&&an,j="object"==typeof self&&self&&self.Object===Object&&self,N=P||j||Function("return this")(),I=t&&!t.nodeType&&t,L=I&&e&&!e.nodeType&&e,R=L&&L.exports===I;function M(e,t){return e.set(t[0],t[1]),e}function z(e,t){return e.add(t),e}function $(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(eg){}return t}function V(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function U(e,t){return function(n){return e(t(n))}}function W(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var q=Array.prototype,G=Function.prototype,K=Object.prototype,Y=N["__core-js_shared__"],X=function(){var e=/[^.]+$/.exec(Y&&Y.keys&&Y.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),Z=G.toString,J=K.hasOwnProperty,Q=K.toString,ee=RegExp("^"+Z.call(J).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=R?N.Buffer:void 0,ne=N.Symbol,re=N.Uint8Array,oe=U(Object.getPrototypeOf,Object),ie=Object.create,ae=K.propertyIsEnumerable,ue=q.splice,se=Object.getOwnPropertySymbols,le=te?te.isBuffer:void 0,ce=U(Object.keys,Object),fe=Ie(N,"DataView"),de=Ie(N,"Map"),pe=Ie(N,"Promise"),he=Ie(N,"Set"),ge=Ie(N,"WeakMap"),ve=Ie(Object,"create"),ye=$e(fe),me=$e(de),be=$e(pe),we=$e(he),Ee=$e(ge),De=ne?ne.prototype:void 0,Ce=De?De.valueOf:void 0;function xe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ae(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){this.__data__=new Se(e)}function ke(e,t){var n=Ve(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ue(e)}(e)&&J.call(e,"callee")&&(!ae.call(e,"callee")||Q.call(e)==o)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,i=!!r;for(var a in e)!t&&!J.call(e,a)||i&&("length"==a||Me(a,r))||n.push(a);return n}function Be(e,t,n){var r=e[t];J.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Fe(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function Te(e,t,n,r,d,y,F){var T;if(r&&(T=y?r(e,d,y,F):r(e)),void 0!==T)return T;if(!Ge(e))return e;var P=Ve(e);if(P){if(T=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&J.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,T)}else{var j=Re(e),N=j==u||j==s;if(We(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(j==f||j==o||N&&!y){if(H(e))return y?e:{};if(T=function(e){return"function"!=typeof e.constructor||ze(e)?{}:(t=oe(e),Ge(t)?ie(t):{});var t}(N?{}:e),!t)return function(e,t){return je(e,Le(e),t)}(e,function(e,t){return e&&je(t,Ke(t),e)}(T,e))}else{if(!_[j])return y?e:{};T=function(e,t,n,r){var o=e.constructor;switch(t){case m:return Pe(e);case i:case a:return new o(+e);case b:return function(e,t){var n=t?Pe(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case w:case E:case D:case C:case x:case S:case A:case O:case k:return function(e,t){var n=t?Pe(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case l:return function(e,t,n){return $(t?n(V(e),!0):V(e),M,new e.constructor)}(e,r,n);case c:case g:return new o(e);case p:return function(e){var t=new e.constructor(e.source,B.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return $(t?n(W(e),!0):W(e),z,new e.constructor)}(e,r,n);case v:return u=e,Ce?Object(Ce.call(u)):{}}var u}(e,j,Te,t)}}F||(F=new Oe);var I=F.get(e);if(I)return I;if(F.set(e,T),!P)var L=n?function(e){return function(e,t,n){var r=t(e);return Ve(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ke,Le)}(e):Ke(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(L||e,(function(o,i){L&&(o=e[i=o]),Be(T,i,Te(o,t,n,r,i,e,F))})),T}function _e(e){return!(!Ge(e)||function(e){return!!X&&X in e}(e))&&(qe(e)||H(e)?ee:F).test($e(e))}function Pe(e){var t=new e.constructor(e.byteLength);return new re(t).set(new re(e)),t}function je(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],u=r?r(n[a],e[a],a,n,e):void 0;Be(n,a,void 0===u?e[a]:u)}return n}function Ne(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ie(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return _e(n)?n:void 0}xe.prototype.clear=function(){this.__data__=ve?ve(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var t=this.__data__;if(ve){var r=t[e];return r===n?void 0:r}return J.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return ve?void 0!==t[e]:J.call(t,e)},xe.prototype.set=function(e,t){return this.__data__[e]=ve&&void 0===t?n:t,this},Se.prototype.clear=function(){this.__data__=[]},Se.prototype.delete=function(e){var t=this.__data__,n=Fe(t,e);return!(n<0)&&(n==t.length-1?t.pop():ue.call(t,n,1),!0)},Se.prototype.get=function(e){var t=this.__data__,n=Fe(t,e);return n<0?void 0:t[n][1]},Se.prototype.has=function(e){return Fe(this.__data__,e)>-1},Se.prototype.set=function(e,t){var n=this.__data__,r=Fe(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Ae.prototype.clear=function(){this.__data__={hash:new xe,map:new(de||Se),string:new xe}},Ae.prototype.delete=function(e){return Ne(this,e).delete(e)},Ae.prototype.get=function(e){return Ne(this,e).get(e)},Ae.prototype.has=function(e){return Ne(this,e).has(e)},Ae.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},Oe.prototype.clear=function(){this.__data__=new Se},Oe.prototype.delete=function(e){return this.__data__.delete(e)},Oe.prototype.get=function(e){return this.__data__.get(e)},Oe.prototype.has=function(e){return this.__data__.has(e)},Oe.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Se){var r=n.__data__;if(!de||r.length<199)return r.push([e,t]),this;n=this.__data__=new Ae(r)}return n.set(e,t),this};var Le=se?U(se,Object):function(){return[]},Re=function(e){return Q.call(e)};function Me(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||T.test(e))&&e>-1&&e%1==0&&e<t}function ze(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||K)}function $e(e){if(null!=e){try{return Z.call(e)}catch(eg){}try{return e+""}catch(eg){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(fe&&Re(new fe(new ArrayBuffer(1)))!=b||de&&Re(new de)!=l||pe&&Re(pe.resolve())!=d||he&&Re(new he)!=h||ge&&Re(new ge)!=y)&&(Re=function(e){var t=Q.call(e),n=t==f?e.constructor:void 0,r=n?$e(n):void 0;if(r)switch(r){case ye:return b;case me:return l;case be:return d;case we:return h;case Ee:return y}return t});var Ve=Array.isArray;function Ue(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}(e.length)&&!qe(e)}var We=le||function(){return!1};function qe(e){var t=Ge(e)?Q.call(e):"";return t==u||t==s}function Ge(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ke(e){return Ue(e)?ke(e):function(e){if(!ze(e))return ce(e);var t=[];for(var n in Object(e))J.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return Te(e,!0,!0)}}));function Ua(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Wa=0;function qa(e){return"__private_"+Wa+++"_"+e}function Ga(e,t,n){const r=[];return e.forEach((e=>"string"!=typeof e?r.push(e):t[Symbol.split](e).forEach(((e,t,o)=>{""!==e&&r.push(e),t<o.length-1&&r.push(n)})))),r}
/**
 * Takes a string with placeholder variables like `%{smart_count} file selected`
 * and replaces it with values from options `{smart_count: 5}`
 *
 * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE
 * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299
 *
 * @param {string} phrase that needs interpolation, with placeholders
 * @param {object} options with values that will be used to replace placeholders
 * @returns {any[]} interpolated
 */function Ka(e,t){const n=/\$/g;let r=[e];if(null==t)return r;for(const o of Object.keys(t))if("_"!==o){let e=t[o];"string"==typeof e&&(e=n[Symbol.replace](e,"$$$$")),r=Ga(r,new RegExp(`%\\{${o}\\}`,"g"),e)}return r}var Ya=($a=qa("apply"),class{constructor(e){Object.defineProperty(this,$a,{value:Xa}),this.locale={strings:{},pluralize:e=>1===e?0:1},Array.isArray(e)?e.forEach(Ua(this,$a)[$a],this):Ua(this,$a)[$a](e)}translate(e,t){return this.translateArray(e,t).join("")}translateArray(e,t){if(!function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}(this.locale.strings,e))throw new Error(`missing string: ${e}`);const n=this.locale.strings[e];if("object"==typeof n){if(t&&void 0!==t.smart_count){return Ka(n[this.locale.pluralize(t.smart_count)],t)}throw new Error("Attempted to use a string with plural forms, but no value was given for %{smart_count}")}return Ka(n,t)}});function Xa(e){if(null==e||!e.strings)return;const t=this.locale;this.locale={...t,strings:{...t.strings,...e.strings}},this.locale.pluralize=e.pluralize||t.pluralize}var Za=function(){var e={},t=e._fns={};return e.emit=function(e,n,r,o,i,a,u){var s=function(e){var n=t[e]?t[e]:[],r=e.indexOf(":"),o=-1===r?[e]:[e.substring(0,r),e.substring(r+1)],i=Object.keys(t),a=0,u=i.length;for(;a<u;a++){var s=i[a];if("*"===s&&(n=n.concat(t[s])),2===o.length&&o[0]===s){n=n.concat(t[s]);break}}return n}(e);s.length&&function(e,t,n){var r=0,o=t.length;for(;r<o&&t[r];r++)t[r].event=e,t[r].apply(t[r],n)}(e,s,[n,r,o,i,a,u])},e.on=function(e,n){t[e]||(t[e]=[]),t[e].push(n)},e.once=function(t,n){this.on(t,(function r(){n.apply(this,arguments),e.off(t,r)}))},e.off=function(e,t){var n=[];if(e&&t)for(var r=this._fns[e],o=0,i=r?r.length:0;o<i;o++)r[o]!==t&&n.push(r[o]);n.length?this._fns[e]=n:delete this._fns[e]},e};var Ja={urlAlphabet:"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"};let{urlAlphabet:Qa}=Ja;if("undefined"!=typeof navigator&&"ReactNative"===navigator.product&&"undefined"==typeof crypto)throw new Error("React Native does not have a built-in secure random generator. If you don’t need unpredictable IDs use `nanoid/non-secure`. For secure IDs, import `react-native-get-random-values` before Nano ID.");if("undefined"!=typeof msCrypto&&"undefined"==typeof crypto)throw new Error("Import file with `if (!window.crypto) window.crypto = window.msCrypto` before importing Nano ID to fix IE 11 support");if("undefined"==typeof crypto)throw new Error("Your browser does not have secure random generator. If you don’t need unpredictable IDs, you can use nanoid/non-secure.");let eu=e=>crypto.getRandomValues(new Uint8Array(e)),tu=(e,t,n)=>{let r=(2<<Math.log(e.length-1)/Math.LN2)-1,o=-~(1.6*r*t/e.length);return()=>{let i="";for(;;){let a=n(o),u=o;for(;u--;)if(i+=e[a[u]&r]||"",i.length===t)return i}}};var nu={nanoid:(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t},customAlphabet:(e,t)=>tu(e,t,eu),customRandom:tu,urlAlphabet:Qa,random:eu},ru=function(e){if("number"!=typeof e||isNaN(e))throw new TypeError("Expected a number, got "+typeof e);var t=e<0,n=["B","KB","MB","GB","TB","PB","EB","ZB","YB"];if(t&&(e=-e),e<1)return(t?"-":"")+e+" B";var r=Math.min(Math.floor(Math.log(e)/Math.log(1024)),n.length-1);e=Number(e/Math.pow(1024,r));var o=n[r];return e>=10||e%1==0?(t?"-":"")+e.toFixed(0)+" "+o:(t?"-":"")+e.toFixed(1)+" "+o};function ou(e,t){this.text=e=e||"",this.hasWild=~e.indexOf("*"),this.separator=t,this.parts=e.split(t)}ou.prototype.match=function(e){var t,n,r=!0,o=this.parts,i=o.length;if("string"==typeof e||e instanceof String)if(this.hasWild||this.text==e){for(n=(e||"").split(this.separator),t=0;r&&t<i;t++)"*"!==o[t]&&(r=t<n.length&&o[t]===n[t]);r=r&&n}else r=!1;else if("function"==typeof e.splice)for(r=[],t=e.length;t--;)this.match(e[t])&&(r[r.length]=e[t]);else if("object"==typeof e)for(var a in r={},e)this.match(a)&&(r[a]=e[a]);return r};var iu=/[\/\+\.]/,au=function(e,t){function n(t){var n=function(e,t,n){var r=new ou(e,n||/[\/\.]/);return void 0!==t?r.match(t):r}(t,e,iu);return n&&n.length>=2}return t?n(t.split(";")[0]):n};var uu=0;function su(e){return"__private_"+uu+++"_"+e}var lu=su("publish");class cu{constructor(){Object.defineProperty(this,lu,{value:fu}),this.state={},this.callbacks=[]}getState(){return this.state}setState(e){const t={...this.state},n={...this.state,...e};this.state=n,function(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}(this,lu)[lu](t,n,e)}subscribe(e){return this.callbacks.push(e),()=>{this.callbacks.splice(this.callbacks.indexOf(e),1)}}}function fu(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this.callbacks.forEach((e=>{e(...t)}))}cu.VERSION="2.0.3";var du=function(e){const t=e.lastIndexOf(".");return-1===t||t===e.length-1?{name:e,extension:void 0}:{name:e.slice(0,t),extension:e.slice(t+1)}},pu={md:"text/markdown",markdown:"text/markdown",mp4:"video/mp4",mp3:"audio/mp3",svg:"image/svg+xml",jpg:"image/jpeg",png:"image/png",gif:"image/gif",heic:"image/heic",heif:"image/heif",yaml:"text/yaml",yml:"text/yaml",csv:"text/csv",tsv:"text/tab-separated-values",tab:"text/tab-separated-values",avi:"video/x-msvideo",mks:"video/x-matroska",mkv:"video/x-matroska",mov:"video/quicktime",doc:"application/msword",docm:"application/vnd.ms-word.document.macroenabled.12",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",dot:"application/msword",dotm:"application/vnd.ms-word.template.macroenabled.12",dotx:"application/vnd.openxmlformats-officedocument.wordprocessingml.template",xla:"application/vnd.ms-excel",xlam:"application/vnd.ms-excel.addin.macroenabled.12",xlc:"application/vnd.ms-excel",xlf:"application/x-xliff+xml",xlm:"application/vnd.ms-excel",xls:"application/vnd.ms-excel",xlsb:"application/vnd.ms-excel.sheet.binary.macroenabled.12",xlsm:"application/vnd.ms-excel.sheet.macroenabled.12",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xlt:"application/vnd.ms-excel",xltm:"application/vnd.ms-excel.template.macroenabled.12",xltx:"application/vnd.openxmlformats-officedocument.spreadsheetml.template",xlw:"application/vnd.ms-excel",txt:"text/plain",text:"text/plain",conf:"text/plain",log:"text/plain",pdf:"application/pdf",zip:"application/zip","7z":"application/x-7z-compressed",rar:"application/x-rar-compressed",tar:"application/x-tar",gz:"application/gzip",dmg:"application/x-apple-diskimage"};function hu(e){let t="";return e.replace(/[^A-Z0-9]/gi,(e=>(t+=`-${function(e){return e.charCodeAt(0).toString(32)}(e)}`,"/")))+t}var gu=function(e){if(null==e&&(e="undefined"!=typeof navigator?navigator.userAgent:null),!e)return!0;const t=/Edge\/(\d+\.\d+)/.exec(e);if(!t)return!0;const n=t[1];let[r,o]=n.split(".");return r=parseInt(r,10),o=parseInt(o,10),r<15||15===r&&o<15063||(r>18||18===r&&o>=18218)};function vu(e){return e<10?`0${e}`:e.toString()}var yu=function(){const e=new Date;return`${vu(e.getHours())}:${vu(e.getMinutes())}:${vu(e.getSeconds())}`};var mu={justErrorsLogger:{debug:()=>{},warn:()=>{},error:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.error(`[Uppy] [${yu()}]`,...t)}},debugLogger:{debug:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.debug(`[Uppy] [${yu()}]`,...t)},warn:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.warn(`[Uppy] [${yu()}]`,...t)},error:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.error(`[Uppy] [${yu()}]`,...t)}}},bu={strings:{addBulkFilesFailed:{0:"Failed to add %{smart_count} file due to an internal error",1:"Failed to add %{smart_count} files due to internal errors"},youCanOnlyUploadX:{0:"You can only upload %{smart_count} file",1:"You can only upload %{smart_count} files"},youHaveToAtLeastSelectX:{0:"You have to select at least %{smart_count} file",1:"You have to select at least %{smart_count} files"},exceedsSize:"%{file} exceeds maximum allowed size of %{size}",missingRequiredMetaField:"Missing required meta fields",missingRequiredMetaFieldOnFile:"Missing required meta fields in %{fileName}",inferiorSize:"This file is smaller than the allowed size of %{size}",youCanOnlyUploadFileTypes:"You can only upload: %{types}",noMoreFilesAllowed:"Cannot add more files",noDuplicates:"Cannot add the duplicate file '%{fileName}', it already exists",companionError:"Connection with Companion failed",authAborted:"Authentication aborted",companionUnauthorizeHint:"To unauthorize to your %{provider} account, please go to %{url}",failedToUpload:"Failed to upload %{file}",noInternetConnection:"No Internet connection",connectedToInternet:"Connected to the Internet",noFilesFound:"You have no files or folders here",selectX:{0:"Select %{smart_count}",1:"Select %{smart_count}"},allFilesFromFolderNamed:"All files from folder %{name}",openFolderNamed:"Open folder %{name}",cancel:"Cancel",logOut:"Log out",filter:"Filter",resetFilter:"Reset filter",loading:"Loading...",authenticateWithTitle:"Please authenticate with %{pluginName} to select files",authenticateWith:"Connect to %{pluginName}",signInWithGoogle:"Sign in with Google",searchImages:"Search for images",enterTextToSearch:"Enter text to search for images",backToSearch:"Back to Search",emptyFolderAdded:"No files were added from empty folder",folderAlreadyAdded:'The folder "%{folder}" was already added',folderAdded:{0:"Added %{smart_count} file from %{folder}",1:"Added %{smart_count} files from %{folder}"}}},wu=nu;let Eu,Du;function Cu(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var xu=0;function Su(e){return"__private_"+xu+++"_"+e}const{nanoid:Au}=wu,{justErrorsLogger:Ou,debugLogger:ku}=mu;class Bu extends Error{constructor(){super(...arguments),this.isRestriction=!0}}"undefined"==typeof AggregateError&&(globalThis.AggregateError=class extends Error{constructor(e,t){super(t),this.errors=e}});class Fu extends AggregateError{constructor(){super(...arguments),this.isRestriction=!0}}var Tu=Su("plugins"),_u=Su("storeUnsubscribe"),Pu=Su("emitter"),ju=Su("preProcessors"),Nu=Su("uploaders"),Iu=Su("postProcessors"),Lu=Su("checkRestrictions"),Ru=Su("checkMinNumberOfFiles"),Mu=Su("checkRequiredMetaFieldsOnFile"),zu=Su("checkRequiredMetaFields"),$u=Su("showOrLogErrorAndThrow"),Hu=Su("assertNewUploadAllowed"),Vu=Su("checkAndCreateFileStateObject"),Uu=Su("startIfAutoProceed"),Wu=Su("addListeners"),qu=Su("updateOnlineStatus"),Gu=Su("createUpload"),Ku=Su("getUpload"),Yu=Su("removeUpload"),Xu=Su("runUpload");Eu=Symbol.for("uppy test: getPlugins"),Du=Symbol.for("uppy test: createUpload");class Zu{constructor(e){Object.defineProperty(this,Xu,{value:cs}),Object.defineProperty(this,Yu,{value:ls}),Object.defineProperty(this,Ku,{value:ss}),Object.defineProperty(this,Gu,{value:us}),Object.defineProperty(this,Wu,{value:as}),Object.defineProperty(this,Uu,{value:is}),Object.defineProperty(this,Vu,{value:os}),Object.defineProperty(this,Hu,{value:rs}),Object.defineProperty(this,$u,{value:ns}),Object.defineProperty(this,zu,{value:ts}),Object.defineProperty(this,Mu,{value:es}),Object.defineProperty(this,Ru,{value:Qu}),Object.defineProperty(this,Lu,{value:Ju}),Object.defineProperty(this,Tu,{writable:!0,value:Object.create(null)}),Object.defineProperty(this,_u,{writable:!0,value:void 0}),Object.defineProperty(this,Pu,{writable:!0,value:Za()}),Object.defineProperty(this,ju,{writable:!0,value:new Set}),Object.defineProperty(this,Nu,{writable:!0,value:new Set}),Object.defineProperty(this,Iu,{writable:!0,value:new Set}),Object.defineProperty(this,qu,{writable:!0,value:this.updateOnlineStatus.bind(this)}),this.defaultLocale=bu;const t={id:"uppy",autoProceed:!1,allowMultipleUploads:!0,allowMultipleUploadBatches:!0,debug:!1,restrictions:{maxFileSize:null,minFileSize:null,maxTotalFileSize:null,maxNumberOfFiles:null,minNumberOfFiles:null,allowedFileTypes:null,requiredMetaFields:[]},meta:{},onBeforeFileAdded:e=>e,onBeforeUpload:e=>e,store:new cu,logger:Ou,infoTimeout:5e3};if(this.opts={...t,...e,restrictions:{...t.restrictions,...e&&e.restrictions}},e&&e.logger&&e.debug?this.log("You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.","warning"):e&&e.debug&&(this.opts.logger=ku),this.log(`Using Core v${this.constructor.VERSION}`),this.opts.restrictions.allowedFileTypes&&null!==this.opts.restrictions.allowedFileTypes&&!Array.isArray(this.opts.restrictions.allowedFileTypes))throw new TypeError("`restrictions.allowedFileTypes` must be an array");this.i18nInit(),this.calculateProgress=Wo(this.calculateProgress.bind(this),500,{leading:!0,trailing:!0}),this.store=this.opts.store,this.setState({plugins:{},files:{},currentUploads:{},allowNewUpload:!0,capabilities:{uploadProgress:gu(),individualCancellation:!0,resumableUploads:!1},totalProgress:0,meta:{...this.opts.meta},info:[],recoveredState:null}),Cu(this,_u)[_u]=this.store.subscribe(((e,t,n)=>{this.emit("state-update",e,t,n),this.updateAll(t)})),this.opts.debug&&"undefined"!=typeof window&&(window[this.opts.id]=this),Cu(this,Wu)[Wu]()}emit(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];Cu(this,Pu)[Pu].emit(e,...n)}on(e,t){return Cu(this,Pu)[Pu].on(e,t),this}once(e,t){return Cu(this,Pu)[Pu].once(e,t),this}off(e,t){return Cu(this,Pu)[Pu].off(e,t),this}updateAll(e){this.iteratePlugins((t=>{t.update(e)}))}setState(e){this.store.setState(e)}getState(){return this.store.getState()}get state(){return this.getState()}setFileState(e,t){if(!this.getState().files[e])throw new Error(`Can’t set state for ${e} (the file could have been removed)`);this.setState({files:{...this.getState().files,[e]:{...this.getState().files[e],...t}}})}i18nInit(){const e=new Ya([this.defaultLocale,this.opts.locale]);this.i18n=e.translate.bind(e),this.i18nArray=e.translateArray.bind(e),this.locale=e.locale}setOptions(e){this.opts={...this.opts,...e,restrictions:{...this.opts.restrictions,...e&&e.restrictions}},e.meta&&this.setMeta(e.meta),this.i18nInit(),e.locale&&this.iteratePlugins((e=>{e.setOptions()})),this.setState()}resetProgress(){const e={percentage:0,bytesUploaded:0,uploadComplete:!1,uploadStarted:null},t={...this.getState().files},n={};Object.keys(t).forEach((r=>{const o={...t[r]};o.progress={...o.progress,...e},n[r]=o})),this.setState({files:n,totalProgress:0}),this.emit("reset-progress")}addPreProcessor(e){Cu(this,ju)[ju].add(e)}removePreProcessor(e){return Cu(this,ju)[ju].delete(e)}addPostProcessor(e){Cu(this,Iu)[Iu].add(e)}removePostProcessor(e){return Cu(this,Iu)[Iu].delete(e)}addUploader(e){Cu(this,Nu)[Nu].add(e)}removeUploader(e){return Cu(this,Nu)[Nu].delete(e)}setMeta(e){const t={...this.getState().meta,...e},n={...this.getState().files};Object.keys(n).forEach((t=>{n[t]={...n[t],meta:{...n[t].meta,...e}}})),this.log("Adding metadata:"),this.log(e),this.setState({meta:t,files:n})}setFileMeta(e,t){const n={...this.getState().files};if(!n[e])return void this.log("Was trying to set metadata for a file that has been removed: ",e);const r={...n[e].meta,...t};n[e]={...n[e],meta:r},this.setState({files:n})}getFile(e){return this.getState().files[e]}getFiles(){const{files:e}=this.getState();return Object.values(e)}getObjectOfFilesPerState(){const{files:e,totalProgress:t,error:n}=this.getState(),r=Object.values(e),o=r.filter((e=>{let{progress:t}=e;return!t.uploadComplete&&t.uploadStarted})),i=r.filter((e=>!e.progress.uploadStarted)),a=r.filter((e=>e.progress.uploadStarted||e.progress.preprocess||e.progress.postprocess)),u=r.filter((e=>e.progress.uploadStarted)),s=r.filter((e=>e.isPaused)),l=r.filter((e=>e.progress.uploadComplete)),c=r.filter((e=>e.error)),f=o.filter((e=>!e.isPaused)),d=r.filter((e=>e.progress.preprocess||e.progress.postprocess));return{newFiles:i,startedFiles:a,uploadStartedFiles:u,pausedFiles:s,completeFiles:l,erroredFiles:c,inProgressFiles:o,inProgressNotPausedFiles:f,processingFiles:d,isUploadStarted:u.length>0,isAllComplete:100===t&&l.length===r.length&&0===d.length,isAllErrored:!!n&&c.length===r.length,isAllPaused:0!==o.length&&s.length===o.length,isUploadInProgress:o.length>0,isSomeGhost:r.some((e=>e.isGhost))}}validateRestrictions(e,t){try{return Cu(this,Lu)[Lu](e,t),{result:!0}}catch(n){return{result:!1,reason:n.message}}}checkIfFileAlreadyExists(e){const{files:t}=this.getState();return!(!t[e]||t[e].isGhost)}addFile(e){Cu(this,Hu)[Hu](e);const{files:t}=this.getState();let n=Cu(this,Vu)[Vu](t,e);return t[n.id]&&t[n.id].isGhost&&(n={...t[n.id],data:e.data,isGhost:!1},this.log(`Replaced the blob in the restored ghost file: ${n.name}, ${n.id}`)),this.setState({files:{...t,[n.id]:n}}),this.emit("file-added",n),this.emit("files-added",[n]),this.log(`Added file: ${n.name}, ${n.id}, mime type: ${n.type}`),Cu(this,Uu)[Uu](),n.id}addFiles(e){Cu(this,Hu)[Hu]();const t={...this.getState().files},n=[],r=[];for(let i=0;i<e.length;i++)try{let r=Cu(this,Vu)[Vu](t,e[i]);t[r.id]&&t[r.id].isGhost&&(r={...t[r.id],data:e[i].data,isGhost:!1},this.log(`Replaced blob in a ghost file: ${r.name}, ${r.id}`)),t[r.id]=r,n.push(r)}catch(o){o.isRestriction||r.push(o)}if(this.setState({files:t}),n.forEach((e=>{this.emit("file-added",e)})),this.emit("files-added",n),n.length>5?this.log(`Added batch of ${n.length} files`):Object.keys(n).forEach((e=>{this.log(`Added file: ${n[e].name}\n id: ${n[e].id}\n type: ${n[e].type}`)})),n.length>0&&Cu(this,Uu)[Uu](),r.length>0){let e="Multiple errors occurred while adding files:\n";if(r.forEach((t=>{e+=`\n * ${t.message}`})),this.info({message:this.i18n("addBulkFilesFailed",{smart_count:r.length}),details:e},"error",this.opts.infoTimeout),"function"==typeof AggregateError)throw new AggregateError(r,e);{const t=new Error(e);throw t.errors=r,t}}}removeFiles(e,t){const{files:n,currentUploads:r}=this.getState(),o={...n},i={...r},a=Object.create(null);function u(e){return void 0===a[e]}e.forEach((e=>{n[e]&&(a[e]=n[e],delete o[e])})),Object.keys(i).forEach((e=>{const t=r[e].fileIDs.filter(u);0!==t.length?i[e]={...r[e],fileIDs:t}:delete i[e]}));const s={currentUploads:i,files:o};0===Object.keys(o).length&&(s.allowNewUpload=!0,s.error=null,s.recoveredState=null),this.setState(s),this.calculateTotalProgress();const l=Object.keys(a);l.forEach((e=>{this.emit("file-removed",a[e],t)})),l.length>5?this.log(`Removed ${l.length} files`):this.log(`Removed files: ${l.join(", ")}`)}removeFile(e,t){void 0===t&&(t=null),this.removeFiles([e],t)}pauseResume(e){if(!this.getState().capabilities.resumableUploads||this.getFile(e).uploadComplete)return;const t=!(this.getFile(e).isPaused||!1);return this.setFileState(e,{isPaused:t}),this.emit("upload-pause",e,t),t}pauseAll(){const e={...this.getState().files};Object.keys(e).filter((t=>!e[t].progress.uploadComplete&&e[t].progress.uploadStarted)).forEach((t=>{const n={...e[t],isPaused:!0};e[t]=n})),this.setState({files:e}),this.emit("pause-all")}resumeAll(){const e={...this.getState().files};Object.keys(e).filter((t=>!e[t].progress.uploadComplete&&e[t].progress.uploadStarted)).forEach((t=>{const n={...e[t],isPaused:!1,error:null};e[t]=n})),this.setState({files:e}),this.emit("resume-all")}retryAll(){const e={...this.getState().files},t=Object.keys(e).filter((t=>e[t].error));if(t.forEach((t=>{const n={...e[t],isPaused:!1,error:null};e[t]=n})),this.setState({files:e,error:null}),this.emit("retry-all",t),0===t.length)return Promise.resolve({successful:[],failed:[]});const n=Cu(this,Gu)[Gu](t,{forceAllowNewUpload:!0});return Cu(this,Xu)[Xu](n)}cancelAll(){this.emit("cancel-all");const{files:e}=this.getState(),t=Object.keys(e);t.length&&this.removeFiles(t,"cancel-all"),this.setState({totalProgress:0,error:null,recoveredState:null})}retryUpload(e){this.setFileState(e,{error:null,isPaused:!1}),this.emit("upload-retry",e);const t=Cu(this,Gu)[Gu]([e],{forceAllowNewUpload:!0});return Cu(this,Xu)[Xu](t)}reset(){this.cancelAll()}logout(){this.iteratePlugins((e=>{e.provider&&e.provider.logout&&e.provider.logout()}))}calculateProgress(e,t){if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const n=Number.isFinite(t.bytesTotal)&&t.bytesTotal>0;this.setFileState(e.id,{progress:{...this.getFile(e.id).progress,bytesUploaded:t.bytesUploaded,bytesTotal:t.bytesTotal,percentage:n?Math.round(t.bytesUploaded/t.bytesTotal*100):0}}),this.calculateTotalProgress()}calculateTotalProgress(){const e=this.getFiles().filter((e=>e.progress.uploadStarted||e.progress.preprocess||e.progress.postprocess));if(0===e.length)return this.emit("progress",0),void this.setState({totalProgress:0});const t=e.filter((e=>null!=e.progress.bytesTotal)),n=e.filter((e=>null==e.progress.bytesTotal));if(0===t.length){const t=100*e.length,r=n.reduce(((e,t)=>e+t.progress.percentage),0),o=Math.round(r/t*100);return void this.setState({totalProgress:o})}let r=t.reduce(((e,t)=>e+t.progress.bytesTotal),0);const o=r/t.length;r+=o*n.length;let i=0;t.forEach((e=>{i+=e.progress.bytesUploaded})),n.forEach((e=>{i+=o*(e.progress.percentage||0)/100}));let a=0===r?0:Math.round(i/r*100);a>100&&(a=100),this.setState({totalProgress:a}),this.emit("progress",a)}updateOnlineStatus(){void 0===window.navigator.onLine||window.navigator.onLine?(this.emit("is-online"),this.wasOffline&&(this.emit("back-online"),this.info(this.i18n("connectedToInternet"),"success",3e3),this.wasOffline=!1)):(this.emit("is-offline"),this.info(this.i18n("noInternetConnection"),"error",0),this.wasOffline=!0)}getID(){return this.opts.id}use(e,t){if("function"!=typeof e){throw new TypeError(`Expected a plugin class, but got ${null===e?"null":typeof e}. Please verify that the plugin was imported and spelled correctly.`)}const n=new e(this,t),r=n.id;if(!r)throw new Error("Your plugin must have an id");if(!n.type)throw new Error("Your plugin must have a type");const o=this.getPlugin(r);if(o){const e=`Already found a plugin named '${o.id}'. Tried to use: '${r}'.\nUppy plugins must have unique \`id\` options. See https://uppy.io/docs/plugins/#id.`;throw new Error(e)}return e.VERSION&&this.log(`Using ${r} v${e.VERSION}`),n.type in Cu(this,Tu)[Tu]?Cu(this,Tu)[Tu][n.type].push(n):Cu(this,Tu)[Tu][n.type]=[n],n.install(),this}getPlugin(e){for(const t of Object.values(Cu(this,Tu)[Tu])){const n=t.find((t=>t.id===e));if(null!=n)return n}}[Eu](e){return Cu(this,Tu)[Tu][e]}iteratePlugins(e){Object.values(Cu(this,Tu)[Tu]).flat(1).forEach(e)}removePlugin(e){this.log(`Removing plugin ${e.id}`),this.emit("plugin-remove",e),e.uninstall&&e.uninstall();const t=Cu(this,Tu)[Tu][e.type],n=t.findIndex((t=>t.id===e.id));-1!==n&&t.splice(n,1);const r={plugins:{...this.getState().plugins,[e.id]:void 0}};this.setState(r)}close(){this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`),this.reset(),Cu(this,_u)[_u](),this.iteratePlugins((e=>{this.removePlugin(e)})),"undefined"!=typeof window&&window.removeEventListener&&(window.removeEventListener("online",Cu(this,qu)[qu]),window.removeEventListener("offline",Cu(this,qu)[qu]))}hideInfo(){const{info:e}=this.getState();this.setState({info:e.slice(1)}),this.emit("info-hidden")}info(e,t,n){void 0===t&&(t="info"),void 0===n&&(n=3e3);const r="object"==typeof e;this.setState({info:[...this.getState().info,{type:t,message:r?e.message:e,details:r?e.details:null}]}),setTimeout((()=>this.hideInfo()),n),this.emit("info-visible")}log(e,t){const{logger:n}=this.opts;switch(t){case"error":n.error(e);break;case"warning":n.warn(e);break;default:n.debug(e)}}restore(e){return this.log(`Core: attempting to restore upload "${e}"`),this.getState().currentUploads[e]?Cu(this,Xu)[Xu](e):(Cu(this,Yu)[Yu](e),Promise.reject(new Error("Nonexistent upload")))}[Du](){return Cu(this,Gu)[Gu](...arguments)}addResultData(e,t){if(!Cu(this,Ku)[Ku](e))return void this.log(`Not setting result for an upload that has been removed: ${e}`);const{currentUploads:n}=this.getState(),r={...n[e],result:{...n[e].result,...t}};this.setState({currentUploads:{...n,[e]:r}})}upload(){var e;null!=(e=Cu(this,Tu)[Tu].uploader)&&e.length||this.log("No uploader type plugins are used","warning");let{files:t}=this.getState();const n=this.opts.onBeforeUpload(t);return!1===n?Promise.reject(new Error("Not starting the upload because onBeforeUpload returned false")):(n&&"object"==typeof n&&(t=n,this.setState({files:t})),Promise.resolve().then((()=>{Cu(this,Ru)[Ru](t),Cu(this,zu)[zu](t)})).catch((e=>{Cu(this,$u)[$u](e)})).then((()=>{const{currentUploads:e}=this.getState(),n=Object.values(e).flatMap((e=>e.fileIDs)),r=[];Object.keys(t).forEach((e=>{const t=this.getFile(e);t.progress.uploadStarted||-1!==n.indexOf(e)||r.push(t.id)}));const o=Cu(this,Gu)[Gu](r);return Cu(this,Xu)[Xu](o)})).catch((e=>{Cu(this,$u)[$u](e,{showInformer:!1})})))}}function Ju(e,t){void 0===t&&(t=this.getFiles());const{maxFileSize:n,minFileSize:r,maxTotalFileSize:o,maxNumberOfFiles:i,allowedFileTypes:a}=this.opts.restrictions;if(i&&t.length+1>i)throw new Bu(`${this.i18n("youCanOnlyUploadX",{smart_count:i})}`);if(a){if(!a.some((t=>t.indexOf("/")>-1?!!e.type&&au(e.type.replace(/;.*?$/,""),t):!("."!==t[0]||!e.extension)&&e.extension.toLowerCase()===t.substr(1).toLowerCase()))){const e=a.join(", ");throw new Bu(this.i18n("youCanOnlyUploadFileTypes",{types:e}))}}if(o&&null!=e.size){let n=0;if(n+=e.size,t.forEach((e=>{n+=e.size})),n>o)throw new Bu(this.i18n("exceedsSize",{size:ru(o),file:e.name}))}if(n&&null!=e.size&&e.size>n)throw new Bu(this.i18n("exceedsSize",{size:ru(n),file:e.name}));if(r&&null!=e.size&&e.size<r)throw new Bu(this.i18n("inferiorSize",{size:ru(r)}))}function Qu(e){const{minNumberOfFiles:t}=this.opts.restrictions;if(Object.keys(e).length<t)throw new Bu(`${this.i18n("youHaveToAtLeastSelectX",{smart_count:t})}`)}function es(e){const{requiredMetaFields:t}=this.opts.restrictions,{hasOwnProperty:n}=Object.prototype,r=[],o=[];for(let i=0;i<t.length;i++)if(!n.call(e.meta,t[i])||""===e.meta[t[i]]){const n=new Bu(`${this.i18n("missingRequiredMetaFieldOnFile",{fileName:e.name})}`);r.push(n),o.push(t[i]),Cu(this,$u)[$u](n,{file:e,showInformer:!1,throwErr:!1})}return this.setFileState(e.id,{missingRequiredMetaFields:o}),r}function ts(e){const t=Object.keys(e).flatMap((e=>{const t=this.getFile(e);return Cu(this,Mu)[Mu](t)}));if(t.length)throw new Fu(t,`${this.i18n("missingRequiredMetaField")}`)}function ns(e,t){let{showInformer:n=!0,file:r=null,throwErr:o=!0}=void 0===t?{}:t;const i="object"==typeof e?e.message:e,a="object"==typeof e&&e.details?e.details:"";let u=i;if(a&&(u+=` ${a}`),e.isRestriction?(this.log(u),this.emit("restriction-failed",r,e)):this.log(u,"error"),n&&this.info({message:i,details:a},"error",this.opts.infoTimeout),o)throw"object"==typeof e?e:new Error(e)}function rs(e){const{allowNewUpload:t}=this.getState();!1===t&&Cu(this,$u)[$u](new Bu(this.i18n("noMoreFilesAllowed")),{file:e})}function os(e,t){const n=function(e){var t;if(e.type)return e.type;const n=e.name?null==(t=du(e.name).extension)?void 0:t.toLowerCase():null;return n&&n in pu?pu[n]:"application/octet-stream"}(t),r=function(e,t){return t.name?t.name:"image"===e.split("/")[0]?`${e.split("/")[0]}.${e.split("/")[1]}`:"noname"}(n,t),o=du(r).extension,i=Boolean(t.isRemote),a=function(e){let t="uppy";return"string"==typeof e.name&&(t+=`-${hu(e.name.toLowerCase())}`),void 0!==e.type&&(t+=`-${e.type}`),e.meta&&"string"==typeof e.meta.relativePath&&(t+=`-${hu(e.meta.relativePath.toLowerCase())}`),void 0!==e.data.size&&(t+=`-${e.data.size}`),void 0!==e.data.lastModified&&(t+=`-${e.data.lastModified}`),t}({...t,type:n});if(this.checkIfFileAlreadyExists(a)){const e=new Bu(this.i18n("noDuplicates",{fileName:r}));Cu(this,$u)[$u](e,{file:t})}const u=t.meta||{};u.name=r,u.type=n;const s=Number.isFinite(t.data.size)?t.data.size:null;let l={source:t.source||"",id:a,name:r,extension:o||"",meta:{...this.getState().meta,...u},type:n,data:t.data,progress:{percentage:0,bytesUploaded:0,bytesTotal:s,uploadComplete:!1,uploadStarted:null},size:s,isRemote:i,remote:t.remote||"",preview:t.preview};const c=this.opts.onBeforeFileAdded(l,e);!1===c?Cu(this,$u)[$u](new Bu("Cannot add the file because onBeforeFileAdded returned false."),{showInformer:!1,fileDescriptor:t}):"object"==typeof c&&null!==c&&(l=c);try{const t=Object.keys(e).map((t=>e[t]));Cu(this,Lu)[Lu](l,t)}catch(f){Cu(this,$u)[$u](f,{file:l})}return l}function is(){this.opts.autoProceed&&!this.scheduledAutoProceed&&(this.scheduledAutoProceed=setTimeout((()=>{this.scheduledAutoProceed=null,this.upload().catch((e=>{e.isRestriction||this.log(e.stack||e.message||e)}))}),4))}function as(){const e=(e,t,n)=>{let r=e.message||"Unknown error";e.details&&(r+=` ${e.details}`),this.setState({error:r}),null!=t&&t.id in this.getState().files&&this.setFileState(t.id,{error:r,response:n})};this.on("error",e),this.on("upload-error",((t,n,r)=>{if(e(n,t,r),"object"==typeof n&&n.message){const e=new Error(n.message);e.details=n.message,n.details&&(e.details+=` ${n.details}`),e.message=this.i18n("failedToUpload",{file:t.name}),Cu(this,$u)[$u](e,{throwErr:!1})}else Cu(this,$u)[$u](n,{throwErr:!1})})),this.on("upload",(()=>{this.setState({error:null})})),this.on("upload-started",(e=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{uploadStarted:Date.now(),uploadComplete:!1,percentage:0,bytesUploaded:0,bytesTotal:e.size}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("upload-progress",this.calculateProgress),this.on("upload-success",((e,t)=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const n=this.getFile(e.id).progress;this.setFileState(e.id,{progress:{...n,postprocess:Cu(this,Iu)[Iu].size>0?{mode:"indeterminate"}:null,uploadComplete:!0,percentage:100,bytesUploaded:n.bytesTotal},response:t,uploadURL:t.uploadURL,isPaused:!1}),null==e.size&&this.setFileState(e.id,{size:t.bytesUploaded||n.bytesTotal}),this.calculateTotalProgress()})),this.on("preprocess-progress",((e,t)=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{...this.getFile(e.id).progress,preprocess:t}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("preprocess-complete",(e=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const t={...this.getState().files};t[e.id]={...t[e.id],progress:{...t[e.id].progress}},delete t[e.id].progress.preprocess,this.setState({files:t})})),this.on("postprocess-progress",((e,t)=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{...this.getState().files[e.id].progress,postprocess:t}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("postprocess-complete",(e=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const t={...this.getState().files};t[e.id]={...t[e.id],progress:{...t[e.id].progress}},delete t[e.id].progress.postprocess,this.setState({files:t})})),this.on("restored",(()=>{this.calculateTotalProgress()})),this.on("dashboard:file-edit-complete",(e=>{e&&Cu(this,Mu)[Mu](e)})),"undefined"!=typeof window&&window.addEventListener&&(window.addEventListener("online",Cu(this,qu)[qu]),window.addEventListener("offline",Cu(this,qu)[qu]),setTimeout(Cu(this,qu)[qu],3e3))}function us(e,t){void 0===t&&(t={});const{forceAllowNewUpload:n=!1}=t,{allowNewUpload:r,currentUploads:o}=this.getState();if(!r&&!n)throw new Error("Cannot create a new upload: already uploading.");const i=Au();return this.emit("upload",{id:i,fileIDs:e}),this.setState({allowNewUpload:!1!==this.opts.allowMultipleUploadBatches&&!1!==this.opts.allowMultipleUploads,currentUploads:{...o,[i]:{fileIDs:e,step:0,result:{}}}}),i}function ss(e){const{currentUploads:t}=this.getState();return t[e]}function ls(e){const t={...this.getState().currentUploads};delete t[e],this.setState({currentUploads:t})}async function cs(e){let{currentUploads:t}=this.getState(),n=t[e];const r=n.step||0,o=[...Cu(this,ju)[ju],...Cu(this,Nu)[Nu],...Cu(this,Iu)[Iu]];try{for(let i=r;i<o.length&&n;i++){const r=o[i],a={...n,step:i};this.setState({currentUploads:{...t,[e]:a}}),await r(a.fileIDs,e),t=this.getState().currentUploads,n=t[e]}}catch(a){throw this.emit("error",a),Cu(this,Yu)[Yu](e),a}if(n){n.fileIDs.forEach((e=>{const t=this.getFile(e);t&&t.progress.postprocess&&this.emit("postprocess-complete",t)}));const r=n.fileIDs.map((e=>this.getFile(e))),o=r.filter((e=>!e.error)),i=r.filter((e=>e.error));await this.addResultData(e,{successful:o,failed:i,uploadID:e}),t=this.getState().currentUploads,n=t[e]}let i;return n&&(i=n.result,this.emit("complete",i),Cu(this,Yu)[Yu](e)),null==i&&this.log(`Not setting result for an upload that has been removed: ${e}`),i}Zu.VERSION="2.1.3";var fs=Zu,ds=un((function(e,t){var n,r,o,i,a,u,s,l,c={},f=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function p(e,t){for(var n in t)e[n]=t[n];return e}function h(e){var t=e.parentNode;t&&t.removeChild(e)}function g(e,t,r){var o,i,a,u={};for(a in t)"key"==a?o=t[a]:"ref"==a?i=t[a]:u[a]=t[a];if(arguments.length>2&&(u.children=arguments.length>3?n.call(arguments,2):r),"function"==typeof e&&null!=e.defaultProps)for(a in e.defaultProps)void 0===u[a]&&(u[a]=e.defaultProps[a]);return v(e,u,o,i,null)}function v(e,t,n,i,a){var u={type:e,props:t,key:n,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==a?++o:a};return null==a&&null!=r.vnode&&r.vnode(u),u}function y(e){return e.children}function m(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function w(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return w(e)}}function E(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!D.__r++||s!==r.debounceRendering)&&((s=r.debounceRendering)||u)(D)}function D(){for(var e;D.__r=a.length;)e=a.sort((function(e,t){return e.__v.__b-t.__v.__b})),a=[],e.some((function(e){var t,n,r,o,i,a;e.__d&&(i=(o=(t=e).__v).__e,(a=t.__P)&&(n=[],(r=p({},o)).__v=o.__v+1,F(a,o,r,t.__n,void 0!==a.ownerSVGElement,null!=o.__h?[i]:null,n,null==i?b(o):i,o.__h),T(n,o),o.__e!=i&&w(o)))}))}function C(e,t,n,r,o,i,a,u,s,l){var d,p,h,g,m,w,E,D=r&&r.__k||f,C=D.length;for(n.__k=[],d=0;d<t.length;d++)if(null!=(g=n.__k[d]=null==(g=t[d])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?v(null,g,null,null,g):Array.isArray(g)?v(y,{children:g},null,null,null):g.__b>0?v(g.type,g.props,g.key,null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(h=D[d])||h&&g.key==h.key&&g.type===h.type)D[d]=void 0;else for(p=0;p<C;p++){if((h=D[p])&&g.key==h.key&&g.type===h.type){D[p]=void 0;break}h=null}F(e,g,h=h||c,o,i,a,u,s,l),m=g.__e,(p=g.ref)&&h.ref!=p&&(E||(E=[]),h.ref&&E.push(h.ref,null,g),E.push(p,g.__c||m,g)),null!=m?(null==w&&(w=m),"function"==typeof g.type&&g.__k===h.__k?g.__d=s=x(g,s,e):s=S(e,g,h,D,m,s),"function"==typeof n.type&&(n.__d=s)):s&&h.__e==s&&s.parentNode!=e&&(s=b(h))}for(n.__e=w,d=C;d--;)null!=D[d]&&("function"==typeof n.type&&null!=D[d].__e&&D[d].__e==n.__d&&(n.__d=b(r,d+1)),P(D[d],D[d]));if(E)for(d=0;d<E.length;d++)_(E[d],E[++d],E[++d])}function x(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?x(r,t,n):S(n,r,r,o,r.__e,t));return t}function S(e,t,n,r,o,i){var a,u,s;if(void 0!==t.__d)a=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),a=null;else{for(u=i,s=0;(u=u.nextSibling)&&s<r.length;s+=2)if(u==o)break e;e.insertBefore(o,i),a=i}return void 0!==a?a:o.nextSibling}function A(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||d.test(t)?n:n+"px"}function O(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||A(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||A(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?B:k,i):e.removeEventListener(t,i?B:k,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(a){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function k(e){this.l[e.type+!1](r.event?r.event(e):e)}function B(e){this.l[e.type+!0](r.event?r.event(e):e)}function F(e,t,o,i,a,u,s,l,f){var d,g,v,w,E,D,x,S,A,k,B,F=t.type;if(void 0!==t.constructor)return null;null!=o.__h&&(f=o.__h,l=t.__e=o.__e,t.__h=null,u=[l]),(d=r.__b)&&d(t);try{e:if("function"==typeof F){if(S=t.props,A=(d=F.contextType)&&i[d.__c],k=d?A?A.props.value:d.__:i,o.__c?x=(g=t.__c=o.__c).__=g.__E:("prototype"in F&&F.prototype.render?t.__c=g=new F(S,k):(t.__c=g=new m(S,k),g.constructor=F,g.render=j),A&&A.sub(g),g.props=S,g.state||(g.state={}),g.context=k,g.__n=i,v=g.__d=!0,g.__h=[]),null==g.__s&&(g.__s=g.state),null!=F.getDerivedStateFromProps&&(g.__s==g.state&&(g.__s=p({},g.__s)),p(g.__s,F.getDerivedStateFromProps(S,g.__s))),w=g.props,E=g.state,v)null==F.getDerivedStateFromProps&&null!=g.componentWillMount&&g.componentWillMount(),null!=g.componentDidMount&&g.__h.push(g.componentDidMount);else{if(null==F.getDerivedStateFromProps&&S!==w&&null!=g.componentWillReceiveProps&&g.componentWillReceiveProps(S,k),!g.__e&&null!=g.shouldComponentUpdate&&!1===g.shouldComponentUpdate(S,g.__s,k)||t.__v===o.__v){g.props=S,g.state=g.__s,t.__v!==o.__v&&(g.__d=!1),g.__v=t,t.__e=o.__e,t.__k=o.__k,t.__k.forEach((function(e){e&&(e.__=t)})),g.__h.length&&s.push(g);break e}null!=g.componentWillUpdate&&g.componentWillUpdate(S,g.__s,k),null!=g.componentDidUpdate&&g.__h.push((function(){g.componentDidUpdate(w,E,D)}))}g.context=k,g.props=S,g.state=g.__s,(d=r.__r)&&d(t),g.__d=!1,g.__v=t,g.__P=e,d=g.render(g.props,g.state,g.context),g.state=g.__s,null!=g.getChildContext&&(i=p(p({},i),g.getChildContext())),v||null==g.getSnapshotBeforeUpdate||(D=g.getSnapshotBeforeUpdate(w,E)),B=null!=d&&d.type===y&&null==d.key?d.props.children:d,C(e,Array.isArray(B)?B:[B],t,o,i,a,u,s,l,f),g.base=t.__e,t.__h=null,g.__h.length&&s.push(g),x&&(g.__E=g.__=null),g.__e=!1}else null==u&&t.__v===o.__v?(t.__k=o.__k,t.__e=o.__e):t.__e=function(e,t,r,o,i,a,u,s){var l,f,d,p=r.props,g=t.props,v=t.type,y=0;if("svg"===v&&(i=!0),null!=a)for(;y<a.length;y++)if((l=a[y])&&"setAttribute"in l==!!v&&(v?l.localName===v:3===l.nodeType)){e=l,a[y]=null;break}if(null==e){if(null===v)return document.createTextNode(g);e=i?document.createElementNS("http://www.w3.org/2000/svg",v):document.createElement(v,g.is&&g),a=null,s=!1}if(null===v)p===g||s&&e.data===g||(e.data=g);else{if(a=a&&n.call(e.childNodes),f=(p=r.props||c).dangerouslySetInnerHTML,d=g.dangerouslySetInnerHTML,!s){if(null!=a)for(p={},y=0;y<e.attributes.length;y++)p[e.attributes[y].name]=e.attributes[y].value;(d||f)&&(d&&(f&&d.__html==f.__html||d.__html===e.innerHTML)||(e.innerHTML=d&&d.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||O(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||O(e,i,t[i],n[i],r)}(e,g,p,i,s),d)t.__k=[];else if(y=t.props.children,C(e,Array.isArray(y)?y:[y],t,r,o,i&&"foreignObject"!==v,a,u,a?a[0]:r.__k&&b(r,0),s),null!=a)for(y=a.length;y--;)null!=a[y]&&h(a[y]);s||("value"in g&&void 0!==(y=g.value)&&(y!==p.value||y!==e.value||"progress"===v&&!y)&&O(e,"value",y,p.value,!1),"checked"in g&&void 0!==(y=g.checked)&&y!==e.checked&&O(e,"checked",y,p.checked,!1))}return e}(o.__e,t,o,i,a,u,s,f);(d=r.diffed)&&d(t)}catch(T){t.__v=null,(f||null!=u)&&(t.__e=l,t.__h=!!f,u[u.indexOf(l)]=null),r.__e(T,t,o)}}function T(e,t){r.__c&&r.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(n){r.__e(n,t.__v)}}))}function _(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(o){r.__e(o,n)}}function P(e,t,n){var o,i;if(r.unmount&&r.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||_(o,null,t)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(a){r.__e(a,t)}o.base=o.__P=null}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&P(o[i],t,"function"!=typeof e.type);n||null==e.__e||h(e.__e),e.__e=e.__d=void 0}function j(e,t,n){return this.constructor(e,n)}function N(e,t,o){var i,a,u;r.__&&r.__(e,t),a=(i="function"==typeof o)?null:o&&o.__k||t.__k,u=[],F(t,e=(!i&&o||t).__k=g(y,null,[e]),a||c,c,void 0!==t.ownerSVGElement,!i&&o?[o]:a?null:t.firstChild?n.call(t.childNodes):null,u,!i&&o?o:a?a.__e:t.firstChild,i),T(u,e)}n=f.slice,r={__e:function(e,t){for(var n,r,o;t=t.__;)if((n=t.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(e)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(e),o=n.__d),o)return n.__E=n}catch(i){e=i}throw e}},o=0,i=function(e){return null!=e&&void 0===e.constructor},m.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(p({},n),this.props)),e&&p(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),E(this))},m.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),E(this))},m.prototype.render=y,a=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,D.__r=0,l=0,t.Component=m,t.Fragment=y,t.cloneElement=function(e,t,r){var o,i,a,u=p({},e.props);for(a in t)"key"==a?o=t[a]:"ref"==a?i=t[a]:u[a]=t[a];return arguments.length>2&&(u.children=arguments.length>3?n.call(arguments,2):r),v(e.type,u,o||e.key,i||e.ref,null)},t.createContext=function(e,t){var n={__c:t="__cC"+l++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(E)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n},t.createElement=g,t.createRef=function(){return{current:null}},t.h=g,t.hydrate=function e(t,n){N(t,n,e)},t.isValidElement=i,t.options=r,t.render=N,t.toChildArray=function e(t,n){return n=n||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){e(t,n)})):n.push(t)),n}})),ps=function(e,t){return void 0===t&&(t=document),"string"==typeof e?t.querySelector(e):(null==(n=e)?void 0:n.nodeType)===Node.ELEMENT_NODE?e:null;var n},hs=class{constructor(e,t){void 0===t&&(t={}),this.uppy=e,this.opts=t}getPluginState(){const{plugins:e}=this.uppy.getState();return e[this.id]||{}}setPluginState(e){const{plugins:t}=this.uppy.getState();this.uppy.setState({plugins:{...t,[this.id]:{...t[this.id],...e}}})}setOptions(e){this.opts={...this.opts,...e},this.setPluginState(),this.i18nInit()}i18nInit(){const e=new Ya([this.defaultLocale,this.uppy.locale,this.opts.locale]);this.i18n=e.translate.bind(e),this.i18nArray=e.translateArray.bind(e),this.setPluginState()}addTarget(){throw new Error("Extend the addTarget method to add your plugin to another plugin's target")}install(){}uninstall(){}render(){throw new Error("Extend the render method to add your plugin to a DOM element")}update(){}afterUpdate(){}};function gs(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var vs=0;function ys(e){return"__private_"+vs+++"_"+e}const{render:ms}=ds;var bs=ys("updateUI");class ws extends hs{constructor(){super(...arguments),Object.defineProperty(this,bs,{writable:!0,value:void 0})}mount(e,t){const n=t.id,r=ps(e);if(r){this.isTargetDOMEl=!0;const t=document.createDocumentFragment();return gs(this,bs)[bs]=function(e){let t=null,n=null;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=o,t||(t=Promise.resolve().then((()=>(t=null,e(...n))))),t}}((e=>{this.uppy.getPlugin(this.id)&&(ms(this.render(e),t),this.afterUpdate())})),this.uppy.log(`Installing ${n} to a DOM element '${e}'`),this.opts.replaceTargetContent&&(r.innerHTML=""),ms(this.render(this.uppy.getState()),t),this.el=t.firstElementChild,r.appendChild(t),this.onMount(),this.el}let o;if("object"==typeof e&&e instanceof ws)o=e;else if("function"==typeof e){const t=e;this.uppy.iteratePlugins((e=>{if(e instanceof t)return o=e,!1}))}if(o)return this.uppy.log(`Installing ${n} to ${o.id}`),this.parent=o,this.el=o.addTarget(t),this.onMount(),this.el;this.uppy.log(`Not installing ${n}`);let i=`Invalid target option given to ${n}.`;throw i+="function"==typeof e?" The given target is not a Plugin class. Please check that you're not specifying a React Component instead of a plugin. If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.":"If you meant to target an HTML element, please make sure that the element exists. Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. (see https://github.com/transloadit/uppy/issues/1042)\n\nIf you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.",new Error(i)}update(e){var t,n;null!=this.el&&(null==(t=(n=gs(this,bs))[bs])||t.call(n,e))}unmount(){var e;this.isTargetDOMEl&&(null==(e=this.el)||e.remove());this.onUnmount()}onMount(){}onUnmount(){}}var Es=ws;const{debugLogger:Ds}=mu;var Cs=fs,xs=fs,Ss=Es,As=hs,Os=Ds;Cs.Uppy=xs,Cs.UIPlugin=Ss,Cs.BasePlugin=As,Cs.debugLogger=Os;class ks extends Error{constructor(e,t){void 0===t&&(t=null),super("This looks like a network error, the endpoint might be blocked by an internet provider or a firewall."),this.cause=e,this.isNetworkError=!0,this.request=t}}var Bs=ks,Fs=function(){return fetch(...arguments).catch((e=>{throw"AbortError"===e.name?e:new Bs(e)}))};class Ts extends Error{constructor(){super("Authorization required"),this.name="AuthError",this.isAuthError=!0}}var _s,Ps,js,Ns,Is,Ls=Ts;function Rs(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Ms=0;function zs(e){return"__private_"+Ms+++"_"+e}async function $s(e){if(401===e.status)throw new Ls;const t=e.json();if(e.status<200||e.status>300){let n=`Failed request with status: ${e.status}. ${e.statusText}`;try{const e=await t;n=e.message?`${n} message: ${e.message}`:n,n=e.requestId?`${n} request-Id: ${e.requestId}`:n}finally{throw new Error(n)}}return t}var Hs=(Ps=zs("getPostResponseFunc"),js=zs("getUrl"),Ns=zs("errorHandler"),Is=_s=class e{constructor(e,t){Object.defineProperty(this,Ns,{value:Us}),Object.defineProperty(this,js,{value:Vs}),Object.defineProperty(this,Ps,{writable:!0,value:e=>t=>e?t:this.onReceiveResponse(t)}),this.uppy=e,this.opts=t,this.onReceiveResponse=this.onReceiveResponse.bind(this),this.allowedHeaders=["accept","content-type","uppy-auth-token"],this.preflightDone=!1}get hostname(){const{companion:e}=this.uppy.getState(),t=this.opts.companionUrl;return(e&&e[t]?e[t]:t).replace(/\/$/,"")}headers(){const t=this.opts.companionHeaders||{};return Promise.resolve({...e.defaultHeaders,...t})}onReceiveResponse(e){const t=this.uppy.getState().companion||{},n=this.opts.companionUrl,{headers:r}=e;return r.has("i-am")&&r.get("i-am")!==t[n]&&this.uppy.setState({companion:{...t,[n]:r.get("i-am")}}),e}preflight(e){return this.preflightDone?Promise.resolve(this.allowedHeaders.slice()):fetch(Rs(this,js)[js](e),{method:"OPTIONS"}).then((e=>(e.headers.has("access-control-allow-headers")&&(this.allowedHeaders=e.headers.get("access-control-allow-headers").split(",").map((e=>e.trim().toLowerCase()))),this.preflightDone=!0,this.allowedHeaders.slice()))).catch((e=>(this.uppy.log(`[CompanionClient] unable to make preflight request ${e}`,"warning"),this.preflightDone=!0,this.allowedHeaders.slice())))}preflightAndHeaders(e){return Promise.all([this.preflight(e),this.headers()]).then((e=>{let[t,n]=e;return Object.keys(n).forEach((e=>{t.includes(e.toLowerCase())||(this.uppy.log(`[CompanionClient] excluding disallowed header ${e}`),delete n[e])})),n}))}get(e,t){return this.preflightAndHeaders(e).then((t=>Fs(Rs(this,js)[js](e),{method:"get",headers:t,credentials:this.opts.companionCookiesRule||"same-origin"}))).then(Rs(this,Ps)[Ps](t)).then($s).catch(Rs(this,Ns)[Ns]("get",e))}post(e,t,n){const r="post";return this.preflightAndHeaders(e).then((n=>Fs(Rs(this,js)[js](e),{method:r,headers:n,credentials:this.opts.companionCookiesRule||"same-origin",body:JSON.stringify(t)}))).then(Rs(this,Ps)[Ps](n)).then($s).catch(Rs(this,Ns)[Ns](r,e))}delete(e,t,n){const r="delete";return this.preflightAndHeaders(e).then((n=>Fs(`${this.hostname}/${e}`,{method:r,headers:n,credentials:this.opts.companionCookiesRule||"same-origin",body:t?JSON.stringify(t):null}))).then(Rs(this,Ps)[Ps](n)).then($s).catch(Rs(this,Ns)[Ns](r,e))}},_s.VERSION="2.0.4",_s.defaultHeaders={Accept:"application/json","Content-Type":"application/json","Uppy-Versions":`@uppy/companion-client=${_s.VERSION}`},Is);function Vs(e){return/^(https?:|)\/\//.test(e)?e:`${this.hostname}/${e}`}function Us(e,t){return n=>{var r;if(null==(r=n)||!r.isAuthError){const r=new Error(`Could not ${e} ${Rs(this,js)[js](t)}`);r.cause=n,n=r}return Promise.reject(n)}}var Ws={setItem:(e,t)=>new Promise((n=>{localStorage.setItem(e,t),n()})),getItem:e=>Promise.resolve(localStorage.getItem(e)),removeItem:e=>new Promise((t=>{localStorage.removeItem(e),t()}))};var qs,Gs,Ks,Ys,Xs;let Zs,Js;function Qs(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var el=0;function tl(e){return"__private_"+el+++"_"+e}var nl=(qs=tl("queued"),Gs=tl("emitter"),Ks=tl("isOpen"),Ys=tl("socket"),Xs=tl("handleMessage"),Zs=Symbol.for("uppy test: getSocket"),Js=Symbol.for("uppy test: getQueued"),class{constructor(e){Object.defineProperty(this,qs,{writable:!0,value:[]}),Object.defineProperty(this,Gs,{writable:!0,value:Za()}),Object.defineProperty(this,Ks,{writable:!0,value:!1}),Object.defineProperty(this,Ys,{writable:!0,value:void 0}),Object.defineProperty(this,Xs,{writable:!0,value:e=>{try{const t=JSON.parse(e.data);this.emit(t.action,t.payload)}catch(t){console.log(t)}}}),this.opts=e,e&&!1===e.autoOpen||this.open()}get isOpen(){return Qs(this,Ks)[Ks]}[Zs](){return Qs(this,Ys)[Ys]}[Js](){return Qs(this,qs)[qs]}open(){Qs(this,Ys)[Ys]=new WebSocket(this.opts.target),Qs(this,Ys)[Ys].onopen=()=>{for(Qs(this,Ks)[Ks]=!0;Qs(this,qs)[qs].length>0&&Qs(this,Ks)[Ks];){const e=Qs(this,qs)[qs].shift();this.send(e.action,e.payload)}},Qs(this,Ys)[Ys].onclose=()=>{Qs(this,Ks)[Ks]=!1},Qs(this,Ys)[Ys].onmessage=Qs(this,Xs)[Xs]}close(){var e;null==(e=Qs(this,Ys)[Ys])||e.close()}send(e,t){Qs(this,Ks)[Ks]?Qs(this,Ys)[Ys].send(JSON.stringify({action:e,payload:t})):Qs(this,qs)[qs].push({action:e,payload:t})}on(e,t){Qs(this,Gs)[Gs].on(e,t)}emit(e,t){Qs(this,Gs)[Gs].emit(e,t)}once(e,t){Qs(this,Gs)[Gs].once(e,t)}}),rl={RequestClient:Hs,Provider:class extends Hs{constructor(e,t){super(e,t),this.provider=t.provider,this.id=this.provider,this.name=this.opts.name||this.id.split("-").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" "),this.pluginId=this.opts.pluginId,this.tokenKey=`companion-${this.pluginId}-auth-token`,this.companionKeysParams=this.opts.companionKeysParams,this.preAuthToken=null}headers(){return Promise.all([super.headers(),this.getAuthToken()]).then((e=>{let[t,n]=e;const r={};return n&&(r["uppy-auth-token"]=n),this.companionKeysParams&&(r["uppy-credentials-params"]=btoa(JSON.stringify({params:this.companionKeysParams}))),{...t,...r}}))}onReceiveResponse(e){e=super.onReceiveResponse(e);const t=this.uppy.getPlugin(this.pluginId),n=t.getPluginState().authenticated?401!==e.status:e.status<400;return t.setPluginState({authenticated:n}),e}setAuthToken(e){return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey,e)}getAuthToken(){return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey)}authUrl(e){return void 0===e&&(e={}),this.preAuthToken&&(e.uppyPreAuthToken=this.preAuthToken),`${this.hostname}/${this.id}/connect?${new URLSearchParams(e)}`}fileUrl(e){return`${this.hostname}/${this.id}/get/${e}`}fetchPreAuthToken(){return this.companionKeysParams?this.post(`${this.id}/preauth/`,{params:this.companionKeysParams}).then((e=>{this.preAuthToken=e.token})).catch((e=>{this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${e}`,"warning")})):Promise.resolve()}list(e){return this.get(`${this.id}/list/${e||""}`)}logout(){return this.get(`${this.id}/logout`).then((e=>Promise.all([e,this.uppy.getPlugin(this.pluginId).storage.removeItem(this.tokenKey)]))).then((e=>{let[t]=e;return t}))}static initPlugin(e,t,n){if(e.type="acquirer",e.files=[],n&&(e.opts={...n,...t}),t.serverUrl||t.serverPattern)throw new Error("`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`");if(t.companionAllowedHosts){const n=t.companionAllowedHosts;if(!("string"==typeof n||Array.isArray(n)||n instanceof RegExp))throw new TypeError(`${e.id}: the option "companionAllowedHosts" must be one of string, Array, RegExp`);e.opts.companionAllowedHosts=n}else/^(?!https?:\/\/).*$/i.test(t.companionUrl)?e.opts.companionAllowedHosts=`https://${t.companionUrl.replace(/^\/\//,"")}`:e.opts.companionAllowedHosts=new URL(t.companionUrl).origin;e.storage=e.opts.storage||Ws}},SearchProvider:class extends Hs{constructor(e,t){super(e,t),this.provider=t.provider,this.id=this.provider,this.name=this.opts.name||this.id.split("-").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" "),this.pluginId=this.opts.pluginId}fileUrl(e){return`${this.hostname}/search/${this.id}/get/${e}`}search(e,t){return t=t?`&${t}`:"",this.get(`search/${this.id}/list?q=${encodeURIComponent(e)}${t}`)}},Socket:nl};var ol,il,al=Wo((function(e,t,n){const{progress:r,bytesUploaded:o,bytesTotal:i}=t;r&&(e.uppy.log(`Upload progress: ${r}`),e.uppy.emit("upload-progress",n,{uploader:e,bytesUploaded:o,bytesTotal:i}))}),300,{leading:!0,trailing:!0});function ul(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var sl=0;function ll(e){return"__private_"+sl+++"_"+e}var cl=(ol=ll("emitter"),il=ll("events"),class{constructor(e){Object.defineProperty(this,ol,{writable:!0,value:void 0}),Object.defineProperty(this,il,{writable:!0,value:[]}),ul(this,ol)[ol]=e}on(e,t){return ul(this,il)[il].push([e,t]),ul(this,ol)[ol].on(e,t)}remove(){for(const[e,t]of ul(this,il)[il].splice(0))ul(this,ol)[ol].off(e,t)}});function fl(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var dl=0;function pl(e){return"__private_"+dl+++"_"+e}var hl=pl("aliveTimer"),gl=pl("isDone"),vl=pl("onTimedOut"),yl=pl("timeout");var ml=class{constructor(e,t){Object.defineProperty(this,hl,{writable:!0,value:void 0}),Object.defineProperty(this,gl,{writable:!0,value:!1}),Object.defineProperty(this,vl,{writable:!0,value:void 0}),Object.defineProperty(this,yl,{writable:!0,value:void 0}),fl(this,yl)[yl]=e,fl(this,vl)[vl]=t}progress(){fl(this,gl)[gl]||fl(this,yl)[yl]>0&&(clearTimeout(fl(this,hl)[hl]),fl(this,hl)[hl]=setTimeout(fl(this,vl)[vl],fl(this,yl)[yl]))}done(){fl(this,gl)[gl]||(clearTimeout(fl(this,hl)[hl]),fl(this,hl)[hl]=null,fl(this,gl)[gl]=!0)}};function bl(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var wl=0;function El(e){return"__private_"+wl+++"_"+e}function Dl(){return new Error("Cancelled")}var Cl=El("activeRequests"),xl=El("queuedHandlers"),Sl=El("call"),Al=El("queueNext"),Ol=El("next"),kl=El("queue"),Bl=El("dequeue");function Fl(e){bl(this,Cl)[Cl]+=1;let t,n=!1;try{t=e()}catch(r){throw bl(this,Cl)[Cl]-=1,r}return{abort:()=>{n||(n=!0,bl(this,Cl)[Cl]-=1,t(),bl(this,Al)[Al]())},done:()=>{n||(n=!0,bl(this,Cl)[Cl]-=1,bl(this,Al)[Al]())}}}function Tl(){queueMicrotask((()=>bl(this,Ol)[Ol]()))}function _l(){if(bl(this,Cl)[Cl]>=this.limit)return;if(0===bl(this,xl)[xl].length)return;const e=bl(this,xl)[xl].shift(),t=bl(this,Sl)[Sl](e.fn);e.abort=t.abort,e.done=t.done}function Pl(e,t){void 0===t&&(t={});const n={fn:e,priority:t.priority||0,abort:()=>{bl(this,Bl)[Bl](n)},done:()=>{throw new Error("Cannot mark a queued request as done: this indicates a bug")}},r=bl(this,xl)[xl].findIndex((e=>n.priority>e.priority));return-1===r?bl(this,xl)[xl].push(n):bl(this,xl)[xl].splice(r,0,n),n}function jl(e){const t=bl(this,xl)[xl].indexOf(e);-1!==t&&bl(this,xl)[xl].splice(t,1)}var Nl={RateLimitedQueue:class{constructor(e){Object.defineProperty(this,Bl,{value:jl}),Object.defineProperty(this,kl,{value:Pl}),Object.defineProperty(this,Ol,{value:_l}),Object.defineProperty(this,Al,{value:Tl}),Object.defineProperty(this,Sl,{value:Fl}),Object.defineProperty(this,Cl,{writable:!0,value:0}),Object.defineProperty(this,xl,{writable:!0,value:[]}),this.limit="number"!=typeof e||0===e?1/0:e}run(e,t){return bl(this,Cl)[Cl]<this.limit?bl(this,Sl)[Sl](e):bl(this,kl)[kl](e,t)}wrapPromiseFunction(e,t){var n=this;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];let a;const u=new Promise(((r,i)=>{a=n.run((()=>{let t,n;try{n=Promise.resolve(e(...o))}catch(u){n=Promise.reject(u)}return n.then((e=>{t?i(t):(a.done(),r(e))}),(e=>{t?i(t):(a.done(),i(e))})),()=>{t=Dl()}}),t)}));return u.abort=()=>{a.abort()},u}}},internalRateLimitedQueue:Symbol("__queue")};var Il,Ll,Rl=function(e){return!!e&&(0!==e.readyState&&4!==e.readyState||0===e.status)},Ml={strings:{timedOut:"Upload stalled for %{seconds} seconds, aborting."}};const{nanoid:zl}=wu,{Provider:$l,RequestClient:Hl,Socket:Vl}=rl,{RateLimitedQueue:Ul,internalRateLimitedQueue:Wl}=Nl;function ql(e,t){let n=t;return n||(n=new Error("Upload error")),"string"==typeof n&&(n=new Error(n)),n instanceof Error||(n=Object.assign(new Error("Upload error"),{data:n})),Rl(e)?(n=new Bs(n,e),n):(n.request=e,n)}function Gl(e){return e.data.slice(0,e.data.size,e.meta.type)}var Kl=(Ll=Il=class extends hs{constructor(e,t){super(e,t),this.type="uploader",this.id=this.opts.id||"XHRUpload",this.title="XHRUpload",this.defaultLocale=Ml;const n={formData:!0,fieldName:t.bundle?"files[]":"file",method:"post",metaFields:null,responseUrlFieldName:"url",bundle:!1,headers:{},timeout:3e4,limit:5,withCredentials:!1,responseType:"",getResponseData(t){let n={};try{n=JSON.parse(t)}catch(r){e.log(r)}return n},getResponseError(e,t){let n=new Error("Upload error");return Rl(t)&&(n=new Bs(n,t)),n},validateStatus:e=>e>=200&&e<300};if(this.opts={...n,...t},this.i18nInit(),this.handleUpload=this.handleUpload.bind(this),Wl in this.opts?this.requests=this.opts[Wl]:this.requests=new Ul(this.opts.limit),this.opts.bundle&&!this.opts.formData)throw new Error("`opts.formData` must be true when `opts.bundle` is enabled.");this.uploaderEvents=Object.create(null)}getOptions(e){const t=this.uppy.getState().xhrUpload,{headers:n}=this.opts,r={...this.opts,...t||{},...e.xhrUpload||{},headers:{}};return"function"==typeof n?r.headers=n(e):Object.assign(r.headers,this.opts.headers),t&&Object.assign(r.headers,t.headers),e.xhrUpload&&Object.assign(r.headers,e.xhrUpload.headers),r}addMetadata(e,t,n){(Array.isArray(n.metaFields)?n.metaFields:Object.keys(t)).forEach((n=>{e.append(n,t[n])}))}createFormDataUpload(e,t){const n=new FormData;this.addMetadata(n,e.meta,t);const r=Gl(e);return e.name?n.append(t.fieldName,r,e.meta.name):n.append(t.fieldName,r),n}createBundledUpload(e,t){const n=new FormData,{meta:r}=this.uppy.getState();return this.addMetadata(n,r,t),e.forEach((e=>{const t=this.getOptions(e),r=Gl(e);e.name?n.append(t.fieldName,r,e.name):n.append(t.fieldName,r)})),n}upload(e,t,n){const r=this.getOptions(e);return this.uppy.log(`uploading ${t} of ${n}`),new Promise(((t,n)=>{this.uppy.emit("upload-started",e);const o=r.formData?this.createFormDataUpload(e,r):e.data,i=new XMLHttpRequest;this.uploaderEvents[e.id]=new cl(this.uppy);const a=new ml(r.timeout,(()=>{i.abort(),s.done();const t=new Error(this.i18n("timedOut",{seconds:Math.ceil(r.timeout/1e3)}));this.uppy.emit("upload-error",e,t),n(t)})),u=zl();i.upload.addEventListener("loadstart",(()=>{this.uppy.log(`[XHRUpload] ${u} started`)})),i.upload.addEventListener("progress",(t=>{this.uppy.log(`[XHRUpload] ${u} progress: ${t.loaded} / ${t.total}`),a.progress(),t.lengthComputable&&this.uppy.emit("upload-progress",e,{uploader:this,bytesUploaded:t.loaded,bytesTotal:t.total})})),i.addEventListener("load",(o=>{if(this.uppy.log(`[XHRUpload] ${u} finished`),a.done(),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),r.validateStatus(o.target.status,i.responseText,i)){const n=r.getResponseData(i.responseText,i),a=n[r.responseUrlFieldName],u={status:o.target.status,body:n,uploadURL:a};return this.uppy.emit("upload-success",e,u),a&&this.uppy.log(`Download ${e.name} from ${a}`),t(e)}const l=r.getResponseData(i.responseText,i),c=ql(i,r.getResponseError(i.responseText,i)),f={status:o.target.status,body:l};return this.uppy.emit("upload-error",e,c,f),n(c)})),i.addEventListener("error",(()=>{this.uppy.log(`[XHRUpload] ${u} errored`),a.done(),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null);const t=ql(i,r.getResponseError(i.responseText,i));return this.uppy.emit("upload-error",e,t),n(t)})),i.open(r.method.toUpperCase(),r.endpoint,!0),i.withCredentials=r.withCredentials,""!==r.responseType&&(i.responseType=r.responseType);const s=this.requests.run((()=>{this.uppy.emit("upload-started",e);const t=this.getOptions(e);return Object.keys(t.headers).forEach((e=>{i.setRequestHeader(e,t.headers[e])})),i.send(o),()=>{a.done(),i.abort()}}));this.onFileRemove(e.id,(()=>{s.abort(),n(new Error("File removed"))})),this.onCancelAll(e.id,(()=>{s.abort(),n(new Error("Upload cancelled"))}))}))}uploadRemote(e){const t=this.getOptions(e);return new Promise(((n,r)=>{this.uppy.emit("upload-started",e);const o={};(Array.isArray(t.metaFields)?t.metaFields:Object.keys(e.meta)).forEach((t=>{o[t]=e.meta[t]}));new(e.remote.providerOptions.provider?$l:Hl)(this.uppy,e.remote.providerOptions).post(e.remote.url,{...e.remote.body,endpoint:t.endpoint,size:e.data.size,fieldname:t.fieldName,metadata:o,httpMethod:t.method,useFormData:t.formData,headers:t.headers}).then((o=>{const{token:i}=o,a=function(e){const t=/^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i.exec(e)[1];return`${/^http:\/\//i.test(e)?"ws":"wss"}://${t}`}(e.remote.companionUrl),u=new Vl({target:`${a}/api/${i}`,autoOpen:!1});this.uploaderEvents[e.id]=new cl(this.uppy),this.onFileRemove(e.id,(()=>{u.send("cancel",{}),s.abort(),n(`upload ${e.id} was removed`)})),this.onCancelAll(e.id,(()=>{u.send("cancel",{}),s.abort(),n(`upload ${e.id} was canceled`)})),this.onRetry(e.id,(()=>{u.send("pause",{}),u.send("resume",{})})),this.onRetryAll(e.id,(()=>{u.send("pause",{}),u.send("resume",{})})),u.on("progress",(t=>al(this,t,e))),u.on("success",(r=>{const o=t.getResponseData(r.response.responseText,r.response),i=o[t.responseUrlFieldName],a={status:r.response.status,body:o,uploadURL:i};return this.uppy.emit("upload-success",e,a),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),n()})),u.on("error",(n=>{const o=n.response,i=o?t.getResponseError(o.responseText,o):Object.assign(new Error(n.error.message),{cause:n.error});this.uppy.emit("upload-error",e,i),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),r(i)}));const s=this.requests.run((()=>(u.open(),e.isPaused&&u.send("pause",{}),()=>u.close())))})).catch((t=>{this.uppy.emit("upload-error",e,t),r(t)}))}))}uploadBundle(e){return new Promise(((t,n)=>{const{endpoint:r}=this.opts,{method:o}=this.opts,i=this.uppy.getState().xhrUpload,a=this.createBundledUpload(e,{...this.opts,...i||{}}),u=new XMLHttpRequest,s=new ml(this.opts.timeout,(()=>{u.abort();const e=new Error(this.i18n("timedOut",{seconds:Math.ceil(this.opts.timeout/1e3)}));l(e),n(e)})),l=t=>{e.forEach((e=>{this.uppy.emit("upload-error",e,t)}))};u.upload.addEventListener("loadstart",(()=>{this.uppy.log("[XHRUpload] started uploading bundle"),s.progress()})),u.upload.addEventListener("progress",(t=>{s.progress(),t.lengthComputable&&e.forEach((e=>{this.uppy.emit("upload-progress",e,{uploader:this,bytesUploaded:t.loaded/t.total*e.size,bytesTotal:e.size})}))})),u.addEventListener("load",(r=>{if(s.done(),this.opts.validateStatus(r.target.status,u.responseText,u)){const n=this.opts.getResponseData(u.responseText,u),o={status:r.target.status,body:n};return e.forEach((e=>{this.uppy.emit("upload-success",e,o)})),t()}const o=this.opts.getResponseError(u.responseText,u)||new Error("Upload error");return o.request=u,l(o),n(o)})),u.addEventListener("error",(()=>{s.done();const e=this.opts.getResponseError(u.responseText,u)||new Error("Upload error");return l(e),n(e)})),this.uppy.on("cancel-all",(()=>{s.done(),u.abort()})),u.open(o.toUpperCase(),r,!0),u.withCredentials=this.opts.withCredentials,""!==this.opts.responseType&&(u.responseType=this.opts.responseType),Object.keys(this.opts.headers).forEach((e=>{u.setRequestHeader(e,this.opts.headers[e])})),u.send(a),e.forEach((e=>{this.uppy.emit("upload-started",e)}))}))}uploadFiles(e){return function(e){const t=[],n=[];function r(e){t.push(e)}function o(e){n.push(e)}return Promise.all(e.map((e=>e.then(r,o)))).then((()=>({successful:t,failed:n})))}(e.map(((t,n)=>{const r=parseInt(n,10)+1,o=e.length;return t.error?Promise.reject(new Error(t.error)):t.isRemote?this.uploadRemote(t,r,o):this.upload(t,r,o)})))}onFileRemove(e,t){this.uploaderEvents[e].on("file-removed",(n=>{e===n.id&&t(n.id)}))}onRetry(e,t){this.uploaderEvents[e].on("upload-retry",(n=>{e===n&&t()}))}onRetryAll(e,t){this.uploaderEvents[e].on("retry-all",(()=>{this.uppy.getFile(e)&&t()}))}onCancelAll(e,t){this.uploaderEvents[e].on("cancel-all",(()=>{this.uppy.getFile(e)&&t()}))}handleUpload(e){if(0===e.length)return this.uppy.log("[XHRUpload] No files to upload!"),Promise.resolve();0!==this.opts.limit||this.opts[Wl]||this.uppy.log("[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0","warning"),this.uppy.log("[XHRUpload] Uploading...");const t=e.map((e=>this.uppy.getFile(e)));if(this.opts.bundle){if(t.some((e=>e.isRemote)))throw new Error("Can’t upload remote files when the `bundle: true` option is set");if("function"==typeof this.opts.headers)throw new TypeError("`headers` may not be a function when the `bundle: true` option is set");return this.uploadBundle(t)}return this.uploadFiles(t).then((()=>null))}install(){if(this.opts.bundle){const{capabilities:e}=this.uppy.getState();this.uppy.setState({capabilities:{...e,individualCancellation:!1}})}this.uppy.addUploader(this.handleUpload)}uninstall(){if(this.opts.bundle){const{capabilities:e}=this.uppy.getState();this.uppy.setState({capabilities:{...e,individualCancellation:!0}})}this.uppy.removeUploader(this.handleUpload)}},Il.VERSION="2.0.6",Ll),Yl="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Xl(e){var t={exports:{}};return e(t,t.exports),t.exports}var Zl,Jl,Ql=function(e){return e&&e.Math==Math&&e},ec=Ql("object"==typeof globalThis&&globalThis)||Ql("object"==typeof window&&window)||Ql("object"==typeof self&&self)||Ql("object"==typeof Yl&&Yl)||function(){return this}()||Function("return this")(),tc=Object.defineProperty,nc=function(e,t){try{tc(ec,e,{value:t,configurable:!0,writable:!0})}catch(rY){ec[e]=t}return t},rc=ec["__core-js_shared__"]||nc("__core-js_shared__",{}),oc=Xl((function(e){(e.exports=function(e,t){return rc[e]||(rc[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),ic=Function.prototype,ac=ic.bind,uc=ic.call,sc=ac&&ac.bind(uc),lc=ac?function(e){return e&&sc(uc,e)}:function(e){return e&&function(){return uc.apply(e,arguments)}},cc=ec.TypeError,fc=function(e){if(null==e)throw cc("Can't call method on "+e);return e},dc=ec.Object,pc=function(e){return dc(fc(e))},hc=lc({}.hasOwnProperty),gc=Object.hasOwn||function(e,t){return hc(pc(e),t)},vc=0,yc=Math.random(),mc=lc(1..toString),bc=function(e){return"Symbol("+(void 0===e?"":e)+")_"+mc(++vc+yc,36)},wc=function(e){return"function"==typeof e},Ec=function(e){return wc(e)?e:void 0},Dc=function(e,t){return arguments.length<2?Ec(ec[e]):ec[e]&&ec[e][t]},Cc=Dc("navigator","userAgent")||"",xc=ec.process,Sc=ec.Deno,Ac=xc&&xc.versions||Sc&&Sc.version,Oc=Ac&&Ac.v8;Oc&&(Jl=(Zl=Oc.split("."))[0]>0&&Zl[0]<4?1:+(Zl[0]+Zl[1])),!Jl&&Cc&&(!(Zl=Cc.match(/Edge\/(\d+)/))||Zl[1]>=74)&&(Zl=Cc.match(/Chrome\/(\d+)/))&&(Jl=+Zl[1]);var kc=Jl,Bc=function(e){try{return!!e()}catch(t){return!0}},Fc=!!Object.getOwnPropertySymbols&&!Bc((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&kc&&kc<41})),Tc=Fc&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,_c=oc("wks"),Pc=ec.Symbol,jc=Pc&&Pc.for,Nc=Tc?Pc:Pc&&Pc.withoutSetter||bc,Ic=function(e){if(!gc(_c,e)||!Fc&&"string"!=typeof _c[e]){var t="Symbol."+e;Fc&&gc(Pc,e)?_c[e]=Pc[e]:_c[e]=Tc&&jc?jc(t):Nc(t)}return _c[e]},Lc={};Lc[Ic("toStringTag")]="z";var Rc="[object z]"===String(Lc),Mc=!Bc((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),zc=function(e){return"object"==typeof e?null!==e:wc(e)},$c=ec.document,Hc=zc($c)&&zc($c.createElement),Vc=function(e){return Hc?$c.createElement(e):{}},Uc=!Mc&&!Bc((function(){return 7!=Object.defineProperty(Vc("div"),"a",{get:function(){return 7}}).a})),Wc=ec.String,qc=ec.TypeError,Gc=function(e){if(zc(e))return e;throw qc(Wc(e)+" is not an object")},Kc=Function.prototype.call,Yc=Kc.bind?Kc.bind(Kc):function(){return Kc.apply(Kc,arguments)},Xc=lc({}.isPrototypeOf),Zc=ec.Object,Jc=Tc?function(e){return"symbol"==typeof e}:function(e){var t=Dc("Symbol");return wc(t)&&Xc(t.prototype,Zc(e))},Qc=ec.String,ef=function(e){try{return Qc(e)}catch(t){return"Object"}},tf=ec.TypeError,nf=function(e){if(wc(e))return e;throw tf(ef(e)+" is not a function")},rf=function(e,t){var n=e[t];return null==n?void 0:nf(n)},of=ec.TypeError,af=ec.TypeError,uf=Ic("toPrimitive"),sf=function(e){var t=function(e,t){if(!zc(e)||Jc(e))return e;var n,r=rf(e,uf);if(r){if(void 0===t&&(t="default"),n=Yc(r,e,t),!zc(n)||Jc(n))return n;throw af("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&wc(n=e.toString)&&!zc(r=Yc(n,e)))return r;if(wc(n=e.valueOf)&&!zc(r=Yc(n,e)))return r;if("string"!==t&&wc(n=e.toString)&&!zc(r=Yc(n,e)))return r;throw of("Can't convert object to primitive value")}(e,t)}(e,"string");return Jc(t)?t:t+""},lf=ec.TypeError,cf=Object.defineProperty,ff={f:Mc?cf:function(e,t,n){if(Gc(e),t=sf(t),Gc(n),Uc)try{return cf(e,t,n)}catch(r){}if("get"in n||"set"in n)throw lf("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},df=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},pf=Mc?function(e,t,n){return ff.f(e,t,df(1,n))}:function(e,t,n){return e[t]=n,e},hf=lc(Function.toString);wc(rc.inspectSource)||(rc.inspectSource=function(e){return hf(e)});var gf,vf,yf,mf=rc.inspectSource,bf=ec.WeakMap,wf=wc(bf)&&/native code/.test(mf(bf)),Ef=oc("keys"),Df=function(e){return Ef[e]||(Ef[e]=bc(e))},Cf={},xf=ec.TypeError,Sf=ec.WeakMap;if(wf||rc.state){var Af=rc.state||(rc.state=new Sf),Of=lc(Af.get),kf=lc(Af.has),Bf=lc(Af.set);gf=function(e,t){if(kf(Af,e))throw new xf("Object already initialized");return t.facade=e,Bf(Af,e,t),t},vf=function(e){return Of(Af,e)||{}},yf=function(e){return kf(Af,e)}}else{var Ff=Df("state");Cf[Ff]=!0,gf=function(e,t){if(gc(e,Ff))throw new xf("Object already initialized");return t.facade=e,pf(e,Ff,t),t},vf=function(e){return gc(e,Ff)?e[Ff]:{}},yf=function(e){return gc(e,Ff)}}var Tf={set:gf,get:vf,has:yf,enforce:function(e){return yf(e)?vf(e):gf(e,{})},getterFor:function(e){return function(t){var n;if(!zc(t)||(n=vf(t)).type!==e)throw xf("Incompatible receiver, "+e+" required");return n}}},_f=Function.prototype,Pf=Mc&&Object.getOwnPropertyDescriptor,jf=gc(_f,"name"),Nf={EXISTS:jf,PROPER:jf&&"something"===function(){}.name,CONFIGURABLE:jf&&(!Mc||Mc&&Pf(_f,"name").configurable)},If=Xl((function(e){var t=Nf.CONFIGURABLE,n=Tf.get,r=Tf.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;wc(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!gc(i,"name")||t&&i.name!==f)&&pf(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==ec?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:pf(e,n,i)):l?e[n]=i:nc(n,i)})(Function.prototype,"toString",(function(){return wc(this)&&n(this).source||mf(this)}))})),Lf=lc({}.toString),Rf=lc("".slice),Mf=function(e){return Rf(Lf(e),8,-1)},zf=Ic("toStringTag"),$f=ec.Object,Hf="Arguments"==Mf(function(){return arguments}()),Vf=Rc?Mf:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=$f(e),zf))?n:Hf?Mf(t):"Object"==(r=Mf(t))&&wc(t.callee)?"Arguments":r},Uf=Rc?{}.toString:function(){return"[object "+Vf(this)+"]"};Rc||If(Object.prototype,"toString",Uf,{unsafe:!0});var Wf={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},qf=Vc("span").classList,Gf=qf&&qf.constructor&&qf.constructor.prototype,Kf=Gf===Object.prototype?void 0:Gf,Yf=lc(lc.bind),Xf=function(e,t){return nf(e),void 0===t?e:Yf?Yf(e,t):function(){return e.apply(t,arguments)}},Zf=ec.Object,Jf=lc("".split),Qf=Bc((function(){return!Zf("z").propertyIsEnumerable(0)}))?function(e){return"String"==Mf(e)?Jf(e,""):Zf(e)}:Zf,ed=Math.ceil,td=Math.floor,nd=function(e){var t=+e;return t!=t||0===t?0:(t>0?td:ed)(t)},rd=Math.min,od=function(e){return e>0?rd(nd(e),9007199254740991):0},id=function(e){return od(e.length)},ad=Array.isArray||function(e){return"Array"==Mf(e)},ud=function(){},sd=[],ld=Dc("Reflect","construct"),cd=/^\s*(?:class|function)\b/,fd=lc(cd.exec),dd=!cd.exec(ud),pd=function(e){if(!wc(e))return!1;try{return ld(ud,sd,e),!0}catch(t){return!1}},hd=!ld||Bc((function(){var e;return pd(pd.call)||!pd(Object)||!pd((function(){e=!0}))||e}))?function(e){if(!wc(e))return!1;switch(Vf(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return dd||!!fd(cd,mf(e))}:pd,gd=Ic("species"),vd=ec.Array,yd=function(e,t){return new(ad(n=e)&&(r=n.constructor,(hd(r)&&(r===vd||ad(r.prototype))||zc(r)&&null===(r=r[gd]))&&(r=void 0)),void 0===r?vd:r)(0===t?0:t);var n,r},md=lc([].push),bd=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=pc(s),g=Qf(h),v=Xf(l,c),y=id(g),m=0,b=f||yd,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:md(w,d)}else switch(e){case 4:return!1;case 7:md(w,d)}return i?-1:r||o?o:w}},wd={forEach:bd(0),map:bd(1),filter:bd(2),some:bd(3),every:bd(4),find:bd(5),findIndex:bd(6),filterReject:bd(7)},Ed=function(e,t){var n=[][e];return!!n&&Bc((function(){n.call(null,t||function(){throw 1},1)}))},Dd=wd.forEach,Cd=Ed("forEach")?[].forEach:function(e){return Dd(this,e,arguments.length>1?arguments[1]:void 0)},xd=function(e){if(e&&e.forEach!==Cd)try{pf(e,"forEach",Cd)}catch(tg){e.forEach=Cd}};for(var Sd in Wf)Wf[Sd]&&xd(ec[Sd]&&ec[Sd].prototype);xd(Kf);var Ad={}.propertyIsEnumerable,Od=Object.getOwnPropertyDescriptor,kd=Od&&!Ad.call({1:2},1)?function(e){var t=Od(this,e);return!!t&&t.enumerable}:Ad,Bd={f:kd},Fd=function(e){return Qf(fc(e))},Td=Object.getOwnPropertyDescriptor,_d={f:Mc?Td:function(e,t){if(e=Fd(e),t=sf(t),Uc)try{return Td(e,t)}catch(n){}if(gc(e,t))return df(!Yc(Bd.f,e,t),e[t])}},Pd=Math.max,jd=Math.min,Nd=function(e,t){var n=nd(e);return n<0?Pd(n+t,0):jd(n,t)},Id=function(e){return function(t,n,r){var o,i=Fd(t),a=id(i),u=Nd(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},Ld={includes:Id(!0),indexOf:Id(!1)},Rd=Ld.indexOf,Md=lc([].push),zd=function(e,t){var n,r=Fd(e),o=0,i=[];for(n in r)!gc(Cf,n)&&gc(r,n)&&Md(i,n);for(;t.length>o;)gc(r,n=t[o++])&&(~Rd(i,n)||Md(i,n));return i},$d=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Hd=$d.concat("length","prototype"),Vd={f:Object.getOwnPropertyNames||function(e){return zd(e,Hd)}},Ud={f:Object.getOwnPropertySymbols},Wd=lc([].concat),qd=Dc("Reflect","ownKeys")||function(e){var t=Vd.f(Gc(e)),n=Ud.f;return n?Wd(t,n(e)):t},Gd=function(e,t){for(var n=qd(t),r=ff.f,o=_d.f,i=0;i<n.length;i++){var a=n[i];gc(e,a)||r(e,a,o(t,a))}},Kd=/#|\.prototype\./,Yd=function(e,t){var n=Zd[Xd(e)];return n==Qd||n!=Jd&&(wc(t)?Bc(t):!!t)},Xd=Yd.normalize=function(e){return String(e).replace(Kd,".").toLowerCase()},Zd=Yd.data={},Jd=Yd.NATIVE="N",Qd=Yd.POLYFILL="P",ep=Yd,tp=_d.f,np=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?ec:l?ec[u]||nc(u,{}):(ec[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=tp(n,r))&&a.value:n[r],!ep(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Gd(i,o)}(e.sham||o&&o.sham)&&pf(i,"sham",!0),If(n,r,i,e)}},rp=Object.keys||function(e){return zd(e,$d)},op=Bc((function(){rp(1)}));
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function ip(e){return"[object Object]"===Object.prototype.toString.call(e)}np({target:"Object",stat:!0,forced:op},{keys:function(e){return rp(pc(e))}});var ap={isHistory(e){return!1!==ip(t=e)&&(void 0===(n=t.constructor)||!1!==ip(r=n.prototype)&&!1!==r.hasOwnProperty("isPrototypeOf"))&&Array.isArray(e.redos)&&Array.isArray(e.undos)&&(0===e.redos.length||xt.isOperationList(e.redos[0]))&&(0===e.undos.length||xt.isOperationList(e.undos[0]));var t,n,r}},up=new WeakMap,sp=new WeakMap,lp={isHistoryEditor:e=>ap.isHistory(e.history)&&vt.isEditor(e),isMerging:e=>sp.get(e),isSaving:e=>up.get(e),redo(e){e.redo()},undo(e){e.undo()},withoutMerging(e,t){var n=lp.isMerging(e);sp.set(e,!1),t(),sp.set(e,n)},withoutSaving(e,t){var n=lp.isSaving(e);up.set(e,!1),t(),up.set(e,n)}},cp=ec.String,fp=function(e){if("Symbol"===Vf(e))throw TypeError("Cannot convert a Symbol value to a string");return cp(e)},dp=function(){var e=Gc(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},pp=Nf.PROPER,hp=RegExp.prototype,gp=hp.toString,vp=lc(dp),yp=Bc((function(){return"/a/b"!=gp.call({source:"a",flags:"b"})})),mp=pp&&"toString"!=gp.name;(yp||mp)&&If(RegExp.prototype,"toString",(function(){var e=Gc(this),t=fp(e.source),n=e.flags;return"/"+t+"/"+fp(void 0===n&&Xc(hp,e)&&!("flags"in hp)?vp(e):n)}),{unsafe:!0});var bp,wp=Mc?Object.defineProperties:function(e,t){Gc(e);for(var n,r=Fd(t),o=rp(t),i=o.length,a=0;i>a;)ff.f(e,n=o[a++],r[n]);return e},Ep=Dc("document","documentElement"),Dp=Df("IE_PROTO"),Cp=function(){},xp=function(e){return"<script>"+e+"<\/script>"},Sp=function(e){e.write(xp("")),e.close();var t=e.parentWindow.Object;return e=null,t},Ap=function(){try{bp=new ActiveXObject("htmlfile")}catch(r){}var e,t;Ap="undefined"!=typeof document?document.domain&&bp?Sp(bp):((t=Vc("iframe")).style.display="none",Ep.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(xp("document.F=Object")),e.close(),e.F):Sp(bp);for(var n=$d.length;n--;)delete Ap.prototype[$d[n]];return Ap()};Cf[Dp]=!0;var Op=Object.create||function(e,t){var n;return null!==e?(Cp.prototype=Gc(e),n=new Cp,Cp.prototype=null,n[Dp]=e):n=Ap(),void 0===t?n:wp(n,t)},kp=Ic("unscopables"),Bp=Array.prototype;null==Bp[kp]&&ff.f(Bp,kp,{configurable:!0,value:Op(null)});var Fp=function(e){Bp[kp][e]=!0},Tp=Ld.includes;np({target:"Array",proto:!0},{includes:function(e){return Tp(this,e,arguments.length>1?arguments[1]:void 0)}}),Fp("includes");var _p=Ic("match"),Pp=function(e){var t;return zc(e)&&(void 0!==(t=e[_p])?!!t:"RegExp"==Mf(e))},jp=ec.TypeError,Np=function(e){if(Pp(e))throw jp("The method doesn't accept regular expressions");return e},Ip=Ic("match"),Lp=function(e){var t=/./;try{"/./"[e](t)}catch(rY){try{return t[Ip]=!1,"/./"[e](t)}catch(n){}}return!1},Rp=lc("".indexOf);np({target:"String",proto:!0,forced:!Lp("includes")},{includes:function(e){return!!~Rp(fp(fc(this)),fp(Np(e)),arguments.length>1?arguments[1]:void 0)}});var Mp=/"/g,zp=lc("".replace);np({target:"String",proto:!0,forced:("anchor",Bc((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3})))},{anchor:function(e){return"a","name",t=e,n=fp(fc(this)),r="<a",(r+=' name="'+zp(fp(t),Mp,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var $p=function(e,t,n){var r,o;Gc(e);try{if(!(r=rf(e,"return"))){if("throw"===t)throw n;return n}r=Yc(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return Gc(r),n},Hp=function(e,t,n,r){try{return r?t(Gc(n)[0],n[1]):t(n)}catch(o){$p(e,"throw",o)}},Vp={},Up=Ic("iterator"),Wp=Array.prototype,qp=function(e){return void 0!==e&&(Vp.Array===e||Wp[Up]===e)},Gp=function(e,t,n){var r=sf(t);r in e?ff.f(e,r,df(0,n)):e[r]=n},Kp=Ic("iterator"),Yp=function(e){if(null!=e)return rf(e,Kp)||rf(e,"@@iterator")||Vp[Vf(e)]},Xp=ec.TypeError,Zp=function(e,t){var n=arguments.length<2?Yp(e):t;if(nf(n))return Gc(Yc(n,e));throw Xp(ef(e)+" is not iterable")},Jp=ec.Array,Qp=Ic("iterator"),eh=!1;try{var th=0,nh={next:function(){return{done:!!th++}},return:function(){eh=!0}};nh[Qp]=function(){return this},Array.from(nh,(function(){throw 2}))}catch(eg){}var rh=function(e,t){if(!t&&!eh)return!1;var n=!1;try{var r={};r[Qp]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},oh=!rh((function(e){Array.from(e)}));np({target:"Array",stat:!0,forced:oh},{from:function(e){var t=pc(e),n=hd(this),r=arguments.length,o=r>1?arguments[1]:void 0,i=void 0!==o;i&&(o=Xf(o,r>2?arguments[2]:void 0));var a,u,s,l,c,f,d=Yp(t),p=0;if(!d||this==Jp&&qp(d))for(a=id(t),u=n?new this(a):Jp(a);a>p;p++)f=i?o(t[p],p):t[p],Gp(u,p,f);else for(c=(l=Zp(t,d)).next,u=n?new this:[];!(s=Yc(c,l)).done;p++)f=i?Hp(l,o,[s.value,p],!0):s.value,Gp(u,p,f);return u.length=p,u}});var ih,ah,uh,sh=lc("".charAt),lh=lc("".charCodeAt),ch=lc("".slice),fh=function(e){return function(t,n){var r,o,i=fp(fc(t)),a=nd(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=lh(i,a))<55296||r>56319||a+1===u||(o=lh(i,a+1))<56320||o>57343?e?sh(i,a):r:e?ch(i,a,a+2):o-56320+(r-55296<<10)+65536}},dh={codeAt:fh(!1),charAt:fh(!0)},ph=!Bc((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),hh=Df("IE_PROTO"),gh=ec.Object,vh=gh.prototype,yh=ph?gh.getPrototypeOf:function(e){var t=pc(e);if(gc(t,hh))return t[hh];var n=t.constructor;return wc(n)&&t instanceof n?n.prototype:t instanceof gh?vh:null},mh=Ic("iterator"),bh=!1;[].keys&&("next"in(uh=[].keys())?(ah=yh(yh(uh)))!==Object.prototype&&(ih=ah):bh=!0);var wh=null==ih||Bc((function(){var e={};return ih[mh].call(e)!==e}));wh&&(ih={}),wc(ih[mh])||If(ih,mh,(function(){return this}));var Eh={IteratorPrototype:ih,BUGGY_SAFARI_ITERATORS:bh},Dh=ff.f,Ch=Ic("toStringTag"),xh=function(e,t,n){e&&!gc(e=n?e:e.prototype,Ch)&&Dh(e,Ch,{configurable:!0,value:t})},Sh=Eh.IteratorPrototype,Ah=function(){return this},Oh=ec.String,kh=ec.TypeError,Bh=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=lc(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return Gc(n),function(e){if("object"==typeof e||wc(e))return e;throw kh("Can't set "+Oh(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),Fh=Nf.PROPER,Th=Nf.CONFIGURABLE,_h=Eh.IteratorPrototype,Ph=Eh.BUGGY_SAFARI_ITERATORS,jh=Ic("iterator"),Nh=function(){return this},Ih=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=Op(Sh,{next:df(1,s)}),xh(u,l,!1),Vp[l]=Ah;var c,f,d,p=function(e){if(e===o&&m)return m;if(!Ph&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[jh]||v["@@iterator"]||o&&v[o],m=!Ph&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=yh(b.call(new e)))!==Object.prototype&&c.next&&(yh(c)!==_h&&(Bh?Bh(c,_h):wc(c[jh])||If(c,jh,Nh)),xh(c,h,!0)),Fh&&"values"==o&&y&&"values"!==y.name&&(Th?pf(v,"name","values"):(g=!0,m=function(){return Yc(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(Ph||g||!(d in v))&&If(v,d,f[d]);else np({target:t,proto:!0,forced:Ph||g},f);return v[jh]!==m&&If(v,jh,m,{name:o}),Vp[t]=m,f},Lh=dh.charAt,Rh=Tf.set,Mh=Tf.getterFor("String Iterator");Ih(String,"String",(function(e){Rh(this,{type:"String Iterator",string:fp(e),index:0})}),(function(){var e,t=Mh(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=Lh(n,r),t.index+=e.length,{value:e,done:!1})}));var zh,$h=_d.f,Hh=lc("".endsWith),Vh=lc("".slice),Uh=Math.min,Wh=Lp("endsWith"),qh=!(Wh||(zh=$h(String.prototype,"endsWith"),!zh||zh.writable));np({target:"String",proto:!0,forced:!qh&&!Wh},{endsWith:function(e){var t=fp(fc(this));Np(e);var n=arguments.length>1?arguments[1]:void 0,r=t.length,o=void 0===n?r:Uh(od(n),r),i=fp(e);return Hh?Hh(t,i,o):Vh(t,o-i.length,o)===i}});var Gh=lc([].join),Kh=Qf!=Object,Yh=Ed("join",",");np({target:"Array",proto:!0,forced:Kh||!Yh},{join:function(e){return Gh(Fd(this),void 0===e?",":e)}});var Xh=Ic("species"),Zh=function(e){return kc>=51||!Bc((function(){var t=[];return(t.constructor={})[Xh]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},Jh=wd.map,Qh=Zh("map");np({target:"Array",proto:!0,forced:!Qh},{map:function(e){return Jh(this,e,arguments.length>1?arguments[1]:void 0)}});var eg,tg,ng=ec.RegExp,rg=Bc((function(){var e=ng("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),og=rg||Bc((function(){return!ng("a","y").sticky})),ig={BROKEN_CARET:rg||Bc((function(){var e=ng("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:og,UNSUPPORTED_Y:rg},ag=ec.RegExp,ug=Bc((function(){var e=ag(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),sg=ec.RegExp,lg=Bc((function(){var e=sg("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),cg=Tf.get,fg=oc("native-string-replace",String.prototype.replace),dg=RegExp.prototype.exec,pg=dg,hg=lc("".charAt),gg=lc("".indexOf),vg=lc("".replace),yg=lc("".slice),mg=(tg=/b*/g,Yc(dg,eg=/a/,"a"),Yc(dg,tg,"a"),0!==eg.lastIndex||0!==tg.lastIndex),bg=ig.BROKEN_CARET,wg=void 0!==/()??/.exec("")[1];(mg||wg||bg||ug||lg)&&(pg=function(e){var t,n,r,o,i,a,u,s=this,l=cg(s),c=fp(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=Yc(pg,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=bg&&s.sticky,h=Yc(dp,s),g=s.source,v=0,y=c;if(p&&(h=vg(h,"y",""),-1===gg(h,"g")&&(h+="g"),y=yg(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==hg(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),wg&&(n=new RegExp("^"+g+"$(?!\\s)",h)),mg&&(r=s.lastIndex),o=Yc(dg,p?n:s,y),p?o?(o.input=yg(o.input,v),o[0]=yg(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:mg&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),wg&&o&&o.length>1&&Yc(fg,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=Op(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var Eg=pg;np({target:"RegExp",proto:!0,forced:/./.exec!==Eg},{exec:Eg});var Dg=Function.prototype,Cg=Dg.apply,xg=Dg.bind,Sg=Dg.call,Ag="object"==typeof Reflect&&Reflect.apply||(xg?Sg.bind(Cg):function(){return Sg.apply(Cg,arguments)}),Og=Ic("species"),kg=RegExp.prototype,Bg=function(e,t,n,r){var o=Ic(e),i=!Bc((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!Bc((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[Og]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=lc(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=lc(e),s=t.exec;return s===Eg||s===kg.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));If(String.prototype,e,s[0]),If(kg,o,s[1])}r&&pf(kg[o],"sham",!0)},Fg=dh.charAt,Tg=function(e,t,n){return t+(n?Fg(e,t).length:1)},_g=Math.floor,Pg=lc("".charAt),jg=lc("".replace),Ng=lc("".slice),Ig=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Lg=/\$([$&'`]|\d{1,2})/g,Rg=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=Lg;return void 0!==o&&(o=pc(o),s=Ig),jg(i,s,(function(i,s){var l;switch(Pg(s,0)){case"$":return"$";case"&":return e;case"`":return Ng(t,0,n);case"'":return Ng(t,a);case"<":l=o[Ng(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=_g(c/10);return 0===f?i:f<=u?void 0===r[f-1]?Pg(s,1):r[f-1]+Pg(s,1):i}l=r[c-1]}return void 0===l?"":l}))},Mg=ec.TypeError,zg=function(e,t){var n=e.exec;if(wc(n)){var r=Yc(n,e,t);return null!==r&&Gc(r),r}if("RegExp"===Mf(e))return Yc(Eg,e,t);throw Mg("RegExp#exec called on incompatible receiver")},$g=Ic("replace"),Hg=Math.max,Vg=Math.min,Ug=lc([].concat),Wg=lc([].push),qg=lc("".indexOf),Gg=lc("".slice),Kg="$0"==="a".replace(/./,"$0"),Yg=!!/./[$g]&&""===/./[$g]("a","$0");Bg("replace",(function(e,t,n){var r=Yg?"$":"$0";return[function(e,n){var r=fc(this),o=null==e?void 0:rf(e,$g);return o?Yc(o,e,r,n):Yc(t,fp(r),e,n)},function(e,o){var i=Gc(this),a=fp(e);if("string"==typeof o&&-1===qg(o,r)&&-1===qg(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=wc(o);s||(o=fp(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=zg(i,a);if(null===d)break;if(Wg(f,d),!l)break;""===fp(d[0])&&(i.lastIndex=Tg(a,od(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=fp((d=f[v])[0]),m=Hg(Vg(nd(d.index),a.length),0),b=[],w=1;w<d.length;w++)Wg(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=Ug([y],b,m,a);void 0!==E&&Wg(D,E);var C=fp(Ag(o,void 0,D))}else C=Rg(y,a,m,b,E,o);m>=g&&(h+=Gg(a,g,m)+C,g=m+y.length)}return h+Gg(a,g)}]}),!!Bc((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!Kg||Yg);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var Xg=function(e,t){return(Xg=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function Zg(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Xg(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Jg=function(){return Jg=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Jg.apply(this,arguments)};function Qg(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function ev(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function tv(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}var nv=0,rv=function(){this.id=""+nv++},ov=Tf.set,iv=Tf.getterFor("Array Iterator"),av=Ih(Array,"Array",(function(e,t){ov(this,{type:"Array Iterator",target:Fd(e),index:0,kind:t})}),(function(){var e=iv(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");Vp.Arguments=Vp.Array,Fp("keys"),Fp("values"),Fp("entries");var uv=function(e,t,n){for(var r in t)If(e,r,t[r],n);return e},sv=ec.Array,lv=Math.max,cv=function(e,t,n){for(var r=id(e),o=Nd(t,r),i=Nd(void 0===n?r:n,r),a=sv(lv(i-o,0)),u=0;o<i;o++,u++)Gp(a,u,e[o]);return a.length=u,a},fv=Vd.f,dv="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],pv={f:function(e){return dv&&"Window"==Mf(e)?function(e){try{return fv(e)}catch(t){return cv(dv)}}(e):fv(Fd(e))}},hv=Bc((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),gv=Object.isExtensible,vv=Bc((function(){gv(1)}))||hv?function(e){return!!zc(e)&&(!hv||"ArrayBuffer"!=Mf(e))&&(!gv||gv(e))}:gv,yv=!Bc((function(){return Object.isExtensible(Object.preventExtensions({}))})),mv=Xl((function(e){var t=ff.f,n=!1,r=bc("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=Vd.f,t=lc([].splice),o={};o[r]=1,e(o).length&&(Vd.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},np({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:pv.f}))},fastKey:function(e,t){if(!zc(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!gc(e,r)){if(!vv(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!gc(e,r)){if(!vv(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return yv&&n&&vv(e)&&!gc(e,r)&&i(e),e}};Cf[r]=!0})),bv=ec.TypeError,wv=function(e,t){this.stopped=e,this.result=t},Ev=wv.prototype,Dv=function(e,t,n){var r,o,i,a,u,s,l,c=n&&n.that,f=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),p=!(!n||!n.INTERRUPTED),h=Xf(t,c),g=function(e){return r&&$p(r,"normal",e),new wv(!0,e)},v=function(e){return f?(Gc(e),p?h(e[0],e[1],g):h(e[0],e[1])):p?h(e,g):h(e)};if(d)r=e;else{if(!(o=Yp(e)))throw bv(ef(e)+" is not iterable");if(qp(o)){for(i=0,a=id(e);a>i;i++)if((u=v(e[i]))&&Xc(Ev,u))return u;return new wv(!1)}r=Zp(e,o)}for(s=r.next;!(l=Yc(s,r)).done;){try{u=v(l.value)}catch(y){$p(r,"throw",y)}if("object"==typeof u&&u&&Xc(Ev,u))return u}return new wv(!1)},Cv=ec.TypeError,xv=function(e,t){if(Xc(t,e))return e;throw Cv("Incorrect invocation")},Sv=function(e,t,n){var r,o;return Bh&&wc(r=t.constructor)&&r!==n&&zc(o=r.prototype)&&o!==n.prototype&&Bh(e,o),e},Av=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=ec[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=lc(u[e]);If(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!zc(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!zc(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!zc(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(ep(e,!wc(a)||!(o||u.forEach&&!Bc((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),mv.enable();else if(ep(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=Bc((function(){f.has(1)})),h=rh((function(e){new a(e)})),g=!o&&Bc((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){xv(e,u);var n=Sv(new a,e,s);return null!=t&&Dv(t,n[i],{that:n,AS_ENTRIES:r}),n}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,np({global:!0,forced:s!=a},l),xh(s,e),o||n.setStrong(s,e,r),s},Ov=mv.getWeakData,kv=Tf.set,Bv=Tf.getterFor,Fv=wd.find,Tv=wd.findIndex,_v=lc([].splice),Pv=0,jv=function(e){return e.frozen||(e.frozen=new Nv)},Nv=function(){this.entries=[]},Iv=function(e,t){return Fv(e.entries,(function(e){return e[0]===t}))};Nv.prototype={get:function(e){var t=Iv(this,e);if(t)return t[1]},has:function(e){return!!Iv(this,e)},set:function(e,t){var n=Iv(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=Tv(this.entries,(function(t){return t[0]===e}));return~t&&_v(this.entries,t,1),!!~t}};var Lv,Rv={getConstructor:function(e,t,n,r){var o=e((function(e,o){xv(e,i),kv(e,{type:t,id:Pv++,frozen:void 0}),null!=o&&Dv(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=Bv(t),u=function(e,t,n){var r=a(e),o=Ov(Gc(t),!0);return!0===o?jv(r).set(t,n):o[r.id]=n,e};return uv(i,{delete:function(e){var t=a(this);if(!zc(e))return!1;var n=Ov(e);return!0===n?jv(t).delete(e):n&&gc(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!zc(e))return!1;var n=Ov(e);return!0===n?jv(t).has(e):n&&gc(n,t.id)}}),uv(i,n?{get:function(e){var t=a(this);if(zc(e)){var n=Ov(e);return!0===n?jv(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},Mv=Tf.enforce,zv=!ec.ActiveXObject&&"ActiveXObject"in ec,$v=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},Hv=Av("WeakMap",$v,Rv);if(wf&&zv){Lv=Rv.getConstructor($v,"WeakMap",!0),mv.enable();var Vv=Hv.prototype,Uv=lc(Vv.delete),Wv=lc(Vv.has),qv=lc(Vv.get),Gv=lc(Vv.set);uv(Vv,{delete:function(e){if(zc(e)&&!vv(e)){var t=Mv(this);return t.frozen||(t.frozen=new Lv),Uv(this,e)||t.frozen.delete(e)}return Uv(this,e)},has:function(e){if(zc(e)&&!vv(e)){var t=Mv(this);return t.frozen||(t.frozen=new Lv),Wv(this,e)||t.frozen.has(e)}return Wv(this,e)},get:function(e){if(zc(e)&&!vv(e)){var t=Mv(this);return t.frozen||(t.frozen=new Lv),Wv(this,e)?qv(this,e):t.frozen.get(e)}return qv(this,e)},set:function(e,t){if(zc(e)&&!vv(e)){var n=Mv(this);n.frozen||(n.frozen=new Lv),Wv(this,e)?Gv(this,e,t):n.frozen.set(e,t)}else Gv(this,e,t);return this}})}var Kv=Ic("iterator"),Yv=Ic("toStringTag"),Xv=av.values,Zv=function(e,t){if(e){if(e[Kv]!==Xv)try{pf(e,Kv,Xv)}catch(r){e[Kv]=Xv}if(e[Yv]||pf(e,Yv,t),Wf[t])for(var n in av)if(e[n]!==av[n])try{pf(e,n,av[n])}catch(r){e[n]=av[n]}}};for(var Jv in Wf)Zv(ec[Jv]&&ec[Jv].prototype,Jv);Zv(Kf,"DOMTokenList");var Qv=new WeakMap,ey=new WeakMap,ty=new WeakMap,ny=new WeakMap,ry=new WeakMap,oy=new WeakMap,iy=new WeakMap,ay=new WeakMap,uy=new WeakMap,sy=new WeakMap,ly=new WeakMap,cy=new WeakMap,fy=new WeakMap,dy=new WeakMap,py=new WeakMap,hy=new WeakMap,gy=new WeakMap,vy=new WeakMap,yy=new WeakMap,my=new WeakMap,by=new WeakMap,wy=new WeakMap,Ey=new WeakMap,Dy=new WeakMap,Cy=new WeakMap,xy=wd.find,Sy=!0;"find"in[]&&Array(1).find((function(){Sy=!1})),np({target:"Array",proto:!0,forced:Sy},{find:function(e){return xy(this,e,arguments.length>1?arguments[1]:void 0)}}),Fp("find"),np({global:!0},{globalThis:ec});const Ay=["area","base","basefont","bgsound","br","col","command","embed","frame","hr","image","img","input","isindex","keygen","link","menuitem","meta","nextid","param","source","track","wbr"];Ur&&(Br.fn.css=Ur),Xr&&(Br.fn.append=Xr),Fr&&(Br.fn.addClass=Fr),Tr&&(Br.fn.removeClass=Tr),_r&&(Br.fn.hasClass=_r),Lr&&(Br.fn.on=Lr),uo&&(Br.fn.focus=uo),Pr&&(Br.fn.attr=Pr),jr&&(Br.fn.removeAttr=jr),Hr&&(Br.fn.hide=Hr),Vr&&(Br.fn.show=Vr),$r&&(Br.fn.offset=$r),Mr&&(Br.fn.width=Mr),zr&&(Br.fn.height=zr),Jr&&(Br.fn.parent=Jr),Qr&&(Br.fn.parents=Qr),Yr&&(Br.fn.is=Yr),Nr&&(Br.fn.dataset=Nr),Ir&&(Br.fn.val=Ir),Kr&&(Br.fn.text=Kr),Gr&&(Br.fn.html=Gr),to&&(Br.fn.children=to),no&&(Br.fn.remove=no),eo&&(Br.fn.find=eo),Wr&&(Br.fn.each=Wr),ro&&(Br.fn.empty=ro);var Oy,ky=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||null},By=function(e){return Fy(e)&&1===e.nodeType},Fy=function(e){var t=ky(e);return!!t&&e instanceof t.Node},Ty=function(e){var t=e&&e.anchorNode&&ky(e.anchorNode);return!!t&&e instanceof t.Selection},_y=function(e){return Fy(e)&&3===e.nodeType},Py=function(e){var t,n,r;return null!==(t=window.document.getElementById(e))&&void 0!==t?t:(null===(r=null===(n=window.document.activeElement)||void 0===n?void 0:n.shadowRoot)||void 0===r?void 0:r.getElementById(e))||null},jy=function(e,t,n){for(var r,o=e.childNodes,i=o[t],a=t,u=!1,s=!1;(Fy(r=i)&&8===r.nodeType||By(i)&&0===i.childNodes.length||By(i)&&"false"===i.getAttribute("contenteditable"))&&(!u||!s);)a>=o.length?(u=!0,a=t-1,n="backward"):a<0?(s=!0,a=t+1,n="forward"):(i=o[a],t=a,a+="forward"===n?1:-1);return[i,t]},Ny=function(e,t,n){return ev(jy(e,t,n),1)[0]},Iy=function e(t){var n,r,o="";if(_y(t)&&t.nodeValue)return t.nodeValue;if(By(t)){try{for(var i=Qg(Array.from(t.childNodes)),a=i.next();!a.done;a=i.next())o+=e(a.value)}catch(eg){n={error:eg}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}var u=getComputedStyle(t).getPropertyValue("display");"block"!==u&&"list"!==u&&"table-row"!==u&&"BR"!==t.tagName||(o+="\n")}return o};function Ly(e,t){if(!(e instanceof HTMLElement&&"true"===e.dataset.slateVoid))for(var n=e.childNodes,r=n.length;r--;){var o=n[r],i=o.nodeType;3==i?t(o,e):1!=i&&9!=i&&11!=i||Ly(o,t)}}function Ry(e){if(0===e.length)return"";var t=e[0];return t.nodeType!==Oy.ELEMENT_NODE?"":t.tagName.toLowerCase()}!function(e){e[e.ELEMENT_NODE=1]="ELEMENT_NODE",e[e.TEXT_NODE=3]="TEXT_NODE",e[e.CDATA_SECTION_NODE=4]="CDATA_SECTION_NODE",e[e.PROCESSING_INSTRUCTION_NODE=7]="PROCESSING_INSTRUCTION_NODE",e[e.COMMENT_NODE=8]="COMMENT_NODE",e[e.DOCUMENT_NODE=9]="DOCUMENT_NODE",e[e.DOCUMENT_TYPE_NODE=10]="DOCUMENT_TYPE_NODE",e[e.DOCUMENT_FRAGMENT_NODE=11]="DOCUMENT_FRAGMENT_NODE"}(Oy||(Oy={})),void 0!==globalThis.navigator&&void 0!==globalThis.window&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&globalThis.window.MSStream;var My="undefined"!=typeof navigator&&/Mac OS X/.test(navigator.userAgent),zy="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);"undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent);var $y="undefined"!=typeof navigator&&/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),Hy="undefined"!=typeof navigator&&/Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent),Vy="undefined"!=typeof navigator&&/Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent),Uy="undefined"!=typeof navigator&&/Chrome/i.test(navigator.userAgent);"undefined"!=typeof navigator&&/.*QQBrowser/.test(navigator.userAgent);var Wy=!Vy&&!Hy&&"undefined"!=typeof globalThis&&globalThis.InputEvent&&"function"==typeof globalThis.InputEvent.prototype.getTargetRanges,qy={getWindow:function(e){var t=by.get(e);if(!t)throw new Error("Unable to find a host window element for this editor");return t},findKey:function(e,t){var n=my.get(t);return n||(n=new rv,my.set(t,n)),n},setNewKey:function(e){var t=new rv;my.set(e,t)},findPath:function(e,t){for(var n=[],r=t;;){var o=py.get(r);if(null==o){if(vt.isEditor(r))return n;break}var i=dy.get(r);if(null==i)break;n.unshift(i),r=o}throw new Error("Unable to find the path for Slate node: "+JSON.stringify(t))},findDocumentOrShadowRoot:function(e){if(e.isDestroyed)return window.document;var t=qy.toDOMNode(e,e),n=t.getRootNode();return(n instanceof Document||n instanceof ShadowRoot)&&null!=n.getSelection?n:t.ownerDocument},getParentNode:function(e,t){return py.get(t)||null},getParentsNodes:function(e,t){for(var n=[],r=t;r!==e&&null!=r;){var o=qy.getParentNode(e,r);if(null==o)break;n.push(o),r=o}return n},getTopNode:function(e,t){var n=[qy.findPath(e,t)[0]];return Et.get(e,n)},toDOMNode:function(e,t){var n;if(vt.isEditor(t))n=hy.get(e);else{var r=qy.findKey(e,t);n=vy.get(r)}if(!n)throw new Error("Cannot resolve a DOM node from Slate node: "+JSON.stringify(t));return n},hasDOMNode:function(e,t,n){void 0===n&&(n={});var r,o=n.editable,i=void 0!==o&&o,a=qy.toDOMNode(e,e);try{r=By(t)?t:t.parentElement}catch(u){if(!u.message.includes('Permission denied to access property "nodeType"'))throw u}return!!r&&r.closest("[data-slate-editor]")===a&&(!i||r.isContentEditable||!!r.getAttribute("data-slate-zero-width"))},toDOMRange:function(e,t){var n=t.anchor,r=t.focus,o=Pt.isBackward(t),i=qy.toDOMPoint(e,n),a=Pt.isCollapsed(t)?i:qy.toDOMPoint(e,r),u=qy.getWindow(e).document.createRange(),s=ev(o?a:i,2),l=s[0],c=s[1],f=ev(o?i:a,2),d=f[0],p=f[1],h=!!(By(l)?l:l.parentElement).getAttribute("data-slate-zero-width"),g=!!(By(d)?d:d.parentElement).getAttribute("data-slate-zero-width");return u.setStart(l,h?1:c),u.setEnd(d,g?1:p),u},toDOMPoint:function(e,t){var n,r,o,i=ev(vt.node(e,t.path),1)[0],a=qy.toDOMNode(e,i);vt.void(e,{at:t})&&(t={path:t.path,offset:0});var u=Array.from(a.querySelectorAll("[data-slate-string], [data-slate-zero-width]")),s=0;try{for(var l=Qg(u),c=l.next();!c.done;c=l.next()){var f=c.value,d=f.childNodes[0];if(null!=d&&null!=d.textContent){var p=d.textContent.length,h=f.getAttribute("data-slate-length"),g=s+(null==h?p:parseInt(h,10));if(t.offset<=g){o=[d,Math.min(p,Math.max(0,t.offset-s))];break}s=g}}}catch(eg){n={error:eg}}finally{try{c&&!c.done&&(r=l.return)&&r.call(l)}finally{if(n)throw n.error}}if(!o)throw new Error("Cannot resolve a DOM point from Slate point: "+JSON.stringify(t));return o},toSlateNode:function(e,t){var n=By(t)?t:t.parentElement;n&&!n.hasAttribute("data-slate-node")&&(n=n.closest("[data-slate-node]"));var r=n?gy.get(n):null;if(!r)throw new Error("Cannot resolve a Slate node from DOM node: "+n);return r},findEventRange:function(e,t){"nativeEvent"in t&&(t=t.nativeEvent);var n=t.clientX,r=t.clientY,o=t.target;if(null==n||null==r)throw new Error("Cannot resolve a Slate range from a DOM event: "+t);var i,a=qy.toSlateNode(e,t.target),u=qy.findPath(e,a);if(vt.isVoid(e,a)){var s=o.getBoundingClientRect(),l=e.isInline(a)?n-s.left<s.left+s.width-n:r-s.top<s.top+s.height-r,c=vt.point(e,u,{edge:l?"start":"end"}),f=l?vt.before(e,c):vt.after(e,c);if(f)return vt.range(e,f)}var d=this.getWindow(e).document;if(d.caretRangeFromPoint)i=d.caretRangeFromPoint(n,r);else{var p=d.caretPositionFromPoint(n,r);p&&((i=d.createRange()).setStart(p.offsetNode,p.offset),i.setEnd(p.offsetNode,p.offset))}if(!i)throw new Error("Cannot resolve a Slate range from a DOM event: "+t);return qy.toSlateRange(e,i,{exactMatch:!1,suppressThrow:!1})},toSlateRange:function(e,t,n){var r,o,i,a,u,s=n.exactMatch,l=n.suppressThrow;if((Ty(t)?t.anchorNode:t.startContainer)&&(Ty(t)?(r=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,u=Uy&&window.document.activeElement&&window.document.activeElement.shadowRoot?t.anchorNode===t.focusNode&&t.anchorOffset===t.focusOffset:t.isCollapsed):(r=t.startContainer,o=t.startOffset,i=t.endContainer,a=t.endOffset,u=t.collapsed)),null==r||null==i||null==o||null==a)throw new Error("Cannot resolve a Slate range from DOM range: "+t);var c=qy.toSlatePoint(e,[r,o],{exactMatch:s,suppressThrow:l});if(!c)return null;var f=u?c:qy.toSlatePoint(e,[i,a],{exactMatch:s,suppressThrow:l});if(!f)return null;var d={anchor:c,focus:f};return Pt.isExpanded(d)&&Pt.isForward(d)&&By(i)&&vt.void(e,{at:d.focus,mode:"highest"})&&(d=vt.unhangRange(e,d,{voids:!0})),d},toSlatePoint:function(e,t,n){var r,o=n.exactMatch,i=n.suppressThrow,a=ev(o?t:function(e){var t,n=ev(e,2),r=n[0],o=n[1];if(By(r)&&r.childNodes.length){var i=o===r.childNodes.length,a=i?o-1:o;for(r=(t=ev(jy(r,a,i?"backward":"forward"),2))[0],i=(a=t[1])<o;By(r)&&r.childNodes.length;){var u=i?r.childNodes.length-1:0;r=Ny(r,u,i?"backward":"forward")}o=i&&null!=r.textContent?r.textContent.length:0}return[r,o]}(t),2),u=a[0],s=a[1],l=u.parentNode,c=null,f=0;if(l){var d=l.closest('[data-slate-void="true"]'),p=l.closest("[data-slate-leaf]"),h=null;if(p){c=p.closest('[data-slate-node="text"]');var g=qy.getWindow(e).document.createRange();g.setStart(c,0),g.setEnd(u,s);var v=g.cloneContents();tv(tv([],ev(hr(v.querySelectorAll("[data-slate-zero-width]")))),ev(hr(v.querySelectorAll("[contenteditable=false]")))).forEach((function(e){e.parentNode.removeChild(e)})),f=v.textContent.length,h=c}else d&&((p=d.querySelector("[data-slate-leaf]"))?(c=p.closest('[data-slate-node="text"]'),f=(h=p).textContent.length,h.querySelectorAll("[data-slate-zero-width]").forEach((function(e){f-=e.textContent.length}))):f=1);h&&f===h.textContent.length&&(l.hasAttribute("data-slate-zero-width")||zy&&(null===(r=h.textContent)||void 0===r?void 0:r.endsWith("\n")))&&f--}if(!c){if(i)return null;throw new Error("Cannot resolve a Slate point from DOM point: "+t)}var y=qy.toSlateNode(e,c);return{path:qy.findPath(e,y),offset:f}},hasRange:function(e,t){var n=t.anchor,r=t.focus;return vt.hasPath(e,n.path)&&vt.hasPath(e,r.path)},getNodeType:function(e){return ct.isElement(e)?e.type:""},checkNodeType:function(e,t){return this.getNodeType(e)===t},getNodesStr:function(e){return e.map((function(e){return Et.string(e)})).join("")},getSelectedElems:function(e){var t,n,r=[],o=vt.nodes(e,{universal:!0});try{for(var i=Qg(o),a=i.next();!a.done;a=i.next()){var u=ev(a.value,1)[0];ct.isElement(u)&&r.push(u)}}catch(eg){t={error:eg}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r},getSelectedNodeByType:function(e,t){var n=this,r=ev(vt.nodes(e,{match:function(e){return n.checkNodeType(e,t)},universal:!0}),1),o=r[0];return null==o?null:o[0]},getSelectedTextNode:function(e){var t=ev(vt.nodes(e,{match:function(e){return zt.isText(e)},universal:!0}),1),n=t[0];return null==n?null:n[0]},isNodeSelected:function(e,t){var n=ev(vt.nodes(e,{match:function(e){return e===t},universal:!0}),1),r=n[0];return null!=r&&ev(r,1)[0]===t},isSelectionAtLineEnd:function(e,t){var n=e.selection;return!!n&&(vt.isEnd(e,n.anchor,t)||vt.isEnd(e,n.focus,t))},getTextarea:function(e){var t=Qv.get(e);if(null==t)throw new Error("Cannot find textarea instance by editor");return t},getToolbar:function(e){return ny.get(e)||null},getHoverbar:function(e){return oy.get(e)||null},normalizeContent:function(e){e.children.forEach((function(t,n){e.normalizeNode([t,[n]])}))},getLeftLengthOfMaxLength:function(e){var t=e.getConfig(),n=t.maxLength,r=t.onMaxLength;if("number"!=typeof n||n<=0)return 1/0;var o=n-e.getText().replace(/\r|\n|(\r\n)/g,"").length;return o<=0&&r&&r(e),o},cleanExposedTexNodeInSelectionBlock:function(e){var t,n,r,o,i=qy.getTextarea(e).$textArea,a=null==i?void 0:i[0].childNodes;if(a)try{for(var u=Qg(Array.from(a)),s=u.next();!s.done;s=u.next()){var l=s.value;if(3!==l.nodeType)break;l.remove()}}catch(eg){t={error:eg}}finally{try{s&&!s.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}var c=vt.nodes(e,{match:function(t){return!(!ct.isElement(t)||e.isInline(t))},universal:!0});try{for(var f=Qg(c),d=f.next();!d.done;d=f.next()){var p=d.value;if(null!=p){var h=p[0];Ly(qy.toDOMNode(e,h),(function(e,t){var n=Br(t);n.attr("data-slate-string")||n.attr("data-slate-zero-width")||n.attr("data-w-e-reserve")||t.removeChild(e)}))}}}catch(eg){r={error:eg}}finally{try{d&&!d.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}},isLastNode:function(e,t){var n=e.children||[];return n[n.length-1]===t},genEmptyParagraph:function(){return{type:"paragraph",children:[{text:""}]}},isSelectedVoidNode:function(e){var t,n,r=vt.nodes(e,{match:function(t){return e.isVoid(t)}}),o=0;try{for(var i=Qg(r),a=i.next();!a.done;a=i.next())a.value,o++}catch(eg){t={error:eg}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return o>0},isSelectedEmptyParagraph:function(e){var t=e.selection;if(null==t)return!1;if(Pt.isExpanded(t))return!1;var n=qy.getSelectedNodeByType(e,"paragraph");if(null===n)return!1;var r=n.children;return 1===r.length&&(""===r[0].text||void 0)},isEmptyPath:function(e,t){var n=vt.node(e,t);if(null==n)return!1;var r=ev(n,1)[0].children;return 1===r.length&&""===r[0].text}},Gy=1,Ky={},Yy={};var Xy=wd.filter,Zy=Zh("filter");np({target:"Array",proto:!0,forced:!Zy},{filter:function(e){return Xy(this,e,arguments.length>1?arguments[1]:void 0)}});var Jy="\t\n\v\f\r                　\u2028\u2029\ufeff",Qy=lc("".replace),em="["+Jy+"]",tm=RegExp("^"+em+em+"*"),nm=RegExp(em+em+"*$"),rm=function(e){return function(t){var n=fp(fc(t));return 1&e&&(n=Qy(n,tm,"")),2&e&&(n=Qy(n,nm,"")),n}},om={start:rm(1),end:rm(2),trim:rm(3)},im=Nf.PROPER,am=om.trim;np({target:"String",proto:!0,forced:function(e){return Bc((function(){return!!Jy[e]()||"​᠎"!=="​᠎"[e]()||im&&Jy[e].name!==e}))}("trim")},{trim:function(){return am(this)}});var um=[];var sm={};function lm(e,t,n){var r=n.isInline(e)?"span":"div";return"<"+r+">"+t+"</"+r+">"}var cm,fm,dm,pm,hm=ec.Promise,gm=Ic("species"),vm=function(e){var t=Dc(e),n=ff.f;Mc&&t&&!t[gm]&&n(t,gm,{configurable:!0,get:function(){return this}})},ym=ec.TypeError,mm=Ic("species"),bm=function(e,t){var n,r=Gc(e).constructor;return void 0===r||null==(n=Gc(r)[mm])?t:function(e){if(hd(e))return e;throw ym(ef(e)+" is not a constructor")}(n)},wm=lc([].slice),Em=/(?:ipad|iphone|ipod).*applewebkit/i.test(Cc),Dm="process"==Mf(ec.process),Cm=ec.setImmediate,xm=ec.clearImmediate,Sm=ec.process,Am=ec.Dispatch,Om=ec.Function,km=ec.MessageChannel,Bm=ec.String,Fm=0,Tm={};try{cm=ec.location}catch(eg){}var _m=function(e){if(gc(Tm,e)){var t=Tm[e];delete Tm[e],t()}},Pm=function(e){return function(){_m(e)}},jm=function(e){_m(e.data)},Nm=function(e){ec.postMessage(Bm(e),cm.protocol+"//"+cm.host)};Cm&&xm||(Cm=function(e){var t=wm(arguments,1);return Tm[++Fm]=function(){Ag(wc(e)?e:Om(e),void 0,t)},fm(Fm),Fm},xm=function(e){delete Tm[e]},Dm?fm=function(e){Sm.nextTick(Pm(e))}:Am&&Am.now?fm=function(e){Am.now(Pm(e))}:km&&!Em?(pm=(dm=new km).port2,dm.port1.onmessage=jm,fm=Xf(pm.postMessage,pm)):ec.addEventListener&&wc(ec.postMessage)&&!ec.importScripts&&cm&&"file:"!==cm.protocol&&!Bc(Nm)?(fm=Nm,ec.addEventListener("message",jm,!1)):fm="onreadystatechange"in Vc("script")?function(e){Ep.appendChild(Vc("script")).onreadystatechange=function(){Ep.removeChild(this),_m(e)}}:function(e){setTimeout(Pm(e),0)});var Im,Lm,Rm,Mm,zm,$m,Hm,Vm,Um={set:Cm,clear:xm},Wm=/ipad|iphone|ipod/i.test(Cc)&&void 0!==ec.Pebble,qm=/web0s(?!.*chrome)/i.test(Cc),Gm=_d.f,Km=Um.set,Ym=ec.MutationObserver||ec.WebKitMutationObserver,Xm=ec.document,Zm=ec.process,Jm=ec.Promise,Qm=Gm(ec,"queueMicrotask"),eb=Qm&&Qm.value;eb||(Im=function(){var e,t;for(Dm&&(e=Zm.domain)&&e.exit();Lm;){t=Lm.fn,Lm=Lm.next;try{t()}catch(n){throw Lm?Mm():Rm=void 0,n}}Rm=void 0,e&&e.enter()},Em||Dm||qm||!Ym||!Xm?!Wm&&Jm&&Jm.resolve?((Hm=Jm.resolve(void 0)).constructor=Jm,Vm=Xf(Hm.then,Hm),Mm=function(){Vm(Im)}):Dm?Mm=function(){Zm.nextTick(Im)}:(Km=Xf(Km,ec),Mm=function(){Km(Im)}):(zm=!0,$m=Xm.createTextNode(""),new Ym(Im).observe($m,{characterData:!0}),Mm=function(){$m.data=zm=!zm}));var tb,nb,rb,ob,ib=eb||function(e){var t={fn:e,next:void 0};Rm&&(Rm.next=t),Lm||(Lm=t,Mm()),Rm=t},ab=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=nf(t),this.reject=nf(n)},ub={f:function(e){return new ab(e)}},sb=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},lb="object"==typeof window,cb=Um.set,fb=Ic("species"),db="Promise",pb=Tf.getterFor(db),hb=Tf.set,gb=Tf.getterFor(db),vb=hm&&hm.prototype,yb=hm,mb=vb,bb=ec.TypeError,wb=ec.document,Eb=ec.process,Db=ub.f,Cb=Db,xb=!!(wb&&wb.createEvent&&ec.dispatchEvent),Sb=wc(ec.PromiseRejectionEvent),Ab=!1,Ob=ep(db,(function(){var e=mf(yb),t=e!==String(yb);if(!t&&66===kc)return!0;if(kc>=51&&/native code/.test(e))return!1;var n=new yb((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[fb]=r,!(Ab=n.then((function(){}))instanceof r)||!t&&lb&&!Sb})),kb=Ob||!rh((function(e){yb.all(e).catch((function(){}))})),Bb=function(e){var t;return!(!zc(e)||!wc(t=e.then))&&t},Fb=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;ib((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&jb(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(bb("Promise-chain cycle")):(u=Bb(a))?Yc(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&_b(e)}))}},Tb=function(e,t,n){var r,o;xb?((r=wb.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),ec.dispatchEvent(r)):r={promise:t,reason:n},!Sb&&(o=ec["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=ec.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},_b=function(e){Yc(cb,ec,(function(){var t,n=e.facade,r=e.value;if(Pb(e)&&(t=sb((function(){Dm?Eb.emit("unhandledRejection",r,n):Tb("unhandledrejection",n,r)})),e.rejection=Dm||Pb(e)?2:1,t.error))throw t.value}))},Pb=function(e){return 1!==e.rejection&&!e.parent},jb=function(e){Yc(cb,ec,(function(){var t=e.facade;Dm?Eb.emit("rejectionHandled",t):Tb("rejectionhandled",t,e.value)}))},Nb=function(e,t,n){return function(r){e(t,r,n)}},Ib=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,Fb(e,!0))},Lb=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw bb("Promise can't be resolved itself");var r=Bb(t);r?ib((function(){var n={done:!1};try{Yc(r,t,Nb(Lb,n,e),Nb(Ib,n,e))}catch(o){Ib(n,o,e)}})):(e.value=t,e.state=1,Fb(e,!1))}catch(o){Ib({done:!1},o,e)}}};if(Ob&&(mb=(yb=function(e){xv(this,mb),nf(e),Yc(tb,this);var t=pb(this);try{e(Nb(Lb,t),Nb(Ib,t))}catch(n){Ib(t,n)}}).prototype,(tb=function(e){hb(this,{type:db,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=uv(mb,{then:function(e,t){var n=gb(this),r=n.reactions,o=Db(bm(this,yb));return o.ok=!wc(e)||e,o.fail=wc(t)&&t,o.domain=Dm?Eb.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&Fb(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),nb=function(){var e=new tb,t=pb(e);this.promise=e,this.resolve=Nb(Lb,t),this.reject=Nb(Ib,t)},ub.f=Db=function(e){return e===yb||e===rb?new nb(e):Cb(e)},wc(hm)&&vb!==Object.prototype)){ob=vb.then,Ab||(If(vb,"then",(function(e,t){var n=this;return new yb((function(e,t){Yc(ob,n,e,t)})).then(e,t)}),{unsafe:!0}),If(vb,"catch",mb.catch,{unsafe:!0}));try{delete vb.constructor}catch(eg){}Bh&&Bh(vb,mb)}np({global:!0,wrap:!0,forced:Ob},{Promise:yb}),xh(yb,db,!1),vm(db),rb=Dc(db),np({target:db,stat:!0,forced:Ob},{reject:function(e){var t=Db(this);return Yc(t.reject,void 0,e),t.promise}}),np({target:db,stat:!0,forced:Ob},{resolve:function(e){return function(e,t){if(Gc(e),zc(t)&&t.constructor===e)return t;var n=ub.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),np({target:db,stat:!0,forced:kb},{all:function(e){var t=this,n=Db(t),r=n.resolve,o=n.reject,i=sb((function(){var n=nf(t.resolve),i=[],a=0,u=1;Dv(e,(function(e){var s=a++,l=!1;u++,Yc(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=Db(t),r=n.reject,o=sb((function(){var o=nf(t.resolve);Dv(e,(function(e){Yc(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var Rb=ig.UNSUPPORTED_Y,Mb=Math.min,zb=[].push,$b=lc(/./.exec),Hb=lc(zb),Vb=lc("".slice);function Ub(e){Promise.resolve().then(e)}function Wb(e,t){return ct.isElement(e)?function(e,t){var n=e.type,r=void 0===n?"":n,o=e.children,i=void 0===o?[]:o,a=vt.isVoid(t,e),u="";a||(u=i.map((function(e){return Wb(e,t)})).join(""));var s=function(e){return sm[e]||lm}(r),l=s(e,u,t),c="";if(c="string"==typeof l?l:l.html||"",a||um.forEach((function(t){return c=t(e,c)})),"string"==typeof l)return c;var f=l.prefix,d=void 0===f?"":f,p=l.suffix,h=void 0===p?"":p;return d&&(c=d+c),h&&(c+=h),c}(e,t):function(e,t){var n=e.text;if(null==n)throw new Error("Current node is not slate Text "+JSON.stringify(e));var r=n;r=r.replace(/ {2}/g," &nbsp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/®/g,"&reg;").replace(/©/g,"&copy;").replace(/™/g,"&trade;");var o=qy.getParentsNodes(t,e).some((function(e){return"pre"===qy.getNodeType(e)}));if(o||(r=r.replace(/\r\n|\r|\n/g,"<br>")),o&&(r=r.replace(/&nbsp;/g," ")),""===r){var i=qy.getParentNode(null,e);if(!i||0!==i.children.length)return r;r="<br>"}return um.forEach((function(t){return r=t(e,r)})),r}(e,t)}function qb(e){return"w-e-element-"+e}Bg("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=fp(fc(this)),o=void 0===n?4294967295:n>>>0;if(0===o)return[];if(void 0===e)return[r];if(!Pp(e))return Yc(t,r,e,o);for(var i,a,u,s=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),c=0,f=new RegExp(e.source,l+"g");(i=Yc(Eg,f,r))&&!((a=f.lastIndex)>c&&(Hb(s,Vb(r,c,i.index)),i.length>1&&i.index<r.length&&Ag(zb,s,cv(i,1)),u=i[0].length,c=a,s.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return c===r.length?!u&&$b(f,"")||Hb(s,""):Hb(s,Vb(r,c)),s.length>o?cv(s,0,o):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:Yc(t,this,e,n)}:t,[function(t,n){var o=fc(this),i=null==t?void 0:rf(t,e);return i?Yc(i,t,o,n):Yc(r,fp(o),t,n)},function(e,o){var i=Gc(this),a=fp(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=bm(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(Rb?"g":"y"),f=new s(Rb?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===zg(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=Rb?0:h;var v,y=zg(f,Rb?Vb(a,h):a);if(null===y||(v=Mb(od(f.lastIndex+(Rb?h:0)),a.length))===p)h=Tg(a,h,l);else{if(Hb(g,Vb(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(Hb(g,y[m]),g.length===d)return g;h=p=v}}return Hb(g,Vb(a,p)),g}]}),!!Bc((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),Rb);var Gb=function(e,t){var n=(t.top+t.bottom)/2;return e.top<=n&&e.bottom>=n},Kb=function(e,t,n){var r=qy.toDOMRange(e,t).getBoundingClientRect(),o=qy.toDOMRange(e,n).getBoundingClientRect();return Gb(r,o)&&Gb(o,r)},Yb=["span","b","strong","i","em","s","strike","u","font","sub","sup"],Xb=[];var Zb=[];var Jb={};var Qb=ff.f,ew=Vd.f,tw=Tf.enforce,nw=Ic("match"),rw=ec.RegExp,ow=rw.prototype,iw=ec.SyntaxError,aw=lc(dp),uw=lc(ow.exec),sw=lc("".charAt),lw=lc("".replace),cw=lc("".indexOf),fw=lc("".slice),dw=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,pw=/a/g,hw=/a/g,gw=new rw(pw)!==pw,vw=ig.MISSED_STICKY,yw=ig.UNSUPPORTED_Y,mw=Mc&&(!gw||vw||ug||lg||Bc((function(){return hw[nw]=!1,rw(pw)!=pw||rw(hw)==hw||"/a/i"!=rw(pw,"i")})));if(ep("RegExp",mw)){for(var bw=function(e,t){var n,r,o,i,a,u,s=Xc(ow,this),l=Pp(e),c=void 0===t,f=[],d=e;if(!s&&l&&c&&e.constructor===bw)return e;if((l||Xc(ow,e))&&(e=e.source,c&&(t="flags"in d?d.flags:aw(d))),e=void 0===e?"":fp(e),t=void 0===t?"":fp(t),d=e,ug&&"dotAll"in pw&&(r=!!t&&cw(t,"s")>-1)&&(t=lw(t,/s/g,"")),n=t,vw&&"sticky"in pw&&(o=!!t&&cw(t,"y")>-1)&&yw&&(t=lw(t,/y/g,"")),lg&&(e=(i=function(e){for(var t,n=e.length,r=0,o="",i=[],a={},u=!1,s=!1,l=0,c="";r<=n;r++){if("\\"===(t=sw(e,r)))t+=sw(e,++r);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:uw(dw,fw(e,r+1))&&(r+=2,s=!0),o+=t,l++;continue;case">"===t&&s:if(""===c||gc(a,c))throw new iw("Invalid capture group name");a[c]=!0,i[i.length]=[c,l],s=!1,c="";continue}s?c+=t:o+=t}return[o,i]}(e))[0],f=i[1]),a=Sv(rw(e,t),s?this:ow,bw),(r||o||f.length)&&(u=tw(a),r&&(u.dotAll=!0,u.raw=bw(function(e){for(var t,n=e.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(t=sw(e,r))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+sw(e,++r);return o}(e),n)),o&&(u.sticky=!0),f.length&&(u.groups=f)),e!==d)try{pf(a,"source",""===d?"(?:)":d)}catch(p){}return a},ww=function(e){e in bw||Qb(bw,e,{configurable:!0,get:function(){return rw[e]},set:function(t){rw[e]=t}})},Ew=ew(rw),Dw=0;Ew.length>Dw;)ww(Ew[Dw++]);ow.constructor=bw,bw.prototype=ow,If(ec,"RegExp",bw)}vm("RegExp");var Cw=new RegExp(String.fromCharCode(160),"g");function xw(e){return e.replace(Cw," ")}function Sw(e,t){var n=e.length;if(n){var r=e[n-1];if(zt.isText(r)){var o=Object.keys(r);if(1===o.length&&"text"===o[0])return r.text=r.text+t,!0}}return!1}function Aw(e,t,n){return{type:"paragraph",children:[{text:Br(e).text().replace(/\s+/gm," ")}]}}function Ow(e,t){var n=function(e,t){var n=[];if(null!=e.attr("data-w-e-is-void"))return n;var r=e[0].childNodes;return 1===r.length&&"BR"===r[0].nodeName?(n.push({text:""}),n):(r.forEach((function(e){if(e.nodeType!==Oy.ELEMENT_NODE)if(e.nodeType!==Oy.TEXT_NODE);else{var r=e.textContent||"";if(""===r.trim()&&r.indexOf("\n")>=0)return;r&&(r=xw(r),Sw(n,r)||n.push({text:r}))}else{if("BR"===e.nodeName)return void(Sw(n,"\n")||n.push({text:"\n"}));var o=Bw(Br(e),t);Array.isArray(o)?o.forEach((function(e){return n.push(e)})):n.push(o)}})),n)}(e,t),r=function(e){for(var t in Jb)if(e[0].matches(t))return Jb[t];return Aw}(e),o=r(e[0],n,t);return Array.isArray(o)||(o=[o]),o.forEach((function(r){vt.isVoid(t,r)||(0===n.length&&(r.children=[{text:e.text().replace(/\s+/gm," ")}]),Zb.forEach((function(n){r=n(e[0],r,t)})))})),o}function kw(e,t){0===e.parents("pre").length&&(e[0].innerHTML=e[0].innerHTML.replace(/\s+/gm," ").replace(/<br>/g,"\n"));var n=e[0].textContent||"",r={text:n=xw(n=n.replace(/&nbsp;/g," ").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&reg;/g,"®").replace(/&copy;/g,"©").replace(/&trade;/g,"™"))};return Zb.forEach((function(n){r=n(e[0],r,t)})),r}function Bw(e,t){Xb.forEach((function(t){var n=t.selector,r=t.preParseHtml;e[0].matches(n)&&(e=Br(r(e[0])))}));var n=Ry(e);return"span"===n?e.attr("data-w-e-type")?Ow(e,t):kw(e,t):"code"===n?"pre"===Ry(e.parent())?Ow(e,t):kw(e,t):Yb.includes(n)?kw(e,t):Ow(e,t)}function Fw(e,t,n){var r=Br(n);return!!r.attr(t)||(r.attr(t,"true"),e.on("destroyed",(function(){r.removeAttr(t)})),!1)}function Tw(e,t){void 0===t&&(t="");var n=[];""===t&&(t="<p><br></p>"),0!==t.indexOf("<")&&(t=t.split(/\n/).map((function(e){return"<p>"+e+"</p>"})).join(""));var r=Br("<div>"+t+"</div>");return Array.from(r.children()).forEach((function(t){var r=Bw(Br(t),e);Array.isArray(r)?r.forEach((function(e){return n.push(e)})):n.push(r)})),n}var _w=ff.f,Pw=mv.fastKey,jw=Tf.set,Nw=Tf.getterFor,Iw={getConstructor:function(e,t,n,r){var o=e((function(e,o){xv(e,i),jw(e,{type:t,index:Op(null),first:void 0,last:void 0,size:0}),Mc||(e.size=0),null!=o&&Dv(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=Nw(t),u=function(e,t,n){var r,o,i=a(e),u=s(e,t);return u?u.value=n:(i.last=u={index:o=Pw(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=u),r&&(r.next=u),Mc?i.size++:e.size++,"F"!==o&&(i.index[o]=u)),e},s=function(e,t){var n,r=a(e),o=Pw(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return uv(i,{clear:function(){for(var e=a(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,Mc?e.size=0:this.size=0},delete:function(e){var t=this,n=a(t),r=s(t,e);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),Mc?n.size--:t.size--}return!!r},forEach:function(e){for(var t,n=a(this),r=Xf(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!s(this,e)}}),uv(i,n?{get:function(e){var t=s(this,e);return t&&t.value},set:function(e,t){return u(this,0===e?0:e,t)}}:{add:function(e){return u(this,e=0===e?0:e,e)}}),Mc&&_w(i,"size",{get:function(){return a(this).size}}),o},setStrong:function(e,t,n){var r=t+" Iterator",o=Nw(t),i=Nw(r);Ih(e,t,(function(e,t){jw(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),vm(t)}};Av("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),Iw);var Lw=new Set(["doctype","!doctype","meta","script","style","link","frame","iframe","title","svg"]);function Rw(e,t){e.isInline(t)?(e.insertNode(t),"link"===t.type&&e.insertFragment([{text:""}])):on.insertNodes(e,t,{mode:"highest"})}var Mw=function(e){var t=e,n=t.insertText;return t.insertFragment,t.setFragmentData=function(e){var n=t.selection;if(n){var r=ev(Pt.edges(n),2),o=r[0],i=r[1],a=vt.void(t,{at:o.path}),u=vt.void(t,{at:i.path});if(!Pt.isCollapsed(n)||a){var s=qy.toDOMRange(t,n),l=s.cloneContents(),c=l.childNodes[0];if(l.childNodes.forEach((function(e){e.textContent&&""!==e.textContent.trim()&&(c=e)})),u){var f=ev(u,1)[0],d=s.cloneRange(),p=qy.toDOMNode(t,f);d.setEndAfter(p),l=d.cloneContents()}if(a&&(c=l.querySelector("[data-slate-spacer]")),Array.from(l.querySelectorAll("[data-slate-zero-width]")).forEach((function(e){var t="n"===e.getAttribute("data-slate-zero-width");e.textContent=t?"\n":""})),_y(c)){var h=c.ownerDocument.createElement("span");h.style.whiteSpace="pre",h.appendChild(c),l.appendChild(h),c=h}var g=t.getFragment(),v=JSON.stringify(g),y=window.btoa(encodeURIComponent(v));c.setAttribute("data-slate-fragment",y),e.setData("application/x-slate-fragment",y);var m=l.ownerDocument.createElement("div");return m.appendChild(l),m.setAttribute("hidden","true"),l.ownerDocument.body.appendChild(m),e.setData("text/html",m.innerHTML),e.setData("text/plain",Iy(m)),l.ownerDocument.body.removeChild(m),e}}},t.insertData=function(e){var r,o,i=e.getData("application/x-slate-fragment");if(i){var a=decodeURIComponent(window.atob(i)),u=JSON.parse(a);t.insertFragment(u)}else{var s=e.getData("text/plain"),l=e.getData("text/html");if(l)t.dangerouslyInsertHtml(l);else if(s){var c=s.split(/\r\n|\r|\n/),f=!1;try{for(var d=Qg(c),p=d.next();!p.done;p=d.next()){var h=p.value;f&&on.splitNodes(t,{always:!0}),n(h),f=!0}}catch(g){r={error:g}}finally{try{p&&!p.done&&(o=d.return)&&o.call(d)}finally{if(r)throw r.error}}}}},t},zw=function(e){return null!=e},$w={object:!0,function:!0,undefined:!0},Hw=/^\s*class[\s{/}]/,Vw=Function.prototype.toString,Uw=function(e){return!!function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(t){return!1}return!function(e){if(!zw(t=e)||!hasOwnProperty.call($w,typeof t))return!1;var t;try{return!!e.constructor&&e.constructor.prototype===e}catch(t){return!1}}(e)}(e)&&!Hw.test(Vw.call(e))},Ww=function(e){return null!=e},qw=Object.keys,Gw=function(){try{return Object.keys("primitive"),!0}catch(eg){return!1}}()?Object.keys:function(e){return qw(Ww(e)?Object(e):e)},Kw=function(e){if(!Ww(e))throw new TypeError("Cannot use null or undefined");return e},Yw=Math.max,Xw=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}()?Object.assign:function(e,t){var n,r,o,i=Yw(arguments.length,2);for(e=Object(Kw(e)),o=function(r){try{e[r]=t[r]}catch(o){n||(n=o)}},r=1;r<i;++r)Gw(t=arguments[r]).forEach(o);if(void 0!==n)throw n;return e},Zw=Array.prototype.forEach,Jw=Object.create,Qw=function(e,t){var n;for(n in e)t[n]=e[n]},eE=function(e){var t=Jw(null);return Zw.call(arguments,(function(e){Ww(e)&&Qw(Object(e),t)})),t},tE="razdwatrzy",nE=String.prototype.indexOf,rE="function"==typeof tE.contains&&!0===tE.contains("dwa")&&!1===tE.contains("foo")?String.prototype.contains:function(e){return nE.call(this,e,arguments[1])>-1},oE=Xl((function(e){var t=e.exports=function(e,t){var n,r,o,i,a;return arguments.length<2||"string"!=typeof e?(i=t,t=e,e=null):i=arguments[2],zw(e)?(n=rE.call(e,"c"),r=rE.call(e,"e"),o=rE.call(e,"w")):(n=o=!0,r=!1),a={value:t,configurable:n,enumerable:r,writable:o},i?Xw(eE(i),a):a};t.gs=function(e,t,n){var r,o,i,a;return"string"!=typeof e?(i=n,n=t,t=e,e=null):i=arguments[3],zw(t)?Uw(t)?zw(n)?Uw(n)||(i=n,n=void 0):n=void 0:(i=t,t=n=void 0):t=void 0,zw(e)?(r=rE.call(e,"c"),o=rE.call(e,"e")):(r=!0,o=!1),a={get:t,set:n,configurable:r,enumerable:o},i?Xw(eE(i),a):a}})),iE=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e},aE=Xl((function(e,t){var n,r,o,i,a,u,s,l=Function.prototype.apply,c=Function.prototype.call,f=Object.create,d=Object.defineProperty,p=Object.defineProperties,h=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var r,i;return iE(t),i=this,n.call(this,e,r=function(){o.call(i,e,r),l.call(t,this,arguments)}),r.__eeOnceListener__=t,this},i=function(e){var t,n,r,o,i;if(h.call(this,"__ee__")&&(o=this.__ee__[e]))if("object"==typeof o){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(o=o.slice(),t=0;r=o[t];++t)l.call(r,this,i)}else switch(arguments.length){case 1:c.call(o,this);break;case 2:c.call(o,this,arguments[1]);break;case 3:c.call(o,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];l.call(o,this,i)}},a={on:n=function(e,t){var n;return iE(t),h.call(this,"__ee__")?n=this.__ee__:(n=g.value=f(null),d(this,"__ee__",g),g.value=null),n[e]?"object"==typeof n[e]?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:o=function(e,t){var n,r,o,i;if(iE(t),!h.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==typeof(r=n[e]))for(i=0;o=r[i];++i)o!==t&&o.__eeOnceListener__!==t||(2===r.length?n[e]=r[i?0:1]:r.splice(i,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:i},u={on:oE(n),once:oE(r),off:oE(o),emit:oE(i)},s=p({},u),e.exports=t=function(e){return null==e?f(s):p(Object(e),u)},t.methods=a}));function uE(e){var t=Dy.get(e);return null==t&&(t=aE(),Dy.set(e,t)),t}var sE=new WeakMap;function lE(e,t){var n=sE.get(e);null==n&&(n=new Set,sE.set(e,n)),n.add(t)}function cE(e){return sE.get(e)||new Set}function fE(e){sE.set(e,new Set)}function dE(e){var t=qy.getTextarea(e).$textAreaContainer,n=t.width(),r=t.height(),o=t.offset();return{top:o.top,left:o.left,width:n,height:r}}function pE(e){var t={top:"0",left:"0"},n=e.selection;if(null==n)return t;var r=dE(e);if(null==r)return t;var o=r.top,i=r.left,a=r.width,u=r.height,s=qy.toDOMRange(e,n).getClientRects()[0];if(null==s)return t;s.width;var l=s.height,c={},f=s.top-o,d=s.left-i;if(d>a/2){var p=a-d;c.right=p+5+"px"}else c.left=d+5+"px";if(f>u/2){var h=u-f;c.bottom=h+5+"px"}else{var g=f+l;g<0&&(g=0),c.top=g+5+"px"}return c}function hE(e,t,n){void 0===n&&(n="modal");var r={top:"0",left:"0"};if(null==e.selection)return r;var o=ct.isElement(t)&&e.isVoid(t),i=ct.isElement(t)&&e.isInline(t),a=yy.get(t);if(null==a)return r;var u=a.getBoundingClientRect(),s=u.top,l=u.left,c=u.height,f=u.width;if(o){var d=function(e){var t=[];t.push(e);for(var n=0;t.length>0;){var r=t.pop();if(null==r)break;if(++n>1e4)break;var o=r.nodeName;if(1===r.nodeType){var i=o.toLowerCase();if(Ay.includes(i)||"iframe"===i||"video"===i)return r;var a=r.children||[],u=a.length;if(u)for(var s=u-1;s>=0;s--)t.push(a[s])}}return null}(a);if(null!=d){var p=d.getBoundingClientRect();s=p.top,c=p.height}}var h=dE(e);if(null==h)return r;var g,v=h.top,y=h.left,m=h.width,b=h.height,w={},E=s-v,D=l-y;if("bar"===n)return w.left=D+"px",E>40?w.bottom=b-E+5+"px":w.top=E+c+5+"px",w;if("modal"===n)return o?i?D>(m-f)/2?w.right=m-D+5+"px":w.left=D+f+5+"px":w.left="20px":w.left=D+"px",o?((g=E)<0&&(g=0),w.top=g+"px"):E>(b-c)/2?w.bottom=b-E+5+"px":((g=E+c)<0&&(g=0),w.top=g+5+"px"),w;throw new Error("type '"+n+"' is invalid")}function gE(e,t){Ub((function(){var n=dE(e);if(null!=n){var r,o=n.top,i=n.left,a=n.width,u=n.height,s=t.offset(),l=s.top,c=s.left,f=t.width(),d=t.height(),p=l-o,h=c-i,g=t.attr("style");if(g.indexOf("top")>=0&&(r=p+d-u)>0){var v=t.css("top"),y=parseInt(v.toString())-r;y<0&&(y=0),t.css("top",y+"px")}if(g.indexOf("bottom")>=0&&l<0){var m=t.css("bottom"),b=parseInt(m.toString())-Math.abs(l);t.css("bottom",b+"px")}if(g.indexOf("left")>=0&&(r=h+f-a)>0){var w=t.css("left"),E=parseInt(w.toString())-r;E<0&&(E=0),t.css("left",E+"px")}if(g.indexOf("right")>=0&&c<0){var D=t.css("right"),C=parseInt(D.toString())-Math.abs(c);t.css("right",C+"px")}}}))}var vE=Zh("slice"),yE=Ic("species"),mE=ec.Array,bE=Math.max;np({target:"Array",proto:!0,forced:!vE},{slice:function(e,t){var n,r,o,i=Fd(this),a=id(i),u=Nd(e,a),s=Nd(void 0===t?a:t,a);if(ad(i)&&(n=i.constructor,(hd(n)&&(n===mE||ad(n.prototype))||zc(n)&&null===(n=n[yE]))&&(n=void 0),n===mE||void 0===n))return wm(i,u,s);for(r=new(void 0===n?mE:n)(bE(s-u,0)),o=0;u<s;u++,o++)u in i&&Gp(r,o,i[u]);return r.length=o,r}});var wE=_d.f,EE=lc("".startsWith),DE=lc("".slice),CE=Math.min,xE=Lp("startsWith"),SE=!xE&&!!function(){var e=wE(String.prototype,"startsWith");return e&&!e.writable}();np({target:"String",proto:!0,forced:!SE&&!xE},{startsWith:function(e){var t=fp(fc(this));Np(e);var n=od(CE(arguments.length>1?arguments[1]:void 0,t.length)),r=fp(e);return EE?EE(t,r,n):DE(t,n,n+r.length)===r}});var AE=Object.assign,OE=Object.defineProperty,kE=lc([].concat),BE=!AE||Bc((function(){if(Mc&&1!==AE({b:1},AE(OE({},"a",{enumerable:!0,get:function(){OE(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=AE({},e)[n]||rp(AE({},t)).join("")!=r}))?function(e,t){for(var n=pc(e),r=arguments.length,o=1,i=Ud.f,a=Bd.f;r>o;)for(var u,s=Qf(arguments[o++]),l=i?kE(rp(s),i(s)):rp(s),c=l.length,f=0;c>f;)u=l[f++],Mc&&!Yc(a,s,u)||(n[u]=s[u]);return n}:AE;np({target:"Object",stat:!0,forced:Object.assign!==BE},{assign:BE});var FE=["props","attrs","style","dataset","on","hook"];function TE(e){var t=e.data,n=void 0===t?{}:t,r=e.children,o=void 0===r?[]:r;Object.keys(n).forEach((function(t){var r,o,i=n[t];if("key"!==t){if(!FE.includes(t)){if(t.startsWith("data-")){var a=t.slice(5);return a=va(a),function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.dataset&&(n.dataset={}),Object.assign(n.dataset,t)}(e,((r={})[a]=i,r)),void delete n[t]}!function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={}),Object.assign(n.props,t)}(e,(o={},o[t]=i,o)),delete n[t]}}else e.key=i})),o.length>0&&o.forEach((function(e){"string"!=typeof e&&TE(e)}))}var _E=[];var PE={};function jE(e,t,n){return xi(n.isInline(e)?"span":"div",null,t)}function NE(e,t){return void 0===t&&(t=!1),xi("span",{"data-slate-string":!0},t?e+"\n":e)}function IE(e,t){return void 0===e&&(e=0),void 0===t&&(t=!1),xi("span",{"data-slate-zero-width":t?"n":"z","data-slate-length":e},"\ufeff",t?xi("br",null):null)}function LE(e,t,n,r){return dy.set(e,t),py.set(e,n),ct.isElement(e)?function(e,t){var n,r=qy.findKey(t,e),o=t.isInline(e),i=vt.isVoid(t,e),a=qb(r.id),u={id:a,key:r.id,"data-slate-node":"element","data-slate-inline":o},s=e.type,l=e.children,c=void 0===l?[]:l,f=function(e){return PE[e]||jE}(s);n=i?null:c.map((function(n,r){return LE(n,r,e,t)}));var d=f(e,n,t);if(i){u["data-slate-void"]=!0;var p=o?"span":"div",h=ev(Et.texts(e),1),g=ev(h[0],1)[0],v=xi(p,{"data-slate-spacer":!0,style:{height:"0",color:"transparent",outline:"none",position:"absolute"}},LE(g,0,e,t));d=xi(p,{style:{position:"relative"}},d,v),dy.set(g,0),py.set(g,e)}return null==d.data&&(d.data={}),Object.assign(d.data,u),i||o||(d=function(e,t){var n=t;return _E.forEach((function(r){n=r(e,t)})),n}(e,d)),Ub((function(){var t=Py(a);null!=t&&(vy.set(r,t),yy.set(e,t),gy.set(t,e))})),d}(e,r):function(e,t,n){if(null==e.text)throw new Error("Current node is not slate Text "+JSON.stringify(e));var r=qy.findKey(n,e),o=n.getConfig().decorate;if(null==o)throw new Error("Can not get config.decorate");var i=qy.findPath(n,e),a=o([e,i]),u=zt.decorations(e,a),s=u.map((function(r,o){var i=function(e,t,n,r,o){void 0===t&&(t=!1);var i=e.text,a=qy.findPath(o,n),u=St.parent(a);if(vt.isEditor(r))throw new Error("Text node "+JSON.stringify(n)+" parent is Editor");return o.isVoid(r)?IE(Et.string(r).length):""!==i||r.children[r.children.length-1]!==n||o.isInline(r)||""!==vt.string(o,u)?""===i?IE():t&&"\n"===i.slice(-1)?NE(i,!0):NE(i):IE(0,!0)}(r,o===u.length-1,e,t,n);return i=function(e,t){var n=t;return _E.forEach((function(t){n=t(e,n)})),n}(r,i),xi("span",{"data-slate-leaf":!0},i)})),l=function(e){return"w-e-text-"+e}(r.id),c=xi("span",{"data-slate-node":"text",id:l,key:r.id},s);return Ub((function(){var t=Py(l);null!=t&&(vy.set(r,t),yy.set(e,t),gy.set(t,e))})),c}(e,n,r)}function RE(e,t){var n,r=e.$scroll,o="w-e-textarea-"+e.id,i=t.getConfig(),a=i.readOnly,u=i.autoFocus,s=function(e,t){return void 0===t&&(t=!1),oi("div#"+e,{props:{contentEditable:!t}})}(o,a),l=t.children||[];s.children=l.map((function(e,n){var r=LE(e,n,t,t);return TE(r),r}));var c=ly.get(e);if(null==c&&(c=!0),c){var f=function(e,t){return Br('<div\n        id="'+e+'"\n        data-slate-editor\n        data-slate-node="value"\n        suppressContentEditableWarning\n        role="textarea"\n        spellCheck="true"\n        autoCorrect="true"\n        autoCapitalize="true"\n    ></div>')}(o);r.append(f),e.$textArea=f,n=f[0],(p=ni([si,yi,Di,fi,gi,ai]))(n,s),ly.set(e,!1),cy.set(e,p)}else{var d=fy.get(e),p=cy.get(e);if(null==d||null==p)return;n=d.elm,p(d,s)}if(null!=n||null!=(n=Py(o))){if((c?u:t.isFocused())&&n.focus({preventScroll:!0}),c){var h=ky(n);h&&by.set(t,h)}hy.set(t,n),yy.set(t,n),gy.set(n,t),fy.set(e,s)}}function ME(e){return"object"==typeof e&&null!=e&&1===e.nodeType}function zE(e,t){return(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e}function $E(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var n=getComputedStyle(e,null);return zE(n.overflowY,t)||zE(n.overflowX,t)||!!(o=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(t){return null}}(r=e))&&(o.clientHeight<r.scrollHeight||o.clientWidth<r.scrollWidth)}var r,o;return!1}function HE(e,t,n,r,o,i,a,u){return i<e&&a>t||i>e&&a<t?0:i<=e&&u<=n||a>=t&&u>=n?i-e-r:a>t&&u<n||i<e&&u>n?a-t+o:0}function VE(e,t){var n=window,r=t.scrollMode,o=t.block,i=t.inline,a=t.boundary,u=t.skipOverflowHiddenElements,s="function"==typeof a?a:function(e){return e!==a};if(!ME(e))throw new TypeError("Invalid target");for(var l=document.scrollingElement||document.documentElement,c=[],f=e;ME(f)&&s(f);){if((f=f.parentElement)===l){c.push(f);break}null!=f&&f===document.body&&$E(f)&&!$E(document.documentElement)||null!=f&&$E(f,u)&&c.push(f)}for(var d=n.visualViewport?n.visualViewport.width:innerWidth,p=n.visualViewport?n.visualViewport.height:innerHeight,h=window.scrollX||pageXOffset,g=window.scrollY||pageYOffset,v=e.getBoundingClientRect(),y=v.height,m=v.width,b=v.top,w=v.right,E=v.bottom,D=v.left,C="start"===o||"nearest"===o?b:"end"===o?E:b+y/2,x="center"===i?D+m/2:"end"===i?w:D,S=[],A=0;A<c.length;A++){var O=c[A],k=O.getBoundingClientRect(),B=k.height,F=k.width,T=k.top,_=k.right,P=k.bottom,j=k.left;if("if-needed"===r&&b>=0&&D>=0&&E<=p&&w<=d&&b>=T&&E<=P&&D>=j&&w<=_)return S;var N=getComputedStyle(O),I=parseInt(N.borderLeftWidth,10),L=parseInt(N.borderTopWidth,10),R=parseInt(N.borderRightWidth,10),M=parseInt(N.borderBottomWidth,10),z=0,$=0,H="offsetWidth"in O?O.offsetWidth-O.clientWidth-I-R:0,V="offsetHeight"in O?O.offsetHeight-O.clientHeight-L-M:0;if(l===O)z="start"===o?C:"end"===o?C-p:"nearest"===o?HE(g,g+p,p,L,M,g+C,g+C+y,y):C-p/2,$="start"===i?x:"center"===i?x-d/2:"end"===i?x-d:HE(h,h+d,d,I,R,h+x,h+x+m,m),z=Math.max(0,z+g),$=Math.max(0,$+h);else{z="start"===o?C-T-L:"end"===o?C-P+M+V:"nearest"===o?HE(T,P,B,L,M+V,C,C+y,y):C-(T+B/2)+V/2,$="start"===i?x-j-I:"center"===i?x-(j+F/2)+H/2:"end"===i?x-_+R+H:HE(j,_,F,I,R+H,x,x+m,m);var U=O.scrollLeft,W=O.scrollTop;C+=W-(z=Math.max(0,Math.min(W+z,O.scrollHeight-B+V))),x+=U-($=Math.max(0,Math.min(U+$,O.scrollWidth-F+H)))}S.push({el:O,top:z,left:$})}return S}function UE(e){return e===Object(e)&&0!==Object.keys(e).length}function WE(e,t){return Fy(t)&&qy.hasDOMNode(e,t,{editable:!0})}function qE(e,t){if(e.getConfig().readOnly)return!1;var n=GE(e,t)&&qy.toSlateNode(e,t);return vt.isVoid(e,n)}function GE(e,t){return Fy(t)&&qy.hasDOMNode(e,t)}function KE(e,t,n){void 0===n&&(n=!1);var r=t.selection,o=t.getConfig(),i=qy.findDocumentOrShadowRoot(t).getSelection();if(i&&(!e.isComposing||n)&&t.isFocused()){var a="None"!==i.type;if(r||a){var u=hy.get(t),s=!1;if(u.contains(i.anchorNode)&&u.contains(i.focusNode)&&(s=!0),a&&s&&r){var l=qy.toSlateRange(t,i,{exactMatch:!0,suppressThrow:!0});if(l&&Pt.equals(l,r)){var c=!0;if(Pt.isCollapsed(r)){var f=i.anchorNode,d=i.anchorOffset;if(f===u){var p=u.childNodes,h=void 0;(h=p[d])&&h.matches("table")&&(c=!1),(h=p[d-1])&&h.matches("table")&&(c=!1)}}if(c)return}}if(!r||qy.hasRange(t,r)){e.isUpdatingSelection=!0;var g=r&&qy.toDOMRange(t,r);if(g){Pt.isBackward(r)?i.setBaseAndExtent(g.endContainer,g.endOffset,g.startContainer,g.startOffset):i.setBaseAndExtent(g.startContainer,g.startOffset,g.endContainer,g.endOffset);var v=g.startContainer.parentElement;if(!v.closest("[data-slate-spacer]")){v.getBoundingClientRect=g.getBoundingClientRect.bind(g);var y=document.body;(function(e,t){var n,r=!e.ownerDocument.documentElement.contains(e);if(UE(t)&&"function"==typeof t.behavior)return t.behavior(r?[]:VE(e,t));if(!r){var o=!1===(n=t)?{block:"end",inline:"nearest"}:UE(n)?n:{block:"start",inline:"nearest"};(function(e,t){void 0===t&&(t="auto");var n="scrollBehavior"in document.body.style;e.forEach((function(e){var r=e.el,o=e.top,i=e.left;r.scroll&&n?r.scroll({top:o,left:i,behavior:t}):(r.scrollTop=o,r.scrollLeft=i)}))})(VE(e,o),o.behavior)}})(v,{scrollMode:"if-needed",boundary:o.scroll?u.parentElement:y,block:"end",behavior:"smooth"}),delete v.getBoundingClientRect}}else i.removeAllRanges();setTimeout((function(){g&&zy&&u.focus(),e.isUpdatingSelection=!1}))}else t.selection=qy.toSlateRange(t,i,{exactMatch:!1,suppressThrow:!1})}}}var YE=new WeakMap,XE=new WeakMap,ZE={bold:"mod+b",compose:["down","left","right","up","backspace","enter"],moveBackward:"left",moveForward:"right",moveWordBackward:"ctrl+left",moveWordForward:"ctrl+right",deleteBackward:"shift?+backspace",deleteForward:"shift?+delete",extendBackward:"shift+left",extendForward:"shift+right",italic:"mod+i",splitBlock:"shift?+enter",undo:"mod+z",tab:"tab",selectAll:"mod+a"},JE={moveLineBackward:"opt+up",moveLineForward:"opt+down",moveWordBackward:"opt+left",moveWordForward:"opt+right",deleteBackward:["ctrl+backspace","ctrl+h"],deleteForward:["ctrl+delete","ctrl+d"],deleteLineBackward:"cmd+shift?+backspace",deleteLineForward:["cmd+shift?+delete","ctrl+k"],deleteWordBackward:"opt+shift?+backspace",deleteWordForward:"opt+shift?+delete",extendLineBackward:"opt+shift+up",extendLineForward:"opt+shift+down",redo:"cmd+shift+z",transposeCharacter:"ctrl+t"},QE={deleteWordBackward:"ctrl+shift?+backspace",deleteWordForward:"ctrl+shift?+delete",redo:["ctrl+y","ctrl+shift+z"]},eD=function(e){var t=ZE[e],n=JE[e],r=QE[e],o=t&&Aa(t),i=n&&Aa(n),a=r&&Aa(r);return function(e){return!(!o||!o(e))||!!(My&&i&&i(e))||!(My||!a||!a(e))}},tD={isBold:eD("bold"),isCompose:eD("compose"),isMoveBackward:eD("moveBackward"),isMoveForward:eD("moveForward"),isDeleteBackward:eD("deleteBackward"),isDeleteForward:eD("deleteForward"),isDeleteLineBackward:eD("deleteLineBackward"),isDeleteLineForward:eD("deleteLineForward"),isDeleteWordBackward:eD("deleteWordBackward"),isDeleteWordForward:eD("deleteWordForward"),isExtendBackward:eD("extendBackward"),isExtendForward:eD("extendForward"),isExtendLineBackward:eD("extendLineBackward"),isExtendLineForward:eD("extendLineForward"),isItalic:eD("italic"),isMoveLineBackward:eD("moveLineBackward"),isMoveLineForward:eD("moveLineForward"),isMoveWordBackward:eD("moveWordBackward"),isMoveWordForward:eD("moveWordForward"),isRedo:eD("redo"),isSplitBlock:eD("splitBlock"),isTransposeCharacter:eD("transposeCharacter"),isUndo:eD("undo"),isTab:eD("tab"),isSelectAll:eD("selectAll")};function nD(e){e.preventDefault()}var rD={beforeinput:function(e,t,n){var r=e,o=n.getConfig().readOnly;if(Wy&&!o&&WE(n,r.target)){var i=n.selection,a=r.inputType,u=r.dataTransfer||r.data||void 0;if("insertCompositionText"!==a&&"deleteCompositionText"!==a){if(r.preventDefault(),!a.startsWith("delete")||a.startsWith("deleteBy")){var s=ev(r.getTargetRanges(),1)[0];if(s){var l=qy.toSlateRange(n,s,{exactMatch:!1,suppressThrow:!1});i&&Pt.equals(i,l)||on.select(n,l)}}if(i&&Pt.isExpanded(i)&&a.startsWith("delete")){var c=a.endsWith("Backward")?"backward":"forward";vt.deleteFragment(n,{direction:c})}else switch(a){case"deleteByComposition":case"deleteByCut":case"deleteByDrag":vt.deleteFragment(n);break;case"deleteContent":case"deleteContentForward":vt.deleteForward(n);break;case"deleteContentBackward":vt.deleteBackward(n);break;case"deleteEntireSoftLine":vt.deleteBackward(n,{unit:"line"}),vt.deleteForward(n,{unit:"line"});break;case"deleteHardLineBackward":vt.deleteBackward(n,{unit:"block"});break;case"deleteSoftLineBackward":vt.deleteBackward(n,{unit:"line"});break;case"deleteHardLineForward":vt.deleteForward(n,{unit:"block"});break;case"deleteSoftLineForward":vt.deleteForward(n,{unit:"line"});break;case"deleteWordBackward":vt.deleteBackward(n,{unit:"word"});break;case"deleteWordForward":vt.deleteForward(n,{unit:"word"});break;case"insertLineBreak":case"insertParagraph":vt.insertBreak(n);break;case"insertFromDrop":case"insertFromPaste":case"insertFromYank":case"insertReplacementText":case"insertText":if("insertFromPaste"===a&&!Cy.get(n))break;u instanceof DataTransfer?n.insertData(u):"string"==typeof u&&vt.insertText(n,u)}}}},blur:function(e,t,n){var r=e,o=t.isUpdatingSelection,i=t.latestElement;if(!n.getConfig().readOnly&&!o&&WE(n,r.target)){var a=qy.findDocumentOrShadowRoot(n);if(i!==a.activeElement){var u=r.relatedTarget;if(!(u===qy.toDOMNode(n,n)||By(u)&&u.hasAttribute("data-slate-spacer"))){if(null!=u&&Fy(u)&&qy.hasDOMNode(n,u)){var s=qy.toSlateNode(n,u);if(ct.isElement(s)&&!n.isVoid(s))return}if($y){var l=a.getSelection();null==l||l.removeAllRanges()}wy.delete(n)}}}},focus:function(e,t,n){var r=qy.toDOMNode(n,n),o=qy.findDocumentOrShadowRoot(n);t.latestElement=o.activeElement,zy&&e.target!==r?r.focus():wy.set(n,!0)},click:function(e,t,n){if(!n.getConfig().readOnly&&GE(n,e.target)&&Fy(e.target)){var r=qy.toSlateNode(n,e.target),o=qy.findPath(n,r);if(vt.hasPath(n,o)&&Et.get(n,o)===r){var i=vt.start(n,o),a=vt.end(n,o),u=vt.void(n,{at:i}),s=vt.void(n,{at:a});if(u&&s&&St.equals(u[1],s[1])){var l=vt.range(n,i);on.select(n,l)}}}},compositionstart:function(e,t,n){if(WE(n,e.target)){var r=n.selection;if(r&&Pt.isExpanded(r)&&(vt.deleteFragment(n),Promise.resolve().then((function(){KE(t,n,!0)}))),r&&Pt.isCollapsed(r)){var o=qy.toDOMRange(n,r).startContainer,i=o.textContent||"";YE.set(n,i),XE.set(n,o)}t.isComposing=!0,function(e,t){var n;t.getConfig().placeholder&&t.isEmpty()&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1)}(t,n)}},compositionend:function(e,t,n){var r=e;if(WE(n,r.target)){t.isComposing=!1;var o=n.selection;if(null!=o){(Uy||zy)&&qy.cleanExposedTexNodeInSelectionBlock(n);for(var i=Pt.isBackward(o)?o.focus:o.anchor,a=ev(vt.node(n,[i.path[0]]),1)[0],u=0;u<i.path.length;u++){var s=ev(vt.node(n,i.path.slice(0,u+1)),1)[0];if(ct.isElement(s)&&(($y||zy)&&"link"===s.type||"code"===s.type)){qy.setNewKey(a);break}}var l=r.data;if(l){if(n.getConfig().maxLength){var c=qy.getLeftLengthOfMaxLength(n);c<l.length?(qy.toDOMRange(n,o).startContainer.textContent=YE.get(n)||"",c>0&&vt.insertText(n,l.slice(0,c)),t.changeViewState()):vt.insertText(n,l)}else vt.insertText(n,l);$y||setTimeout((function(){var e=n.selection;if(null!=e){var t=XE.get(n);null!=t&&qy.toDOMRange(n,e).startContainer!==t&&(t.textContent=YE.get(n)||"")}}))}}}},compositionupdate:function(e,t,n){WE(n,e.target)&&(t.isComposing=!0)},keydown:function(e,t,n){var r=e,o=n.selection;if(!n.getConfig().readOnly&&!t.isComposing&&WE(n,r.target)){if(function(e,t){var n=ny.get(e),r=n&&n.getMenus(),o=oy.get(e),i=o&&o.getMenus(),a=Jg(Jg({},r),i);for(var u in a){var s=a[u],l=s.hotkey;if(l&&Sa(l,t)&&!s.isDisabled(e)){var c=s.getValue(e);s.exec(e,c)}}}(n,r),tD.isTab(r))return nD(r),void n.handleTab();if(tD.isRedo(r))return nD(r),void("function"==typeof n.redo&&n.redo());if(tD.isUndo(r))return nD(r),void("function"==typeof n.undo&&n.undo());if(tD.isMoveLineBackward(r))return nD(r),void on.move(n,{unit:"line",reverse:!0});if(tD.isMoveLineForward(r))return nD(r),void on.move(n,{unit:"line"});if(tD.isExtendLineBackward(r))return nD(r),void on.move(n,{unit:"line",edge:"focus",reverse:!0});if(tD.isExtendLineForward(r))return nD(r),void on.move(n,{unit:"line",edge:"focus"});if(tD.isMoveBackward(r))return nD(r),void(o&&Pt.isCollapsed(o)?on.move(n,{reverse:!0}):on.collapse(n,{edge:"start"}));if(tD.isMoveForward(r))return nD(r),void(o&&Pt.isCollapsed(o)?on.move(n):on.collapse(n,{edge:"end"}));if(tD.isMoveWordBackward(r))return nD(r),o&&Pt.isExpanded(o)&&on.collapse(n,{edge:"focus"}),void on.move(n,{unit:"word",reverse:!0});if(tD.isMoveWordForward(r))return nD(r),o&&Pt.isExpanded(o)&&on.collapse(n,{edge:"focus"}),void on.move(n,{unit:"word"});if(tD.isSelectAll(r))return nD(r),void n.selectAll();if(Wy){if((Uy||$y)&&o&&(tD.isDeleteBackward(r)||tD.isDeleteForward(r))&&Pt.isCollapsed(o)){var i=Et.parent(n,o.anchor.path);if(ct.isElement(i)&&vt.isVoid(n,i)&&vt.isInline(n,i))return r.preventDefault(),void on.delete(n,{unit:"block"})}}else{if(tD.isBold(r)||tD.isItalic(r)||tD.isTransposeCharacter(r))return void nD(r);if(tD.isSplitBlock(r))return nD(r),void vt.insertBreak(n);if(tD.isDeleteBackward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"backward"}):vt.deleteBackward(n));if(tD.isDeleteForward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"forward"}):vt.deleteForward(n));if(tD.isDeleteLineBackward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"backward"}):vt.deleteBackward(n,{unit:"line"}));if(tD.isDeleteLineForward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"forward"}):vt.deleteForward(n,{unit:"line"}));if(tD.isDeleteWordBackward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"backward"}):vt.deleteBackward(n,{unit:"word"}));if(tD.isDeleteWordForward(r))return nD(r),void(o&&Pt.isExpanded(o)?vt.deleteFragment(n,{direction:"forward"}):vt.deleteForward(n,{unit:"word"}))}}},keypress:function(e,t,n){if(!Wy&&!n.getConfig().readOnly&&WE(n,e.target)){e.preventDefault();var r=e.key;vt.insertText(n,r)}},copy:function(e,t,n){var r=e;if(WE(n,r.target)){r.preventDefault();var o=r.clipboardData;null!=o&&n.setFragmentData(o)}},cut:function(e,t,n){var r=e,o=n.selection;if(!n.getConfig().readOnly&&WE(n,r.target)){r.preventDefault();var i=r.clipboardData;if(null!=i&&(n.setFragmentData(i),o))if(Pt.isExpanded(o))vt.deleteFragment(n);else{var a=Et.parent(n,o.anchor.path);vt.isVoid(n,a)&&on.delete(n)}}},paste:function(e,t,n){Cy.set(n,!0);var r,o=e;if(!n.getConfig().readOnly&&WE(n,o.target)){var i=n.getConfig().customPaste;if(i&&!1===i(n,o))return void Cy.set(n,!1);if(!Wy||(r=o).clipboardData&&""!==r.clipboardData.getData("text/plain")&&1===r.clipboardData.types.length){o.preventDefault();var a=o.clipboardData;null!=a&&n.insertData(a)}}},dragover:function(e,t,n){if(GE(n,e.target)){var r=qy.toSlateNode(n,e.target);vt.isVoid(n,r)&&e.preventDefault()}},dragstart:function(e,t,n){var r=e;if(GE(n,r.target)&&!n.getConfig().readOnly){var o=qy.toSlateNode(n,r.target),i=qy.findPath(n,o);if(vt.isVoid(n,o)||vt.void(n,{at:i,voids:!0})){var a=vt.range(n,i);on.select(n,a)}var u=r.dataTransfer;null!=u&&(t.isDraggingInternally=!0,n.setFragmentData(u))}},dragend:function(e,t,n){var r=e;n.getConfig().readOnly||t.isDraggingInternally&&GE(n,r.target)&&(t.isDraggingInternally=!1)},drop:function(e,t,n){var r=e,o=r.dataTransfer;if(!n.getConfig().readOnly&&GE(n,r.target)&&null!=o&&!(Wy&&$y&&o.files.length>0)){r.preventDefault();var i=n.selection,a=qy.findEventRange(n,r);on.select(n,a),t.isDraggingInternally&&(i&&on.delete(n,{at:i}),t.isDraggingInternally=!1),n.insertData(o),n.isFocused()||n.focus()}}},oD=1,iD=function(){function e(e){var t=this;this.id=oD++,this.$textArea=null,this.$progressBar=Br('<div class="w-e-progress-bar"></div>'),this.$maxLengthInfo=Br('<div class="w-e-max-length-info"></div>'),this.isComposing=!1,this.isUpdatingSelection=!1,this.isDraggingInternally=!1,this.latestElement=null,this.showPlaceholder=!1,this.$placeholder=null,this.latestEditorSelection=null,this.onDOMSelectionChange=Wo((function(){var e=t.editorInstance;!function(e,t){var n=e.isComposing,r=e.isUpdatingSelection,o=e.isDraggingInternally;if(!(t.getConfig().readOnly||n||r||o)){var i=qy.findDocumentOrShadowRoot(t),a=i.activeElement,u=qy.toDOMNode(t,t),s=i.getSelection();if(a===u?(e.latestElement=a,wy.set(t,!0)):wy.delete(t),!s)return on.deselect(t);var l=s.anchorNode,c=s.focusNode,f=WE(t,l)||qE(t,l),d=WE(t,c)||qE(t,c);if(f&&d){var p=qy.toSlateRange(t,s,{exactMatch:!1,suppressThrow:!1});on.select(t,p)}else on.deselect(t)}}(t,e)}),100);var n=Br(e);if(0===n.length)throw new Error("Cannot find textarea DOM by selector '"+e+"'");this.$box=n;var r=Br('<div class="w-e-text-container"></div>');r.append(this.$progressBar),r.append(this.$maxLengthInfo),n.append(r);var o=Br('<div class="w-e-scroll"></div>');r.append(o),this.$scroll=o,this.$textAreaContainer=r,Ub((function(){var e=t.editorInstance,n=qy.getWindow(e);n.document.addEventListener("selectionchange",t.onDOMSelectionChange),e.on("destroyed",(function(){n.document.removeEventListener("selectionchange",t.onDOMSelectionChange)})),r.on("click",(function(){return e.hidePanelOrModal()})),e.on("change",t.changeViewState.bind(t));var o=e.getConfig().onChange;o&&e.on("change",(function(){return o(e)})),t.onFocusAndOnBlur(),e.on("change",t.changeMaxLengthInfo.bind(t)),t.bindEvent()}))}return Object.defineProperty(e.prototype,"editorInstance",{get:function(){var e=ey.get(this);if(null==e)throw new Error("Can not get editor instance");return e},enumerable:!1,configurable:!0}),e.prototype.bindEvent=function(){var e=this,t=this.$textArea,n=this.$scroll,r=this.editorInstance;null!=t&&(ko(rD,(function(n,o){t.on(o,(function(t){n(t,e,r)}))})),r.getConfig().scroll&&(n.css("overflow-y","auto"),n.on("scroll",Wo((function(){r.emit("scroll")}),100))))},e.prototype.onFocusAndOnBlur=function(){var e=this,t=this.editorInstance,n=t.getConfig(),r=n.onBlur,o=n.onFocus;this.latestEditorSelection=t.selection,t.on("change",(function(){null==e.latestEditorSelection&&null!=t.selection?setTimeout((function(){return o&&o(t)})):null!=e.latestEditorSelection&&null==t.selection&&setTimeout((function(){return r&&r(t)})),e.latestEditorSelection=t.selection}))},e.prototype.changeMaxLengthInfo=function(){var e=this.editorInstance,t=e.getConfig().maxLength;if(t){var n=t-qy.getLeftLengthOfMaxLength(e);this.$maxLengthInfo[0].innerHTML=n+"/"+t}},e.prototype.changeProgress=function(e){var t=this.$progressBar;t.css("width",e+"%"),e>=100&&setTimeout((function(){t.hide(),t.css("width","0"),t.show()}),1e3)},e.prototype.changeViewState=function(){var e=this,t=this.editorInstance;RE(this,t),function(e,t){var n,r=t.getConfig().placeholder;if(r){var o=t.isEmpty();if(o&&!e.showPlaceholder&&!e.isComposing){if(null==e.$placeholder){var i=Br('<div class="w-e-text-placeholder">'+r+"</div>");e.$textAreaContainer.append(i),e.$placeholder=i}return e.$placeholder.show(),void(e.showPlaceholder=!0)}!o&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1)}}(this,t),Ub((function(){KE(e,t)}))},e.prototype.destroy=function(){this.$textAreaContainer.remove()},e}();function aD(e){e.removeAttr("width"),e.removeAttr("height"),e.removeAttr("fill"),e.removeAttr("class"),e.removeAttr("t"),e.removeAttr("p-id");var t=e.children();t.length&&aD(t)}function uD(){return Br('<svg viewBox="0 0 1024 1024"><path d="M498.7 655.8l-197.6-268c-8.1-10.9-0.3-26.4 13.3-26.4h395.2c13.6 0 21.4 15.4 13.3 26.4l-197.6 268c-6.6 9-20 9-26.6 0z"></path></svg>')}function sD(){return Br('<div class="w-e-bar-divider"></div>')}function lD(e,t,n,r,o){if(void 0===o&&(o=!1),t){if(r){var i=My?"cmd":"ctrl";r=r.replace("mod",i)}if(o)r&&(e.attr("data-tooltip",r),e.addClass("w-e-menu-tooltip-v5"),e.addClass("tooltip-right"));else{var a=r?n+"\n"+r:n;e.attr("data-tooltip",a),e.addClass("w-e-menu-tooltip-v5")}}}Bg("match",(function(e,t,n){return[function(t){var n=fc(this),r=null==t?void 0:rf(t,e);return r?Yc(r,t,n):new RegExp(t)[e](fp(n))},function(e){var r=Gc(this),o=fp(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return zg(r,o);var a=r.unicode;r.lastIndex=0;for(var u,s=[],l=0;null!==(u=zg(r,o));){var c=fp(u[0]);s[l]=c,""===c&&(r.lastIndex=Tg(o,od(r.lastIndex),a)),l++}return 0===l?null:s}]}));var cD=function(){function e(e,t,n){var r=this;void 0===n&&(n=!1),this.$elem=Br('<div class="w-e-bar-item"></div>'),this.$button=Br('<button type="button"></button>'),this.disabled=!1,this.menu=t;var o=t.tag,i=t.width;if("button"!==o)throw new Error("Invalid tag '"+o+"', expected 'button'");var a=t.title,u=t.hotkey,s=void 0===u?"":u,l=t.iconSvg,c=void 0===l?"":l,f=this.$button;if(c){var d=Br(c);aD(d),f.append(d)}else f.text(a);lD(f,c,a,s,n),n&&c&&f.append(Br('<span class="title">'+a+"</span>")),i&&f.css("width",i+"px"),f.attr("data-menu-key",e),this.$elem.append(f),Ub((function(){return r.init()}))}return e.prototype.init=function(){var e=this;this.setActive(),this.setDisabled(),this.$button.on("click",(function(t){t.preventDefault(),CD(e).hidePanelOrModal(),e.disabled||(e.exec(),e.onButtonClick())}))},e.prototype.exec=function(){var e=CD(this),t=this.menu,n=t.getValue(e);t.exec(e,n)},e.prototype.setActive=function(){var e=CD(this),t=this.$button,n="active";this.menu.isActive(e)?t.addClass(n):t.removeClass(n)},e.prototype.setDisabled=function(){var e=CD(this),t=this.$button,n=this.menu.isDisabled(e);(null==e.selection||e.isDisabled())&&(n=!0),this.menu.alwaysEnable&&(n=!1);var r="disabled";n?t.addClass(r):t.removeClass(r),this.disabled=n},e.prototype.changeMenuState=function(){this.setActive(),this.setDisabled()},e}(),fD=function(e){function t(t,n,r){return void 0===r&&(r=!1),e.call(this,t,n,r)||this}return Zg(t,e),t.prototype.onButtonClick=function(){},t}(cD),dD=function(){function e(e){this.isShow=!1,this.showTime=0,this.record(e)}return e.prototype.record=function(e){var t=ay.get(e);null==t&&(t=new Set,ay.set(e,t)),t.add(this),uy.set(this,e)},e.prototype.renderContent=function(e){var t=this.$elem;t.empty(),t.append(e);var n=this.genSelfElem();n&&t.append(n)},e.prototype.appendTo=function(e){var t=this.$elem;e.append(t)},e.prototype.show=function(){if(!this.isShow){this.showTime=Date.now(),this.$elem.show(),this.isShow=!0;var e=uy.get(this);e&&e.emit("modalOrPanelShow",this)}},e.prototype.hide=function(){if(this.isShow&&!(Date.now()-this.showTime<200)){this.$elem.hide(),this.isShow=!1;var e=uy.get(this);e&&e.emit("modalOrPanelHide")}},e}(),pD=function(e){function t(t){var n=e.call(this,t)||this;return n.type="dropPanel",n.$elem=Br('<div class="w-e-drop-panel"></div>'),n}return Zg(t,e),t.prototype.genSelfElem=function(){return null},t}(dD),hD=function(e){function t(t,n,r){void 0===r&&(r=!1);var o=e.call(this,t,n,r)||this;if(o.dropPanel=null,o.menu=n,n.showDropPanel){var i=uD();o.$button.append(i)}return o}return Zg(t,e),t.prototype.onButtonClick=function(){this.menu.showDropPanel&&this.handleDropPanel()},t.prototype.handleDropPanel=function(){var e=this.menu;if(null!=e.getPanelContentElem){var t=CD(this);if(null==this.dropPanel){var n=new pD(t),r=e.getPanelContentElem(t);n.renderContent(r),n.appendTo(this.$elem),n.show(),this.dropPanel=n}else{var o=this.dropPanel;o.isShow?o.hide():(r=e.getPanelContentElem(t),o.renderContent(r),o.show())}var i=this.dropPanel;if(i.isShow){var a=this.$elem,u=a.offset().left,s=a.parents(".w-e-bar");u-s.offset().left>=s.width()/2?i.$elem.css({left:"none",right:"0"}):i.$elem.css({left:"0",right:"none"})}}},t}(cD),gD=function(e){function t(t,n){void 0===n&&(n=0);var r=e.call(this,t)||this;r.type="modal",r.$elem=Br('<div class="w-e-modal"></div>'),r.width=0,n&&(r.width=n);var o=r.$elem;return o.on("click",(function(e){return e.stopPropagation()})),o.on("keyup",(function(e){"Escape"===e.code&&(r.hide(),t.restoreSelection())})),r}return Zg(t,e),t.prototype.genSelfElem=function(){var e=this,t=Br('<span class="btn-close"><svg viewBox="0 0 1024 1024"><path d="M1024 896.1024l-128 128L512 640 128 1024 0 896 384 512 0 128 128 0 512 384 896.1024 0l128 128L640 512z"></path></svg></span>'),n=uy.get(this);return t.on("click",(function(){e.hide(),null==n||n.restoreSelection()})),t},t.prototype.setStyle=function(e){var t=this.width,n=this.$elem;n.attr("style",""),t&&n.css("width",t+"px"),n.css(e)},t}(dD);function vD(e,t,n){var r=Br('<label class="babel-container"></label>');r.append("<span>"+e+"</span>");var o=Br('<input type="text" id="'+t+'" placeholder="'+(n||"")+'">');return r.append(o),[r[0],o[0]]}function yD(e,t){var n=Br('<div class="button-container"></div>'),r=Br('<button type="button" id="'+e+'">'+t+"</button>");return n.append(r),[n[0],r[0]]}var mD=function(e){function t(t,n,r){void 0===r&&(r=!1);var o=e.call(this,t,n,r)||this;return o.$body=Br("body"),o.modal=null,o.menu=n,o}return Zg(t,e),t.prototype.onButtonClick=function(){this.menu.showModal&&this.handleModal()},t.prototype.getPosition=function(){var e=CD(this),t=this.menu.getModalPositionNode(e);return ct.isElement(t)?hE(e,t,"modal"):pE(e)},t.prototype.handleModal=function(){var e=CD(this),t=this.menu;if(null==this.modal){var n=new gD(e,t.modalWidth);this.renderAndShowModal(n,!0),this.modal=n}else(n=this.modal).isShow?n.hide():this.renderAndShowModal(n,!1)},t.prototype.renderAndShowModal=function(e,t){void 0===t&&(t=!1);var n=CD(this),r=this.menu;if(null!=r.getModalContentElem){var o=qy.getTextarea(n),i=qy.getToolbar(n),a=((null==i?void 0:i.getConfig())||{}).modalAppendToBody,u=r.getModalContentElem(n);if(e.renderContent(u),a)e.setStyle({left:"0",right:"0"});else{var s=this.getPosition();e.setStyle(s)}t&&(a?e.appendTo(this.$body):e.appendTo(o.$textAreaContainer)),e.show(),a||gE(n,e.$elem),setTimeout((function(){n.blur()}))}},t}(cD),bD=function(e){function t(t,n){var r=e.call(this,t)||this;return r.type="selectList",r.$elem=Br('<div class="w-e-select-list"></div>'),n&&r.$elem.css("width",n+"px"),r.$elem.on("click",(function(e){e.stopPropagation()})),r}return Zg(t,e),t.prototype.renderList=function(e){var t=this.$elem;t.empty();var n=Br("<ul></ul>");e.forEach((function(e){var t=e.value,r=e.text,o=e.selected,i=e.styleForRenderMenuList,a=Br('<li data-value="'+t+'"></li>');if(i&&a.css(i),o){var u=Br('<svg viewBox="0 0 1446 1024"><path d="M574.116299 786.736392 1238.811249 48.517862C1272.390222 11.224635 1329.414799 7.827718 1366.75664 41.450462 1403.840015 74.840484 1406.731043 132.084741 1373.10189 169.433699L655.118888 966.834607C653.072421 969.716875 650.835807 972.514337 648.407938 975.210759 615.017957 1012.29409 558.292155 1015.652019 521.195664 982.250188L72.778218 578.493306C35.910826 545.297758 32.859041 488.584019 66.481825 451.242134 99.871807 414.158803 156.597563 410.800834 193.694055 444.202665L574.116299 786.736392Z"></path></svg>');a.append(u),a.addClass("selected")}a.append(Br('<span data-value="'+t+'">'+r+"</span>")),a.attr("title",r),n.append(a)})),t.append(n)},t.prototype.genSelfElem=function(){return null},t}(dD),wD=function(){function e(e,t,n){var r=this;void 0===n&&(n=!1),this.$elem=Br('<div class="w-e-bar-item"></div>'),this.$button=Br('<button type="button" class="select-button"></button>'),this.disabled=!1,this.selectList=null;var o=t.tag,i=t.title,a=t.width,u=t.iconSvg,s=void 0===u?"":u,l=t.hotkey,c=void 0===l?"":l;if("select"!==o)throw new Error("Invalid tag '"+o+"', expected 'select'");var f=this.$button;a&&f.css("width",a+"px"),f.attr("data-menu-key",e),lD(f,s,i,c,n),this.$elem.append(f),this.menu=t,Ub((function(){return r.init()}))}return e.prototype.init=function(){var e=this;this.setSelectedValue(),this.$button.on("click",(function(t){t.preventDefault(),CD(e).hidePanelOrModal(),e.trigger()}))},e.prototype.trigger=function(){var e=this,t=CD(this);if(!t.isDisabled()&&!this.disabled){var n=this.menu;if(null==this.selectList){this.selectList=new bD(t,n.selectPanelWidth);var r=this.selectList,o=n.getOptions(t);r.renderList(o),r.appendTo(this.$elem),r.show(),r.$elem.on("click","li",(function(t){var n=t.target;if(null!=n){t.preventDefault();var r=Br(n).attr("data-value");e.onChange(r)}}))}else(r=this.selectList).isShow?r.hide():(o=n.getOptions(t),r.renderList(o),r.show())}},e.prototype.onChange=function(e){var t=CD(this),n=this.menu;n.exec&&n.exec(t,e)},e.prototype.setSelectedValue=function(){var e=CD(this),t=this.menu,n=t.getValue(e),r=function(e,t){for(var n=e.length,r="",o=0;o<n;o++){var i=e[o];if(i.value===t){r=i.text;break}}return r}(t.getOptions(e),n.toString()),o=this.$button,i=uD();o.empty(),o.text(r),o.append(i)},e.prototype.setDisabled=function(){var e=CD(this),t=this.menu.isDisabled(e),n=this.$button;(null==e.selection||e.isDisabled())&&(t=!0);var r="disabled";t?n.addClass(r):n.removeClass(r),this.disabled=t},e.prototype.changeMenuState=function(){this.setSelectedValue(),this.setDisabled()},e}(),ED=function(){function e(e){this.$elem=Br('<div class="w-e-bar-item w-e-bar-item-group"></div>'),this.$container=Br('<div class="w-e-bar-item-menus-container"></div>'),this.$button=Br('<button type="button"></button>');var t=e.key,n=e.iconSvg,r=e.title,o=this.$elem,i=this.$button;if(n){var a=Br(n);aD(a),i.append(a)}else i.text(r);i.attr("data-menu-key",t);var u=uD();i.append(u),o.append(i);var s=this.$container;o.append(s);var l=this.createObserver();this.observe(l)}return e.prototype.appendBarItem=function(e){var t=e.$elem;this.$container.append(t)},e.prototype.observe=function(e){var t=this.$container;e.observe(t[0],{childList:!0,subtree:!0,attributes:!0})},e.prototype.createObserver=function(){var e=this,t=this.$container,n=this.$button,r=new MutationObserver((function(){var o=t.find("button"),i=o.length;if(0!==i){var a=0;o.each((function(e){Br(e).hasClass("disabled")&&a++})),r.disconnect(),a===i?n.addClass("disabled"):n.removeClass("disabled"),e.observe(r)}}));return r},e}(),DD=new WeakMap;function CD(e){var t=iy.get(e);if(null==t)throw new Error("Can not get editor instance");return t}function xD(e,t,n){void 0===n&&(n=!1);var r=DD.get(t);if(r)return r;var o=t.tag;if("button"===o){var i=t.showDropPanel,a=t.showModal;r=i?new hD(e,t,n):a?new mD(e,t,n):new fD(e,t,n)}if("select"===o&&(r=new wD(e,t,n)),null==r)throw new Error("Invalid tag in menu "+JSON.stringify(t));return DD.set(t,r),r}function SD(e,t){var n=e.selection;return null!=n&&!Pt.isCollapsed(n)&&!qy.getSelectedElems(e).some((function(t){if(e.isVoid(t))return!0;var n=t.type;return!!["pre","code","table"].includes(n)||void 0}))&&!!zt.isText(t)}var AD=function(){function e(){var e=this;this.$elem=Br('<div class="w-e-bar w-e-bar-hidden w-e-hover-bar"></div>'),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null,this.isShow=!1,this.changeHoverbarState=Ha((function(){var t=e.isShow,n=e.getSelectedNodeAndMenuKeys()||{},r=n.node,o=void 0===r?null:r,i=n.menuKeys,a=void 0===i?[]:i;null!=o&&e.changeItemsState(),o&&ct.isElement(o)&&t&&e.isSamePath(o,e.prevSelectedNode)||(e.hideAndClean(),null!=o&&(e.registerItems(a),e.setPosition(o),e.show()),e.prevSelectedNode=o)}),200),Ub((function(){var t=e.getEditorInstance(),n=e.$elem;n.on("mousedown",(function(e){return e.preventDefault()}),{passive:!1}),qy.getTextarea(t).$textAreaContainer.append(n),t.on("change",e.changeHoverbarState);var r=e.hideAndClean.bind(e);t.on("scroll",r),t.on("fullScreen",r),t.on("unFullScreen",r)}))}return e.prototype.getMenus=function(){return this.menus},e.prototype.hideAndClean=function(){var e=this.$elem;e.removeClass("w-e-bar-show").addClass("w-e-bar-hidden"),this.hoverbarItems=[],e.empty(),this.isShow=!1},e.prototype.checkPositionBottom=function(){var e=this.$elem,t=!1,n=window.innerHeight;n&&n>=360&&n-e[0].getBoundingClientRect().bottom<360&&(t=!0),t?e.addClass("w-e-bar-bottom"):e.removeClass("w-e-bar-bottom")},e.prototype.show=function(){this.$elem.removeClass("w-e-bar-hidden").addClass("w-e-bar-show"),this.isShow=!0,this.checkPositionBottom()},e.prototype.changeItemsState=function(){var e=this;Ub((function(){e.hoverbarItems.forEach((function(e){e.changeMenuState()}))}))},e.prototype.registerItems=function(e){var t=this,n=this.$elem;e.forEach((function(e){if("|"!==e)t.registerSingleItem(e);else{var r=sD();n.append(r)}}))},e.prototype.registerSingleItem=function(e){var t=this.getEditorInstance(),n=this.menus,r=n[e];if(null==r){var o=Yy[e];if(null==o)throw new Error("Not found menu item factory by key '"+e+"'");if("function"!=typeof o)throw new Error("Menu item factory (key='"+e+"') is not a function");r=o(),n[e]=r}var i=xD(e,r);this.hoverbarItems.push(i),iy.set(i,t),this.$elem.append(i.$elem)},e.prototype.setPosition=function(e){var t=this.getEditorInstance(),n=this.$elem;if(n.attr("style",""),ct.isElement(e)){var r=hE(t,e,"bar");return n.css(r),void gE(t,n)}if(zt.isText(e))return r=pE(t),n.css(r),void gE(t,n);throw new Error("hoverbar.setPosition error, current selected node is not elem nor text")},e.prototype.getSelectedNodeAndMenuKeys=function(){var e=this.getEditorInstance();if(null==e.selection)return null;var t=this.getHoverbarKeysConf(),n=null,r=[],o=function(o){var i=t[o],a=i.match,u=i.menuKeys,s=void 0===u?[]:u,l=a||function(e,t){return qy.checkNodeType(t,o)},c=ev(vt.nodes(e,{match:function(t){return l(e,t)},universal:!0}),1),f=c[0];if(null!=f)return n=f[0],r=s,"break"};for(var i in t)if("break"===o(i))break;return null==n||0===r.length?null:{node:n,menuKeys:r}},e.prototype.getEditorInstance=function(){var e=ry.get(this);if(null==e)throw new Error("Can not get editor instance");return e},e.prototype.getHoverbarKeysConf=function(){var e=this.getEditorInstance().getConfig().hoverbarKeys,t=void 0===e?{}:e,n=t.text;return n&&null==n.match&&(n.match=SD),t},e.prototype.isSamePath=function(e,t){if(null==e||null==t)return!1;var n=qy.findPath(null,e),r=qy.findPath(null,t);return St.equals(n,r)},e.prototype.destroy=function(){this.changeHoverbarState.cancel(),this.$elem.remove(),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null},e}();function OD(e,t,n,r){if(dy.set(e,t),py.set(e,n),ct.isElement(e)){var o=e.children;if((void 0===o?[]:o).forEach((function(t,n){return OD(t,n,e,r)})),vt.isVoid(r,e)){var i=ev(Et.texts(e),1),a=ev(i[0],1)[0];dy.set(a,0),py.set(a,e)}}}function kD(e){var t,n,r=e.selector,o=void 0===r?"":r,i=e.config,a=void 0===i?{}:i,u=e.content,s=e.html,l=e.plugins,c=void 0===l?[]:l,f=(e=>{var t=e,{apply:n}=t;return t.history={undos:[],redos:[]},t.redo=()=>{var{history:e}=t,{redos:n}=e;if(n.length>0){var r=n[n.length-1];lp.withoutSaving(t,(()=>{vt.withoutNormalizing(t,(()=>{for(var e of r)t.apply(e)}))})),e.redos.pop(),e.undos.push(r)}},t.undo=()=>{var{history:e}=t,{undos:n}=e;if(n.length>0){var r=n[n.length-1];lp.withoutSaving(t,(()=>{vt.withoutNormalizing(t,(()=>{var e=r.map(xt.inverse).reverse();for(var n of e)t.apply(n)}))})),e.redos.push(r),e.undos.pop()}},t.apply=e=>{var{operations:r,history:o}=t,{undos:i}=o,a=i[i.length-1],u=a&&a[a.length-1],s=((e,t)=>!(!t||"set_selection"!==e.type||"set_selection"!==t.type))(e,u),l=lp.isSaving(t),c=lp.isMerging(t);if(null==l&&(l=((e,t)=>"set_selection"!==e.type||null!=e.properties&&null!=e.newProperties)(e)),l){if(null==c&&(c=null!=a&&(0!==r.length||((e,t)=>"set_selection"===e.type||!(!t||"insert_text"!==e.type||"insert_text"!==t.type||e.offset!==t.offset+t.text.length||!St.equals(e.path,t.path))||!(!t||"remove_text"!==e.type||"remove_text"!==t.type||e.offset+e.text.length!==t.offset||!St.equals(e.path,t.path)))(e,u)||s)),a&&c)s&&a.pop(),a.push(e);else{var f=[e];i.push(f)}for(;i.length>100;)i.shift();(e=>"set_selection"!==e.type)(e)&&(o.redos=[])}n(e)},t})(function(e){var t=e,n=t.insertText,r=t.insertNode,o=t.insertFragment,i=t.dangerouslyInsertHtml;return t.insertText=function(e){if(t.getConfig().maxLength){var r=qy.getLeftLengthOfMaxLength(t);r<=0||(r<e.length?n(e.slice(0,r)):n(e))}else n(e)},t.insertNode=function(e){if(t.getConfig().maxLength){var n=qy.getLeftLengthOfMaxLength(t);n<=0||n<Et.string(e).length||r(e)}else r(e)},t.insertFragment=function(e){if(t.getConfig().maxLength)if(1!==e.length)e.forEach((function(e){t.insertNode(e)}));else{var n=e[0];if(qy.getLeftLengthOfMaxLength(t)<Et.string(n).length)return;o(e)}else o(e)},t.dangerouslyInsertHtml=function(e,n){if(void 0===e&&(e=""),void 0===n&&(n=!1),e)if(t.getConfig().maxLength){var r=qy.getLeftLengthOfMaxLength(t);if(!(r<=0)){var o=document.createElement("div");o.innerHTML=e,r<Array.from(o.childNodes).reduce((function(e,t){var n=t.nodeType,r=t.nodeName;return t?n===Oy.TEXT_NODE?e+(t.textContent||""):n===Oy.ELEMENT_NODE?Lw.has(r.toLowerCase())?e:e+(t.textContent||""):e:e}),"").length||i(e,n)}}else i(e,n)},t}(function(e){var t=e;return t.on=function(e,n){var r=uE(t);if(r.on(e,n),"destroyed"===e&&lE(t,n),"destroyed"!==e){var o=function(){return r.off(e,n)};r.on("destroyed",o),lE(t,o)}},t.once=function(e,n){uE(t).once(e,n)},t.off=function(e,n){uE(t).off(e,n)},t.emit=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=uE(t);o.emit.apply(o,tv([e],ev(n))),"destroyed"===e&&(cE(t).forEach((function(e){return o.off("destroyed",e)})),fE(t))},t}(function(e){var t=e;return t.select=function(e){on.select(t,e)},t.deselect=function(){var n=t.selection,r=qy.findDocumentOrShadowRoot(t).getSelection();r&&r.rangeCount>0&&r.removeAllRanges(),n&&on.deselect(e)},t.move=function(t,n){void 0===n&&(n=!1),t&&(t<0||on.move(e,{distance:t,unit:"character",reverse:n}))},t.moveReverse=function(e){t.move(e,!0)},t.restoreSelection=function(){var e=Ey.get(t);null!=e&&(t.focus(),on.select(t,e))},t.getSelectionPosition=function(){return pE(t)},t.getNodePosition=function(e){return hE(t,e)},t.isSelectedAll=function(){var e=t.selection;if(null==e)return!1;var n=ev(Pt.edges(e),2),r=n[0],o=n[1],i=ev(vt.edges(t,[]),2),a=i[0],u=i[1];return!(!Bt.equals(r,a)||!Bt.equals(o,u))},t.selectAll=function(){var e=vt.start(t,[]),n=vt.end(t,[]);on.select(t,{anchor:e,focus:n})},t}(function(e){var t=e,n=t.onChange,r=t.insertText,o=t.apply,i=t.deleteBackward;return t.insertText=function(e){t.getConfig().readOnly||r(e)},t.apply=function(e){var n,r,i,a,u,s,l,c,f=[];switch(e.type){case"insert_text":case"remove_text":case"set_node":try{for(var d=Qg(vt.levels(t,{at:e.path})),p=d.next();!p.done;p=d.next()){var h=ev(p.value,2),g=h[0],v=h[1],y=qy.findKey(t,g);f.push([v,y])}}catch(eg){n={error:eg}}finally{try{p&&!p.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}break;case"insert_node":case"remove_node":case"merge_node":case"split_node":try{for(var m=Qg(vt.levels(t,{at:St.parent(e.path)})),b=m.next();!b.done;b=m.next()){var w=ev(b.value,2);g=w[0],v=w[1],y=qy.findKey(t,g),f.push([v,y])}}catch(eg){i={error:eg}}finally{try{b&&!b.done&&(a=m.return)&&a.call(m)}finally{if(i)throw i.error}}break;case"move_node":try{for(var E=Qg(vt.levels(t,{at:St.common(St.parent(e.path),St.parent(e.newPath))})),D=E.next();!D.done;D=E.next()){var C=ev(D.value,2);g=C[0],v=C[1],y=qy.findKey(t,g),f.push([v,y])}}catch(eg){u={error:eg}}finally{try{D&&!D.done&&(s=E.return)&&s.call(E)}finally{if(u)throw u.error}}}o(e);try{for(var x=Qg(f),S=x.next();!S.done;S=x.next()){var A=ev(S.value,2);v=A[0],y=A[1],g=ev(vt.node(t,v),1)[0],my.set(g,y)}}catch(eg){l={error:eg}}finally{try{S&&!S.done&&(c=x.return)&&c.call(x)}finally{if(l)throw l.error}}},t.deleteBackward=function(n){if("line"!==n)return i(n);if(e.selection&&Pt.isCollapsed(e.selection)){var r=vt.above(e,{match:function(t){return vt.isBlock(e,t)},at:e.selection});if(r){var o=ev(r,2)[1],a=vt.range(e,o,e.selection.anchor),u=function(e,t){var n=vt.range(e,Pt.end(t)),r=Array.from(vt.positions(e,{at:t})),o=0,i=r.length,a=Math.floor(i/2);if(Kb(e,vt.range(e,r[o]),n))return vt.range(e,r[o],n);if(r.length<2)return vt.range(e,r[r.length-1],n);for(;a!==r.length&&a!==o;)Kb(e,vt.range(e,r[a]),n)?i=a:o=a,a=Math.floor((o+i)/2);return vt.range(e,r[i],n)}(t,a);Pt.isCollapsed(u)||on.delete(e,{at:u})}}},t.onChange=function(){var e=t.selection;null!=e&&Ey.set(t,e),t.emit("change"),n()},t.handleTab=function(){t.insertText("    ")},t.getHtml=function(){var e=t.children;return(void 0===e?[]:e).map((function(e){return Wb(e,t)})).join("")},t.getText=function(){var e=t.children;return(void 0===e?[]:e).map((function(e){return Et.string(e)})).join("\n")},t.getSelectionText=function(){var n=t.selection;return null==n?"":vt.string(e,n)},t.getElemsByType=function(e,n){var r,o;void 0===n&&(n=!1);var i=[],a=vt.nodes(t,{at:[],universal:!0});try{for(var u=Qg(a),s=u.next();!s.done;s=u.next()){var l=ev(s.value,1)[0];if(ct.isElement(l)&&(n?l.type.indexOf(e)>=0:l.type===e)){var c=qb(qy.findKey(t,l).id);i.push(Jg(Jg({},l),{id:c}))}}}catch(eg){r={error:eg}}finally{try{s&&!s.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}return i},t.getElemsByTypePrefix=function(e){return t.getElemsByType(e,!0)},t.isEmpty=function(){var e=t.children,n=void 0===e?[]:e;if(n.length>1)return!1;var r=n[0];if(null==r)return!0;if(ct.isElement(r)&&"paragraph"===r.type){var o=r.children,i=void 0===o?[]:o;if(i.length>1)return!1;var a=i[0];if(null==a)return!0;if(zt.isText(a)&&""===a.text)return!0}return!1},t.clear=function(){on.delete(t,{at:{anchor:vt.start(t,[]),focus:vt.end(t,[])}}),0===t.children.length&&on.insertNodes(t,[{type:"paragraph",children:[{text:""}]}])},t.getParentNode=function(e){return qy.getParentNode(t,e)},t.dangerouslyInsertHtml=function(e,n){if(void 0===e&&(e=""),void 0===n&&(n=!1),e){var r=document.createElement("div");r.innerHTML=e;var o=Array.from(r.childNodes);if(0!==(o=o.filter((function(e){var t=e.nodeType,n=e.nodeName;return t===Oy.TEXT_NODE||t===Oy.ELEMENT_NODE&&!Lw.has(n.toLowerCase())}))).length){var i=t.selection;if(null!=i){var a=null;qy.isSelectedEmptyParagraph(t)&&!n&&(a=[i.focus.path[0]]),r.setAttribute("hidden","true"),document.body.appendChild(r);var u=0;o.forEach((function(e){var n=e.nodeType,r=e.nodeName,o=e.textContent,i=void 0===o?"":o;if(n!==Oy.TEXT_NODE)if("BR"!==r){var a=e,s=!1;if(Yb.includes(r.toLowerCase()))s=!0;else for(var l in Jb)if(a.matches(l)){s=!0;break}if(s){var c=Bw(Br(a),t);return Array.isArray(c)?(c.forEach((function(e){return Rw(t,e)})),u++):(Rw(t,c),u++),void(qy.isSelectedVoidNode(t)&&t.move(1))}var f=window.getComputedStyle(a).display;qy.isSelectedEmptyParagraph(t)||f.indexOf("inline")<0&&t.insertBreak(),t.dangerouslyInsertHtml(a.innerHTML,!0)}else t.insertText("\n");else{if(!i||!i.trim())return;t.insertNode({text:i})}})),u&&a&&qy.isEmptyPath(t,a)&&on.removeNodes(t,{at:a}),r.remove()}}}},t.setHtml=function(e){void 0===e&&(e="");var n=t.isDisabled(),r=t.isFocused(),o=JSON.stringify(t.selection);t.enable(),t.focus(),t.clear();var i=Tw(t,e);if(on.insertFragment(t,i),r||(t.deselect(),t.blur()),n&&(t.deselect(),t.disable()),t.isFocused())try{t.select(JSON.parse(o))}catch(a){t.select(vt.start(t,[]))}},t}(function(e){var t=e;return t.getAllMenuKeys=function(){var e=[];for(var t in Yy)e.push(t);return e},t.getConfig=function(){var e=sy.get(t);if(null==e)throw new Error("Can not get editor config");return e},t.getMenuConfig=function(e){var n=t.getConfig().MENU_CONF;return(void 0===n?{}:n)[e]||{}},t.alert=function(e,n){void 0===n&&(n="info");var r=t.getConfig().customAlert;r&&r(e,n)},t}((n=Mw((t={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,onChange:()=>{},apply:e=>{for(var n of vt.pathRefs(t))At.transform(n,e);for(var r of vt.pointRefs(t))Ft.transform(r,e);for(var o of vt.rangeRefs(t))jt.transform(o,e);var i=new Set,a=[],u=e=>{if(e){var t=e.join(",");i.has(t)||(i.add(t),a.push(e))}},s=Se.get(t)||[],l=Pe(e);for(var c of s)u(St.transform(c,e));for(var f of l)u(f);Se.set(t,a),on.transform(t,e),t.operations.push(e),vt.normalize(t),"set_selection"===e.type&&(t.marks=null),Ae.get(t)||(Ae.set(t,!0),Promise.resolve().then((()=>{Ae.set(t,!1),t.onChange(),t.operations=[]})))},addMark:(e,n)=>{var{selection:r}=t;if(r)if(Pt.isExpanded(r))on.setNodes(t,{[e]:n},{match:zt.isText,split:!0});else{var o=_e(_e({},vt.marks(t)||{}),{},{[e]:n});t.marks=o,Ae.get(t)||t.onChange()}},deleteBackward:e=>{var{selection:n}=t;n&&Pt.isCollapsed(n)&&on.delete(t,{unit:e,reverse:!0})},deleteForward:e=>{var{selection:n}=t;n&&Pt.isCollapsed(n)&&on.delete(t,{unit:e})},deleteFragment:e=>{var{selection:n}=t;n&&Pt.isExpanded(n)&&on.delete(t,{reverse:"backward"===e})},getFragment:()=>{var{selection:e}=t;return e?Et.fragment(t,e):[]},insertBreak:()=>{on.splitNodes(t,{always:!0})},insertFragment:e=>{on.insertFragment(t,e)},insertNode:e=>{on.insertNodes(t,e)},insertText:e=>{var{selection:n,marks:r}=t;if(n){if(r){var o=_e({text:e},r);on.insertNodes(t,o)}else on.insertText(t,e);t.marks=null}},normalizeNode:e=>{var[n,r]=e;if(!zt.isText(n))if(ct.isElement(n)&&0===n.children.length)on.insertNodes(t,{text:""},{at:r.concat(0),voids:!0});else for(var o=!vt.isEditor(n)&&ct.isElement(n)&&(t.isInline(n)||0===n.children.length||zt.isText(n.children[0])||t.isInline(n.children[0])),i=0,a=0;a<n.children.length;a++,i++){var u=Et.get(t,r);if(!zt.isText(u)){var s=n.children[a],l=u.children[i-1],c=a===n.children.length-1;(zt.isText(s)||ct.isElement(s)&&t.isInline(s))!==o?(on.removeNodes(t,{at:r.concat(i),voids:!0}),i--):ct.isElement(s)?t.isInline(s)&&(null!=l&&zt.isText(l)?c&&(on.insertNodes(t,{text:""},{at:r.concat(i+1),voids:!0}),i++):(on.insertNodes(t,{text:""},{at:r.concat(i),voids:!0}),i++)):null!=l&&zt.isText(l)&&(zt.equals(s,l,{loose:!0})?(on.mergeNodes(t,{at:r.concat(i),voids:!0}),i--):""===l.text?(on.removeNodes(t,{at:r.concat(i-1),voids:!0}),i--):""===s.text&&(on.removeNodes(t,{at:r.concat(i),voids:!0}),i--))}}},removeMark:e=>{var{selection:n}=t;if(n)if(Pt.isExpanded(n))on.unsetNodes(t,e,{match:zt.isText,split:!0});else{var r=_e({},vt.marks(t)||{});delete r[e],t.marks=r,Ae.get(t)||t.onChange()}}},t)),n.id="wangEditor-"+Gy++,n.isDestroyed=!1,n.isFullScreen=!1,n.focus=function(e){if(qy.toDOMNode(n,n).focus({preventScroll:!0}),wy.set(n,!0),e){var t=vt.end(n,[]);on.select(n,t)}else{var r=Ey.get(n);r?on.select(n,r):on.select(n,vt.start(n,[]))}},n.isFocused=function(){return!!wy.get(n)},n.blur=function(){qy.toDOMNode(n,n).blur(),on.deselect(n),wy.set(n,!1)},n.updateView=function(){qy.getTextarea(n).changeViewState();var e=qy.getToolbar(n);e&&e.changeToolbarState();var t=qy.getHoverbar(n);t&&t.changeHoverbarState()},n.destroy=function(){if(!n.isDestroyed){var e=qy.getTextarea(n);e.destroy(),Qv.delete(n),ey.delete(e);var t=qy.getToolbar(n);t&&(t.destroy(),ny.delete(n),ty.delete(t));var r=qy.getHoverbar(n);r&&(r.destroy(),oy.delete(n),ry.delete(r)),n.isDestroyed=!0,n.emit("destroyed")}},n.scrollToElem=function(e){if(!n.getConfig().scroll){var t="编辑器禁用了 scroll ，编辑器内容无法滚动，请自行实现该功能";return t+="\nYou has disabled editor scroll, please do this yourself",void console.warn(t)}var r=Br("#"+e);if(0!==r.length){var o=r[0];if(!qy.hasDOMNode(n,o))return t="Element (found by id is '"+e+"') is not in editor DOM",t+="\n 通过 id '"+e+"' 找到的 element 不在 editor DOM 之内",void console.error(t,o);var i=qy.getTextarea(n),a=i.$textAreaContainer,u=i.$scroll,s=r.offset().top,l=a.offset().top;u[0].scrollBy({top:s-l,behavior:"smooth"})}},n.showProgressBar=function(e){e<1||qy.getTextarea(n).changeProgress(e)},n.hidePanelOrModal=function(){var e=ay.get(n);null!=e&&e.forEach((function(e){return e.hide()}))},n.enable=function(){n.getConfig().readOnly=!1,n.updateView()},n.disable=function(){n.getConfig().readOnly=!0,n.updateView()},n.isDisabled=function(){return n.getConfig().readOnly},n.toDOMNode=function(e){return qy.toDOMNode(n,e)},n.fullScreen=function(){if(!n.isFullScreen){var e=null,t=qy.getToolbar(n);t&&(e=t.$box);var r=qy.getTextarea(n).$box.parent();if(e&&e.parent()[0]!==r[0])throw new Error("Can not set full screen, cause toolbar DOM parent is not equal to textarea DOM parent\n不能设置全屏，因为 toolbar DOM 父节点和 textarea DOM 父节点不一致");r.addClass("w-e-full-screen-container");var o=r.css("z-index");r.attr("data-z-index",o.toString()),n.isFullScreen=!0,n.emit("fullScreen")}},n.unFullScreen=function(){if(n.isFullScreen){var e=qy.getTextarea(n).$box.parent();setTimeout((function(){e.removeClass("w-e-full-screen-container"),n.isFullScreen=!1,n.emit("unFullScreen")}),200)}},n.getEditableContainer=function(){return qy.getTextarea(n).$textAreaContainer[0]},n)))))));if(o&&function(e,t){return Fw(e,"data-w-e-textarea",t)}(f,o))throw new Error("Repeated create editor by selector '"+o+"'");var d=function(e){void 0===e&&(e={});var t=Va(Ky),n={},r=e.MENU_CONF,o=void 0===r?{}:r;return ko(t,(function(e,t){n[t]=Jg(Jg({},e),o[t]||{})})),delete e.MENU_CONF,Jg({scroll:!0,readOnly:!1,autoFocus:!0,decorate:function(){return[]},maxLength:0,MENU_CONF:n,hoverbarKeys:{},customAlert:function(e,t){window.alert(t+":\n"+e)}},e)}(a);sy.set(f,d);var p=d.hoverbarKeys,h=void 0===p?{}:p;if(c.forEach((function(e){f=e(f)})),null!=s&&(f.children=Tw(f,s)),u&&u.length&&(f.children=u),0===f.children.length&&(f.children=[{type:"paragraph",children:[{text:""}]}]),qy.normalizeContent(f),o){var g=new iD(o);Qv.set(f,g),ey.set(g,f),g.changeViewState(),Ub((function(){var e=g.$scroll;null!=e&&e.height()<300&&console.warn("编辑区域高度 < 300px 这可能会导致 modal hoverbar 定位异常\nTextarea height < 300px . This may be cause modal and hoverbar position error",e)}));var v=void 0;Object.keys(h).length>0&&(v=new AD,ry.set(v,f),oy.set(f,v)),f.on("change",(function(){f.hidePanelOrModal()})),f.on("scroll",(function(){f.hidePanelOrModal()}))}else f.children.forEach((function(e,t){return OD(e,t,f,f)}));var y=d.onCreated,m=d.onDestroyed;return y&&f.on("created",(function(){return y(f)})),m&&f.on("destroyed",(function(){return m(f)})),Ub((function(){return f.emit("created")})),f}var BD=Zh("splice"),FD=ec.TypeError,TD=Math.max,_D=Math.min;np({target:"Array",proto:!0,forced:!BD},{splice:function(e,t){var n,r,o,i,a,u,s=pc(this),l=id(s),c=Nd(e,l),f=arguments.length;if(0===f?n=r=0:1===f?(n=0,r=l-c):(n=f-2,r=_D(TD(nd(t),0),l-c)),l+n-r>9007199254740991)throw FD("Maximum allowed length exceeded");for(o=yd(s,r),i=0;i<r;i++)(a=c+i)in s&&Gp(o,i,s[a]);if(o.length=r,n<r){for(i=c;i<l-r;i++)u=i+n,(a=i+r)in s?s[u]=s[a]:delete s[u];for(i=l;i>l-r+n;i--)delete s[i-1]}else if(n>r)for(i=l-r;i>c;i--)u=i+n-1,(a=i+r-1)in s?s[u]=s[a]:delete s[u];for(i=0;i<n;i++)s[i+c]=arguments[i+2];return s.length=l-r+n,o}});var PD=function(){function e(e,t){var n=this;this.$toolbar=Br('<div class="w-e-bar w-e-bar-show w-e-toolbar"></div>'),this.menus={},this.toolbarItems=[],this.config={},this.changeToolbarState=Ha((function(){n.toolbarItems.forEach((function(e){e.changeMenuState()}))}),200),this.config=t;var r=Br(e);if(0===r.length)throw new Error("Cannot find toolbar DOM by selector '"+e+"'");this.$box=r;var o=this.$toolbar;o.on("mousedown",(function(e){return e.preventDefault()}),{passive:!1}),r.append(o),Ub((function(){n.registerItems(),n.changeToolbarState(),n.getEditorInstance().on("change",n.changeToolbarState)}))}return e.prototype.getMenus=function(){return this.menus},e.prototype.getConfig=function(){return this.config},e.prototype.registerItems=function(){var e=this,t="",n=this.$toolbar,r=this.config,o=r.toolbarKeys,i=void 0===o?[]:o,a=r.insertKeys,u=void 0===a?{index:0,keys:[]}:a,s=r.excludeKeys,l=void 0===s?[]:s,c=Va(i);u.keys.length>0&&("string"==typeof u.keys&&(u.keys=[u.keys]),u.keys.forEach((function(e,t){c.splice(u.index+t,0,e)})));var f=c.filter((function(e){if("string"==typeof e){if(l.includes(e))return!1}else if(l.includes(e.key))return!1;return!0})),d=f.length;f.forEach((function(r,o){if("|"===r){if(0===o)return;if(o+1===d)return;if("|"===t)return;var i=sD();return n.append(i),void(t=r)}if("string"==typeof r)return e.registerSingleItem(r,e),void(t=r);e.registerGroup(r),t="group"}))},e.prototype.registerGroup=function(e){var t=this,n=this.$toolbar,r=new ED(e),o=e.menuKeys,i=void 0===o?[]:o,a=this.config.excludeKeys,u=void 0===a?[]:a;i.forEach((function(e){u.includes(e)||t.registerSingleItem(e,r)})),n.append(r.$elem)},e.prototype.registerSingleItem=function(e,t){var n=this.getEditorInstance(),r=t instanceof ED,o=this.menus,i=o[e];if(null==i){var a=Yy[e];if(null==a)throw new Error("Not found menu item factory by key '"+e+"'");if("function"!=typeof a)throw new Error("Menu item factory (key='"+e+"') is not a function");i=a(),o[e]=i}else console.warn("Duplicated toolbar menu key '"+e+"'\n重复注册了菜单栏 menu '"+e+"'");var u=xD(e,i,r);this.toolbarItems.push(u),iy.set(u,n),r?t.appendBarItem(u):t.$toolbar.append(u.$elem)},e.prototype.getEditorInstance=function(){var e=ty.get(this);if(null==e)throw new Error("Can not get editor instance");return e},e.prototype.destroy=function(){this.$toolbar.remove(),this.menus={},this.toolbarItems=[]},e}();var jD=Nf.EXISTS,ND=ff.f,ID=Function.prototype,LD=lc(ID.toString),RD=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,MD=lc(RD.exec);function zD(e){var t=e.server,n=void 0===t?"":t,r=e.fieldName,o=void 0===r?"":r,i=e.maxFileSize,a=void 0===i?10485760:i,u=e.maxNumberOfFiles,s=void 0===u?100:u,l=e.meta,c=void 0===l?{}:l,f=e.metaWithUrl,d=void 0!==f&&f,p=e.headers,h=void 0===p?{}:p,g=e.withCredentials,v=void 0!==g&&g,y=e.timeout,m=void 0===y?1e4:y,b=e.onBeforeUpload,w=void 0===b?function(e){return e}:b,E=e.onSuccess,D=void 0===E?function(e,t){}:E,C=e.onError,x=void 0===C?function(e,t,n){console.error(e.name+" upload error",t,n)}:C,S=e.onProgress,A=void 0===S?function(e){}:S;if(!n)throw new Error("Cannot get upload server address\n没有配置上传地址");if(!o)throw new Error("Cannot get fieldName\n没有配置 fieldName");var O=n;d&&(O=function(e,t){var n=ev(e.split("#"),2),r=n[0],o=n[1],i=[];ko(t,(function(e,t){i.push(t+"="+e)}));var a=i.join("&");return r=r.indexOf("?")>0?r+"&"+a:r+"?"+a,o?r+"#"+o:r}(O,c));var k=new Cs({onBeforeUpload:w,restrictions:{maxFileSize:a,maxNumberOfFiles:s},meta:c}).use(Kl,{endpoint:O,headers:h,formData:!0,fieldName:o,bundle:!0,withCredentials:v,timeout:m});return k.on("upload-success",(function(e,t){var n=t.body,r=void 0===n?{}:n;try{D(e,r)}catch(o){console.error("wangEditor upload file - onSuccess error",o)}k.removeFile(e.id)})),k.on("progress",(function(e){e<1||A(e)})),k.on("upload-error",(function(e,t,n){try{x(e,t,n)}catch(r){console.error("wangEditor upload file - onError error",r)}k.removeFile(e.id)})),k.on("restriction-failed",(function(e,t){try{x(e,t)}catch(n){console.error("wangEditor upload file - onError error",n)}k.removeFile(e.id)})),k}function $D(e){return($D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function HD(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function VD(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach((function(t){HD(e,t,n[t])}))}return e}function UD(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function WD(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function qD(e,t,n){return t&&WD(e.prototype,t),n&&WD(e,n),e}function GD(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function KD(e,t){if(t&&("object"===$D(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return GD(e)}function YD(e){return(YD=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function XD(e,t){return(XD=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ZD(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&XD(e,t)}Mc&&!jD&&ND(ID,"name",{configurable:!0,get:function(){try{return MD(RD,LD(this))[1]}catch(eg){return""}}});var JD={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},QD=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};UD(this,e),this.init(t,n)}return qD(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||JD,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,VD({},{prefix:"".concat(this.prefix,":").concat(t,":")},this.options))}}]),e}()),eC=function(){function e(){UD(this,e),this.observers={}}return qD(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.observers[e]){var o=[].concat(this.observers[e]);o.forEach((function(e){e.apply(void 0,n)}))}if(this.observers["*"]){var i=[].concat(this.observers["*"]);i.forEach((function(t){t.apply(t,[e].concat(n))}))}}}]),e}();function tC(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function nC(e){return null==e?"":""+e}function rC(e,t,n){e.forEach((function(e){t[e]&&(n[e]=t[e])}))}function oC(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function o(){return!e||"string"==typeof e}for(var i="string"!=typeof t?[].concat(t):t.split(".");i.length>1;){if(o())return{};var a=r(i.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{}}return o()?{}:{obj:e,k:r(i.shift())}}function iC(e,t,n){var r=oC(e,t,Object);r.obj[r.k]=n}function aC(e,t){var n=oC(e,t),r=n.obj,o=n.k;if(r)return r[o]}function uC(e,t,n){var r=aC(e,n);return void 0!==r?r:aC(t,n)}function sC(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):sC(e[r],t[r],n):e[r]=t[r]);return e}function lC(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var cC={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function fC(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return cC[e]})):e}var dC="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1;function pC(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var r=t.split(n),o=e,i=0;i<r.length;++i){if(!o)return;if("string"==typeof o[r[i]]&&i+1<r.length)return;if(void 0===o[r[i]]){for(var a=2,u=r.slice(i,i+a).join(n),s=o[u];void 0===s&&r.length>i+a;)a++,s=o[u=r.slice(i,i+a).join(n)];if(void 0===s)return;if("string"==typeof s)return s;if(u&&"string"==typeof s[u])return s[u];var l=r.slice(i+a).join(n);return l?pC(s,l,n):void 0}o=o[r[i]]}return o}}var hC=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return UD(this,t),n=KD(this,YD(t).call(this)),dC&&eC.call(GD(n)),n.data=e||{},n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),void 0===n.options.ignoreJSONStructure&&(n.options.ignoreJSONStructure=!0),n}return ZD(t,eC),qD(t,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,i=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[e,t];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(a=e.split("."));var u=aC(this.data,a);return u||!i||"string"!=typeof n?u:pC(this.data&&this.data[e]&&this.data[e][t],n,o)}},{key:"addResource",value:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=this.options.keySeparator;void 0===i&&(i=".");var a=[e,t];n&&(a=a.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(r=t,t=(a=e.split("."))[1]),this.addNamespaces(t),iC(this.data,a,r),o.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in n)"string"!=typeof n[o]&&"[object Array]"!==Object.prototype.toString.apply(n[o])||this.addResource(e,t,o,n[o],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(a=e.split("."))[1]),this.addNamespaces(t);var u=aC(this.data,a)||{};r?sC(u,n,o):u=VD({},u,n),iC(this.data,a,u),i.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?VD({},{},this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"toJSON",value:function(){return this.data}}]),t}(),gC={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,o){var i=this;return e.forEach((function(e){i.processors[e]&&(t=i.processors[e].process(t,n,r,o))})),t}},vC={},yC=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return UD(this,t),n=KD(this,YD(t).call(this)),dC&&eC.call(GD(n)),rC(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,GD(n)),n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=QD.create("translator"),n}return ZD(t,eC),qD(t,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,o=t.ns||this.options.defaultNS;if(n&&e.indexOf(n)>-1){var i=e.match(this.interpolator.nestingRegexp);if(i&&i.length>0)return{key:e,namespaces:o};var a=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(a[0])>-1)&&(o=a.shift()),e=a.join(r)}return"string"==typeof o&&(o=[o]),{key:e,namespaces:o}}},{key:"translate",value:function(e,n,r){var o=this;if("object"!==$D(n)&&this.options.overloadTranslationOptionHandler&&(n=this.options.overloadTranslationOptionHandler(arguments)),n||(n={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var i=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,a=this.extractFromKey(e[e.length-1],n),u=a.key,s=a.namespaces,l=s[s.length-1],c=n.lng||this.language,f=n.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&"cimode"===c.toLowerCase()){if(f){var d=n.nsSeparator||this.options.nsSeparator;return l+d+u}return u}var p=this.resolve(e,n),h=p&&p.res,g=p&&p.usedKey||u,v=p&&p.exactUsedKey||u,y=Object.prototype.toString.apply(h),m=["[object Number]","[object Function]","[object RegExp]"],b=void 0!==n.joinArrays?n.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject,E="string"!=typeof h&&"boolean"!=typeof h&&"number"!=typeof h;if(w&&h&&E&&m.indexOf(y)<0&&("string"!=typeof b||"[object Array]"!==y)){if(!n.returnObjects&&!this.options.returnObjects)return this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(g,h,VD({},n,{ns:s})):"key '".concat(u," (").concat(this.language,")' returned an object instead of string.");if(i){var D="[object Array]"===y,C=D?[]:{},x=D?v:g;for(var S in h)if(Object.prototype.hasOwnProperty.call(h,S)){var A="".concat(x).concat(i).concat(S);C[S]=this.translate(A,VD({},n,{joinArrays:!1,ns:s})),C[S]===A&&(C[S]=h[S])}h=C}}else if(w&&"string"==typeof b&&"[object Array]"===y)(h=h.join(b))&&(h=this.extendTranslation(h,e,n,r));else{var O=!1,k=!1,B=void 0!==n.count&&"string"!=typeof n.count,F=t.hasDefaultValue(n),T=B?this.pluralResolver.getSuffix(c,n.count):"",_=n["defaultValue".concat(T)]||n.defaultValue;!this.isValidLookup(h)&&F&&(O=!0,h=_),this.isValidLookup(h)||(k=!0,h=u);var P=n.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,j=P&&k?void 0:h,N=F&&_!==h&&this.options.updateMissing;if(k||O||N){if(this.logger.log(N?"updateKey":"missingKey",c,l,u,N?_:h),i){var I=this.resolve(u,VD({},n,{keySeparator:!1}));I&&I.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var L=[],R=this.languageUtils.getFallbackCodes(this.options.fallbackLng,n.lng||this.language);if("fallback"===this.options.saveMissingTo&&R&&R[0])for(var M=0;M<R.length;M++)L.push(R[M]);else"all"===this.options.saveMissingTo?L=this.languageUtils.toResolveHierarchy(n.lng||this.language):L.push(n.lng||this.language);var z=function(e,t,r){o.options.missingKeyHandler?o.options.missingKeyHandler(e,l,t,N?r:j,N,n):o.backendConnector&&o.backendConnector.saveMissing&&o.backendConnector.saveMissing(e,l,t,N?r:j,N,n),o.emit("missingKey",e,l,t,h)};this.options.saveMissing&&(this.options.saveMissingPlurals&&B?L.forEach((function(e){o.pluralResolver.getSuffixes(e).forEach((function(t){z([e],u+t,n["defaultValue".concat(t)]||_)}))})):z(L,u,_))}h=this.extendTranslation(h,e,n,p,r),k&&h===u&&this.options.appendNamespaceToMissingKey&&(h="".concat(l,":").concat(u)),(k||O)&&this.options.parseMissingKeyHandler&&(h=this.options.parseMissingKeyHandler(h))}return h}},{key:"extendTranslation",value:function(e,t,n,r,o){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(VD({},n,{interpolation:VD({},this.options.interpolation,n.interpolation)}));var a,u=n.interpolation&&n.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;if(u){var s=e.match(this.interpolator.nestingRegexp);a=s&&s.length}var l=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(l=VD({},this.options.interpolation.defaultVariables,l)),e=this.interpolator.interpolate(e,l,n.lng||this.language,n),u){var c=e.match(this.interpolator.nestingRegexp);a<(c&&c.length)&&(n.nest=!1)}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return o&&o[0]===r[0]&&!n.context?(i.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):i.translate.apply(i,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var f=n.postProcess||this.options.postProcess,d="string"==typeof f?[f]:f;return null!=e&&d&&d.length&&!1!==n.applyPostProcessor&&(e=gC.handle(d,e,t,this.options&&this.options.postProcessPassResolved?VD({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,o,i,a=this,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var s=a.extractFromKey(e,u),l=s.key;n=l;var c=s.namespaces;a.options.fallbackNS&&(c=c.concat(a.options.fallbackNS));var f=void 0!==u.count&&"string"!=typeof u.count,d=void 0!==u.context&&("string"==typeof u.context||"number"==typeof u.context)&&""!==u.context,p=u.lngs?u.lngs:a.languageUtils.toResolveHierarchy(u.lng||a.language,u.fallbackLng);c.forEach((function(e){a.isValidLookup(t)||(i=e,!vC["".concat(p[0],"-").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(i)&&(vC["".concat(p[0],"-").concat(e)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(i,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(t)){o=n;var i,s,c=l,p=[c];for(a.i18nFormat&&a.i18nFormat.addLookupKeys?a.i18nFormat.addLookupKeys(p,l,n,e,u):(f&&(i=a.pluralResolver.getSuffix(n,u.count)),f&&d&&p.push(c+i),d&&p.push(c+="".concat(a.options.contextSeparator).concat(u.context)),f&&p.push(c+=i));s=p.pop();)a.isValidLookup(t)||(r=s,t=a.getResource(n,e,s,u))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:o,usedNS:i}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:"hasDefaultValue",value:function(e){var t="defaultValue";for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t===n.substring(0,t.length)&&void 0!==e[n])return!0;return!1}}]),t}();function mC(e){return e.charAt(0).toUpperCase()+e.slice(1)}var bC=function(){function e(t){UD(this,e),this.options=t,this.whitelist=this.options.supportedLngs||!1,this.supportedLngs=this.options.supportedLngs||!1,this.logger=QD.create("languageUtils")}return qD(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=mC(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=mC(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=mC(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isWhitelisted",value:function(e){return this.logger.deprecate("languageUtils.isWhitelisted",'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.'),this.isSupportedCode(e)}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(r))return e}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),o=[],i=function(e){e&&(n.isSupportedCode(e)?o.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(e))):"string"==typeof e&&i(this.formatLanguageCode(e)),r.forEach((function(e){o.indexOf(e)<0&&i(n.formatLanguageCode(e))})),o}}]),e}(),wC=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],EC={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};function DC(){var e={};return wC.forEach((function(t){t.lngs.forEach((function(n){e[n]={numbers:t.nr,plurals:EC[t.fc]}}))})),e}var CC=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};UD(this,e),this.languageUtils=t,this.options=n,this.logger=QD.create("pluralResolver"),this.rules=DC()}return qD(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=this.getRule(e);return t&&t.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){return this.getSuffixes(e).map((function(e){return t+e}))}},{key:"getSuffixes",value:function(e){var t=this,n=this.getRule(e);return n?n.numbers.map((function(n){return t.getSuffix(e,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=this,r=this.getRule(e);if(r){var o=r.noAbs?r.plurals(t):r.plurals(Math.abs(t)),i=r.numbers[o];this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]&&(2===i?i="plural":1===i&&(i=""));var a=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return"v1"===this.options.compatibilityJSON?1===i?"":"number"==typeof i?"_plural_".concat(i.toString()):a():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]?a():this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString()}return this.logger.warn("no plural rule found for: ".concat(e)),""}}]),e}(),xC=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};UD(this,e),this.logger=QD.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return qD(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:fC,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?lC(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?lC(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?lC(t.nestingPrefix):t.nestingPrefixEscaped||lC("$t("),this.nestingSuffix=t.nestingSuffix?lC(t.nestingSuffix):t.nestingSuffixEscaped||lC(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var o,i,a,u=this,s=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}var c=function(e){if(e.indexOf(u.formatSeparator)<0){var o=uC(t,s,e);return u.alwaysFormat?u.format(o,void 0,n,VD({},r,t,{interpolationkey:e})):o}var i=e.split(u.formatSeparator),a=i.shift().trim(),l=i.join(u.formatSeparator).trim();return u.format(uC(t,s,a),l,n,VD({},r,t,{interpolationkey:a}))};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,d=r&&r.interpolation&&r.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return l(e)}},{regex:this.regexp,safeValue:function(e){return u.escapeValue?l(u.escape(e)):l(e)}}].forEach((function(t){for(a=0;o=t.regex.exec(e);){if(void 0===(i=c(o[1].trim())))if("function"==typeof f){var n=f(e,o,r);i="string"==typeof n?n:""}else{if(d){i=o[0];continue}u.logger.warn("missed to pass in variable ".concat(o[1]," for interpolating ").concat(e)),i=""}else"string"==typeof i||u.useRawValueToEscape||(i=nC(i));var s=t.safeValue(i);if(e=e.replace(o[0],s),d?(t.regex.lastIndex+=s.length,t.regex.lastIndex-=o[0].length):t.regex.lastIndex=0,++a>=u.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=VD({},i);function u(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),o="{".concat(r[1]);e=r[0],o=(o=this.interpolate(o,a)).replace(/'/g,'"');try{a=JSON.parse(o),t&&(a=VD({},t,a))}catch(i){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),i),"".concat(e).concat(n).concat(o)}return delete a.defaultValue,e}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(e);){var s=[],l=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var c=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=c.shift(),s=c,l=!0}if((r=t(u.call(this,n[1].trim(),a),a))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=nC(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),l&&(r=s.reduce((function(e,t){return o.format(e,t,i.lng,VD({},i,{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}(),SC=function(e){function t(e,n,r){var o,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return UD(this,t),o=KD(this,YD(t).call(this)),dC&&eC.call(GD(o)),o.backend=e,o.store=n,o.services=r,o.languageUtils=r.languageUtils,o.options=i,o.logger=QD.create("backendConnector"),o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(r,i.backend,i),o}return ZD(t,eC),qD(t,[{key:"queueLoad",value:function(e,t,n,r){var o=this,i=[],a=[],u=[],s=[];return e.forEach((function(e){var r=!0;t.forEach((function(t){var u="".concat(e,"|").concat(t);!n.reload&&o.store.hasResourceBundle(e,t)?o.state[u]=2:o.state[u]<0||(1===o.state[u]?a.indexOf(u)<0&&a.push(u):(o.state[u]=1,r=!1,a.indexOf(u)<0&&a.push(u),i.indexOf(u)<0&&i.push(u),s.indexOf(t)<0&&s.push(t)))})),r||u.push(e)})),(i.length||a.length)&&this.queue.push({pending:a,loaded:{},errors:[],callback:r}),{toLoad:i,pending:a,toLoadLanguages:u,toLoadNamespaces:s}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),o=r[0],i=r[1];t&&this.emit("failedLoading",o,i,t),n&&this.store.addResourceBundle(o,i,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){var r,u,s,l,c;r=n.loaded,u=i,s=oC(r,[o],Object),l=s.obj,c=s.k,l[c]=l[c]||[],l[c].push(u),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){a[e].indexOf(t)<0&&a[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,a=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(u,s){u&&s&&o<5?setTimeout((function(){r.read.call(r,e,t,n,o+1,2*i,a)}),i):a(u,s)})):a(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var i=this.queueLoad(e,t,r,o);if(!i.toLoad.length)return i.pending.length||o(),null;i.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),o=r[0],i=r[1];this.read(o,i,"read",void 0,void 0,(function(r,a){r&&t.logger.warn("".concat(n,"loading namespace ").concat(i," for language ").concat(o," failed"),r),!r&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(i," for language ").concat(o),a),t.loaded(e,r,a)}))}},{key:"saveMissing",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,r,null,VD({},i,{isUpdate:o})),e&&e[0]&&this.store.addResource(e[0],t,n,r))}}]),t}();function AC(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===$D(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===$D(e[2])||"object"===$D(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!1}}}function OC(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.whitelist&&(e.whitelist&&e.whitelist.indexOf("cimode")<0&&(e.whitelist=e.whitelist.concat(["cimode"])),e.supportedLngs=e.whitelist),e.nonExplicitWhitelist&&(e.nonExplicitSupportedLngs=e.nonExplicitWhitelist),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function kC(){}var BC=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;if(UD(this,t),e=KD(this,YD(t).call(this)),dC&&eC.call(GD(e)),e.options=OC(n),e.services={},e.logger=QD,e.modules={external:[]},r&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,r),KD(e,GD(e));setTimeout((function(){e.init(n,r)}),0)}return e}return ZD(t,eC),qD(t,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;function r(e){return e?"function"==typeof e?new e:e:null}if("function"==typeof t&&(n=t,t={}),t.whitelist&&!t.supportedLngs&&this.logger.deprecate("whitelist",'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.'),t.nonExplicitWhitelist&&!t.nonExplicitSupportedLngs&&this.logger.deprecate("whitelist",'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.'),this.options=VD({},AC(),this.options,OC(t)),this.format=this.options.interpolation.format,n||(n=kC),!this.options.isClone){this.modules.logger?QD.init(r(this.modules.logger),this.options):QD.init(null,this.options);var o=new bC(this.options);this.store=new hC(this.options.resources,this.options);var i=this.services;i.logger=QD,i.resourceStore=this.store,i.languageUtils=o,i.pluralResolver=new CC(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),i.interpolator=new xC(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new SC(r(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(i.languageDetector=r(this.modules.languageDetector),i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=r(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new yC(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var a=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);a.length>0&&"dev"!==a[0]&&(this.options.lng=a[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var u=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];u.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}}));var s=["addResource","addResources","addResourceBundle","removeResourceBundle"];s.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var l=tC(),c=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),l.resolve(r),n(t,r)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?c():setTimeout(c,0),l}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:kC,r=n,o="string"==typeof e?e:this.language;if("function"==typeof e&&(r=e),!this.options.resources||this.options.partialBundledLanguages){if(o&&"cimode"===o.toLowerCase())return r();var i=[],a=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){i.indexOf(e)<0&&i.push(e)}))};if(o)a(o);else{var u=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);u.forEach((function(e){return a(e)}))}this.options.preload&&this.options.preload.forEach((function(e){return a(e)})),this.services.backendConnector.load(i,this.options.ns,r)}else r(null)}},{key:"reloadResources",value:function(e,t,n){var r=tC();return e||(e=this.languages),t||(t=this.options.ns),n||(n=kC),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&gC.addPostProcessor(e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=tC();this.emit("languageChanging",e);var o=function(o){e||o||!n.services.languageDetector||(o=[]);var i="string"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);i&&(n.language||(n.language=i,n.languages=n.services.languageUtils.toResolveHierarchy(i)),n.translator.language||n.translator.changeLanguage(i),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(i)),n.loadResources(i,(function(e){var o,a;o=e,(a=i)?(n.language=a,n.languages=n.services.languageUtils.toResolveHierarchy(a),n.translator.changeLanguage(a),n.isLanguageChangingTo=void 0,n.emit("languageChanged",a),n.logger.log("languageChanged",a)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(o,(function(){return n.t.apply(n,arguments)}))}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(e):o(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t,n){var r=this,o=function e(t,o){var i;if("object"!==$D(o)){for(var a=arguments.length,u=new Array(a>2?a-2:0),s=2;s<a;s++)u[s-2]=arguments[s];i=r.options.overloadTranslationOptionHandler([t,o].concat(u))}else i=VD({},o);i.lng=i.lng||e.lng,i.lngs=i.lngs||e.lngs,i.ns=i.ns||e.ns;var l=r.options.keySeparator||".",c=n?"".concat(n).concat(l).concat(t):t;return r.t(c,i)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=n,o}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=this.languages[0],o=!!this.options&&this.options.fallbackLng,i=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var u=n.precheck(this,a);if(void 0!==u)return u}return!!this.hasResourceBundle(r,e)||!this.services.backendConnector.backend||!(!a(r,e)||o&&!a(i,e))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=tC();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=tC();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],o=e.filter((function(e){return r.indexOf(e)<0}));return o.length?(this.options.preload=r.concat(o),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){return e||(e=this.languages&&this.languages.length>0?this.languages[0]:this.language),e?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>=0?"rtl":"ltr":"rtl"}},{key:"createInstance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new t(e,n)}},{key:"cloneInstance",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:kC,o=VD({},this.options,n,{isClone:!0}),i=new t(o),a=["store","services","language"];return a.forEach((function(t){i[t]=e[t]})),i.services=VD({},this.services),i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i.translator=new yC(i.services,i.options),i.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit.apply(i,[e].concat(n))})),i.init(o,r),i.translator.options=i.options,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages}}}]),t}(),FC=new BC;function TC(e,t){FC.addResourceBundle(e,"translation",t,!0,!0)}FC.init({lng:"zh-CN",resources:{}});var _C=FC.t.bind(FC);TC("en",{editor:{more:"More",justify:"Justify",indent:"Indent",image:"Image",video:"Video"}}),TC("zh-CN",{editor:{more:"更多",justify:"对齐",indent:"缩进",image:"图片",video:"视频"}}),TC("en",{common:{ok:"OK",delete:"Delete",enter:"Enter"},blockQuote:{title:"Quote"},codeBlock:{title:"Code block"},color:{color:"Font color",bgColor:"Back color",default:"Default color",clear:"Clear back color"},divider:{title:"Divider"},emotion:{title:"Emotion"},fontSize:{title:"Font size",default:"Default"},fontFamily:{title:"Font family",default:"Default"},fullScreen:{title:"Full screen"},header:{title:"Header",text:"Text"},image:{netImage:"Net image",delete:"Delete image",edit:"Edit image",viewLink:"View link",src:"Image src",desc:"Description",link:"Image link"},indent:{decrease:"Decrease",increase:"Increase"},justify:{left:"Left",right:"Right",center:"Center",justify:"Justify"},lineHeight:{title:"Line height",default:"Default"},link:{insert:"Insert link",text:"Link text",url:"Link source",unLink:"Unlink",edit:"Edit link",view:"View link"},textStyle:{bold:"Bold",clear:"Clear styles",code:"Inline code",italic:"Italic",sub:"Sub",sup:"Sup",through:"Through",underline:"Underline"},undo:{undo:"undo",redo:"Redo"},todo:{todo:"Todo"}}),TC("zh-CN",{common:{ok:"确定",delete:"删除",enter:"回车"},blockQuote:{title:"引用"},codeBlock:{title:"代码块"},color:{color:"文字颜色",bgColor:"背景色",default:"默认颜色",clear:"清除背景色"},divider:{title:"分割线"},emotion:{title:"表情"},fontSize:{title:"字号",default:"默认字号"},fontFamily:{title:"字体",default:"默认字体"},fullScreen:{title:"全屏"},header:{title:"标题",text:"正文"},image:{netImage:"网络图片",delete:"删除图片",edit:"编辑图片",viewLink:"查看链接",src:"图片地址",desc:"图片描述",link:"图片链接"},indent:{decrease:"减少缩进",increase:"增加缩进"},justify:{left:"左对齐",right:"右对齐",center:"居中对齐",justify:"两端对齐"},lineHeight:{title:"行高",default:"默认行高"},link:{insert:"插入链接",text:"链接文本",url:"链接地址",unLink:"取消链接",edit:"修改链接",view:"查看链接"},textStyle:{bold:"粗体",clear:"清除格式",code:"行内代码",italic:"斜体",sub:"下标",sup:"上标",through:"删除线",underline:"下划线"},undo:{undo:"撤销",redo:"重做"},todo:{todo:"待办"}});var PC={type:"paragraph",renderElem:function(e,t,n){return xi("p",null,t)}},jC="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function NC(e){var t={exports:{}};return e(t,t.exports),t.exports}var IC,LC,RC=function(e){return e&&e.Math==Math&&e},MC=RC("object"==typeof globalThis&&globalThis)||RC("object"==typeof window&&window)||RC("object"==typeof self&&self)||RC("object"==typeof jC&&jC)||function(){return this}()||Function("return this")(),zC=function(e){try{return!!e()}catch(t){return!0}},$C=!zC((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),HC=Function.prototype.call,VC=HC.bind?HC.bind(HC):function(){return HC.apply(HC,arguments)},UC={}.propertyIsEnumerable,WC=Object.getOwnPropertyDescriptor,qC=WC&&!UC.call({1:2},1)?function(e){var t=WC(this,e);return!!t&&t.enumerable}:UC,GC={f:qC},KC=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},YC=Function.prototype,XC=YC.bind,ZC=YC.call,JC=XC&&XC.bind(ZC),QC=XC?function(e){return e&&JC(ZC,e)}:function(e){return e&&function(){return ZC.apply(e,arguments)}},ex=QC({}.toString),tx=QC("".slice),nx=function(e){return tx(ex(e),8,-1)},rx=MC.Object,ox=QC("".split),ix=zC((function(){return!rx("z").propertyIsEnumerable(0)}))?function(e){return"String"==nx(e)?ox(e,""):rx(e)}:rx,ax=MC.TypeError,ux=function(e){if(null==e)throw ax("Can't call method on "+e);return e},sx=function(e){return ix(ux(e))},lx=function(e){return"function"==typeof e},cx=function(e){return"object"==typeof e?null!==e:lx(e)},fx=function(e){return lx(e)?e:void 0},dx=function(e,t){return arguments.length<2?fx(MC[e]):MC[e]&&MC[e][t]},px=QC({}.isPrototypeOf),hx=dx("navigator","userAgent")||"",gx=MC.process,vx=MC.Deno,yx=gx&&gx.versions||vx&&vx.version,mx=yx&&yx.v8;mx&&(LC=(IC=mx.split("."))[0]>0&&IC[0]<4?1:+(IC[0]+IC[1])),!LC&&hx&&(!(IC=hx.match(/Edge\/(\d+)/))||IC[1]>=74)&&(IC=hx.match(/Chrome\/(\d+)/))&&(LC=+IC[1]);var bx=LC,wx=!!Object.getOwnPropertySymbols&&!zC((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&bx&&bx<41})),Ex=wx&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Dx=MC.Object,Cx=Ex?function(e){return"symbol"==typeof e}:function(e){var t=dx("Symbol");return lx(t)&&px(t.prototype,Dx(e))},xx=MC.String,Sx=function(e){try{return xx(e)}catch(t){return"Object"}},Ax=MC.TypeError,Ox=function(e){if(lx(e))return e;throw Ax(Sx(e)+" is not a function")},kx=function(e,t){var n=e[t];return null==n?void 0:Ox(n)},Bx=MC.TypeError,Fx=Object.defineProperty,Tx=function(e,t){try{Fx(MC,e,{value:t,configurable:!0,writable:!0})}catch(rY){MC[e]=t}return t},_x=MC["__core-js_shared__"]||Tx("__core-js_shared__",{}),Px=NC((function(e){(e.exports=function(e,t){return _x[e]||(_x[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),jx=MC.Object,Nx=function(e){return jx(ux(e))},Ix=QC({}.hasOwnProperty),Lx=Object.hasOwn||function(e,t){return Ix(Nx(e),t)},Rx=0,Mx=Math.random(),zx=QC(1..toString),$x=function(e){return"Symbol("+(void 0===e?"":e)+")_"+zx(++Rx+Mx,36)},Hx=Px("wks"),Vx=MC.Symbol,Ux=Vx&&Vx.for,Wx=Ex?Vx:Vx&&Vx.withoutSetter||$x,qx=function(e){if(!Lx(Hx,e)||!wx&&"string"!=typeof Hx[e]){var t="Symbol."+e;wx&&Lx(Vx,e)?Hx[e]=Vx[e]:Hx[e]=Ex&&Ux?Ux(t):Wx(t)}return Hx[e]},Gx=MC.TypeError,Kx=qx("toPrimitive"),Yx=function(e){var t=function(e,t){if(!cx(e)||Cx(e))return e;var n,r=kx(e,Kx);if(r){if(void 0===t&&(t="default"),n=VC(r,e,t),!cx(n)||Cx(n))return n;throw Gx("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&lx(n=e.toString)&&!cx(r=VC(n,e)))return r;if(lx(n=e.valueOf)&&!cx(r=VC(n,e)))return r;if("string"!==t&&lx(n=e.toString)&&!cx(r=VC(n,e)))return r;throw Bx("Can't convert object to primitive value")}(e,t)}(e,"string");return Cx(t)?t:t+""},Xx=MC.document,Zx=cx(Xx)&&cx(Xx.createElement),Jx=function(e){return Zx?Xx.createElement(e):{}},Qx=!$C&&!zC((function(){return 7!=Object.defineProperty(Jx("div"),"a",{get:function(){return 7}}).a})),eS=Object.getOwnPropertyDescriptor,tS={f:$C?eS:function(e,t){if(e=sx(e),t=Yx(t),Qx)try{return eS(e,t)}catch(n){}if(Lx(e,t))return KC(!VC(GC.f,e,t),e[t])}},nS=MC.String,rS=MC.TypeError,oS=function(e){if(cx(e))return e;throw rS(nS(e)+" is not an object")},iS=MC.TypeError,aS=Object.defineProperty,uS={f:$C?aS:function(e,t,n){if(oS(e),t=Yx(t),oS(n),Qx)try{return aS(e,t,n)}catch(r){}if("get"in n||"set"in n)throw iS("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},sS=$C?function(e,t,n){return uS.f(e,t,KC(1,n))}:function(e,t,n){return e[t]=n,e},lS=QC(Function.toString);lx(_x.inspectSource)||(_x.inspectSource=function(e){return lS(e)});var cS,fS,dS,pS=_x.inspectSource,hS=MC.WeakMap,gS=lx(hS)&&/native code/.test(pS(hS)),vS=Px("keys"),yS=function(e){return vS[e]||(vS[e]=$x(e))},mS={},bS=MC.TypeError,wS=MC.WeakMap;if(gS||_x.state){var ES=_x.state||(_x.state=new wS),DS=QC(ES.get),CS=QC(ES.has),xS=QC(ES.set);cS=function(e,t){if(CS(ES,e))throw new bS("Object already initialized");return t.facade=e,xS(ES,e,t),t},fS=function(e){return DS(ES,e)||{}},dS=function(e){return CS(ES,e)}}else{var SS=yS("state");mS[SS]=!0,cS=function(e,t){if(Lx(e,SS))throw new bS("Object already initialized");return t.facade=e,sS(e,SS,t),t},fS=function(e){return Lx(e,SS)?e[SS]:{}},dS=function(e){return Lx(e,SS)}}var AS={set:cS,get:fS,has:dS,enforce:function(e){return dS(e)?fS(e):cS(e,{})},getterFor:function(e){return function(t){var n;if(!cx(t)||(n=fS(t)).type!==e)throw bS("Incompatible receiver, "+e+" required");return n}}},OS=Function.prototype,kS=$C&&Object.getOwnPropertyDescriptor,BS=Lx(OS,"name"),FS={EXISTS:BS,PROPER:BS&&"something"===function(){}.name,CONFIGURABLE:BS&&(!$C||$C&&kS(OS,"name").configurable)},TS=NC((function(e){var t=FS.CONFIGURABLE,n=AS.get,r=AS.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;lx(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!Lx(i,"name")||t&&i.name!==f)&&sS(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==MC?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:sS(e,n,i)):l?e[n]=i:Tx(n,i)})(Function.prototype,"toString",(function(){return lx(this)&&n(this).source||pS(this)}))})),_S=Math.ceil,PS=Math.floor,jS=function(e){var t=+e;return t!=t||0===t?0:(t>0?PS:_S)(t)},NS=Math.max,IS=Math.min,LS=function(e,t){var n=jS(e);return n<0?NS(n+t,0):IS(n,t)},RS=Math.min,MS=function(e){return e>0?RS(jS(e),9007199254740991):0},zS=function(e){return MS(e.length)},$S=function(e){return function(t,n,r){var o,i=sx(t),a=zS(i),u=LS(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},HS={includes:$S(!0),indexOf:$S(!1)},VS=HS.indexOf,US=QC([].push),WS=function(e,t){var n,r=sx(e),o=0,i=[];for(n in r)!Lx(mS,n)&&Lx(r,n)&&US(i,n);for(;t.length>o;)Lx(r,n=t[o++])&&(~VS(i,n)||US(i,n));return i},qS=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],GS=qS.concat("length","prototype"),KS={f:Object.getOwnPropertyNames||function(e){return WS(e,GS)}},YS={f:Object.getOwnPropertySymbols},XS=QC([].concat),ZS=dx("Reflect","ownKeys")||function(e){var t=KS.f(oS(e)),n=YS.f;return n?XS(t,n(e)):t},JS=function(e,t){for(var n=ZS(t),r=uS.f,o=tS.f,i=0;i<n.length;i++){var a=n[i];Lx(e,a)||r(e,a,o(t,a))}},QS=/#|\.prototype\./,eA=function(e,t){var n=nA[tA(e)];return n==oA||n!=rA&&(lx(t)?zC(t):!!t)},tA=eA.normalize=function(e){return String(e).replace(QS,".").toLowerCase()},nA=eA.data={},rA=eA.NATIVE="N",oA=eA.POLYFILL="P",iA=eA,aA=tS.f,uA=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?MC:l?MC[u]||Tx(u,{}):(MC[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=aA(n,r))&&a.value:n[r],!iA(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;JS(i,o)}(e.sham||o&&o.sham)&&sS(i,"sham",!0),TS(n,r,i,e)}},sA=QC(QC.bind),lA=Array.isArray||function(e){return"Array"==nx(e)},cA={};cA[qx("toStringTag")]="z";var fA="[object z]"===String(cA),dA=qx("toStringTag"),pA=MC.Object,hA="Arguments"==nx(function(){return arguments}()),gA=fA?nx:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=pA(e),dA))?n:hA?nx(t):"Object"==(r=nx(t))&&lx(t.callee)?"Arguments":r},vA=function(){},yA=[],mA=dx("Reflect","construct"),bA=/^\s*(?:class|function)\b/,wA=QC(bA.exec),EA=!bA.exec(vA),DA=function(e){if(!lx(e))return!1;try{return mA(vA,yA,e),!0}catch(t){return!1}},CA=!mA||zC((function(){var e;return DA(DA.call)||!DA(Object)||!DA((function(){e=!0}))||e}))?function(e){if(!lx(e))return!1;switch(gA(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return EA||!!wA(bA,pS(e))}:DA,xA=qx("species"),SA=MC.Array,AA=function(e,t){return new(lA(n=e)&&(r=n.constructor,(CA(r)&&(r===SA||lA(r.prototype))||cx(r)&&null===(r=r[xA]))&&(r=void 0)),void 0===r?SA:r)(0===t?0:t);var n,r},OA=QC([].push),kA=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=Nx(s),g=ix(h),v=function(e,t){return Ox(e),void 0===t?e:sA?sA(e,t):function(){return e.apply(t,arguments)}}(l,c),y=zS(g),m=0,b=f||AA,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:OA(w,d)}else switch(e){case 4:return!1;case 7:OA(w,d)}return i?-1:r||o?o:w}},BA={forEach:kA(0),map:kA(1),filter:kA(2),some:kA(3),every:kA(4),find:kA(5),findIndex:kA(6),filterReject:kA(7)},FA=qx("species"),TA=function(e){return bx>=51||!zC((function(){var t=[];return(t.constructor={})[FA]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},_A=BA.filter;uA({target:"Array",proto:!0,forced:!TA("filter")},{filter:function(e){return _A(this,e,arguments.length>1?arguments[1]:void 0)}});var PA=fA?{}.toString:function(){return"[object "+gA(this)+"]"};fA||TS(Object.prototype,"toString",PA,{unsafe:!0});var jA,NA=MC.String,IA=function(e){if("Symbol"===gA(e))throw TypeError("Cannot convert a Symbol value to a string");return NA(e)},LA=function(){var e=oS(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},RA=MC.RegExp,MA=zC((function(){var e=RA("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),zA=MA||zC((function(){return!RA("a","y").sticky})),$A={BROKEN_CARET:MA||zC((function(){var e=RA("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:zA,UNSUPPORTED_Y:MA},HA=Object.keys||function(e){return WS(e,qS)},VA=$C?Object.defineProperties:function(e,t){oS(e);for(var n,r=sx(t),o=HA(t),i=o.length,a=0;i>a;)uS.f(e,n=o[a++],r[n]);return e},UA=dx("document","documentElement"),WA=yS("IE_PROTO"),qA=function(){},GA=function(e){return"<script>"+e+"<\/script>"},KA=function(e){e.write(GA("")),e.close();var t=e.parentWindow.Object;return e=null,t},YA=function(){try{jA=new ActiveXObject("htmlfile")}catch(r){}var e,t;YA="undefined"!=typeof document?document.domain&&jA?KA(jA):((t=Jx("iframe")).style.display="none",UA.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(GA("document.F=Object")),e.close(),e.F):KA(jA);for(var n=qS.length;n--;)delete YA.prototype[qS[n]];return YA()};mS[WA]=!0;var XA,ZA,JA=Object.create||function(e,t){var n;return null!==e?(qA.prototype=oS(e),n=new qA,qA.prototype=null,n[WA]=e):n=YA(),void 0===t?n:VA(n,t)},QA=MC.RegExp,eO=zC((function(){var e=QA(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),tO=MC.RegExp,nO=zC((function(){var e=tO("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),rO=AS.get,oO=Px("native-string-replace",String.prototype.replace),iO=RegExp.prototype.exec,aO=iO,uO=QC("".charAt),sO=QC("".indexOf),lO=QC("".replace),cO=QC("".slice),fO=(ZA=/b*/g,VC(iO,XA=/a/,"a"),VC(iO,ZA,"a"),0!==XA.lastIndex||0!==ZA.lastIndex),dO=$A.BROKEN_CARET,pO=void 0!==/()??/.exec("")[1];(fO||pO||dO||eO||nO)&&(aO=function(e){var t,n,r,o,i,a,u,s=this,l=rO(s),c=IA(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=VC(aO,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=dO&&s.sticky,h=VC(LA,s),g=s.source,v=0,y=c;if(p&&(h=lO(h,"y",""),-1===sO(h,"g")&&(h+="g"),y=cO(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==uO(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),pO&&(n=new RegExp("^"+g+"$(?!\\s)",h)),fO&&(r=s.lastIndex),o=VC(iO,p?n:s,y),p?o?(o.input=cO(o.input,v),o[0]=cO(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:fO&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),pO&&o&&o.length>1&&VC(oO,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=JA(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var hO=aO;uA({target:"RegExp",proto:!0,forced:/./.exec!==hO},{exec:hO});var gO=Function.prototype,vO=gO.apply,yO=gO.bind,mO=gO.call,bO="object"==typeof Reflect&&Reflect.apply||(yO?mO.bind(vO):function(){return mO.apply(vO,arguments)}),wO=qx("species"),EO=RegExp.prototype,DO=function(e,t,n,r){var o=qx(e),i=!zC((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!zC((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[wO]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=QC(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=QC(e),s=t.exec;return s===hO||s===EO.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));TS(String.prototype,e,s[0]),TS(EO,o,s[1])}r&&sS(EO[o],"sham",!0)},CO=QC("".charAt),xO=QC("".charCodeAt),SO=QC("".slice),AO=function(e){return function(t,n){var r,o,i=IA(ux(t)),a=jS(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=xO(i,a))<55296||r>56319||a+1===u||(o=xO(i,a+1))<56320||o>57343?e?CO(i,a):r:e?SO(i,a,a+2):o-56320+(r-55296<<10)+65536}},OO=(AO(!1),AO(!0)),kO=function(e,t,n){return t+(n?OO(e,t).length:1)},BO=Math.floor,FO=QC("".charAt),TO=QC("".replace),_O=QC("".slice),PO=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,jO=/\$([$&'`]|\d{1,2})/g,NO=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=jO;return void 0!==o&&(o=Nx(o),s=PO),TO(i,s,(function(i,s){var l;switch(FO(s,0)){case"$":return"$";case"&":return e;case"`":return _O(t,0,n);case"'":return _O(t,a);case"<":l=o[_O(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=BO(c/10);return 0===f?i:f<=u?void 0===r[f-1]?FO(s,1):r[f-1]+FO(s,1):i}l=r[c-1]}return void 0===l?"":l}))},IO=MC.TypeError,LO=function(e,t){var n=e.exec;if(lx(n)){var r=VC(n,e,t);return null!==r&&oS(r),r}if("RegExp"===nx(e))return VC(hO,e,t);throw IO("RegExp#exec called on incompatible receiver")},RO=qx("replace"),MO=Math.max,zO=Math.min,$O=QC([].concat),HO=QC([].push),VO=QC("".indexOf),UO=QC("".slice),WO="$0"==="a".replace(/./,"$0"),qO=!!/./[RO]&&""===/./[RO]("a","$0");DO("replace",(function(e,t,n){var r=qO?"$":"$0";return[function(e,n){var r=ux(this),o=null==e?void 0:kx(e,RO);return o?VC(o,e,r,n):VC(t,IA(r),e,n)},function(e,o){var i=oS(this),a=IA(e);if("string"==typeof o&&-1===VO(o,r)&&-1===VO(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=lx(o);s||(o=IA(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=LO(i,a);if(null===d)break;if(HO(f,d),!l)break;""===IA(d[0])&&(i.lastIndex=kO(a,MS(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=IA((d=f[v])[0]),m=MO(zO(jS(d.index),a.length),0),b=[],w=1;w<d.length;w++)HO(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=$O([y],b,m,a);void 0!==E&&HO(D,E);var C=IA(bO(o,void 0,D))}else C=NO(y,a,m,b,E,o);m>=g&&(h+=UO(a,g,m)+C,g=m+y.length)}return h+UO(a,g)}]}),!!zC((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!WO||qO);var GO=qx("unscopables"),KO=Array.prototype;null==KO[GO]&&uS.f(KO,GO,{configurable:!0,value:JA(null)});var YO=function(e){KO[GO][e]=!0},XO=BA.find,ZO=!0;"find"in[]&&Array(1).find((function(){ZO=!1})),uA({target:"Array",proto:!0,forced:ZO},{find:function(e){return XO(this,e,arguments.length>1?arguments[1]:void 0)}}),YO("find");var JO=qx("match"),QO=function(e){var t;return cx(e)&&(void 0!==(t=e[JO])?!!t:"RegExp"==nx(e))},ek=MC.TypeError,tk=qx("species"),nk=function(e,t,n){var r=Yx(t);r in e?uS.f(e,r,KC(0,n)):e[r]=n},rk=MC.Array,ok=Math.max,ik=function(e,t,n){for(var r=zS(e),o=LS(t,r),i=LS(void 0===n?r:n,r),a=rk(ok(i-o,0)),u=0;o<i;o++,u++)nk(a,u,e[o]);return a.length=u,a},ak=$A.UNSUPPORTED_Y,uk=Math.min,sk=[].push,lk=QC(/./.exec),ck=QC(sk),fk=QC("".slice);DO("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=IA(ux(this)),o=void 0===n?4294967295:n>>>0;if(0===o)return[];if(void 0===e)return[r];if(!QO(e))return VC(t,r,e,o);for(var i,a,u,s=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),c=0,f=new RegExp(e.source,l+"g");(i=VC(hO,f,r))&&!((a=f.lastIndex)>c&&(ck(s,fk(r,c,i.index)),i.length>1&&i.index<r.length&&bO(sk,s,ik(i,1)),u=i[0].length,c=a,s.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return c===r.length?!u&&lk(f,"")||ck(s,""):ck(s,fk(r,c)),s.length>o?ik(s,0,o):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:VC(t,this,e,n)}:t,[function(t,n){var o=ux(this),i=null==t?void 0:kx(t,e);return i?VC(i,t,o,n):VC(r,IA(o),t,n)},function(e,o){var i=oS(this),a=IA(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=oS(e).constructor;return void 0===r||null==(n=oS(r)[tk])?t:function(e){if(CA(e))return e;throw ek(Sx(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(ak?"g":"y"),f=new s(ak?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===LO(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=ak?0:h;var v,y=LO(f,ak?fk(a,h):a);if(null===y||(v=uk(MS(f.lastIndex+(ak?h:0)),a.length))===p)h=kO(a,h,l);else{if(ck(g,fk(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(ck(g,y[m]),g.length===d)return g;h=p=v}}return ck(g,fk(a,p)),g}]}),!!zC((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),ak);var dk="\t\n\v\f\r                　\u2028\u2029\ufeff",pk=QC("".replace),hk="["+dk+"]",gk=RegExp("^"+hk+hk+"*"),vk=RegExp(hk+hk+"*$"),yk=function(e){return function(t){var n=IA(ux(t));return 1&e&&(n=pk(n,gk,"")),2&e&&(n=pk(n,vk,"")),n}},mk={start:yk(1),end:yk(2),trim:yk(3)},bk=FS.PROPER,wk=mk.trim;function Ek(e){return 0===Br("<div>"+e+"</div>").children().filter((function(e){return"BR"!==e.tagName})).length}function Dk(e){return 0===e.length?"":e[0].outerHTML}function Ck(e){return e.length?e[0].tagName.toLowerCase():""}function xk(e,t){for(var n="",r=(e.attr("style")||"").split(";"),o=r.length,i=0;i<o;i++){var a=r[i];if(a){var u=a.split(":");u[0].trim()===t&&(n=u[1].trim())}}return n}uA({target:"String",proto:!0,forced:("trim",zC((function(){return!!dk.trim()||"​᠎"!=="​᠎".trim()||bk&&"trim"!==dk.trim.name})))},{trim:function(){return wk(this)}}),uA({global:!0},{globalThis:MC}),Ur&&(Br.fn.css=Ur),Xr&&(Br.fn.append=Xr),Zr&&(Br.fn.prepend=Zr),Fr&&(Br.fn.addClass=Fr),Tr&&(Br.fn.removeClass=Tr),_r&&(Br.fn.hasClass=_r),Lr&&(Br.fn.on=Lr),Rr&&(Br.fn.off=Rr),uo&&(Br.fn.focus=uo),Pr&&(Br.fn.attr=Pr),jr&&(Br.fn.removeAttr=jr),Hr&&(Br.fn.hide=Hr),Vr&&(Br.fn.show=Vr),Qr&&(Br.fn.parents=Qr),Nr&&(Br.fn.dataset=Nr),Ir&&(Br.fn.val=Ir),Kr&&(Br.fn.text=Kr),Gr&&(Br.fn.html=Gr),to&&(Br.fn.children=to),no&&(Br.fn.remove=no),eo&&(Br.fn.find=eo),Mr&&(Br.fn.width=Mr),zr&&(Br.fn.height=zr),qr&&(Br.fn.filter=qr),ro&&(Br.fn.empty=ro);var Sk={selector:"p:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);return 0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"paragraph",children:t}}},Ak=function(e,t){return(Ak=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function Ok(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ak(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var kk=function(){return kk=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},kk.apply(this,arguments)};function Bk(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function Fk(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function Tk(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _k(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function Pk(e){var t=_k(vt.nodes(e,{match:function(t){return e.children[0]===t},mode:"highest"}),1)[0];if(null==t)return!1;var n=t[0];if(!ct.isElement(n))return!1;if("paragraph"===n.type)return!1;if(""!==Et.string(n))return!1;var r=n.children,o=void 0===r?[]:r;return!!zt.isText(o[0])&&(on.setNodes(e,{type:"paragraph"}),!0)}var jk={renderElems:[PC],elemsToHtml:[{type:"paragraph",elemToHtml:function(e,t){return""===t?"<p><br></p>":"<p>"+t+"</p>"}}],parseElemsHtml:[Sk],editorPlugin:function(e){var t=e.deleteBackward,n=e.deleteForward;e.insertText,e.insertBreak;var r=e;return r.deleteBackward=function(e){Pk(r)||t(e)},r.deleteForward=function(e){Pk(r)||n(e)},r}},Nk=/"/g,Ik=QC("".replace),Lk=function(e,t,n,r){var o=IA(ux(e)),i="<"+t;return""!==n&&(i+=" "+n+'="'+Ik(IA(r),Nk,"&quot;")+'"'),i+">"+o+"</"+t+">"},Rk=function(e){return zC((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))};function Mk(e,t){var n=t,r=e,o=r.bold,i=r.italic,a=r.underline;return o&&(n="<strong>"+n+"</strong>"),r.code&&(n="<code>"+n+"</code>"),i&&(n="<em>"+n+"</em>"),a&&(n="<u>"+n+"</u>"),r.through&&(n="<s>"+n+"</s>"),r.sub&&(n="<sub>"+n+"</sub>"),r.sup&&(n="<sup>"+n+"</sup>"),n}function zk(e,t){return 0!==e.length&&(!!e[0].matches(t)||e.find(t).length>0)}uA({target:"String",proto:!0,forced:Rk("bold")},{bold:function(){return Lk(this,"b","","")}}),uA({target:"String",proto:!0,forced:Rk("italics")},{italics:function(){return Lk(this,"i","","")}}),uA({target:"String",proto:!0,forced:Rk("sub")},{sub:function(){return Lk(this,"sub","","")}}),uA({target:"String",proto:!0,forced:Rk("sup")},{sup:function(){return Lk(this,"sup","","")}});var $k={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Hk=Jx("span").classList,Vk=Hk&&Hk.constructor&&Hk.constructor.prototype,Uk=Vk===Object.prototype?void 0:Vk,Wk=function(e,t){var n=[][e];return!!n&&zC((function(){n.call(null,t||function(){throw 1},1)}))},qk=BA.forEach,Gk=Wk("forEach")?[].forEach:function(e){return qk(this,e,arguments.length>1?arguments[1]:void 0)},Kk=function(e){if(e&&e.forEach!==Gk)try{sS(e,"forEach",Gk)}catch(eg){e.forEach=Gk}};for(var Yk in $k)$k[Yk]&&Kk(MC[Yk]&&MC[Yk].prototype);function Xk(e,t){return null==e.selection||!!_k(vt.nodes(e,{match:function(t){return"pre"===qy.getNodeType(t)||!!vt.isVoid(e,t)},universal:!0}),1)[0]}function Zk(e,t){Object.keys(t).forEach((function(t){"text"!==t&&vt.removeMark(e,t)}))}Kk(Uk),uA({target:"Object",stat:!0,forced:zC((function(){HA(1)}))},{keys:function(e){return HA(Nx(e))}});var Jk=function(){function e(){this.marksNeedToRemove=[],this.tag="button"}return e.prototype.getValue=function(e){var t=this.mark,n=vt.marks(e);return n?n[t]:!!_k(vt.nodes(e,{match:function(e){return!0===e[t]}}),1)[0]},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){return Xk(e,this.mark)},e.prototype.exec=function(e,t){var n=this.mark,r=this.marksNeedToRemove;t?e.removeMark(n):(e.addMark(n,!0),r&&r.forEach((function(t){return e.removeMark(t)})))},e}(),Qk='<svg viewBox="0 0 1024 1024"><path d="M707.872 484.64A254.88 254.88 0 0 0 768 320c0-141.152-114.848-256-256-256H192v896h384c141.152 0 256-114.848 256-256a256.096 256.096 0 0 0-124.128-219.36zM384 192h101.504c55.968 0 101.504 57.408 101.504 128s-45.536 128-101.504 128H384V192z m159.008 640H384v-256h159.008c58.464 0 106.016 57.408 106.016 128s-47.552 128-106.016 128z"></path></svg>',eB='<svg viewBox="0 0 1024 1024"><path d="M704 64l128 0 0 416c0 159.072-143.264 288-320 288s-320-128.928-320-288l0-416 128 0 0 416c0 40.16 18.24 78.688 51.36 108.512 36.896 33.216 86.848 51.488 140.64 51.488s103.744-18.304 140.64-51.488c33.12-29.792 51.36-68.352 51.36-108.512l0-416zM192 832l640 0 0 128-640 0z"></path></svg>',tB='<svg viewBox="0 0 1024 1024"><path d="M896 64v64h-128L448 896h128v64H128v-64h128L576 128h-128V64z"></path></svg>',nB='<svg viewBox="0 0 1024 1024"><path d="M1024 512v64h-234.496c27.52 38.496 42.496 82.688 42.496 128 0 70.88-36.672 139.04-100.576 186.976C672.064 935.488 594.144 960 512 960s-160.064-24.512-219.424-69.024C228.64 843.04 192 774.88 192 704h128c0 69.376 87.936 128 192 128s192-58.624 192-128-87.936-128-192-128H0v-64h299.52a385.984 385.984 0 0 1-6.944-5.024C228.64 459.04 192 390.88 192 320s36.672-139.04 100.576-186.976C351.936 88.512 429.856 64 512 64s160.064 24.512 219.424 69.024C795.328 180.96 832 249.12 832 320h-128c0-69.376-87.936-128-192-128s-192 58.624-192 128 87.936 128 192 128c78.976 0 154.048 22.688 212.48 64H1024z"></path></svg>',rB='<svg viewBox="0 0 1024 1024"><path d="M576 736l96 96 320-320L672 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224z"></path></svg>',oB='<svg viewBox="0 0 1024 1024"><path d="M864 0a160 160 0 0 1 128 256l-64 64-224-224 64-64c26.752-20.096 59.968-32 96-32zM64 736l-64 288 288-64 592-592-224-224L64 736z m651.584-372.416l-448 448-55.168-55.168 448-448 55.168 55.168z"></path></svg>',iB='<svg viewBox="0 0 1024 1024"><path d="M924.402464 1023.068211H0.679665V99.345412h461.861399v98.909208H99.596867v725.896389h725.896389V561.206811h98.909208z" p-id="10909"></path><path d="M930.805104 22.977336l69.965436 69.965436-453.492405 453.492404-69.965435-69.901489z" p-id="10910"></path><path d="M1022.464381 304.030081h-98.917201V99.345412H709.230573V0.428211h313.233808z"></path></svg>',aB='<svg viewBox="0 0 1024 1024"><path d="M64 864h896v96H64zM360.58 576h302.85l81.53 224h102.16L579.24 64H444.77L176.89 800h102.16l81.53-224zM512 159.96L628.49 480H395.52L512 159.96z"></path></svg>',uB='<svg viewBox="0 0 1024 1024"><path d="M510.030769 315.076923l84.676923 196.923077h-177.230769l76.8-196.923077h15.753846zM945.230769 157.538462v708.923076c0 43.323077-35.446154 78.769231-78.769231 78.769231H157.538462c-43.323077 0-78.769231-35.446154-78.769231-78.769231V157.538462c0-43.323077 35.446154-78.769231 78.769231-78.769231h708.923076c43.323077 0 78.769231 35.446154 78.769231 78.769231z m-108.307692 643.938461L600.615385 216.615385c-5.907692-11.815385-15.753846-19.692308-29.538462-19.692308h-139.815385c-11.815385 0-23.630769 7.876923-27.56923 19.692308l-216.615385 584.861538c-3.938462 11.815385 3.938462 25.6 17.723077 25.6h80.738462c11.815385 0 23.630769-9.846154 27.56923-21.661538l63.015385-175.261539h263.876923l68.923077 175.261539c3.938462 11.815385 15.753846 21.661538 27.569231 21.661538h80.738461c13.784615 0 23.630769-13.784615 19.692308-25.6z"></path></svg>',sB='<svg viewBox="0 0 1024 1024"><path d="M64 512h384v128h-128V1024h-128V640h-128z m896-256H708.2496v768h-136.4992V256H320V128h640z"></path></svg>',lB='<svg viewBox="0 0 1024 1024"><path d="M956.788364 152.110545h-24.110546l23.924364 9.029819 0.186182 121.018181h-65.070546l-86.574545-130.048H566.551273v650.14691l130.048 64.977454v65.163636h-390.050909v-65.163636l129.954909-64.977454V152.110545H198.283636L111.429818 282.065455H46.545455V69.259636C46.545455 33.792 82.664727 22.062545 98.955636 22.062545h812.683637c23.738182 0 45.056 15.173818 45.056 41.053091V169.425455v-17.221819z"></path></svg>',cB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m256-512v384l-256-192z"></path></svg>',fB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>',dB='<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',pB='<svg viewBox="0 0 1024 1024"><path d="M972.8 793.6v102.4H256v-102.4h716.8z m0-230.4v102.4H51.2v-102.4h921.6z m0-230.4v102.4H256v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',hB='<svg viewBox="0 0 1024 1024"><path d="M870.4 793.6v102.4H153.6v-102.4h716.8z m102.4-230.4v102.4H51.2v-102.4h921.6z m-102.4-230.4v102.4H153.6v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',gB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z"></path></svg>',vB='<svg viewBox="0 0 1024 1024"><path d="M768 206.016v50.016h128v64h-192V174.016l128-60V64h-128V0h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>',yB='<svg viewBox="0 0 1024 1024"><path d="M768 910.016v50.016h128v64h-192v-146.016l128-60V768h-128v-64h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>',mB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="bold",t.title=_C("textStyle.bold"),t.iconSvg=Qk,t.hotkey="mod+b",t}return Ok(t,e),t}(Jk),bB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="code",t.title=_C("textStyle.code"),t.iconSvg=rB,t.hotkey="mod+e",t}return Ok(t,e),t}(Jk),wB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="italic",t.title=_C("textStyle.italic"),t.iconSvg=tB,t.hotkey="mod+i",t}return Ok(t,e),t}(Jk),EB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="through",t.title=_C("textStyle.through"),t.iconSvg=nB,t.hotkey="mod+shift+x",t}return Ok(t,e),t}(Jk),DB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="underline",t.title=_C("textStyle.underline"),t.iconSvg=eB,t.hotkey="mod+u",t}return Ok(t,e),t}(Jk),CB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="sub",t.marksNeedToRemove=["sup"],t.title=_C("textStyle.sub"),t.iconSvg=yB,t.hotkey="",t}return Ok(t,e),t}(Jk),xB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="sup",t.marksNeedToRemove=["sub"],t.title=_C("textStyle.sup"),t.iconSvg=vB,t.hotkey="",t}return Ok(t,e),t}(Jk),SB=function(){function e(){this.title=_C("textStyle.clear"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M969.382408 288.738615l-319.401123-270.852152a67.074236 67.074236 0 0 0-96.459139 5.74922l-505.931379 574.922021a68.35184 68.35184 0 0 0-17.886463 47.910169 74.101061 74.101061 0 0 0 24.274486 47.910168l156.50655 132.232065h373.060512L975.131628 383.281347a67.074236 67.074236 0 0 0-5.74922-96.459139z m-440.134747 433.746725H264.144729l-90.071117-78.572676c-5.74922-5.74922-12.137243-12.137243-12.137243-17.886463a36.411728 36.411728 0 0 1 5.749221-24.274485l210.804741-240.828447 265.102932 228.691204z m-439.495945 180.781036h843.218964a60.047411 60.047411 0 1 1 0 120.733624H89.751716a60.047411 60.047411 0 1 1 0-120.733624z m0 0"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return Xk(e)},e.prototype.exec=function(e,t){var n,r,o=vt.nodes(e,{match:function(e){return zt.isText(e)},universal:!0});try{for(var i=Tk(o),a=i.next();!a.done;a=i.next())Zk(e,a.value[0])}catch(u){n={error:u}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},e}(),AB={renderStyle:function(e,t){var n=e,r=n.bold,o=n.italic,i=n.underline,a=n.code,u=n.through,s=n.sub,l=n.sup,c=t;return r&&(c=xi("strong",null,c)),a&&(c=xi("code",null,c)),o&&(c=xi("em",null,c)),i&&(c=xi("u",null,c)),u&&(c=xi("s",null,c)),s&&(c=xi("sub",null,c)),l&&(c=xi("sup",null,c)),c},menus:[{key:"bold",factory:function(){return new mB}},{key:"underline",factory:function(){return new DB}},{key:"italic",factory:function(){return new wB}},{key:"through",factory:function(){return new EB}},{key:"code",factory:function(){return new bB}},{key:"sub",factory:function(){return new CB}},{key:"sup",factory:function(){return new xB}},{key:"clearStyle",factory:function(){return new SB}}],styleToHtml:function(e,t){if(!zt.isText(e))return t;if(Ek(t))return Mk(e,t);var n=Br(t);if("br"===Ck(n))return Mk(e,"<br>");var r=n.html();return r=Mk(e,r),n.html(r),Dk(n)},parseStyleHtml:function(e,t,n){var r=Br(e);if(!zt.isText(t))return t;var o=t;return zk(r,"b,strong")&&(o.bold=!0),zk(r,"i,em")&&(o.italic=!0),zk(r,"u")&&(o.underline=!0),zk(r,"s,strike")&&(o.through=!0),zk(r,"sub")&&(o.sub=!0),zk(r,"sup")&&(o.sup=!0),zk(r,"code")&&(o.code=!0),o}};function OB(e){return function(t,n,r){return xi("h"+e,null,n)}}var kB={type:"header1",renderElem:OB(1)},BB={type:"header2",renderElem:OB(2)},FB={type:"header3",renderElem:OB(3)},TB={type:"header4",renderElem:OB(4)},_B={type:"header5",renderElem:OB(5)},PB=FS.PROPER,jB=RegExp.prototype,NB=jB.toString,IB=QC(LA),LB=zC((function(){return"/a/b"!=NB.call({source:"a",flags:"b"})})),RB=PB&&"toString"!=NB.name;(LB||RB)&&TS(RegExp.prototype,"toString",(function(){var e=oS(this),t=IA(e.source),n=e.flags;return"/"+t+"/"+IA(void 0===n&&px(jB,e)&&!("flags"in jB)?IB(e):n)}),{unsafe:!0});var MB,zB=MC.TypeError,$B=function(e){if(QO(e))throw zB("The method doesn't accept regular expressions");return e},HB=qx("match"),VB=function(e){var t=/./;try{"/./"[e](t)}catch(rY){try{return t[HB]=!1,"/./"[e](t)}catch(n){}}return!1},UB=tS.f,WB=QC("".startsWith),qB=QC("".slice),GB=Math.min,KB=VB("startsWith");function YB(e){var t=_k(vt.nodes(e,{match:function(e){return qy.getNodeType(e).startsWith("header")},universal:!0}),1)[0];if(null==t)return"paragraph";var n=_k(t,1)[0];return qy.getNodeType(n)}function XB(e){return null==e.selection||!_k(vt.nodes(e,{match:function(e){var t=qy.getNodeType(e);return"paragraph"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0]}function ZB(e,t){t&&on.setNodes(e,{type:t})}uA({target:"String",proto:!0,forced:!(!KB&&(MB=UB(String.prototype,"startsWith"),MB&&!MB.writable)||KB)},{startsWith:function(e){var t=IA(ux(this));$B(e);var n=MS(GB(arguments.length>1?arguments[1]:void 0,t.length)),r=IA(e);return WB?WB(t,r,n):qB(t,n,n+r.length)===r}});var JB=function(){function e(){this.title=_C("header.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M960 960c-51.2 0-102.4-3.2-153.6-3.2-51.2 0-99.2 3.2-150.4 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 57.6-28.8 86.4-48 19.2-12.8 19.2-60.8 19.2-80v-224-19.2c-9.6-3.2-19.2-3.2-28.8-3.2H320c-9.6 0-19.2 0-28.8 3.2V780.8c0 22.4 0 80 22.4 92.8 28.8 19.2 96-6.4 96 44.8 0 16-9.6 41.6-28.8 41.6-54.4 0-105.6-3.2-160-3.2-48 0-96 3.2-147.2 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 51.2-28.8 80-48 19.2-12.8 19.2-60.8 19.2-83.2V294.4c0-28.8 3.2-115.2-22.4-131.2-25.6-16-86.4 9.6-86.4-41.6 0-16 6.4-41.6 28.8-41.6 51.2 0 105.6 3.2 156.8 3.2 48 0 96-3.2 144-3.2 19.2 0 28.8 22.4 28.8 41.6 0 48-57.6 25.6-83.2 41.6-19.2 12.8-19.2 73.6-19.2 92.8v201.6c6.4 3.2 16 3.2 22.4 3.2h400c6.4 0 12.8 0 22.4-3.2V256c0-22.4 0-80-19.2-92.8-28.8-16-86.4 6.4-86.4-41.6 0-16 9.6-41.6 28.8-41.6 51.2 0 99.2 3.2 150.4 3.2 48 0 99.2-3.2 147.2-3.2 19.2 0 28.8 22.4 28.8 41.6 0 51.2-57.6 25.6-86.4 41.6-19.2 12.8-19.2 70.4-19.2 92.8v537.6c0 19.2 0 67.2 19.2 80 28.8 19.2 89.6-6.4 89.6 44.8 0 19.2-6.4 41.6-28.8 41.6z"></path></svg>',this.tag="select",this.width=60}return e.prototype.getOptions=function(e){var t=[{value:"header1",text:"H1",styleForRenderMenuList:{"font-size":"32px","font-weight":"bold"}},{value:"header2",text:"H2",styleForRenderMenuList:{"font-size":"24px","font-weight":"bold"}},{value:"header3",text:"H3",styleForRenderMenuList:{"font-size":"18px","font-weight":"bold"}},{value:"header4",text:"H4",styleForRenderMenuList:{"font-size":"16px","font-weight":"bold"}},{value:"header5",text:"H5",styleForRenderMenuList:{"font-size":"13px","font-weight":"bold"}},{value:"paragraph",text:_C("header.text")}],n=this.getValue(e).toString();return t.forEach((function(e){e.value===n?e.selected=!0:delete e.selected})),t},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){return YB(e)},e.prototype.isDisabled=function(e){return XB(e)},e.prototype.exec=function(e,t){ZB(e,t.toString())},e}(),QB=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return YB(e)},e.prototype.isActive=function(e){return this.getValue(e)===this.type},e.prototype.isDisabled=function(e){return XB(e)},e.prototype.exec=function(e,t){var n=this.type;ZB(e,t===n?"paragraph":n)},e}(),eF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H1",t.type="header1",t}return Ok(t,e),t}(QB),tF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H2",t.type="header2",t}return Ok(t,e),t}(QB),nF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H3",t.type="header3",t}return Ok(t,e),t}(QB),rF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H4",t.type="header4",t}return Ok(t,e),t}(QB),oF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H5",t.type="header5",t}return Ok(t,e),t}(QB),iF={key:"headerSelect",factory:function(){return new JB}},aF={key:"header1",factory:function(){return new eF}},uF={key:"header2",factory:function(){return new tF}},sF={key:"header3",factory:function(){return new nF}},lF={key:"header4",factory:function(){return new rF}},cF={key:"header5",factory:function(){return new oF}};function fF(e){return function(t,n){return"<h"+e+">"+n+"</h"+e+">"}}function dF(e){return function(t,n,r){var o=Br(t);return 0===(n=n.filter((function(e){return!!zt.isText(e)||!!r.isInline(e)}))).length&&(n=[{text:o.text().replace(/\s+/gm," ")}]),{type:"header"+e,children:n}}}var pF={renderElems:[kB,BB,FB,TB,_B],elemsToHtml:[{type:"header1",elemToHtml:fF(1)},{type:"header2",elemToHtml:fF(2)},{type:"header3",elemToHtml:fF(3)},{type:"header4",elemToHtml:fF(4)},{type:"header5",elemToHtml:fF(5)}],parseElemsHtml:[{selector:"h1:not([data-w-e-type])",parseElemHtml:dF(1)},{selector:"h2:not([data-w-e-type])",parseElemHtml:dF(2)},{selector:"h3:not([data-w-e-type])",parseElemHtml:dF(3)},{selector:"h4:not([data-w-e-type])",parseElemHtml:dF(4)},{selector:"h5:not([data-w-e-type])",parseElemHtml:dF(5)}],menus:[iF,aF,uF,sF,lF,cF],editorPlugin:function(e){var t=e.insertBreak;e.insertNode;var n=e;return n.insertBreak=function(){var r=_k(vt.nodes(n,{match:function(e){return qy.getNodeType(e).startsWith("header")},universal:!0}),1)[0];r&&qy.isSelectionAtLineEnd(e,r[1])?on.insertNodes(n,{type:"paragraph",children:[{text:""}]},{mode:"highest"}):t()},n}},hF=Object.assign,gF=Object.defineProperty,vF=QC([].concat),yF=!hF||zC((function(){if($C&&1!==hF({b:1},hF(gF({},"a",{enumerable:!0,get:function(){gF(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=hF({},e)[n]||HA(hF({},t)).join("")!=r}))?function(e,t){for(var n=Nx(e),r=arguments.length,o=1,i=YS.f,a=GC.f;r>o;)for(var u,s=ix(arguments[o++]),l=i?vF(HA(s),i(s)):HA(s),c=l.length,f=0;c>f;)u=l[f++],$C&&!VC(a,s,u)||(n[u]=s[u]);return n}:hF;function mF(e,t){null==e.data&&(e.data={});var n=e.data;null==n.style&&(n.style={}),Object.assign(n.style,t)}uA({target:"Object",stat:!0,forced:Object.assign!==yF},{assign:yF});var bF={selector:"font",preParseHtml:function(e){var t=Br(e);if("font"!==Ck(t))return e;var n=t.attr("color")||"";return n&&(t.removeAttr("color"),t.css("color",n)),t[0]}},wF=function(){function e(){this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.exec=function(e,t){},e.prototype.getValue=function(e){var t=this.mark,n=vt.marks(e);return n&&n[t]?n[t]:""},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){return null==e.selection||!!_k(vt.nodes(e,{match:function(t){return"pre"===qy.getNodeType(t)||!!vt.isVoid(e,t)},universal:!0}),1)[0]},e.prototype.getPanelContentElem=function(e){var t=this.mark;if(null==this.$content){var n=Br('<ul class="w-e-panel-content-color"></ul>');n.on("click","li",(function(n){var r=n.target;if(null!=r&&(n.preventDefault(),null!=e.selection)){var o=Br(r).attr("data-value");"0"===o?vt.removeMark(e,t):vt.addMark(e,t,o)}})),this.$content=n}var r=this.$content;if(null==r)return document.createElement("ul");r.empty();var o=this.getValue(e),i=e.getMenuConfig(t).colors;(void 0===i?[]:i).forEach((function(e){var t=Br('<div class="color-block" data-value="'+e+'"></div>');t.css("background-color",e);var n=Br('<li data-value="'+e+'"></li>');o===e&&n.addClass("active"),n.append(t),r.append(n)}));var a="";"color"===t&&(a=_C("color.default")),"bgColor"===t&&(a=_C("color.clear"));var u=Br('\n      <li data-value="0" class="clear">\n        <svg viewBox="0 0 1024 1024"><path d="M236.8 128L896 787.2V128H236.8z m614.4 704L192 172.8V832h659.2zM192 64h704c38.4 0 64 25.6 64 64v704c0 38.4-25.6 64-64 64H192c-38.4 0-64-25.6-64-64V128c0-38.4 25.6-64 64-64z"></path></svg>\n        '+a+"\n      </li>\n    ");return r.prepend(u),r[0]},e}(),EF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("color.color"),t.iconSvg=aB,t.mark="color",t}return Ok(t,e),t}(wF),DF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("color.bgColor"),t.iconSvg=uB,t.mark="bgColor",t}return Ok(t,e),t}(wF),CF=["rgb(0, 0, 0)","rgb(38, 38, 38)","rgb(89, 89, 89)","rgb(140, 140, 140)","rgb(191, 191, 191)","rgb(217, 217, 217)","rgb(233, 233, 233)","rgb(245, 245, 245)","rgb(250, 250, 250)","rgb(255, 255, 255)","rgb(225, 60, 57)","rgb(231, 95, 51)","rgb(235, 144, 58)","rgb(245, 219, 77)","rgb(114, 192, 64)","rgb(89, 191, 192)","rgb(66, 144, 247)","rgb(54, 88, 226)","rgb(106, 57, 201)","rgb(216, 68, 147)","rgb(251, 233, 230)","rgb(252, 237, 225)","rgb(252, 239, 212)","rgb(252, 251, 207)","rgb(231, 246, 213)","rgb(218, 244, 240)","rgb(217, 237, 250)","rgb(224, 232, 250)","rgb(237, 225, 248)","rgb(246, 226, 234)","rgb(255, 163, 158)","rgb(255, 187, 150)","rgb(255, 213, 145)","rgb(255, 251, 143)","rgb(183, 235, 143)","rgb(135, 232, 222)","rgb(145, 213, 255)","rgb(173, 198, 255)","rgb(211, 173, 247)","rgb(255, 173, 210)","rgb(255, 77, 79)","rgb(255, 122, 69)","rgb(255, 169, 64)","rgb(255, 236, 61)","rgb(115, 209, 61)","rgb(54, 207, 201)","rgb(64, 169, 255)","rgb(89, 126, 247)","rgb(146, 84, 222)","rgb(247, 89, 171)","rgb(207, 19, 34)","rgb(212, 56, 13)","rgb(212, 107, 8)","rgb(212, 177, 6)","rgb(56, 158, 13)","rgb(8, 151, 156)","rgb(9, 109, 217)","rgb(29, 57, 196)","rgb(83, 29, 171)","rgb(196, 29, 127)","rgb(130, 0, 20)","rgb(135, 20, 0)","rgb(135, 56, 0)","rgb(97, 71, 0)","rgb(19, 82, 0)","rgb(0, 71, 79)","rgb(0, 58, 140)","rgb(6, 17, 120)","rgb(34, 7, 94)","rgb(120, 6, 80)"],xF={renderStyle:function(e,t){var n=e,r=n.color,o=n.bgColor,i=t;return r&&mF(i,{color:r}),o&&mF(i,{backgroundColor:o}),i},styleToHtml:function(e,t){if(!zt.isText(e))return t;var n,r=e,o=r.color,i=r.bgColor;return o||i?((Ek(t)||"span"!==Ck(n=Br(t)))&&(n=Br("<span>"+t+"</span>")),o&&n.css("color",o),i&&n.css("background-color",i),Dk(n)):t},preParseHtml:[bF],parseStyleHtml:function(e,t,n){var r=Br(e);if(!zt.isText(t))return t;var o=t,i=xk(r,"color");i&&(o.color=i);var a=xk(r,"background-color");return a||(a=xk(r,"background")),a&&(o.bgColor=a),o},menus:[{key:"color",factory:function(){return new EF},config:{colors:CF}},{key:"bgColor",factory:function(){return new DF},config:{colors:CF}}]},SF=/^(?:\w+:)?\/\/(\S+)$/,AF=/^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/,OF=/^[^\s\.]+\.\S{2,}$/,kF=HS.includes;function BF(e){return void 0===e&&(e="r"),e+"-"+Bo()}function FF(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;")}function TF(e,t,n,r){return Bk(this,void 0,void 0,(function(){var o,i;return Fk(this,(function(a){switch(a.label){case 0:return(o=t.getMenuConfig(e).checkLink)?[4,o(n,r)]:[3,2];case 1:if("string"==typeof(i=a.sent()))return t.alert(i,"error"),[2,!1];if(null==i)return[2,!1];a.label=2;case 2:return[2,!0]}}))}))}function _F(e,t,n){return Bk(this,void 0,void 0,(function(){var r;return Fk(this,(function(o){switch(o.label){case 0:return(r=t.getMenuConfig(e).parseLinkUrl)?[4,r(n)]:[3,2];case 1:return[2,o.sent()];case 2:return[2,n]}}))}))}function PF(e){return null==e.selection||!!qy.getSelectedElems(e).some((function(t){var n=t.type;return!!e.isVoid(t)||!!["pre","code","link"].includes(n)||void 0}))}function jF(e,t){return{type:"link",url:FF(e),children:t?[{text:t}]:[]}}function NF(e,t,n){return Bk(this,void 0,void 0,(function(){var r,o,i;return Fk(this,(function(a){switch(a.label){case 0:return n?(t||(t=n),e.restoreSelection(),PF(e)?[2]:[4,TF("insertLink",e,t,n)]):[2];case 1:return a.sent()?[4,_F("insertLink",e,n)]:[2];case 2:return r=a.sent(),null==(o=e.selection)||(Pt.isCollapsed(o)?(e.insertText(" "),i=jF(r,t),on.insertNodes(e,i),e.insertFragment([{text:" "}])):vt.string(e,o)!==t?(e.deleteFragment(),i=jF(r,t),on.insertNodes(e,i)):(i=jF(r),on.wrapNodes(e,i,{split:!0}),on.collapse(e,{edge:"end"}))),[2]}}))}))}uA({target:"Array",proto:!0},{includes:function(e){return kF(this,e,arguments.length>1?arguments[1]:void 0)}}),YO("includes");var IF={type:"link",renderElem:function(e,t,n){var r=e,o=r.url,i=r.target;return xi("a",{href:o,target:void 0===i?"_blank":i},t)}},LF={selector:"a:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);return 0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"link",url:r.attr("href")||"",target:r.attr("target")||"",children:t}}};function RF(){return BF("w-e-insert-link")}var MF=function(){function e(){this.title=_C("link.insert"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M440.224 635.776a51.84 51.84 0 0 1-36.768-15.232c-95.136-95.136-95.136-249.92 0-345.056l192-192C641.536 37.408 702.816 12.032 768 12.032s126.432 25.376 172.544 71.456c95.136 95.136 95.136 249.92 0 345.056l-87.776 87.776a51.968 51.968 0 1 1-73.536-73.536l87.776-87.776a140.16 140.16 0 0 0 0-197.984c-26.432-26.432-61.6-40.992-99.008-40.992s-72.544 14.56-99.008 40.992l-192 192a140.16 140.16 0 0 0 0 197.984 51.968 51.968 0 0 1-36.768 88.768z"></path><path d="M256 1012a242.4 242.4 0 0 1-172.544-71.456c-95.136-95.136-95.136-249.92 0-345.056l87.776-87.776a51.968 51.968 0 1 1 73.536 73.536l-87.776 87.776a140.16 140.16 0 0 0 0 197.984c26.432 26.432 61.6 40.992 99.008 40.992s72.544-14.56 99.008-40.992l192-192a140.16 140.16 0 0 0 0-197.984 51.968 51.968 0 1 1 73.536-73.536c95.136 95.136 95.136 249.92 0 345.056l-192 192A242.4 242.4 0 0 1 256 1012z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.textInputId=RF(),this.urlInputId=RF(),this.buttonId=RF()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return PF(e)},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=e.selection,n=this,r=n.textInputId,o=n.urlInputId,i=n.buttonId,a=_k(vD(_C("link.text"),r),2),u=a[0],s=Br(a[1]),l=_k(vD(_C("link.url"),o),2),c=l[0],f=Br(l[1]),d=_k(yD(i,_C("common.ok")),1)[0];if(null==this.$content){var p=Br("<div></div>");p.on("click","#"+i,(function(t){t.preventDefault();var n=p.find("#"+r).val(),i=p.find("#"+o).val();NF(e,n,i),e.hidePanelOrModal()})),this.$content=p}var h=this.$content;if(h.empty(),h.append(u),h.append(c),h.append(d),null==t||Pt.isCollapsed(t))s.val("");else{var g=vt.string(e,t);s.val(g)}return f.val(""),setTimeout((function(){s.focus()})),h[0]},e}();function zF(){return BF("w-e-update-link")}var $F=function(){function e(){this.title=_C("link.edit"),this.iconSvg=oB,this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.urlInputId=zF(),this.buttonId=zF()}return e.prototype.getSelectedLinkElem=function(e){var t=qy.getSelectedNodeByType(e,"link");return null==t?null:t},e.prototype.getValue=function(e){var t=this.getSelectedLinkElem(e);return t&&t.url||""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedLinkElem(e)},e.prototype.getModalPositionNode=function(e){return qy.getSelectedNodeByType(e,"link")},e.prototype.getModalContentElem=function(e){var t=this.urlInputId,n=this.buttonId,r=_k(vD(_C("link.url"),t),2),o=r[0],i=Br(r[1]),a=_k(yD(n,_C("common.ok")),1)[0];if(null==this.$content){var u=Br("<div></div>");u.on("click","button",(function(n){n.preventDefault(),e.restoreSelection();var r=qy.getSelectedNodeByType(e,"link"),o=r?Et.string(r):"",i=u.find("#"+t).val();!function(e,t,n){Bk(this,void 0,void 0,(function(){var r,o;return Fk(this,(function(i){switch(i.label){case 0:return n?[4,TF("editLink",e,t,n)]:[2];case 1:return i.sent()?[4,_F("editLink",e,n)]:[2];case 2:return r=i.sent(),o={url:FF(r)},on.setNodes(e,o,{match:function(e){return qy.checkNodeType(e,"link")}}),[2]}}))}))}(e,o,i),e.hidePanelOrModal()})),this.$content=u}var s=this.$content;s.empty(),s.append(o),s.append(a);var l=this.getValue(e);return i.val(l),setTimeout((function(){i.focus()})),s[0]},e}(),HF=function(){function e(){this.title=_C("link.unLink"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M608.16328 811.815036c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.347563 89.347564c-118.525421 118.523421-311.38448 118.531421-429.919901 0-118.527421-118.529421-118.527421-311.39048 0-429.917901l89.349564-89.349563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.195613 79.195613c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.349563 89.347564c-56.143726 56.145726-56.143726 147.49928 0 203.645005 56.143726 56.143726 147.49928 56.145726 203.647005 0l89.347564-89.347563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.193613 79.195613z m-113.135447-520.429459c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.347564-89.347564c56.143726-56.149726 147.49928-56.145726 203.647006 0 56.143726 56.145726 56.143726 147.49928 0 203.645006l-89.349564 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.195613 79.195613c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.349564-89.349563c118.529421-118.529421 118.529421-311.38848 0-429.917901-118.531421-118.527421-311.38848-118.527421-429.919901 0l-89.347563 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.193613 79.195613z m469.653707 718.556492l45.253779-45.253779c18.745908-18.745908 18.745908-49.13776 0-67.881669L127.195629 14.062931c-18.745908-18.745908-49.13776-18.745908-67.881669 0L14.058181 59.31871c-18.745908 18.745908-18.745908 49.13776 0 67.881669l882.74169 882.74169c18.745908 18.743908 49.13776 18.743908 67.881669 0z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==qy.getSelectedNodeByType(e,"link")},e.prototype.exec=function(e,t){this.isDisabled(e)||on.unwrapNodes(e,{match:function(e){return qy.checkNodeType(e,"link")}})},e}(),VF=function(){function e(){this.title=_C("link.view"),this.iconSvg=iB,this.tag="button"}return e.prototype.getSelectedLinkElem=function(e){var t=qy.getSelectedNodeByType(e,"link");return null==t?null:t},e.prototype.getValue=function(e){var t=this.getSelectedLinkElem(e);return t&&t.url||""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedLinkElem(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){if(!t||"string"!=typeof t)throw new Error("View link failed, link url is '"+t+"'");window.open(t,"_blank")}},e}(),UF={checkLink:function(e,t){return!0},parseLinkUrl:function(e){return e}},WF={renderElems:[IF],elemsToHtml:[{type:"link",elemToHtml:function(e,t){var n=e,r=n.url,o=n.target;return'<a href="'+r+'" target="'+(void 0===o?"_blank":o)+'">'+t+"</a>"}}],parseElemsHtml:[LF],menus:[{key:"insertLink",factory:function(){return new MF},config:UF},{key:"editLink",factory:function(){return new $F},config:UF},{key:"unLink",factory:function(){return new HF}},{key:"viewLink",factory:function(){return new VF}}],editorPlugin:function(e){var t=e.isInline,n=e.insertData,r=e.normalizeNode;e.insertNode,e.insertText;var o=e;return o.isInline=function(e){return"link"===e.type||t(e)},o.insertData=function(e){var t=e.getData("text/plain");if(function(e){if("string"!=typeof e)return!1;var t=e.match(SF);if(!t)return!1;var n=t[1];return!(!n||!AF.test(n)&&!OF.test(n))}(t)){if(!PF(o)){var r=o.selection;if(null!=r){var i=vt.string(o,r);NF(o,i,t)}}}else n(e)},o.normalizeNode=function(e){var t=_k(e,2),n=t[0],i=t[1];return"link"!==qy.getNodeType(n)?r([n,i]):""===Et.string(n)?on.removeNodes(o,{at:i}):r([n,i])},o}},qF=QC(1..valueOf),GF=MC.RangeError,KF=MC.RangeError,YF=MC.String,XF=Math.floor,ZF=QC((function(e){var t=IA(ux(this)),n="",r=jS(e);if(r<0||r==1/0)throw GF("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(t+=t))1&r&&(n+=t);return n})),JF=QC("".slice),QF=QC(1..toFixed),eT=function(e,t,n){return 0===t?n:t%2==1?eT(e,t-1,n*e):eT(e*e,t/2,n)},tT=function(e,t,n){for(var r=-1,o=n;++r<6;)o+=t*e[r],e[r]=o%1e7,o=XF(o/1e7)},nT=function(e,t){for(var n=6,r=0;--n>=0;)r+=e[n],e[n]=XF(r/t),r=r%t*1e7},rT=function(e){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==e[t]){var r=YF(e[t]);n=""===n?r:n+ZF("0",7-r.length)+r}return n};function oT(e,t){return"w-e-image-container-"+qy.findKey(e,t).id}function iT(e,t,n,r){var o=Br("body"),i=oT(e,t),a=r.width,u=r.height,s=0,l=0,c=0,f=!1,d=null;var p=Wo((function(e){e.preventDefault();var t=e.clientX,n=l+(f?s-t:t-s),r=c*(n/l);null!=d&&(n<=15||r<=15||(d.css("width",n+"px"),d.css("height",r+"px")))}),100);function h(n){if(o.off("mousemove",p),null!=d){var r=d.width().toFixed(2),i=d.height().toFixed(2),a={style:kk(kk({},t.style),{width:r+"px",height:i+"px"})};on.setNodes(e,a,{at:qy.findPath(e,t)}),o.off("mouseup",h)}}var g={};return a&&(g.width=a),u&&(g.height=u),xi("div",{id:i,style:g,className:"w-e-image-container w-e-selected-image-container",on:{mousedown:function(t){var n=Br(t.target);n.hasClass("w-e-image-dragger")&&(t.preventDefault(),(n.hasClass("left-top")||n.hasClass("left-bottom"))&&(f=!0),function(t){d=function(){var e=Br("#"+i);if(0===e.length)throw new Error("Cannot find image container elem");return e}(),s=t;var n=d.find("img");if(0===n.length)throw new Error("Cannot find image elem");l=n.width(),c=n.height(),o.on("mousemove",p),o.on("mouseup",h);var r=qy.getHoverbar(e);r&&r.hideAndClean()}(t.clientX))}}},n,xi("div",{className:"w-e-image-dragger left-top"}),xi("div",{className:"w-e-image-dragger right-top"}),xi("div",{className:"w-e-image-dragger left-bottom"}),xi("div",{className:"w-e-image-dragger right-bottom"}))}uA({target:"Number",proto:!0,forced:zC((function(){return"0.000"!==QF(8e-5,3)||"1"!==QF(.9,0)||"1.25"!==QF(1.255,2)||"1000000000000000128"!==QF(0xde0b6b3a7640080,0)}))||!zC((function(){QF({})}))},{toFixed:function(e){var t,n,r,o,i=qF(this),a=jS(e),u=[0,0,0,0,0,0],s="",l="0";if(a<0||a>20)throw KF("Incorrect fraction digits");if(i!=i)return"NaN";if(i<=-1e21||i>=1e21)return YF(i);if(i<0&&(s="-",i=-i),i>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(i*eT(2,69,1))-69)<0?i*eT(2,-t,1):i/eT(2,t,1),n*=4503599627370496,(t=52-t)>0){for(tT(u,0,n),r=a;r>=7;)tT(u,1e7,0),r-=7;for(tT(u,eT(10,r,1),0),r=t-1;r>=23;)nT(u,1<<23),r-=23;nT(u,1<<r),tT(u,1,1),nT(u,2),l=rT(u)}else tT(u,0,n),tT(u,1<<-t,0),l=rT(u)+ZF("0",a);return a>0?s+((o=l.length)<=a?"0."+ZF("0",a-o)+l:JF(l,0,o-a)+"."+JF(l,o-a)):s+l}});var aT={type:"image",renderElem:function(e,t,n){var r=e,o=r.src,i=r.alt,a=void 0===i?"":i,u=r.href,s=void 0===u?"":u,l=r.style,c=void 0===l?{}:l,f=c.width,d=void 0===f?"":f,p=c.height,h=void 0===p?"":p,g=qy.isNodeSelected(n,e),v={};d&&(v.width="100%"),h&&(v.height="100%");var y=xi("img",{style:v,src:o,alt:a,"data-href":s}),m=n.isDisabled();return g&&!m?iT(n,e,y,{width:d,height:h}):function(e,t,n,r){var o=r.width,i=r.height,a={};return o&&(a.width=o),i&&(a.height=i),xi("div",{id:oT(e,t),style:a,className:"w-e-image-container"},n)}(n,e,y,{width:d,height:h})}},uT={selector:"img:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e),o=r.attr("data-href")||"";return o=decodeURIComponent(o),{type:"image",src:r.attr("src")||"",alt:r.attr("alt")||"",href:o,style:{width:xk(r,"width"),height:xk(r,"height")},children:[{text:""}]}}};function sT(e,t,n,r,o){return void 0===r&&(r=""),void 0===o&&(o=""),Bk(this,void 0,void 0,(function(){var i,a;return Fk(this,(function(u){switch(u.label){case 0:return(i=t.getMenuConfig(e).checkImage)?[4,i(n,r,o)]:[3,2];case 1:if("string"==typeof(a=u.sent()))return t.alert(a,"error"),[2,!1];if(null==a)return[2,!1];u.label=2;case 2:return[2,!0]}}))}))}function lT(e,t,n){return Bk(this,void 0,void 0,(function(){var r;return Fk(this,(function(o){switch(o.label){case 0:return(r=t.getMenuConfig(e).parseImageSrc)?[4,r(n)]:[3,2];case 1:return[2,o.sent()];case 2:return[2,n]}}))}))}function cT(e,t,n,r){return void 0===n&&(n=""),void 0===r&&(r=""),Bk(this,void 0,void 0,(function(){var o,i,a;return Fk(this,(function(u){switch(u.label){case 0:return[4,sT("insertImage",e,t,n,r)];case 1:return u.sent()?[4,lT("insertImage",e,t)]:[2];case 2:return o=u.sent(),i={type:"image",src:FF(o),href:r,alt:n,style:{},children:[{text:""}]},null===e.selection&&e.restoreSelection(),qy.getSelectedNodeByType(e,"image")&&e.move(1),fT(e)||(on.insertNodes(e,i),(a=e.getMenuConfig("insertImage").onInsertedImage)&&a(i)),[2]}}))}))}function fT(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||!!_k(vt.nodes(e,{match:function(t){var n=qy.getNodeType(t);return"code"===n||"pre"===n||"link"===n||"list-item"===n||!!n.startsWith("header")||"blockquote"===n||!!vt.isVoid(e,t)},universal:!0}),1)[0]}function dT(){return BF("w-e-insert-image")}var pT=function(){function e(){this.title=_C("image.netImage"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=dT(),this.altInputId=dT(),this.hrefInputId=dT(),this.buttonId=dT()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return fT(e)},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=this,n=this,r=n.srcInputId,o=n.altInputId,i=n.hrefInputId,a=n.buttonId,u=_k(vD(_C("image.src"),r),2),s=u[0],l=Br(u[1]),c=_k(vD(_C("image.desc"),o),2),f=c[0],d=Br(c[1]),p=_k(vD(_C("image.link"),i),2),h=p[0],g=Br(p[1]),v=_k(yD(a,_C("common.ok")),1)[0];if(null==this.$content){var y=Br("<div></div>");y.on("click","#"+a,(function(n){n.preventDefault();var a=y.find("#"+r).val().trim(),u=y.find("#"+o).val().trim(),s=y.find("#"+i).val().trim();t.insertImage(e,a,u,s),e.hidePanelOrModal()})),this.$content=y}var m=this.$content;return m.empty(),m.append(s),m.append(f),m.append(h),m.append(v),l.val(""),d.val(""),g.val(""),setTimeout((function(){l.focus()})),m[0]},e.prototype.insertImage=function(e,t,n,r){void 0===n&&(n=""),void 0===r&&(r=""),t&&(e.restoreSelection(),this.isDisabled(e)||cT(e,t,n,r))},e}(),hT=function(){function e(){this.title=_C("image.delete"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==qy.getSelectedNodeByType(e,"image")},e.prototype.exec=function(e,t){this.isDisabled(e)||on.removeNodes(e,{match:function(e){return qy.checkNodeType(e,"image")}})},e}();function gT(){return BF("w-e-edit-image")}var vT=function(){function e(){this.title=_C("image.edit"),this.iconSvg=oB,this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=gT(),this.altInputId=gT(),this.hrefInputId=gT(),this.buttonId=gT()}return e.prototype.getValue=function(e){return""},e.prototype.getImageNode=function(e){return qy.getSelectedNodeByType(e,"image")},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"image")},e.prototype.getModalPositionNode=function(e){return this.getImageNode(e)},e.prototype.getModalContentElem=function(e){var t=this,n=this,r=n.srcInputId,o=n.altInputId,i=n.hrefInputId,a=n.buttonId,u=this.getImageNode(e);if(null==u)throw new Error("Not found selected image node");var s=_k(vD(_C("image.src"),r),2),l=s[0],c=Br(s[1]),f=_k(vD(_C("image.desc"),o),2),d=f[0],p=Br(f[1]),h=_k(vD(_C("image.link"),i),2),g=h[0],v=Br(h[1]),y=_k(yD(a,_C("common.ok")),1)[0];if(null==this.$content){var m=Br("<div></div>");m.on("click","#"+a,(function(n){n.preventDefault();var a=m.find("#"+r).val(),u=m.find("#"+o).val(),s=m.find("#"+i).val();t.updateImage(e,a,u,s),e.hidePanelOrModal()})),this.$content=m}var b=this.$content;b.empty(),b.append(l),b.append(d),b.append(g),b.append(y);var w=u,E=w.src,D=w.alt,C=void 0===D?"":D,x=w.href,S=void 0===x?"":x;return c.val(E),p.val(C),v.val(S),setTimeout((function(){c.focus()})),b[0]},e.prototype.updateImage=function(e,t,n,r,o){void 0===n&&(n=""),void 0===r&&(r=""),void 0===o&&(o={}),t&&(e.restoreSelection(),this.isDisabled(e)||function(e,t,n,r,o){void 0===n&&(n=""),void 0===r&&(r=""),void 0===o&&(o={}),Bk(this,void 0,void 0,(function(){var i,a,u,s,l,c;return Fk(this,(function(f){switch(f.label){case 0:return[4,sT("editImage",e,t,n,r)];case 1:return f.sent()?[4,lT("editImage",e,t)]:[2];case 2:return i=f.sent(),null==(a=qy.getSelectedNodeByType(e,"image"))||(u=a.style,s={src:i,alt:n,href:r,style:kk(kk({},void 0===u?{}:u),o)},on.setNodes(e,s,{match:function(e){return qy.checkNodeType(e,"image")}}),l=qy.getSelectedNodeByType(e,"image"),(c=e.getMenuConfig("editImage").onUpdatedImage)&&c(l)),[2]}}))}))}(e,t,n,r,o))},e}(),yT=function(){function e(){this.title=_C("image.viewLink"),this.iconSvg=iB,this.tag="button"}return e.prototype.getValue=function(e){var t=qy.getSelectedNodeByType(e,"image");return t&&t.href||""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!this.getValue(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){if(!t||"string"!=typeof t)throw new Error("View image link failed, image.href is '"+t+"'");window.open(t,"_blank")}},e}(),mT=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.getSelectedNode=function(e){return qy.getSelectedNodeByType(e,"image")},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedNode(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=this.getSelectedNode(e);if(null!=n){var r=qy.getHoverbar(e);r&&r.hideAndClean();var o=n.style,i={style:kk(kk({},void 0===o?{}:o),{width:this.value,height:""})};on.setNodes(e,i,{match:function(e){return qy.checkNodeType(e,"image")}})}}},e}(),bT=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="30%",t.value="30%",t}return Ok(t,e),t}(mT),wT=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="50%",t.value="50%",t}return Ok(t,e),t}(mT),ET=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="100%",t.value="100%",t}return Ok(t,e),t}(mT),DT={onInsertedImage:function(e){},onUpdatedImage:function(e){},checkImage:function(e,t,n){return!0},parseImageSrc:function(e){return e}},CT={renderElems:[aT],elemsToHtml:[{type:"image",elemToHtml:function(e,t){var n=e,r=n.src,o=n.alt,i=void 0===o?"":o,a=n.href,u=void 0===a?"":a,s=n.style,l=void 0===s?{}:s,c=l.width,f=void 0===c?"":c,d=l.height,p=void 0===d?"":d,h="";return f&&(h+="width: "+f+";"),p&&(h+="height: "+p+";"),'<img src="'+r+'" alt="'+i+'" data-href="'+u+'" style="'+h+'"/>'}}],parseElemsHtml:[uT],menus:[{key:"insertImage",factory:function(){return new pT},config:DT},{key:"deleteImage",factory:function(){return new hT}},{key:"editImage",factory:function(){return new vT},config:DT},{key:"viewImageLink",factory:function(){return new yT}},{key:"imageWidth30",factory:function(){return new bT}},{key:"imageWidth50",factory:function(){return new wT}},{key:"imageWidth100",factory:function(){return new ET}}],editorPlugin:function(e){var t=e.isInline,n=e.isVoid;e.insertNode;var r=e;return r.isInline=function(e){return"image"===e.type||t(e)},r.isVoid=function(e){return"image"===e.type||n(e)},r}},xT={type:"todo",renderElem:function(e,t,n){var r=!1;return n.isDisabled()&&(r=!0),xi("div",{style:{margin:"5px 0"}},xi("span",{contentEditable:!1,style:{marginRight:"0.5em"}},xi("input",{type:"checkbox",checked:e.checked,disabled:r,on:{change:function(t){var r=qy.findPath(n,e),o={checked:t.target.checked};on.setNodes(n,o,{at:r})}}})),xi("span",null,t))}},ST=function(){function e(){this.title=_C("todo.todo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M278.755556 403.911111l-79.644445 79.644445L455.111111 739.555556l568.888889-568.888889-79.644444-79.644445L455.111111 580.266667l-176.355555-176.355556zM910.222222 910.222222H113.777778V113.777778h568.888889V0H113.777778C51.2 0 0 51.2 0 113.777778v796.444444c0 62.577778 51.2 113.777778 113.777778 113.777778h796.444444c62.577778 0 113.777778-51.2 113.777778-113.777778V455.111111h-113.777778v455.111111z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!!qy.getSelectedNodeByType(e,"todo")},e.prototype.isDisabled=function(e){return null==e.selection||!!qy.getSelectedElems(e).some((function(t){if(vt.isVoid(e,t)&&vt.isBlock(e,t))return!0;var n=t.type;return!!["pre","table","list-item"].includes(n)||void 0}))},e.prototype.exec=function(e,t){var n=this.isActive(e);on.setNodes(e,{type:n?"paragraph":"todo"})},e}(),AT={selector:'div[data-w-e-type="todo"]',parseElemHtml:function(e,t,n){var r=Br(e);0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]);var o=!1;return null!=r.find('input[type="checkbox"]').attr("checked")&&(o=!0),{type:"todo",checked:o,children:t}}},OT={renderElems:[xT],elemsToHtml:[{type:"todo",elemToHtml:function(e,t){return'<div data-w-e-type="todo"><input type="checkbox" disabled '+(e.checked?"checked":"")+">"+t+"</div>"}}],preParseHtml:[{selector:"ul.w-e-todo",preParseHtml:function(e){var t=Br(e).find("li"),n=Br('<div data-w-e-type="todo"></div>'),r=t.find("input[type]");return n.append(r),t.children()[0].remove(),n[0].innerHTML=n[0].innerHTML+t[0].innerHTML,n[0]}}],parseElemsHtml:[AT],menus:[{key:"todo",factory:function(){return new ST}}],editorPlugin:function(e){var t=e.deleteBackward,n=e;return n.deleteBackward=function(n){var r=e.selection;if(r&&Pt.isCollapsed(r)){var o=qy.getSelectedNodeByType(e,"todo");if(o&&0===Et.string(o).length)return void on.setNodes(e,{type:"paragraph"},{mode:"highest"})}t(n)},n}},kT={type:"blockquote",renderElem:function(e,t,n){return xi("blockquote",null,t)}},BT={selector:"blockquote:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);return 0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"blockquote",children:t}}},FT=function(){function e(){this.title=_C("blockQuote.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M894.6 907.1H605.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C752.7 180.4 711.3 315.8 711.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z m-472 0H133.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C280.7 180.4 239.3 315.8 239.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!!qy.getSelectedNodeByType(e,"blockquote")},e.prototype.isDisabled=function(e){return null==e.selection||!_k(vt.nodes(e,{match:function(e){var t=qy.getNodeType(e);return"paragraph"===t||"blockquote"===t},universal:!0,mode:"highest"}),1)[0]},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=this.isActive(e)?"paragraph":"blockquote";on.setNodes(e,{type:n},{mode:"highest"})}},e}(),TT={key:"blockquote",factory:function(){return new FT}},_T=QC([].slice),PT=TA("slice"),jT=qx("species"),NT=MC.Array,IT=Math.max;uA({target:"Array",proto:!0,forced:!PT},{slice:function(e,t){var n,r,o,i=sx(this),a=zS(i),u=LS(e,a),s=LS(void 0===t?a:t,a);if(lA(i)&&(n=i.constructor,(CA(n)&&(n===NT||lA(n.prototype))||cx(n)&&null===(n=n[jT]))&&(n=void 0),n===NT||void 0===n))return _T(i,u,s);for(r=new(void 0===n?NT:n)(IT(s-u,0)),o=0;u<s;u++,o++)u in i&&nk(r,o,i[u]);return r.length=o,r}});var LT={renderElems:[kT],elemsToHtml:[{type:"blockquote",elemToHtml:function(e,t){return"<blockquote>"+t+"</blockquote>"}}],parseElemsHtml:[BT],menus:[TT],editorPlugin:function(e){var t=e.insertBreak,n=e.insertText,r=e;return r.insertBreak=function(){var o=r.selection;if(null==o)return t();var i=_k(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"blockquote")},universal:!0}),1)[0];if(!i)return t();var a=i[0],u=qy.findPath(e,a),s=vt.end(e,u);if(Bt.equals(s,o.focus)){var l=Et.string(a);if(l&&"\n"===l.slice(-1))return e.deleteBackward("character"),void on.insertNodes(r,{type:"paragraph",children:[{text:""}]},{mode:"highest"})}n("\n")},r}},RT=function(){function e(){this.title=_C("emotion.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M512 1024C230.4 1024 0 793.6 0 512S230.4 0 512 0s512 230.4 512 512-230.4 512-512 512z m0-102.4c226.742857 0 409.6-182.857143 409.6-409.6S738.742857 102.4 512 102.4 102.4 285.257143 102.4 512s182.857143 409.6 409.6 409.6z m-204.8-358.4h409.6c0 113.371429-91.428571 204.8-204.8 204.8s-204.8-91.428571-204.8-204.8z m0-102.4c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8 76.8 32.914286 76.8 76.8-32.914286 76.8-76.8 76.8z m409.6 0c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8c43.885714 0 76.8 32.914286 76.8 76.8s-32.914286 76.8-76.8 76.8z"></path></svg>',this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.exec=function(e,t){},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!!_k(vt.nodes(e,{match:function(t){return"pre"===qy.getNodeType(t)||!!vt.isVoid(e,t)},universal:!0}),1)[0]},e.prototype.getPanelContentElem=function(e){if(null==this.$content){var t=Br('<ul class="w-e-panel-content-emotion"></ul>');t.on("click","li",(function(t){var n=t.target;if(null!=n){t.preventDefault();var r=Br(n).text();e.insertText(r)}})),this.$content=t}var n=this.$content;if(null==n)return document.createElement("ul");n.empty();var r=e.getMenuConfig("emotion").emotions;return(void 0===r?[]:r).forEach((function(e){var t=Br("<li>"+e+"</li>");n.append(t)})),n[0]},e}(),MT={menus:[{key:"emotion",factory:function(){return new RT},config:{emotions:"😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😛 😝 😜 🤓 😎 😏 😒 😞 😔 😟 😕 🙁 😣 😖 😫 😩 😢 😭 😤 😠 😡 😳 😱 😨 🤗 🤔 😶 😑 😬 🙄 😯 😴 😷 🤑 😈 🤡 💩 👻 💀 👀 👣 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🖕 ✍️ 🙏".split(" ")}}]},zT={1:"12px",2:"14px",3:"16px",4:"19px",5:"24px",6:"32px",7:"48px"},$T={selector:"font",preParseHtml:function(e){var t=Br(e);if("font"!==Ck(t))return e;var n=t.attr("size")||"";n&&(t.removeAttr("size"),t.css("font-size",zT[n]));var r=t.attr("face")||"";return r&&(t.removeAttr("face"),t.css("font-family",r)),t[0]}},HT=QC("".indexOf);uA({target:"String",proto:!0,forced:!VB("includes")},{includes:function(e){return!!~HT(IA(ux(this)),IA($B(e)),arguments.length>1?arguments[1]:void 0)}});var VT,UT,WT=function(e){return e&&e.Math==Math&&e},qT=WT("object"==typeof globalThis&&globalThis)||WT("object"==typeof window&&window)||WT("object"==typeof self&&self)||WT("object"==typeof jC&&jC)||function(){return this}()||Function("return this")(),GT=Function.prototype,KT=GT.apply,YT=GT.bind,XT=GT.call,ZT="object"==typeof Reflect&&Reflect.apply||(YT?XT.bind(KT):function(){return XT.apply(KT,arguments)}),JT=Function.prototype,QT=JT.bind,e_=JT.call,t_=QT&&QT.bind(e_),n_=QT?function(e){return e&&t_(e_,e)}:function(e){return e&&function(){return e_.apply(e,arguments)}},r_=function(e){return"function"==typeof e},o_=function(e){try{return!!e()}catch(t){return!0}},i_=!o_((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),a_=Function.prototype.call,u_=a_.bind?a_.bind(a_):function(){return a_.apply(a_,arguments)},s_={}.propertyIsEnumerable,l_=Object.getOwnPropertyDescriptor,c_=l_&&!s_.call({1:2},1)?function(e){var t=l_(this,e);return!!t&&t.enumerable}:s_,f_={f:c_},d_=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},p_=n_({}.toString),h_=n_("".slice),g_=function(e){return h_(p_(e),8,-1)},v_=qT.Object,y_=n_("".split),m_=o_((function(){return!v_("z").propertyIsEnumerable(0)}))?function(e){return"String"==g_(e)?y_(e,""):v_(e)}:v_,b_=qT.TypeError,w_=function(e){if(null==e)throw b_("Can't call method on "+e);return e},E_=function(e){return m_(w_(e))},D_=function(e){return"object"==typeof e?null!==e:r_(e)},C_={},x_=function(e){return r_(e)?e:void 0},S_=function(e,t){return arguments.length<2?x_(C_[e])||x_(qT[e]):C_[e]&&C_[e][t]||qT[e]&&qT[e][t]},A_=n_({}.isPrototypeOf),O_=S_("navigator","userAgent")||"",k_=qT.process,B_=qT.Deno,F_=k_&&k_.versions||B_&&B_.version,T_=F_&&F_.v8;T_&&(UT=(VT=T_.split("."))[0]>0&&VT[0]<4?1:+(VT[0]+VT[1])),!UT&&O_&&(!(VT=O_.match(/Edge\/(\d+)/))||VT[1]>=74)&&(VT=O_.match(/Chrome\/(\d+)/))&&(UT=+VT[1]);var __=UT,P_=!!Object.getOwnPropertySymbols&&!o_((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&__&&__<41})),j_=P_&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,N_=qT.Object,I_=j_?function(e){return"symbol"==typeof e}:function(e){var t=S_("Symbol");return r_(t)&&A_(t.prototype,N_(e))},L_=qT.String,R_=qT.TypeError,M_=function(e){if(r_(e))return e;throw R_(function(e){try{return L_(e)}catch(t){return"Object"}}(e)+" is not a function")},z_=qT.TypeError,$_=Object.defineProperty,H_=qT["__core-js_shared__"]||function(e,t){try{$_(qT,e,{value:t,configurable:!0,writable:!0})}catch(rY){qT[e]=t}return t}("__core-js_shared__",{}),V_=NC((function(e){(e.exports=function(e,t){return H_[e]||(H_[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"pure",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),U_=qT.Object,W_=function(e){return U_(w_(e))},q_=n_({}.hasOwnProperty),G_=Object.hasOwn||function(e,t){return q_(W_(e),t)},K_=0,Y_=Math.random(),X_=n_(1..toString),Z_=function(e){return"Symbol("+(void 0===e?"":e)+")_"+X_(++K_+Y_,36)},J_=V_("wks"),Q_=qT.Symbol,eP=Q_&&Q_.for,tP=j_?Q_:Q_&&Q_.withoutSetter||Z_,nP=function(e){if(!G_(J_,e)||!P_&&"string"!=typeof J_[e]){var t="Symbol."+e;P_&&G_(Q_,e)?J_[e]=Q_[e]:J_[e]=j_&&eP?eP(t):tP(t)}return J_[e]},rP=qT.TypeError,oP=nP("toPrimitive"),iP=function(e){var t=function(e,t){if(!D_(e)||I_(e))return e;var n,r,o=null==(n=e[oP])?void 0:M_(n);if(o){if(void 0===t&&(t="default"),r=u_(o,e,t),!D_(r)||I_(r))return r;throw rP("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&r_(n=e.toString)&&!D_(r=u_(n,e)))return r;if(r_(n=e.valueOf)&&!D_(r=u_(n,e)))return r;if("string"!==t&&r_(n=e.toString)&&!D_(r=u_(n,e)))return r;throw z_("Can't convert object to primitive value")}(e,t)}(e,"string");return I_(t)?t:t+""},aP=qT.document,uP=D_(aP)&&D_(aP.createElement),sP=function(e){return uP?aP.createElement(e):{}},lP=!i_&&!o_((function(){return 7!=Object.defineProperty(sP("div"),"a",{get:function(){return 7}}).a})),cP=Object.getOwnPropertyDescriptor,fP={f:i_?cP:function(e,t){if(e=E_(e),t=iP(t),lP)try{return cP(e,t)}catch(n){}if(G_(e,t))return d_(!u_(f_.f,e,t),e[t])}},dP=/#|\.prototype\./,pP=function(e,t){var n=gP[hP(e)];return n==yP||n!=vP&&(r_(t)?o_(t):!!t)},hP=pP.normalize=function(e){return String(e).replace(dP,".").toLowerCase()},gP=pP.data={},vP=pP.NATIVE="N",yP=pP.POLYFILL="P",mP=pP,bP=n_(n_.bind),wP=function(e,t){return M_(e),void 0===t?e:bP?bP(e,t):function(){return e.apply(t,arguments)}},EP=qT.String,DP=qT.TypeError,CP=function(e){if(D_(e))return e;throw DP(EP(e)+" is not an object")},xP=qT.TypeError,SP=Object.defineProperty,AP={f:i_?SP:function(e,t,n){if(CP(e),t=iP(t),CP(n),lP)try{return SP(e,t,n)}catch(r){}if("get"in n||"set"in n)throw xP("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},OP=i_?function(e,t,n){return AP.f(e,t,d_(1,n))}:function(e,t,n){return e[t]=n,e},kP=fP.f,BP=function(e){var t=function(n,r,o){if(this instanceof t){switch(arguments.length){case 0:return new e;case 1:return new e(n);case 2:return new e(n,r)}return new e(n,r,o)}return ZT(e,this,arguments)};return t.prototype=e.prototype,t},FP=function(e,t){var n,r,o,i,a,u,s,l,c=e.target,f=e.global,d=e.stat,p=e.proto,h=f?qT:d?qT[c]:(qT[c]||{}).prototype,g=f?C_:C_[c]||OP(C_,c,{})[c],v=g.prototype;for(o in t)n=!mP(f?o:c+(d?".":"#")+o,e.forced)&&h&&G_(h,o),a=g[o],n&&(u=e.noTargetGet?(l=kP(h,o))&&l.value:h[o]),i=n&&u?u:t[o],n&&typeof a==typeof i||(s=e.bind&&n?wP(i,qT):e.wrap&&n?BP(i):p&&r_(i)?n_(i):i,(e.sham||i&&i.sham||a&&a.sham)&&OP(s,"sham",!0),OP(g,o,s),p&&(G_(C_,r=c+"Prototype")||OP(C_,r,{}),OP(C_[r],o,i),e.real&&v&&!v[o]&&OP(v,o,i)))},TP=Array.isArray||function(e){return"Array"==g_(e)},_P=Math.ceil,PP=Math.floor,jP=function(e){var t=+e;return t!=t||0===t?0:(t>0?PP:_P)(t)},NP=Math.min,IP=function(e){return(t=e.length)>0?NP(jP(t),9007199254740991):0;var t},LP=function(e,t,n){var r=iP(t);r in e?AP.f(e,r,d_(0,n)):e[r]=n},RP={};RP[nP("toStringTag")]="z";var MP="[object z]"===String(RP),zP=nP("toStringTag"),$P=qT.Object,HP="Arguments"==g_(function(){return arguments}()),VP=MP?g_:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=$P(e),zP))?n:HP?g_(t):"Object"==(r=g_(t))&&r_(t.callee)?"Arguments":r},UP=n_(Function.toString);r_(H_.inspectSource)||(H_.inspectSource=function(e){return UP(e)});var WP=H_.inspectSource,qP=function(){},GP=[],KP=S_("Reflect","construct"),YP=/^\s*(?:class|function)\b/,XP=n_(YP.exec),ZP=!YP.exec(qP),JP=function(e){if(!r_(e))return!1;try{return KP(qP,GP,e),!0}catch(t){return!1}},QP=!KP||o_((function(){var e;return JP(JP.call)||!JP(Object)||!JP((function(){e=!0}))||e}))?function(e){if(!r_(e))return!1;switch(VP(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return ZP||!!XP(YP,WP(e))}:JP,ej=nP("species"),tj=qT.Array,nj=function(e,t){return new(TP(n=e)&&(r=n.constructor,(QP(r)&&(r===tj||TP(r.prototype))||D_(r)&&null===(r=r[ej]))&&(r=void 0)),void 0===r?tj:r)(0===t?0:t);var n,r},rj=nP("species"),oj=nP("isConcatSpreadable"),ij=qT.TypeError,aj=__>=51||!o_((function(){var e=[];return e[oj]=!1,e.concat()[0]!==e})),uj=__>=51||!o_((function(){var e=[];return(e.constructor={})[rj]=function(){return{foo:1}},1!==e.concat(Boolean).foo})),sj=function(e){if(!D_(e))return!1;var t=e[oj];return void 0!==t?!!t:TP(e)};FP({target:"Array",proto:!0,forced:!aj||!uj},{concat:function(e){var t,n,r,o,i,a=W_(this),u=nj(a,0),s=0;for(t=-1,r=arguments.length;t<r;t++)if(sj(i=-1===t?a:arguments[t])){if(s+(o=IP(i))>9007199254740991)throw ij("Maximum allowed index exceeded");for(n=0;n<o;n++,s++)n in i&&LP(u,s,i[n])}else{if(s>=9007199254740991)throw ij("Maximum allowed index exceeded");LP(u,s++,i)}return u.length=s,u}});var lj,cj=qT.String,fj=function(e){if("Symbol"===VP(e))throw TypeError("Cannot convert a Symbol value to a string");return cj(e)},dj=Math.max,pj=Math.min,hj=function(e,t){var n=jP(e);return n<0?dj(n+t,0):pj(n,t)},gj=function(e){return function(t,n,r){var o,i=E_(t),a=IP(i),u=hj(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},vj={includes:gj(!0),indexOf:gj(!1)},yj={},mj=vj.indexOf,bj=n_([].push),wj=function(e,t){var n,r=E_(e),o=0,i=[];for(n in r)!G_(yj,n)&&G_(r,n)&&bj(i,n);for(;t.length>o;)G_(r,n=t[o++])&&(~mj(i,n)||bj(i,n));return i},Ej=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Dj=Object.keys||function(e){return wj(e,Ej)},Cj=i_?Object.defineProperties:function(e,t){CP(e);for(var n,r=E_(t),o=Dj(t),i=o.length,a=0;i>a;)AP.f(e,n=o[a++],r[n]);return e},xj=S_("document","documentElement"),Sj=V_("keys"),Aj=function(e){return Sj[e]||(Sj[e]=Z_(e))},Oj=Aj("IE_PROTO"),kj=function(){},Bj=function(e){return"<script>"+e+"<\/script>"},Fj=function(e){e.write(Bj("")),e.close();var t=e.parentWindow.Object;return e=null,t},Tj=function(){try{lj=new ActiveXObject("htmlfile")}catch(r){}var e,t;Tj="undefined"!=typeof document?document.domain&&lj?Fj(lj):((t=sP("iframe")).style.display="none",xj.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Bj("document.F=Object")),e.close(),e.F):Fj(lj);for(var n=Ej.length;n--;)delete Tj.prototype[Ej[n]];return Tj()};yj[Oj]=!0;var _j,Pj,jj,Nj=Object.create||function(e,t){var n;return null!==e?(kj.prototype=CP(e),n=new kj,kj.prototype=null,n[Oj]=e):n=Tj(),void 0===t?n:Cj(n,t)},Ij=Ej.concat("length","prototype"),Lj={f:Object.getOwnPropertyNames||function(e){return wj(e,Ij)}},Rj=qT.Array,Mj=Math.max,zj=Lj.f,$j="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Hj={f:function(e){return $j&&"Window"==g_(e)?function(e){try{return zj(e)}catch(t){return function(e,t,n){for(var r=IP(e),o=hj(void 0,r),i=hj(r,r),a=Rj(Mj(i-o,0)),u=0;o<i;o++,u++)LP(a,u,e[o]);return a.length=u,a}($j)}}(e):zj(E_(e))}},Vj={f:Object.getOwnPropertySymbols},Uj=n_([].slice),Wj=function(e,t,n,r){r&&r.enumerable?e[t]=n:OP(e,t,n)},qj={f:nP},Gj=AP.f,Kj=function(e){var t=C_.Symbol||(C_.Symbol={});G_(t,e)||Gj(t,e,{value:qj.f(e)})},Yj=MP?{}.toString:function(){return"[object "+VP(this)+"]"},Xj=AP.f,Zj=nP("toStringTag"),Jj=function(e,t,n,r){if(e){var o=n?e:e.prototype;G_(o,Zj)||Xj(o,Zj,{configurable:!0,value:t}),r&&!MP&&OP(o,"toString",Yj)}},Qj=qT.WeakMap,eN=r_(Qj)&&/native code/.test(WP(Qj)),tN=qT.TypeError,nN=qT.WeakMap;if(eN||H_.state){var rN=H_.state||(H_.state=new nN),oN=n_(rN.get),iN=n_(rN.has),aN=n_(rN.set);_j=function(e,t){if(iN(rN,e))throw new tN("Object already initialized");return t.facade=e,aN(rN,e,t),t},Pj=function(e){return oN(rN,e)||{}},jj=function(e){return iN(rN,e)}}else{var uN=Aj("state");yj[uN]=!0,_j=function(e,t){if(G_(e,uN))throw new tN("Object already initialized");return t.facade=e,OP(e,uN,t),t},Pj=function(e){return G_(e,uN)?e[uN]:{}},jj=function(e){return G_(e,uN)}}var sN={set:_j,get:Pj,has:jj,enforce:function(e){return jj(e)?Pj(e):_j(e,{})},getterFor:function(e){return function(t){var n;if(!D_(t)||(n=Pj(t)).type!==e)throw tN("Incompatible receiver, "+e+" required");return n}}},lN=n_([].push),cN=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=W_(s),g=m_(h),v=wP(l,c),y=IP(g),m=0,b=f||nj,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:lN(w,d)}else switch(e){case 4:return!1;case 7:lN(w,d)}return i?-1:r||o?o:w}},fN=[cN(0),cN(1),cN(2),cN(3),cN(4),cN(5),cN(6),cN(7)][0],dN=Aj("hidden"),pN=nP("toPrimitive"),hN=sN.set,gN=sN.getterFor("Symbol"),vN=Object.prototype,yN=qT.Symbol,mN=yN&&yN.prototype,bN=qT.TypeError,wN=qT.QObject,EN=S_("JSON","stringify"),DN=fP.f,CN=AP.f,xN=Hj.f,SN=f_.f,AN=n_([].push),ON=V_("symbols"),kN=V_("op-symbols"),BN=V_("string-to-symbol-registry"),FN=V_("symbol-to-string-registry"),TN=V_("wks"),_N=!wN||!wN.prototype||!wN.prototype.findChild,PN=i_&&o_((function(){return 7!=Nj(CN({},"a",{get:function(){return CN(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=DN(vN,t);r&&delete vN[t],CN(e,t,n),r&&e!==vN&&CN(vN,t,r)}:CN,jN=function(e,t){var n=ON[e]=Nj(mN);return hN(n,{type:"Symbol",tag:e,description:t}),i_||(n.description=t),n},NN=function(e,t,n){e===vN&&NN(kN,t,n),CP(e);var r=iP(t);return CP(n),G_(ON,r)?(n.enumerable?(G_(e,dN)&&e[dN][r]&&(e[dN][r]=!1),n=Nj(n,{enumerable:d_(0,!1)})):(G_(e,dN)||CN(e,dN,d_(1,{})),e[dN][r]=!0),PN(e,r,n)):CN(e,r,n)},IN=function(e,t){CP(e);var n=E_(t),r=Dj(n).concat(zN(n));return fN(r,(function(t){i_&&!u_(LN,n,t)||NN(e,t,n[t])})),e},LN=function(e){var t=iP(e),n=u_(SN,this,t);return!(this===vN&&G_(ON,t)&&!G_(kN,t))&&(!(n||!G_(this,t)||!G_(ON,t)||G_(this,dN)&&this[dN][t])||n)},RN=function(e,t){var n=E_(e),r=iP(t);if(n!==vN||!G_(ON,r)||G_(kN,r)){var o=DN(n,r);return!o||!G_(ON,r)||G_(n,dN)&&n[dN][r]||(o.enumerable=!0),o}},MN=function(e){var t=xN(E_(e)),n=[];return fN(t,(function(e){G_(ON,e)||G_(yj,e)||AN(n,e)})),n},zN=function(e){var t=e===vN,n=xN(t?kN:E_(e)),r=[];return fN(n,(function(e){!G_(ON,e)||t&&!G_(vN,e)||AN(r,ON[e])})),r};if(P_||(mN=(yN=function(){if(A_(mN,this))throw bN("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?fj(arguments[0]):void 0,t=Z_(e),n=function(e){this===vN&&u_(n,kN,e),G_(this,dN)&&G_(this[dN],t)&&(this[dN][t]=!1),PN(this,t,d_(1,e))};return i_&&_N&&PN(vN,t,{configurable:!0,set:n}),jN(t,e)}).prototype,Wj(mN,"toString",(function(){return gN(this).tag})),Wj(yN,"withoutSetter",(function(e){return jN(Z_(e),e)})),f_.f=LN,AP.f=NN,fP.f=RN,Lj.f=Hj.f=MN,Vj.f=zN,qj.f=function(e){return jN(nP(e),e)},i_&&CN(mN,"description",{configurable:!0,get:function(){return gN(this).description}})),FP({global:!0,wrap:!0,forced:!P_,sham:!P_},{Symbol:yN}),fN(Dj(TN),(function(e){Kj(e)})),FP({target:"Symbol",stat:!0,forced:!P_},{for:function(e){var t=fj(e);if(G_(BN,t))return BN[t];var n=yN(t);return BN[t]=n,FN[n]=t,n},keyFor:function(e){if(!I_(e))throw bN(e+" is not a symbol");if(G_(FN,e))return FN[e]},useSetter:function(){_N=!0},useSimple:function(){_N=!1}}),FP({target:"Object",stat:!0,forced:!P_,sham:!i_},{create:function(e,t){return void 0===t?Nj(e):IN(Nj(e),t)},defineProperty:NN,defineProperties:IN,getOwnPropertyDescriptor:RN}),FP({target:"Object",stat:!0,forced:!P_},{getOwnPropertyNames:MN,getOwnPropertySymbols:zN}),FP({target:"Object",stat:!0,forced:o_((function(){Vj.f(1)}))},{getOwnPropertySymbols:function(e){return Vj.f(W_(e))}}),EN){var $N=!P_||o_((function(){var e=yN();return"[null]"!=EN([e])||"{}"!=EN({a:e})||"{}"!=EN(Object(e))}));FP({target:"JSON",stat:!0,forced:$N},{stringify:function(e,t,n){var r=Uj(arguments),o=t;if((D_(t)||void 0!==e)&&!I_(e))return TP(t)||(t=function(e,t){if(r_(o)&&(t=u_(o,this,e,t)),!I_(t))return t}),r[1]=t,ZT(EN,null,r)}})}if(!mN[pN]){var HN=mN.valueOf;Wj(mN,pN,(function(e){return u_(HN,this)}))}Jj(yN,"Symbol"),yj[dN]=!0,Kj("asyncIterator"),Kj("hasInstance"),Kj("isConcatSpreadable"),Kj("iterator"),Kj("match"),Kj("matchAll"),Kj("replace"),Kj("search"),Kj("species"),Kj("split"),Kj("toPrimitive"),Kj("toStringTag"),Kj("unscopables"),Jj(qT.JSON,"JSON",!0);var VN,UN,WN,qN=C_.Symbol,GN={},KN=Function.prototype,YN=i_&&Object.getOwnPropertyDescriptor,XN=G_(KN,"name"),ZN={EXISTS:XN,PROPER:XN&&"something"===function(){}.name,CONFIGURABLE:XN&&(!i_||i_&&YN(KN,"name").configurable)},JN=!o_((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),QN=Aj("IE_PROTO"),eI=qT.Object,tI=eI.prototype,nI=JN?eI.getPrototypeOf:function(e){var t=W_(e);if(G_(t,QN))return t[QN];var n=t.constructor;return r_(n)&&t instanceof n?n.prototype:t instanceof eI?tI:null},rI=nP("iterator"),oI=!1;[].keys&&("next"in(WN=[].keys())?(UN=nI(nI(WN)))!==Object.prototype&&(VN=UN):oI=!0);var iI=null==VN||o_((function(){var e={};return VN[rI].call(e)!==e}));VN=iI?{}:Nj(VN),r_(VN[rI])||Wj(VN,rI,(function(){return this}));var aI={IteratorPrototype:VN,BUGGY_SAFARI_ITERATORS:oI},uI=aI.IteratorPrototype,sI=function(){return this};qT.String,qT.TypeError,Object.setPrototypeOf||"__proto__"in{}&&function(){var e={};try{n_(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set)(e,[]),e instanceof Array}catch(t){}}();var lI=ZN.PROPER,cI=aI.BUGGY_SAFARI_ITERATORS,fI=nP("iterator"),dI=function(){return this},pI=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=Nj(uI,{next:d_(1,s)}),Jj(u,l,!1,!0),GN[l]=sI;var c,f,d,p=function(e){if(e===o&&m)return m;if(!cI&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[fI]||v["@@iterator"]||o&&v[o],m=!cI&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=nI(b.call(new e)))!==Object.prototype&&c.next&&(Jj(c,h,!0,!0),GN[h]=dI),lI&&"values"==o&&y&&"values"!==y.name&&(g=!0,m=function(){return u_(y,this)}),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(cI||g||!(d in v))&&Wj(v,d,f[d]);else FP({target:t,proto:!0,forced:cI||g},f);return a&&v[fI]!==m&&Wj(v,fI,m,{name:o}),GN[t]=m,f},hI=sN.set,gI=sN.getterFor("Array Iterator");pI(Array,"Array",(function(e,t){hI(this,{type:"Array Iterator",target:E_(e),index:0,kind:t})}),(function(){var e=gI(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),GN.Arguments=GN.Array;var vI=nP("toStringTag");for(var yI in{CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}){var mI=qT[yI],bI=mI&&mI.prototype;bI&&VP(bI)!==vI&&OP(bI,vI,yI),GN[yI]=GN.Array}var wI=qN;Kj("asyncDispose"),Kj("dispose"),Kj("matcher"),Kj("metadata"),Kj("observable"),Kj("patternMatch"),Kj("replaceAll");var EI=wI,DI=n_("".charAt),CI=n_("".charCodeAt),xI=n_("".slice),SI=function(e){return function(t,n){var r,o,i=fj(w_(t)),a=jP(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=CI(i,a))<55296||r>56319||a+1===u||(o=CI(i,a+1))<56320||o>57343?e?DI(i,a):r:e?xI(i,a,a+2):o-56320+(r-55296<<10)+65536}},AI=(SI(!1),SI(!0)),OI=sN.set,kI=sN.getterFor("String Iterator");pI(String,"String",(function(e){OI(this,{type:"String Iterator",string:fj(e),index:0})}),(function(){var e,t=kI(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=AI(n,r),t.index+=e.length,{value:e,done:!1})}));var BI=qj.f("iterator"),FI=NC((function(e){function t(n){return"function"==typeof EI&&"symbol"==typeof BI?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&"function"==typeof EI&&e.constructor===EI&&e!==EI.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0})),TI=function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(FI),_I=FS.EXISTS,PI=uS.f,jI=Function.prototype,NI=QC(jI.toString),II=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,LI=QC(II.exec);$C&&!_I&&PI(jI,"name",{configurable:!0,get:function(){try{return LI(II,NI(this))[1]}catch(tg){return""}}});var RI=function(){function e(){this.tag="select",this.width=80}return e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.mark,n=vt.marks(e);return n&&n[t]?n[t]:""},e.prototype.isDisabled=function(e){return null==e.selection||(this.mark,!!_k(vt.nodes(e,{match:function(t){return"pre"===qy.getNodeType(t)||!!vt.isVoid(e,t)},universal:!0}),1)[0])},e.prototype.exec=function(e,t){var n=this.mark;t?e.addMark(n,t):e.removeMark(n)},e}(),MI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("fontSize.title"),t.iconSvg=sB,t.mark="fontSize",t}return Ok(t,e),t.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig(this.mark).fontSizeList,r=void 0===n?[]:n;t.push({text:_C("fontSize.default"),value:""}),r.forEach((function(e){if("string"==typeof e)t.push({text:e,value:e});else if("object"===TI(e)){var n=e.name,r=e.value;t.push({text:n,value:r})}}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},t}(RI),zI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("fontFamily.title"),t.iconSvg=lB,t.mark="fontFamily",t.selectPanelWidth=150,t}return Ok(t,e),t.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig(this.mark).fontFamilyList,r=void 0===n?[]:n;t.push({text:_C("fontFamily.default"),value:""}),r.forEach((function(e){if("string"==typeof e)t.push({text:e,value:e,styleForRenderMenuList:{"font-family":e}});else if("object"===TI(e)){var n=e.name,r=e.value;t.push({text:n,value:r,styleForRenderMenuList:{"font-family":r}})}}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},t}(RI),$I={renderStyle:function(e,t){var n=e,r=n.fontSize,o=n.fontFamily,i=t;return r&&mF(i,{fontSize:r}),o&&mF(i,{fontFamily:o}),i},styleToHtml:function(e,t){if(!zt.isText(e))return t;var n,r=e,o=r.fontSize,i=r.fontFamily;return o||i?((Ek(t)||"span"!==Ck(n=Br(t)))&&(n=Br("<span>"+t+"</span>")),o&&n.css("font-size",o),i&&n.css("font-family",i),Dk(n)):t},preParseHtml:[$T],parseStyleHtml:function(e,t,n){var r=Br(e);if(!zt.isText(t))return t;var o=t,i=n.getMenuConfig("fontSize").fontSizeList,a=void 0===i?[]:i,u=xk(r,"font-size"),s=a.find((function(e){return e.value&&e.value===u}))||a.includes(u);u&&s&&(o.fontSize=u);var l=n.getMenuConfig("fontFamily").fontFamilyList,c=void 0===l?[]:l,f=xk(r,"font-family"),d=c.find((function(e){return e.value&&e.value===f}))||c.includes(f);return f&&d&&(o.fontFamily=f),o},menus:[{key:"fontSize",factory:function(){return new MI},config:{fontSizeList:["12px",{name:"13px",value:"13px"},"14px","15px","16px","19px",{name:"22px",value:"22px"},"24px","29px","32px","40px","48px"]}},{key:"fontFamily",factory:function(){return new zI},config:{fontFamilyList:["黑体",{name:"仿宋",value:"仿宋"},"楷体","标楷体","华文仿宋","华文楷体",{name:"宋体",value:"宋体"},"微软雅黑","Arial","Tahoma","Verdana","Times New Roman","Courier New"]}}]},HI={selector:"p,h1,h2,h3,h4,h5",preParseHtml:function(e){var t=Br(e),n=xk(t,"padding-left");return/\dem/.test(n)&&t.css("text-indent","2em"),/\dpx/.test(n)&&parseInt(n,10)%32==0&&t.css("text-indent","2em"),t[0]}},VI=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){var t=_k(vt.nodes(e,{match:function(e){return!!e.indent},universal:!0}),1)[0];return null==t?"":_k(t,1)[0].indent||""},e.prototype.isActive=function(e){return!1},e.prototype.getMatchNode=function(e){var t=_k(vt.nodes(e,{match:function(e){var t=qy.getNodeType(e);return"paragraph"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e}(),UI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("indent.decrease"),t.iconSvg=cB,t}return Ok(t,e),t.prototype.isDisabled=function(e){var t=this.getMatchNode(e);return null==t||!t.indent},t.prototype.exec=function(e,t){on.setNodes(e,{indent:null},{match:function(e){return ct.isElement(e)}})},t}(VI),WI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("indent.increase"),t.iconSvg=fB,t}return Ok(t,e),t.prototype.isDisabled=function(e){var t=this.getMatchNode(e);return null==t||!!t.indent},t.prototype.exec=function(e,t){on.setNodes(e,{indent:"2em"},{match:function(e){return ct.isElement(e)},mode:"highest"})},t}(VI),qI={renderStyle:function(e,t){if(!ct.isElement(e))return t;var n=e.indent,r=t;return n&&mF(r,{textIndent:n}),r},styleToHtml:function(e,t){if(!ct.isElement(e))return t;var n=e.indent;if(!n)return t;var r=Br(t);return r.css("text-indent",n),Dk(r)},preParseHtml:[HI],parseStyleHtml:function(e,t,n){var r=Br(e);if(!ct.isElement(t))return t;var o=t,i=xk(r,"text-indent"),a=parseInt(i,10);return i&&a>0&&(o.indent=i),o},menus:[{key:"indent",factory:function(){return new WI}},{key:"delIndent",factory:function(){return new UI}}]},GI=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.getMatchNode=function(e){var t=_k(vt.nodes(e,{match:function(e){var t=qy.getNodeType(e);return"paragraph"===t||"blockquote"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e.prototype.isDisabled=function(e){return null==e.selection||!!qy.getSelectedElems(e).some((function(t){if(vt.isVoid(e,t)&&vt.isBlock(e,t))return!0;var n=t.type;return!!["pre","code"].includes(n)||void 0}))},e}(),KI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("justify.left"),t.iconSvg=dB,t}return Ok(t,e),t.prototype.exec=function(e,t){on.setNodes(e,{textAlign:"left"},{match:function(t){return ct.isElement(t)&&!e.isInline(t)}})},t}(GI),YI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("justify.right"),t.iconSvg=pB,t}return Ok(t,e),t.prototype.exec=function(e,t){on.setNodes(e,{textAlign:"right"},{match:function(t){return ct.isElement(t)&&!e.isInline(t)}})},t}(GI),XI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("justify.center"),t.iconSvg=hB,t}return Ok(t,e),t.prototype.exec=function(e,t){on.setNodes(e,{textAlign:"center"},{match:function(t){return ct.isElement(t)&&!e.isInline(t)}})},t}(GI),ZI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=_C("justify.justify"),t.iconSvg=gB,t}return Ok(t,e),t.prototype.exec=function(e,t){on.setNodes(e,{textAlign:"justify"},{match:function(t){return ct.isElement(t)&&!e.isInline(t)}})},t}(GI),JI={renderStyle:function(e,t){if(!ct.isElement(e))return t;var n=e.textAlign,r=t;return n&&mF(r,{textAlign:n}),r},styleToHtml:function(e,t){if(!ct.isElement(e))return t;var n=e.textAlign;if(!n)return t;var r=Br(t);return r.css("text-align",n),Dk(r)},parseStyleHtml:function(e,t,n){var r=Br(e);if(!ct.isElement(t))return t;var o=t,i=xk(r,"text-align");return i&&(o.textAlign=i),o},menus:[{key:"justifyLeft",factory:function(){return new KI}},{key:"justifyRight",factory:function(){return new YI}},{key:"justifyCenter",factory:function(){return new XI}},{key:"justifyJustify",factory:function(){return new ZI}}]},QI=function(){function e(){this.title=_C("lineHeight.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M964 788a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526zM198.93 144.306c6.668-5.798 16.774-5.094 22.573 1.574l122.26 140.582a16 16 0 0 1 3.927 10.5c0 8.836-7.164 16-16 16h-61.8a8 8 0 0 0-8 8v390.077h69.819a16 16 0 0 1 10.502 3.928c6.666 5.8 7.37 15.906 1.57 22.573L221.476 878.123a16 16 0 0 1-1.57 1.57c-6.668 5.8-16.774 5.097-22.574-1.57L75.051 737.538a16 16 0 0 1-3.928-10.5c0-8.837 7.163-16 16-16h69.822V312.96H87.127a16 16 0 0 1-10.502-3.928c-6.666-5.8-7.37-15.906-1.57-22.573l122.303-140.582a16 16 0 0 1 1.572-1.572zM964 465a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z m0-323a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z"></path></svg>',this.tag="select",this.width=80}return e.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig("lineHeight").lineHeightList,r=void 0===n?[]:n;t.push({text:_C("lineHeight.default"),value:""}),r.forEach((function(e){t.push({text:e,value:e})}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},e.prototype.getMatchNode=function(e){var t=_k(vt.nodes(e,{match:function(e){var t=qy.getNodeType(e);return!!t.startsWith("header")||!!["paragraph","blockquote","list-item"].includes(t)},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.getMatchNode(e);return null==t?"":ct.isElement(t)&&t.lineHeight||""},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getMatchNode(e)},e.prototype.exec=function(e,t){on.setNodes(e,{lineHeight:t.toString()},{mode:"highest"})},e}(),eL={renderStyle:function(e,t){if(!ct.isElement(e))return t;var n=e.lineHeight,r=t;return n&&mF(r,{lineHeight:n}),r},styleToHtml:function(e,t){if(!ct.isElement(e))return t;var n=e.lineHeight;if(!n)return t;var r=Br(t);return r.css("line-height",n),Dk(r)},parseStyleHtml:function(e,t,n){var r=Br(e);if(!ct.isElement(t))return t;var o=t,i=n.getMenuConfig("lineHeight").lineHeightList,a=void 0===i?[]:i,u=xk(r,"line-height");return u&&a.includes(u)&&(o.lineHeight=u),o},menus:[{key:"lineHeight",factory:function(){return new QI},config:{lineHeightList:["1","1.15","1.5","2","2.5","3"]}}]},tL=function(){function e(){this.title=_C("undo.redo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M0.00032 576a510.72 510.72 0 0 0 173.344 384l84.672-96A383.136 383.136 0 0 1 128.00032 576C128.00032 363.936 299.93632 192 512.00032 192c106.048 0 202.048 42.976 271.52 112.48L640.00032 448h384V64l-149.984 149.984A510.272 510.272 0 0 0 512.00032 64C229.21632 64 0.00032 293.216 0.00032 576z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection},e.prototype.exec=function(e,t){"function"==typeof e.redo&&e.redo()},e}(),nL=function(){function e(){this.title=_C("undo.undo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M512 64A510.272 510.272 0 0 0 149.984 213.984L0.032 64v384h384L240.512 304.48A382.784 382.784 0 0 1 512.032 192c212.064 0 384 171.936 384 384 0 114.688-50.304 217.632-130.016 288l84.672 96a510.72 510.72 0 0 0 173.344-384c0-282.784-229.216-512-512-512z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection},e.prototype.exec=function(e,t){"function"==typeof e.undo&&e.undo()},e}(),rL={menus:[{key:"redo",factory:function(){return new tL}},{key:"undo",factory:function(){return new nL}}]},oL={type:"divider",renderElem:function(e,t,n){return oi("div",{props:{contentEditable:!1,className:"w-e-textarea-divider"},dataset:{selected:qy.isNodeSelected(n,e)?"true":""},style:{},on:{mousedown:function(e){return e.preventDefault()}}},[oi("hr")])}},iL=function(){function e(){this.title=_C("divider.title"),this.iconSvg='<svg viewBox="0 0 1092 1024"><path d="M0 51.2m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M819.2 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M409.6 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 870.4m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!!qy.getSelectedElems(e).some((function(t){if(e.isVoid(t))return!0;var n=qy.getNodeType(t);return"table"===n||"pre"===n||void 0}))},e.prototype.exec=function(e,t){on.insertNodes(e,{type:"divider",children:[{text:""}]},{mode:"highest"})},e}(),aL={renderElems:[oL],elemsToHtml:[{type:"divider",elemToHtml:function(e,t){return"<hr/>"}}],parseElemsHtml:[{selector:"hr:not([data-w-e-type])",parseElemHtml:function(e,t,n){return{type:"divider",children:[{text:""}]}}}],menus:[{key:"divider",factory:function(){return new iL}}],editorPlugin:function(e){var t=e.isVoid,n=e.normalizeNode,r=e;return r.isVoid=function(e){return"divider"===e.type||t(e)},r.normalizeNode=function(e){var t=_k(e,2),o=t[0],i=t[1];if("divider"!==qy.getNodeType(o))return n([o,i]);qy.isLastNode(r,o)&&on.insertNodes(r,qy.genEmptyParagraph(),{at:[i[0]+1]})},r}},uL=BA.map;uA({target:"Array",proto:!0,forced:!TA("map")},{map:function(e){return uL(this,e,arguments.length>1?arguments[1]:void 0)}});var sL=QC([].join),lL=ix!=Object,cL=Wk("join",",");uA({target:"Array",proto:!0,forced:lL||!cL},{join:function(e){return sL(sx(this),void 0===e?",":e)}});var fL=function(){function e(){this.title=_C("codeBlock.title"),this.iconSvg='<svg viewBox="0 0 1280 1024"><path d="M832 736l96 96 320-320L928 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224zM701.312 150.528l69.472 18.944-192 704.032-69.472-18.944 192-704.032z"></path></svg>',this.tag="button"}return e.prototype.getSelectCodeElem=function(e){var t=qy.getSelectedNodeByType(e,"code");if(null==t)return null;var n=qy.getParentNode(e,t);return null==n||"pre"!==qy.getNodeType(n)?null:t},e.prototype.getValue=function(e){var t=this.getSelectCodeElem(e);return null==t?"":t.language||""},e.prototype.isActive=function(e){return!!this.getSelectCodeElem(e)},e.prototype.isDisabled=function(e){if(null==e.selection)return!0;var t=qy.getSelectedElems(e);return!!t.some((function(t){return e.isVoid(t)}))||!t.some((function(e){var t=qy.getNodeType(e);if("pre"===t||"paragraph"===t)return!0}))},e.prototype.exec=function(e,t){this.isActive(e)?this.changeToPlainText(e):this.changeToCodeBlock(e,t.toString())},e.prototype.changeToPlainText=function(e){var t=this.getSelectCodeElem(e);if(null!=t){var n=Et.string(t);on.removeNodes(e,{mode:"highest"});var r=n.split("\n").map((function(e){return{type:"paragraph",children:[{text:e}]}}));on.insertNodes(e,r,{mode:"highest"})}},e.prototype.changeToCodeBlock=function(e,t){var n,r,o=[],i=vt.nodes(e,{match:function(t){return e.children.includes(t)},universal:!0});try{for(var a=Tk(i),u=a.next();!u.done;u=a.next()){var s=_k(u.value,1)[0];s&&o.push(Et.string(s))}}catch(c){n={error:c}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}on.removeNodes(e,{mode:"highest"});var l={type:"pre",children:[{type:"code",language:t,children:[{text:o.join("\n")}]}]};on.insertNodes(e,l,{mode:"highest"})},e}(),dL={key:"codeBlock",factory:function(){return new fL}};uA({target:"String",proto:!0,forced:Rk("anchor")},{anchor:function(e){return Lk(this,"a","name",e)}}),DO("match",(function(e,t,n){return[function(t){var n=ux(this),r=null==t?void 0:kx(t,e);return r?VC(r,t,n):new RegExp(t)[e](IA(n))},function(e){var r=oS(this),o=IA(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return LO(r,o);var a=r.unicode;r.lastIndex=0;for(var u,s=[],l=0;null!==(u=LO(r,o));){var c=IA(u[0]);s[l]=c,""===c&&(r.lastIndex=kO(o,MS(r.lastIndex),a)),l++}return 0===l?null:s}]}));var pL={type:"pre",renderElem:function(e,t,n){return xi("pre",null,t)}},hL={type:"code",renderElem:function(e,t,n){return xi("code",null,t)}},gL={selector:"pre:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);return 0===(t=t.filter((function(e){return"code"===qy.getNodeType(e)}))).length&&(t=[{type:"code",language:"",children:[{text:r[0].textContent||""}]}]),{type:"pre",children:t.filter((function(e){return"code"===qy.getNodeType(e)}))}}},vL={menus:[dL],editorPlugin:function(e){var t=e.insertBreak,n=e.normalizeNode,r=e.insertData;e.insertNode;var o=e;return o.insertBreak=function(){var e=qy.getSelectedNodeByType(o,"code");if(null!=e){var n=function(e,t){var n=t.selection;if(null==n)return"";var r=Et.string(e),o=n.anchor.offset,i=r.slice(0,o).split("\n"),a=i.length;return 0===a?"":i[a-1]}(e,o);if(n){var r=n.match(/^\s+/);if(null!=r&&null!=r[0]){var i=r[0];return void o.insertText("\n"+i)}}o.insertText("\n")}else t()},o.normalizeNode=function(e){var t=_k(e,2),r=t[0],i=t[1],a=qy.getNodeType(r);return"code"===a&&i.length<=1&&on.setNodes(o,{type:"paragraph"},{at:i}),"pre"===a&&(qy.isLastNode(o,r)&&on.insertNodes(o,qy.genEmptyParagraph(),{at:[i[0]+1]}),"code"!==qy.getNodeType(r.children[0])&&(on.unwrapNodes(o),on.setNodes(o,{type:"paragraph"},{mode:"highest"}))),n([r,i])},o.insertData=function(e){if(null!=qy.getSelectedNodeByType(o,"code")){var t=e.getData("text/plain");vt.insertText(o,t)}else r(e)},o},renderElems:[pL,hL],elemsToHtml:[{type:"code",elemToHtml:function(e,t){return"<code>"+t+"</code>"}},{type:"pre",elemToHtml:function(e,t){return"<pre>"+t+"</pre>"}}],preParseHtml:[{selector:"pre>code",preParseHtml:function(e){var t=Br(e);if("code"!==Ck(t))return e;var n=t.find("xmp");if(0===n.length)return e;var r=n.text();return n.remove(),t.text(r),t[0]}}],parseElemsHtml:[{selector:"pre:not([data-w-e-type])>code",parseElemHtml:function(e,t,n){return{type:"code",language:"",children:[{text:Br(e)[0].textContent||""}]}}},gL]},yL=function(){function e(){this.title=_C("fullScreen.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M133.705143 335.433143V133.851429h201.581714a29.622857 29.622857 0 0 0 29.622857-29.549715V68.754286a29.622857 29.622857 0 0 0-29.622857-29.622857H61.732571A22.893714 22.893714 0 0 0 38.765714 62.025143V335.725714c0 16.310857 13.238857 29.622857 29.622857 29.622857h35.547429a29.842286 29.842286 0 0 0 29.696-29.842285zM690.980571 133.851429h201.581715v201.654857c0 16.310857 13.238857 29.549714 29.622857 29.549714h35.547428a29.622857 29.622857 0 0 0 29.549715-29.549714V61.952a22.893714 22.893714 0 0 0-22.820572-22.893714h-273.554285a29.622857 29.622857 0 0 0-29.549715 29.622857v35.547428c0 16.310857 13.238857 29.696 29.622857 29.696zM335.286857 892.781714H133.705143V691.2a29.622857 29.622857 0 0 0-29.622857-29.622857H68.534857a29.622857 29.622857 0 0 0-29.549714 29.622857v273.554286c0 12.653714 10.24 22.893714 22.820571 22.893714h273.554286a29.622857 29.622857 0 0 0 29.696-29.622857v-35.547429a29.769143 29.769143 0 0 0-29.769143-29.696z m557.348572-201.581714v201.581714H690.907429a29.622857 29.622857 0 0 0-29.622858 29.622857v35.547429c0 16.310857 13.238857 29.622857 29.622858 29.622857h273.554285c12.580571 0 22.893714-10.313143 22.893715-22.893714V691.2a29.622857 29.622857 0 0 0-29.622858-29.622857h-35.547428a29.622857 29.622857 0 0 0-29.696 29.622857z"></path></svg>',this.tag="button",this.alwaysEnable=!0}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return e.isFullScreen},e.prototype.isDisabled=function(e){return!1},e.prototype.exec=function(e,t){e.isFullScreen?e.unFullScreen():e.fullScreen()},e}(),mL={menus:[{key:"fullScreen",factory:function(){return new yL}}]},bL=function(){function e(){this.title=_C("common.enter"),this.iconSvg='<svg viewBox="0 0 1255 1024"><path d="M1095.111111 731.477333h-625.777778V1024L0 658.318222 469.333333 292.408889v292.636444h625.777778V0h156.444445v731.477333z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!!Pt.isExpanded(t)},e.prototype.exec=function(e,t){var n=e.selection;if(null!=n){var r=[n.anchor.path[0]];on.insertNodes(e,{type:"paragraph",children:[{text:""}]},{at:r}),e.select(vt.start(e,r))}},e}(),wL=[AB,xF,$I,qI,JI,eL,CT,aL,MT,WF,vL,LT,pF,jk,OT,rL,mL,{menus:[{key:"enter",factory:function(){return new bL}}]}];TC("en",{listModule:{unOrderedList:"Unordered list",orderedList:"Ordered list"}}),TC("zh-CN",{listModule:{unOrderedList:"无序列表",orderedList:"有序列表"}});var EL="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function DL(e){var t={exports:{}};return e(t,t.exports),t.exports}var CL,xL,SL=function(e){return e&&e.Math==Math&&e},AL=SL("object"==typeof globalThis&&globalThis)||SL("object"==typeof window&&window)||SL("object"==typeof self&&self)||SL("object"==typeof EL&&EL)||function(){return this}()||Function("return this")(),OL=Function.prototype,kL=OL.bind,BL=OL.call,FL=kL&&kL.bind(BL),TL=kL?function(e){return e&&FL(BL,e)}:function(e){return e&&function(){return BL.apply(e,arguments)}},_L=function(e){try{return!!e()}catch(t){return!0}},PL=TL({}.toString),jL=TL("".slice),NL=function(e){return jL(PL(e),8,-1)},IL=AL.Object,LL=TL("".split),RL=_L((function(){return!IL("z").propertyIsEnumerable(0)}))?function(e){return"String"==NL(e)?LL(e,""):IL(e)}:IL,ML=AL.TypeError,zL=function(e){if(null==e)throw ML("Can't call method on "+e);return e},$L=function(e){return RL(zL(e))},HL=Object.defineProperty,VL=function(e,t){try{HL(AL,e,{value:t,configurable:!0,writable:!0})}catch(n){AL[e]=t}return t},UL=AL["__core-js_shared__"]||VL("__core-js_shared__",{}),WL=DL((function(e){(e.exports=function(e,t){return UL[e]||(UL[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),qL=AL.Object,GL=function(e){return qL(zL(e))},KL=TL({}.hasOwnProperty),YL=Object.hasOwn||function(e,t){return KL(GL(e),t)},XL=0,ZL=Math.random(),JL=TL(1..toString),QL=function(e){return"Symbol("+(void 0===e?"":e)+")_"+JL(++XL+ZL,36)},eR=function(e){return"function"==typeof e},tR=function(e){return eR(e)?e:void 0},nR=function(e,t){return arguments.length<2?tR(AL[e]):AL[e]&&AL[e][t]},rR=nR("navigator","userAgent")||"",oR=AL.process,iR=AL.Deno,aR=oR&&oR.versions||iR&&iR.version,uR=aR&&aR.v8;uR&&(xL=(CL=uR.split("."))[0]>0&&CL[0]<4?1:+(CL[0]+CL[1])),!xL&&rR&&(!(CL=rR.match(/Edge\/(\d+)/))||CL[1]>=74)&&(CL=rR.match(/Chrome\/(\d+)/))&&(xL=+CL[1]);var sR,lR=xL,cR=!!Object.getOwnPropertySymbols&&!_L((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&lR&&lR<41})),fR=cR&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,dR=WL("wks"),pR=AL.Symbol,hR=pR&&pR.for,gR=fR?pR:pR&&pR.withoutSetter||QL,vR=function(e){if(!YL(dR,e)||!cR&&"string"!=typeof dR[e]){var t="Symbol."+e;cR&&YL(pR,e)?dR[e]=pR[e]:dR[e]=fR&&hR?hR(t):gR(t)}return dR[e]},yR=function(e){return"object"==typeof e?null!==e:eR(e)},mR=AL.String,bR=AL.TypeError,wR=function(e){if(yR(e))return e;throw bR(mR(e)+" is not an object")},ER=!_L((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),DR=AL.document,CR=yR(DR)&&yR(DR.createElement),xR=function(e){return CR?DR.createElement(e):{}},SR=!ER&&!_L((function(){return 7!=Object.defineProperty(xR("div"),"a",{get:function(){return 7}}).a})),AR=Function.prototype.call,OR=AR.bind?AR.bind(AR):function(){return AR.apply(AR,arguments)},kR=TL({}.isPrototypeOf),BR=AL.Object,FR=fR?function(e){return"symbol"==typeof e}:function(e){var t=nR("Symbol");return eR(t)&&kR(t.prototype,BR(e))},TR=AL.String,_R=function(e){try{return TR(e)}catch(t){return"Object"}},PR=AL.TypeError,jR=function(e){if(eR(e))return e;throw PR(_R(e)+" is not a function")},NR=function(e,t){var n=e[t];return null==n?void 0:jR(n)},IR=AL.TypeError,LR=AL.TypeError,RR=vR("toPrimitive"),MR=function(e){var t=function(e,t){if(!yR(e)||FR(e))return e;var n,r=NR(e,RR);if(r){if(void 0===t&&(t="default"),n=OR(r,e,t),!yR(n)||FR(n))return n;throw LR("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&eR(n=e.toString)&&!yR(r=OR(n,e)))return r;if(eR(n=e.valueOf)&&!yR(r=OR(n,e)))return r;if("string"!==t&&eR(n=e.toString)&&!yR(r=OR(n,e)))return r;throw IR("Can't convert object to primitive value")}(e,t)}(e,"string");return FR(t)?t:t+""},zR=AL.TypeError,$R=Object.defineProperty,HR={f:ER?$R:function(e,t,n){if(wR(e),t=MR(t),wR(n),SR)try{return $R(e,t,n)}catch(r){}if("get"in n||"set"in n)throw zR("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},VR=Math.ceil,UR=Math.floor,WR=function(e){var t=+e;return t!=t||0===t?0:(t>0?UR:VR)(t)},qR=Math.max,GR=Math.min,KR=function(e,t){var n=WR(e);return n<0?qR(n+t,0):GR(n,t)},YR=Math.min,XR=function(e){return e>0?YR(WR(e),9007199254740991):0},ZR=function(e){return XR(e.length)},JR=function(e){return function(t,n,r){var o,i=$L(t),a=ZR(i),u=KR(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},QR={includes:JR(!0),indexOf:JR(!1)},eM={},tM=QR.indexOf,nM=TL([].push),rM=function(e,t){var n,r=$L(e),o=0,i=[];for(n in r)!YL(eM,n)&&YL(r,n)&&nM(i,n);for(;t.length>o;)YL(r,n=t[o++])&&(~tM(i,n)||nM(i,n));return i},oM=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],iM=Object.keys||function(e){return rM(e,oM)},aM=ER?Object.defineProperties:function(e,t){wR(e);for(var n,r=$L(t),o=iM(t),i=o.length,a=0;i>a;)HR.f(e,n=o[a++],r[n]);return e},uM=nR("document","documentElement"),sM=WL("keys"),lM=function(e){return sM[e]||(sM[e]=QL(e))},cM=lM("IE_PROTO"),fM=function(){},dM=function(e){return"<script>"+e+"<\/script>"},pM=function(e){e.write(dM("")),e.close();var t=e.parentWindow.Object;return e=null,t},hM=function(){try{sR=new ActiveXObject("htmlfile")}catch(r){}var e,t;hM="undefined"!=typeof document?document.domain&&sR?pM(sR):((t=xR("iframe")).style.display="none",uM.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(dM("document.F=Object")),e.close(),e.F):pM(sR);for(var n=oM.length;n--;)delete hM.prototype[oM[n]];return hM()};eM[cM]=!0;var gM=Object.create||function(e,t){var n;return null!==e?(fM.prototype=wR(e),n=new fM,fM.prototype=null,n[cM]=e):n=hM(),void 0===t?n:aM(n,t)},vM=vR("unscopables"),yM=Array.prototype;null==yM[vM]&&HR.f(yM,vM,{configurable:!0,value:gM(null)});var mM=function(e){yM[vM][e]=!0},bM={},wM=TL(Function.toString);eR(UL.inspectSource)||(UL.inspectSource=function(e){return wM(e)});var EM,DM,CM,xM=UL.inspectSource,SM=AL.WeakMap,AM=eR(SM)&&/native code/.test(xM(SM)),OM=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},kM=ER?function(e,t,n){return HR.f(e,t,OM(1,n))}:function(e,t,n){return e[t]=n,e},BM=AL.TypeError,FM=AL.WeakMap;if(AM||UL.state){var TM=UL.state||(UL.state=new FM),_M=TL(TM.get),PM=TL(TM.has),jM=TL(TM.set);EM=function(e,t){if(PM(TM,e))throw new BM("Object already initialized");return t.facade=e,jM(TM,e,t),t},DM=function(e){return _M(TM,e)||{}},CM=function(e){return PM(TM,e)}}else{var NM=lM("state");eM[NM]=!0,EM=function(e,t){if(YL(e,NM))throw new BM("Object already initialized");return t.facade=e,kM(e,NM,t),t},DM=function(e){return YL(e,NM)?e[NM]:{}},CM=function(e){return YL(e,NM)}}var IM,LM,RM,MM={set:EM,get:DM,has:CM,enforce:function(e){return CM(e)?DM(e):EM(e,{})},getterFor:function(e){return function(t){var n;if(!yR(t)||(n=DM(t)).type!==e)throw BM("Incompatible receiver, "+e+" required");return n}}},zM={}.propertyIsEnumerable,$M=Object.getOwnPropertyDescriptor,HM={f:$M&&!zM.call({1:2},1)?function(e){var t=$M(this,e);return!!t&&t.enumerable}:zM},VM=Object.getOwnPropertyDescriptor,UM={f:ER?VM:function(e,t){if(e=$L(e),t=MR(t),SR)try{return VM(e,t)}catch(n){}if(YL(e,t))return OM(!OR(HM.f,e,t),e[t])}},WM=Function.prototype,qM=ER&&Object.getOwnPropertyDescriptor,GM=YL(WM,"name"),KM={EXISTS:GM,PROPER:GM&&"something"===function(){}.name,CONFIGURABLE:GM&&(!ER||ER&&qM(WM,"name").configurable)},YM=DL((function(e){var t=KM.CONFIGURABLE,n=MM.get,r=MM.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;eR(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!YL(i,"name")||t&&i.name!==f)&&kM(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==AL?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:kM(e,n,i)):l?e[n]=i:VL(n,i)})(Function.prototype,"toString",(function(){return eR(this)&&n(this).source||xM(this)}))})),XM=oM.concat("length","prototype"),ZM={f:Object.getOwnPropertyNames||function(e){return rM(e,XM)}},JM={f:Object.getOwnPropertySymbols},QM=TL([].concat),ez=nR("Reflect","ownKeys")||function(e){var t=ZM.f(wR(e)),n=JM.f;return n?QM(t,n(e)):t},tz=function(e,t){for(var n=ez(t),r=HR.f,o=UM.f,i=0;i<n.length;i++){var a=n[i];YL(e,a)||r(e,a,o(t,a))}},nz=/#|\.prototype\./,rz=function(e,t){var n=iz[oz(e)];return n==uz||n!=az&&(eR(t)?_L(t):!!t)},oz=rz.normalize=function(e){return String(e).replace(nz,".").toLowerCase()},iz=rz.data={},az=rz.NATIVE="N",uz=rz.POLYFILL="P",sz=rz,lz=UM.f,cz=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?AL:l?AL[u]||VL(u,{}):(AL[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=lz(n,r))&&a.value:n[r],!sz(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;tz(i,o)}(e.sham||o&&o.sham)&&kM(i,"sham",!0),YM(n,r,i,e)}},fz=!_L((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),dz=lM("IE_PROTO"),pz=AL.Object,hz=pz.prototype,gz=fz?pz.getPrototypeOf:function(e){var t=GL(e);if(YL(t,dz))return t[dz];var n=t.constructor;return eR(n)&&t instanceof n?n.prototype:t instanceof pz?hz:null},vz=vR("iterator"),yz=!1;[].keys&&("next"in(RM=[].keys())?(LM=gz(gz(RM)))!==Object.prototype&&(IM=LM):yz=!0);var mz=null==IM||_L((function(){var e={};return IM[vz].call(e)!==e}));mz&&(IM={}),eR(IM[vz])||YM(IM,vz,(function(){return this}));var bz={IteratorPrototype:IM,BUGGY_SAFARI_ITERATORS:yz},wz=HR.f,Ez=vR("toStringTag"),Dz=function(e,t,n){e&&!YL(e=n?e:e.prototype,Ez)&&wz(e,Ez,{configurable:!0,value:t})},Cz=bz.IteratorPrototype,xz=function(){return this},Sz=AL.String,Az=AL.TypeError,Oz=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=TL(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return wR(n),function(e){if("object"==typeof e||eR(e))return e;throw Az("Can't set "+Sz(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),kz=KM.PROPER,Bz=KM.CONFIGURABLE,Fz=bz.IteratorPrototype,Tz=bz.BUGGY_SAFARI_ITERATORS,_z=vR("iterator"),Pz=function(){return this},jz=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=gM(Cz,{next:OM(1,s)}),Dz(u,l,!1),bM[l]=xz;var c,f,d,p=function(e){if(e===o&&m)return m;if(!Tz&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[_z]||v["@@iterator"]||o&&v[o],m=!Tz&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=gz(b.call(new e)))!==Object.prototype&&c.next&&(gz(c)!==Fz&&(Oz?Oz(c,Fz):eR(c[_z])||YM(c,_z,Pz)),Dz(c,h,!0)),kz&&"values"==o&&y&&"values"!==y.name&&(Bz?kM(v,"name","values"):(g=!0,m=function(){return OR(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(Tz||g||!(d in v))&&YM(v,d,f[d]);else cz({target:t,proto:!0,forced:Tz||g},f);return v[_z]!==m&&YM(v,_z,m,{name:o}),bM[t]=m,f},Nz=MM.set,Iz=MM.getterFor("Array Iterator"),Lz=jz(Array,"Array",(function(e,t){Nz(this,{type:"Array Iterator",target:$L(e),index:0,kind:t})}),(function(){var e=Iz(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");bM.Arguments=bM.Array,mM("keys"),mM("values"),mM("entries");var Rz={};Rz[vR("toStringTag")]="z";var Mz="[object z]"===String(Rz),zz=vR("toStringTag"),$z=AL.Object,Hz="Arguments"==NL(function(){return arguments}()),Vz=Mz?NL:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=$z(e),zz))?n:Hz?NL(t):"Object"==(r=NL(t))&&eR(t.callee)?"Arguments":r},Uz=Mz?{}.toString:function(){return"[object "+Vz(this)+"]"};Mz||YM(Object.prototype,"toString",Uz,{unsafe:!0});var Wz=AL.String,qz=function(e){if("Symbol"===Vz(e))throw TypeError("Cannot convert a Symbol value to a string");return Wz(e)},Gz=TL("".charAt),Kz=TL("".charCodeAt),Yz=TL("".slice),Xz=function(e){return function(t,n){var r,o,i=qz(zL(t)),a=WR(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=Kz(i,a))<55296||r>56319||a+1===u||(o=Kz(i,a+1))<56320||o>57343?e?Gz(i,a):r:e?Yz(i,a,a+2):o-56320+(r-55296<<10)+65536}},Zz={codeAt:Xz(!1),charAt:Xz(!0)},Jz=Zz.charAt,Qz=MM.set,e$=MM.getterFor("String Iterator");jz(String,"String",(function(e){Qz(this,{type:"String Iterator",string:qz(e),index:0})}),(function(){var e,t=e$(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=Jz(n,r),t.index+=e.length,{value:e,done:!1})}));var t$=function(e,t,n){for(var r in t)YM(e,r,t[r],n);return e},n$=AL.Array,r$=Math.max,o$=ZM.f,i$="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a$={f:function(e){return i$&&"Window"==NL(e)?function(e){try{return o$(e)}catch(t){return function(e,t,n){for(var r,o,i,a,u=ZR(e),s=KR(void 0,u),l=KR(u,u),c=n$(r$(l-s,0)),f=0;s<l;s++,f++)r=c,o=f,i=e[s],(a=MR(o))in r?HR.f(r,a,OM(0,i)):r[a]=i;return c.length=f,c}(i$)}}(e):o$($L(e))}},u$=_L((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),s$=Object.isExtensible,l$=_L((function(){s$(1)}))||u$?function(e){return!!yR(e)&&(!u$||"ArrayBuffer"!=NL(e))&&(!s$||s$(e))}:s$,c$=!_L((function(){return Object.isExtensible(Object.preventExtensions({}))})),f$=DL((function(e){var t=HR.f,n=!1,r=QL("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=ZM.f,t=TL([].splice),o={};o[r]=1,e(o).length&&(ZM.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},cz({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:a$.f}))},fastKey:function(e,t){if(!yR(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!YL(e,r)){if(!l$(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!YL(e,r)){if(!l$(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return c$&&n&&l$(e)&&!YL(e,r)&&i(e),e}};eM[r]=!0})),d$=TL(TL.bind),p$=function(e,t){return jR(e),void 0===t?e:d$?d$(e,t):function(){return e.apply(t,arguments)}},h$=vR("iterator"),g$=Array.prototype,v$=vR("iterator"),y$=function(e){if(null!=e)return NR(e,v$)||NR(e,"@@iterator")||bM[Vz(e)]},m$=AL.TypeError,b$=function(e,t,n){var r,o;wR(e);try{if(!(r=NR(e,"return"))){if("throw"===t)throw n;return n}r=OR(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return wR(r),n},w$=AL.TypeError,E$=function(e,t){this.stopped=e,this.result=t},D$=E$.prototype,C$=function(e,t,n){var r,o,i,a,u,s,l,c,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),g=p$(t,f),v=function(e){return r&&b$(r,"normal",e),new E$(!0,e)},y=function(e){return d?(wR(e),h?g(e[0],e[1],v):g(e[0],e[1])):h?g(e,v):g(e)};if(p)r=e;else{if(!(o=y$(e)))throw w$(_R(e)+" is not iterable");if(void 0!==(c=o)&&(bM.Array===c||g$[h$]===c)){for(i=0,a=ZR(e);a>i;i++)if((u=y(e[i]))&&kR(D$,u))return u;return new E$(!1)}r=function(e,t){var n=arguments.length<2?y$(e):t;if(jR(n))return wR(OR(n,e));throw m$(_R(e)+" is not iterable")}(e,o)}for(s=r.next;!(l=OR(s,r)).done;){try{u=y(l.value)}catch(m){b$(r,"throw",m)}if("object"==typeof u&&u&&kR(D$,u))return u}return new E$(!1)},x$=AL.TypeError,S$=function(e,t){if(kR(t,e))return e;throw x$("Incorrect invocation")},A$=vR("iterator"),O$=!1;try{var k$=0,B$={next:function(){return{done:!!k$++}},return:function(){O$=!0}};B$[A$]=function(){return this},Array.from(B$,(function(){throw 2}))}catch(tg){}var F$=Array.isArray||function(e){return"Array"==NL(e)},T$=function(){},_$=[],P$=nR("Reflect","construct"),j$=/^\s*(?:class|function)\b/,N$=TL(j$.exec),I$=!j$.exec(T$),L$=function(e){if(!eR(e))return!1;try{return P$(T$,_$,e),!0}catch(t){return!1}},R$=!P$||_L((function(){var e;return L$(L$.call)||!L$(Object)||!L$((function(){e=!0}))||e}))?function(e){if(!eR(e))return!1;switch(Vz(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return I$||!!N$(j$,xM(e))}:L$,M$=vR("species"),z$=AL.Array,$$=function(e,t){return new(F$(n=e)&&(r=n.constructor,(R$(r)&&(r===z$||F$(r.prototype))||yR(r)&&null===(r=r[M$]))&&(r=void 0)),void 0===r?z$:r)(0===t?0:t);var n,r},H$=TL([].push),V$=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=GL(s),g=RL(h),v=p$(l,c),y=ZR(g),m=0,b=f||$$,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:H$(w,d)}else switch(e){case 4:return!1;case 7:H$(w,d)}return i?-1:r||o?o:w}},U$={forEach:V$(0),map:V$(1),filter:V$(2),some:V$(3),every:V$(4),find:V$(5),findIndex:V$(6),filterReject:V$(7)},W$=f$.getWeakData,q$=MM.set,G$=MM.getterFor,K$=U$.find,Y$=U$.findIndex,X$=TL([].splice),Z$=0,J$=function(e){return e.frozen||(e.frozen=new Q$)},Q$=function(){this.entries=[]},eH=function(e,t){return K$(e.entries,(function(e){return e[0]===t}))};Q$.prototype={get:function(e){var t=eH(this,e);if(t)return t[1]},has:function(e){return!!eH(this,e)},set:function(e,t){var n=eH(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=Y$(this.entries,(function(t){return t[0]===e}));return~t&&X$(this.entries,t,1),!!~t}};var tH,nH={getConstructor:function(e,t,n,r){var o=e((function(e,o){S$(e,i),q$(e,{type:t,id:Z$++,frozen:void 0}),null!=o&&C$(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=G$(t),u=function(e,t,n){var r=a(e),o=W$(wR(t),!0);return!0===o?J$(r).set(t,n):o[r.id]=n,e};return t$(i,{delete:function(e){var t=a(this);if(!yR(e))return!1;var n=W$(e);return!0===n?J$(t).delete(e):n&&YL(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!yR(e))return!1;var n=W$(e);return!0===n?J$(t).has(e):n&&YL(n,t.id)}}),t$(i,n?{get:function(e){var t=a(this);if(yR(e)){var n=W$(e);return!0===n?J$(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},rH=MM.enforce,oH=!AL.ActiveXObject&&"ActiveXObject"in AL,iH=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},aH=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=AL[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=TL(u[e]);YM(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!yR(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!yR(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!yR(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(sz(e,!eR(a)||!(o||u.forEach&&!_L((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),f$.enable();else if(sz(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=_L((function(){f.has(1)})),h=function(e,t){if(!O$)return!1;var n=!1;try{var r={};r[A$]=function(){return{next:function(){return{done:n=!0}}}},function(e){new a(e)}(r)}catch(o){}return n}(),g=!o&&_L((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){S$(e,u);var n,o,l,c,f,d=(n=new a,o=e,l=s,Oz&&eR(c=o.constructor)&&c!==l&&yR(f=c.prototype)&&f!==l.prototype&&Oz(n,f),n);return null!=t&&C$(t,d[i],{that:d,AS_ENTRIES:r}),d}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,cz({global:!0,forced:s!=a},l),Dz(s,e),o||n.setStrong(s,e,r),s}("WeakMap",iH,nH);if(AM&&oH){tH=nH.getConstructor(iH,"WeakMap",!0),f$.enable();var uH=aH.prototype,sH=TL(uH.delete),lH=TL(uH.has),cH=TL(uH.get),fH=TL(uH.set);t$(uH,{delete:function(e){if(yR(e)&&!l$(e)){var t=rH(this);return t.frozen||(t.frozen=new tH),sH(this,e)||t.frozen.delete(e)}return sH(this,e)},has:function(e){if(yR(e)&&!l$(e)){var t=rH(this);return t.frozen||(t.frozen=new tH),lH(this,e)||t.frozen.has(e)}return lH(this,e)},get:function(e){if(yR(e)&&!l$(e)){var t=rH(this);return t.frozen||(t.frozen=new tH),lH(this,e)?cH(this,e):t.frozen.get(e)}return cH(this,e)},set:function(e,t){if(yR(e)&&!l$(e)){var n=rH(this);n.frozen||(n.frozen=new tH),lH(this,e)?fH(this,e,t):n.frozen.set(e,t)}else fH(this,e,t);return this}})}var dH={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},pH=xR("span").classList,hH=pH&&pH.constructor&&pH.constructor.prototype,gH=hH===Object.prototype?void 0:hH,vH=vR("iterator"),yH=vR("toStringTag"),mH=Lz.values,bH=function(e,t){if(e){if(e[vH]!==mH)try{kM(e,vH,mH)}catch(r){e[vH]=mH}if(e[yH]||kM(e,yH,t),dH[t])for(var n in Lz)if(e[n]!==Lz[n])try{kM(e,n,Lz[n])}catch(r){e[n]=Lz[n]}}};for(var wH in dH)bH(AL[wH]&&AL[wH].prototype,wH);bH(gH,"DOMTokenList");var EH=new WeakMap,DH={type:"list-item",renderElem:function(e,t,n){EH.set(e,n);var r=e,o=r.level,i=void 0===o?0:o,a=r.ordered,u={margin:"5px 0 5px "+20*i+"px"},s="";void 0!==a&&a?s=function(e,t){var n=t,r=n.type,o=n.level,i=void 0===o?0:o,a=n.ordered,u=void 0!==a&&a;if(!u)return-1;var s=1,l=t,c=qy.findPath(e,l);if(0===c[0])return 1;for(;c[0]>0;){var f=St.previous(c),d=vt.node(e,f);if(null==d)break;var p=d[0],h=p.level,g=void 0===h?0:h,v=p.type,y=p.ordered;if(v!==r)break;if(g<i)break;if(g===i){if(y!==u)break;s++}l=p,c=f}return s}(n,e)+".":s=function(e){void 0===e&&(e=0);var t="";switch(e){case 0:t="•";break;case 1:t="◦";break;default:t="▪"}return t}(i);var l=function(e){var t,n=e.children||[],r=n.length;if(0===r)return"";for(var o=0;o<r&&!t;o++){var i=n[o];zt.isText(i)&&(t=i)}return null==t?"":t.color||""}(e);return xi("div",{style:u},xi("span",{contentEditable:!1,style:{marginRight:"0.5em",color:l},"data-w-e-reserve":!0},s),xi("span",null,t))}},CH=function(e,t){return(CH=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function xH(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}CH(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function SH(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function AH(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function OH(e){return vt.nodes(e,{at:e.selection||void 0,match:function(t){return 1===qy.findPath(e,t).length}})}var kH=QR.includes;cz({target:"Array",proto:!0},{includes:function(e){return kH(this,e,arguments.length>1?arguments[1]:void 0)}}),mM("includes");var BH,FH,TH=function(){var e=wR(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},_H=AL.RegExp,PH=_L((function(){var e=_H("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),jH=PH||_L((function(){return!_H("a","y").sticky})),NH={BROKEN_CARET:PH||_L((function(){var e=_H("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:jH,UNSUPPORTED_Y:PH},IH=AL.RegExp,LH=_L((function(){var e=IH(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),RH=AL.RegExp,MH=_L((function(){var e=RH("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),zH=MM.get,$H=WL("native-string-replace",String.prototype.replace),HH=RegExp.prototype.exec,VH=HH,UH=TL("".charAt),WH=TL("".indexOf),qH=TL("".replace),GH=TL("".slice),KH=(FH=/b*/g,OR(HH,BH=/a/,"a"),OR(HH,FH,"a"),0!==BH.lastIndex||0!==FH.lastIndex),YH=NH.BROKEN_CARET,XH=void 0!==/()??/.exec("")[1];(KH||XH||YH||LH||MH)&&(VH=function(e){var t,n,r,o,i,a,u,s=this,l=zH(s),c=qz(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=OR(VH,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=YH&&s.sticky,h=OR(TH,s),g=s.source,v=0,y=c;if(p&&(h=qH(h,"y",""),-1===WH(h,"g")&&(h+="g"),y=GH(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==UH(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),XH&&(n=new RegExp("^"+g+"$(?!\\s)",h)),KH&&(r=s.lastIndex),o=OR(HH,p?n:s,y),p?o?(o.input=GH(o.input,v),o[0]=GH(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:KH&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),XH&&o&&o.length>1&&OR($H,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=gM(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var ZH=VH;cz({target:"RegExp",proto:!0,forced:/./.exec!==ZH},{exec:ZH});var JH=function(){function e(){this.type="list-item",this.tag="button"}return e.prototype.getListNode=function(e){var t=this.type;return qy.getSelectedNodeByType(e,t)},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){var t=this.getListNode(e);if(null==t)return!1;var n=t.ordered;return(void 0!==n&&n)===this.ordered},e.prototype.isDisabled=function(e){return null==e.selection||!!qy.getSelectedElems(e).some((function(t){if(vt.isVoid(e,t)&&vt.isBlock(e,t))return!0;var n=t.type;return!!["pre","code","table"].includes(n)||void 0}))},e.prototype.exec=function(e,t){this.isActive(e)?on.setNodes(e,{type:"paragraph",ordered:void 0,level:void 0}):on.setNodes(e,{type:"list-item",ordered:this.ordered,indent:void 0})},e}(),QH='<svg viewBox="0 0 1024 1024"><path d="M384 64h640v128H384V64z m0 384h640v128H384v-128z m0 384h640v128H384v-128zM0 128a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z"></path></svg>',eV='<svg viewBox="0 0 1024 1024"><path d="M384 832h640v128H384z m0-384h640v128H384z m0-384h640v128H384zM192 0v256H128V64H64V0zM128 526.016v50.016h128v64H64v-146.016l128-60V384H64v-64h192v146.016zM256 704v320H64v-64h128v-64H64v-64h128v-64H64v-64z"></path></svg>',tV=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ordered=!1,t.title=_C("listModule.unOrderedList"),t.iconSvg=QH,t}return xH(t,e),t}(JH),nV=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.ordered=!0,t.title=_C("listModule.orderedList"),t.iconSvg=eV,t}return xH(t,e),t}(JH),rV={key:"bulletedList",factory:function(){return new tV}},oV={key:"numberedList",factory:function(){return new nV}},iV=[],aV={type:"list-item",elemToHtml:function(e,t){var n="",r="",o=e.ordered,i=void 0!==o&&o?"ol":"ul",a=function(e){var t=EH.get(e);if(null==t)return 0;var n=e,r=n.type,o=n.ordered,i=void 0!==o&&o,a=n.level,u=void 0===a?0:a,s=qy.findPath(t,e);if(0===s[0])return u+1;var l=St.previous(s),c=vt.node(t,l);if(!c)return 0;var f=AH(c,1)[0];if(qy.getNodeType(f)!==r)return u+1;var d=f,p=d.ordered,h=void 0!==p&&p,g=d.level,v=void 0===g?0:g;return v<u?u-v:v>u?0:v===u?h===i?0:1:0}(e);if(a>0)for(var u=0;u<a;u++)n+="<"+i+">",iV.push(i);var s=function(e){var t=EH.get(e);if(null==t)return 0;var n=e,r=n.type,o=n.ordered,i=void 0!==o&&o,a=n.level,u=void 0===a?0:a,s=qy.findPath(t,e);if(s[0]===t.children.length-1)return u+1;var l=St.next(s),c=vt.node(t,l);if(!c)return 0;var f=AH(c,1)[0];if(qy.getNodeType(f)!==r)return u+1;var d=f,p=d.ordered,h=void 0!==p&&p,g=d.level,v=void 0===g?0:g;return v<u?u-v:v>u?0:v===u?h===i?0:1:0}(e);if(s>0)for(u=0;u<s;u++)r+="</"+iV.pop()+">";return{html:"<li>"+t+"</li>",prefix:n,suffix:r}}},uV=vR("species"),sV=U$.filter,lV=("filter",lR>=51||!_L((function(){var e=[];return(e.constructor={})[uV]=function(){return{foo:1}},1!==e.filter(Boolean).foo})));cz({target:"Array",proto:!0,forced:!lV},{filter:function(e){return sV(this,e,arguments.length>1?arguments[1]:void 0)}});var cV=Function.prototype,fV=cV.apply,dV=cV.bind,pV=cV.call,hV="object"==typeof Reflect&&Reflect.apply||(dV?pV.bind(fV):function(){return pV.apply(fV,arguments)}),gV=(vR("species"),RegExp.prototype),vV=Zz.charAt,yV=function(e,t,n){return t+(n?vV(e,t).length:1)},mV=Math.floor,bV=TL("".charAt),wV=TL("".replace),EV=TL("".slice),DV=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,CV=/\$([$&'`]|\d{1,2})/g,xV=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=CV;return void 0!==o&&(o=GL(o),s=DV),wV(i,s,(function(i,s){var l;switch(bV(s,0)){case"$":return"$";case"&":return e;case"`":return EV(t,0,n);case"'":return EV(t,a);case"<":l=o[EV(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=mV(c/10);return 0===f?i:f<=u?void 0===r[f-1]?bV(s,1):r[f-1]+bV(s,1):i}l=r[c-1]}return void 0===l?"":l}))},SV=AL.TypeError,AV=function(e,t){var n=e.exec;if(eR(n)){var r=OR(n,e,t);return null!==r&&wR(r),r}if("RegExp"===NL(e))return OR(ZH,e,t);throw SV("RegExp#exec called on incompatible receiver")},OV=vR("replace"),kV=Math.max,BV=Math.min,FV=TL([].concat),TV=TL([].push),_V=TL("".indexOf),PV=TL("".slice),jV="$0"==="a".replace(/./,"$0"),NV=!!/./[OV]&&""===/./[OV]("a","$0");!function(e,t,n,r){var o=vR(e),i=!_L((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!_L((function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=TL(/./[o]),s=function(e,t,n){var r=NV?"$":"$0";return[function(e,n){var r=zL(this),o=null==e?void 0:NR(e,OV);return o?OR(o,e,r,n):OR(t,qz(r),e,n)},function(e,o){var i=wR(this),a=qz(e);if("string"==typeof o&&-1===_V(o,r)&&-1===_V(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=eR(o);s||(o=qz(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=AV(i,a);if(null===d)break;if(TV(f,d),!l)break;""===qz(d[0])&&(i.lastIndex=yV(a,XR(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=qz((d=f[v])[0]),m=kV(BV(WR(d.index),a.length),0),b=[],w=1;w<d.length;w++)TV(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=FV([y],b,m,a);void 0!==E&&TV(D,E);var C=qz(hV(o,void 0,D))}else C=xV(y,a,m,b,E,o);m>=g&&(h+=PV(a,g,m)+C,g=m+y.length)}return h+PV(a,g)}]}(0,""[e],(function(e,t,n,r,o){var a=TL(e),s=t.exec;return s===ZH||s===gV.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));YM(String.prototype,e,s[0]),YM(gV,o,s[1])}}("replace",0,!!_L((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!jV||NV);var IV=AL.TypeError,LV=function(e,t,n,r,o,i,a,u){for(var s,l,c=o,f=0,d=!!a&&p$(a,u);f<r;){if(f in n){if(s=d?d(n[f],f,t):n[f],i>0&&F$(s))l=ZR(s),c=LV(e,t,s,l,c,i-1)-1;else{if(c>=9007199254740991)throw IV("Exceed the acceptable array length");e[c]=s}c++}f++}return c},RV=LV;function MV(e){return e.length?e[0].tagName.toLowerCase():""}cz({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=GL(this),n=ZR(t),r=$$(t,0);return r.length=RV(r,t,t,n,0,void 0===e?1:WR(e)),r}}),mM("flat"),cz({global:!0},{globalThis:AL}),Xr&&(Br.fn.append=Xr),Pr&&(Br.fn.attr=Pr),Jr&&(Br.fn.parent=Jr);var zV={renderElems:[DH],editorPlugin:function(e){var t=e.deleteBackward,n=e.handleTab,r=e.normalizeNode,o=e;return o.deleteBackward=function(e){var n=o.selection;if(null!=n)if(Pt.isExpanded(n))t(e);else{var r=qy.getSelectedNodeByType(o,"list-item");if(null!=r)if(0!==n.focus.offset)t(e);else{var i=r.level,a=void 0===i?0:i;a>0?on.setNodes(o,{level:a-1}):on.setNodes(o,{type:"paragraph",ordered:void 0,level:void 0})}else t(e)}else t(e)},o.handleTab=function(){var e,t,r,i,a=o.selection;if(null!=a){if(Pt.isCollapsed(a)){var u=qy.getSelectedNodeByType(o,"list-item");if(null==u)return void n();if(0===a.focus.offset){var s=u.level,l=void 0===s?0:s;return void on.setNodes(o,{level:l+1})}}if(Pt.isExpanded(a)){var c=0,f=!1;try{for(var d=SH(OH(o)),p=d.next();!p.done;p=d.next()){var h=AH(p.value,1)[0];"list-item"===qy.getNodeType(h)?c++:f=!0}}catch(eg){e={error:eg}}finally{try{p&&!p.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}if(f||c<=1)return void n();try{for(var g=SH(OH(o)),v=g.next();!v.done;v=g.next()){var y=AH(v.value,2),m=(h=y[0],y[1]),b=h.level;l=void 0===b?0:b,on.setNodes(o,{level:l+1},{at:m})}}catch(w){r={error:w}}finally{try{v&&!v.done&&(i=g.return)&&i.call(g)}finally{if(r)throw r.error}}}else n()}else n()},o.normalizeNode=function(e){var t=AH(e,2),n=t[0],i=t[1],a=qy.getNodeType(n);return"bulleted-list"!==a&&"numbered-list"!==a||on.unwrapNodes(o,{at:i}),r([n,i])},o},menus:[rV,oV],elemsToHtml:[aV],parseElemsHtml:[{selector:"ul:not([data-w-e-type]),ol:not([data-w-e-type])",parseElemHtml:function(e,t,n){return t.flat(1/0)}},{selector:"li:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]);var o="ol"===MV(r.parent()),i=function(e){for(var t=0,n=e.parent(),r=MV(n);"ul"===r||"ol"===r;)r=MV(n=n.parent()),t++;return t-1}(r);return{type:"list-item",ordered:o,level:i,children:t}}}]},$V=un((function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,o="[object Arguments]",i="[object Array]",a="[object Boolean]",u="[object Date]",s="[object Error]",l="[object Function]",c="[object Map]",f="[object Number]",d="[object Object]",p="[object Promise]",h="[object RegExp]",g="[object Set]",v="[object String]",y="[object Symbol]",m="[object WeakMap]",b="[object ArrayBuffer]",w="[object DataView]",E=/^\[object .+?Constructor\]$/,D=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[o]=C[i]=C[b]=C[a]=C[w]=C[u]=C[s]=C[l]=C[c]=C[f]=C[d]=C[h]=C[g]=C[v]=C[m]=!1;var x="object"==typeof an&&an&&an.Object===Object&&an,S="object"==typeof self&&self&&self.Object===Object&&self,A=x||S||Function("return this")(),O=t&&!t.nodeType&&t,k=O&&e&&!e.nodeType&&e,B=k&&k.exports===O,F=B&&x.process,T=function(){try{return F&&F.binding&&F.binding("util")}catch(eg){}}(),_=T&&T.isTypedArray;function P(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function j(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function N(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var I=Array.prototype,L=Function.prototype,R=Object.prototype,M=A["__core-js_shared__"],z=L.toString,$=R.hasOwnProperty,H=function(){var e=/[^.]+$/.exec(M&&M.keys&&M.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),V=R.toString,U=RegExp("^"+z.call($).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),W=B?A.Buffer:void 0,q=A.Symbol,G=A.Uint8Array,K=R.propertyIsEnumerable,Y=I.splice,X=q?q.toStringTag:void 0,Z=Object.getOwnPropertySymbols,J=W?W.isBuffer:void 0,Q=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object),ee=ke(A,"DataView"),te=ke(A,"Map"),ne=ke(A,"Promise"),re=ke(A,"Set"),oe=ke(A,"WeakMap"),ie=ke(Object,"create"),ae=_e(ee),ue=_e(te),se=_e(ne),le=_e(re),ce=_e(oe),fe=q?q.prototype:void 0,de=fe?fe.valueOf:void 0;function pe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function he(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ve(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new ge;++t<n;)this.add(e[t])}function ye(e){var t=this.__data__=new he(e);this.size=t.size}function me(e,t){var n=Ne(e),r=!n&&je(e),o=!n&&!r&&Ie(e),i=!n&&!r&&!o&&$e(e),a=n||r||o||i,u=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=u.length;for(var l in e)!t&&!$.call(e,l)||a&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Te(l,s))||u.push(l);return u}function be(e,t){for(var n=e.length;n--;)if(Pe(e[n][0],t))return n;return-1}function we(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":X&&X in Object(e)?function(e){var t=$.call(e,X),n=e[X];try{e[X]=void 0;var r=!0}catch(eg){}var o=V.call(e);r&&(t?e[X]=n:delete e[X]);return o}(e):function(e){return V.call(e)}(e)}function Ee(e){return ze(e)&&we(e)==o}function De(e,t,n,r,l){return e===t||(null==e||null==t||!ze(e)&&!ze(t)?e!=e&&t!=t:function(e,t,n,r,l,p){var m=Ne(e),E=Ne(t),D=m?i:Fe(e),C=E?i:Fe(t),x=(D=D==o?d:D)==d,S=(C=C==o?d:C)==d,A=D==C;if(A&&Ie(e)){if(!Ie(t))return!1;m=!0,x=!1}if(A&&!x)return p||(p=new ye),m||$e(e)?Se(e,t,n,r,l,p):function(e,t,n,r,o,i,l){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case b:return!(e.byteLength!=t.byteLength||!i(new G(e),new G(t)));case a:case u:case f:return Pe(+e,+t);case s:return e.name==t.name&&e.message==t.message;case h:case v:return e==t+"";case c:var d=j;case g:var p=1&r;if(d||(d=N),e.size!=t.size&&!p)return!1;var m=l.get(e);if(m)return m==t;r|=2,l.set(e,t);var E=Se(d(e),d(t),r,o,i,l);return l.delete(e),E;case y:if(de)return de.call(e)==de.call(t)}return!1}(e,t,D,n,r,l,p);if(!(1&n)){var O=x&&$.call(e,"__wrapped__"),k=S&&$.call(t,"__wrapped__");if(O||k){var B=O?e.value():e,F=k?t.value():t;return p||(p=new ye),l(B,F,n,r,p)}}if(!A)return!1;return p||(p=new ye),function(e,t,n,r,o,i){var a=1&n,u=Ae(e),s=u.length,l=Ae(t).length;if(s!=l&&!a)return!1;var c=s;for(;c--;){var f=u[c];if(!(a?f in t:$.call(t,f)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var p=!0;i.set(e,t),i.set(t,e);var h=a;for(;++c<s;){var g=e[f=u[c]],v=t[f];if(r)var y=a?r(v,g,f,t,e,i):r(g,v,f,e,t,i);if(!(void 0===y?g===v||o(g,v,n,r,i):y)){p=!1;break}h||(h="constructor"==f)}if(p&&!h){var m=e.constructor,b=t.constructor;m==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,n,r,l,p)}(e,t,n,r,De,l))}function Ce(e){return!(!Me(e)||function(e){return!!H&&H in e}(e))&&(Le(e)?U:E).test(_e(e))}function xe(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||R,t!==r)return Q(e);var t,n,r,o=[];for(var i in Object(e))$.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Se(e,t,n,r,o,i){var a=1&n,u=e.length,s=t.length;if(u!=s&&!(a&&s>u))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var c=-1,f=!0,d=2&n?new ve:void 0;for(i.set(e,t),i.set(t,e);++c<u;){var p=e[c],h=t[c];if(r)var g=a?r(h,p,c,t,e,i):r(p,h,c,e,t,i);if(void 0!==g){if(g)continue;f=!1;break}if(d){if(!P(t,(function(e,t){if(a=t,!d.has(a)&&(p===e||o(p,e,n,r,i)))return d.push(t);var a}))){f=!1;break}}else if(p!==h&&!o(p,h,n,r,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function Ae(e){return function(e,t,n){var r=t(e);return Ne(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,He,Be)}function Oe(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function ke(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Ce(n)?n:void 0}pe.prototype.clear=function(){this.__data__=ie?ie(null):{},this.size=0},pe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},pe.prototype.get=function(e){var t=this.__data__;if(ie){var r=t[e];return r===n?void 0:r}return $.call(t,e)?t[e]:void 0},pe.prototype.has=function(e){var t=this.__data__;return ie?void 0!==t[e]:$.call(t,e)},pe.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=ie&&void 0===t?n:t,this},he.prototype.clear=function(){this.__data__=[],this.size=0},he.prototype.delete=function(e){var t=this.__data__,n=be(t,e);return!(n<0)&&(n==t.length-1?t.pop():Y.call(t,n,1),--this.size,!0)},he.prototype.get=function(e){var t=this.__data__,n=be(t,e);return n<0?void 0:t[n][1]},he.prototype.has=function(e){return be(this.__data__,e)>-1},he.prototype.set=function(e,t){var n=this.__data__,r=be(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},ge.prototype.clear=function(){this.size=0,this.__data__={hash:new pe,map:new(te||he),string:new pe}},ge.prototype.delete=function(e){var t=Oe(this,e).delete(e);return this.size-=t?1:0,t},ge.prototype.get=function(e){return Oe(this,e).get(e)},ge.prototype.has=function(e){return Oe(this,e).has(e)},ge.prototype.set=function(e,t){var n=Oe(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ve.prototype.add=ve.prototype.push=function(e){return this.__data__.set(e,n),this},ve.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.clear=function(){this.__data__=new he,this.size=0},ye.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},ye.prototype.get=function(e){return this.__data__.get(e)},ye.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.set=function(e,t){var n=this.__data__;if(n instanceof he){var r=n.__data__;if(!te||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new ge(r)}return n.set(e,t),this.size=n.size,this};var Be=Z?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}(Z(e),(function(t){return K.call(e,t)})))}:function(){return[]},Fe=we;function Te(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||D.test(e))&&e>-1&&e%1==0&&e<t}function _e(e){if(null!=e){try{return z.call(e)}catch(eg){}try{return e+""}catch(eg){}}return""}function Pe(e,t){return e===t||e!=e&&t!=t}(ee&&Fe(new ee(new ArrayBuffer(1)))!=w||te&&Fe(new te)!=c||ne&&Fe(ne.resolve())!=p||re&&Fe(new re)!=g||oe&&Fe(new oe)!=m)&&(Fe=function(e){var t=we(e),n=t==d?e.constructor:void 0,r=n?_e(n):"";if(r)switch(r){case ae:return w;case ue:return c;case se:return p;case le:return g;case ce:return m}return t});var je=Ee(function(){return arguments}())?Ee:function(e){return ze(e)&&$.call(e,"callee")&&!K.call(e,"callee")},Ne=Array.isArray;var Ie=J||function(){return!1};function Le(e){if(!Me(e))return!1;var t=we(e);return t==l||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Re(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}function Me(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ze(e){return null!=e&&"object"==typeof e}var $e=_?function(e){return function(t){return e(t)}}(_):function(e){return ze(e)&&Re(e.length)&&!!C[we(e)]};function He(e){return null!=(t=e)&&Re(t.length)&&!Le(t)?me(e):xe(e);var t}e.exports=function(e,t){return De(e,t)}}));TC("en",{tableModule:{deleteCol:"Delete column",deleteRow:"Delete row",deleteTable:"Delete table",widthAuto:"Width auto",insertCol:"Insert column",insertRow:"Insert row",insertTable:"Insert table",header:"Header"}}),TC("zh-CN",{tableModule:{deleteCol:"删除列",deleteRow:"删除行",deleteTable:"删除表格",widthAuto:"宽度自适应",insertCol:"插入列",insertRow:"插入行",insertTable:"插入表格",header:"表头"}});var HV="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function VV(e){var t={exports:{}};return e(t,t.exports),t.exports}var UV,WV,qV=function(e){return e&&e.Math==Math&&e},GV=qV("object"==typeof globalThis&&globalThis)||qV("object"==typeof window&&window)||qV("object"==typeof self&&self)||qV("object"==typeof HV&&HV)||function(){return this}()||Function("return this")(),KV=function(e){try{return!!e()}catch(t){return!0}},YV=!KV((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),XV=Function.prototype.call,ZV=XV.bind?XV.bind(XV):function(){return XV.apply(XV,arguments)},JV={}.propertyIsEnumerable,QV=Object.getOwnPropertyDescriptor,eU={f:QV&&!JV.call({1:2},1)?function(e){var t=QV(this,e);return!!t&&t.enumerable}:JV},tU=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},nU=Function.prototype,rU=nU.bind,oU=nU.call,iU=rU&&rU.bind(oU),aU=rU?function(e){return e&&iU(oU,e)}:function(e){return e&&function(){return oU.apply(e,arguments)}},uU=aU({}.toString),sU=aU("".slice),lU=function(e){return sU(uU(e),8,-1)},cU=GV.Object,fU=aU("".split),dU=KV((function(){return!cU("z").propertyIsEnumerable(0)}))?function(e){return"String"==lU(e)?fU(e,""):cU(e)}:cU,pU=GV.TypeError,hU=function(e){if(null==e)throw pU("Can't call method on "+e);return e},gU=function(e){return dU(hU(e))},vU=function(e){return"function"==typeof e},yU=function(e){return"object"==typeof e?null!==e:vU(e)},mU=function(e){return vU(e)?e:void 0},bU=function(e,t){return arguments.length<2?mU(GV[e]):GV[e]&&GV[e][t]},wU=aU({}.isPrototypeOf),EU=bU("navigator","userAgent")||"",DU=GV.process,CU=GV.Deno,xU=DU&&DU.versions||CU&&CU.version,SU=xU&&xU.v8;SU&&(WV=(UV=SU.split("."))[0]>0&&UV[0]<4?1:+(UV[0]+UV[1])),!WV&&EU&&(!(UV=EU.match(/Edge\/(\d+)/))||UV[1]>=74)&&(UV=EU.match(/Chrome\/(\d+)/))&&(WV=+UV[1]);var AU=WV,OU=!!Object.getOwnPropertySymbols&&!KV((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&AU&&AU<41})),kU=OU&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,BU=GV.Object,FU=kU?function(e){return"symbol"==typeof e}:function(e){var t=bU("Symbol");return vU(t)&&wU(t.prototype,BU(e))},TU=GV.String,_U=function(e){try{return TU(e)}catch(t){return"Object"}},PU=GV.TypeError,jU=function(e){if(vU(e))return e;throw PU(_U(e)+" is not a function")},NU=function(e,t){var n=e[t];return null==n?void 0:jU(n)},IU=GV.TypeError,LU=Object.defineProperty,RU=function(e,t){try{LU(GV,e,{value:t,configurable:!0,writable:!0})}catch(rY){GV[e]=t}return t},MU=GV["__core-js_shared__"]||RU("__core-js_shared__",{}),zU=VV((function(e){(e.exports=function(e,t){return MU[e]||(MU[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),$U=GV.Object,HU=function(e){return $U(hU(e))},VU=aU({}.hasOwnProperty),UU=Object.hasOwn||function(e,t){return VU(HU(e),t)},WU=0,qU=Math.random(),GU=aU(1..toString),KU=function(e){return"Symbol("+(void 0===e?"":e)+")_"+GU(++WU+qU,36)},YU=zU("wks"),XU=GV.Symbol,ZU=XU&&XU.for,JU=kU?XU:XU&&XU.withoutSetter||KU,QU=function(e){if(!UU(YU,e)||!OU&&"string"!=typeof YU[e]){var t="Symbol."+e;OU&&UU(XU,e)?YU[e]=XU[e]:YU[e]=kU&&ZU?ZU(t):JU(t)}return YU[e]},eW=GV.TypeError,tW=QU("toPrimitive"),nW=function(e){var t=function(e,t){if(!yU(e)||FU(e))return e;var n,r=NU(e,tW);if(r){if(void 0===t&&(t="default"),n=ZV(r,e,t),!yU(n)||FU(n))return n;throw eW("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&vU(n=e.toString)&&!yU(r=ZV(n,e)))return r;if(vU(n=e.valueOf)&&!yU(r=ZV(n,e)))return r;if("string"!==t&&vU(n=e.toString)&&!yU(r=ZV(n,e)))return r;throw IU("Can't convert object to primitive value")}(e,t)}(e,"string");return FU(t)?t:t+""},rW=GV.document,oW=yU(rW)&&yU(rW.createElement),iW=function(e){return oW?rW.createElement(e):{}},aW=!YV&&!KV((function(){return 7!=Object.defineProperty(iW("div"),"a",{get:function(){return 7}}).a})),uW=Object.getOwnPropertyDescriptor,sW={f:YV?uW:function(e,t){if(e=gU(e),t=nW(t),aW)try{return uW(e,t)}catch(n){}if(UU(e,t))return tU(!ZV(eU.f,e,t),e[t])}},lW=GV.String,cW=GV.TypeError,fW=function(e){if(yU(e))return e;throw cW(lW(e)+" is not an object")},dW=GV.TypeError,pW=Object.defineProperty,hW={f:YV?pW:function(e,t,n){if(fW(e),t=nW(t),fW(n),aW)try{return pW(e,t,n)}catch(r){}if("get"in n||"set"in n)throw dW("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},gW=YV?function(e,t,n){return hW.f(e,t,tU(1,n))}:function(e,t,n){return e[t]=n,e},vW=aU(Function.toString);vU(MU.inspectSource)||(MU.inspectSource=function(e){return vW(e)});var yW,mW,bW,wW=MU.inspectSource,EW=GV.WeakMap,DW=vU(EW)&&/native code/.test(wW(EW)),CW=zU("keys"),xW=function(e){return CW[e]||(CW[e]=KU(e))},SW={},AW=GV.TypeError,OW=GV.WeakMap;if(DW||MU.state){var kW=MU.state||(MU.state=new OW),BW=aU(kW.get),FW=aU(kW.has),TW=aU(kW.set);yW=function(e,t){if(FW(kW,e))throw new AW("Object already initialized");return t.facade=e,TW(kW,e,t),t},mW=function(e){return BW(kW,e)||{}},bW=function(e){return FW(kW,e)}}else{var _W=xW("state");SW[_W]=!0,yW=function(e,t){if(UU(e,_W))throw new AW("Object already initialized");return t.facade=e,gW(e,_W,t),t},mW=function(e){return UU(e,_W)?e[_W]:{}},bW=function(e){return UU(e,_W)}}var PW={set:yW,get:mW,has:bW,enforce:function(e){return bW(e)?mW(e):yW(e,{})},getterFor:function(e){return function(t){var n;if(!yU(t)||(n=mW(t)).type!==e)throw AW("Incompatible receiver, "+e+" required");return n}}},jW=Function.prototype,NW=YV&&Object.getOwnPropertyDescriptor,IW=UU(jW,"name"),LW={EXISTS:IW,PROPER:IW&&"something"===function(){}.name,CONFIGURABLE:IW&&(!YV||YV&&NW(jW,"name").configurable)},RW=VV((function(e){var t=LW.CONFIGURABLE,n=PW.get,r=PW.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;vU(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!UU(i,"name")||t&&i.name!==f)&&gW(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==GV?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:gW(e,n,i)):l?e[n]=i:RU(n,i)})(Function.prototype,"toString",(function(){return vU(this)&&n(this).source||wW(this)}))})),MW=Math.ceil,zW=Math.floor,$W=function(e){var t=+e;return t!=t||0===t?0:(t>0?zW:MW)(t)},HW=Math.max,VW=Math.min,UW=function(e,t){var n=$W(e);return n<0?HW(n+t,0):VW(n,t)},WW=Math.min,qW=function(e){return e>0?WW($W(e),9007199254740991):0},GW=function(e){return qW(e.length)},KW=function(e){return function(t,n,r){var o,i=gU(t),a=GW(i),u=UW(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},YW=(KW(!0),KW(!1)),XW=aU([].push),ZW=function(e,t){var n,r=gU(e),o=0,i=[];for(n in r)!UU(SW,n)&&UU(r,n)&&XW(i,n);for(;t.length>o;)UU(r,n=t[o++])&&(~YW(i,n)||XW(i,n));return i},JW=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],QW=JW.concat("length","prototype"),eq={f:Object.getOwnPropertyNames||function(e){return ZW(e,QW)}},tq={f:Object.getOwnPropertySymbols},nq=aU([].concat),rq=bU("Reflect","ownKeys")||function(e){var t=eq.f(fW(e)),n=tq.f;return n?nq(t,n(e)):t},oq=function(e,t){for(var n=rq(t),r=hW.f,o=sW.f,i=0;i<n.length;i++){var a=n[i];UU(e,a)||r(e,a,o(t,a))}},iq=/#|\.prototype\./,aq=function(e,t){var n=sq[uq(e)];return n==cq||n!=lq&&(vU(t)?KV(t):!!t)},uq=aq.normalize=function(e){return String(e).replace(iq,".").toLowerCase()},sq=aq.data={},lq=aq.NATIVE="N",cq=aq.POLYFILL="P",fq=aq,dq=sW.f,pq=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?GV:l?GV[u]||RU(u,{}):(GV[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=dq(n,r))&&a.value:n[r],!fq(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;oq(i,o)}(e.sham||o&&o.sham)&&gW(i,"sham",!0),RW(n,r,i,e)}},hq={};hq[QU("toStringTag")]="z";var gq="[object z]"===String(hq),vq=QU("toStringTag"),yq=GV.Object,mq="Arguments"==lU(function(){return arguments}()),bq=gq?lU:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=yq(e),vq))?n:mq?lU(t):"Object"==(r=lU(t))&&vU(t.callee)?"Arguments":r},wq=GV.String,Eq=function(e){if("Symbol"===bq(e))throw TypeError("Cannot convert a Symbol value to a string");return wq(e)},Dq=/"/g,Cq=aU("".replace);pq({target:"String",proto:!0,forced:("anchor",KV((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3})))},{anchor:function(e){return"a","name",t=e,n=Eq(hU(this)),r="<a",(r+=' name="'+Cq(Eq(t),Dq,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var xq,Sq=function(){var e=fW(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},Aq=GV.RegExp,Oq=KV((function(){var e=Aq("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),kq=Oq||KV((function(){return!Aq("a","y").sticky})),Bq={BROKEN_CARET:Oq||KV((function(){var e=Aq("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:kq,UNSUPPORTED_Y:Oq},Fq=Object.keys||function(e){return ZW(e,JW)},Tq=YV?Object.defineProperties:function(e,t){fW(e);for(var n,r=gU(t),o=Fq(t),i=o.length,a=0;i>a;)hW.f(e,n=o[a++],r[n]);return e},_q=bU("document","documentElement"),Pq=xW("IE_PROTO"),jq=function(){},Nq=function(e){return"<script>"+e+"<\/script>"},Iq=function(e){e.write(Nq("")),e.close();var t=e.parentWindow.Object;return e=null,t},Lq=function(){try{xq=new ActiveXObject("htmlfile")}catch(r){}var e,t;Lq="undefined"!=typeof document?document.domain&&xq?Iq(xq):((t=iW("iframe")).style.display="none",_q.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Nq("document.F=Object")),e.close(),e.F):Iq(xq);for(var n=JW.length;n--;)delete Lq.prototype[JW[n]];return Lq()};SW[Pq]=!0;var Rq,Mq,zq=Object.create||function(e,t){var n;return null!==e?(jq.prototype=fW(e),n=new jq,jq.prototype=null,n[Pq]=e):n=Lq(),void 0===t?n:Tq(n,t)},$q=GV.RegExp,Hq=KV((function(){var e=$q(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),Vq=GV.RegExp,Uq=KV((function(){var e=Vq("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),Wq=PW.get,qq=zU("native-string-replace",String.prototype.replace),Gq=RegExp.prototype.exec,Kq=Gq,Yq=aU("".charAt),Xq=aU("".indexOf),Zq=aU("".replace),Jq=aU("".slice),Qq=(Mq=/b*/g,ZV(Gq,Rq=/a/,"a"),ZV(Gq,Mq,"a"),0!==Rq.lastIndex||0!==Mq.lastIndex),eG=Bq.BROKEN_CARET,tG=void 0!==/()??/.exec("")[1];(Qq||tG||eG||Hq||Uq)&&(Kq=function(e){var t,n,r,o,i,a,u,s=this,l=Wq(s),c=Eq(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=ZV(Kq,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=eG&&s.sticky,h=ZV(Sq,s),g=s.source,v=0,y=c;if(p&&(h=Zq(h,"y",""),-1===Xq(h,"g")&&(h+="g"),y=Jq(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==Yq(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),tG&&(n=new RegExp("^"+g+"$(?!\\s)",h)),Qq&&(r=s.lastIndex),o=ZV(Gq,p?n:s,y),p?o?(o.input=Jq(o.input,v),o[0]=Jq(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:Qq&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),tG&&o&&o.length>1&&ZV(qq,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=zq(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var nG=Kq;pq({target:"RegExp",proto:!0,forced:/./.exec!==nG},{exec:nG});var rG=Array.isArray||function(e){return"Array"==lU(e)},oG=function(){},iG=[],aG=bU("Reflect","construct"),uG=/^\s*(?:class|function)\b/,sG=aU(uG.exec),lG=!uG.exec(oG),cG=function(e){if(!vU(e))return!1;try{return aG(oG,iG,e),!0}catch(t){return!1}},fG=!aG||KV((function(){var e;return cG(cG.call)||!cG(Object)||!cG((function(){e=!0}))||e}))?function(e){if(!vU(e))return!1;switch(bq(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return lG||!!sG(uG,wW(e))}:cG,dG=function(e,t,n){var r=nW(t);r in e?hW.f(e,r,tU(0,n)):e[r]=n},pG=QU("species"),hG=function(e){return AU>=51||!KV((function(){var t=[];return(t.constructor={})[pG]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},gG=aU([].slice),vG=hG("slice"),yG=QU("species"),mG=GV.Array,bG=Math.max;function wG(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function EG(e){var t=e.selection;if(null==t)return!1;var n=wG(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"table-cell")}}),1)[0];if(n){var r=wG(n,2)[1],o=vt.start(e,r);if(Bt.equals(t.anchor,o))return!0}return!1}function DG(e,t){var n,r,o=vt.nodes(e,{at:t,match:function(e){return"table"===qy.getNodeType(e)}}),i=!1;try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(o),u=a.next();!u.done;u=a.next())u.value,i=!0}catch(s){n={error:s}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}return i}pq({target:"Array",proto:!0,forced:!vG},{slice:function(e,t){var n,r,o,i=gU(this),a=GW(i),u=UW(e,a),s=UW(void 0===t?a:t,a);if(rG(i)&&(n=i.constructor,(fG(n)&&(n===mG||rG(n.prototype))||yU(n)&&null===(n=n[yG]))&&(n=void 0),n===mG||void 0===n))return gG(i,u,s);for(r=new(void 0===n?mG:n)(bG(s-u,0)),o=0;u<s;u++,o++)u in i&&dG(r,o,i[u]);return r.length=o,r}});var CG=aU(aU.bind),xG=QU("species"),SG=GV.Array,AG=function(e,t){return new(rG(n=e)&&(r=n.constructor,(fG(r)&&(r===SG||rG(r.prototype))||yU(r)&&null===(r=r[xG]))&&(r=void 0)),void 0===r?SG:r)(0===t?0:t);var n,r},OG=aU([].push),kG=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=HU(s),g=dU(h),v=function(e,t){return jU(e),void 0===t?e:CG?CG(e,t):function(){return e.apply(t,arguments)}}(l,c),y=GW(g),m=0,b=f||AG,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:OG(w,d)}else switch(e){case 4:return!1;case 7:OG(w,d)}return i?-1:r||o?o:w}},BG={forEach:kG(0),map:kG(1),filter:kG(2),some:kG(3),every:kG(4),find:kG(5),findIndex:kG(6),filterReject:kG(7)},FG=BG.map;pq({target:"Array",proto:!0,forced:!hG("map")},{map:function(e){return FG(this,e,arguments.length>1?arguments[1]:void 0)}});var TG=gq?{}.toString:function(){return"[object "+bq(this)+"]"};function _G(e){var t=e.children||[];return 0===t.length?[]:(t[0]||{}).children||[]}function PG(e){return _G(e).every((function(e){return!!e.isHeader}))}gq||RW(Object.prototype,"toString",TG,{unsafe:!0});var jG=LW.PROPER,NG=RegExp.prototype,IG=NG.toString,LG=aU(Sq),RG=KV((function(){return"/a/b"!=IG.call({source:"a",flags:"b"})})),MG=jG&&"toString"!=IG.name;(RG||MG)&&RW(RegExp.prototype,"toString",(function(){var e=fW(this),t=Eq(e.source),n=e.flags;return"/"+t+"/"+Eq(void 0===n&&wU(NG,e)&&!("flags"in NG)?LG(e):n)}),{unsafe:!0});var zG=QU("unscopables"),$G=Array.prototype;null==$G[zG]&&hW.f($G,zG,{configurable:!0,value:zq(null)});var HG=BG.find,VG=!0;"find"in[]&&Array(1).find((function(){VG=!1})),pq({target:"Array",proto:!0,forced:VG},{find:function(e){return HG(this,e,arguments.length>1?arguments[1]:void 0)}}),$G[zG].find=!0;var UG=Function.prototype,WG=UG.apply,qG=UG.bind,GG=UG.call,KG="object"==typeof Reflect&&Reflect.apply||(qG?GG.bind(WG):function(){return GG.apply(WG,arguments)}),YG=QU("species"),XG=RegExp.prototype,ZG=function(e,t,n,r){var o=QU(e),i=!KV((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!KV((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[YG]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=aU(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=aU(e),s=t.exec;return s===nG||s===XG.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));RW(String.prototype,e,s[0]),RW(XG,o,s[1])}r&&gW(XG[o],"sham",!0)},JG=QU("match"),QG=GV.TypeError,eK=QU("species"),tK=aU("".charAt),nK=aU("".charCodeAt),rK=aU("".slice),oK=function(e){return function(t,n){var r,o,i=Eq(hU(t)),a=$W(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=nK(i,a))<55296||r>56319||a+1===u||(o=nK(i,a+1))<56320||o>57343?e?tK(i,a):r:e?rK(i,a,a+2):o-56320+(r-55296<<10)+65536}},iK=(oK(!1),oK(!0)),aK=function(e,t,n){return t+(n?iK(e,t).length:1)},uK=GV.Array,sK=Math.max,lK=function(e,t,n){for(var r=GW(e),o=UW(t,r),i=UW(void 0===n?r:n,r),a=uK(sK(i-o,0)),u=0;o<i;o++,u++)dG(a,u,e[o]);return a.length=u,a},cK=GV.TypeError,fK=function(e,t){var n=e.exec;if(vU(n)){var r=ZV(n,e,t);return null!==r&&fW(r),r}if("RegExp"===lU(e))return ZV(nG,e,t);throw cK("RegExp#exec called on incompatible receiver")},dK=Bq.UNSUPPORTED_Y,pK=Math.min,hK=[].push,gK=aU(/./.exec),vK=aU(hK),yK=aU("".slice);ZG("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=Eq(hU(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!yU(r=e)||!(void 0!==(o=r[JG])?o:"RegExp"==lU(r)))return ZV(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=ZV(nG,p,i))&&!((s=p.lastIndex)>d&&(vK(c,yK(i,d,u.index)),u.length>1&&u.index<i.length&&KG(hK,c,lK(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&gK(p,"")||vK(c,""):vK(c,yK(i,d)),c.length>a?lK(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:ZV(t,this,e,n)}:t,[function(t,n){var o=hU(this),i=null==t?void 0:NU(t,e);return i?ZV(i,t,o,n):ZV(r,Eq(o),t,n)},function(e,o){var i=fW(this),a=Eq(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=fW(e).constructor;return void 0===r||null==(n=fW(r)[eK])?t:function(e){if(fG(e))return e;throw QG(_U(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(dK?"g":"y"),f=new s(dK?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===fK(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=dK?0:h;var v,y=fK(f,dK?yK(a,h):a);if(null===y||(v=pK(qW(f.lastIndex+(dK?h:0)),a.length))===p)h=aK(a,h,l);else{if(vK(g,yK(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(vK(g,y[m]),g.length===d)return g;h=p=v}}return vK(g,yK(a,p)),g}]}),!!KV((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),dK);var mK="\t\n\v\f\r                　\u2028\u2029\ufeff",bK=aU("".replace),wK="["+mK+"]",EK=RegExp("^"+wK+wK+"*"),DK=RegExp(wK+wK+"*$"),CK=function(e){return function(t){var n=Eq(hU(t));return 1&e&&(n=bK(n,EK,"")),2&e&&(n=bK(n,DK,"")),n}},xK={start:CK(1),end:CK(2),trim:CK(3)},SK=LW.PROPER,AK=xK.trim;function OK(e){return e.length?e[0].tagName.toLowerCase():""}pq({target:"String",proto:!0,forced:function(e){return KV((function(){return!!mK[e]()||"​᠎"!=="​᠎"[e]()||SK&&mK[e].name!==e}))}("trim")},{trim:function(){return AK(this)}}),pq({global:!0},{globalThis:GV}),Xr&&(Br.fn.append=Xr),Lr&&(Br.fn.on=Lr),uo&&(Br.fn.focus=uo),Pr&&(Br.fn.attr=Pr),Ir&&(Br.fn.val=Ir),Gr&&(Br.fn.html=Gr),Nr&&(Br.fn.dataset=Nr),Fr&&(Br.fn.addClass=Fr),Tr&&(Br.fn.removeClass=Tr),to&&(Br.fn.children=to),Wr&&(Br.fn.each=Wr),eo&&(Br.fn.find=eo);var kK=!1,BK=0,FK=0,TK=null,_K=null,PK=Br("body");function jK(e){kK=!1,_K=null,TK=null,PK.off("mousemove",NK),PK.off("mouseup",jK)}PK.on("mousedown",(function(e){var t=e.target;if(("TH"===t.tagName||"TD"===t.tagName)&&"col-resize"===t.style.cursor){t.style.cursor="auto",e.preventDefault(),kK=!0;var n=e.clientX;BK=n;var r=t.getBoundingClientRect().width;FK=r,PK.on("mousemove",NK),PK.on("mouseup",jK)}}));var NK=Wo((function(e){if(kK&&null!=_K&&null!=TK){e.preventDefault();var t=e.clientX,n=FK+(t-BK);(n=Math.floor(100*n)/100)<30&&(n=30),on.setNodes(_K,{width:n.toString()},{at:TK})}}),100),IK={type:"table",renderElem:function(e,t,n){var r=function(e,t){if(e.isDisabled())return!1;var n=e.selection;if(null==n)return!0;if(Pt.isCollapsed(n))return!0;var r=n.anchor,o=n.focus,i=qy.findPath(e,t),a=vt.start(e,i),u=vt.end(e,i),s=Bt.compare(r,u)<=0&&Bt.compare(r,a)>=0,l=Bt.compare(o,u)<=0&&Bt.compare(o,a)>=0;return!!(s&&l&&St.equals(r.path.slice(0,3),o.path.slice(0,3)))}(n,e),o=e.width,i=void 0===o?"auto":o,a=xi("div",{className:"table-container","data-selected":qy.isNodeSelected(n,e),on:{mousedown:function(t){if("DIV"===t.target.tagName&&t.preventDefault(),!n.isDisabled()){var r=qy.findPath(n,e),o=vt.start(n,r),i=n.selection;null!=i?i.anchor.path[0]!==r[0]&&n.select(o):n.select(o)}}}},xi("table",{width:i,contentEditable:r},xi("colgroup",null,_G(e).map((function(e){var t=e.width;return xi("col",{width:void 0===t?"auto":t})}))),xi("tbody",null,t)));return a}},LK={type:"table-row",renderElem:function(e,t,n){return xi("tr",null,t)}},RK={type:"table-cell",renderElem:function(e,t,n){var r=function(e,t){var n=qy.getParentNode(e,t);if(null==n)return!1;var r=qy.getParentNode(e,n);return null!=r&&_G(r).some((function(e){return e===t}))}(n,e),o=e,i=o.colSpan,a=void 0===i?1:i,u=o.rowSpan,s=void 0===u?1:u,l=o.isHeader;return r?xi(void 0!==l&&l?"th":"td",{colSpan:a,rowSpan:s,style:{borderRightWidth:"3px"},on:{mousemove:Wo((function(t){var r=this.elm;if(null!=r){var o=r.getBoundingClientRect(),i=o.left,a=o.width,u=o.top,s=o.height,l=t.clientX,c=t.clientY;kK||(l>i+a-5&&l<i+a&&c>u&&c<u+s?(r.style.cursor="col-resize",_K=n,TK=qy.findPath(n,e)):kK||(r.style.cursor="auto",_K=null,TK=null))}}),100)}},t):xi("td",{colSpan:a,rowSpan:s},t)}},MK={selector:"table",preParseHtml:function(e){var t=Br(e);if("table"!==OK(t))return e;var n=t.find("tbody");if(0===n.length)return e;var r=t.find("tr");return t.append(r),n.remove(),t[0]}},zK=BG.filter;pq({target:"Array",proto:!0,forced:!hG("filter")},{filter:function(e){return zK(this,e,arguments.length>1?arguments[1]:void 0)}});var $K=Math.floor,HK=aU("".charAt),VK=aU("".replace),UK=aU("".slice),WK=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,qK=/\$([$&'`]|\d{1,2})/g,GK=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=qK;return void 0!==o&&(o=HU(o),s=WK),VK(i,s,(function(i,s){var l;switch(HK(s,0)){case"$":return"$";case"&":return e;case"`":return UK(t,0,n);case"'":return UK(t,a);case"<":l=o[UK(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=$K(c/10);return 0===f?i:f<=u?void 0===r[f-1]?HK(s,1):r[f-1]+HK(s,1):i}l=r[c-1]}return void 0===l?"":l}))},KK=QU("replace"),YK=Math.max,XK=Math.min,ZK=aU([].concat),JK=aU([].push),QK=aU("".indexOf),eY=aU("".slice),tY="$0"==="a".replace(/./,"$0"),nY=!!/./[KK]&&""===/./[KK]("a","$0");ZG("replace",(function(e,t,n){var r=nY?"$":"$0";return[function(e,n){var r=hU(this),o=null==e?void 0:NU(e,KK);return o?ZV(o,e,r,n):ZV(t,Eq(r),e,n)},function(e,o){var i=fW(this),a=Eq(e);if("string"==typeof o&&-1===QK(o,r)&&-1===QK(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=vU(o);s||(o=Eq(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=fK(i,a);if(null===d)break;if(JK(f,d),!l)break;""===Eq(d[0])&&(i.lastIndex=aK(a,qW(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=Eq((d=f[v])[0]),m=YK(XK($W(d.index),a.length),0),b=[],w=1;w<d.length;w++)JK(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=ZK([y],b,m,a);void 0!==E&&JK(D,E);var C=Eq(KG(o,void 0,D))}else C=GK(y,a,m,b,E,o);m>=g&&(h+=eY(a,g,m)+C,g=m+y.length)}return h+eY(a,g)}]}),!!KV((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!tY||nY);var rY,oY={selector:"td:not([data-w-e-type]),th:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e);0===(t=t.filter((function(e){return!!zt.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]);var o=parseInt(r.attr("colSpan")||"1"),i=parseInt(r.attr("rowSpan")||"1"),a=r.attr("width")||"auto";return{type:"table-cell",isHeader:"th"===OK(r),colSpan:o,rowSpan:i,width:a,children:t}}},iY={selector:"tr:not([data-w-e-type])",parseElemHtml:function(e,t,n){return{type:"table-row",children:t.filter((function(e){return"table-cell"===qy.getNodeType(e)}))}}},aY={selector:"table:not([data-w-e-type])",parseElemHtml:function(e,t,n){var r=Br(e),o="auto";return"100%"===function(e,t){for(var n="",r=(e.attr("style")||"").split(";"),o=r.length,i=0;i<o;i++){var a=r[i];if(a){var u=a.split(":");"width"===u[0].trim()&&(n=u[1].trim())}}return n}(r)&&(o="100%"),"100%"===r.attr("width")&&(o="100%"),{type:"table",width:o,children:t.filter((function(e){return"table-row"===qy.getNodeType(e)}))}}},uY=function(){function e(){this.title=_C("tableModule.insertTable"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M0 64v896h1024V64H0z m384 576v-192h256v192h-256z m256 64v192h-256v-192h256z m0-512v192h-256V192h256zM320 192v192H64V192h256z m-256 256h256v192H64v-192z m640 0h256v192h-256v-192z m0-64V192h256v192h-256zM64 704h256v192H64v-192z m640 192v-192h256v192h-256z"></path></svg>',this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||!!qy.getSelectedElems(e).some((function(t){var n=qy.getNodeType(t);return"pre"===n||"table"===n||"list-item"===n||!!e.isVoid(t)}))},e.prototype.getPanelContentElem=function(e){var t=this;if(this.$content)return this.$content[0];for(var n=Br('<div class="w-e-panel-content-table"></div>'),r=Br("<span>0 &times; 0</span>"),o=Br("<table></table>"),i=0;i<10;i++){for(var a=Br("<tr></tr>"),u=0;u<10;u++){var s=Br("<td></td>");s.attr("data-x",u.toString()),s.attr("data-y",i.toString()),a.append(s),s.on("mouseenter",(function(e){var t=e.target;if(null!=t){var n=Br(t).dataset(),i=n.x,a=n.y;r[0].innerHTML=i+1+" &times; "+(a+1),o.children().each((function(e){Br(e).children().each((function(e){var t=Br(e),n=t.dataset(),r=n.x,o=n.y;r<=i&&o<=a?t.addClass("active"):t.removeClass("active")}))}))}})),s.on("click",(function(n){n.preventDefault();var r=n.target;if(null!=r){var o=Br(r).dataset(),i=o.x,a=o.y;t.insertTable(e,a+1,i+1)}}))}o.append(a)}return n.append(o),n.append(r),this.$content=n,n[0]},e.prototype.insertTable=function(e,t,n){var r=parseInt(t,10),o=parseInt(n,10);if(r&&o&&!(r<=0||o<=0)){qy.isSelectedEmptyParagraph(e)&&on.removeNodes(e,{mode:"highest"});var i=function(e,t){for(var n=[],r=0;r<e;r++){for(var o=[],i=0;i<t;i++){var a={type:"table-cell",children:[{text:""}]};0===r&&(a.isHeader=!0),o.push(a)}n.push({type:"table-row",children:o})}return{type:"table",width:"auto",children:n}}(r,o);on.insertNodes(e,i,{mode:"highest"})}},e}(),sY=function(){function e(){this.title=_C("tableModule.deleteTable"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==qy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){this.isDisabled(e)||on.removeNodes(e,{mode:"highest"})},e}(),lY=function(){function e(){this.title=_C("tableModule.insertRow"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M707.7888 521.0112h-147.456v-147.456H488.2432v147.456h-147.456v68.8128h147.456v147.456h72.0896v-147.456h147.456zM0 917.504V0h1048.576v917.504H0zM327.68 65.536H65.536v196.608H327.68V65.536z m327.68 0H393.216v196.608h262.144V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 258.8672H65.536v462.0288H983.04V324.4032z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=wG(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"table-cell")},universal:!0}),1),r=wG(n[0],2),o=r[0],i=r[1],a=qy.getParentNode(e,o),u=(null==a?void 0:a.children.length)||0;if(0!==u){for(var s={type:"table-row",children:[]},l=0;l<u;l++)s.children.push({type:"table-cell",children:[{text:""}]});var c=St.parent(i),f=St.next(c);on.insertNodes(e,s,{at:f})}}},e}(),cY=function(){function e(){this.title=_C("tableModule.deleteRow"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M907.6736 586.5472L747.1104 425.984l163.84-163.84-78.6432-78.6432-163.84 163.84L507.904 186.7776 429.2608 262.144l163.84 163.84-167.1168 167.1168 78.6432 78.6432 167.1168-167.1168 160.5632 160.5632 75.3664-78.6432zM0 917.504V0h1048.576v917.504H0z m983.04-327.68h-22.9376l-65.536-65.536H983.04V327.68h-91.7504l65.536-65.536h26.2144V65.536H65.536v196.608h317.8496l65.536 65.536H65.536v196.608h380.1088l-65.536 65.536H65.536v196.608H983.04v-196.608z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table-row")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=wG(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"table-row")},universal:!0}),1),r=wG(n[0],2),o=r[0],i=r[1],a=qy.getParentNode(e,o);((null==a?void 0:a.children.length)||0)<=1?on.removeNodes(e,{mode:"highest"}):on.removeNodes(e,{at:i})}},e}(),fY={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},dY=iW("span").classList,pY=dY&&dY.constructor&&dY.constructor.prototype,hY=pY===Object.prototype?void 0:pY,gY=BG.forEach,vY=!!(rY=[].forEach)&&KV((function(){rY.call(null,(function(){throw 1}),1)}))?[].forEach:function(e){return gY(this,e,arguments.length>1?arguments[1]:void 0)},yY=function(e){if(e&&e.forEach!==vY)try{gW(e,"forEach",vY)}catch(eg){e.forEach=vY}};for(var mY in fY)fY[mY]&&yY(GV[mY]&&GV[mY].prototype);yY(hY);var bY=function(){function e(){this.title=_C("tableModule.insertCol"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M327.68 193.3312v186.7776H140.9024v91.7504H327.68v186.7776h88.4736V471.8592h190.0544V380.1088H416.1536V193.3312zM0 917.504V0h1048.576v917.504H0zM655.36 65.536H65.536v720.896H655.36V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 262.144h-262.144v196.608h262.144V327.68z m0 262.144h-262.144v196.608h262.144v-196.608z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=wG(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"table-cell")},universal:!0}),1),r=wG(n[0],2),o=r[0],i=r[1],a=qy.getParentNode(e,o);if(null!=a){var u=qy.getParentNode(e,a);null!=u&&(u.children||[]).forEach((function(t,n){ct.isElement(t)&&(t.children||[]).forEach((function(t){var r=qy.findPath(e,t);if(r.length===i.length&&$V(r.slice(-1),i.slice(-1))){var o={type:"table-cell",children:[{text:""}]};0===n&&PG(u)&&(o.isHeader=!0),on.insertNodes(e,o,{at:r})}}))}))}}},e}(),wY=function(){function e(){this.title=_C("tableModule.deleteCol"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M327.68 510.976L393.216 445.44v-13.1072L327.68 366.7968V510.976z m327.68-78.4384l65.536-65.536V507.904L655.36 442.368v-9.8304z m393.216 484.9664V0H0v917.504h1048.576z m-65.536-131.072h-262.144v-52.4288l-13.1072 13.1072-52.4288-52.4288v91.7504H393.216v-91.7504l-52.4288 52.4288-13.1072-13.1072v52.4288H65.536V65.536H327.68v121.2416l36.0448-36.0448 29.4912 29.4912V62.2592h262.144V180.224l49.152-49.152 16.384 16.384V62.2592h262.144V786.432z m-294.912-108.1344l-160.5632-160.5632-167.1168 167.1168-78.6432-78.6432 167.1168-167.1168L288.3584 278.528l78.6432-78.6432 160.5632 160.5632 163.84-163.84 78.6432 78.6432-163.84 163.84 160.5632 160.5632-78.6432 78.6432z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table-cell")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=wG(vt.nodes(e,{match:function(e){return qy.checkNodeType(e,"table-cell")},universal:!0}),1),r=wG(n[0],2),o=r[0],i=r[1],a=qy.getParentNode(e,o),u=(null==a?void 0:a.children.length)||0;if(!a||u<=1)on.removeNodes(e,{mode:"highest"});else{var s=qy.getParentNode(e,a);null!=s&&(s.children||[]).forEach((function(t){ct.isElement(t)&&(t.children||[]).forEach((function(t){var n=qy.findPath(e,t);n.length===i.length&&$V(n.slice(-1),i.slice(-1))&&on.removeNodes(e,{at:n})}))}))}}},e}(),EY=function(){function e(){this.title=_C("tableModule.header"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M704 128l-64 0L384 128 320 128 0 128l0 256 0 64 0 192 0 64 0 256 320 0 64 0 256 0 64 0 320 0 0-256 0-64L1024 448 1024 384 1024 128 704 128zM640 640 384 640 384 448l256 0L640 640zM64 448l256 0 0 192L64 640 64 448zM320 896 64 896l0-192 256 0L320 896zM640 896 384 896l0-192 256 0L640 896zM960 896l-256 0 0-192 256 0L960 896zM960 640l-256 0L704 448l256 0L960 640z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){var t=qy.getSelectedNodeByType(e,"table");return null!=t&&PG(t)},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=!t,r=qy.getSelectedNodeByType(e,"table");null!=r&&_G(r).forEach((function(t){return on.setNodes(e,{isHeader:n},{at:qy.findPath(e,t)})}))}},e}(),DY=function(){function e(){this.title=_C("tableModule.widthAuto"),this.iconSvg='<svg viewBox="0 0 1228 1024"><path d="M862.514337 563.200461H404.581995v121.753478a13.311987 13.311987 0 0 1-6.655993 11.468789 10.23999 10.23999 0 0 1-12.083188-1.433599l-204.799795-179.199821a13.721586 13.721586 0 0 1 0-20.479979l204.799795-179.302221a10.23999 10.23999 0 0 1 12.185588-1.535998 13.209587 13.209587 0 0 1 6.553593 11.673588v115.097485h457.932342V319.693504a11.571188 11.571188 0 0 1 18.841582-10.239989l204.799795 179.19982a13.721586 13.721586 0 0 1 0 20.47998l-204.799795 179.199821a10.23999 10.23999 0 0 1-12.185588 1.535998 13.311987 13.311987 0 0 1-6.655994-11.571188V563.200461zM136.499064 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785H15.155185A15.155185 15.155185 0 0 1 0 1008.844815V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086294a15.155185 15.155185 0 0 1 15.257585 15.155185zM1228.798771 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785h-106.188693a15.155185 15.155185 0 0 1-15.155185-15.052785V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086293A15.155185 15.155185 0 0 1 1228.798771 15.053809z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){var t=qy.getSelectedNodeByType(e,"table");return null!=t&&"100%"===t.width},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||null==qy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n={width:t?"auto":"100%"};on.setNodes(e,n,{mode:"highest"})}},e}(),CY={renderElems:[IK,LK,RK],elemsToHtml:[{type:"table",elemToHtml:function(e,t){var n=e.width;return'<table style="width: '+(void 0===n?"auto":n)+';"><tbody>'+t+"</tbody></table>"}},{type:"table-row",elemToHtml:function(e,t){return"<tr>"+t+"</tr>"}},{type:"table-cell",elemToHtml:function(e,t){var n=e,r=n.colSpan,o=void 0===r?1:r,i=n.rowSpan,a=void 0===i?1:i,u=n.isHeader,s=void 0!==u&&u,l=n.width,c=s?"th":"td";return"<"+c+' colSpan="'+o+'" rowSpan="'+a+'" width="'+(void 0===l?"auto":l)+'">'+t+"</"+c+">"}}],preParseHtml:[MK],parseElemsHtml:[oY,iY,aY],menus:[{key:"insertTable",factory:function(){return new uY}},{key:"deleteTable",factory:function(){return new sY}},{key:"insertTableRow",factory:function(){return new lY}},{key:"deleteTableRow",factory:function(){return new cY}},{key:"insertTableCol",factory:function(){return new bY}},{key:"deleteTableCol",factory:function(){return new wY}},{key:"tableHeader",factory:function(){return new EY}},{key:"tableFullWidth",factory:function(){return new DY}}],editorPlugin:function(e){var t=e.insertBreak,n=e.deleteBackward,r=e.deleteForward,o=e.normalizeNode,i=e.insertData,a=e.handleTab,u=e.selectAll,s=e;return s.insertBreak=function(){null==qy.getSelectedNodeByType(s,"table")?t():s.insertText("\n")},s.deleteBackward=function(e){if(!EG(s)){var t=s.selection;if(t){var r=vt.before(s,t);if(r){var o=DG(s,r),i=DG(s,t);if(o&&!i)return}}n(e)}},s.handleTab=function(){var t;if(qy.getSelectedNodeByType(s,"table")){var n=vt.above(e);qy.checkNodeType(n[0],"table-cell")&&on.select(e,n[1]);var r=vt.next(e);if(r)r[0]&&r[0].text&&(r=null!==(t=vt.above(e,{at:r[1]}))&&void 0!==t?t:r),on.select(e,r[1]);else{var o=s.children||[],i=o.length;if(qy.checkNodeType(o[i-1],"table")){var u=qy.genEmptyParagraph();on.insertNodes(s,u,{at:[i]}),s.handleTab()}}}else a()},s.deleteForward=function(e){EG(s)||r(e)},s.normalizeNode=function(e){var t=wG(e,2),n=t[0],r=t[1];if("table"!==qy.getNodeType(n))return o([n,r]);if(qy.isLastNode(s,n)){var i=qy.genEmptyParagraph();on.insertNodes(s,i,{at:[r[0]+1]})}},s.insertData=function(e){if(null!=qy.getSelectedNodeByType(s,"table")){var t=e.getData("text/plain");"\n"===t||/<img[^>]+>/.test(e.getData("text/html"))?i(e):vt.insertText(s,t)}else i(e)},s.selectAll=function(){var e=s.selection;if(null!=e){var t=qy.getSelectedNodeByType(s,"table-cell");if(null!=t){var n=e.anchor,r=e.focus;if(St.equals(n.path.slice(0,3),r.path.slice(0,3)))if(0!==Et.string(t).length){var o=qy.findPath(s,t),i={anchor:vt.start(s,o),focus:vt.end(s,o)};s.select(i)}else u();else u()}else u()}else u()},s}};TC("en",{videoModule:{delete:"Delete",uploadVideo:"Upload video",insertVideo:"Insert video",videoSrc:"Video source",videoSrcPlaceHolder:"Video file url, or third-party <iframe>",videoPoster:"Video poster",videoPosterPlaceHolder:"Poster image url",ok:"Ok",editSize:"Edit size",width:"Width",height:"Height"}}),TC("zh-CN",{videoModule:{delete:"删除视频",uploadVideo:"上传视频",insertVideo:"插入视频",videoSrc:"视频地址",videoSrcPlaceHolder:"视频文件 url 或第三方 <iframe>",videoPoster:"视频封面",videoPosterPlaceHolder:"封面图片 url",ok:"确定",editSize:"修改尺寸",width:"宽度",height:"高度"}});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var xY=function(){return xY=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},xY.apply(this,arguments)};function SY(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function AY(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function OY(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function kY(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){var i,a,u,s;i=r,a=o,u=(t=e[n](t)).done,s=t.value,Promise.resolve(s).then((function(e){i({value:e,done:u})}),a)}))}}}var BY="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function FY(e){var t={exports:{}};return e(t,t.exports),t.exports}var TY,_Y,PY=function(e){return e&&e.Math==Math&&e},jY=PY("object"==typeof globalThis&&globalThis)||PY("object"==typeof window&&window)||PY("object"==typeof self&&self)||PY("object"==typeof BY&&BY)||function(){return this}()||Function("return this")(),NY=function(e){try{return!!e()}catch(t){return!0}},IY=!NY((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),LY=Function.prototype.call,RY=LY.bind?LY.bind(LY):function(){return LY.apply(LY,arguments)},MY={}.propertyIsEnumerable,zY=Object.getOwnPropertyDescriptor,$Y={f:zY&&!MY.call({1:2},1)?function(e){var t=zY(this,e);return!!t&&t.enumerable}:MY},HY=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},VY=Function.prototype,UY=VY.bind,WY=VY.call,qY=UY&&UY.bind(WY),GY=UY?function(e){return e&&qY(WY,e)}:function(e){return e&&function(){return WY.apply(e,arguments)}},KY=GY({}.toString),YY=GY("".slice),XY=function(e){return YY(KY(e),8,-1)},ZY=jY.Object,JY=GY("".split),QY=NY((function(){return!ZY("z").propertyIsEnumerable(0)}))?function(e){return"String"==XY(e)?JY(e,""):ZY(e)}:ZY,eX=jY.TypeError,tX=function(e){if(null==e)throw eX("Can't call method on "+e);return e},nX=function(e){return QY(tX(e))},rX=function(e){return"function"==typeof e},oX=function(e){return"object"==typeof e?null!==e:rX(e)},iX=function(e){return rX(e)?e:void 0},aX=function(e,t){return arguments.length<2?iX(jY[e]):jY[e]&&jY[e][t]},uX=GY({}.isPrototypeOf),sX=aX("navigator","userAgent")||"",lX=jY.process,cX=jY.Deno,fX=lX&&lX.versions||cX&&cX.version,dX=fX&&fX.v8;dX&&(_Y=(TY=dX.split("."))[0]>0&&TY[0]<4?1:+(TY[0]+TY[1])),!_Y&&sX&&(!(TY=sX.match(/Edge\/(\d+)/))||TY[1]>=74)&&(TY=sX.match(/Chrome\/(\d+)/))&&(_Y=+TY[1]);var pX=_Y,hX=!!Object.getOwnPropertySymbols&&!NY((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&pX&&pX<41})),gX=hX&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,vX=jY.Object,yX=gX?function(e){return"symbol"==typeof e}:function(e){var t=aX("Symbol");return rX(t)&&uX(t.prototype,vX(e))},mX=jY.String,bX=function(e){try{return mX(e)}catch(t){return"Object"}},wX=jY.TypeError,EX=function(e){if(rX(e))return e;throw wX(bX(e)+" is not a function")},DX=function(e,t){var n=e[t];return null==n?void 0:EX(n)},CX=jY.TypeError,xX=Object.defineProperty,SX=function(e,t){try{xX(jY,e,{value:t,configurable:!0,writable:!0})}catch(rY){jY[e]=t}return t},AX=jY["__core-js_shared__"]||SX("__core-js_shared__",{}),OX=FY((function(e){(e.exports=function(e,t){return AX[e]||(AX[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),kX=jY.Object,BX=function(e){return kX(tX(e))},FX=GY({}.hasOwnProperty),TX=Object.hasOwn||function(e,t){return FX(BX(e),t)},_X=0,PX=Math.random(),jX=GY(1..toString),NX=function(e){return"Symbol("+(void 0===e?"":e)+")_"+jX(++_X+PX,36)},IX=OX("wks"),LX=jY.Symbol,RX=LX&&LX.for,MX=gX?LX:LX&&LX.withoutSetter||NX,zX=function(e){if(!TX(IX,e)||!hX&&"string"!=typeof IX[e]){var t="Symbol."+e;hX&&TX(LX,e)?IX[e]=LX[e]:IX[e]=gX&&RX?RX(t):MX(t)}return IX[e]},$X=jY.TypeError,HX=zX("toPrimitive"),VX=function(e){var t=function(e,t){if(!oX(e)||yX(e))return e;var n,r=DX(e,HX);if(r){if(void 0===t&&(t="default"),n=RY(r,e,t),!oX(n)||yX(n))return n;throw $X("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&rX(n=e.toString)&&!oX(r=RY(n,e)))return r;if(rX(n=e.valueOf)&&!oX(r=RY(n,e)))return r;if("string"!==t&&rX(n=e.toString)&&!oX(r=RY(n,e)))return r;throw CX("Can't convert object to primitive value")}(e,t)}(e,"string");return yX(t)?t:t+""},UX=jY.document,WX=oX(UX)&&oX(UX.createElement),qX=function(e){return WX?UX.createElement(e):{}},GX=!IY&&!NY((function(){return 7!=Object.defineProperty(qX("div"),"a",{get:function(){return 7}}).a})),KX=Object.getOwnPropertyDescriptor,YX={f:IY?KX:function(e,t){if(e=nX(e),t=VX(t),GX)try{return KX(e,t)}catch(n){}if(TX(e,t))return HY(!RY($Y.f,e,t),e[t])}},XX=jY.String,ZX=jY.TypeError,JX=function(e){if(oX(e))return e;throw ZX(XX(e)+" is not an object")},QX=jY.TypeError,eZ=Object.defineProperty,tZ={f:IY?eZ:function(e,t,n){if(JX(e),t=VX(t),JX(n),GX)try{return eZ(e,t,n)}catch(r){}if("get"in n||"set"in n)throw QX("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},nZ=IY?function(e,t,n){return tZ.f(e,t,HY(1,n))}:function(e,t,n){return e[t]=n,e},rZ=GY(Function.toString);rX(AX.inspectSource)||(AX.inspectSource=function(e){return rZ(e)});var oZ,iZ,aZ,uZ=AX.inspectSource,sZ=jY.WeakMap,lZ=rX(sZ)&&/native code/.test(uZ(sZ)),cZ=OX("keys"),fZ=function(e){return cZ[e]||(cZ[e]=NX(e))},dZ={},pZ=jY.TypeError,hZ=jY.WeakMap;if(lZ||AX.state){var gZ=AX.state||(AX.state=new hZ),vZ=GY(gZ.get),yZ=GY(gZ.has),mZ=GY(gZ.set);oZ=function(e,t){if(yZ(gZ,e))throw new pZ("Object already initialized");return t.facade=e,mZ(gZ,e,t),t},iZ=function(e){return vZ(gZ,e)||{}},aZ=function(e){return yZ(gZ,e)}}else{var bZ=fZ("state");dZ[bZ]=!0,oZ=function(e,t){if(TX(e,bZ))throw new pZ("Object already initialized");return t.facade=e,nZ(e,bZ,t),t},iZ=function(e){return TX(e,bZ)?e[bZ]:{}},aZ=function(e){return TX(e,bZ)}}var wZ={set:oZ,get:iZ,has:aZ,enforce:function(e){return aZ(e)?iZ(e):oZ(e,{})},getterFor:function(e){return function(t){var n;if(!oX(t)||(n=iZ(t)).type!==e)throw pZ("Incompatible receiver, "+e+" required");return n}}},EZ=Function.prototype,DZ=IY&&Object.getOwnPropertyDescriptor,CZ=TX(EZ,"name"),xZ={EXISTS:CZ,PROPER:CZ&&"something"===function(){}.name,CONFIGURABLE:CZ&&(!IY||IY&&DZ(EZ,"name").configurable)},SZ=FY((function(e){var t=xZ.CONFIGURABLE,n=wZ.get,r=wZ.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;rX(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!TX(i,"name")||t&&i.name!==f)&&nZ(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==jY?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:nZ(e,n,i)):l?e[n]=i:SX(n,i)})(Function.prototype,"toString",(function(){return rX(this)&&n(this).source||uZ(this)}))})),AZ=Math.ceil,OZ=Math.floor,kZ=function(e){var t=+e;return t!=t||0===t?0:(t>0?OZ:AZ)(t)},BZ=Math.max,FZ=Math.min,TZ=function(e,t){var n=kZ(e);return n<0?BZ(n+t,0):FZ(n,t)},_Z=Math.min,PZ=function(e){return e>0?_Z(kZ(e),9007199254740991):0},jZ=function(e){return PZ(e.length)},NZ=function(e){return function(t,n,r){var o,i=nX(t),a=jZ(i),u=TZ(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},IZ={includes:NZ(!0),indexOf:NZ(!1)},LZ=IZ.indexOf,RZ=GY([].push),MZ=function(e,t){var n,r=nX(e),o=0,i=[];for(n in r)!TX(dZ,n)&&TX(r,n)&&RZ(i,n);for(;t.length>o;)TX(r,n=t[o++])&&(~LZ(i,n)||RZ(i,n));return i},zZ=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],$Z=zZ.concat("length","prototype"),HZ={f:Object.getOwnPropertyNames||function(e){return MZ(e,$Z)}},VZ={f:Object.getOwnPropertySymbols},UZ=GY([].concat),WZ=aX("Reflect","ownKeys")||function(e){var t=HZ.f(JX(e)),n=VZ.f;return n?UZ(t,n(e)):t},qZ=function(e,t){for(var n=WZ(t),r=tZ.f,o=YX.f,i=0;i<n.length;i++){var a=n[i];TX(e,a)||r(e,a,o(t,a))}},GZ=/#|\.prototype\./,KZ=function(e,t){var n=XZ[YZ(e)];return n==JZ||n!=ZZ&&(rX(t)?NY(t):!!t)},YZ=KZ.normalize=function(e){return String(e).replace(GZ,".").toLowerCase()},XZ=KZ.data={},ZZ=KZ.NATIVE="N",JZ=KZ.POLYFILL="P",QZ=KZ,eJ=YX.f,tJ=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?jY:l?jY[u]||SX(u,{}):(jY[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=eJ(n,r))&&a.value:n[r],!QZ(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;qZ(i,o)}(e.sham||o&&o.sham)&&nZ(i,"sham",!0),SZ(n,r,i,e)}},nJ={};nJ[zX("toStringTag")]="z";var rJ="[object z]"===String(nJ),oJ=zX("toStringTag"),iJ=jY.Object,aJ="Arguments"==XY(function(){return arguments}()),uJ=rJ?XY:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=iJ(e),oJ))?n:aJ?XY(t):"Object"==(r=XY(t))&&rX(t.callee)?"Arguments":r},sJ=jY.String,lJ=function(e){if("Symbol"===uJ(e))throw TypeError("Cannot convert a Symbol value to a string");return sJ(e)},cJ="\t\n\v\f\r                　\u2028\u2029\ufeff",fJ=GY("".replace),dJ="["+cJ+"]",pJ=RegExp("^"+dJ+dJ+"*"),hJ=RegExp(dJ+dJ+"*$"),gJ=function(e){return function(t){var n=lJ(tX(t));return 1&e&&(n=fJ(n,pJ,"")),2&e&&(n=fJ(n,hJ,"")),n}},vJ={start:gJ(1),end:gJ(2),trim:gJ(3)},yJ=xZ.PROPER,mJ=vJ.trim;function bJ(e){return e.length?e[0].tagName.toLowerCase():""}function wJ(e,t,n){void 0===t&&(t="auto"),void 0===n&&(n="auto");var r=Br(e);return r.attr("width",t),r.attr("height",n),r[0].outerHTML}tJ({target:"String",proto:!0,forced:("trim",NY((function(){return!!cJ.trim()||"​᠎"!=="​᠎".trim()||yJ&&"trim"!==cJ.trim.name})))},{trim:function(){return mJ(this)}}),tJ({global:!0},{globalThis:jY}),Xr&&(Br.fn.append=Xr),Lr&&(Br.fn.on=Lr),uo&&(Br.fn.focus=uo),Pr&&(Br.fn.attr=Pr),Ir&&(Br.fn.val=Ir),Gr&&(Br.fn.html=Gr),Jr&&(Br.fn.parent=Jr),_r&&(Br.fn.hasClass=_r),ro&&(Br.fn.empty=ro);var EJ,DJ={type:"video",renderElem:function(e,t,n){var r,o=e,i=o.src,a=void 0===i?"":i,u=o.poster,s=void 0===u?"":u,l=o.width,c=void 0===l?"auto":l,f=o.height,d=void 0===f?"auto":f,p=qy.isNodeSelected(n,e);if(0===a.trim().indexOf("<iframe ")){r=xi("div",{className:"w-e-textarea-video-container","data-selected":p?"true":"",innerHTML:wJ(a,c,d)})}else{var h=xi("video",{poster:s,controls:!0},xi("source",{src:a,type:"video/mp4"}),"Sorry, your browser doesn't support embedded videos.\n 抱歉，浏览器不支持 video 视频");"auto"!==c&&(h.data.width=c),"auto"!==d&&(h.data.height=d),r=xi("div",{className:"w-e-textarea-video-container","data-selected":p?"true":""},h)}return oi("div",{props:{contentEditable:!1},on:{mousedown:function(e){return e.preventDefault()}}},r)}},CJ={type:"video",elemToHtml:function(e,t){var n=e,r=n.src,o=void 0===r?"":r,i=n.poster,a=void 0===i?"":i,u=n.width,s=void 0===u?"auto":u,l=n.height,c=void 0===l?"auto":l,f='<div data-w-e-type="video" data-w-e-is-void>\n';return 0===o.trim().indexOf("<iframe ")?f+=wJ(o,s,c):f+='<video poster="'+a+'" controls="true" width="'+s+'" height="'+c+'"><source src="'+o+'" type="video/mp4"/></video>',f+"\n</div>"}},xJ=Object.keys||function(e){return MZ(e,zZ)},SJ=IY?Object.defineProperties:function(e,t){JX(e);for(var n,r=nX(t),o=xJ(t),i=o.length,a=0;i>a;)tZ.f(e,n=o[a++],r[n]);return e},AJ=aX("document","documentElement"),OJ=fZ("IE_PROTO"),kJ=function(){},BJ=function(e){return"<script>"+e+"<\/script>"},FJ=function(e){e.write(BJ("")),e.close();var t=e.parentWindow.Object;return e=null,t},TJ=function(){try{EJ=new ActiveXObject("htmlfile")}catch(r){}var e,t;TJ="undefined"!=typeof document?document.domain&&EJ?FJ(EJ):((t=qX("iframe")).style.display="none",AJ.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(BJ("document.F=Object")),e.close(),e.F):FJ(EJ);for(var n=zZ.length;n--;)delete TJ.prototype[zZ[n]];return TJ()};dZ[OJ]=!0;var _J=Object.create||function(e,t){var n;return null!==e?(kJ.prototype=JX(e),n=new kJ,kJ.prototype=null,n[OJ]=e):n=TJ(),void 0===t?n:SJ(n,t)},PJ=zX("unscopables"),jJ=Array.prototype;null==jJ[PJ]&&tZ.f(jJ,PJ,{configurable:!0,value:_J(null)});var NJ=function(e){jJ[PJ][e]=!0},IJ=IZ.includes;tJ({target:"Array",proto:!0},{includes:function(e){return IJ(this,e,arguments.length>1?arguments[1]:void 0)}}),NJ("includes");var LJ={selector:"iframe,video,p",preParseHtml:function(e){var t=Br(e),n=t;if("p"===bJ(t)){var r=t.children();if(1===r.length){var o=r[0],i=o.tagName.toLowerCase();["iframe","video"].includes(i)&&(n=Br(o))}}var a=bJ(n);if("iframe"!==a&&"video"!==a)return n[0];if("video"===n.parent().attr("data-w-e-type"))return n[0];var u=Br('<div data-w-e-type="video" data-w-e-is-void></div>');return u.append(n),u[0]}},RJ=GY(GY.bind),MJ=function(e,t){return EX(e),void 0===t?e:RJ?RJ(e,t):function(){return e.apply(t,arguments)}},zJ=Array.isArray||function(e){return"Array"==XY(e)},$J=function(){},HJ=[],VJ=aX("Reflect","construct"),UJ=/^\s*(?:class|function)\b/,WJ=GY(UJ.exec),qJ=!UJ.exec($J),GJ=function(e){if(!rX(e))return!1;try{return VJ($J,HJ,e),!0}catch(t){return!1}},KJ=!VJ||NY((function(){var e;return GJ(GJ.call)||!GJ(Object)||!GJ((function(){e=!0}))||e}))?function(e){if(!rX(e))return!1;switch(uJ(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return qJ||!!WJ(UJ,uZ(e))}:GJ,YJ=zX("species"),XJ=jY.Array,ZJ=function(e,t){return new(zJ(n=e)&&(r=n.constructor,(KJ(r)&&(r===XJ||zJ(r.prototype))||oX(r)&&null===(r=r[YJ]))&&(r=void 0)),void 0===r?XJ:r)(0===t?0:t);var n,r},JJ=GY([].push),QJ=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=BX(s),g=QY(h),v=MJ(l,c),y=jZ(g),m=0,b=f||ZJ,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:JJ(w,d)}else switch(e){case 4:return!1;case 7:JJ(w,d)}return i?-1:r||o?o:w}},eQ={forEach:QJ(0),map:QJ(1),filter:QJ(2),some:QJ(3),every:QJ(4),find:QJ(5),findIndex:QJ(6),filterReject:QJ(7)},tQ=eQ.find,nQ=!0;"find"in[]&&Array(1).find((function(){nQ=!1})),tJ({target:"Array",proto:!0,forced:nQ},{find:function(e){return tQ(this,e,arguments.length>1?arguments[1]:void 0)}}),NJ("find");var rQ=rJ?{}.toString:function(){return"[object "+uJ(this)+"]"};function oQ(e,t,n,r){return void 0===t&&(t=""),void 0===n&&(n="auto"),void 0===r&&(r="auto"),{type:"video",src:e,poster:t,width:n,height:r,children:[{text:""}]}}rJ||SZ(Object.prototype,"toString",rQ,{unsafe:!0});var iQ,aQ,uQ={selector:'div[data-w-e-type="video"]',parseElemHtml:function(e,t,n){var r=Br(e),o="",i="",a="auto",u="auto",s=r.find("iframe");if(s.length>0)return a=s.attr("width")||"auto",u=s.attr("height")||"auto",oQ(o=s[0].outerHTML,i,a,u);var l=r.find("video");return(o=l.attr("src")||"")||l.length>0&&(o=l.find("source").attr("src")||""),a=l.attr("width")||"auto",u=l.attr("height")||"auto",oQ(o,i=l.attr("poster")||"",a,u)}},sQ=function(){var e=JX(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},lQ=jY.RegExp,cQ=NY((function(){var e=lQ("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),fQ=cQ||NY((function(){return!lQ("a","y").sticky})),dQ={BROKEN_CARET:cQ||NY((function(){var e=lQ("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:fQ,UNSUPPORTED_Y:cQ},pQ=jY.RegExp,hQ=NY((function(){var e=pQ(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),gQ=jY.RegExp,vQ=NY((function(){var e=gQ("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),yQ=wZ.get,mQ=OX("native-string-replace",String.prototype.replace),bQ=RegExp.prototype.exec,wQ=bQ,EQ=GY("".charAt),DQ=GY("".indexOf),CQ=GY("".replace),xQ=GY("".slice),SQ=(aQ=/b*/g,RY(bQ,iQ=/a/,"a"),RY(bQ,aQ,"a"),0!==iQ.lastIndex||0!==aQ.lastIndex),AQ=dQ.BROKEN_CARET,OQ=void 0!==/()??/.exec("")[1];(SQ||OQ||AQ||hQ||vQ)&&(wQ=function(e){var t,n,r,o,i,a,u,s=this,l=yQ(s),c=lJ(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=RY(wQ,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=AQ&&s.sticky,h=RY(sQ,s),g=s.source,v=0,y=c;if(p&&(h=CQ(h,"y",""),-1===DQ(h,"g")&&(h+="g"),y=xQ(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==EQ(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),OQ&&(n=new RegExp("^"+g+"$(?!\\s)",h)),SQ&&(r=s.lastIndex),o=RY(bQ,p?n:s,y),p?o?(o.input=xQ(o.input,v),o[0]=xQ(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:SQ&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),OQ&&o&&o.length>1&&RY(mQ,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=_J(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var kQ=wQ;tJ({target:"RegExp",proto:!0,forced:/./.exec!==kQ},{exec:kQ});var BQ=Function.prototype,FQ=BQ.apply,TQ=BQ.bind,_Q=BQ.call,PQ="object"==typeof Reflect&&Reflect.apply||(TQ?_Q.bind(FQ):function(){return _Q.apply(FQ,arguments)}),jQ=(zX("species"),RegExp.prototype),NQ=GY("".charAt),IQ=GY("".charCodeAt),LQ=GY("".slice),RQ=function(e){return function(t,n){var r,o,i=lJ(tX(t)),a=kZ(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=IQ(i,a))<55296||r>56319||a+1===u||(o=IQ(i,a+1))<56320||o>57343?e?NQ(i,a):r:e?LQ(i,a,a+2):o-56320+(r-55296<<10)+65536}},MQ={codeAt:RQ(!1),charAt:RQ(!0)},zQ=MQ.charAt,$Q=function(e,t,n){return t+(n?zQ(e,t).length:1)},HQ=Math.floor,VQ=GY("".charAt),UQ=GY("".replace),WQ=GY("".slice),qQ=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,GQ=/\$([$&'`]|\d{1,2})/g,KQ=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=GQ;return void 0!==o&&(o=BX(o),s=qQ),UQ(i,s,(function(i,s){var l;switch(VQ(s,0)){case"$":return"$";case"&":return e;case"`":return WQ(t,0,n);case"'":return WQ(t,a);case"<":l=o[WQ(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=HQ(c/10);return 0===f?i:f<=u?void 0===r[f-1]?VQ(s,1):r[f-1]+VQ(s,1):i}l=r[c-1]}return void 0===l?"":l}))},YQ=jY.TypeError,XQ=function(e,t){var n=e.exec;if(rX(n)){var r=RY(n,e,t);return null!==r&&JX(r),r}if("RegExp"===XY(e))return RY(kQ,e,t);throw YQ("RegExp#exec called on incompatible receiver")},ZQ=zX("replace"),JQ=Math.max,QQ=Math.min,e0=GY([].concat),t0=GY([].push),n0=GY("".indexOf),r0=GY("".slice),o0="$0"==="a".replace(/./,"$0"),i0=!!/./[ZQ]&&""===/./[ZQ]("a","$0");function a0(e){return void 0===e&&(e="r"),e+"-"+Bo()}!function(e,t,n,r){var o=zX(e),i=!NY((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!NY((function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=GY(/./[o]),s=function(e,t,n){var r=i0?"$":"$0";return[function(e,n){var r=tX(this),o=null==e?void 0:DX(e,ZQ);return o?RY(o,e,r,n):RY(t,lJ(r),e,n)},function(e,o){var i=JX(this),a=lJ(e);if("string"==typeof o&&-1===n0(o,r)&&-1===n0(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=rX(o);s||(o=lJ(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=XQ(i,a);if(null===d)break;if(t0(f,d),!l)break;""===lJ(d[0])&&(i.lastIndex=$Q(a,PZ(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=lJ((d=f[v])[0]),m=JQ(QQ(kZ(d.index),a.length),0),b=[],w=1;w<d.length;w++)t0(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=e0([y],b,m,a);void 0!==E&&t0(D,E);var C=lJ(PQ(o,void 0,D))}else C=KQ(y,a,m,b,E,o);m>=g&&(h+=r0(a,g,m)+C,g=m+y.length)}return h+r0(a,g)}]}(0,""[e],(function(e,t,n,r,o){var a=GY(e),s=t.exec;return s===kQ||s===jQ.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));SZ(String.prototype,e,s[0]),SZ(jQ,o,s[1])}}("replace",0,!!NY((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!o0||i0);var u0=jY.Promise,s0=function(e,t,n){for(var r in t)SZ(e,r,t[r],n);return e},l0=jY.String,c0=jY.TypeError,f0=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=GY(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return JX(n),function(e){if("object"==typeof e||rX(e))return e;throw c0("Can't set "+l0(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),d0=tZ.f,p0=zX("toStringTag"),h0=function(e,t,n){e&&!TX(e=n?e:e.prototype,p0)&&d0(e,p0,{configurable:!0,value:t})},g0=zX("species"),v0=jY.TypeError,y0=function(e,t){if(uX(t,e))return e;throw v0("Incorrect invocation")},m0={},b0=zX("iterator"),w0=Array.prototype,E0=zX("iterator"),D0=function(e){if(null!=e)return DX(e,E0)||DX(e,"@@iterator")||m0[uJ(e)]},C0=jY.TypeError,x0=function(e,t,n){var r,o;JX(e);try{if(!(r=DX(e,"return"))){if("throw"===t)throw n;return n}r=RY(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return JX(r),n},S0=jY.TypeError,A0=function(e,t){this.stopped=e,this.result=t},O0=A0.prototype,k0=function(e,t,n){var r,o,i,a,u,s,l,c,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),g=MJ(t,f),v=function(e){return r&&x0(r,"normal",e),new A0(!0,e)},y=function(e){return d?(JX(e),h?g(e[0],e[1],v):g(e[0],e[1])):h?g(e,v):g(e)};if(p)r=e;else{if(!(o=D0(e)))throw S0(bX(e)+" is not iterable");if(void 0!==(c=o)&&(m0.Array===c||w0[b0]===c)){for(i=0,a=jZ(e);a>i;i++)if((u=y(e[i]))&&uX(O0,u))return u;return new A0(!1)}r=function(e,t){var n=arguments.length<2?D0(e):t;if(EX(n))return JX(RY(n,e));throw C0(bX(e)+" is not iterable")}(e,o)}for(s=r.next;!(l=RY(s,r)).done;){try{u=y(l.value)}catch(m){x0(r,"throw",m)}if("object"==typeof u&&u&&uX(O0,u))return u}return new A0(!1)},B0=zX("iterator"),F0=!1;try{var T0=0,_0={next:function(){return{done:!!T0++}},return:function(){F0=!0}};_0[B0]=function(){return this},Array.from(_0,(function(){throw 2}))}catch(tg){}var P0,j0,N0,I0,L0=function(e,t){if(!t&&!F0)return!1;var n=!1;try{var r={};r[B0]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},R0=jY.TypeError,M0=zX("species"),z0=GY([].slice),$0=/(?:ipad|iphone|ipod).*applewebkit/i.test(sX),H0="process"==XY(jY.process),V0=jY.setImmediate,U0=jY.clearImmediate,W0=jY.process,q0=jY.Dispatch,G0=jY.Function,K0=jY.MessageChannel,Y0=jY.String,X0=0,Z0={};try{P0=jY.location}catch(tg){}var J0=function(e){if(TX(Z0,e)){var t=Z0[e];delete Z0[e],t()}},Q0=function(e){return function(){J0(e)}},e1=function(e){J0(e.data)},t1=function(e){jY.postMessage(Y0(e),P0.protocol+"//"+P0.host)};V0&&U0||(V0=function(e){var t=z0(arguments,1);return Z0[++X0]=function(){PQ(rX(e)?e:G0(e),void 0,t)},j0(X0),X0},U0=function(e){delete Z0[e]},H0?j0=function(e){W0.nextTick(Q0(e))}:q0&&q0.now?j0=function(e){q0.now(Q0(e))}:K0&&!$0?(I0=(N0=new K0).port2,N0.port1.onmessage=e1,j0=MJ(I0.postMessage,I0)):jY.addEventListener&&rX(jY.postMessage)&&!jY.importScripts&&P0&&"file:"!==P0.protocol&&!NY(t1)?(j0=t1,jY.addEventListener("message",e1,!1)):j0="onreadystatechange"in qX("script")?function(e){AJ.appendChild(qX("script")).onreadystatechange=function(){AJ.removeChild(this),J0(e)}}:function(e){setTimeout(Q0(e),0)});var n1,r1,o1,i1,a1,u1,s1,l1,c1={set:V0,clear:U0},f1=/ipad|iphone|ipod/i.test(sX)&&void 0!==jY.Pebble,d1=/web0s(?!.*chrome)/i.test(sX),p1=YX.f,h1=c1.set,g1=jY.MutationObserver||jY.WebKitMutationObserver,v1=jY.document,y1=jY.process,m1=jY.Promise,b1=p1(jY,"queueMicrotask"),w1=b1&&b1.value;w1||(n1=function(){var e,t;for(H0&&(e=y1.domain)&&e.exit();r1;){t=r1.fn,r1=r1.next;try{t()}catch(n){throw r1?i1():o1=void 0,n}}o1=void 0,e&&e.enter()},$0||H0||d1||!g1||!v1?!f1&&m1&&m1.resolve?((s1=m1.resolve(void 0)).constructor=m1,l1=MJ(s1.then,s1),i1=function(){l1(n1)}):H0?i1=function(){y1.nextTick(n1)}:(h1=MJ(h1,jY),i1=function(){h1(n1)}):(a1=!0,u1=v1.createTextNode(""),new g1(n1).observe(u1,{characterData:!0}),i1=function(){u1.data=a1=!a1}));var E1,D1,C1,x1,S1=w1||function(e){var t={fn:e,next:void 0};o1&&(o1.next=t),r1||(r1=t,i1()),o1=t},A1=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=EX(t),this.reject=EX(n)},O1={f:function(e){return new A1(e)}},k1=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},B1="object"==typeof window,F1=c1.set,T1=zX("species"),_1="Promise",P1=wZ.getterFor(_1),j1=wZ.set,N1=wZ.getterFor(_1),I1=u0&&u0.prototype,L1=u0,R1=I1,M1=jY.TypeError,z1=jY.document,$1=jY.process,H1=O1.f,V1=H1,U1=!!(z1&&z1.createEvent&&jY.dispatchEvent),W1=rX(jY.PromiseRejectionEvent),q1=!1,G1=QZ(_1,(function(){var e=uZ(L1),t=e!==String(L1);if(!t&&66===pX)return!0;if(pX>=51&&/native code/.test(e))return!1;var n=new L1((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[T1]=r,!(q1=n.then((function(){}))instanceof r)||!t&&B1&&!W1})),K1=G1||!L0((function(e){L1.all(e).catch((function(){}))})),Y1=function(e){var t;return!(!oX(e)||!rX(t=e.then))&&t},X1=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;S1((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&e2(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(M1("Promise-chain cycle")):(u=Y1(a))?RY(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&J1(e)}))}},Z1=function(e,t,n){var r,o;U1?((r=z1.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),jY.dispatchEvent(r)):r={promise:t,reason:n},!W1&&(o=jY["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=jY.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},J1=function(e){RY(F1,jY,(function(){var t,n=e.facade,r=e.value;if(Q1(e)&&(t=k1((function(){H0?$1.emit("unhandledRejection",r,n):Z1("unhandledrejection",n,r)})),e.rejection=H0||Q1(e)?2:1,t.error))throw t.value}))},Q1=function(e){return 1!==e.rejection&&!e.parent},e2=function(e){RY(F1,jY,(function(){var t=e.facade;H0?$1.emit("rejectionHandled",t):Z1("rejectionhandled",t,e.value)}))},t2=function(e,t,n){return function(r){e(t,r,n)}},n2=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,X1(e,!0))},r2=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw M1("Promise can't be resolved itself");var r=Y1(t);r?S1((function(){var n={done:!1};try{RY(r,t,t2(r2,n,e),t2(n2,n,e))}catch(o){n2(n,o,e)}})):(e.value=t,e.state=1,X1(e,!1))}catch(o){n2({done:!1},o,e)}}};if(G1&&(R1=(L1=function(e){y0(this,R1),EX(e),RY(E1,this);var t=P1(this);try{e(t2(r2,t),t2(n2,t))}catch(n){n2(t,n)}}).prototype,(E1=function(e){j1(this,{type:_1,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=s0(R1,{then:function(e,t){var n=N1(this),r=n.reactions,o=H1(function(e,t){var n,r=JX(e).constructor;return void 0===r||null==(n=JX(r)[M0])?t:function(e){if(KJ(e))return e;throw R0(bX(e)+" is not a constructor")}(n)}(this,L1));return o.ok=!rX(e)||e,o.fail=rX(t)&&t,o.domain=H0?$1.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&X1(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),D1=function(){var e=new E1,t=P1(e);this.promise=e,this.resolve=t2(r2,t),this.reject=t2(n2,t)},O1.f=H1=function(e){return e===L1||e===C1?new D1(e):V1(e)},rX(u0)&&I1!==Object.prototype)){x1=I1.then,q1||(SZ(I1,"then",(function(e,t){var n=this;return new L1((function(e,t){RY(x1,n,e,t)})).then(e,t)}),{unsafe:!0}),SZ(I1,"catch",R1.catch,{unsafe:!0}));try{delete I1.constructor}catch(tg){}f0&&f0(I1,R1)}function o2(e,t,n){return void 0===n&&(n=""),SY(this,void 0,void 0,(function(){var r,o,i,a,u,s,l;return AY(this,(function(c){switch(c.label){case 0:return t?(e.restoreSelection(),r=e.getMenuConfig("insertVideo"),o=r.onInsertedVideo,i=r.checkVideo,a=r.parseVideoSrc,[4,i(t,n)]):[2];case 1:return"string"==typeof(u=c.sent())?(e.alert(u,"error"),[2]):null==u?[2]:[4,a(t)];case 2:return 0!==(s=c.sent()).trim().indexOf("<iframe ")&&(s=s.replace(/</g,"&lt;").replace(/>/g,"&gt;")),l={type:"video",src:s,poster:n,children:[{text:""}]},Promise.resolve().then((function(){on.insertNodes(e,l)})),o(l),[2]}}))}))}function i2(){return a0("w-e-insert-video")}tJ({global:!0,wrap:!0,forced:G1},{Promise:L1}),h0(L1,_1,!1),function(e){var t=aX("Promise"),n=tZ.f;IY&&t&&!t[g0]&&n(t,g0,{configurable:!0,get:function(){return this}})}(),C1=aX(_1),tJ({target:_1,stat:!0,forced:G1},{reject:function(e){var t=H1(this);return RY(t.reject,void 0,e),t.promise}}),tJ({target:_1,stat:!0,forced:G1},{resolve:function(e){return function(e,t){if(JX(e),oX(t)&&t.constructor===e)return t;var n=O1.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),tJ({target:_1,stat:!0,forced:K1},{all:function(e){var t=this,n=H1(t),r=n.resolve,o=n.reject,i=k1((function(){var n=EX(t.resolve),i=[],a=0,u=1;k0(e,(function(e){var s=a++,l=!1;u++,RY(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=H1(t),r=n.reject,o=k1((function(){var o=EX(t.resolve);k0(e,(function(e){RY(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var a2=function(){function e(){this.title=_C("videoModule.insertVideo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=320,this.$content=null,this.srcInputId=i2(),this.posterInputId=i2(),this.buttonId=i2()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||!!qy.getSelectedElems(e).some((function(t){var n=qy.getNodeType(t);return"pre"===n||"list-item"===n||!!e.isVoid(t)}))},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=this,n=this,r=n.srcInputId,o=n.posterInputId,i=n.buttonId,a=OY(vD(_C("videoModule.videoSrc"),r,_C("videoModule.videoSrcPlaceHolder")),2),u=a[0],s=a[1],l=OY(vD(_C("videoModule.videoPoster"),o,_C("videoModule.videoPosterPlaceHolder")),2),c=l[0],f=l[1],d=Br(s),p=Br(f),h=OY(yD(i,_C("videoModule.ok")),1)[0];if(null==this.$content){var g=Br("<div></div>");g.on("click","#"+i,(function(n){return SY(t,void 0,void 0,(function(){var t,i;return AY(this,(function(a){switch(a.label){case 0:return n.preventDefault(),t=g.find("#"+r).val().trim(),i=g.find("#"+o).val().trim(),[4,o2(e,t,i)];case 1:return a.sent(),e.hidePanelOrModal(),[2]}}))}))})),this.$content=g}var v=this.$content;return v.empty(),v.append(u),v.append(c),v.append(h),d.val(""),p.val(""),setTimeout((function(){d.focus()})),v[0]},e}(),u2=GY([].join),s2=QY!=Object,l2=function(e,t){var n=[].join;return!!n&&NY((function(){n.call(null,",",1)}))}();tJ({target:"Array",proto:!0,forced:s2||!l2},{join:function(e){return u2(nX(this),void 0===e?",":e)}});var c2,f2,d2,p2=!NY((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),h2=fZ("IE_PROTO"),g2=jY.Object,v2=g2.prototype,y2=p2?g2.getPrototypeOf:function(e){var t=BX(e);if(TX(t,h2))return t[h2];var n=t.constructor;return rX(n)&&t instanceof n?n.prototype:t instanceof g2?v2:null},m2=zX("iterator"),b2=!1;[].keys&&("next"in(d2=[].keys())?(f2=y2(y2(d2)))!==Object.prototype&&(c2=f2):b2=!0);var w2=null==c2||NY((function(){var e={};return c2[m2].call(e)!==e}));w2&&(c2={}),rX(c2[m2])||SZ(c2,m2,(function(){return this}));var E2={IteratorPrototype:c2,BUGGY_SAFARI_ITERATORS:b2},D2=E2.IteratorPrototype,C2=function(){return this},x2=xZ.PROPER,S2=xZ.CONFIGURABLE,A2=E2.IteratorPrototype,O2=E2.BUGGY_SAFARI_ITERATORS,k2=zX("iterator"),B2=function(){return this},F2=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=_J(D2,{next:HY(1,s)}),h0(u,l,!1),m0[l]=C2;var c,f,d,p=function(e){if(e===o&&m)return m;if(!O2&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[k2]||v["@@iterator"]||o&&v[o],m=!O2&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=y2(b.call(new e)))!==Object.prototype&&c.next&&(y2(c)!==A2&&(f0?f0(c,A2):rX(c[k2])||SZ(c,k2,B2)),h0(c,h,!0)),x2&&"values"==o&&y&&"values"!==y.name&&(S2?nZ(v,"name","values"):(g=!0,m=function(){return RY(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(O2||g||!(d in v))&&SZ(v,d,f[d]);else tJ({target:t,proto:!0,forced:O2||g},f);return v[k2]!==m&&SZ(v,k2,m,{name:o}),m0[t]=m,f},T2=wZ.set,_2=wZ.getterFor("Array Iterator"),P2=F2(Array,"Array",(function(e,t){T2(this,{type:"Array Iterator",target:nX(e),index:0,kind:t})}),(function(){var e=_2(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");m0.Arguments=m0.Array,NJ("keys"),NJ("values"),NJ("entries");var j2=MQ.charAt,N2=wZ.set,I2=wZ.getterFor("String Iterator");F2(String,"String",(function(e){N2(this,{type:"String Iterator",string:lJ(e),index:0})}),(function(){var e,t=I2(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=j2(n,r),t.index+=e.length,{value:e,done:!1})}));var L2=function(e,t,n){var r=VX(t);r in e?tZ.f(e,r,HY(0,n)):e[r]=n},R2=jY.Array,M2=Math.max,z2=HZ.f,$2="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],H2={f:function(e){return $2&&"Window"==XY(e)?function(e){try{return z2(e)}catch(t){return function(e,t,n){for(var r=jZ(e),o=TZ(void 0,r),i=TZ(r,r),a=R2(M2(i-o,0)),u=0;o<i;o++,u++)L2(a,u,e[o]);return a.length=u,a}($2)}}(e):z2(nX(e))}},V2=NY((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),U2=Object.isExtensible,W2=NY((function(){U2(1)}))||V2?function(e){return!!oX(e)&&(!V2||"ArrayBuffer"!=XY(e))&&(!U2||U2(e))}:U2,q2=!NY((function(){return Object.isExtensible(Object.preventExtensions({}))})),G2=FY((function(e){var t=tZ.f,n=!1,r=NX("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=HZ.f,t=GY([].splice),o={};o[r]=1,e(o).length&&(HZ.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},tJ({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:H2.f}))},fastKey:function(e,t){if(!oX(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!TX(e,r)){if(!W2(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!TX(e,r)){if(!W2(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return q2&&n&&W2(e)&&!TX(e,r)&&i(e),e}};dZ[r]=!0})),K2=G2.getWeakData,Y2=wZ.set,X2=wZ.getterFor,Z2=eQ.find,J2=eQ.findIndex,Q2=GY([].splice),e4=0,t4=function(e){return e.frozen||(e.frozen=new n4)},n4=function(){this.entries=[]},r4=function(e,t){return Z2(e.entries,(function(e){return e[0]===t}))};n4.prototype={get:function(e){var t=r4(this,e);if(t)return t[1]},has:function(e){return!!r4(this,e)},set:function(e,t){var n=r4(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=J2(this.entries,(function(t){return t[0]===e}));return~t&&Q2(this.entries,t,1),!!~t}};var o4,i4={getConstructor:function(e,t,n,r){var o=e((function(e,o){y0(e,i),Y2(e,{type:t,id:e4++,frozen:void 0}),null!=o&&k0(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=X2(t),u=function(e,t,n){var r=a(e),o=K2(JX(t),!0);return!0===o?t4(r).set(t,n):o[r.id]=n,e};return s0(i,{delete:function(e){var t=a(this);if(!oX(e))return!1;var n=K2(e);return!0===n?t4(t).delete(e):n&&TX(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!oX(e))return!1;var n=K2(e);return!0===n?t4(t).has(e):n&&TX(n,t.id)}}),s0(i,n?{get:function(e){var t=a(this);if(oX(e)){var n=K2(e);return!0===n?t4(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},a4=wZ.enforce,u4=!jY.ActiveXObject&&"ActiveXObject"in jY,s4=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},l4=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=jY[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=GY(u[e]);SZ(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!oX(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!oX(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!oX(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(QZ(e,!rX(a)||!(o||u.forEach&&!NY((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),G2.enable();else if(QZ(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=NY((function(){f.has(1)})),h=L0((function(e){new a(e)})),g=!o&&NY((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){y0(e,u);var n,o,l,c,f,d=(n=new a,o=e,l=s,f0&&rX(c=o.constructor)&&c!==l&&oX(f=c.prototype)&&f!==l.prototype&&f0(n,f),n);return null!=t&&k0(t,d[i],{that:d,AS_ENTRIES:r}),d}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,tJ({global:!0,forced:s!=a},l),h0(s,e),o||n.setStrong(s,e,r),s}("WeakMap",s4,i4);if(lZ&&u4){o4=i4.getConstructor(s4,"WeakMap",!0),G2.enable();var c4=l4.prototype,f4=GY(c4.delete),d4=GY(c4.has),p4=GY(c4.get),h4=GY(c4.set);s0(c4,{delete:function(e){if(oX(e)&&!W2(e)){var t=a4(this);return t.frozen||(t.frozen=new o4),f4(this,e)||t.frozen.delete(e)}return f4(this,e)},has:function(e){if(oX(e)&&!W2(e)){var t=a4(this);return t.frozen||(t.frozen=new o4),d4(this,e)||t.frozen.has(e)}return d4(this,e)},get:function(e){if(oX(e)&&!W2(e)){var t=a4(this);return t.frozen||(t.frozen=new o4),d4(this,e)?p4(this,e):t.frozen.get(e)}return p4(this,e)},set:function(e,t){if(oX(e)&&!W2(e)){var n=a4(this);n.frozen||(n.frozen=new o4),d4(this,e)?h4(this,e,t):n.frozen.set(e,t)}else h4(this,e,t);return this}})}var g4={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},v4=qX("span").classList,y4=v4&&v4.constructor&&v4.constructor.prototype,m4=y4===Object.prototype?void 0:y4,b4=zX("iterator"),w4=zX("toStringTag"),E4=P2.values,D4=function(e,t){if(e){if(e[b4]!==E4)try{nZ(e,b4,E4)}catch(r){e[b4]=E4}if(e[w4]||nZ(e,w4,t),g4[t])for(var n in P2)if(e[n]!==P2[n])try{nZ(e,n,P2[n])}catch(r){e[n]=P2[n]}}};for(var C4 in g4)D4(jY[C4]&&jY[C4].prototype,C4);D4(m4,"DOMTokenList");var x4=xZ.EXISTS,S4=tZ.f,A4=Function.prototype,O4=GY(A4.toString),k4=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,B4=GY(k4.exec);IY&&!x4&&S4(A4,"name",{configurable:!0,get:function(){try{return B4(k4,O4(this))[1]}catch(tg){return""}}});var F4=zX("species"),T4=pX>=51||!NY((function(){var e=[];return(e.constructor={})[F4]=function(){return{foo:1}},1!==e.slice(Boolean).foo})),_4=zX("species"),P4=jY.Array,j4=Math.max;function N4(e){return e.getMenuConfig("uploadVideo")}tJ({target:"Array",proto:!0,forced:!T4},{slice:function(e,t){var n,r,o,i=nX(this),a=jZ(i),u=TZ(e,a),s=TZ(void 0===t?a:t,a);if(zJ(i)&&(n=i.constructor,(KJ(n)&&(n===P4||zJ(n.prototype))||oX(n)&&null===(n=n[_4]))&&(n=void 0),n===P4||void 0===n))return z0(i,u,s);for(r=new(void 0===n?P4:n)(j4(s-u,0)),o=0;u<s;u++,o++)u in i&&L2(r,o,i[u]);return r.length=o,r}});var I4=new WeakMap;function L4(e,t){return SY(this,void 0,void 0,(function(){var n,r,o,i;return AY(this,(function(a){switch(a.label){case 0:return n=function(e){var t=I4.get(e);if(null!=t)return t;var n=N4(e),r=n.onSuccess,o=n.onProgress,i=n.onFailed,a=n.customInsert,u=n.onError;return t=zD(xY(xY({},n),{onProgress:function(t){e.showProgressBar(t),o&&o(t)},onSuccess:function(t,n){if(a)return a(n,(function(t,n){return o2(e,t,n)})),void r(t,n);var o=n.errno,u=void 0===o?1:o,s=n.data,l=void 0===s?{}:s;if(0===u){var c=l.url,f=void 0===c?"":c,d=l.poster;o2(e,f,void 0===d?"":d),r(t,n)}else i(t,n)},onError:function(e,t,n){u(e,t,n)}})),I4.set(e,t),t}(e),r=t.name,o=t.type,i=t.size,n.addFile({name:r,type:o,size:i,data:t}),[4,n.upload()];case 1:return a.sent(),[2]}}))}))}var R4=function(){function e(){this.title=_C("videoModule.uploadVideo"),this.iconSvg='<svg viewBox="0 0 1056 1024"><path d="M805.902261 521.819882a251.441452 251.441452 0 0 0-251.011972 246.600033 251.051015 251.051015 0 1 0 502.023944 8.823877 253.237463 253.237463 0 0 0-251.011972-255.42391z m59.463561 240.001647v129.898403h-116.701631v-129.898403h-44.041298l101.279368-103.504859 101.279368 103.504859z" p-id="6802"></path><path d="M788.254507 0.000781H99.094092A98.663439 98.663439 0 0 0 0.001171 99.093701v590.067495a98.663439 98.663439 0 0 0 99.092921 99.092921h411.7549a266.434235 266.434235 0 0 1-2.186448-41.815807 275.843767 275.843767 0 0 1 275.180024-270.729042 270.650955 270.650955 0 0 1 103.504859 19.834201V99.093701A101.51363 101.51363 0 0 0 788.254507 0.000781zM295.054441 640.747004V147.507894l394.146189 246.600033z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){var n=this.getMenuConfig(e),r=n.allowedFileTypes,o=void 0===r?[]:r,i=n.customBrowseAndUpload;if(i)i((function(t,n){return o2(e,t,n)}));else{var a="";o.length>0&&(a='accept="'+o.join(", ")+'"');var u=Br("body"),s=Br('<input type="file" '+a+" multiple/>");s.hide(),u.append(s),s.click(),s.on("change",(function(){var t=s[0].files;!function(e,t){var n,r;SY(this,void 0,void 0,(function(){var o,i,a,u,s,l;return AY(this,(function(c){switch(c.label){case 0:if(null==t)return[2];o=Array.prototype.slice.call(t),i=N4(e).customUpload,c.label=1;case 1:c.trys.push([1,9,10,15]),a=kY(o),c.label=2;case 2:return[4,a.next()];case 3:return(u=c.sent()).done?[3,8]:(s=u.value,i?[4,i(s,(function(t,n){return o2(e,t,n)}))]:[3,5]);case 4:return c.sent(),[3,7];case 5:return[4,L4(e,s)];case 6:c.sent(),c.label=7;case 7:return[3,2];case 8:return[3,15];case 9:return l=c.sent(),n={error:l},[3,15];case 10:return c.trys.push([10,,13,14]),u&&!u.done&&(r=a.return)?[4,r.call(a)]:[3,12];case 11:c.sent(),c.label=12;case 12:return[3,14];case 13:if(n)throw n.error;return[7];case 14:return[7];case 15:return[2]}}))}))}(e,t)}))}},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!Pt.isCollapsed(t)||!!qy.getSelectedElems(e).some((function(t){var n=qy.getNodeType(t);return"pre"===n||"list-item"===n||!!e.isVoid(t)}))},e.prototype.getMenuConfig=function(e){return e.getMenuConfig("uploadVideo")},e}(),M4=xZ.PROPER,z4=RegExp.prototype,$4=z4.toString,H4=GY(sQ),V4=NY((function(){return"/a/b"!=$4.call({source:"a",flags:"b"})})),U4=M4&&"toString"!=$4.name;function W4(){return a0("w-e-insert-video")}(V4||U4)&&SZ(RegExp.prototype,"toString",(function(){var e=JX(this),t=lJ(e.source),n=e.flags;return"/"+t+"/"+lJ(void 0===n&&uX(z4,e)&&!("flags"in z4)?H4(e):n)}),{unsafe:!0});var q4=function(){function e(){this.title=_C("videoModule.editSize"),this.tag="button",this.showModal=!0,this.modalWidth=320,this.$content=null,this.widthInputId=W4(),this.heightInputId=W4(),this.buttonId=W4()}return e.prototype.getSelectedVideoNode=function(e){return qy.getSelectedNodeByType(e,"video")},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedVideoNode(e)},e.prototype.getModalPositionNode=function(e){return this.getSelectedVideoNode(e)},e.prototype.getModalContentElem=function(e){var t=this,n=t.widthInputId,r=t.heightInputId,o=t.buttonId,i=OY(vD(_C("videoModule.width"),n,"auto"),2),a=i[0],u=Br(i[1]),s=OY(vD(_C("videoModule.height"),r,"auto"),2),l=s[0],c=Br(s[1]),f=OY(yD(o,_C("videoModule.ok")),1)[0];if(null==this.$content){var d=Br("<div></div>");d.on("click","#"+o,(function(t){t.preventDefault();var o=d.find("#"+n).val().trim(),i=d.find("#"+r).val().trim(),a=parseInt(o),u=parseInt(i),s=a?a.toString():"auto",l=u?u.toString():"auto";e.restoreSelection(),on.setNodes(e,{width:s,height:l},{match:function(e){return qy.checkNodeType(e,"video")}}),e.hidePanelOrModal()})),this.$content=d}var p=this.$content;p.empty(),p.append(a),p.append(l),p.append(f);var h=this.getSelectedVideoNode(e);if(null==h)return p[0];var g=h.width,v=void 0===g?"auto":g,y=h.height,m=void 0===y?"auto":y;return u.val(v),c.val(m),setTimeout((function(){u.focus()})),p[0]},e}(),G4={renderElems:[DJ],elemsToHtml:[CJ],preParseHtml:[LJ],parseElemsHtml:[uQ],menus:[{key:"insertVideo",factory:function(){return new a2},config:{onInsertedVideo:function(e){},checkVideo:function(e,t){return!0},parseVideoSrc:function(e){return e}}},{key:"uploadVideo",factory:function(){return new R4},config:{server:"",fieldName:"wangeditor-uploaded-video",maxFileSize:10485760,maxNumberOfFiles:5,allowedFileTypes:["video/*"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:3e4,onBeforeUpload:function(e){return e},onProgress:function(e){},onSuccess:function(e,t){},onFailed:function(e,t){console.error("'"+e.name+"' upload failed",t)},onError:function(e,t,n){console.error("'"+e.name+" upload error",t,n)}}},{key:"editVideoSize",factory:function(){return new q4}}],editorPlugin:function(e){var t=e.isVoid,n=e.normalizeNode,r=e;return r.isVoid=function(e){return"video"===e.type||t(e)},r.normalizeNode=function(e){var t=OY(e,2),o=t[0],i=t[1];return"video"===qy.getNodeType(o)&&qy.isLastNode(r,o)&&on.insertNodes(r,qy.genEmptyParagraph(),{at:[i[0]+1]}),n([o,i])},r}};TC("en",{uploadImgModule:{uploadImage:"Upload Image",uploadError:"{{fileName}} upload error"}}),TC("zh-CN",{uploadImgModule:{uploadImage:"上传图片",uploadError:"{{fileName}} 上传出错"}});var K4="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Y4(e){var t={exports:{}};return e(t,t.exports),t.exports}var X4,Z4,J4=function(e){return e&&e.Math==Math&&e},Q4=J4("object"==typeof globalThis&&globalThis)||J4("object"==typeof window&&window)||J4("object"==typeof self&&self)||J4("object"==typeof K4&&K4)||function(){return this}()||Function("return this")(),e6=function(e){try{return!!e()}catch(t){return!0}},t6=!e6((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),n6=Function.prototype.call,r6=n6.bind?n6.bind(n6):function(){return n6.apply(n6,arguments)},o6={}.propertyIsEnumerable,i6=Object.getOwnPropertyDescriptor,a6={f:i6&&!o6.call({1:2},1)?function(e){var t=i6(this,e);return!!t&&t.enumerable}:o6},u6=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},s6=Function.prototype,l6=s6.bind,c6=s6.call,f6=l6&&l6.bind(c6),d6=l6?function(e){return e&&f6(c6,e)}:function(e){return e&&function(){return c6.apply(e,arguments)}},p6=d6({}.toString),h6=d6("".slice),g6=function(e){return h6(p6(e),8,-1)},v6=Q4.Object,y6=d6("".split),m6=e6((function(){return!v6("z").propertyIsEnumerable(0)}))?function(e){return"String"==g6(e)?y6(e,""):v6(e)}:v6,b6=Q4.TypeError,w6=function(e){if(null==e)throw b6("Can't call method on "+e);return e},E6=function(e){return m6(w6(e))},D6=function(e){return"function"==typeof e},C6=function(e){return"object"==typeof e?null!==e:D6(e)},x6=function(e){return D6(e)?e:void 0},S6=function(e,t){return arguments.length<2?x6(Q4[e]):Q4[e]&&Q4[e][t]},A6=d6({}.isPrototypeOf),O6=S6("navigator","userAgent")||"",k6=Q4.process,B6=Q4.Deno,F6=k6&&k6.versions||B6&&B6.version,T6=F6&&F6.v8;T6&&(Z4=(X4=T6.split("."))[0]>0&&X4[0]<4?1:+(X4[0]+X4[1])),!Z4&&O6&&(!(X4=O6.match(/Edge\/(\d+)/))||X4[1]>=74)&&(X4=O6.match(/Chrome\/(\d+)/))&&(Z4=+X4[1]);var _6=Z4,P6=!!Object.getOwnPropertySymbols&&!e6((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&_6&&_6<41})),j6=P6&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,N6=Q4.Object,I6=j6?function(e){return"symbol"==typeof e}:function(e){var t=S6("Symbol");return D6(t)&&A6(t.prototype,N6(e))},L6=Q4.String,R6=function(e){try{return L6(e)}catch(t){return"Object"}},M6=Q4.TypeError,z6=function(e){if(D6(e))return e;throw M6(R6(e)+" is not a function")},$6=function(e,t){var n=e[t];return null==n?void 0:z6(n)},H6=Q4.TypeError,V6=Object.defineProperty,U6=function(e,t){try{V6(Q4,e,{value:t,configurable:!0,writable:!0})}catch(rY){Q4[e]=t}return t},W6=Q4["__core-js_shared__"]||U6("__core-js_shared__",{}),q6=Y4((function(e){(e.exports=function(e,t){return W6[e]||(W6[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),G6=Q4.Object,K6=function(e){return G6(w6(e))},Y6=d6({}.hasOwnProperty),X6=Object.hasOwn||function(e,t){return Y6(K6(e),t)},Z6=0,J6=Math.random(),Q6=d6(1..toString),e3=function(e){return"Symbol("+(void 0===e?"":e)+")_"+Q6(++Z6+J6,36)},t3=q6("wks"),n3=Q4.Symbol,r3=n3&&n3.for,o3=j6?n3:n3&&n3.withoutSetter||e3,i3=function(e){if(!X6(t3,e)||!P6&&"string"!=typeof t3[e]){var t="Symbol."+e;P6&&X6(n3,e)?t3[e]=n3[e]:t3[e]=j6&&r3?r3(t):o3(t)}return t3[e]},a3=Q4.TypeError,u3=i3("toPrimitive"),s3=function(e){var t=function(e,t){if(!C6(e)||I6(e))return e;var n,r=$6(e,u3);if(r){if(void 0===t&&(t="default"),n=r6(r,e,t),!C6(n)||I6(n))return n;throw a3("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&D6(n=e.toString)&&!C6(r=r6(n,e)))return r;if(D6(n=e.valueOf)&&!C6(r=r6(n,e)))return r;if("string"!==t&&D6(n=e.toString)&&!C6(r=r6(n,e)))return r;throw H6("Can't convert object to primitive value")}(e,t)}(e,"string");return I6(t)?t:t+""},l3=Q4.document,c3=C6(l3)&&C6(l3.createElement),f3=function(e){return c3?l3.createElement(e):{}},d3=!t6&&!e6((function(){return 7!=Object.defineProperty(f3("div"),"a",{get:function(){return 7}}).a})),p3=Object.getOwnPropertyDescriptor,h3={f:t6?p3:function(e,t){if(e=E6(e),t=s3(t),d3)try{return p3(e,t)}catch(n){}if(X6(e,t))return u6(!r6(a6.f,e,t),e[t])}},g3=Q4.String,v3=Q4.TypeError,y3=function(e){if(C6(e))return e;throw v3(g3(e)+" is not an object")},m3=Q4.TypeError,b3=Object.defineProperty,w3={f:t6?b3:function(e,t,n){if(y3(e),t=s3(t),y3(n),d3)try{return b3(e,t,n)}catch(r){}if("get"in n||"set"in n)throw m3("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},E3=t6?function(e,t,n){return w3.f(e,t,u6(1,n))}:function(e,t,n){return e[t]=n,e},D3=d6(Function.toString);D6(W6.inspectSource)||(W6.inspectSource=function(e){return D3(e)});var C3,x3,S3,A3=W6.inspectSource,O3=Q4.WeakMap,k3=D6(O3)&&/native code/.test(A3(O3)),B3=q6("keys"),F3=function(e){return B3[e]||(B3[e]=e3(e))},T3={},_3=Q4.TypeError,P3=Q4.WeakMap;if(k3||W6.state){var j3=W6.state||(W6.state=new P3),N3=d6(j3.get),I3=d6(j3.has),L3=d6(j3.set);C3=function(e,t){if(I3(j3,e))throw new _3("Object already initialized");return t.facade=e,L3(j3,e,t),t},x3=function(e){return N3(j3,e)||{}},S3=function(e){return I3(j3,e)}}else{var R3=F3("state");T3[R3]=!0,C3=function(e,t){if(X6(e,R3))throw new _3("Object already initialized");return t.facade=e,E3(e,R3,t),t},x3=function(e){return X6(e,R3)?e[R3]:{}},S3=function(e){return X6(e,R3)}}var M3={set:C3,get:x3,has:S3,enforce:function(e){return S3(e)?x3(e):C3(e,{})},getterFor:function(e){return function(t){var n;if(!C6(t)||(n=x3(t)).type!==e)throw _3("Incompatible receiver, "+e+" required");return n}}},z3=Function.prototype,$3=t6&&Object.getOwnPropertyDescriptor,H3=X6(z3,"name"),V3={EXISTS:H3,PROPER:H3&&"something"===function(){}.name,CONFIGURABLE:H3&&(!t6||t6&&$3(z3,"name").configurable)},U3=Y4((function(e){var t=V3.CONFIGURABLE,n=M3.get,r=M3.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;D6(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!X6(i,"name")||t&&i.name!==f)&&E3(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==Q4?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:E3(e,n,i)):l?e[n]=i:U6(n,i)})(Function.prototype,"toString",(function(){return D6(this)&&n(this).source||A3(this)}))})),W3=Math.ceil,q3=Math.floor,G3=function(e){var t=+e;return t!=t||0===t?0:(t>0?q3:W3)(t)},K3=Math.max,Y3=Math.min,X3=function(e,t){var n=G3(e);return n<0?K3(n+t,0):Y3(n,t)},Z3=Math.min,J3=function(e){return e>0?Z3(G3(e),9007199254740991):0},Q3=function(e){return J3(e.length)},e5=function(e){return function(t,n,r){var o,i=E6(t),a=Q3(i),u=X3(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},t5=(e5(!0),e5(!1)),n5=d6([].push),r5=function(e,t){var n,r=E6(e),o=0,i=[];for(n in r)!X6(T3,n)&&X6(r,n)&&n5(i,n);for(;t.length>o;)X6(r,n=t[o++])&&(~t5(i,n)||n5(i,n));return i},o5=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],i5=o5.concat("length","prototype"),a5={f:Object.getOwnPropertyNames||function(e){return r5(e,i5)}},u5={f:Object.getOwnPropertySymbols},s5=d6([].concat),l5=S6("Reflect","ownKeys")||function(e){var t=a5.f(y3(e)),n=u5.f;return n?s5(t,n(e)):t},c5=function(e,t){for(var n=l5(t),r=w3.f,o=h3.f,i=0;i<n.length;i++){var a=n[i];X6(e,a)||r(e,a,o(t,a))}},f5=/#|\.prototype\./,d5=function(e,t){var n=h5[p5(e)];return n==v5||n!=g5&&(D6(t)?e6(t):!!t)},p5=d5.normalize=function(e){return String(e).replace(f5,".").toLowerCase()},h5=d5.data={},g5=d5.NATIVE="N",v5=d5.POLYFILL="P",y5=d5,m5=h3.f,b5=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?Q4:l?Q4[u]||U6(u,{}):(Q4[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=m5(n,r))&&a.value:n[r],!y5(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;c5(i,o)}(e.sham||o&&o.sham)&&E3(i,"sham",!0),U3(n,r,i,e)}},w5=Array.isArray||function(e){return"Array"==g6(e)},E5={};E5[i3("toStringTag")]="z";var D5="[object z]"===String(E5),C5=i3("toStringTag"),x5=Q4.Object,S5="Arguments"==g6(function(){return arguments}()),A5=D5?g6:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=x5(e),C5))?n:S5?g6(t):"Object"==(r=g6(t))&&D6(t.callee)?"Arguments":r},O5=function(){},k5=[],B5=S6("Reflect","construct"),F5=/^\s*(?:class|function)\b/,T5=d6(F5.exec),_5=!F5.exec(O5),P5=function(e){if(!D6(e))return!1;try{return B5(O5,k5,e),!0}catch(t){return!1}},j5=!B5||e6((function(){var e;return P5(P5.call)||!P5(Object)||!P5((function(){e=!0}))||e}))?function(e){if(!D6(e))return!1;switch(A5(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return _5||!!T5(F5,A3(e))}:P5,N5=function(e,t,n){var r=s3(t);r in e?w3.f(e,r,u6(0,n)):e[r]=n},I5=i3("species"),L5=d6([].slice),R5=("slice",_6>=51||!e6((function(){var e=[];return(e.constructor={})[I5]=function(){return{foo:1}},1!==e.slice(Boolean).foo}))),M5=i3("species"),z5=Q4.Array,$5=Math.max;b5({target:"Array",proto:!0,forced:!R5},{slice:function(e,t){var n,r,o,i=E6(this),a=Q3(i),u=X3(e,a),s=X3(void 0===t?a:t,a);if(w5(i)&&(n=i.constructor,(j5(n)&&(n===z5||w5(n.prototype))||C6(n)&&null===(n=n[M5]))&&(n=void 0),n===z5||void 0===n))return L5(i,u,s);for(r=new(void 0===n?z5:n)($5(s-u,0)),o=0;u<s;u++,o++)u in i&&N5(r,o,i[u]);return r.length=o,r}});var H5=D5?{}.toString:function(){return"[object "+A5(this)+"]"};D5||U3(Object.prototype,"toString",H5,{unsafe:!0});var V5,U5=Q4.String,W5=function(e){if("Symbol"===A5(e))throw TypeError("Cannot convert a Symbol value to a string");return U5(e)},q5=function(){var e=y3(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},G5=Q4.RegExp,K5=e6((function(){var e=G5("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),Y5=K5||e6((function(){return!G5("a","y").sticky})),X5={BROKEN_CARET:K5||e6((function(){var e=G5("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:Y5,UNSUPPORTED_Y:K5},Z5=Object.keys||function(e){return r5(e,o5)},J5=t6?Object.defineProperties:function(e,t){y3(e);for(var n,r=E6(t),o=Z5(t),i=o.length,a=0;i>a;)w3.f(e,n=o[a++],r[n]);return e},Q5=S6("document","documentElement"),e8=F3("IE_PROTO"),t8=function(){},n8=function(e){return"<script>"+e+"<\/script>"},r8=function(e){e.write(n8("")),e.close();var t=e.parentWindow.Object;return e=null,t},o8=function(){try{V5=new ActiveXObject("htmlfile")}catch(r){}var e,t;o8="undefined"!=typeof document?document.domain&&V5?r8(V5):((t=f3("iframe")).style.display="none",Q5.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(n8("document.F=Object")),e.close(),e.F):r8(V5);for(var n=o5.length;n--;)delete o8.prototype[o5[n]];return o8()};T3[e8]=!0;var i8,a8,u8=Object.create||function(e,t){var n;return null!==e?(t8.prototype=y3(e),n=new t8,t8.prototype=null,n[e8]=e):n=o8(),void 0===t?n:J5(n,t)},s8=Q4.RegExp,l8=e6((function(){var e=s8(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),c8=Q4.RegExp,f8=e6((function(){var e=c8("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),d8=M3.get,p8=q6("native-string-replace",String.prototype.replace),h8=RegExp.prototype.exec,g8=h8,v8=d6("".charAt),y8=d6("".indexOf),m8=d6("".replace),b8=d6("".slice),w8=(a8=/b*/g,r6(h8,i8=/a/,"a"),r6(h8,a8,"a"),0!==i8.lastIndex||0!==a8.lastIndex),E8=X5.BROKEN_CARET,D8=void 0!==/()??/.exec("")[1];(w8||D8||E8||l8||f8)&&(g8=function(e){var t,n,r,o,i,a,u,s=this,l=d8(s),c=W5(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=r6(g8,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=E8&&s.sticky,h=r6(q5,s),g=s.source,v=0,y=c;if(p&&(h=m8(h,"y",""),-1===y8(h,"g")&&(h+="g"),y=b8(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==v8(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),D8&&(n=new RegExp("^"+g+"$(?!\\s)",h)),w8&&(r=s.lastIndex),o=r6(h8,p?n:s,y),p?o?(o.input=b8(o.input,v),o[0]=b8(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:w8&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),D8&&o&&o.length>1&&r6(p8,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=u8(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var C8=g8;b5({target:"RegExp",proto:!0,forced:/./.exec!==C8},{exec:C8});var x8=Function.prototype,S8=x8.apply,A8=x8.bind,O8=x8.call,k8="object"==typeof Reflect&&Reflect.apply||(A8?O8.bind(S8):function(){return O8.apply(S8,arguments)}),B8=i3("species"),F8=RegExp.prototype,T8=i3("match"),_8=Q4.TypeError,P8=i3("species"),j8=function(e,t){var n,r=y3(e).constructor;return void 0===r||null==(n=y3(r)[P8])?t:function(e){if(j5(e))return e;throw _8(R6(e)+" is not a constructor")}(n)},N8=d6("".charAt),I8=d6("".charCodeAt),L8=d6("".slice),R8=function(e){return function(t,n){var r,o,i=W5(w6(t)),a=G3(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=I8(i,a))<55296||r>56319||a+1===u||(o=I8(i,a+1))<56320||o>57343?e?N8(i,a):r:e?L8(i,a,a+2):o-56320+(r-55296<<10)+65536}},M8={codeAt:R8(!1),charAt:R8(!0)},z8=M8.charAt,$8=function(e,t,n){return t+(n?z8(e,t).length:1)},H8=Q4.Array,V8=Math.max,U8=function(e,t,n){for(var r=Q3(e),o=X3(t,r),i=X3(void 0===n?r:n,r),a=H8(V8(i-o,0)),u=0;o<i;o++,u++)N5(a,u,e[o]);return a.length=u,a},W8=Q4.TypeError,q8=function(e,t){var n=e.exec;if(D6(n)){var r=r6(n,e,t);return null!==r&&y3(r),r}if("RegExp"===g6(e))return r6(C8,e,t);throw W8("RegExp#exec called on incompatible receiver")},G8=X5.UNSUPPORTED_Y,K8=Math.min,Y8=[].push,X8=d6(/./.exec),Z8=d6(Y8),J8=d6("".slice);!function(e,t,n,r){var o=i3(e),i=!e6((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!e6((function(){var e=!1,t=/a/;return(t={}).constructor={},t.constructor[B8]=function(){return t},t.flags="",t[o]=/./[o],t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=d6(/./[o]),s=function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=W5(w6(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!C6(r=e)||!(void 0!==(o=r[T8])?o:"RegExp"==g6(r)))return r6(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=r6(C8,p,i))&&!((s=p.lastIndex)>d&&(Z8(c,J8(i,d,u.index)),u.length>1&&u.index<i.length&&k8(Y8,c,U8(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&X8(p,"")||Z8(c,""):Z8(c,J8(i,d)),c.length>a?U8(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:r6(t,this,e,n)}:t,[function(t,n){var o=w6(this),i=null==t?void 0:$6(t,e);return i?r6(i,t,o,n):r6(r,W5(o),t,n)},function(e,o){var i=y3(this),a=W5(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=j8(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(G8?"g":"y"),f=new s(G8?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===q8(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=G8?0:h;var v,y=q8(f,G8?J8(a,h):a);if(null===y||(v=K8(J3(f.lastIndex+(G8?h:0)),a.length))===p)h=$8(a,h,l);else{if(Z8(g,J8(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(Z8(g,y[m]),g.length===d)return g;h=p=v}}return Z8(g,J8(a,p)),g}]}(o,""[e],(function(e,t,n,r,o){var a=d6(e),s=t.exec;return s===C8||s===F8.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));U3(String.prototype,e,s[0]),U3(F8,o,s[1])}r&&E3(F8[o],"sham",!0)}("split",0,!!e6((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),G8);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var Q8=function(){return Q8=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Q8.apply(this,arguments)};function e7(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function t7(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function n7(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){var i,a,u,s;i=r,a=o,u=(t=e[n](t)).done,s=t.value,Promise.resolve(s).then((function(e){i({value:e,done:u})}),a)}))}}}var r7=i3("unscopables"),o7=Array.prototype;null==o7[r7]&&w3.f(o7,r7,{configurable:!0,value:u8(null)});var i7,a7,u7,s7=function(e){o7[r7][e]=!0},l7={},c7=!e6((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),f7=F3("IE_PROTO"),d7=Q4.Object,p7=d7.prototype,h7=c7?d7.getPrototypeOf:function(e){var t=K6(e);if(X6(t,f7))return t[f7];var n=t.constructor;return D6(n)&&t instanceof n?n.prototype:t instanceof d7?p7:null},g7=i3("iterator"),v7=!1;[].keys&&("next"in(u7=[].keys())?(a7=h7(h7(u7)))!==Object.prototype&&(i7=a7):v7=!0);var y7=null==i7||e6((function(){var e={};return i7[g7].call(e)!==e}));y7&&(i7={}),D6(i7[g7])||U3(i7,g7,(function(){return this}));var m7={IteratorPrototype:i7,BUGGY_SAFARI_ITERATORS:v7},b7=w3.f,w7=i3("toStringTag"),E7=function(e,t,n){e&&!X6(e=n?e:e.prototype,w7)&&b7(e,w7,{configurable:!0,value:t})},D7=m7.IteratorPrototype,C7=function(){return this},x7=Q4.String,S7=Q4.TypeError,A7=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=d6(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return y3(n),function(e){if("object"==typeof e||D6(e))return e;throw S7("Can't set "+x7(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),O7=V3.PROPER,k7=V3.CONFIGURABLE,B7=m7.IteratorPrototype,F7=m7.BUGGY_SAFARI_ITERATORS,T7=i3("iterator"),_7=function(){return this},P7=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=u8(D7,{next:u6(1,s)}),E7(u,l,!1),l7[l]=C7;var c,f,d,p=function(e){if(e===o&&m)return m;if(!F7&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[T7]||v["@@iterator"]||o&&v[o],m=!F7&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=h7(b.call(new e)))!==Object.prototype&&c.next&&(h7(c)!==B7&&(A7?A7(c,B7):D6(c[T7])||U3(c,T7,_7)),E7(c,h,!0)),O7&&"values"==o&&y&&"values"!==y.name&&(k7?E3(v,"name","values"):(g=!0,m=function(){return r6(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(F7||g||!(d in v))&&U3(v,d,f[d]);else b5({target:t,proto:!0,forced:F7||g},f);return v[T7]!==m&&U3(v,T7,m,{name:o}),l7[t]=m,f},j7=M3.set,N7=M3.getterFor("Array Iterator"),I7=P7(Array,"Array",(function(e,t){j7(this,{type:"Array Iterator",target:E6(e),index:0,kind:t})}),(function(){var e=N7(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");l7.Arguments=l7.Array,s7("keys"),s7("values"),s7("entries");var L7=M8.charAt,R7=M3.set,M7=M3.getterFor("String Iterator");P7(String,"String",(function(e){R7(this,{type:"String Iterator",string:W5(e),index:0})}),(function(){var e,t=M7(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=L7(n,r),t.index+=e.length,{value:e,done:!1})}));var z7=function(e,t,n){for(var r in t)U3(e,r,t[r],n);return e},$7=a5.f,H7="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],V7={f:function(e){return H7&&"Window"==g6(e)?function(e){try{return $7(e)}catch(t){return U8(H7)}}(e):$7(E6(e))}},U7=e6((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),W7=Object.isExtensible,q7=e6((function(){W7(1)}))||U7?function(e){return!!C6(e)&&(!U7||"ArrayBuffer"!=g6(e))&&(!W7||W7(e))}:W7,G7=!e6((function(){return Object.isExtensible(Object.preventExtensions({}))})),K7=Y4((function(e){var t=w3.f,n=!1,r=e3("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=a5.f,t=d6([].splice),o={};o[r]=1,e(o).length&&(a5.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},b5({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:V7.f}))},fastKey:function(e,t){if(!C6(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!X6(e,r)){if(!q7(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!X6(e,r)){if(!q7(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return G7&&n&&q7(e)&&!X6(e,r)&&i(e),e}};T3[r]=!0})),Y7=d6(d6.bind),X7=function(e,t){return z6(e),void 0===t?e:Y7?Y7(e,t):function(){return e.apply(t,arguments)}},Z7=i3("iterator"),J7=Array.prototype,Q7=i3("iterator"),e9=function(e){if(null!=e)return $6(e,Q7)||$6(e,"@@iterator")||l7[A5(e)]},t9=Q4.TypeError,n9=function(e,t,n){var r,o;y3(e);try{if(!(r=$6(e,"return"))){if("throw"===t)throw n;return n}r=r6(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return y3(r),n},r9=Q4.TypeError,o9=function(e,t){this.stopped=e,this.result=t},i9=o9.prototype,a9=function(e,t,n){var r,o,i,a,u,s,l,c,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),g=X7(t,f),v=function(e){return r&&n9(r,"normal",e),new o9(!0,e)},y=function(e){return d?(y3(e),h?g(e[0],e[1],v):g(e[0],e[1])):h?g(e,v):g(e)};if(p)r=e;else{if(!(o=e9(e)))throw r9(R6(e)+" is not iterable");if(void 0!==(c=o)&&(l7.Array===c||J7[Z7]===c)){for(i=0,a=Q3(e);a>i;i++)if((u=y(e[i]))&&A6(i9,u))return u;return new o9(!1)}r=function(e,t){var n=arguments.length<2?e9(e):t;if(z6(n))return y3(r6(n,e));throw t9(R6(e)+" is not iterable")}(e,o)}for(s=r.next;!(l=r6(s,r)).done;){try{u=y(l.value)}catch(m){n9(r,"throw",m)}if("object"==typeof u&&u&&A6(i9,u))return u}return new o9(!1)},u9=Q4.TypeError,s9=function(e,t){if(A6(t,e))return e;throw u9("Incorrect invocation")},l9=i3("iterator"),c9=!1;try{var f9=0,d9={next:function(){return{done:!!f9++}},return:function(){c9=!0}};d9[l9]=function(){return this},Array.from(d9,(function(){throw 2}))}catch(tg){}var p9=function(e,t){if(!t&&!c9)return!1;var n=!1;try{var r={};r[l9]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},h9=i3("species"),g9=Q4.Array,v9=function(e,t){return new(w5(n=e)&&(r=n.constructor,(j5(r)&&(r===g9||w5(r.prototype))||C6(r)&&null===(r=r[h9]))&&(r=void 0)),void 0===r?g9:r)(0===t?0:t);var n,r},y9=d6([].push),m9=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=K6(s),g=m6(h),v=X7(l,c),y=Q3(g),m=0,b=f||v9,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:y9(w,d)}else switch(e){case 4:return!1;case 7:y9(w,d)}return i?-1:r||o?o:w}},b9={forEach:m9(0),map:m9(1),filter:m9(2),some:m9(3),every:m9(4),find:m9(5),findIndex:m9(6),filterReject:m9(7)},w9=K7.getWeakData,E9=M3.set,D9=M3.getterFor,C9=b9.find,x9=b9.findIndex,S9=d6([].splice),A9=0,O9=function(e){return e.frozen||(e.frozen=new k9)},k9=function(){this.entries=[]},B9=function(e,t){return C9(e.entries,(function(e){return e[0]===t}))};k9.prototype={get:function(e){var t=B9(this,e);if(t)return t[1]},has:function(e){return!!B9(this,e)},set:function(e,t){var n=B9(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=x9(this.entries,(function(t){return t[0]===e}));return~t&&S9(this.entries,t,1),!!~t}};var F9,T9={getConstructor:function(e,t,n,r){var o=e((function(e,o){s9(e,i),E9(e,{type:t,id:A9++,frozen:void 0}),null!=o&&a9(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=D9(t),u=function(e,t,n){var r=a(e),o=w9(y3(t),!0);return!0===o?O9(r).set(t,n):o[r.id]=n,e};return z7(i,{delete:function(e){var t=a(this);if(!C6(e))return!1;var n=w9(e);return!0===n?O9(t).delete(e):n&&X6(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!C6(e))return!1;var n=w9(e);return!0===n?O9(t).has(e):n&&X6(n,t.id)}}),z7(i,n?{get:function(e){var t=a(this);if(C6(e)){var n=w9(e);return!0===n?O9(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},_9=M3.enforce,P9=!Q4.ActiveXObject&&"ActiveXObject"in Q4,j9=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},N9=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=Q4[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=d6(u[e]);U3(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!C6(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!C6(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!C6(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(y5(e,!D6(a)||!(o||u.forEach&&!e6((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),K7.enable();else if(y5(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=e6((function(){f.has(1)})),h=p9((function(e){new a(e)})),g=!o&&e6((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){s9(e,u);var n,o,l,c,f,d=(n=new a,o=e,l=s,A7&&D6(c=o.constructor)&&c!==l&&C6(f=c.prototype)&&f!==l.prototype&&A7(n,f),n);return null!=t&&a9(t,d[i],{that:d,AS_ENTRIES:r}),d}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,b5({global:!0,forced:s!=a},l),E7(s,e),o||n.setStrong(s,e,r),s}("WeakMap",j9,T9);if(k3&&P9){F9=T9.getConstructor(j9,"WeakMap",!0),K7.enable();var I9=N9.prototype,L9=d6(I9.delete),R9=d6(I9.has),M9=d6(I9.get),z9=d6(I9.set);z7(I9,{delete:function(e){if(C6(e)&&!q7(e)){var t=_9(this);return t.frozen||(t.frozen=new F9),L9(this,e)||t.frozen.delete(e)}return L9(this,e)},has:function(e){if(C6(e)&&!q7(e)){var t=_9(this);return t.frozen||(t.frozen=new F9),R9(this,e)||t.frozen.has(e)}return R9(this,e)},get:function(e){if(C6(e)&&!q7(e)){var t=_9(this);return t.frozen||(t.frozen=new F9),R9(this,e)?M9(this,e):t.frozen.get(e)}return M9(this,e)},set:function(e,t){if(C6(e)&&!q7(e)){var n=_9(this);n.frozen||(n.frozen=new F9),R9(this,e)?z9(this,e,t):n.frozen.set(e,t)}else z9(this,e,t);return this}})}var $9={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},H9=f3("span").classList,V9=H9&&H9.constructor&&H9.constructor.prototype,U9=V9===Object.prototype?void 0:V9,W9=i3("iterator"),q9=i3("toStringTag"),G9=I7.values,K9=function(e,t){if(e){if(e[W9]!==G9)try{E3(e,W9,G9)}catch(r){e[W9]=G9}if(e[q9]||E3(e,q9,t),$9[t])for(var n in I7)if(e[n]!==I7[n])try{E3(e,n,I7[n])}catch(r){e[n]=I7[n]}}};for(var Y9 in $9)K9(Q4[Y9]&&Q4[Y9].prototype,Y9);K9(U9,"DOMTokenList");var X9=function(e,t){var n=[][e];return!!n&&e6((function(){n.call(null,t||function(){throw 1},1)}))},Z9=b9.forEach,J9=X9("forEach")?[].forEach:function(e){return Z9(this,e,arguments.length>1?arguments[1]:void 0)},Q9=function(e){if(e&&e.forEach!==J9)try{E3(e,"forEach",J9)}catch(eg){e.forEach=J9}};for(var eee in $9)$9[eee]&&Q9(Q4[eee]&&Q4[eee].prototype);Q9(U9);var tee,nee,ree,oee,iee=Q4.Promise,aee=i3("species"),uee=/(?:ipad|iphone|ipod).*applewebkit/i.test(O6),see="process"==g6(Q4.process),lee=Q4.setImmediate,cee=Q4.clearImmediate,fee=Q4.process,dee=Q4.Dispatch,pee=Q4.Function,hee=Q4.MessageChannel,gee=Q4.String,vee=0,yee={};try{tee=Q4.location}catch(tg){}var mee=function(e){if(X6(yee,e)){var t=yee[e];delete yee[e],t()}},bee=function(e){return function(){mee(e)}},wee=function(e){mee(e.data)},Eee=function(e){Q4.postMessage(gee(e),tee.protocol+"//"+tee.host)};lee&&cee||(lee=function(e){var t=L5(arguments,1);return yee[++vee]=function(){k8(D6(e)?e:pee(e),void 0,t)},nee(vee),vee},cee=function(e){delete yee[e]},see?nee=function(e){fee.nextTick(bee(e))}:dee&&dee.now?nee=function(e){dee.now(bee(e))}:hee&&!uee?(oee=(ree=new hee).port2,ree.port1.onmessage=wee,nee=X7(oee.postMessage,oee)):Q4.addEventListener&&D6(Q4.postMessage)&&!Q4.importScripts&&tee&&"file:"!==tee.protocol&&!e6(Eee)?(nee=Eee,Q4.addEventListener("message",wee,!1)):nee="onreadystatechange"in f3("script")?function(e){Q5.appendChild(f3("script")).onreadystatechange=function(){Q5.removeChild(this),mee(e)}}:function(e){setTimeout(bee(e),0)});var Dee,Cee,xee,See,Aee,Oee,kee,Bee,Fee={set:lee,clear:cee},Tee=/ipad|iphone|ipod/i.test(O6)&&void 0!==Q4.Pebble,_ee=/web0s(?!.*chrome)/i.test(O6),Pee=h3.f,jee=Fee.set,Nee=Q4.MutationObserver||Q4.WebKitMutationObserver,Iee=Q4.document,Lee=Q4.process,Ree=Q4.Promise,Mee=Pee(Q4,"queueMicrotask"),zee=Mee&&Mee.value;zee||(Dee=function(){var e,t;for(see&&(e=Lee.domain)&&e.exit();Cee;){t=Cee.fn,Cee=Cee.next;try{t()}catch(n){throw Cee?See():xee=void 0,n}}xee=void 0,e&&e.enter()},uee||see||_ee||!Nee||!Iee?!Tee&&Ree&&Ree.resolve?((kee=Ree.resolve(void 0)).constructor=Ree,Bee=X7(kee.then,kee),See=function(){Bee(Dee)}):see?See=function(){Lee.nextTick(Dee)}:(jee=X7(jee,Q4),See=function(){jee(Dee)}):(Aee=!0,Oee=Iee.createTextNode(""),new Nee(Dee).observe(Oee,{characterData:!0}),See=function(){Oee.data=Aee=!Aee}));var $ee,Hee,Vee,Uee,Wee=zee||function(e){var t={fn:e,next:void 0};xee&&(xee.next=t),Cee||(Cee=t,See()),xee=t},qee=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=z6(t),this.reject=z6(n)},Gee={f:function(e){return new qee(e)}},Kee=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},Yee="object"==typeof window,Xee=Fee.set,Zee=i3("species"),Jee="Promise",Qee=M3.getterFor(Jee),ete=M3.set,tte=M3.getterFor(Jee),nte=iee&&iee.prototype,rte=iee,ote=nte,ite=Q4.TypeError,ate=Q4.document,ute=Q4.process,ste=Gee.f,lte=ste,cte=!!(ate&&ate.createEvent&&Q4.dispatchEvent),fte=D6(Q4.PromiseRejectionEvent),dte=!1,pte=y5(Jee,(function(){var e=A3(rte),t=e!==String(rte);if(!t&&66===_6)return!0;if(_6>=51&&/native code/.test(e))return!1;var n=new rte((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[Zee]=r,!(dte=n.then((function(){}))instanceof r)||!t&&Yee&&!fte})),hte=pte||!p9((function(e){rte.all(e).catch((function(){}))})),gte=function(e){var t;return!(!C6(e)||!D6(t=e.then))&&t},vte=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;Wee((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&wte(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(ite("Promise-chain cycle")):(u=gte(a))?r6(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&mte(e)}))}},yte=function(e,t,n){var r,o;cte?((r=ate.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),Q4.dispatchEvent(r)):r={promise:t,reason:n},!fte&&(o=Q4["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=Q4.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},mte=function(e){r6(Xee,Q4,(function(){var t,n=e.facade,r=e.value;if(bte(e)&&(t=Kee((function(){see?ute.emit("unhandledRejection",r,n):yte("unhandledrejection",n,r)})),e.rejection=see||bte(e)?2:1,t.error))throw t.value}))},bte=function(e){return 1!==e.rejection&&!e.parent},wte=function(e){r6(Xee,Q4,(function(){var t=e.facade;see?ute.emit("rejectionHandled",t):yte("rejectionhandled",t,e.value)}))},Ete=function(e,t,n){return function(r){e(t,r,n)}},Dte=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,vte(e,!0))},Cte=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw ite("Promise can't be resolved itself");var r=gte(t);r?Wee((function(){var n={done:!1};try{r6(r,t,Ete(Cte,n,e),Ete(Dte,n,e))}catch(o){Dte(n,o,e)}})):(e.value=t,e.state=1,vte(e,!1))}catch(o){Dte({done:!1},o,e)}}};if(pte&&(ote=(rte=function(e){s9(this,ote),z6(e),r6($ee,this);var t=Qee(this);try{e(Ete(Cte,t),Ete(Dte,t))}catch(n){Dte(t,n)}}).prototype,($ee=function(e){ete(this,{type:Jee,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=z7(ote,{then:function(e,t){var n=tte(this),r=n.reactions,o=ste(j8(this,rte));return o.ok=!D6(e)||e,o.fail=D6(t)&&t,o.domain=see?ute.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&vte(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),Hee=function(){var e=new $ee,t=Qee(e);this.promise=e,this.resolve=Ete(Cte,t),this.reject=Ete(Dte,t)},Gee.f=ste=function(e){return e===rte||e===Vee?new Hee(e):lte(e)},D6(iee)&&nte!==Object.prototype)){Uee=nte.then,dte||(U3(nte,"then",(function(e,t){var n=this;return new rte((function(e,t){r6(Uee,n,e,t)})).then(e,t)}),{unsafe:!0}),U3(nte,"catch",ote.catch,{unsafe:!0}));try{delete nte.constructor}catch(tg){}A7&&A7(nte,ote)}b5({global:!0,wrap:!0,forced:pte},{Promise:rte}),E7(rte,Jee,!1),function(e){var t=S6("Promise"),n=w3.f;t6&&t&&!t[aee]&&n(t,aee,{configurable:!0,get:function(){return this}})}(),Vee=S6(Jee),b5({target:Jee,stat:!0,forced:pte},{reject:function(e){var t=ste(this);return r6(t.reject,void 0,e),t.promise}}),b5({target:Jee,stat:!0,forced:pte},{resolve:function(e){return function(e,t){if(y3(e),C6(t)&&t.constructor===e)return t;var n=Gee.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),b5({target:Jee,stat:!0,forced:hte},{all:function(e){var t=this,n=ste(t),r=n.resolve,o=n.reject,i=Kee((function(){var n=z6(t.resolve),i=[],a=0,u=1;a9(e,(function(e){var s=a++,l=!1;u++,r6(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=ste(t),r=n.reject,o=Kee((function(){var o=z6(t.resolve);a9(e,(function(e){r6(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var xte=V3.PROPER,Ste=RegExp.prototype,Ate=Ste.toString,Ote=d6(q5),kte=e6((function(){return"/a/b"!=Ate.call({source:"a",flags:"b"})})),Bte=xte&&"toString"!=Ate.name;(kte||Bte)&&U3(RegExp.prototype,"toString",(function(){var e=y3(this),t=W5(e.source),n=e.flags;return"/"+t+"/"+W5(void 0===n&&A6(Ste,e)&&!("flags"in Ste)?Ote(e):n)}),{unsafe:!0});var Fte=V3.EXISTS,Tte=w3.f,_te=Function.prototype,Pte=d6(_te.toString),jte=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,Nte=d6(jte.exec);t6&&!Fte&&Tte(_te,"name",{configurable:!0,get:function(){try{return Nte(jte,Pte(this))[1]}catch(tg){return""}}});var Ite=new WeakMap;function Lte(e){return e.getMenuConfig("uploadImage")}function Rte(e,t){return e7(this,void 0,void 0,(function(){return t7(this,(function(n){return[2,new Promise((function(n){var r=new FileReader;r.readAsDataURL(t),r.onload=function(){var o=r.result;if(o){var i=o.toString(),a=0===i.indexOf("data:image")?"":i;cT(e,i,t.name,a),n("ok")}}}))]}))}))}function Mte(e,t){return e7(this,void 0,void 0,(function(){var n,r,o,i;return t7(this,(function(a){switch(a.label){case 0:return n=function(e){var t=Ite.get(e);if(null!=t)return t;var n=Lte(e),r=n.onSuccess,o=n.onProgress,i=n.onFailed,a=n.customInsert,u=n.onError;return t=zD(Q8(Q8({},n),{onProgress:function(t){e.showProgressBar(t),o&&o(t)},onSuccess:function(t,n){if(a)return a(n,(function(t,n,r){return cT(e,t,n,r)})),void r(t,n);var o=n.errno,u=void 0===o?1:o,s=n.data,l=void 0===s?{}:s;if(0===u){if(Array.isArray(l))l.forEach((function(t){var n=t.url,r=void 0===n?"":n,o=t.alt,i=void 0===o?"":o,a=t.href;cT(e,r,i,void 0===a?"":a)}));else{var c=l.url,f=void 0===c?"":c,d=l.alt,p=void 0===d?"":d,h=l.href;cT(e,f,p,void 0===h?"":h)}r(t,n)}else i(t,n)},onError:function(e,t,n){u(e,t,n)}})),Ite.set(e,t),t}(e),r=t.name,o=t.type,i=t.size,n.addFile({name:r,type:o,size:i,data:t}),[4,n.upload()];case 1:return a.sent(),[2]}}))}))}function zte(e,t){var n,r;return e7(this,void 0,void 0,(function(){var o,i,a,u,s,l,c,f,d;return t7(this,(function(p){switch(p.label){case 0:if(null==t)return[2];o=Array.prototype.slice.call(t),i=Lte(e),a=i.customUpload,u=i.base64LimitSize,p.label=1;case 1:p.trys.push([1,11,12,17]),s=n7(o),p.label=2;case 2:return[4,s.next()];case 3:return(l=p.sent()).done?[3,10]:(c=l.value,f=c.size,u&&f<=u?[4,Rte(e,c)]:[3,5]);case 4:return p.sent(),[3,9];case 5:return a?[4,a(c,(function(t,n,r){return cT(e,t,n,r)}))]:[3,7];case 6:return p.sent(),[3,9];case 7:return[4,Mte(e,c)];case 8:p.sent(),p.label=9;case 9:return[3,2];case 10:return[3,17];case 11:return d=p.sent(),n={error:d},[3,17];case 12:return p.trys.push([12,,15,16]),l&&!l.done&&(r=s.return)?[4,r.call(s)]:[3,14];case 13:p.sent(),p.label=14;case 14:return[3,16];case 15:if(n)throw n.error;return[7];case 16:return[7];case 17:return[2]}}))}))}var $te=d6([].join),Hte=m6!=Object,Vte=X9("join",",");b5({target:"Array",proto:!0,forced:Hte||!Vte},{join:function(e){return $te(E6(this),void 0===e?",":e)}}),Xr&&(Br.fn.append=Xr),Lr&&(Br.fn.on=Lr),no&&(Br.fn.remove=no),Ir&&(Br.fn.val=Ir),ao&&(Br.fn.click=ao),Hr&&(Br.fn.hide=Hr);var Ute=function(){function e(){this.title=_C("uploadImgModule.uploadImage"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M828.708571 585.045333a48.761905 48.761905 0 0 0-48.737523 48.761905v18.529524l-72.143238-72.167619a135.972571 135.972571 0 0 0-191.585524 0l-34.133334 34.133333-120.880762-120.953905a138.898286 138.898286 0 0 0-191.585523 0l-72.167619 72.167619V292.400762a48.786286 48.786286 0 0 1 48.761904-48.761905h341.23581a48.737524 48.737524 0 0 0 34.474667-83.285333 48.737524 48.737524 0 0 0-34.474667-14.287238H146.236952A146.212571 146.212571 0 0 0 0 292.400762v585.289143A146.358857 146.358857 0 0 0 146.236952 1024h584.996572a146.212571 146.212571 0 0 0 146.236952-146.310095V633.807238a48.786286 48.786286 0 0 0-48.761905-48.761905zM146.261333 926.45181a48.737524 48.737524 0 0 1-48.761904-48.761905v-174.128762l141.409523-141.458286a38.497524 38.497524 0 0 1 53.126096 0l154.526476 154.624 209.627428 209.724953H146.236952z m633.734096-48.761905c-0.073143 9.337905-3.145143 18.383238-8.777143 25.843809l-219.843048-220.94019 34.133333-34.133334a37.546667 37.546667 0 0 1 53.613715 0l140.873143 141.897143V877.714286zM1009.615238 160.231619L863.329524 13.897143a48.737524 48.737524 0 0 0-16.091429-10.24c-11.849143-4.87619-25.161143-4.87619-37.059047 0a48.761905 48.761905 0 0 0-16.067048 10.24l-146.236952 146.334476a49.005714 49.005714 0 0 0 69.217523 69.241905l62.902858-63.390476v272.627809a48.761905 48.761905 0 1 0 97.475047 0V166.083048l62.902857 63.390476a48.737524 48.737524 0 0 0 69.217524 0 48.761905 48.761905 0 0 0 0-69.241905z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return fT(e)},e.prototype.getMenuConfig=function(e){return e.getMenuConfig("uploadImage")},e.prototype.exec=function(e,t){var n=this.getMenuConfig(e),r=n.allowedFileTypes,o=void 0===r?[]:r,i=n.customBrowseAndUpload;if(i)i((function(t,n,r){return cT(e,t,n,r)}));else{var a="";o.length>0&&(a='accept="'+o.join(", ")+'"');var u=Br("body"),s=Br('<input type="file" '+a+" multiple/>");s.hide(),u.append(s),s.click(),s.on("change",(function(){var t=s[0].files;zte(e,t)}))}},e}(),Wte={menus:[{key:"uploadImage",factory:function(){return new Ute},config:{server:"",fieldName:"wangeditor-uploaded-image",maxFileSize:2097152,maxNumberOfFiles:100,allowedFileTypes:["image/*"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:1e4,onBeforeUpload:function(e){return e},onProgress:function(e){},onSuccess:function(e,t){},onFailed:function(e,t){console.error("'"+e.name+"' upload failed",t)},onError:function(e,t,n){console.error("'"+e.name+"' upload error",n)},base64LimitSize:0}}],editorPlugin:function(e){var t=e.insertData,n=e;return n.insertData=function(r){if(fT(n))t(r);else if(r.getData("text/plain"))t(r);else{var o=r.files;o.length<=0?t(r):Array.prototype.slice.call(o).some((function(e){return"image"===function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}(e.type.split("/"),1)[0]}))?zte(e,o):t(r)}},n}};TC("en",{highLightModule:{selectLang:"Language"}}),TC("zh-CN",{highLightModule:{selectLang:"选择语言"}});var qte="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Gte(e){var t={exports:{}};return e(t,t.exports),t.exports}var Kte,Yte,Xte=function(e){return e&&e.Math==Math&&e},Zte=Xte("object"==typeof globalThis&&globalThis)||Xte("object"==typeof window&&window)||Xte("object"==typeof self&&self)||Xte("object"==typeof qte&&qte)||function(){return this}()||Function("return this")(),Jte=Object.defineProperty,Qte=function(e,t){try{Jte(Zte,e,{value:t,configurable:!0,writable:!0})}catch(rY){Zte[e]=t}return t},ene=Zte["__core-js_shared__"]||Qte("__core-js_shared__",{}),tne=Gte((function(e){(e.exports=function(e,t){return ene[e]||(ene[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),nne=Function.prototype,rne=nne.bind,one=nne.call,ine=rne&&rne.bind(one),ane=rne?function(e){return e&&ine(one,e)}:function(e){return e&&function(){return one.apply(e,arguments)}},une=Zte.TypeError,sne=function(e){if(null==e)throw une("Can't call method on "+e);return e},lne=Zte.Object,cne=function(e){return lne(sne(e))},fne=ane({}.hasOwnProperty),dne=Object.hasOwn||function(e,t){return fne(cne(e),t)},pne=0,hne=Math.random(),gne=ane(1..toString),vne=function(e){return"Symbol("+(void 0===e?"":e)+")_"+gne(++pne+hne,36)},yne=function(e){return"function"==typeof e},mne=function(e){return yne(e)?e:void 0},bne=function(e,t){return arguments.length<2?mne(Zte[e]):Zte[e]&&Zte[e][t]},wne=bne("navigator","userAgent")||"",Ene=Zte.process,Dne=Zte.Deno,Cne=Ene&&Ene.versions||Dne&&Dne.version,xne=Cne&&Cne.v8;xne&&(Yte=(Kte=xne.split("."))[0]>0&&Kte[0]<4?1:+(Kte[0]+Kte[1])),!Yte&&wne&&(!(Kte=wne.match(/Edge\/(\d+)/))||Kte[1]>=74)&&(Kte=wne.match(/Chrome\/(\d+)/))&&(Yte=+Kte[1]);var Sne=Yte,Ane=function(e){try{return!!e()}catch(t){return!0}},One=!!Object.getOwnPropertySymbols&&!Ane((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&Sne&&Sne<41})),kne=One&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Bne=tne("wks"),Fne=Zte.Symbol,Tne=Fne&&Fne.for,_ne=kne?Fne:Fne&&Fne.withoutSetter||vne,Pne=function(e){if(!dne(Bne,e)||!One&&"string"!=typeof Bne[e]){var t="Symbol."+e;One&&dne(Fne,e)?Bne[e]=Fne[e]:Bne[e]=kne&&Tne?Tne(t):_ne(t)}return Bne[e]},jne={};jne[Pne("toStringTag")]="z";var Nne="[object z]"===String(jne),Ine=!Ane((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),Lne=function(e){return"object"==typeof e?null!==e:yne(e)},Rne=Zte.document,Mne=Lne(Rne)&&Lne(Rne.createElement),zne=function(e){return Mne?Rne.createElement(e):{}},$ne=!Ine&&!Ane((function(){return 7!=Object.defineProperty(zne("div"),"a",{get:function(){return 7}}).a})),Hne=Zte.String,Vne=Zte.TypeError,Une=function(e){if(Lne(e))return e;throw Vne(Hne(e)+" is not an object")},Wne=Function.prototype.call,qne=Wne.bind?Wne.bind(Wne):function(){return Wne.apply(Wne,arguments)},Gne=ane({}.isPrototypeOf),Kne=Zte.Object,Yne=kne?function(e){return"symbol"==typeof e}:function(e){var t=bne("Symbol");return yne(t)&&Gne(t.prototype,Kne(e))},Xne=Zte.String,Zne=function(e){try{return Xne(e)}catch(t){return"Object"}},Jne=Zte.TypeError,Qne=function(e){if(yne(e))return e;throw Jne(Zne(e)+" is not a function")},ere=function(e,t){var n=e[t];return null==n?void 0:Qne(n)},tre=Zte.TypeError,nre=Zte.TypeError,rre=Pne("toPrimitive"),ore=function(e){var t=function(e,t){if(!Lne(e)||Yne(e))return e;var n,r=ere(e,rre);if(r){if(void 0===t&&(t="default"),n=qne(r,e,t),!Lne(n)||Yne(n))return n;throw nre("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&yne(n=e.toString)&&!Lne(r=qne(n,e)))return r;if(yne(n=e.valueOf)&&!Lne(r=qne(n,e)))return r;if("string"!==t&&yne(n=e.toString)&&!Lne(r=qne(n,e)))return r;throw tre("Can't convert object to primitive value")}(e,t)}(e,"string");return Yne(t)?t:t+""},ire=Zte.TypeError,are=Object.defineProperty,ure={f:Ine?are:function(e,t,n){if(Une(e),t=ore(t),Une(n),$ne)try{return are(e,t,n)}catch(r){}if("get"in n||"set"in n)throw ire("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},sre=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},lre=Ine?function(e,t,n){return ure.f(e,t,sre(1,n))}:function(e,t,n){return e[t]=n,e},cre=ane(Function.toString);yne(ene.inspectSource)||(ene.inspectSource=function(e){return cre(e)});var fre,dre,pre,hre=ene.inspectSource,gre=Zte.WeakMap,vre=yne(gre)&&/native code/.test(hre(gre)),yre=tne("keys"),mre=function(e){return yre[e]||(yre[e]=vne(e))},bre={},wre=Zte.TypeError,Ere=Zte.WeakMap;if(vre||ene.state){var Dre=ene.state||(ene.state=new Ere),Cre=ane(Dre.get),xre=ane(Dre.has),Sre=ane(Dre.set);fre=function(e,t){if(xre(Dre,e))throw new wre("Object already initialized");return t.facade=e,Sre(Dre,e,t),t},dre=function(e){return Cre(Dre,e)||{}},pre=function(e){return xre(Dre,e)}}else{var Are=mre("state");bre[Are]=!0,fre=function(e,t){if(dne(e,Are))throw new wre("Object already initialized");return t.facade=e,lre(e,Are,t),t},dre=function(e){return dne(e,Are)?e[Are]:{}},pre=function(e){return dne(e,Are)}}var Ore={set:fre,get:dre,has:pre,enforce:function(e){return pre(e)?dre(e):fre(e,{})},getterFor:function(e){return function(t){var n;if(!Lne(t)||(n=dre(t)).type!==e)throw wre("Incompatible receiver, "+e+" required");return n}}},kre=Function.prototype,Bre=Ine&&Object.getOwnPropertyDescriptor,Fre=dne(kre,"name"),Tre={EXISTS:Fre,PROPER:Fre&&"something"===function(){}.name,CONFIGURABLE:Fre&&(!Ine||Ine&&Bre(kre,"name").configurable)},_re=Gte((function(e){var t=Tre.CONFIGURABLE,n=Ore.get,r=Ore.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;yne(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!dne(i,"name")||t&&i.name!==f)&&lre(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==Zte?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:lre(e,n,i)):l?e[n]=i:Qte(n,i)})(Function.prototype,"toString",(function(){return yne(this)&&n(this).source||hre(this)}))})),Pre=ane({}.toString),jre=ane("".slice),Nre=function(e){return jre(Pre(e),8,-1)},Ire=Pne("toStringTag"),Lre=Zte.Object,Rre="Arguments"==Nre(function(){return arguments}()),Mre=Nne?Nre:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=Lre(e),Ire))?n:Rre?Nre(t):"Object"==(r=Nre(t))&&yne(t.callee)?"Arguments":r},zre=Nne?{}.toString:function(){return"[object "+Mre(this)+"]"};Nne||_re(Object.prototype,"toString",zre,{unsafe:!0});var $re,Hre={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Vre=zne("span").classList,Ure=Vre&&Vre.constructor&&Vre.constructor.prototype,Wre=Ure===Object.prototype?void 0:Ure,qre=ane(ane.bind),Gre=Zte.Object,Kre=ane("".split),Yre=Ane((function(){return!Gre("z").propertyIsEnumerable(0)}))?function(e){return"String"==Nre(e)?Kre(e,""):Gre(e)}:Gre,Xre=Math.ceil,Zre=Math.floor,Jre=function(e){var t=+e;return t!=t||0===t?0:(t>0?Zre:Xre)(t)},Qre=Math.min,eoe=function(e){return e>0?Qre(Jre(e),9007199254740991):0},toe=function(e){return eoe(e.length)},noe=Array.isArray||function(e){return"Array"==Nre(e)},roe=function(){},ooe=[],ioe=bne("Reflect","construct"),aoe=/^\s*(?:class|function)\b/,uoe=ane(aoe.exec),soe=!aoe.exec(roe),loe=function(e){if(!yne(e))return!1;try{return ioe(roe,ooe,e),!0}catch(t){return!1}},coe=!ioe||Ane((function(){var e;return loe(loe.call)||!loe(Object)||!loe((function(){e=!0}))||e}))?function(e){if(!yne(e))return!1;switch(Mre(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return soe||!!uoe(aoe,hre(e))}:loe,foe=Pne("species"),doe=Zte.Array,poe=function(e,t){return new(noe(n=e)&&(r=n.constructor,(coe(r)&&(r===doe||noe(r.prototype))||Lne(r)&&null===(r=r[foe]))&&(r=void 0)),void 0===r?doe:r)(0===t?0:t);var n,r},hoe=ane([].push),goe=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=cne(s),g=Yre(h),v=function(e,t){return Qne(e),void 0===t?e:qre?qre(e,t):function(){return e.apply(t,arguments)}}(l,c),y=toe(g),m=0,b=f||poe,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:hoe(w,d)}else switch(e){case 4:return!1;case 7:hoe(w,d)}return i?-1:r||o?o:w}},voe=[goe(0),goe(1),goe(2),goe(3),goe(4),goe(5),goe(6),goe(7)][0],yoe=($re=[].forEach)&&Ane((function(){$re.call(null,(function(){throw 1}),1)}))?[].forEach:function(e){return voe(this,e,arguments.length>1?arguments[1]:void 0)},moe=function(e){if(e&&e.forEach!==yoe)try{lre(e,"forEach",yoe)}catch(tg){e.forEach=yoe}};for(var boe in Hre)Hre[boe]&&moe(Zte[boe]&&Zte[boe].prototype);moe(Wre);var woe={}.propertyIsEnumerable,Eoe=Object.getOwnPropertyDescriptor,Doe={f:Eoe&&!woe.call({1:2},1)?function(e){var t=Eoe(this,e);return!!t&&t.enumerable}:woe},Coe=function(e){return Yre(sne(e))},xoe=Object.getOwnPropertyDescriptor,Soe={f:Ine?xoe:function(e,t){if(e=Coe(e),t=ore(t),$ne)try{return xoe(e,t)}catch(n){}if(dne(e,t))return sre(!qne(Doe.f,e,t),e[t])}},Aoe=Math.max,Ooe=Math.min,koe=function(e,t){var n=Jre(e);return n<0?Aoe(n+t,0):Ooe(n,t)},Boe=function(e){return function(t,n,r){var o,i=Coe(t),a=toe(i),u=koe(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},Foe=(Boe(!0),Boe(!1)),Toe=ane([].push),_oe=function(e,t){var n,r=Coe(e),o=0,i=[];for(n in r)!dne(bre,n)&&dne(r,n)&&Toe(i,n);for(;t.length>o;)dne(r,n=t[o++])&&(~Foe(i,n)||Toe(i,n));return i},Poe=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],joe=Poe.concat("length","prototype"),Noe={f:Object.getOwnPropertyNames||function(e){return _oe(e,joe)}},Ioe={f:Object.getOwnPropertySymbols},Loe=ane([].concat),Roe=bne("Reflect","ownKeys")||function(e){var t=Noe.f(Une(e)),n=Ioe.f;return n?Loe(t,n(e)):t},Moe=function(e,t){for(var n=Roe(t),r=ure.f,o=Soe.f,i=0;i<n.length;i++){var a=n[i];dne(e,a)||r(e,a,o(t,a))}},zoe=/#|\.prototype\./,$oe=function(e,t){var n=Voe[Hoe(e)];return n==Woe||n!=Uoe&&(yne(t)?Ane(t):!!t)},Hoe=$oe.normalize=function(e){return String(e).replace(zoe,".").toLowerCase()},Voe=$oe.data={},Uoe=$oe.NATIVE="N",Woe=$oe.POLYFILL="P",qoe=$oe,Goe=Soe.f,Koe=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?Zte:l?Zte[u]||Qte(u,{}):(Zte[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=Goe(n,r))&&a.value:n[r],!qoe(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;Moe(i,o)}(e.sham||o&&o.sham)&&lre(i,"sham",!0),_re(n,r,i,e)}},Yoe=Object.keys||function(e){return _oe(e,Poe)},Xoe=Object.assign,Zoe=Object.defineProperty,Joe=ane([].concat),Qoe=!Xoe||Ane((function(){if(Ine&&1!==Xoe({b:1},Xoe(Zoe({},"a",{enumerable:!0,get:function(){Zoe(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=Xoe({},e)[n]||Yoe(Xoe({},t)).join("")!=r}))?function(e,t){for(var n=cne(e),r=arguments.length,o=1,i=Ioe.f,a=Doe.f;r>o;)for(var u,s=Yre(arguments[o++]),l=i?Joe(Yoe(s),i(s)):Yoe(s),c=l.length,f=0;c>f;)u=l[f++],Ine&&!qne(a,s,u)||(n[u]=s[u]);return n}:Xoe;Koe({target:"Object",stat:!0,forced:Object.assign!==Qoe},{assign:Qoe});var eie=Gte((function(e){var t=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,n=0,r={},o={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function e(t){return t instanceof i?new i(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function e(t,n){var r,i;switch(n=n||{},o.util.type(t)){case"Object":if(i=o.util.objId(t),n[i])return n[i];for(var a in r={},n[i]=r,t)t.hasOwnProperty(a)&&(r[a]=e(t[a],n));return r;case"Array":return i=o.util.objId(t),n[i]?n[i]:(r=[],n[i]=r,t.forEach((function(t,o){r[o]=e(t,n)})),r);default:return t}},getLanguage:function(e){for(;e&&!t.test(e.className);)e=e.parentElement;return e?(e.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if("undefined"==typeof document)return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var e=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack)||[])[1];if(e){var t=document.getElementsByTagName("script");for(var n in t)if(t[n].src==e)return t[n]}return null}},isActive:function(e,t,n){for(var r="no-"+t;e;){var o=e.classList;if(o.contains(t))return!0;if(o.contains(r))return!1;e=e.parentElement}return!!n}},languages:{plain:r,plaintext:r,text:r,txt:r,extend:function(e,t){var n=o.util.clone(o.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var i=(r=r||o.languages)[e],a={};for(var u in i)if(i.hasOwnProperty(u)){if(u==t)for(var s in n)n.hasOwnProperty(s)&&(a[s]=n[s]);n.hasOwnProperty(u)||(a[u]=i[u])}var l=r[e];return r[e]=a,o.languages.DFS(o.languages,(function(t,n){n===l&&t!=e&&(this[t]=a)})),a},DFS:function e(t,n,r,i){i=i||{};var a=o.util.objId;for(var u in t)if(t.hasOwnProperty(u)){n.call(t,u,t[u],r||u);var s=t[u],l=o.util.type(s);"Object"!==l||i[a(s)]?"Array"!==l||i[a(s)]||(i[a(s)]=!0,e(s,n,u,i)):(i[a(s)]=!0,e(s,n,null,i))}}},plugins:{},highlightAll:function(e,t){o.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,container:e,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};o.hooks.run("before-highlightall",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),o.hooks.run("before-all-elements-highlight",r);for(var i,a=0;i=r.elements[a++];)o.highlightElement(i,!0===t,r.callback)},highlightElement:function(n,r,i){var a=o.util.getLanguage(n),u=o.languages[a];n.className=n.className.replace(t,"").replace(/\s+/g," ")+" language-"+a;var s=n.parentElement;s&&"pre"===s.nodeName.toLowerCase()&&(s.className=s.className.replace(t,"").replace(/\s+/g," ")+" language-"+a);var l={element:n,language:a,grammar:u,code:n.textContent};function c(e){l.highlightedCode=e,o.hooks.run("before-insert",l),l.element.innerHTML=l.highlightedCode,o.hooks.run("after-highlight",l),o.hooks.run("complete",l),i&&i.call(l.element)}if(o.hooks.run("before-sanity-check",l),(s=l.element.parentElement)&&"pre"===s.nodeName.toLowerCase()&&!s.hasAttribute("tabindex")&&s.setAttribute("tabindex","0"),!l.code)return o.hooks.run("complete",l),void(i&&i.call(l.element));if(o.hooks.run("before-highlight",l),l.grammar)if(r&&e.Worker){var f=new Worker(o.filename);f.onmessage=function(e){c(e.data)},f.postMessage(JSON.stringify({language:l.language,code:l.code,immediateClose:!0}))}else c(o.highlight(l.code,l.grammar,l.language));else c(o.util.encode(l.code))},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return o.hooks.run("before-tokenize",r),r.tokens=o.tokenize(r.code,r.grammar),o.hooks.run("after-tokenize",r),i.stringify(o.util.encode(r.tokens),r.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var r in n)t[r]=n[r];delete t.rest}var o=new s;return l(o,o.head,e),u(e,o,t,o.head,0),function(e){for(var t=[],n=e.head.next;n!==e.tail;)t.push(n.value),n=n.next;return t}(o)},hooks:{all:{},add:function(e,t){var n=o.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=o.hooks.all[e];if(n&&n.length)for(var r,i=0;r=n[i++];)r(t)}},Token:i};function i(e,t,n,r){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length}function a(e,t,n,r){e.lastIndex=t;var o=e.exec(n);if(o&&r&&o[1]){var i=o[1].length;o.index+=i,o[0]=o[0].slice(i)}return o}function u(e,t,n,r,s,f){for(var d in n)if(n.hasOwnProperty(d)&&n[d]){var p=n[d];p=Array.isArray(p)?p:[p];for(var h=0;h<p.length;++h){if(f&&f.cause==d+","+h)return;var g=p[h],v=g.inside,y=!!g.lookbehind,m=!!g.greedy,b=g.alias;if(m&&!g.pattern.global){var w=g.pattern.toString().match(/[imsuy]*$/)[0];g.pattern=RegExp(g.pattern.source,w+"g")}for(var E=g.pattern||g,D=r.next,C=s;D!==t.tail&&!(f&&C>=f.reach);C+=D.value.length,D=D.next){var x=D.value;if(t.length>e.length)return;if(!(x instanceof i)){var S,A=1;if(m){if(!(S=a(E,C,e,y)))break;var O=S.index,k=S.index+S[0].length,B=C;for(B+=D.value.length;O>=B;)B+=(D=D.next).value.length;if(C=B-=D.value.length,D.value instanceof i)continue;for(var F=D;F!==t.tail&&(B<k||"string"==typeof F.value);F=F.next)A++,B+=F.value.length;A--,x=e.slice(C,B),S.index-=C}else if(!(S=a(E,0,x,y)))continue;O=S.index;var T=S[0],_=x.slice(0,O),P=x.slice(O+T.length),j=C+x.length;f&&j>f.reach&&(f.reach=j);var N=D.prev;if(_&&(N=l(t,N,_),C+=_.length),c(t,N,A),D=l(t,N,new i(d,v?o.tokenize(T,v):T,b,T)),P&&l(t,D,P),A>1){var I={cause:d+","+h,reach:j};u(e,t,n,D.prev,C,I),f&&I.reach>f.reach&&(f.reach=I.reach)}}}}}}function s(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function l(e,t,n){var r=t.next,o={value:n,prev:t,next:r};return t.next=o,r.prev=o,e.length++,o}function c(e,t,n){for(var r=t.next,o=0;o<n&&r!==e.tail;o++)r=r.next;t.next=r,r.prev=t,e.length-=o}if(e.Prism=o,i.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var r="";return t.forEach((function(t){r+=e(t,n)})),r}var i={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},a=t.alias;a&&(Array.isArray(a)?Array.prototype.push.apply(i.classes,a):i.classes.push(a)),o.hooks.run("wrap",i);var u="";for(var s in i.attributes)u+=" "+s+'="'+(i.attributes[s]||"").replace(/"/g,"&quot;")+'"';return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+u+">"+i.content+"</"+i.tag+">"},!e.document)return e.addEventListener?(o.disableWorkerMessageHandler||e.addEventListener("message",(function(t){var n=JSON.parse(t.data),r=n.language,i=n.code,a=n.immediateClose;e.postMessage(o.highlight(i,o.languages[r],r)),a&&e.close()}),!1),o):o;var f=o.util.currentScript();function d(){o.manual||o.highlightAll()}if(f&&(o.filename=f.src,f.hasAttribute("data-manual")&&(o.manual=!0)),!o.manual){var p=document.readyState;"loading"===p||"interactive"===p&&f&&f.defer?document.addEventListener("DOMContentLoaded",d):window.requestAnimationFrame?window.requestAnimationFrame(d):window.setTimeout(d,16)}return o}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});
/**
   * Prism: Lightweight, robust, elegant syntax highlighting
   *
   * @license MIT <https://opensource.org/licenses/MIT>
   * @author Lea Verou <https://lea.verou.me>
   * @namespace
   * @public
   */e.exports&&(e.exports=t),void 0!==qte&&(qte.Prism=t),t.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},t.languages.markup.tag.inside["attr-value"].inside.entity=t.languages.markup.entity,t.languages.markup.doctype.inside["internal-subset"].inside=t.languages.markup,t.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(t.languages.markup.tag,"addInlined",{value:function(e,n){var r={};r["language-"+n]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:t.languages[n]},r.cdata=/^<!\[CDATA\[|\]\]>$/i;var o={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:r}};o["language-"+n]={pattern:/[\s\S]+/,inside:t.languages[n]};var i={};i[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:o},t.languages.insertBefore("markup","cdata",i)}}),Object.defineProperty(t.languages.markup.tag,"addAttribute",{value:function(e,n){t.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[n,"language-"+n],inside:t.languages[n]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),t.languages.html=t.languages.markup,t.languages.mathml=t.languages.markup,t.languages.svg=t.languages.markup,t.languages.xml=t.languages.extend("markup",{}),t.languages.ssml=t.languages.xml,t.languages.atom=t.languages.xml,t.languages.rss=t.languages.xml,function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(t),t.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},t.languages.javascript=t.languages.extend("clike",{"class-name":[t.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),t.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,t.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:t.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:t.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:t.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:t.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:t.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),t.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:t.languages.javascript}},string:/[\s\S]+/}}}),t.languages.markup&&(t.languages.markup.tag.addInlined("script","javascript"),t.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),t.languages.js=t.languages.javascript,function(){if(void 0!==t&&"undefined"!=typeof document){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"},n="data-src-status",r='pre[data-src]:not([data-src-status="loaded"]):not([data-src-status="loading"])',o=/\blang(?:uage)?-([\w-]+)\b/i;t.hooks.add("before-highlightall",(function(e){e.selector+=", "+r})),t.hooks.add("before-sanity-check",(function(o){var i=o.element;if(i.matches(r)){o.code="",i.setAttribute(n,"loading");var u=i.appendChild(document.createElement("CODE"));u.textContent="Loading…";var s=i.getAttribute("data-src"),l=o.language;if("none"===l){var c=(/\.(\w+)$/.exec(s)||[,"none"])[1];l=e[c]||c}a(u,l),a(i,l);var f=t.plugins.autoloader;f&&f.loadLanguages(l);var d=new XMLHttpRequest;d.open("GET",s,!0),d.onreadystatechange=function(){4==d.readyState&&(d.status<400&&d.responseText?(i.setAttribute(n,"loaded"),u.textContent=d.responseText,t.highlightElement(u)):(i.setAttribute(n,"failed"),d.status>=400?u.textContent="✖ Error "+d.status+" while fetching file: "+d.statusText:u.textContent="✖ Error: File does not exist or is empty"))},d.send(null)}})),t.plugins.fileHighlight={highlight:function(e){for(var n,o=(e||document).querySelectorAll(r),i=0;n=o[i++];)t.highlightElement(n)}};var i=!1;t.fileHighlight=function(){i||(console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."),i=!0),t.plugins.fileHighlight.highlight.apply(this,arguments)}}function a(e,t){var n=e.className;n=n.replace(o," ")+" language-"+t,e.className=n.replace(/\s+/g," ").trim()}}()}));!function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,r=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,o=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function i(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return r})).replace(/<SPREAD>/g,(function(){return o})),RegExp(e,t)}o=i(o).source,e.languages.jsx=e.languages.extend("markup",t),e.languages.jsx.tag.pattern=i(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/i,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:i(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:i(/=<BRACES>/.source),inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx},alias:"language-javascript"}},e.languages.jsx.tag);var a=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(a).join(""):""},u=function(t){for(var n=[],r=0;r<t.length;r++){var o=t[r],i=!1;if("string"!=typeof o&&("tag"===o.type&&o.content[0]&&"tag"===o.content[0].type?"</"===o.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===a(o.content[0].content[1])&&n.pop():"/>"===o.content[o.content.length-1].content||n.push({tagName:a(o.content[0].content[1]),openedBraces:0}):n.length>0&&"punctuation"===o.type&&"{"===o.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&"punctuation"===o.type&&"}"===o.content?n[n.length-1].openedBraces--:i=!0),(i||"string"==typeof o)&&n.length>0&&0===n[n.length-1].openedBraces){var s=a(o);r<t.length-1&&("string"==typeof t[r+1]||"plain-text"===t[r+1].type)&&(s+=a(t[r+1]),t.splice(r+1,1)),r>0&&("string"==typeof t[r-1]||"plain-text"===t[r-1].type)&&(s=a(t[r-1])+s,t.splice(r-1,1),r--),t[r]=new e.Token("plain-text",s,null,s)}o.content&&"string"!=typeof o.content&&u(o.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||u(e.tokens)}))}(Prism),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter;var t=e.languages.extend("typescript",{});delete t["class-name"],e.languages.typescript["class-name"].inside=t,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:t}}}}),e.languages.ts=e.languages.typescript}(Prism),Prism.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside["internal-subset"].inside=Prism.languages.markup,Prism.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};r["language-"+t]={pattern:/[\s\S]+/,inside:Prism.languages[t]};var o={};o[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:r},Prism.languages.insertBefore("markup","cdata",o)}}),Object.defineProperty(Prism.languages.markup.tag,"addAttribute",{value:function(e,t){Prism.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:Prism.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml,Prism.languages.go=Prism.languages.extend("clike",{string:{pattern:/(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|iota|nil|true|false)\b/,number:/(?:\b0x[a-f\d]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[-+]?\d+)?)i?/i,operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\b/}),delete Prism.languages.go["class-name"],function(e){var t=/\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/,n=[{pattern:/\b(?:false|true)\b/i,alias:"boolean"},{pattern:/(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,greedy:!0,lookbehind:!0},{pattern:/(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,greedy:!0,lookbehind:!0},/\b(?:null)\b/i,/\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/],r=/\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i,o=/<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,i=/[{}\[\](),:;]/;e.languages.php={delimiter:{pattern:/\?>$|^<\?(?:php(?=\s)|=)?/i,alias:"important"},comment:t,variable:/\$+(?:\w+\b|(?=\{))/i,package:{pattern:/(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,lookbehind:!0,inside:{punctuation:/\\/}},"class-name-definition":{pattern:/(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,lookbehind:!0,alias:"class-name"},"function-definition":{pattern:/(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,lookbehind:!0,alias:"function"},keyword:[{pattern:/(\(\s*)\b(?:bool|boolean|int|integer|float|string|object|array)\b(?=\s*\))/i,alias:"type-casting",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*)\b(?:bool|int|float|string|object|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*[\w|]\|\s*)(?:null|false)\b(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?)\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?[\w|]\|\s*)(?:null|false)\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|iterable|(?:null|false)(?=\s*\|))\b/i,alias:"type-declaration",greedy:!0},{pattern:/(\|\s*)(?:null|false)\b/i,alias:"type-declaration",greedy:!0,lookbehind:!0},{pattern:/\b(?:parent|self|static)(?=\s*::)/i,alias:"static-context",greedy:!0},{pattern:/(\byield\s+)from\b/i,lookbehind:!0},/\bclass\b/i,{pattern:/((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i,lookbehind:!0}],"argument-name":{pattern:/([(,]\s+)\b[a-z_]\w*(?=\s*:(?!:))/i,lookbehind:!0},"class-name":[{pattern:/(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,greedy:!0,lookbehind:!0},{pattern:/(\|\s*)\b[a-z_]\w*(?!\\)\b/i,greedy:!0,lookbehind:!0},{pattern:/\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,greedy:!0},{pattern:/(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,alias:"class-name-fully-qualified",greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,alias:"class-name-fully-qualified",greedy:!0,inside:{punctuation:/\\/}},{pattern:/(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,alias:"class-name-fully-qualified",greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/\b[a-z_]\w*(?=\s*\$)/i,alias:"type-declaration",greedy:!0},{pattern:/(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,alias:["class-name-fully-qualified","type-declaration"],greedy:!0,inside:{punctuation:/\\/}},{pattern:/\b[a-z_]\w*(?=\s*::)/i,alias:"static-context",greedy:!0},{pattern:/(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,alias:["class-name-fully-qualified","static-context"],greedy:!0,inside:{punctuation:/\\/}},{pattern:/([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,alias:["class-name-fully-qualified","type-hint"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,alias:["class-name-fully-qualified","return-type"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}}],constant:n,function:{pattern:/(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,lookbehind:!0,inside:{punctuation:/\\/}},property:{pattern:/(->\s*)\w+/,lookbehind:!0},number:r,operator:o,punctuation:i};var a={pattern:/\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,lookbehind:!0,inside:e.languages.php},u=[{pattern:/<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,alias:"nowdoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<'?|[';]$/}}}},{pattern:/<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<"?|[";]$/}},interpolation:a}},{pattern:/`(?:\\[\s\S]|[^\\`])*`/,alias:"backtick-quoted-string",greedy:!0},{pattern:/'(?:\\[\s\S]|[^\\'])*'/,alias:"single-quoted-string",greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,alias:"double-quoted-string",greedy:!0,inside:{interpolation:a}}];e.languages.insertBefore("php","variable",{string:u,attribute:{pattern:/#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,greedy:!0,inside:{"attribute-content":{pattern:/^(#\[)[\s\S]+(?=\]$)/,lookbehind:!0,inside:{comment:t,string:u,"attribute-class-name":[{pattern:/([^:]|^)\b[a-z_]\w*(?!\\)\b/i,alias:"class-name",greedy:!0,lookbehind:!0},{pattern:/([^:]|^)(?:\\?\b[a-z_]\w*)+/i,alias:["class-name","class-name-fully-qualified"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}}],constant:n,number:r,operator:o,punctuation:i}},delimiter:{pattern:/^#\[|\]$/,alias:"punctuation"}}}}),e.hooks.add("before-tokenize",(function(t){/<\?/.test(t.code)&&e.languages["markup-templating"].buildPlaceholders(t,"php",/<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/gi)})),e.hooks.add("after-tokenize",(function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"php")}))}(Prism),Prism.languages.c=Prism.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),Prism.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},Prism.languages.c.string],comment:Prism.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:Prism.languages.c}}},constant:/\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/}),delete Prism.languages.c.boolean,Prism.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"string-interpolation":{pattern:/(?:f|rf|fr)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|rb|br)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/im,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python,function(e){var t=/\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/,n=/(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source,r={pattern:RegExp(n+/[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,inside:{punctuation:/\./}},punctuation:/\./}};e.languages.java=e.languages.extend("clike",{"class-name":[r,{pattern:RegExp(n+/[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source),lookbehind:!0,inside:r.inside}],keyword:t,function:[e.languages.clike.function,{pattern:/(::\s*)[a-z_]\w*/,lookbehind:!0}],number:/\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore("java","string",{"triple-quoted-string":{pattern:/"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,greedy:!0,alias:"string"}}),e.languages.insertBefore("java","class-name",{annotation:{pattern:/(^|[^.])@\w+(?:\s*\.\s*\w+)*/,lookbehind:!0,alias:"punctuation"},generics:{pattern:/<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,inside:{"class-name":r,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}},namespace:{pattern:RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0,inside:{punctuation:/\./}}})}(Prism),function(e){var t=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,n=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:t,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:true|false)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:module|import)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(Prism),function(e){function t(e,t){return e.replace(/<<(\d+)>>/g,(function(e,n){return"(?:"+t[+n]+")"}))}function n(e,n,r){return RegExp(t(e,n),r||"")}function r(e,t){for(var n=0;n<t;n++)e=e.replace(/<<self>>/g,(function(){return"(?:"+e+")"}));return e.replace(/<<self>>/g,"[^\\s\\S]")}var o="bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void",i="class enum interface record struct",a="add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)",u="abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield";function s(e){return"\\b(?:"+e.trim().replace(/ /g,"|")+")\\b"}var l=s(i),c=RegExp(s(o+" "+i+" "+a+" "+u)),f=s(i+" "+a+" "+u),d=s(o+" "+i+" "+u),p=r(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source,2),h=r(/\((?:[^()]|<<self>>)*\)/.source,2),g=/@?\b[A-Za-z_]\w*\b/.source,v=t(/<<0>>(?:\s*<<1>>)?/.source,[g,p]),y=t(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source,[f,v]),m=/\[\s*(?:,\s*)*\]/.source,b=t(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source,[y,m]),w=t(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,[p,h,m]),E=t(/\(<<0>>+(?:,<<0>>+)+\)/.source,[w]),D=t(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source,[E,y,m]),C={keyword:c,punctuation:/[<>()?,.:[\]]/},x=/'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source,S=/"(?:\\.|[^\\"\r\n])*"/.source,A=/@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;e.languages.csharp=e.languages.extend("clike",{string:[{pattern:n(/(^|[^$\\])<<0>>/.source,[A]),lookbehind:!0,greedy:!0},{pattern:n(/(^|[^@$\\])<<0>>/.source,[S]),lookbehind:!0,greedy:!0},{pattern:RegExp(x),greedy:!0,alias:"character"}],"class-name":[{pattern:n(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source,[y]),lookbehind:!0,inside:C},{pattern:n(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source,[g,D]),lookbehind:!0,inside:C},{pattern:n(/(\busing\s+)<<0>>(?=\s*=)/.source,[g]),lookbehind:!0},{pattern:n(/(\b<<0>>\s+)<<1>>/.source,[l,v]),lookbehind:!0,inside:C},{pattern:n(/(\bcatch\s*\(\s*)<<0>>/.source,[y]),lookbehind:!0,inside:C},{pattern:n(/(\bwhere\s+)<<0>>/.source,[g]),lookbehind:!0},{pattern:n(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source,[b]),lookbehind:!0,inside:C},{pattern:n(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source,[D,d,g]),inside:C}],keyword:c,number:/(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:ul|lu|[dflmu])?\b/i,operator:/>>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,punctuation:/\?\.?|::|[{}[\];(),.:]/}),e.languages.insertBefore("csharp","number",{range:{pattern:/\.\./,alias:"operator"}}),e.languages.insertBefore("csharp","punctuation",{"named-parameter":{pattern:n(/([(,]\s*)<<0>>(?=\s*:)/.source,[g]),lookbehind:!0,alias:"punctuation"}}),e.languages.insertBefore("csharp","class-name",{namespace:{pattern:n(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source,[g]),lookbehind:!0,inside:{punctuation:/\./}},"type-expression":{pattern:n(/(\b(?:default|typeof|sizeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source,[h]),lookbehind:!0,alias:"class-name",inside:C},"return-type":{pattern:n(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source,[D,y]),inside:C,alias:"class-name"},"constructor-invocation":{pattern:n(/(\bnew\s+)<<0>>(?=\s*[[({])/.source,[D]),lookbehind:!0,inside:C,alias:"class-name"},"generic-method":{pattern:n(/<<0>>\s*<<1>>(?=\s*\()/.source,[g,p]),inside:{function:n(/^<<0>>/.source,[g]),generic:{pattern:RegExp(p),alias:"class-name",inside:C}}},"type-list":{pattern:n(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source,[l,v,g,D,c.source,h,/\bnew\s*\(\s*\)/.source]),lookbehind:!0,inside:{"record-arguments":{pattern:n(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source,[v,h]),lookbehind:!0,greedy:!0,inside:e.languages.csharp},keyword:c,"class-name":{pattern:RegExp(D),greedy:!0,inside:C},punctuation:/[,()]/}},preprocessor:{pattern:/(^[\t ]*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}});var O=S+"|"+x,k=t(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source,[O]),B=r(t(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[k]),2),F=/\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source,T=t(/<<0>>(?:\s*\(<<1>>*\))?/.source,[y,B]);e.languages.insertBefore("csharp","class-name",{attribute:{pattern:n(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source,[F,T]),lookbehind:!0,greedy:!0,inside:{target:{pattern:n(/^<<0>>(?=\s*:)/.source,[F]),alias:"keyword"},"attribute-arguments":{pattern:n(/\(<<0>>*\)/.source,[B]),inside:e.languages.csharp},"class-name":{pattern:RegExp(y),inside:{punctuation:/\./}},punctuation:/[:,]/}}});var _=/:[^}\r\n]+/.source,P=r(t(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[k]),2),j=t(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[P,_]),N=r(t(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source,[O]),2),I=t(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[N,_]);function L(t,r){return{interpolation:{pattern:n(/((?:^|[^{])(?:\{\{)*)<<0>>/.source,[t]),lookbehind:!0,inside:{"format-string":{pattern:n(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source,[r,_]),lookbehind:!0,inside:{punctuation:/^:/}},punctuation:/^\{|\}$/,expression:{pattern:/[\s\S]+/,alias:"language-csharp",inside:e.languages.csharp}}},string:/[\s\S]+/}}e.languages.insertBefore("csharp","string",{"interpolation-string":[{pattern:n(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source,[j]),lookbehind:!0,greedy:!0,inside:L(j,P)},{pattern:n(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source,[I]),lookbehind:!0,greedy:!0,inside:L(I,N)}]})}(Prism),Prism.languages.dotnet=Prism.languages.cs=Prism.languages.csharp,Prism.languages["visual-basic"]={comment:{pattern:/(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\S\r\n]_[^\S\r\n]*(?:\r\n?|\n)|.)+/i,alias:"comment",greedy:!0},string:{pattern:/\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,greedy:!0},date:{pattern:/#[^\S\r\n]*(?:\d+([/-])\d+\1\d+(?:[^\S\r\n]+(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))?|\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?)[^\S\r\n]*#/i,alias:"builtin"},number:/(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\b(?:True|False|Nothing)\b/i,keyword:/\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\b/i,operator:[/[+\-*/\\^<=>&#@$%!]/,{pattern:/([^\S\r\n])_(?=[^\S\r\n]*[\r\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages["visual-basic"],Prism.languages.vba=Prism.languages["visual-basic"],Prism.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:TRUE|FALSE|NULL)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){e.languages.ruby=e.languages.extend("clike",{comment:[/#.*/,{pattern:/^=begin\s[\s\S]*?^=end/m,greedy:!0}],"class-name":{pattern:/(\b(?:class)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/});var t={pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"tag"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore("ruby","keyword",{regex:[{pattern:RegExp(/%r/.source+"(?:"+[/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,/\((?:[^()\\]|\\[\s\S])*\)/.source,/\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source,/\[(?:[^\[\]\\]|\\[\s\S])*\]/.source,/<(?:[^<>\\]|\\[\s\S])*>/.source].join("|")+")"+/[egimnosux]{0,6}/.source),greedy:!0,inside:{interpolation:t}},{pattern:/(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,lookbehind:!0,greedy:!0,inside:{interpolation:t}}],variable:/[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,lookbehind:!0},"method-definition":{pattern:/(\bdef\s+)[\w.]+/,lookbehind:!0,inside:{function:/\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore("ruby","number",{builtin:/\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,constant:/\b[A-Z]\w*(?:[?!]|\b)/}),e.languages.ruby.string=[{pattern:RegExp(/%[qQiIwWxs]?/.source+"(?:"+[/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,/\((?:[^()\\]|\\[\s\S])*\)/.source,/\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source,/\[(?:[^\[\]\\]|\\[\s\S])*\]/.source,/<(?:[^<>\\]|\\[\s\S])*>/.source].join("|")+")"),greedy:!0,inside:{interpolation:t}},{pattern:/("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,greedy:!0,inside:{interpolation:t}},{pattern:/<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?[a-z_]\w*|[a-z_]\w*$/i,alias:"symbol",inside:{punctuation:/^<<[-~]?/}},interpolation:t}},{pattern:/<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?'[a-z_]\w*'|[a-z_]\w*$/i,alias:"symbol",inside:{punctuation:/^<<[-~]?'|'$/}}}}],e.languages.rb=e.languages.ruby}(Prism),Prism.languages.swift={comment:{pattern:/(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,lookbehind:!0,greedy:!0},"string-literal":[{pattern:RegExp(/(^|[^"#])/.source+"(?:"+/"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source+"|"+/"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source+")"+/(?!["#])/.source),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\\($/,alias:"punctuation"},punctuation:/\\(?=[\r\n])/,string:/[\s\S]+/}},{pattern:RegExp(/(^|[^"#])(#+)/.source+"(?:"+/"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source+"|"+/"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source+")\\2"),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\#+\($/,alias:"punctuation"},string:/[\s\S]+/}}],directive:{pattern:RegExp(/#/.source+"(?:"+/(?:elseif|if)\b/.source+"(?:[ \t]*"+/(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source+")+|"+/(?:else|endif)\b/.source+")"),alias:"property",inside:{"directive-name":/^#\w+/,boolean:/\b(?:true|false)\b/,number:/\b\d+(?:\.\d+)*\b/,operator:/!|&&|\|\||[<>]=?/,punctuation:/[(),]/}},literal:{pattern:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,alias:"constant"},"other-directive":{pattern:/#\w+\b/,alias:"property"},attribute:{pattern:/@\w+/,alias:"atrule"},"function-definition":{pattern:/(\bfunc\s+)\w+/,lookbehind:!0,alias:"function"},label:{pattern:/\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,lookbehind:!0,alias:"important"},keyword:/\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,boolean:/\b(?:true|false)\b/,nil:{pattern:/\bnil\b/,alias:"constant"},"short-argument":/\$\d+\b/,omit:{pattern:/\b_\b/,alias:"keyword"},number:/\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,"class-name":/\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,function:/\b[a-z_]\w*(?=\s*\()/i,constant:/\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,operator:/[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,punctuation:/[{}[\]();,.:\\]/},Prism.languages.swift["string-literal"].forEach((function(e){e.inside.interpolation.inside=Prism.languages.swift})),function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},r={bash:n,environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:r},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:r},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:r.entity}}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:r.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var o=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],i=r.variable[1].inside,a=0;a<o.length;a++)i[o[a]]=e.languages.bash[o[a]];e.languages.shell=e.languages.bash}(Prism),function(e){var t=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var r=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,o=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return r})),i=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"font-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+o+i+"(?:"+o+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+o+i+")(?:"+o+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(r),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+o+")"+i+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+o+"$"),inside:{"table-header":{pattern:RegExp(r),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:n(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike","code-snippet"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,r=t.length;n<r;n++){var o=t[n];if("code"===o.type){var i=o.content[1],a=o.content[3];if(i&&a&&"code-language"===i.type&&"code-block"===a.type&&"string"==typeof i.content){var u=i.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),s="language-"+(u=(/[a-z][\w-]*/i.exec(u)||[""])[0].toLowerCase());a.alias?"string"==typeof a.alias?a.alias=[a.alias,s]:a.alias.push(s):a.alias=[s]}}else e(o.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",r=0,o=t.classes.length;r<o;r++){var i=t.classes[r],l=/language-(.+)/.exec(i);if(l){n=l[1];break}}var c=e.languages[n];if(c)t.content=e.highlight((d=t.content,d.replace(a,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,t){var n;return"#"===(t=t.toLowerCase())[0]?(n="x"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),s(n)):u[t]||e}))),c,n);else if(n&&"none"!==n&&e.plugins.autoloader){var f="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=f,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(f);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}var d}));var a=RegExp(e.languages.markup.tag.pattern.source,"gi"),u={amp:"&",lt:"<",gt:">",quot:'"'},s=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(Prism),Prism.languages.lua={comment:/^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,string:{pattern:/(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,greedy:!0},number:/\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,keyword:/\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,function:/(?!\d)\w+(?=\s*(?:[({]))/,operator:[/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,{pattern:/(^|[^.])\.\.(?!\.)/,lookbehind:!0}],punctuation:/[\[\](){},;]|\.+|:+/},Prism.languages.groovy=Prism.languages.extend("clike",{string:[{pattern:/("""|''')(?:[^\\]|\\[\s\S])*?\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,greedy:!0},{pattern:/(["'/])(?:\\.|(?!\1)[^\\\r\n])*\1/,greedy:!0}],keyword:/\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,number:/\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,operator:{pattern:/(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,lookbehind:!0},punctuation:/\.+|[{}[\];(),:$]/}),Prism.languages.insertBefore("groovy","string",{shebang:{pattern:/#!.+/,alias:"comment"}}),Prism.languages.insertBefore("groovy","punctuation",{"spock-block":/\b(?:setup|given|when|then|and|cleanup|expect|where):/}),Prism.languages.insertBefore("groovy","function",{annotation:{pattern:/(^|[^.])@\w+/,lookbehind:!0,alias:"punctuation"}}),Prism.hooks.add("wrap",(function(e){if("groovy"===e.language&&"string"===e.type){var t=e.content[0];if("'"!=t){var n=/([^\\])(?:\$(?:\{.*?\}|[\w.]+))/;"$"===t&&(n=/([^\$])(?:\$(?:\{.*?\}|[\w.]+))/),e.content=e.content.replace(/&lt;/g,"<").replace(/&amp;/g,"&"),e.content=Prism.highlight(e.content,{expression:{pattern:n,lookbehind:!0,inside:Prism.languages.groovy}}),e.classes.push("/"===t?"regex":"gstring")}}}));var tie=["comment","prolog","doctype","cdata","punctuation","namespace","property","tag","boolean","number","constant","symbol","deleted","selector","attr-name","string","builtin","inserted","operator","entity","url","string","atrule","attr-value","keyword","function","class-name","regex","important","variable","bold","italic","entity","char"];function nie(e){return"string"==typeof e?e.length:"string"==typeof e.content?e.content.length:e.content.reduce((function(e,t){return e+nie(t)}),0)}var rie,oie=Zte.String,iie=function(e){if("Symbol"===Mre(e))throw TypeError("Cannot convert a Symbol value to a string");return oie(e)},aie=function(){var e=Une(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},uie=Zte.RegExp,sie=Ane((function(){var e=uie("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),lie=sie||Ane((function(){return!uie("a","y").sticky})),cie={BROKEN_CARET:sie||Ane((function(){var e=uie("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:lie,UNSUPPORTED_Y:sie},fie=Ine?Object.defineProperties:function(e,t){Une(e);for(var n,r=Coe(t),o=Yoe(t),i=o.length,a=0;i>a;)ure.f(e,n=o[a++],r[n]);return e},die=bne("document","documentElement"),pie=mre("IE_PROTO"),hie=function(){},gie=function(e){return"<script>"+e+"<\/script>"},vie=function(e){e.write(gie("")),e.close();var t=e.parentWindow.Object;return e=null,t},yie=function(){try{rie=new ActiveXObject("htmlfile")}catch(r){}var e,t;yie="undefined"!=typeof document?document.domain&&rie?vie(rie):((t=zne("iframe")).style.display="none",die.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(gie("document.F=Object")),e.close(),e.F):vie(rie);for(var n=Poe.length;n--;)delete yie.prototype[Poe[n]];return yie()};bre[pie]=!0;var mie,bie,wie=Object.create||function(e,t){var n;return null!==e?(hie.prototype=Une(e),n=new hie,hie.prototype=null,n[pie]=e):n=yie(),void 0===t?n:fie(n,t)},Eie=Zte.RegExp,Die=Ane((function(){var e=Eie(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),Cie=Zte.RegExp,xie=Ane((function(){var e=Cie("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),Sie=Ore.get,Aie=tne("native-string-replace",String.prototype.replace),Oie=RegExp.prototype.exec,kie=Oie,Bie=ane("".charAt),Fie=ane("".indexOf),Tie=ane("".replace),_ie=ane("".slice),Pie=(bie=/b*/g,qne(Oie,mie=/a/,"a"),qne(Oie,bie,"a"),0!==mie.lastIndex||0!==bie.lastIndex),jie=cie.BROKEN_CARET,Nie=void 0!==/()??/.exec("")[1];(Pie||Nie||jie||Die||xie)&&(kie=function(e){var t,n,r,o,i,a,u,s=this,l=Sie(s),c=iie(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=qne(kie,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=jie&&s.sticky,h=qne(aie,s),g=s.source,v=0,y=c;if(p&&(h=Tie(h,"y",""),-1===Fie(h,"g")&&(h+="g"),y=_ie(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==Bie(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),Nie&&(n=new RegExp("^"+g+"$(?!\\s)",h)),Pie&&(r=s.lastIndex),o=qne(Oie,p?n:s,y),p?o?(o.input=_ie(o.input,v),o[0]=_ie(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:Pie&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),Nie&&o&&o.length>1&&qne(Aie,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=wie(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var Iie=kie;Koe({target:"RegExp",proto:!0,forced:/./.exec!==Iie},{exec:Iie});var Lie=Function.prototype,Rie=Lie.apply,Mie=Lie.bind,zie=Lie.call,$ie="object"==typeof Reflect&&Reflect.apply||(Mie?zie.bind(Rie):function(){return zie.apply(Rie,arguments)}),Hie=Pne("species"),Vie=RegExp.prototype,Uie=Pne("match"),Wie=Zte.TypeError,qie=Pne("species"),Gie=ane("".charAt),Kie=ane("".charCodeAt),Yie=ane("".slice),Xie=function(e){return function(t,n){var r,o,i=iie(sne(t)),a=Jre(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=Kie(i,a))<55296||r>56319||a+1===u||(o=Kie(i,a+1))<56320||o>57343?e?Gie(i,a):r:e?Yie(i,a,a+2):o-56320+(r-55296<<10)+65536}},Zie=(Xie(!1),Xie(!0)),Jie=function(e,t,n){return t+(n?Zie(e,t).length:1)},Qie=Zte.Array,eae=Math.max,tae=function(e,t,n){for(var r,o,i,a,u=toe(e),s=koe(t,u),l=koe(void 0===n?u:n,u),c=Qie(eae(l-s,0)),f=0;s<l;s++,f++)r=c,o=f,i=e[s],void 0,(a=ore(o))in r?ure.f(r,a,sre(0,i)):r[a]=i;return c.length=f,c},nae=Zte.TypeError,rae=function(e,t){var n=e.exec;if(yne(n)){var r=qne(n,e,t);return null!==r&&Une(r),r}if("RegExp"===Nre(e))return qne(Iie,e,t);throw nae("RegExp#exec called on incompatible receiver")},oae=cie.UNSUPPORTED_Y,iae=Math.min,aae=[].push,uae=ane(/./.exec),sae=ane(aae),lae=ane("".slice);!function(e,t,n,r){var o=Pne(e),i=!Ane((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!Ane((function(){var e=!1,t=/a/;return(t={}).constructor={},t.constructor[Hie]=function(){return t},t.flags="",t[o]=/./[o],t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=ane(/./[o]),s=function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=iie(sne(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!Lne(r=e)||!(void 0!==(o=r[Uie])?o:"RegExp"==Nre(r)))return qne(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=qne(Iie,p,i))&&!((s=p.lastIndex)>d&&(sae(c,lae(i,d,u.index)),u.length>1&&u.index<i.length&&$ie(aae,c,tae(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&uae(p,"")||sae(c,""):sae(c,lae(i,d)),c.length>a?tae(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:qne(t,this,e,n)}:t,[function(t,n){var o=sne(this),i=null==t?void 0:ere(t,e);return i?qne(i,t,o,n):qne(r,iie(o),t,n)},function(e,o){var i=Une(this),a=iie(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=Une(e).constructor;return void 0===r||null==(n=Une(r)[qie])?t:function(e){if(coe(e))return e;throw Wie(Zne(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(oae?"g":"y"),f=new s(oae?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===rae(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=oae?0:h;var v,y=rae(f,oae?lae(a,h):a);if(null===y||(v=iae(eoe(f.lastIndex+(oae?h:0)),a.length))===p)h=Jie(a,h,l);else{if(sae(g,lae(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(sae(g,y[m]),g.length===d)return g;h=p=v}}return sae(g,lae(a,p)),g}]}(o,""[e],(function(e,t,n,r,o){var a=ane(e),s=t.exec;return s===Iie||s===Vie.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));_re(String.prototype,e,s[0]),_re(Vie,o,s[1])}r&&lre(Vie[o],"sham",!0)}("split",0,!!Ane((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),oae),Koe({global:!0},{globalThis:Zte}),Pr&&(Br.fn.attr=Pr);var cae=Tre.PROPER,fae=RegExp.prototype,dae=fae.toString,pae=ane(aie),hae=Ane((function(){return"/a/b"!=dae.call({source:"a",flags:"b"})})),gae=cae&&"toString"!=dae.name;(hae||gae)&&_re(RegExp.prototype,"toString",(function(){var e=Une(this),t=iie(e.source),n=e.flags;return"/"+t+"/"+iie(void 0===n&&Gne(fae,e)&&!("flags"in fae)?pae(e):n)}),{unsafe:!0});var vae=function(){function e(){this.title=_C("highLightModule.selectLang"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M64 64v896h896V64H64z m487.6 698.8c0 87.2-51.2 127-125.8 127-67.4 0-106.4-34.8-126.4-77l68.6-41.4c13.2 23.4 25.2 43.2 54.2 43.2 27.6 0 45.2-10.8 45.2-53V475.4h84.2v287.4z m199.2 127c-78.2 0-128.8-37.2-153.4-86l68.6-39.6c18 29.4 41.6 51.2 83 51.2 34.8 0 57.2-17.4 57.2-41.6 0-28.8-22.8-39-61.4-56l-21-9c-60.8-25.8-101-58.4-101-127 0-63.2 48.2-111.2 123.2-111.2 53.6 0 92 18.6 119.6 67.4L800 580c-14.4-25.8-30-36-54.2-36-24.6 0-40.2 15.6-40.2 36 0 25.2 15.6 35.4 51.8 51.2l21 9c71.6 30.6 111.8 62 111.8 132.4 0 75.6-59.6 117.2-139.4 117.2z"></path></svg>',this.tag="select",this.width=95,this.selectPanelWidth=115}return e.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig("codeSelectLang").codeLangs,r=void 0===n?[]:n;t.push({text:"plain text",value:""}),r.forEach((function(e){var n=e.text,r=e.value;t.push({text:n,value:r})}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.getSelectCodeElem(e);if(null==t)return"";if(!ct.isElement(t))return"";var n=t.language.toString(),r=e.getMenuConfig("codeSelectLang").codeLangs;return(void 0===r?[]:r).some((function(e){return e.value===n}))?n:""},e.prototype.isDisabled=function(e){return null==e.selection||!this.getSelectCodeElem(e)},e.prototype.exec=function(e,t){if(null!=this.getSelectCodeElem(e)){var n={language:t.toString()};on.setNodes(e,n,{match:function(e){return qy.checkNodeType(e,"code")}})}},e.prototype.getSelectCodeElem=function(e){var t=qy.getSelectedNodeByType(e,"code");if(null==t)return null;var n=qy.getParentNode(e,t);return ct.isElement(n)?"pre"!==n.type?null:t:null},e}(),yae={renderStyle:function(e,t){var n=e,r=t,o="";return tie.forEach((function(e){n[e]&&(o=e)})),o&&function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={}),Object.assign(n.props,{className:t})}(r,o="token "+o),r},parseStyleHtml:function(e,t,n){var r=Br(e);if(!ct.isElement(t))return t;if("code"!==qy.getNodeType(t))return t;var o=t,i=r.attr("class")||"";return 0===i.indexOf("language-")?o.language=i.split("-")[1]||"":o.language=i.toLowerCase(),o},menus:[{key:"codeSelectLang",factory:function(){return new vae},config:{codeLangs:[{text:"CSS",value:"css"},{text:"HTML",value:"html"},{text:"XML",value:"xml"},{text:"Javascript",value:"javascript"},{text:"Typescript",value:"typescript"},{text:"JSX",value:"jsx"},{text:"Go",value:"go"},{text:"PHP",value:"php"},{text:"C",value:"c"},{text:"Python",value:"python"},{text:"Java",value:"java"},{text:"C++",value:"cpp"},{text:"C#",value:"csharp"},{text:"Visual Basic",value:"visual-basic"},{text:"SQL",value:"sql"},{text:"Ruby",value:"ruby"},{text:"Swift",value:"swift"},{text:"Bash",value:"bash"},{text:"Lua",value:"lua"},{text:"Groovy",value:"groovy"},{text:"Markdown",value:"markdown"}]}}],elemsToHtml:[{type:"code",elemToHtml:function(e,t){var n=e.language,r=void 0===n?"":n;return"<code "+(r?'class="language-'+r+'"':"")+">"+t+"</code>"}}]},mae=/"/g,bae=ane("".replace);Koe({target:"String",proto:!0,forced:Ane((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3}))},{anchor:function(e){return"a","name",t=e,n=iie(sne(this)),r="<a",(r+=' name="'+bae(iie(t),mae,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var wae=function(e){var t,n,r,o=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}(e,2),i=o[0],a=o[1],u=[],s=function(e){if(!zt.isText(e))return null;var t=qy.getParentNode(null,e);if(t&&"code"===qy.getNodeType(t)){var n=qy.getParentNode(null,t);if(n&&"pre"===qy.getNodeType(n))return t}return null}(i);if(null==s)return u;var l=s.language,c=void 0===l?"":l;if(!c)return u;var f=function(e,t){if(!t)return[];var n=eie.languages[t];return n?eie.tokenize(e.text,n):[]}(i,c),d=0;try{for(var p=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(f),h=p.next();!h.done;h=p.next()){var g=h.value,v=d+nie(g);"string"!=typeof g&&u.push(((r={})[g.type]=!0,r.anchor={path:a,offset:d},r.focus={path:a,offset:v},r)),d=v}}catch(y){t={error:y}}finally{try{h&&!h.done&&(n=p.return)&&n.call(p)}finally{if(t)throw t.error}}return u},Eae=function(){return Eae=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Eae.apply(this,arguments)},Dae=function(){function e(){throw new Error("不能实例化\nCan not construct a instance")}return e.setEditorConfig=function(e){void 0===e&&(e={}),this.editorConfig=Eae(Eae({},this.editorConfig),e)},e.setSimpleEditorConfig=function(e){void 0===e&&(e={}),this.simpleEditorConfig=Eae(Eae({},this.simpleEditorConfig),e)},e.setToolbarConfig=function(e){void 0===e&&(e={}),this.toolbarConfig=Eae(Eae({},this.toolbarConfig),e)},e.setSimpleToolbarConfig=function(e){void 0===e&&(e={}),this.simpleToolbarConfig=Eae(Eae({},this.simpleToolbarConfig),e)},e.registerPlugin=function(e){this.plugins.push(e)},e.registerMenu=function(e,t){!function(e,t){var n,r,o=e.key,i=e.factory,a=e.config,u=Jg(Jg({},a),t||{});if(null!=Yy[o])throw new Error("Duplicated key '"+o+"' in menu items");Yy[o]=i,n=o,null!=(r=u)&&(Ky[n]=r)}(e,t)},e.registerRenderElem=function(e){!function(e){var t=e.type,n=e.renderElem;PE[t||""]=n}(e)},e.registerRenderStyle=function(e){!function(e){_E.push(e)}(e)},e.registerElemToHtml=function(e){!function(e){var t=e.type,n=e.elemToHtml;sm[t||""]=n}(e)},e.registerStyleToHtml=function(e){!function(e){um.push(e)}(e)},e.registerPreParseHtml=function(e){!function(e){Xb.push(e)}(e)},e.registerParseElemHtml=function(e){!function(e){var t=e.selector,n=e.parseElemHtml;Jb[t]=n}(e)},e.registerParseStyleHtml=function(e){!function(e){Zb.push(e)}(e)},e.registerModule=function(e){Cae(e)},e.editorConfig={},e.simpleEditorConfig={},e.toolbarConfig={},e.simpleToolbarConfig={},e.plugins=[],e}();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function Cae(e){var t=e.menus,n=e.renderElems,r=e.renderStyle,o=e.elemsToHtml,i=e.styleToHtml,a=e.preParseHtml,u=e.parseElemsHtml,s=e.parseStyleHtml,l=e.editorPlugin;t&&t.forEach((function(e){return Dae.registerMenu(e)})),n&&n.forEach((function(e){return Dae.registerRenderElem(e)})),r&&Dae.registerRenderStyle(r),o&&o.forEach((function(e){return Dae.registerElemToHtml(e)})),i&&Dae.registerStyleToHtml(i),a&&a.forEach((function(e){return Dae.registerPreParseHtml(e)})),u&&u.forEach((function(e){return Dae.registerParseElemHtml(e)})),s&&Dae.registerParseStyleHtml(s),l&&Dae.registerPlugin(l)}wL.forEach((function(e){return Cae(e)})),Cae(zV),Cae(CY),Cae(G4),Cae(Wte),Cae(yae);var xae='<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>';var Sae={link:{menuKeys:["editLink","unLink","viewLink"]},image:{menuKeys:["imageWidth30","imageWidth50","imageWidth100","editImage","viewImageLink","deleteImage"]},pre:{menuKeys:["enter","codeBlock","codeSelectLang"]},table:{menuKeys:["enter","tableHeader","tableFullWidth","insertTableRow","deleteTableRow","insertTableCol","deleteTableCol","deleteTable"]},divider:{menuKeys:["enter"]},video:{menuKeys:["enter","editVideoSize"]}};var Aae={hoverbarKeys:Eae(Eae({},Sae),{text:{menuKeys:["headerSelect","insertLink","bulletedList","|","bold","through","color","bgColor","clearStyle"]}})};Dae.setEditorConfig(Eae(Eae({},Aae),{decorate:wae}));var Oae={hoverbarKeys:Sae};Dae.setSimpleEditorConfig(Eae(Eae({},Oae),{decorate:wae}));var kae={toolbarKeys:["headerSelect","blockquote","|","bold","underline","italic",{key:"group-more-style",title:_C("editor.more"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M204.8 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M505.6 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M806.4 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path></svg>',menuKeys:["through","code","sup","sub","clearStyle"]},"color","bgColor","|","fontSize","fontFamily","lineHeight","|","bulletedList","numberedList","todo",{key:"group-justify",title:_C("editor.justify"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',menuKeys:["justifyLeft","justifyRight","justifyCenter","justifyJustify"]},{key:"group-indent",title:_C("editor.indent"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>',menuKeys:["indent","delIndent"]},"|","emotion","insertLink",{key:"group-image",title:_C("editor.image"),iconSvg:xae,menuKeys:["insertImage","uploadImage"]},{key:"group-video",title:_C("editor.video"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>',menuKeys:["insertVideo","uploadVideo"]},"insertTable","codeBlock","divider","|","undo","redo","|","fullScreen"]};Dae.setToolbarConfig(kae);var Bae={toolbarKeys:["blockquote","header1","header2","header3","|","bold","underline","italic","through","color","bgColor","clearStyle","|","bulletedList","numberedList","todo","justifyLeft","justifyRight","justifyCenter","|","insertLink",{key:"group-image",title:_C("editor.image"),iconSvg:xae,menuKeys:["insertImage","uploadImage"]},"insertVideo","insertTable","codeBlock","|","undo","redo","|","fullScreen"]};function Fae(e){var t=e.selector,n=e.editor,r=e.config,o=void 0===r?{}:r,i=e.mode,a=void 0===i?"default":i;if(!t)throw new Error("Cannot find 'selector' when create toolbar");var u="simple"===a?Dae.simpleToolbarConfig:Dae.toolbarConfig,s=function(e,t){if(null==e)throw new Error("Cannot create toolbar, because editor is null");var n=t.selector,r=t.config,o=void 0===r?{}:r;if(Fw(e,"data-w-e-toolbar",n))throw new Error("Repeated create toolbar by selector '"+n+"'");var i=Jg({toolbarKeys:[],excludeKeys:[],insertKeys:{index:0,keys:[]},modalAppendToBody:!1},o||{}),a=new PD(n,i);return ty.set(a,e),ny.set(e,a),a}(n,{selector:t,config:Eae(Eae({},u),o)});return s}Dae.setSimpleToolbarConfig(Bae);var Tae=Object.defineProperty,_ae=Object.defineProperties,Pae=Object.getOwnPropertyDescriptors,jae=Object.getOwnPropertySymbols,Nae=Object.prototype.hasOwnProperty,Iae=Object.prototype.propertyIsEnumerable,Lae=(e,t,n)=>t in e?Tae(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Rae=(e,t)=>{for(var n in t||(t={}))Nae.call(t,n)&&Lae(e,n,t[n]);if(jae)for(var n of jae(t))Iae.call(t,n)&&Lae(e,n,t[n]);return e};function Mae(e){let t=`请使用 '@${e}' 事件，不要放在 props 中`;return t+=`\nPlease use '@${e}' event instead of props`,t}var zae=(e,t)=>{for(const[n,r]of t)e[n]=r;return e};const $ae=e({props:{mode:{type:String,default:"default"},defaultContent:{type:Array,default:[]},defaultHtml:{type:String,default:""},defaultConfig:{type:Object,default:{}},modelValue:{type:String,default:""}},setup(e,i){const u=t(null),s=n(null),l=t(""),c=()=>{if(!u.value)return;const t=a(e.defaultContent);var n,r;!function(e){void 0===e&&(e={});var t=e.selector,n=void 0===t?"":t,r=e.content,o=void 0===r?[]:r,i=e.html,a=e.config,u=void 0===a?{}:a,s=e.mode,l="simple"===(void 0===s?"default":s)?Dae.simpleEditorConfig:Dae.editorConfig,c=Eae(Eae({},l.hoverbarKeys||{}),u.hoverbarKeys||{});kD({selector:n,config:Eae(Eae(Eae({},l),u),{hoverbarKeys:c}),content:o,html:i,plugins:Dae.plugins})}({selector:u.value,mode:e.mode,content:t||[],html:e.defaultHtml||e.modelValue||"",config:(n=Rae({},e.defaultConfig),r={onCreated(t){if(s.value=t,i.emit("onCreated",t),e.defaultConfig.onCreated){const e=Mae("onCreated");throw new Error(e)}},onChange(t){const n=t.getHtml();if(l.value=n,i.emit("update:modelValue",n),i.emit("onChange",t),e.defaultConfig.onChange){const e=Mae("onChange");throw new Error(e)}},onDestroyed(t){if(i.emit("onDestroyed",t),e.defaultConfig.onDestroyed){const e=Mae("onDestroyed");throw new Error(e)}},onMaxLength(t){if(i.emit("onMaxLength",t),e.defaultConfig.onMaxLength){const e=Mae("onMaxLength");throw new Error(e)}},onFocus(t){if(i.emit("onFocus",t),e.defaultConfig.onFocus){const e=Mae("onFocus");throw new Error(e)}},onBlur(t){if(i.emit("onBlur",t),e.defaultConfig.onBlur){const e=Mae("onBlur");throw new Error(e)}},customAlert(t,n){if(i.emit("customAlert",t,n),e.defaultConfig.customAlert){const e=Mae("customAlert");throw new Error(e)}},customPaste:(t,n)=>{if(e.defaultConfig.customPaste){const e=Mae("customPaste");throw new Error(e)}let r;return i.emit("customPaste",t,n,(e=>{r=e})),r}},_ae(n,Pae(r)))})};return r((()=>{c()})),o((()=>e.modelValue),(e=>{e!==l.value&&function(e){const t=s.value;null!=t&&t.setHtml(e)}(e)})),{box:u}}}),Hae={ref:"box",style:{height:"100%"}};var Vae=zae($ae,[["render",function(e,t,n,r,o,i){return u(),s("div",Hae,null,512)}]]);const Uae=e({props:{editor:{type:Object},mode:{type:String,default:"default"},defaultConfig:{type:Object,default:{}}},setup(e){const n=t(null);return i((()=>{const{editor:t}=e;null!=t&&(t=>{if(n.value){if(null==t)throw new Error("Not found instance of Editor when create <Toolbar/> component");qy.getToolbar(t)||Fae({editor:t,selector:n.value||"<div></div>",mode:e.mode,config:e.defaultConfig})}})(t)})),{selector:n}}}),Wae={ref:"selector"};var qae=zae(Uae,[["render",function(e,t,n,r,o,i){return u(),s("div",Wae,null,512)}]]);const Gae={class:"border-1 border-solid border-[var(--tags-view-border-color)]"},Kae=e({__name:"Editor",props:{editorId:l.string.def("wangeEditor-1"),height:l.oneOfType([Number,String]).def("500px"),editorConfig:{type:Object,default:()=>{}},modelValue:l.string.def("")},emits:["change","update:modelValue"],setup(e,{expose:r,emit:i}){const a=e,l=c(),b=f((()=>l.getCurrentLocale));!function(e){FC.changeLanguage(e)}(d(b).lang);const w=n(),E=t("");o((()=>a.modelValue),(e=>{e!==d(E)&&(E.value=e)}),{immediate:!0}),o((()=>E.value),(e=>{i("update:modelValue",e)}));const D=e=>{w.value=e},C=f((()=>Object.assign({readOnly:!1,customAlert:(e,t)=>{switch(t){case"success":y.success(e);break;case"info":default:y.info(e);break;case"warning":y.warning(e);break;case"error":y.error(e)}},autoFocus:!1,scroll:!0,uploadImgShowBase64:!0},a.editorConfig||{}))),x=f((()=>({height:m(a.height)?`${a.height}px`:a.height}))),S=e=>{i("change",e)};p((()=>{const e=d(w.value);null!==e&&(null==e||e.destroy())}));return r({getEditorRef:async()=>(await v(),d(w.value))}),(t,n)=>(u(),s("div",Gae,[h(d(qae),{editor:d(w),editorId:e.editorId,class:"border-bottom-1 border-solid border-[var(--tags-view-border-color)]"},null,8,["editor","editorId"]),h(d(Vae),{modelValue:E.value,"onUpdate:modelValue":n[0]||(n[0]=e=>E.value=e),editorId:e.editorId,defaultConfig:d(C),style:g(d(x)),onOnChange:S,onOnCreated:D},null,8,["modelValue","editorId","defaultConfig","style"])]))}});export{Kae as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
