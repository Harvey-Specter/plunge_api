import{Q as e,aj as a,az as l,d as t,Y as n,r,s as u,D as s,ay as i,aq as o,aB as m,v as d,$ as c,b1 as p,o as b,c as v,av as f,a as N,n as V,a7 as y,g as I,w as g,k as x,ax as h,bV as w,a0 as S,at as k,aw as A,bW as F,a8 as E,aa as j,V as _,an as K,ae as B}from"./index.63ad27ed.js";import{E as M}from"./el-input.ec3b36be.js";import{C as O,I as z,U as C}from"./event2.1741f333.js";import{o as D,d as T,i as $}from"./el-popper.2e0f947e.js";import{u as P}from"./index2.d473352e.js";import{u as Y}from"./index2.f758414f.js";var q={beforeMount(e,a){let l,t=null;const n=()=>a.value&&a.value(),r=()=>{Date.now()-l<100&&n(),clearInterval(t),t=null};D(e,"mousedown",(e=>{0===e.button&&(l=Date.now(),T(document,"mouseup",r),clearInterval(t),t=setInterval(n,100))}))}};const G=e({id:{type:String,default:void 0},step:{type:Number,default:1},stepStrictly:Boolean,max:{type:Number,default:Number.POSITIVE_INFINITY},min:{type:Number,default:Number.NEGATIVE_INFINITY},modelValue:Number,disabled:Boolean,size:a,controls:{type:Boolean,default:!0},controlsPosition:{type:String,default:"",values:["","right"]},valueOnClear:{type:[String,Number,null],validator:e=>null===e||l(e)||["min","max"].includes(e),default:null},name:String,label:String,placeholder:String,precision:{type:Number,validator:e=>e>=0&&e===Number.parseInt(`${e}`,10)}}),Q=["aria-label","onKeydown"],U=["aria-label","onKeydown"];const W=B(j(t({name:"ElInputNumber",props:G,emits:{[O]:(e,a)=>e!==a,blur:e=>e instanceof FocusEvent,focus:e=>e instanceof FocusEvent,[z]:e=>l(e)||$(e),[C]:e=>l(e)||$(e)},setup(e,{expose:a,emit:t}){const j=e,{t:B}=P(),O=n("input-number"),z=r(),C=u({currentValue:j.modelValue,userInput:null}),{formItem:D}=Y(),T=s((()=>l(j.modelValue)&&ee(j.modelValue,-1)<j.min)),G=s((()=>l(j.modelValue)&&ee(j.modelValue)>j.max)),W=s((()=>{const e=Z(j.step);return i(j.precision)?Math.max(Z(j.modelValue),e):(j.precision,j.precision)})),H=s((()=>j.controls&&"right"===j.controlsPosition)),J=o(),L=m(),R=s((()=>{if(null!==C.userInput)return C.userInput;let e=C.currentValue;if($(e))return"";if(l(e)){if(Number.isNaN(e))return"";i(j.precision)||(e=e.toFixed(j.precision))}return e})),X=(e,a)=>{if(i(a)&&(a=W.value),0===a)return Math.round(e);let l=String(e);const t=l.indexOf(".");if(-1===t)return e;if(!l.replace(".","").split("")[t+a])return e;const n=l.length;return"5"===l.charAt(n-1)&&(l=`${l.slice(0,Math.max(0,n-1))}6`),Number.parseFloat(Number(l).toFixed(a))},Z=e=>{if($(e))return 0;const a=e.toString(),l=a.indexOf(".");let t=0;return-1!==l&&(t=a.length-l-1),t},ee=(e,a=1)=>l(e)?X(e+j.step*a):C.currentValue,ae=()=>{if(L.value||G.value)return;const e=j.modelValue||0,a=ee(e);ne(a)},le=()=>{if(L.value||T.value)return;const e=j.modelValue||0,a=ee(e,-1);ne(a)},te=(e,a)=>{const{max:l,min:n,step:r,precision:u,stepStrictly:s,valueOnClear:o}=j;let m=Number(e);if($(e)||Number.isNaN(m))return null;if(""===e){if(null===o)return null;m=_(o)?{min:n,max:l}[o]:o}return s&&(m=Math.round(m/r)*r),i(u)||(m=X(m,u)),(m>l||m<n)&&(m=m>l?l:n,a&&t("update:modelValue",m)),m},ne=e=>{var a;const l=C.currentValue,n=te(e);l!==n&&(C.userInput=null,t("update:modelValue",n),t("input",n),t("change",n,l),null==(a=null==D?void 0:D.validate)||a.call(D,"change").catch((e=>K())),C.currentValue=n)},re=e=>C.userInput=e,ue=e=>{const a=""!==e?Number(e):"";(l(a)&&!Number.isNaN(a)||""===e)&&ne(a),C.userInput=null},se=e=>{t("focus",e)},ie=e=>{var a;t("blur",e),null==(a=null==D?void 0:D.validate)||a.call(D,"blur").catch((e=>K()))};return d((()=>j.modelValue),(e=>{C.currentValue=te(e,!0),C.userInput=null}),{immediate:!0}),c((()=>{var e;const{min:a,max:n,modelValue:r}=j,u=null==(e=z.value)?void 0:e.input;if(u.setAttribute("role","spinbutton"),Number.isFinite(n)?u.setAttribute("aria-valuemax",String(n)):u.removeAttribute("aria-valuemax"),Number.isFinite(a)?u.setAttribute("aria-valuemin",String(a)):u.removeAttribute("aria-valuemin"),u.setAttribute("aria-valuenow",String(C.currentValue)),u.setAttribute("aria-disabled",String(L.value)),!l(r)&&null!=r){let e=Number(r);Number.isNaN(e)&&(e=null),t("update:modelValue",e)}})),p((()=>{var e;const a=null==(e=z.value)?void 0:e.input;null==a||a.setAttribute("aria-valuenow",`${C.currentValue}`)})),a({focus:()=>{var e,a;null==(a=null==(e=z.value)?void 0:e.focus)||a.call(e)},blur:()=>{var e,a;null==(a=null==(e=z.value)?void 0:e.blur)||a.call(e)}}),(e,a)=>(b(),v("div",{class:V([N(O).b(),N(O).m(N(J)),N(O).is("disabled",N(L)),N(O).is("without-controls",!e.controls),N(O).is("controls-right",N(H))]),onDragstart:a[0]||(a[0]=E((()=>{}),["prevent"]))},[e.controls?f((b(),v("span",{key:0,role:"button","aria-label":N(B)("el.inputNumber.decrease"),class:V([N(O).e("decrease"),N(O).is("disabled",N(T))]),onKeydown:y(le,["enter"])},[I(N(S),null,{default:g((()=>[N(H)?(b(),x(N(h),{key:0})):(b(),x(N(w),{key:1}))])),_:1})],42,Q)),[[N(q),le]]):k("v-if",!0),e.controls?f((b(),v("span",{key:1,role:"button","aria-label":N(B)("el.inputNumber.increase"),class:V([N(O).e("increase"),N(O).is("disabled",N(G))]),onKeydown:y(ae,["enter"])},[I(N(S),null,{default:g((()=>[N(H)?(b(),x(N(A),{key:0})):(b(),x(N(F),{key:1}))])),_:1})],42,U)),[[N(q),ae]]):k("v-if",!0),I(N(M),{id:e.id,ref_key:"input",ref:z,type:"number",step:e.step,"model-value":N(R),placeholder:e.placeholder,disabled:N(L),size:N(J),max:e.max,min:e.min,name:e.name,label:e.label,"validate-event":!1,onKeydown:[y(E(ae,["prevent"]),["up"]),y(E(le,["prevent"]),["down"])],onBlur:ie,onFocus:se,onInput:re,onChange:ue},null,8,["id","step","model-value","placeholder","disabled","size","max","min","name","label","onKeydown"])],34))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue"]]));export{W as E,q as v};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
