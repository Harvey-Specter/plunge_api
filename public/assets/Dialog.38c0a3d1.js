import{Q as e,b6 as o,d as l,ak as s,D as a,o as t,c as n,e as r,a2 as c,n as d,a as u,t as i,g as f,w as p,h as m,as as y,a0 as v,at as b,a4 as g,ac as h,a9 as C,c1 as x,R as k,aA as $,bN as w,r as I,az as A,bl as B,c2 as R,v as _,aa as F,$ as D,aI as E,c3 as O,P as j,aW as z,Y as M,ar as S,av as H,aQ as L,a5 as T,i as N,bO as q,ae as V,B as P,bX as Q,E as U,a6 as X,a3 as K,X as W,x as Y}from"./index.f2e05143.js";import{u as Z,a as G,b as J,E as ee}from"./el-overlay.df6b9408.js";import{u as oe}from"./index2.309e467b.js";import{F as le,e as se}from"./el-popper.7090df9f.js";import{c as ae}from"./refs2.9b43771e.js";import{U as te}from"./event2.1741f333.js";import{u as ne}from"./index2.bac0fa94.js";import{u as re}from"./el-button.c85984df.js";const ce=Symbol("dialogInjectionKey"),de=e({center:{type:Boolean,default:!1},closeIcon:{type:o,default:""},customClass:{type:String,default:""},draggable:{type:Boolean,default:!1},fullscreen:{type:Boolean,default:!1},showClose:{type:Boolean,default:!0},title:{type:String,default:""}}),ue=["aria-label"],ie=["id"];var fe=C(l({name:"ElDialogContent",props:de,emits:{close:()=>!0},setup(e){const o=e,{t:l}=oe(),{Close:C}=x,{dialogRef:k,headerRef:$,bodyId:w,ns:I,style:A}=s(ce),{focusTrapRef:B}=s(le),R=ae(B,k),_=a((()=>o.draggable));return Z(k,$,_),(e,o)=>(t(),n("div",{ref:u(R),class:d([u(I).b(),u(I).is("fullscreen",e.fullscreen),u(I).is("draggable",u(_)),{[u(I).m("center")]:e.center},e.customClass]),style:g(u(A)),tabindex:"-1",onClick:o[1]||(o[1]=h((()=>{}),["stop"]))},[r("header",{ref_key:"headerRef",ref:$,class:d(u(I).e("header"))},[c(e.$slots,"header",{},(()=>[r("span",{role:"heading",class:d(u(I).e("title"))},i(e.title),3)])),e.showClose?(t(),n("button",{key:0,"aria-label":u(l)("el.dialog.close"),class:d(u(I).e("headerbtn")),type:"button",onClick:o[0]||(o[0]=o=>e.$emit("close"))},[f(u(v),{class:d(u(I).e("close"))},{default:p((()=>[(t(),m(y(e.closeIcon||u(C))))])),_:1},8,["class"])],10,ue)):b("v-if",!0)],2),r("div",{id:u(w),class:d(u(I).e("body"))},[c(e.$slots,"default")],10,ie),e.$slots.footer?(t(),n("footer",{key:0,class:d(u(I).e("footer"))},[c(e.$slots,"footer")],2)):b("v-if",!0)],6))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog-content.vue"]]);const pe=e({...de,appendToBody:{type:Boolean,default:!1},beforeClose:{type:k(Function)},destroyOnClose:{type:Boolean,default:!1},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},lockScroll:{type:Boolean,default:!0},modal:{type:Boolean,default:!0},openDelay:{type:Number,default:0},closeDelay:{type:Number,default:0},top:{type:String},modelValue:{type:Boolean,required:!0},modalClass:String,width:{type:[String,Number]},zIndex:{type:Number},trapFocus:{type:Boolean,default:!1}}),me=["aria-label","aria-labelledby","aria-describedby"];const ye=V(C(l({name:"ElDialog",props:pe,emits:{open:()=>!0,opened:()=>!0,close:()=>!0,closed:()=>!0,[te]:e=>$(e),openAutoFocus:()=>!0,closeAutoFocus:()=>!0},setup(e,{expose:o}){const l=e,s=z();re({scope:"el-dialog",from:"the title slot",replacement:"the header slot",version:"3.0.0",ref:"https://element-plus.org/en-US/component/dialog.html#slots"},a((()=>!!s.title)));const n=M("dialog"),i=I(),y=I(),v=I(),{visible:h,titleId:C,bodyId:x,style:k,rendered:$,zIndex:V,afterEnter:P,afterLeave:Q,beforeLeave:U,handleClose:X,onModalClick:K,onOpenAutoFocus:W,onCloseAutoFocus:Y,onCloseRequested:Z}=((e,o)=>{const l=E().emit,{nextZIndex:s}=w();let t="";const n=ne(),r=ne(),c=I(!1),d=I(!1),u=I(!1),i=I(e.zIndex||s());let f,p;const m=a((()=>A(e.width)?`${e.width}px`:e.width)),y=B("namespace",R),v=a((()=>{const o={},l=`--${y.value}-dialog`;return e.fullscreen||(e.top&&(o[`${l}-margin-top`]=e.top),e.width&&(o[`${l}-width`]=m.value)),o}));function b(){null==p||p(),null==f||f(),e.openDelay&&e.openDelay>0?({stop:f}=O((()=>C()),e.openDelay)):C()}function g(){null==f||f(),null==p||p(),e.closeDelay&&e.closeDelay>0?({stop:p}=O((()=>x()),e.closeDelay)):x()}function h(){e.beforeClose?e.beforeClose((function(e){e||(d.value=!0,c.value=!1)})):g()}function C(){j&&(c.value=!0)}function x(){c.value=!1}return e.lockScroll&&G(c),_((()=>e.modelValue),(a=>{a?(d.value=!1,b(),u.value=!0,l("open"),i.value=e.zIndex?i.value++:s(),F((()=>{o.value&&(o.value.scrollTop=0)}))):c.value&&g()})),_((()=>e.fullscreen),(e=>{o.value&&(e?(t=o.value.style.transform,o.value.style.transform=""):o.value.style.transform=t)})),D((()=>{e.modelValue&&(c.value=!0,u.value=!0,b())})),{afterEnter:function(){l("opened")},afterLeave:function(){l("closed"),l(te,!1),e.destroyOnClose&&(u.value=!1)},beforeLeave:function(){l("close")},handleClose:h,onModalClick:function(){e.closeOnClickModal&&h()},close:g,doClose:x,onOpenAutoFocus:function(){l("openAutoFocus")},onCloseAutoFocus:function(){l("closeAutoFocus")},onCloseRequested:function(){e.closeOnPressEscape&&h()},titleId:n,bodyId:r,closed:d,style:v,rendered:u,visible:c,zIndex:i}})(l,i);S(ce,{dialogRef:i,headerRef:y,bodyId:x,ns:n,rendered:$,style:k});const oe=J(K),le=a((()=>l.draggable&&!l.fullscreen));return o({visible:h,dialogContentRef:v}),(e,o)=>(t(),m(q,{to:"body",disabled:!e.appendToBody},[f(N,{name:"dialog-fade",onAfterEnter:u(P),onAfterLeave:u(Q),onBeforeLeave:u(U),persisted:""},{default:p((()=>[H(f(u(ee),{"custom-mask-event":"",mask:e.modal,"overlay-class":e.modalClass,"z-index":u(V)},{default:p((()=>[r("div",{role:"dialog","aria-modal":"true","aria-label":e.title||void 0,"aria-labelledby":e.title?void 0:u(C),"aria-describedby":u(x),class:d(`${u(n).namespace.value}-overlay-dialog`),onClick:o[0]||(o[0]=(...e)=>u(oe).onClick&&u(oe).onClick(...e)),onMousedown:o[1]||(o[1]=(...e)=>u(oe).onMousedown&&u(oe).onMousedown(...e)),onMouseup:o[2]||(o[2]=(...e)=>u(oe).onMouseup&&u(oe).onMouseup(...e))},[f(u(se),{loop:"",trapped:u(h),"focus-start-el":"container",onFocusAfterTrapped:u(W),onFocusAfterReleased:u(Y),onReleaseRequested:u(Z)},{default:p((()=>[u($)?(t(),m(fe,{key:0,ref_key:"dialogContentRef",ref:v,"custom-class":e.customClass,center:e.center,"close-icon":e.closeIcon,draggable:u(le),fullscreen:e.fullscreen,"show-close":e.showClose,style:g(u(k)),title:e.title,onClose:u(X)},T({header:p((()=>[e.$slots.title?c(e.$slots,"title",{key:1}):c(e.$slots,"header",{key:0,close:u(X),titleId:u(C),titleClass:u(n).e("title")})])),default:p((()=>[c(e.$slots,"default")])),_:2},[e.$slots.footer?{name:"footer",fn:p((()=>[c(e.$slots,"footer")]))}:void 0]),1032,["custom-class","center","close-icon","draggable","fullscreen","show-close","style","title","onClose"])):b("v-if",!0)])),_:3},8,["trapped","onFocusAfterTrapped","onFocusAfterReleased","onReleaseRequested"])],42,me)])),_:3},8,["mask","overlay-class","z-index"]),[[L,u(h)]])])),_:3},8,["onAfterEnter","onAfterLeave","onBeforeLeave"])],8,["disabled"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue"]]));const ve={class:"flex justify-between"},be=l({__name:"Dialog",props:{modelValue:P.bool.def(!1),title:P.string.def("Dialog"),fullscreen:P.bool.def(!0),maxHeight:P.oneOfType([String,Number]).def("500px")},setup(e){const o=e,l=z(),s=a((()=>{const e=["fullscreen","title","maxHeight"],l={...W(),...o};for(const o in l)-1!==e.indexOf(o)&&delete l[o];return l})),n=I(!1),d=()=>{n.value=!u(n)},y=I(Q(o.maxHeight)?`${o.maxHeight}px`:o.maxHeight);_((()=>n.value),(async e=>{if(await F(),e){const e=document.documentElement.offsetHeight;y.value=e-55-60-(l.footer?63:0)+"px"}else y.value=Q(o.maxHeight)?`${o.maxHeight}px`:o.maxHeight}),{immediate:!0});const v=a((()=>({height:u(y)})));return(o,a)=>{const y=U("Icon");return t(),m(u(ye),X(u(s),{fullscreen:n.value,"destroy-on-close":"","lock-scroll":"",draggable:"","close-on-click-modal":!1}),T({header:p((()=>[r("div",ve,[c(o.$slots,"title",{},(()=>[Y(i(e.title),1)])),e.fullscreen?(t(),m(y,{key:0,class:"mr-18px cursor-pointer is-hover mt-2px",icon:n.value?"zmdi:fullscreen-exit":"zmdi:fullscreen",color:"var(--el-color-info)",onClick:d},null,8,["icon"])):b("",!0)])])),default:p((()=>[f(u(K),{style:g(u(v))},{default:p((()=>[c(o.$slots,"default")])),_:3},8,["style"])])),_:2},[u(l).footer?{name:"footer",fn:p((()=>[c(o.$slots,"footer")]))}:void 0]),1040,["fullscreen"])}}});export{be as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
