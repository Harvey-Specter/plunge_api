import{P as e,d as t,Y as l,aR as a,r as o,D as n,bf as r,$ as s,ad as i,o as u,k as c,w as d,c as v,a2 as p,g as m,a as h,cx as f,n as g,a0 as b,a4 as w,a8 as x,at as y,h as _,aa as k,cy as C,ae as M,Q as S,b6 as V,ar as I,R as T,ak as $,aD as P,e as E,as as z,t as L,aI as A,aE as R,aU as j,E as B,av as O,aQ as D,bO as N,au as H,c3 as q,c4 as F,aV as W,a6 as G,ax as U,aH as Q,s as K,v as X,b0 as Y,aF as J,G as Z,cd as ee,cz as te,V as le,W as ae,ab as oe,aX as ne,x as re,j as se,b as ie,l as ue,cA as ce,bk as de,cB as ve,cC as pe,u as me,m as he,bj as fe,a3 as ge,c0 as be,c5 as we,cD as xe,cE as ye,bh as _e,F as ke,cF as Ce,cG as Me,B as Se,bQ as Ve,q as Ie,cH as Te,_ as $e,cI as Pe,T as Ee,aO as ze}from"./index.701681eb.js";import{E as Le}from"./el-overlay.bdf8afb7.js";import{E as Ae}from"./el-divider.56b4f6b6.js";import{_ as Re,a as je}from"./LocaleDropdown.036d35ca.js";import{_ as Be}from"./plugin-vue_export-helper.21dcd24c.js";import{b as Oe,c as De,u as Ne}from"./use-dialog2.545d2e9f.js";import{e as He,E as qe,f as Fe}from"./el-popper.e9e2fc16.js";import{u as We,T as Ge,E as Ue}from"./el-button.c81d4f55.js";import{u as Qe}from"./index2.411e8ed3.js";import{a as Ke,b as Xe,f as Ye}from"./tree.9e4d3f05.js";import{t as Je}from"./aria2.b5095a02.js";import{_ as Ze}from"./index2.42d1d9cc.js";import{m as et}from"./typescript2.0e462989.js";import{b as tt,a as lt,E as at}from"./el-dropdown-item.7009ad05.js";import{_ as ot}from"./logo.32bb2b9e.js";import{E as nt}from"./el-message-box.2a623809.js";import"./el-input.ed535820.js";import{b as rt}from"./index.66dddb7d.js";import"./scroll2.58f9a7d9.js";import"./vnode2.31a80e3f.js";import"./el-switch.8b8da31d.js";import"./validator2.d2a80b6f.js";import"./event2.1741f333.js";import"./index2.bc62f99f.js";import"./index2.01250fd4.js";import"./useIcon.28eb236a.js";import"./refs2.946bb193.js";import"./useAxios.51602908.js";const st=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach((e=>{e()}))}},it=e=>e**3,ut=Symbol("breadcrumbKey"),ct=["onClick"];const dt=M(k(t({name:"ElBacktop",props:{visibilityHeight:{type:Number,default:200},target:{type:String,default:""},right:{type:Number,default:40},bottom:{type:Number,default:40}},emits:{click:e=>e instanceof MouseEvent},setup(e,{emit:t}){const k=e,M=l("backtop"),S=a(),V=a(),I=o(!1),T=n((()=>({right:`${k.right}px`,bottom:`${k.bottom}px`}))),$=()=>{if(!S.value)return;const e=Date.now(),t=S.value.scrollTop,l=()=>{if(!S.value)return;const a=(Date.now()-e)/500;var o;a<1?(S.value.scrollTop=t*(1-((o=a)<.5?it(2*o)/2:1-it(2*(1-o))/2)),requestAnimationFrame(l)):S.value.scrollTop=0};requestAnimationFrame(l)},P=e=>{$(),t("click",e)},E=C((()=>{S.value&&(I.value=S.value.scrollTop>=k.visibilityHeight)}),300);return r(V,"scroll",E),s((()=>{var e;V.value=document,S.value=document.documentElement,k.target&&(S.value=null!=(e=document.querySelector(k.target))?e:void 0,S.value||i("ElBacktop",`target is not existed: ${k.target}`),V.value=S.value)})),(e,t)=>(u(),c(_,{name:`${h(M).namespace.value}-fade-in`},{default:d((()=>[I.value?(u(),v("div",{key:0,style:w(h(T)),class:g(h(M).b()),onClick:x(P,["stop"])},[p(e.$slots,"default",{},(()=>[m(h(b),{class:g(h(M).e("icon"))},{default:d((()=>[m(h(f))])),_:1},8,["class"])]))],14,ct)):y("v-if",!0)])),_:3},8,["name"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/backtop/src/backtop.vue"]]));var vt=k(t({name:"ElBreadcrumb",props:S({separator:{type:String,default:"/"},separatorIcon:{type:V,default:""}}),setup(e){const t=e,a=l("breadcrumb"),n=o();return I(ut,t),s((()=>{const e=n.value.querySelectorAll(`.${a.e("item")}`);e.length&&e[e.length-1].setAttribute("aria-current","page")})),(e,t)=>(u(),v("div",{ref_key:"breadcrumb",ref:n,class:g(h(a).b()),"aria-label":"Breadcrumb",role:"navigation"},[p(e.$slots,"default")],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);var pt=k(t({name:"ElBreadcrumbItem",props:S({to:{type:T([String,Object]),default:""},replace:{type:Boolean,default:!1}}),setup(e){const t=e,a=A(),n=$(ut,void 0),r=l("breadcrumb"),{separator:s,separatorIcon:i}=P(n),m=a.appContext.config.globalProperties.$router,f=o(),w=()=>{t.to&&m&&(t.replace?m.replace(t.to):m.push(t.to))};return(e,t)=>(u(),v("span",{class:g(h(r).e("item"))},[E("span",{ref_key:"link",ref:f,class:g([h(r).e("inner"),h(r).is("link",!!e.to)]),role:"link",onClick:w},[p(e.$slots,"default")],2),h(i)?(u(),c(h(b),{key:0,class:g(h(r).e("separator"))},{default:d((()=>[(u(),c(z(h(i))))])),_:1},8,["class"])):(u(),v("span",{key:1,class:g(h(r).e("separator")),role:"presentation"},L(h(s)),3))],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);const mt=M(vt,{BreadcrumbItem:pt}),ht=R(pt),ft={beforeMount(t,l){var a,o;t._handleResize=()=>{var e;t&&(null==(e=l.value)||e.call(l,t))},a=t,o=t._handleResize,e&&a&&(a.__resizeListeners__||(a.__resizeListeners__=[],a.__ro__=new ResizeObserver(st),a.__ro__.observe(a)),a.__resizeListeners__.push(o))},beforeUnmount(e){var t,l,a;t=e,l=e._handleResize,t&&t.__resizeListeners__&&(t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(l),1),t.__resizeListeners__.length||null==(a=t.__ro__)||a.disconnect())}},gt=S({...Oe,direction:{type:String,default:"rtl",values:["ltr","rtl","ttb","btt"]},size:{type:[String,Number],default:"30%"},withHeader:{type:Boolean,default:!0},modalFade:{type:Boolean,default:!0}}),bt=t({name:"ElDrawer",components:{ElOverlay:Le,ElFocusTrap:He,ElIcon:b,Close:j},props:gt,emits:De,setup(e,{slots:t}){We({scope:"el-drawer",from:"the title slot",replacement:"the header slot",version:"3.0.0",ref:"https://element-plus.org/en-US/component/drawer.html#slots"},n((()=>!!t.title)));const a=o(),r=o(),s=l("drawer"),{t:i}=Qe(),u=n((()=>"rtl"===e.direction||"ltr"===e.direction)),c=n((()=>"number"==typeof e.size?`${e.size}px`:e.size));return{...Ne(e,a),drawerRef:a,focusStartRef:r,isHorizontal:u,drawerSize:c,ns:s,t:i}}}),wt=["aria-label","aria-labelledby","aria-describedby"],xt=["id"],yt=["aria-label"],_t=["id"];const kt=M(k(bt,[["render",function(e,t,l,a,o,n){const r=B("close"),s=B("el-icon"),i=B("el-focus-trap"),h=B("el-overlay");return u(),c(N,{to:"body",disabled:!e.appendToBody},[m(_,{name:e.ns.b("fade"),onAfterEnter:e.afterEnter,onAfterLeave:e.afterLeave,onBeforeLeave:e.beforeLeave,persisted:""},{default:d((()=>[O(m(h,{mask:e.modal,"overlay-class":e.modalClass,"z-index":e.zIndex,onClick:e.onModalClick},{default:d((()=>[m(i,{loop:"",trapped:e.visible,"focus-trap-el":e.drawerRef,"focus-start-el":e.focusStartRef,onReleaseRequested:e.onCloseRequested},{default:d((()=>[E("div",{ref:"drawerRef","aria-modal":"true","aria-label":e.title||void 0,"aria-labelledby":e.title?void 0:e.titleId,"aria-describedby":e.bodyId,class:g([e.ns.b(),e.direction,e.visible&&"open",e.customClass]),style:w(e.isHorizontal?"width: "+e.drawerSize:"height: "+e.drawerSize),role:"dialog",onClick:t[1]||(t[1]=x((()=>{}),["stop"]))},[E("span",{ref:"focusStartRef",class:g(e.ns.e("sr-focus")),tabindex:"-1"},null,2),e.withHeader?(u(),v("header",{key:0,class:g(e.ns.e("header"))},[e.$slots.title?p(e.$slots,"title",{key:1},(()=>[y(" DEPRECATED SLOT ")])):p(e.$slots,"header",{key:0,close:e.handleClose,titleId:e.titleId,titleClass:e.ns.e("title")},(()=>[e.$slots.title?y("v-if",!0):(u(),v("span",{key:0,id:e.titleId,role:"heading",class:g(e.ns.e("title"))},L(e.title),11,xt))])),e.showClose?(u(),v("button",{key:2,"aria-label":e.t("el.drawer.close"),class:g(e.ns.e("close-btn")),type:"button",onClick:t[0]||(t[0]=(...t)=>e.handleClose&&e.handleClose(...t))},[m(s,{class:g(e.ns.e("close"))},{default:d((()=>[m(r)])),_:1},8,["class"])],10,yt)):y("v-if",!0)],2)):y("v-if",!0),e.rendered?(u(),v("div",{key:1,id:e.bodyId,class:g(e.ns.e("body"))},[p(e.$slots,"default")],10,_t)):y("v-if",!0),e.$slots.footer?(u(),v("div",{key:2,class:g(e.ns.e("footer"))},[p(e.$slots,"footer")],2)):y("v-if",!0)],14,wt)])),_:3},8,["trapped","focus-trap-el","focus-start-el","onReleaseRequested"])])),_:3},8,["mask","overlay-class","z-index","onClick"]),[[D,e.visible]])])),_:3},8,["name","onAfterEnter","onAfterLeave","onBeforeLeave"])],8,["disabled"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/drawer/src/drawer.vue"]]));class Ct{constructor(e,t){this.parent=e,this.domNode=t,this.subIndex=0,this.subIndex=0,this.init()}init(){this.subMenuItems=this.domNode.querySelectorAll("li"),this.addListeners()}gotoSubIndex(e){e===this.subMenuItems.length?e=0:e<0&&(e=this.subMenuItems.length-1),this.subMenuItems[e].focus(),this.subIndex=e}addListeners(){const e=this.parent.domNode;Array.prototype.forEach.call(this.subMenuItems,(t=>{t.addEventListener("keydown",(t=>{let l=!1;switch(t.code){case H.down:this.gotoSubIndex(this.subIndex+1),l=!0;break;case H.up:this.gotoSubIndex(this.subIndex-1),l=!0;break;case H.tab:Je(e,"mouseleave");break;case H.enter:case H.space:l=!0,t.currentTarget.click()}return l&&(t.preventDefault(),t.stopPropagation()),!1}))}))}}class Mt{constructor(e,t){this.domNode=e,this.submenu=null,this.submenu=null,this.init(t)}init(e){this.domNode.setAttribute("tabindex","0");const t=this.domNode.querySelector(`.${e}-menu`);t&&(this.submenu=new Ct(this,t)),this.addListeners()}addListeners(){this.domNode.addEventListener("keydown",(e=>{let t=!1;switch(e.code){case H.down:Je(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(0),t=!0;break;case H.up:Je(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(this.submenu.subMenuItems.length-1),t=!0;break;case H.tab:Je(e.currentTarget,"mouseleave");break;case H.enter:case H.space:t=!0,e.currentTarget.click()}t&&e.preventDefault()}))}}class St{constructor(e,t){this.domNode=e,this.init(t)}init(e){const t=this.domNode.childNodes;Array.from(t).forEach((t=>{1===t.nodeType&&new Mt(t,e)}))}}var Vt=k(t({name:"ElMenuCollapseTransition",setup(){const e=l("menu");return{listeners:{onBeforeEnter:e=>e.style.opacity="0.2",onEnter(t,l){q(t,`${e.namespace.value}-opacity-transition`),t.style.opacity="1",l()},onAfterEnter(t){F(t,`${e.namespace.value}-opacity-transition`),t.style.opacity=""},onBeforeLeave(t){t.dataset||(t.dataset={}),W(t,e.m("collapse"))?(F(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),q(t,e.m("collapse"))):(q(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),F(t,e.m("collapse"))),t.style.width=`${t.scrollWidth}px`,t.style.overflow="hidden"},onLeave(e){q(e,"horizontal-collapse-transition"),e.style.width=`${e.dataset.scrollWidth}px`}}}}}),[["render",function(e,t,l,a,o,n){return u(),c(_,G({mode:"out-in"},e.listeners),{default:d((()=>[p(e.$slots,"default")])),_:3},16)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-collapse-transition.vue"]]);function It(e,t){const l=n((()=>{let l=e.parent;const a=[t.value];for(;"ElMenu"!==l.type.name;)l.props.index&&a.unshift(l.props.index),l=l.parent;return a}));return{parentMenu:n((()=>{let t=e.parent;for(;t&&!["ElMenu","ElSubMenu"].includes(t.type.name);)t=t.parent;return t})),indexPath:l}}function Tt(e){return n((()=>{const t=e.backgroundColor;return t?new Ge(t).shade(20).toString():""}))}const $t=(e,t)=>{const a=l("menu");return n((()=>a.cssVarBlock({"text-color":e.textColor||"","hover-text-color":e.textColor||"","bg-color":e.backgroundColor||"","hover-bg-color":Tt(e).value||"","active-color":e.activeTextColor||"",level:`${t}`})))},Pt=S({index:{type:String,required:!0},showTimeout:{type:Number,default:300},hideTimeout:{type:Number,default:300},popperClass:String,disabled:Boolean,popperAppendToBody:{type:Boolean,default:void 0},popperOffset:{type:Number,default:6}});var Et=t({name:"ElSubMenu",props:Pt,setup(e,{slots:t,expose:a}){const r=A(),{indexPath:u,parentMenu:c}=It(r,n((()=>e.index))),d=l("menu"),v=l("sub-menu"),p=$("rootMenu");p||i("ElSubMenu","can not inject root menu");const m=$(`subMenu:${c.value.uid}`);m||i("ElSubMenu","can not inject sub menu");const h=o({}),f=o({});let g;const w=o(!1),x=o(),y=o(null),_=n((()=>"horizontal"===R.value&&C.value?"bottom-start":"right-start")),k=n((()=>"horizontal"===R.value&&C.value||"vertical"===R.value&&!p.props.collapse?U:Q)),C=n((()=>0===m.level)),M=n((()=>void 0===e.popperAppendToBody?C.value:Boolean(e.popperAppendToBody))),S=n((()=>p.props.collapse?`${d.namespace.value}-zoom-in-left`:`${d.namespace.value}-zoom-in-top`)),V=n((()=>"horizontal"===R.value&&C.value?["bottom-start","bottom-end","top-start","top-end","right-start","left-start"]:["right-start","left-start","bottom-start","bottom-end","top-start","top-end"])),T=n((()=>p.openedMenus.includes(e.index))),P=n((()=>{let e=!1;return Object.values(h.value).forEach((t=>{t.active&&(e=!0)})),Object.values(f.value).forEach((t=>{t.active&&(e=!0)})),e})),E=n((()=>p.props.backgroundColor||"")),z=n((()=>p.props.activeTextColor||"")),L=n((()=>p.props.textColor||"")),R=n((()=>p.props.mode)),j=K({index:e.index,indexPath:u,active:P}),B=n((()=>"horizontal"!==R.value?{color:L.value}:{borderBottomColor:P.value?p.props.activeTextColor?z.value:"":"transparent",color:P.value?z.value:L.value})),N=e=>{var t,l,a;e||null==(a=null==(l=null==(t=y.value)?void 0:t.popperRef)?void 0:l.popperInstanceRef)||a.destroy()},H=()=>{"hover"===p.props.menuTrigger&&"horizontal"===p.props.mode||p.props.collapse&&"vertical"===p.props.mode||e.disabled||p.handleSubMenuClick({index:e.index,indexPath:u.value,active:P.value})},q=(t,l=e.showTimeout)=>{var a;("focus"!==t.type||t.relatedTarget)&&("click"===p.props.menuTrigger&&"horizontal"===p.props.mode||!p.props.collapse&&"vertical"===p.props.mode||e.disabled||(m.mouseInChild.value=!0,null==g||g(),({stop:g}=ee((()=>{p.openMenu(e.index,u.value)}),l)),M.value&&(null==(a=c.value.vnode.el)||a.dispatchEvent(new MouseEvent("mouseenter")))))},F=(t=!1)=>{var l,a;"click"===p.props.menuTrigger&&"horizontal"===p.props.mode||!p.props.collapse&&"vertical"===p.props.mode||(null==g||g(),m.mouseInChild.value=!1,({stop:g}=ee((()=>!w.value&&p.closeMenu(e.index,u.value)),e.hideTimeout)),M.value&&t&&"ElSubMenu"===(null==(l=r.parent)?void 0:l.type.name)&&(null==(a=m.handleMouseleave)||a.call(m,!0)))};X((()=>p.props.collapse),(e=>N(Boolean(e))));{const e=e=>{f.value[e.index]=e},t=e=>{delete f.value[e.index]};I(`subMenu:${r.uid}`,{addSubMenu:e,removeSubMenu:t,handleMouseleave:F,mouseInChild:w,level:m.level+1})}return a({opened:T}),s((()=>{p.addSubMenu(j),m.addSubMenu(j)})),Y((()=>{m.removeSubMenu(j),p.removeSubMenu(j)})),()=>{var l;const a=[null==(l=t.title)?void 0:l.call(t),J(b,{class:v.e("icon-arrow")},{default:()=>J(k.value)})],o=$t(p.props,m.level+1),n=p.isMenuPopup?J(qe,{ref:y,visible:T.value,effect:"light",pure:!0,offset:e.popperOffset,showArrow:!1,persistent:!0,popperClass:e.popperClass,placement:_.value,teleported:M.value,fallbackPlacements:V.value,transition:S.value,gpuAcceleration:!1},{content:()=>{var l;return J("div",{class:[d.m(R.value),d.m("popup-container"),e.popperClass],onMouseenter:e=>q(e,100),onMouseleave:()=>F(!0),onFocus:e=>q(e,100)},[J("ul",{class:[d.b(),d.m("popup"),d.m(`popup-${_.value}`)],style:o.value},[null==(l=t.default)?void 0:l.call(t)])])},default:()=>J("div",{class:v.e("title"),style:[B.value,{backgroundColor:E.value}],onClick:H},a)}):J(Z,{},[J("div",{class:v.e("title"),style:[B.value,{backgroundColor:E.value}],ref:x,onClick:H},a),J(Ze,{},{default:()=>{var e;return O(J("ul",{role:"menu",class:[d.b(),d.m("inline")],style:o.value},[null==(e=t.default)?void 0:e.call(t)]),[[D,T.value]])}})]);return J("li",{class:[v.b(),v.is("active",P.value),v.is("opened",T.value),v.is("disabled",e.disabled)],role:"menuitem",ariaHaspopup:!0,ariaExpanded:T.value,onMouseenter:q,onMouseleave:()=>F(!0),onFocus:q},[n])}}});const zt=S({mode:{type:String,values:["horizontal","vertical"],default:"vertical"},defaultActive:{type:String,default:""},defaultOpeneds:{type:T(Array),default:()=>et([])},uniqueOpened:Boolean,router:Boolean,menuTrigger:{type:String,values:["hover","click"],default:"hover"},collapse:Boolean,backgroundColor:String,textColor:String,activeTextColor:String,collapseTransition:{type:Boolean,default:!0},ellipsis:{type:Boolean,default:!0}}),Lt=e=>Array.isArray(e)&&e.every((e=>le(e)));var At=t({name:"ElMenu",props:zt,emits:{close:(e,t)=>le(e)&&Lt(t),open:(e,t)=>le(e)&&Lt(t),select:(e,t,l,a)=>le(e)&&Lt(t)&&ae(l)&&(void 0===a||a instanceof Promise)},setup(e,{emit:t,slots:a,expose:r}){const i=A(),u=i.appContext.config.globalProperties.$router,c=o(),d=l("menu"),v=l("sub-menu"),p=o(e.defaultOpeneds&&!e.collapse?e.defaultOpeneds.slice(0):[]),m=o(e.defaultActive),h=o({}),f=o({}),g=n((()=>"horizontal"===e.mode||"vertical"===e.mode&&e.collapse)),w=()=>{const t=m.value&&h.value[m.value];if(!t||"horizontal"===e.mode||e.collapse)return;t.indexPath.forEach((e=>{const t=f.value[e];t&&x(e,t.indexPath)}))},x=(l,a)=>{p.value.includes(l)||(e.uniqueOpened&&(p.value=p.value.filter((e=>a.includes(e)))),p.value.push(l),t("open",l,a))},y=(e,l)=>{const a=p.value.indexOf(e);-1!==a&&p.value.splice(a,1),t("close",e,l)},_=({index:e,indexPath:t})=>{p.value.includes(e)?y(e,t):x(e,t)},k=l=>{("horizontal"===e.mode||e.collapse)&&(p.value=[]);const{index:a,indexPath:o}=l;if(void 0!==a&&void 0!==o)if(e.router&&u){const e=l.route||a,n=u.push(e).then((e=>(e||(m.value=a),e)));t("select",a,o,{index:a,indexPath:o,route:e},n)}else m.value=a,t("select",a,o,{index:a,indexPath:o})},C=()=>{oe((()=>i.proxy.$forceUpdate()))};X((()=>e.defaultActive),(t=>{h.value[t]||(m.value=""),(t=>{const l=h.value,a=l[t]||m.value&&l[m.value]||l[e.defaultActive];a?(m.value=a.index,w()):m.value=t})(t)})),X(h.value,(()=>w())),X((()=>e.collapse),(e=>{e&&(p.value=[])}));{const t=e=>{f.value[e.index]=e},l=e=>{delete f.value[e.index]},a=e=>{h.value[e.index]=e},n=e=>{delete h.value[e.index]};I("rootMenu",K({props:e,openedMenus:p,items:h,subMenus:f,activeIndex:m,isMenuPopup:g,addMenuItem:a,removeMenuItem:n,addSubMenu:t,removeSubMenu:l,openMenu:x,closeMenu:y,handleMenuItemClick:k,handleSubMenuClick:_})),I(`subMenu:${i.uid}`,{addSubMenu:t,removeSubMenu:l,mouseInChild:o(!1),level:0})}s((()=>{w(),"horizontal"===e.mode&&new St(i.vnode.el,d.namespace.value)}));r({open:e=>{const{indexPath:t}=f.value[e];t.forEach((e=>x(e,t)))},close:y,handleResize:C});const M=e=>{const t=Array.isArray(e)?e:[e],l=[];return t.forEach((e=>{Array.isArray(e.children)?l.push(...M(e.children)):l.push(e)})),l};return()=>{var t,l,o,n;let r=null!=(l=null==(t=a.default)?void 0:t.call(a))?l:[];const s=[];if("horizontal"===e.mode&&c.value){const t=Array.from(null!=(n=null==(o=c.value)?void 0:o.childNodes)?n:[]).filter((e=>"#text"!==e.nodeName||e.nodeValue)),l=M(r),a=64,i=Number.parseInt(getComputedStyle(c.value).paddingLeft,10),u=Number.parseInt(getComputedStyle(c.value).paddingRight,10),d=c.value.clientWidth-i-u;let p=0,m=0;t.forEach(((e,t)=>{p+=e.offsetWidth||0,p<=d-a&&(m=t+1)}));const h=l.slice(0,m),f=l.slice(m);(null==f?void 0:f.length)&&e.ellipsis&&(r=h,s.push(J(Et,{index:"sub-menu-more",class:v.e("hide-arrow")},{title:()=>J(b,{class:v.e("icon-more")},{default:()=>J(te)}),default:()=>f})))}const i=$t(e,0),u=(p=J("ul",{key:String(e.collapse),role:"menubar",ref:c,style:i.value,class:{[d.b()]:!0,[d.m(e.mode)]:!0,[d.m("collapse")]:e.collapse}},[...r,...s]),e.ellipsis?(m=p,"horizontal"===e.mode?O(m,[[ft,C]]):m):p);var p,m;return e.collapseTransition&&"vertical"===e.mode?J(Vt,(()=>u)):u}}});const Rt=S({index:{type:T([String,null]),default:null},route:{type:T([String,Object])},disabled:Boolean});var jt=k(t({name:"ElMenuItem",components:{ElTooltip:qe},props:Rt,emits:{click:e=>le(e.index)&&Array.isArray(e.indexPath)},setup(e,{emit:t}){const a=A(),o=$("rootMenu"),r=l("menu"),u=l("menu-item");o||i("ElMenuItem","can not inject root menu");const{parentMenu:c,indexPath:d}=It(a,ne(e,"index")),v=$(`subMenu:${c.value.uid}`);v||i("ElMenuItem","can not inject sub menu");const p=n((()=>e.index===o.activeIndex)),m=K({index:e.index,indexPath:d,active:p});return s((()=>{v.addSubMenu(m),o.addMenuItem(m)})),Y((()=>{v.removeSubMenu(m),o.removeMenuItem(m)})),{Effect:Fe,parentMenu:c,rootMenu:o,active:p,nsMenu:r,nsMenuItem:u,handleClick:()=>{e.disabled||(o.handleMenuItemClick({index:e.index,indexPath:d.value,route:e.route}),t("click",m))}}}}),[["render",function(e,t,l,a,o,n){const r=B("el-tooltip");return u(),v("li",{class:g([e.nsMenuItem.b(),e.nsMenuItem.is("active",e.active),e.nsMenuItem.is("disabled",e.disabled)]),role:"menuitem",tabindex:"-1",onClick:t[0]||(t[0]=(...t)=>e.handleClick&&e.handleClick(...t))},["ElMenu"===e.parentMenu.type.name&&e.rootMenu.props.collapse&&e.$slots.title?(u(),c(r,{key:0,effect:e.Effect.DARK,placement:"right","fallback-placements":["left"],persistent:""},{content:d((()=>[p(e.$slots,"title")])),default:d((()=>[E("div",{class:g(e.nsMenu.be("tooltip","trigger"))},[p(e.$slots,"default")],2)])),_:3},8,["effect"])):(u(),v(Z,{key:1},[p(e.$slots,"default"),p(e.$slots,"title")],64))],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue"]]);var Bt=k(t({name:"ElMenuItemGroup",props:{title:String},setup:()=>({ns:l("menu-item-group")})}),[["render",function(e,t,l,a,o,n){return u(),v("li",{class:g(e.ns.b())},[E("div",{class:g(e.ns.e("title"))},[e.$slots.title?p(e.$slots,"title",{key:1}):(u(),v(Z,{key:0},[re(L(e.title),1)],64))],2),E("ul",null,[p(e.$slots,"default")])],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item-group.vue"]]);const Ot=M(At,{MenuItem:jt,MenuItemGroup:Bt,SubMenu:Et}),Dt=R(jt);R(Bt);const Nt=R(Et);var Ht=t({__name:"Backtop",setup(e){const{getPrefixCls:t,variables:l}=se(),a=t("backtop");return(e,t)=>(u(),c(h(dt),{class:g(`${h(a)}-backtop`),target:`.${h(l).namespace}-layout-content-scrollbar .${h(l).elNamespace}-scrollbar__wrap`},null,8,["class","target"]))}});const qt=e=>/^#([0-9a-fA-F]{3}|[0-9a-fA-f]{6})$/.test(e),Ft=(e,t)=>{let l=e.toLowerCase();if(qt(e)){if(4===l.length){let e="#";for(let t=1;t<4;t+=1)e+=l.slice(t,t+1).concat(l.slice(t,t+1));l=e}const e=[];for(let t=1;t<7;t+=2)e.push(parseInt("0x"+l.slice(t,t+2)));return t?"RGBA("+e.join(",")+","+t+")":"RGB("+e.join(",")+")"}return l},Wt=e=>{if(!qt(e))return;const[t,l,a]=Ft(e).replace(/(?:\(|\)|rgb|RGB)*/g,"").split(",").map((e=>Number(e)));return.299*t+.578*l+.114*a<192},Gt=(e,t)=>(e=e.indexOf("#")>=0?e.substring(1,e.length):e,t=Math.trunc(255*t/100),`#${Ut(e.substring(0,2),t)}${Ut(e.substring(2,4),t)}${Ut(e.substring(4,6),t)}`),Ut=(e,t)=>{const l=parseInt(e,16)+t,a=l>255?255:l;return a.toString(16).length>1?a.toString(16):`0${a.toString(16)}`};const Qt={class:"text-16px font-700"},Kt={class:"text-center"};var Xt=Be(t({__name:"Setting",setup(e){const{getPrefixCls:t}=se(),l=t("setting"),a=ie(),{t:r}=ue(),s=n((()=>a.getLayout)),i=o(!1),c=o(a.getTheme.topHeaderBgColor||""),p=e=>{const t=Wt(e),l=t?"#fff":"inherit",o=t?Gt(e,6):"#f6f6f6",n=t?e:"#eee";a.setTheme({topHeaderBgColor:e,topHeaderTextColor:l,topHeaderHoverColor:o,topToolBorderColor:n}),"top"===h(s)&&b(e)},f=o(a.getTheme.leftMenuBgColor||""),b=e=>{const t=ce("--el-color-primary",document.documentElement),l=Wt(e),o={leftMenuBorderColor:l?"inherit":"#eee",leftMenuBgColor:e,leftMenuBgLightColor:l?Gt(e,6):e,leftMenuBgActiveColor:l?"var(--el-color-primary)":Ft(h(t),.1),leftMenuCollapseBgActiveColor:l?"var(--el-color-primary)":Ft(h(t),.1),leftMenuTextColor:l?"#bfcbd9":"#333",leftMenuTextActiveColor:l?"#fff":"var(--el-color-primary)",logoTitleTextColor:l?"#fff":"inherit",logoBorderColor:l?e:"#eee"};a.setTheme(o),a.setCssVarTheme()};return"top"!==s.value||a.getIsDark||(c.value="#fff",p("#fff")),X((()=>s.value),(e=>{"top"!==e||a.getIsDark?b(h(f)):(c.value="#fff",p("#fff"))})),(e,t)=>{const a=B("Icon");return u(),v(Z,null,[E("div",{class:g([h(l),"fixed top-[45%] right-0 w-40px h-40px text-center leading-40px bg-[var(--el-color-primary)] cursor-pointer"]),onClick:t[0]||(t[0]=e=>i.value=!0)},[m(a,{icon:"ant-design:setting-outlined",color:"#fff"})],2),m(h(kt),{modelValue:i.value,"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),direction:"rtl",size:"350px"},{header:d((()=>[E("span",Qt,L(h(r)("setting.projectSetting")),1)])),default:d((()=>[E("div",Kt,[y(" 主题 "),m(h(Ae),null,{default:d((()=>[re(L(h(r)("setting.theme")),1)])),_:1}),m(h(Re)),y(" 布局\n      <ElDivider>{{ t('setting.layout') }}</ElDivider>\n      <LayoutRadioPicker />\n "),y(" 系统主题 \n      <ElDivider>{{ t('setting.systemTheme') }}</ElDivider>\n      <ColorRadioPicker\n        v-model=\"systemTheme\"\n        :schema=\"[\n          '#409eff',\n          '#009688',\n          '#536dfe',\n          '#ff5c93',\n          '#ee4f12',\n          '#0096c7',\n          '#9c27b0',\n          '#ff9800'\n        ]\"\n        @change=\"setSystemTheme\"\n      />\n"),y(" 头部主题 \n      <ElDivider>{{ t('setting.headerTheme') }}</ElDivider>\n      <ColorRadioPicker\n        v-model=\"headerTheme\"\n        :schema=\"[\n          '#fff',\n          '#151515',\n          '#5172dc',\n          '#e74c3c',\n          '#24292e',\n          '#394664',\n          '#009688',\n          '#383f45'\n        ]\"\n        @change=\"setHeaderTheme\"\n      />\n"),y(" 菜单主题 \n      <template v-if=\"layout !== 'top'\">\n        <ElDivider>{{ t('setting.menuTheme') }}</ElDivider>\n        <ColorRadioPicker\n          v-model=\"menuTheme\"\n          :schema=\"[\n            '#fff',\n            '#001529',\n            '#212121',\n            '#273352',\n            '#191b24',\n            '#383f45',\n            '#001628',\n            '#344058'\n          ]\"\n          @change=\"setMenuTheme\"\n        />\n      </template>\n      ")])])),_:1},8,["modelValue"])],64)}}}),[["__scopeId","data-v-e54c0a20"]]);const Yt=(e,t)=>(Ke(e,(e=>e.path===t))||[]).map((e=>e.path)),Jt=(e=[],t)=>{const l=a=>(a||e).map((a=>{var n;const r=null!=(n=a.meta)?n:{};if(!r.hidden){const{oneShowingChild:n,onlyOneChild:s}=((e=[],t)=>{const l=o(),a=e.filter((e=>{var t;return!(null!=(t=e.meta)?t:{}).hidden&&(l.value=e,!0)}));return 1===a.length?{oneShowingChild:!0,onlyOneChild:h(l)}:a.length?{oneShowingChild:!1,onlyOneChild:h(l)}:(l.value={...t,path:"",noShowingChildren:!0},{oneShowingChild:!0,onlyOneChild:h(l)})})(a.children,a),i=ve(a.path)?a.path:Yt(e,a.path).join("/"),{renderMenuTitle:u}={renderMenuTitle:e=>{const{t:t}=ue(),{title:l="Please set title",icon:a}=e;return a?m(Z,null,[m(de,{icon:e.icon},null),m("span",{class:"v-menu__title"},[t(l)])]):m("span",{class:"v-menu__title"},[t(l)])}};if(!n||(null==s?void 0:s.children)&&!(null==s?void 0:s.noShowingChildren)||(null==r?void 0:r.alwaysShow)){const{getPrefixCls:e}=se(),o=e("menu-popper");return m(Nt,{index:i,popperClass:"vertical"===t?`${o}--vertical`:`${o}--horizontal`},{title:()=>u(r),default:()=>l(a.children)})}return m(Dt,{index:s?pe(i,s.path):i},{default:()=>u(s?null==s?void 0:s.meta:r)})}}));return{renderMenuItem:l}};const{getPrefixCls:Zt}=se(),el=Zt("menu");var tl=t({name:"Menu",props:{menuSelect:{type:Function,default:void 0}},setup(e){const t=ie(),l=n((()=>t.getLayout)),{push:a,currentRoute:o}=me(),r=he(),s=n((()=>["classic","topLeft","cutMenu"].includes(h(l))?"vertical":"horizontal")),i=n((()=>"cutMenu"===h(l)?r.getMenuTabRouters:r.getRouters)),u=n((()=>t.getCollapse)),c=n((()=>t.getUniqueOpened)),d=n((()=>{const{meta:e,path:t}=h(o);return e.activeMenu?e.activeMenu:t})),v=t=>{e.menuSelect&&e.menuSelect(t),ve(t)?window.open(t):(console.log("push-===",t),a(t))},p=()=>{if("top"===h(l))return f();{let t;return m(ge,null,"function"==typeof(e=t=f())||"[object Object]"===Object.prototype.toString.call(e)&&!fe(e)?t:{default:()=>[t]})}var e},f=()=>m(Ot,{defaultActive:h(d),mode:h(s),collapse:"top"!==h(l)&&"cutMenu"!==h(l)&&h(u),uniqueOpened:"top"!==h(l)&&h(c),backgroundColor:"var(--left-menu-bg-color)",textColor:"var(--left-menu-text-color)",activeTextColor:"var(--left-menu-text-active-color)",onSelect:v},{default:()=>{const{renderMenuItem:e}=Jt(h(i),h(s));return e()}});return()=>m("div",{id:el,class:[`${el} ${el}__${h(s)}`,"h-[100%] overflow-hidden flex-col bg-[var(--left-menu-bg-color)]",{"w-[var(--left-menu-min-width)]":h(u)&&"cutMenu"!==h(l),"w-[var(--left-menu-max-width)]":!h(u)&&"cutMenu"!==h(l)}]},[p()])}}),ll=Be(tl,[["__scopeId","data-v-c68359d8"]]);const al=K({}),ol=(e,t)=>{var l;const a=[];for(const o of e){let e=null;const n=null!=(l=o.meta)?l:{};if(!n.hidden||n.showMainRoute){const l=Yt(t,o.path),n=ve(o.path)?o.path:l.join("/");e=be(o),e.path=n,o.children&&e&&(e.children=ol(o.children,t)),e&&a.push(e),l.length&&Reflect.has(al,l[0])&&al[l[0]].push(n)}}return a},{getPrefixCls:nl,variables:rl}=se(),sl=nl("tab-menu");var il=t({name:"TabMenu",setup(){const{push:e,currentRoute:t}=me(),{t:l}=ue(),a=ie(),r=n((()=>a.getCollapse)),s=he(),i=n((()=>s.getRouters)),u=n((()=>h(i).filter((e=>{var t;return!(null==(t=null==e?void 0:e.meta)?void 0:t.hidden)})))),c=()=>{a.setCollapse(!h(r))};X((()=>i.value),(e=>{(e=>{var t;for(const l of e){const e=null!=(t=l.meta)?t:{};(null==e?void 0:e.hidden)||(al[l.path]=[])}})(e),ol(e,e)}),{immediate:!0,deep:!0});const d=o(!0);X((()=>r.value),(e=>{e?d.value=!e:setTimeout((()=>{d.value=!e}),200)}));const v=o(!1),p=o(""),f=e=>{const{path:l}=h(t);return!!al[e].includes(l)},g=()=>{h(v)&&(v.value=!1)};return()=>m("div",{id:`${rl.namespace}-menu`,class:[sl,"relative bg-[var(--left-menu-bg-color)] top-1px z-999",{"w-[var(--tab-menu-max-width)]":!h(r),"w-[var(--tab-menu-min-width)]":h(r)}],onMouseleave:g},[m(ge,{class:"!h-[calc(100%-var(--tab-menu-collapse-height)-1px)]"},{default:()=>[m("div",null,{default:()=>h(u).map((t=>{var a,o,n,r,i,u;const c=(null==(a=t.meta)?void 0:a.alwaysShow)||(null==(o=null==t?void 0:t.children)?void 0:o.length)&&(null==(n=null==t?void 0:t.children)?void 0:n.length)>1?t:{...(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]),path:pe(t.path,null==(r=(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]))?void 0:r.path)};return m("div",{class:[`${sl}__item`,"text-center text-12px relative py-12px cursor-pointer",{"is-active":f(t.path)}],onClick:()=>{(t=>{ve(t.path)?window.open(t.path):(p.value=t.children?t.path:t.path.split("/")[0],t.children?(v.value=!h(v),h(v)&&s.setMenuTabRouters(be(t.children).map((e=>(e.path=pe(h(p),e.path),e))))):(e(t.path),s.setMenuTabRouters([]),v.value=!1))})(c)}},[m("div",null,[m(de,{icon:null==(i=null==c?void 0:c.meta)?void 0:i.icon},null)]),h(d)?m("p",{class:"break-words mt-5px px-2px"},[l(null==(u=c.meta)?void 0:u.title)]):void 0])}))})]}),m("div",{class:[`${sl}--collapse`,"text-center h-[var(--tab-menu-collapse-height)] leading-[var(--tab-menu-collapse-height)] cursor-pointer"],onClick:c},[m(de,{icon:h(r)?"ep:d-arrow-right":"ep:d-arrow-left"},null)]),m(ll,{class:["!absolute top-0 border-left-1 border-solid border-[var(--left-menu-bg-light-color)]",{"!left-[var(--tab-menu-min-width)]":h(r),"!left-[var(--tab-menu-max-width)]":!h(r),"!w-[calc(var(--left-menu-max-width)+1px)]":h(v),"!w-0":!h(v)}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null)])}}),ul=Be(il,[["__scopeId","data-v-55b0cd10"]]);const cl=we({id:"tagsView",state:()=>({visitedViews:[],cachedViews:new Set}),getters:{getVisitedViews(){return this.visitedViews},getCachedViews(){return Array.from(this.cachedViews)}},actions:{addView(e){this.addVisitedView(e),this.addCachedView()},addVisitedView(e){var t,l;this.visitedViews.some((t=>t.path===e.path))||(null==(t=e.meta)?void 0:t.noTagsView)||this.visitedViews.push(Object.assign({},e,{title:(null==(l=e.meta)?void 0:l.title)||"no-name"}))},addCachedView(){var e;const t=new Set;for(const l of this.visitedViews){const a=xe(l);if(!!(null==(e=a.meta)?void 0:e.noCache))continue;const o=a.name;t.add(o)}Array.from(this.cachedViews).sort().toString()!==Array.from(t).sort().toString()&&(this.cachedViews=t)},delView(e){this.delVisitedView(e),this.addCachedView()},delVisitedView(e){for(const[t,l]of this.visitedViews.entries())if(l.path===e.path){this.visitedViews.splice(t,1);break}},delCachedView(){const e=ye.currentRoute.value,t=_e(this.getCachedViews,(t=>t===e.name));t>-1&&this.cachedViews.delete(this.getCachedViews[t])},delAllViews(){this.delAllVisitedViews(),this.addCachedView()},delAllVisitedViews(){this.visitedViews=[]},delOthersViews(e){this.delOthersVisitedViews(e),this.addCachedView()},delOthersVisitedViews(e){this.visitedViews=this.visitedViews.filter((t=>{var l;return(null==(l=null==t?void 0:t.meta)?void 0:l.affix)||t.path===e.path}))},delLeftViews(e){const t=_e(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a>t})),this.addCachedView())},delRightViews(e){const t=_e(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a<t})),this.addCachedView())},updateVisitedView(e){for(let t of this.visitedViews)if(t.path===e.path){t=Object.assign(t,e);break}}}}),dl=(e,t="")=>{let l=[];return e.forEach((e=>{const a=e.meta,o=pe(t,e.path);if((null==a?void 0:a.affix)&&l.push({...e,path:o,fullPath:o}),e.children){const t=dl(e.children,o);t.length>=1&&(l=[...l,...t])}})),l},vl=t({__name:"ContextMenu",props:{schema:{type:Array,default:()=>[]},trigger:{type:String,default:"contextmenu"},tagItem:{type:Object,default:()=>({})}},emits:["visibleChange"],setup(e,{expose:t,emit:l}){const a=e,{getPrefixCls:n}=se(),r=n("context-menu"),{t:s}=ue(),i=e=>{e.command&&e.command(e)},f=e=>{l("visibleChange",e,a.tagItem)},b=o();return t({elDropdownMenuRef:b,tagItem:a.tagItem}),(t,l)=>{const a=B("Icon");return u(),c(h(at),{ref_key:"elDropdownMenuRef",ref:b,class:g(h(r)),trigger:e.trigger,placement:"bottom-start",onCommand:i,onVisibleChange:f,"popper-class":"v-context-menu-popper"},{dropdown:d((()=>[m(h(lt),null,{default:d((()=>[(u(!0),v(Z,null,ke(e.schema,((e,t)=>(u(),c(h(tt),{key:`dropdown${t}`,divided:e.divided,disabled:e.disabled,command:e},{default:d((()=>[m(a,{icon:e.icon},null,8,["icon"]),re(" "+L(h(s)(e.label)),1)])),_:2},1032,["divided","disabled","command"])))),128))])),_:1})])),default:d((()=>[p(t.$slots,"default")])),_:3},8,["class","trigger"])}}});function pl({el:e,position:t="scrollLeft",to:l,duration:a=500,callback:n}){const r=o(!1),s=e[t],i=l-s;let u=0;function c(){if(!h(r))return;u+=20;const l=(o=u,d=s,v=i,(o/=a/2)<1?v/2*o*o+d:-v/2*(--o*(o-2)-1)+d);var o,d,v;((e,t,l)=>{e[t]=l})(e,t,l),u<a&&h(r)?requestAnimationFrame(c):n&&n()}return{start:function(){r.value=!0,c()},stop:function(){r.value=!1}}}const ml=["id"],hl={class:"overflow-hidden flex-1"},fl={class:"flex h-full"},gl=["onClick"];var bl=Be(t({__name:"TagsView",setup(e){const{getPrefixCls:t}=se(),l=t("tags-view"),{t:a}=ue(),{currentRoute:r,push:i,replace:p}=me(),f=he(),b=n((()=>f.getRouters)),w=cl(),_=n((()=>w.getVisitedViews)),k=o([]),C=ie(),M=n((()=>C.getTagsViewIcon)),S=o(),V=()=>{const{name:e}=h(r);return e&&(S.value=h(r),w.addView(h(r))),!1},I=e=>{var t;(null==(t=null==e?void 0:e.meta)?void 0:t.affix)||(w.delView(e),D(e)&&R())},T=()=>{w.delAllViews(),R()},$=()=>{w.delOthersViews(h(S))},P=async e=>{if(!e)return;w.delCachedView();const{path:t,query:l}=e;await oe(),p({path:"/redirect"+t,query:l})},z=()=>{w.delLeftViews(h(S))},A=()=>{w.delRightViews(h(S))},R=()=>{const e=w.getVisitedViews.slice(-1)[0];if(e)i(e);else{if(h(r).path===f.getAddRouters[0].path||h(r).path===f.getAddRouters[0].redirect)return void V();i(f.getAddRouters[0].path)}},j=Ce(),O=e=>{var t;const a=null==(t=h(q))?void 0:t.wrap$;let o=null,n=null;const r=h(j);if(r.length>0&&(o=r[0],n=r[r.length-1]),(null==o?void 0:o.to).fullPath===e.fullPath){const{start:e}=pl({el:a,position:"scrollLeft",to:0,duration:500});e()}else if((null==n?void 0:n.to).fullPath===e.fullPath){const{start:e}=pl({el:a,position:"scrollLeft",to:a.scrollWidth-a.offsetWidth,duration:500});e()}else{const t=r.findIndex((t=>(null==t?void 0:t.to).fullPath===e.fullPath)),o=document.getElementsByClassName(`${l}__item`),n=o[t-1],s=o[t+1],i=s.offsetLeft+s.offsetWidth+4,u=n.offsetLeft-4;if(i>h(F)+a.offsetWidth){const{start:e}=pl({el:a,position:"scrollLeft",to:i-a.offsetWidth,duration:500});e()}else if(u<h(F)){const{start:e}=pl({el:a,position:"scrollLeft",to:u,duration:500});e()}}},D=e=>e.path===h(r).path,N=Ce(),H=(e,t)=>{if(e)for(const l of h(N)){const e=l.elDropdownMenuRef;t.fullPath!==l.tagItem.fullPath&&(null==e||e.handleClose())}},q=o(),F=o(0),W=({scrollLeft:e})=>{F.value=e},G=e=>{var t;const l=null==(t=h(q))?void 0:t.wrap$,{start:a}=pl({el:l,position:"scrollLeft",to:h(F)+e,duration:500});a()};return s((()=>{(()=>{k.value=dl(h(b));for(const e of h(k))e.name&&w.addVisitedView(e)})(),V()})),X((()=>r.value),(()=>{V(),(async()=>{await oe();for(const e of h(_))if(e.fullPath===h(r).path){O(e),e.fullPath!==h(r).fullPath&&w.updateVisitedView(h(r));break}})()})),(e,t)=>{var o,n,r,s,i,p;const f=B("Icon"),b=B("router-link");return u(),v("div",{id:h(l),class:g([h(l),"flex w-full relative bg-[#fff] dark:bg-[var(--el-bg-color)]"])},[E("span",{class:g([`${h(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[0]||(t[0]=e=>G(-200))},[m(f,{icon:"ep:d-arrow-left",color:h(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),E("div",hl,[m(h(ge),{ref_key:"scrollbarRef",ref:q,class:"h-full",onScroll:W},{default:d((()=>[E("div",fl,[(u(!0),v(Z,null,ke(h(_),(e=>{var t,o,n,r,s,i,v,p,w;return u(),c(h(vl),{ref_for:!0,ref:h(N).set,schema:[{icon:"ant-design:sync-outlined",label:h(a)("common.reload"),disabled:(null==(t=S.value)?void 0:t.fullPath)!==e.fullPath,command:()=>{P(e)}},{icon:"ant-design:close-outlined",label:h(a)("common.closeTab"),disabled:!!(null==(o=h(_))?void 0:o.length)&&(null==(n=S.value)?void 0:n.meta.affix),command:()=>{I(e)}},{divided:!0,icon:"ant-design:vertical-right-outlined",label:h(a)("common.closeTheLeftTab"),disabled:!!(null==(r=h(_))?void 0:r.length)&&(e.fullPath===h(_)[0].fullPath||(null==(s=S.value)?void 0:s.fullPath)!==e.fullPath),command:()=>{z()}},{icon:"ant-design:vertical-left-outlined",label:h(a)("common.closeTheRightTab"),disabled:!!(null==(i=h(_))?void 0:i.length)&&(e.fullPath===h(_)[h(_).length-1].fullPath||(null==(v=S.value)?void 0:v.fullPath)!==e.fullPath),command:()=>{A()}},{divided:!0,icon:"ant-design:tag-outlined",label:h(a)("common.closeOther"),disabled:(null==(p=S.value)?void 0:p.fullPath)!==e.fullPath,command:()=>{$()}},{icon:"ant-design:line-outlined",label:h(a)("common.closeAll"),command:()=>{T()}}],key:e.fullPath,"tag-item":e,class:g([`${h(l)}__item`,(null==(w=null==e?void 0:e.meta)?void 0:w.affix)?`${h(l)}__item--affix`:"",{"is-active":D(e)}]),onVisibleChange:H},{default:d((()=>[E("div",null,[m(b,{ref_for:!0,ref:h(j).set,to:{...e},custom:""},{default:d((({navigate:t})=>{var o,n,r,s,i;return[E("div",{onClick:t,class:"h-full flex justify-center items-center whitespace-nowrap pl-15px"},[(null==e?void 0:e.matched)&&(null==e?void 0:e.matched[1])&&(null==(n=null==(o=null==e?void 0:e.matched[1])?void 0:o.meta)?void 0:n.icon)&&h(M)?(u(),c(f,{key:0,icon:null==(s=null==(r=null==e?void 0:e.matched[1])?void 0:r.meta)?void 0:s.icon,size:12,class:"mr-5px"},null,8,["icon"])):y("v-if",!0),re(" "+L(h(a)(null==(i=null==e?void 0:e.meta)?void 0:i.title))+" ",1),m(f,{class:g(`${h(l)}__item--close`),color:"#333",icon:"ant-design:close-outlined",size:12,onClick:x((t=>I(e)),["prevent","stop"])},null,8,["class","onClick"])],8,gl)]})),_:2},1032,["to"])])])),_:2},1032,["schema","tag-item","class"])})),128))])])),_:1},512)]),E("span",{class:g([`${h(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[1]||(t[1]=e=>G(200))},[m(f,{icon:"ep:d-arrow-right",color:h(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),E("span",{class:g([`${h(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[2]||(t[2]=e=>P(S.value))},[m(f,{icon:"ant-design:reload-outlined",color:h(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),m(h(vl),{trigger:"click",schema:[{icon:"ant-design:sync-outlined",label:h(a)("common.reload"),command:()=>{P(S.value)}},{icon:"ant-design:close-outlined",label:h(a)("common.closeTab"),disabled:!!(null==(o=h(_))?void 0:o.length)&&(null==(n=S.value)?void 0:n.meta.affix)},{divided:!0,icon:"ant-design:vertical-right-outlined",label:h(a)("common.closeTheLeftTab"),disabled:!!(null==(r=h(_))?void 0:r.length)&&(null==(s=S.value)?void 0:s.fullPath)===h(_)[0].fullPath,command:()=>{z()}},{icon:"ant-design:vertical-left-outlined",label:h(a)("common.closeTheRightTab"),disabled:!!(null==(i=h(_))?void 0:i.length)&&(null==(p=S.value)?void 0:p.fullPath)===h(_)[h(_).length-1].fullPath,command:()=>{A()}},{divided:!0,icon:"ant-design:tag-outlined",label:h(a)("common.closeOther"),command:()=>{$()}},{icon:"ant-design:line-outlined",label:h(a)("common.closeAll"),command:()=>{T()}}]},{default:d((()=>[E("span",{class:g([`${h(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer block"])},[m(f,{icon:"ant-design:setting-outlined",color:h(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2)])),_:1},8,["schema"])],10,ml)}}}),[["__scopeId","data-v-58cd7090"]]);const wl=E("img",{src:ot,class:"w-[calc(var(--logo-height)-10px)] h-[calc(var(--logo-height)-10px)]"},null,-1),xl=t({__name:"Logo",setup(e){const{getPrefixCls:t}=se(),l=t("logo"),a=ie(),r=o(!0),i=n((()=>a.getTitle)),p=n((()=>a.getLayout)),m=n((()=>a.getCollapse));return s((()=>{h(m)&&(r.value=!1)})),X((()=>m.value),(e=>{"topLeft"!==h(p)&&"cutMenu"!==h(p)?e?r.value=!e:setTimeout((()=>{r.value=!e}),400):r.value=!0})),X((()=>p.value),(e=>{"top"===e||"cutMenu"===e?r.value=!0:h(m)?r.value=!1:r.value=!0})),(e,t)=>{const a=B("router-link");return u(),c(a,{class:g([h(l),"classic"!==h(p)?`${h(l)}__Top`:"","flex !h-[var(--logo-height)] items-center cursor-pointer pl-8px relative","dark:bg-[var(--el-bg-color)]"]),to:"/"},{default:d((()=>[wl,r.value?(u(),v("div",{key:0,class:g(["ml-10px text-16px font-700",{"text-[var(--logo-title-text-color)]":"classic"===h(p),"text-[var(--top-header-text-color)]":"topLeft"===h(p)||"top"===h(p)||"cutMenu"===h(p)}])},L(h(i)),3)):y("v-if",!0)])),_:1},8,["class"])}}}),yl=t({__name:"Footer",setup(e){const{getPrefixCls:t}=se(),l=t("footer"),a=ie(),o=n((()=>a.getTitle));return(e,t)=>(u(),v("div",{class:g([h(l),"text-center text-[var(--el-text-color-placeholder)] bg-[var(--app-contnet-bg-color)] h-[var(--app-footer-height)] leading-[var(--app-footer-height)] dark:bg-[var(--el-bg-color)]"])}," Copyright ©2021-present "+L(h(o)),3))}}),_l=t({__name:"AppView",setup(e){const t=ie(),l=n((()=>t.getLayout)),a=n((()=>t.getFixedHeader)),o=n((()=>t.getFooter)),r=cl(),s=n((()=>r.getCachedViews));return(e,t)=>{const n=B("router-view");return u(),v(Z,null,[E("section",{class:g(["p-[var(--app-content-padding)] w-[100%] bg-[var(--app-contnet-bg-color)] dark:bg-[var(--el-bg-color)]",{"!min-h-[calc(100%-var(--app-footer-height))]":h(a)&&("classic"===h(l)||"topLeft"===h(l))&&h(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--top-tool-height)-var(--app-footer-height))]":(!h(a)&&"classic"===h(l)||"top"===h(l))&&h(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--app-footer-height))]":!h(a)&&"topLeft"===h(l)&&h(o),"!min-h-[calc(100%-var(--top-tool-height))]":h(a)&&"cutMenu"===h(l)&&h(o),"!min-h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))]":!h(a)&&"cutMenu"===h(l)&&h(o)}])},[m(n,null,{default:d((({Component:e,route:t})=>[(u(),c(Me,{include:h(s)},[(u(),c(z(e),{key:t.fullPath}))],1032,["include"]))])),_:1})],2),h(o)?(u(),c(h(yl),{key:0})):y("v-if",!0)],64)}}}),kl=E("img",{src:ot,alt:"",class:"w-18px h-18px mr-18px"},null,-1),Cl=t({__name:"Collapse",props:{color:Se.string.def("")},setup(e){const{getPrefixCls:t}=se(),l=t("collapse");return(e,t)=>(u(),v("div",{class:g(h(l))},[y(' Icon\n      :size="18"\n      :icon="collapse ? \'ant-design:menu-unfold-outlined\' : \'ant-design:menu-fold-outlined\'"\n      :color="color"\n      class="cursor-pointer"\n      @click="toggleCollapse"\n    / '),kl],2))}}),Ml=t({__name:"SizeDropdown",props:{color:Se.string.def("")},setup(e){const{getPrefixCls:t}=se(),l=t("size-dropdown"),{t:a}=ue(),o=ie(),r=n((()=>o.sizeMap)),s=e=>{o.setCurrentSize(e)};return(t,o)=>{const n=B("Icon");return u(),c(h(at),{class:g(h(l)),trigger:"click",onCommand:s},{dropdown:d((()=>[m(h(lt),null,{default:d((()=>[(u(!0),v(Z,null,ke(h(r),(e=>(u(),c(h(tt),{key:e,command:e},{default:d((()=>[re(L(h(a)(`size.${e}`)),1)])),_:2},1032,["command"])))),128))])),_:1})])),default:d((()=>[m(n,{size:18,icon:"mdi:format-size",color:e.color,class:"cursor-pointer"},null,8,["color"])])),_:1},8,["class"])}}}),Sl={class:"flex items-center"},Vl=["src"],Il={class:"<lg:hidden text-14px pl-[5px] text-[var(--top-header-text-color)]"},Tl=t({__name:"UserInfo",setup(e){const t=Ve(),l=cl(),{getPrefixCls:a}=se(),o=a("user-info"),{t:n}=ue(),{wsCache:r}=Ie(),{replace:s}=me(),i=r.get(t.getUserInfo).email.split("@")[0];let v="avatar.jpg";"admin"==i&&(v="admin.jpg");const p=()=>{nt.confirm(n("common.loginOutMessage"),n("common.reminder"),{confirmButtonText:n("common.ok"),cancelButtonText:n("common.cancel"),type:"warning"}).then((async()=>{await rt().catch((()=>{}))&&(r.clear(),l.delAllViews(),Te(),s("/login"))})).catch((()=>{}))},f=()=>{window.open("https://github.com/Harvey-Specter/plunge_ui")};return(e,t)=>(u(),c(h(at),{class:g(h(o)),trigger:"click"},{dropdown:d((()=>[m(h(lt),null,{default:d((()=>[m(h(tt),null,{default:d((()=>[E("div",{onClick:f},L(h(n)("stock.prodDoc")),1)])),_:1}),m(h(tt),{divided:""},{default:d((()=>[E("div",{onClick:p},L(h(n)("common.loginOut")),1)])),_:1})])),_:1})])),default:d((()=>[E("div",Sl,[E("img",{src:"src/assets/imgs/"+h(v),alt:"",class:"w-[calc(var(--logo-height)-25px)] rounded-[50%]"},null,8,Vl),E("span",Il,L(h(i)),1)])])),_:1},8,["class"]))}}),$l=t({__name:"HeadButtons",setup(e){const{t:t}=ue(),{push:l}=me();let a=me();const o=()=>{let e="/stock/StockList",o={path:e,component:()=>$e((()=>import("./StockList.43d13c3d.js")),["assets/StockList.43d13c3d.js","assets/ContentWrap.bd505729.js","assets/index.701681eb.js","assets/index.7a894d9b.css","assets/el-card.2c75e3e6.js","assets/el-card.62f62b18.css","assets/el-popper.e9e2fc16.js","assets/el-popper.2129afad.css","assets/index2.01250fd4.js","assets/SearchButton.592af312.js","assets/Form.358e2152.js","assets/Form.d407a4ef.css","assets/el-col.33bc6b64.js","assets/el-col.9009e796.css","assets/typescript2.0e462989.js","assets/el-input.ed535820.js","assets/el-input.5a4ee1fb.css","assets/event2.1741f333.js","assets/index2.bc62f99f.js","assets/el-tag.ddbbcdb2.js","assets/el-tag.c8ed32b1.css","assets/tsxHelper.39476c1a.js","assets/tsxHelper.eec292c5.css","assets/index2.411e8ed3.js","assets/scroll2.58f9a7d9.js","assets/debounce.96a7db81.js","assets/validator2.d2a80b6f.js","assets/el-button.c81d4f55.js","assets/el-button.31ff1471.css","assets/el-input-number.b4d61595.js","assets/el-input-number.fa2b2d4e.css","assets/el-switch.8b8da31d.js","assets/el-switch.1190ebc1.css","assets/el-divider.56b4f6b6.js","assets/el-divider.562ae4b3.css","assets/InputPassword.2af2bf1d.js","assets/InputPassword.d5f6a39f.css","assets/plugin-vue_export-helper.21dcd24c.js","assets/Editor.8d38f34f.js","assets/Editor.2f70f506.css","assets/aria2.b5095a02.js","assets/browser2.c56688aa.js","assets/useForm.f9c4db1c.js","assets/Dialog.920e100e.js","assets/Dialog.5402f204.css","assets/el-overlay.bdf8afb7.js","assets/el-overlay.56bab24d.css","assets/vnode2.31a80e3f.js","assets/use-dialog2.545d2e9f.js","assets/refs2.946bb193.js","assets/el-message-box.2a623809.js","assets/el-message-box.0d02745d.css","assets/Table.vue_vue_type_script_lang.e2d83e06.js","assets/Table.vue_vue_type_script_lang.de076dea.css","assets/useAxios.51602908.js","assets/useTable.ed8be171.js","assets/Write.b0400490.js","assets/useValidator.8da58eac.js","assets/Detail.e8a17e11.js","assets/Descriptions.70b93e1a.js","assets/Descriptions.04c96593.css","assets/index2.42d1d9cc.js","assets/useCrudSchemas.9467c006.js","assets/tree.9e4d3f05.js","assets/useIcon.28eb236a.js"]),name:"StockListDel",meta:{title:t("stock.trash"),breadcrumb:!0}};a.addRoute("Group",o),l({path:e,query:{del:1}})},n=()=>{l({path:"/industry/index"})},r=()=>{l({path:"/group/index"})};return(e,l)=>(u(),v(Z,null,[m(h(Ue),{plain:"",type:"",onClick:r,size:"small",link:""},{default:d((()=>[re(L(h(t)("stock.groupList")),1)])),_:1}),y(' ElButton plain type="" @click="openIndustry" size="small" link>{{\n    t(\'stock.setCalc\')\n  }}</ElButton '),m(h(Ue),{plain:"",type:"",onClick:n,size:"small",link:""},{default:d((()=>[re(L(h(t)("stock.industry_sector")),1)])),_:1}),m(h(Ue),{plain:"",type:"",onClick:o,size:"small",link:""},{default:d((()=>[re(L(h(t)("stock.trash")),1)])),_:1})],64))}}),Pl=t({__name:"Screenfull",props:{color:Se.string.def("")},setup(e){const{getPrefixCls:t}=se(),l=t("screenfull"),{toggle:a,isFullscreen:o}=Pe(),n=()=>{a()};return(t,a)=>(u(),v("div",{class:g(h(l)),onClick:n},[m(h(de),{size:18,icon:h(o)?"zmdi:fullscreen-exit":"zmdi:fullscreen",color:e.color},null,8,["icon","color"])],2))}});const El=(e,t="")=>{var l;const a=[];for(const o of e){const e=null==o?void 0:o.meta;if(e.hidden&&!e.showMainRoute)continue;const n=e.alwaysShow||1!==(null==(l=o.children)?void 0:l.length)?{...o}:{...o.children[0],path:pe(o.path,o.children[0].path)};n.path=pe(t,n.path),n.children&&(n.children=El(n.children,n.path)),n&&a.push(n)}return a};const{getPrefixCls:zl}=se(),Ll=zl("breadcrumb"),Al=ie(),Rl=n((()=>Al.getBreadcrumbIcon));var jl=t({name:"Breadcrumb",setup(){const{currentRoute:e}=me(),{t:t}=ue(),l=o([]),a=he(),r=n((()=>{const e=a.getRouters;return El(e)}));return X((()=>e.value),(t=>{t.path.startsWith("/redirect/")||(()=>{const t=e.value.path;l.value=Ye(h(r),(e=>e.path===t))})()}),{immediate:!0}),()=>{let e;return m(mt,{separator:"/",class:`${Ll} flex items-center h-full ml-[10px]`},{default:()=>{return[m(Ee,{appear:!0,"enter-active-class":"animate__animated animate__fadeInRight"},(a=e=Xe(h(l)).map((e=>{const l="noredirect"===e.redirect,a=e.meta;return m(ht,{to:{path:l?"":e.path},key:e.name},{default:()=>{var l,o;return[(null==a?void 0:a.icon)&&Rl.value?m(Z,null,[m(de,{icon:a.icon,class:"mr-[5px]"},null),re(" "),t(null==(l=null==e?void 0:e.meta)?void 0:l.title)]):t(null==(o=null==e?void 0:e.meta)?void 0:o.title)]}})})),"function"==typeof a||"[object Object]"===Object.prototype.toString.call(a)&&!fe(a)?e:{default:()=>[e]}))];var a}})}}}),Bl=Be(jl,[["__scopeId","data-v-22fc605d"]]);const{getPrefixCls:Ol,variables:Dl}=se(),Nl=Ol("tool-header"),Hl=ie(),ql=n((()=>Hl.getBreadcrumb)),Fl=n((()=>Hl.getHamburger)),Wl=n((()=>Hl.getScreenfull)),Gl=n((()=>Hl.getSize)),Ul=n((()=>Hl.getLayout)),Ql=n((()=>Hl.getLocale));var Kl=t({name:"ToolHeader",setup:()=>()=>m("div",{id:`${Dl.namespace}-tool-header`,class:[Nl,"h-[var(--top-tool-height)] relative px-[var(--top-tool-p-x)] flex items-center justify-between","dark:bg-[var(--el-bg-color)]"]},["top"!==Ul.value?m("div",{class:"h-full flex items-center"},[Fl.value&&"cutMenu"!==Ul.value?m(Cl,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,ql.value?m(Bl,{class:"<md:hidden"},null):void 0]):void 0,m("div",{class:"h-full flex items-center"},[m($l,{class:"hover-tigger",color:"var(--top-header-text-color)"},null),Wl.value?m(Pl,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,Gl.value?m(Ml,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,Ql.value?m(je,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,m(Tl,{class:"hover-tigger"},null)])])}),Xl=Be(Kl,[["__scopeId","data-v-63b5a355"]]);const{getPrefixCls:Yl}=se(),Jl=Yl("layout"),Zl=ie(),ea=n((()=>Zl.getPageLoading)),ta=n((()=>Zl.getTagsView)),la=n((()=>Zl.getCollapse)),aa=n((()=>Zl.logo)),oa=n((()=>Zl.getFixedHeader)),na=n((()=>Zl.getMobile)),ra=()=>({renderClassic:()=>m(Z,null,[m("div",{style:"display:none",class:["absolute top-0 left-0 h-full",{"!fixed z-3000":na.value}]},[aa.value?m(xl,{class:["bg-[var(--left-menu-bg-color)] border-bottom-1 border-solid border-[var(--logo-border-color)] dark:border-[var(--el-border-color)]",{"!pl-0":na.value&&la.value,"w-[var(--left-menu-min-width)]":Zl.getCollapse,"w-[var(--left-menu-max-width)]":!Zl.getCollapse}],style:"transition: all var(--transition-time-02);"},null):void 0,m(ll,{class:[{"!h-[calc(100%-var(--logo-height))]":aa.value}]},null)]),m("div",{class:[`${Jl}-content`,"absolute top-0 h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":la.value&&!na.value&&!na.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!la.value&&!na.value&&!na.value,"fixed !w-full !left-0":na.value}],style:"transition: all var(--transition-time-02);"},[O(m(ge,{class:[`${Jl}-content-scrollbar`,{"!h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))] mt-[calc(var(--top-tool-height)+var(--tags-view-height))]":oa.value}]},{default:()=>[m("div",{class:[{"fixed top-0 left-0 z-10":oa.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":la.value&&oa.value&&!na.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!la.value&&oa.value&&!na.value,"!w-full !left-0":na.value}],style:"transition: all var(--transition-time-02);"},[m(Xl,{class:"border-bottom-1 border-solid border-[var(--top-tool-border-color)] bg-[var(--top-header-bg-color)] dark:border-[var(--el-border-color)]"},null),ta.value?m(bl,{class:"border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]"},null):void 0]),m(_l,null,null)]}),[[ze("loading"),ea.value]])])]),renderTopLeft:()=>m(Z,null,[m("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[aa.value?m(xl,{class:"hover-tigger !pr-15px"},null):void 0,m(Xl,{class:"flex-1"},null)]),m("div",{class:"absolute top-[var(--logo-height)+1px] left-0 w-full h-[calc(100%-1px-var(--logo-height))] flex"},[m(ll,{class:"!h-full"},null),m("div",{class:[`${Jl}-content`,"h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":la.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!la.value}],style:"transition: all var(--transition-time-02);"},[O(m(ge,{class:[`${Jl}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":oa.value&&ta.value}]},{default:()=>[ta.value?m(bl,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":oa.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)] mt-[var(--logo-height)]":la.value&&oa.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)] mt-[var(--logo-height)]":!la.value&&oa.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,m(_l,null,null)]}),[[ze("loading"),ea.value]])])])]),renderTop:()=>m(Z,null,[m("div",{class:"flex items-center justify-between bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[aa.value?m(xl,{class:"hover-tigger"},null):void 0,m(ll,{class:"flex-1 px-10px h-[var(--top-tool-height)]"},null),m(Xl,null,null)]),m("div",{class:[`${Jl}-content`,"h-full w-full"]},[O(m(ge,{class:[`${Jl}-content-scrollbar`,{"mt-[var(--tags-view-height)]":oa.value}]},{default:()=>[ta.value?m(bl,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed w-full top-[var(--top-tool-height)] left-0":oa.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,m(_l,null,null)]}),[[ze("loading"),ea.value]])])]),renderCutMenu:()=>m(Z,null,[m("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[aa.value?m(xl,{class:"hover-tigger !pr-15px"},null):void 0,m(Xl,{class:"flex-1"},null)]),m("div",{class:"absolute top-[var(--logo-height)] left-0 w-full h-[calc(100%-var(--logo-height))] flex"},[m(ul,null,null),m("div",{class:[`${Jl}-content`,"h-[100%]",{"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)]":la.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)]":!la.value}],style:"transition: all var(--transition-time-02);"},[O(m(ge,{class:[`${Jl}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":oa.value&&ta.value}]},{default:()=>[ta.value?m(bl,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":oa.value,"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)] mt-[var(--logo-height)]":la.value&&oa.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)] mt-[var(--logo-height)]":!la.value&&oa.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,m(_l,null,null)]}),[[ze("loading"),ea.value]])])])])}),{getPrefixCls:sa}=se(),ia=sa("layout"),ua=ie(),ca=n((()=>ua.getMobile)),da=n((()=>ua.getCollapse)),va=n((()=>ua.getLayout)),pa=()=>{ua.setCollapse(!0)},ma=()=>{switch(h(va)){case"classic":const{renderClassic:e}=ra();return e();case"topLeft":const{renderTopLeft:t}=ra();return t();case"top":const{renderTop:l}=ra();return l();case"cutMenu":const{renderCutMenu:a}=ra();return a()}};var ha=t({name:"Layout",setup:()=>()=>m("section",{class:[ia,`${ia}__${va.value}`,"w-[100%] h-[100%] relative"]},[ca.value&&!da.value?m("div",{class:"absolute top-0 left-0 w-full h-full opacity-30 z-99 bg-[var(--el-color-black)]",onClick:pa},null):void 0,ma(),m(Ht,null,null),m(Xt,null,null)])}),fa=Be(ha,[["__scopeId","data-v-7eda59fe"]]);export{fa as default};
//# sourceMappingURL=data:application/json;base64,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M2dCLFFBQVMsK0JBRHhELENBRUZpdEIsR0FBT2p0QixRQUFVc1MsR0FBU3RTLE1BQTFCa2dCLGVBRVMsaUZBRlQvYixRQUdZcXBCLElBSFosV0FLRy9NLEVBRUhnTixLQVRMdk4iLCJuYW1lcyI6WyJyZXNpemVIYW5kbGVyIiwiZW50cmllcyIsImVudHJ5IiwibGlzdGVuZXJzIiwidGFyZ2V0IiwiX19yZXNpemVMaXN0ZW5lcnNfXyIsImxlbmd0aCIsImZuIiwiY3ViaWMiLCJ2YWx1ZSIsImJyZWFkY3J1bWJLZXkiLCJTeW1ib2wiLCJfaG9pc3RlZF8xIiwiRWxCYWNrdG9wIiwid2l0aEluc3RhbGwiLCJkZWZpbmVDb21wb25lbnQiLCJuYW1lIiwicHJvcHMiLCJ2aXNpYmlsaXR5SGVpZ2h0IiwidHlwZSIsIk51bWJlciIsImRlZmF1bHQiLCJTdHJpbmciLCJyaWdodCIsImJvdHRvbSIsImVtaXRzIiwiY2xpY2siLCJldnQiLCJNb3VzZUV2ZW50Iiwic2V0dXAiLCJfX3Byb3BzIiwiZW1pdCIsIm5zIiwidXNlTmFtZXNwYWNlIiwiZWwiLCJzaGFsbG93UmVmIiwiY29udGFpbmVyIiwidmlzaWJsZSIsInJlZiIsImJhY2tUb3BTdHlsZSIsImNvbXB1dGVkIiwic2Nyb2xsVG9Ub3AiLCJEYXRlIiwibm93IiwiYmVnaW5WYWx1ZSIsInNjcm9sbFRvcCIsImZyYW1lRnVuYyIsInByb2dyZXNzIiwiYmVnaW5UaW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaGFuZGxlQ2xpY2siLCJldmVudCIsImhhbmRsZVNjcm9sbFRocm90dGxlZCIsInVzZVRocm90dGxlRm4iLCJ1c2VFdmVudExpc3RlbmVyIiwib25Nb3VudGVkIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2EiLCJ0aHJvd0Vycm9yIiwiX2N0eCIsIl9jYWNoZSIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwiVHJhbnNpdGlvbiIsInVucmVmIiwibmFtZXNwYWNlIiwid2l0aEN0eCIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImtleSIsInN0eWxlIiwibm9ybWFsaXplU3R5bGUiLCJjbGFzcyIsIm5vcm1hbGl6ZUNsYXNzIiwiYiIsIm9uQ2xpY2siLCJ3aXRoTW9kaWZpZXJzIiwicmVuZGVyU2xvdCIsIiRzbG90cyIsImNyZWF0ZVZOb2RlIiwiRWxJY29uIiwiZSIsIkNhcmV0VG9wIiwiXyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsIkJyZWFkY3J1bWIiLCJidWlsZFByb3BzIiwic2VwYXJhdG9yIiwic2VwYXJhdG9ySWNvbiIsImljb25Qcm9wVHlwZSIsImJyZWFkY3J1bWIyIiwicHJvdmlkZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtcyIsInNldEF0dHJpYnV0ZSIsInJlZl9rZXkiLCJyb2xlIiwiQnJlYWRjcnVtYkl0ZW0iLCJ0byIsImRlZmluZVByb3BUeXBlIiwiT2JqZWN0IiwicmVwbGFjZSIsIkJvb2xlYW4iLCJpbnN0YW5jZSIsImdldEN1cnJlbnRJbnN0YW5jZSIsImJyZWFkY3J1bWJDb250ZXh0IiwiaW5qZWN0IiwidG9SZWZzIiwicm91dGVyMiIsImFwcENvbnRleHQiLCJjb25maWciLCJnbG9iYWxQcm9wZXJ0aWVzIiwiJHJvdXRlciIsImxpbmsiLCJwdXNoIiwiY3JlYXRlRWxlbWVudFZOb2RlIiwiaXMiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInRvRGlzcGxheVN0cmluZyIsIkVsQnJlYWRjcnVtYiIsIkVsQnJlYWRjcnVtYkl0ZW0iLCJ3aXRoTm9vcEluc3RhbGwiLCJSZXNpemUiLCJiZWZvcmVNb3VudCIsImJpbmRpbmciLCJlbGVtZW50IiwiX2hhbmRsZVJlc2l6ZSIsImNhbGwiLCJpc0NsaWVudCIsIlJlc2l6ZU9ic2VydmVyIiwib2JzZXJ2ZSIsImJlZm9yZVVubW91bnQiLCJzcGxpY2UiLCJpbmRleE9mIiwiX19yb19fIiwiZGlzY29ubmVjdCIsImRyYXdlclByb3BzIiwiZGlhbG9nUHJvcHMiLCJkaXJlY3Rpb24iLCJ2YWx1ZXMiLCJzaXplIiwid2l0aEhlYWRlciIsIm1vZGFsRmFkZSIsIl9zZmNfbWFpbiIsImNvbXBvbmVudHMiLCJFbE92ZXJsYXkiLCJFbEZvY3VzVHJhcCIsIkNsb3NlIiwiZGlhbG9nRW1pdHMiLCJzbG90cyIsInVzZURlcHJlY2F0ZWQiLCJzY29wZSIsImZyb20iLCJyZXBsYWNlbWVudCIsInZlcnNpb24iLCJ0aXRsZSIsImRyYXdlclJlZiIsImZvY3VzU3RhcnRSZWYiLCJ0IiwidXNlTG9jYWxlIiwiaXNIb3Jpem9udGFsIiwiZHJhd2VyU2l6ZSIsInVzZURpYWxvZyIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIkVsRHJhd2VyIiwiX2V4cG9ydF9zZmMiLCIkcHJvcHMiLCIkc2V0dXAiLCIkZGF0YSIsIiRvcHRpb25zIiwicmVzb2x2ZUNvbXBvbmVudCIsIl9jb21wb25lbnRfZWxfaWNvbiIsIl9jb21wb25lbnRfZWxfZm9jdXNfdHJhcCIsIl9jb21wb25lbnRfZWxfb3ZlcmxheSIsIlRlbGVwb3J0IiwiZGlzYWJsZWQiLCJhcHBlbmRUb0JvZHkiLCJvbkFmdGVyRW50ZXIiLCJhZnRlckVudGVyIiwib25BZnRlckxlYXZlIiwiYWZ0ZXJMZWF2ZSIsIm9uQmVmb3JlTGVhdmUiLCJiZWZvcmVMZWF2ZSIsInBlcnNpc3RlZCIsIndpdGhEaXJlY3RpdmVzIiwibWFzayIsIm1vZGFsIiwibW9kYWxDbGFzcyIsInpJbmRleCIsIm9uTW9kYWxDbGljayIsImxvb3AiLCJ0cmFwcGVkIiwib25SZWxlYXNlUmVxdWVzdGVkIiwib25DbG9zZVJlcXVlc3RlZCIsInRpdGxlSWQiLCJib2R5SWQiLCJjdXN0b21DbGFzcyIsInRhYmluZGV4IiwiY2xvc2UiLCJoYW5kbGVDbG9zZSIsInRpdGxlQ2xhc3MiLCJpZCIsInNob3dDbG9zZSIsImFyZ3MiLCJfY29tcG9uZW50X2Nsb3NlIiwicmVuZGVyZWQiLCJmb290ZXIiLCJ2U2hvdyIsIlN1Yk1lbnUiLCJjb25zdHJ1Y3RvciIsInBhcmVudCIsImRvbU5vZGUiLCJ0aGlzIiwic3ViSW5kZXgiLCJpbml0Iiwic3ViTWVudUl0ZW1zIiwiYWRkTGlzdGVuZXJzIiwiZ290b1N1YkluZGV4IiwiaWR4IiwiZm9jdXMiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJwcmV2RGVmIiwiY29kZSIsIkVWRU5UX0NPREUiLCJkb3duIiwidXAiLCJ0YWIiLCJ0cmlnZ2VyRXZlbnQiLCJwYXJlbnROb2RlIiwiZW50ZXIiLCJzcGFjZSIsImN1cnJlbnRUYXJnZXQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIk1lbnVJdGVtIiwic3VibWVudSIsIm1lbnVDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJNZW51IiwiY2hpbGROb2RlcyIsIm1lbnVDaGlsZHJlbiIsImNoaWxkIiwibm9kZVR5cGUiLCJFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb24iLCJvbkJlZm9yZUVudGVyIiwib3BhY2l0eSIsIm9uRW50ZXIiLCJkb25lIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImRhdGFzZXQiLCJoYXNDbGFzcyIsIm0iLCJvbGRPdmVyZmxvdyIsIm92ZXJmbG93Iiwic2Nyb2xsV2lkdGgiLCJjbGllbnRXaWR0aCIsInRvU3RyaW5nIiwid2lkdGgiLCJvbkxlYXZlIiwibWVyZ2VQcm9wcyIsIm1vZGUiLCJjdXJyZW50SW5kZXgiLCJpbmRleCIsInBhdGgiLCJwYXJlbnRNZW51IiwiaW5jbHVkZXMiLCJpbmRleFBhdGgiLCJjb2xvciIsImJhY2tncm91bmRDb2xvciIsIlRpbnlDb2xvciIsInNoYWRlIiwidXNlTWVudUNzc1ZhciIsImxldmVsIiwiY3NzVmFyQmxvY2siLCJ0ZXh0Q29sb3IiLCJ1c2VNZW51Q29sb3IiLCJhY3RpdmVUZXh0Q29sb3IiLCJzdWJNZW51UHJvcHMiLCJyZXF1aXJlZCIsInNob3dUaW1lb3V0IiwiaGlkZVRpbWVvdXQiLCJwb3BwZXJDbGFzcyIsInBvcHBlckFwcGVuZFRvQm9keSIsInBvcHBlck9mZnNldCIsImV4cG9zZSIsInVzZU1lbnUiLCJuc01lbnUiLCJuc1N1Yk1lbnUiLCJyb290TWVudSIsInN1Yk1lbnUiLCJ1aWQiLCJzdWJNZW51cyIsInZlcnRpY2FsVGl0bGVSZWYiLCJ2UG9wcGVyIiwiY3VycmVudFBsYWNlbWVudCIsImlzRmlyc3RMZXZlbCIsInN1Yk1lbnVUaXRsZUljb24iLCJjb2xsYXBzZSIsIkFycm93RG93biIsIkFycm93UmlnaHQiLCJtZW51VHJhbnNpdGlvbk5hbWUiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJvcGVuZWQiLCJvcGVuZWRNZW51cyIsImFjdGl2ZSIsImlzQWN0aXZlIiwiaXRlbTIiLCJzdWJJdGVtIiwiaXRlbSIsInJlYWN0aXZlIiwidGl0bGVTdHlsZSIsImJvcmRlckJvdHRvbUNvbG9yIiwiaGFuZGxlQ29sbGFwc2VUb2dnbGUiLCJfYiIsIl9jIiwicG9wcGVyUmVmIiwicG9wcGVySW5zdGFuY2VSZWYiLCJkZXN0cm95IiwibWVudVRyaWdnZXIiLCJoYW5kbGVTdWJNZW51Q2xpY2siLCJoYW5kbGVNb3VzZWVudGVyIiwicmVsYXRlZFRhcmdldCIsIm1vdXNlSW5DaGlsZCIsInRpbWVvdXQiLCJzdG9wIiwidXNlVGltZW91dEZuIiwib3Blbk1lbnUiLCJ2bm9kZSIsImRpc3BhdGNoRXZlbnQiLCJoYW5kbGVNb3VzZWxlYXZlIiwiZGVlcERpc3BhdGNoIiwiY2xvc2VNZW51Iiwid2F0Y2giLCJyZW1vdmVTdWJNZW51IiwiYWRkU3ViTWVudSIsIm9uQmVmb3JlVW5tb3VudCIsInRpdGxlVGFnIiwiaCIsInVsU3R5bGUiLCJpc01lbnVQb3B1cCIsIkVsVG9vbHRpcCIsImVmZmVjdCIsInB1cmUiLCJvZmZzZXQiLCJzaG93QXJyb3ciLCJwZXJzaXN0ZW50IiwicGxhY2VtZW50IiwidGVsZXBvcnRlZCIsInRyYW5zaXRpb24iLCJncHVBY2NlbGVyYXRpb24iLCJjb250ZW50Iiwib25Nb3VzZWVudGVyIiwib25Nb3VzZWxlYXZlIiwib25Gb2N1cyIsIl9hMiIsIkZyYWdtZW50IiwiX0NvbGxhcHNlVHJhbnNpdGlvbiIsImFyaWFIYXNwb3B1cCIsImFyaWFFeHBhbmRlZCIsIm1lbnVQcm9wcyIsImRlZmF1bHRBY3RpdmUiLCJkZWZhdWx0T3BlbmVkcyIsIm11dGFibGUiLCJ1bmlxdWVPcGVuZWQiLCJyb3V0ZXIiLCJjb2xsYXBzZVRyYW5zaXRpb24iLCJlbGxpcHNpcyIsImNoZWNrSW5kZXhQYXRoIiwiaXNBcnJheSIsImV2ZXJ5IiwiaXNTdHJpbmciLCJvcGVuIiwic2VsZWN0Iiwicm91dGVyUmVzdWx0IiwiaXNPYmplY3QiLCJQcm9taXNlIiwibWVudSIsInNsaWNlIiwiYWN0aXZlSW5kZXgiLCJpbml0TWVudSIsImFjdGl2ZUl0ZW0iLCJmaWx0ZXIiLCJpbmRleDIiLCJpIiwiaGFuZGxlTWVudUl0ZW1DbGljayIsIm1lbnVJdGVtIiwicm91dGUiLCJ0aGVuIiwicmVzIiwiaGFuZGxlUmVzaXplIiwibmV4dFRpY2siLCJwcm94eSIsIiRmb3JjZVVwZGF0ZSIsImN1cnJlbnRBY3RpdmUiLCJ2YWwiLCJpdGVtc0luRGF0YSIsInVwZGF0ZUFjdGl2ZUluZGV4IiwiYWRkTWVudUl0ZW0iLCJyZW1vdmVNZW51SXRlbSIsIk1lbnUkMSIsImNoaWxkcmVuIiwidm5vZGVzIiwicmVzdWx0IiwiZmxhdHRlZENoaWxkcmVuIiwiX2QiLCJzbG90IiwidlNob3dNb3JlIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJvcmlnaW5hbFNsb3QiLCJtb3JlSXRlbVdpZHRoIiwicGFkZGluZ0xlZnQiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJwYWRkaW5nUmlnaHQiLCJtZW51V2lkdGgiLCJjYWxjV2lkdGgiLCJzbGljZUluZGV4IiwiaXRlbXMyIiwib2Zmc2V0V2lkdGgiLCJzbG90RGVmYXVsdCIsInNsb3RNb3JlIiwiTW9yZSIsInZNZW51Iiwidk5vZGUiLCJtZW51SXRlbVByb3BzIiwibnNNZW51SXRlbSIsInRvUmVmIiwiRWZmZWN0IiwiX2NvbXBvbmVudF9lbF90b29sdGlwIiwiREFSSyIsImJlIiwiTWVudUl0ZW1Hcm91cCIsImNyZWF0ZVRleHRWTm9kZSIsIkVsTWVudSIsIkVsTWVudUl0ZW0iLCJFbFN1Yk1lbnUiLCJnZXRQcmVmaXhDbHMiLCJnZXRQcmVmaXhDbHMyIiwidXNlRGVzaWduIiwicHJlZml4Q2xzMiIsInRlc3QiLCJoZXhUb1JHQiIsImhleCIsInRvTG93ZXJDYXNlIiwic0hleCIsInNDb2xvck5ldyIsImNvbmNhdCIsInNDb2xvckNoYW5nZSIsImpvaW4iLCJjb2xvcklzRGFyayIsImlzSGV4Q29sb3IiLCJyIiwiZyIsInNwbGl0IiwibWFwIiwibGlnaHRlbiIsImFtb3VudCIsInN1YnN0cmluZyIsIk1hdGgiLCJ0cnVuYyIsImFkZExpZ2h0IiwiY2MiLCJjIiwiYXBwU3RvcmUyIiwidXNlQXBwU3RvcmUiLCJ1c2VJMThuIiwibGF5b3V0MiIsImdldExheW91dCIsImRyYXdlciIsImhlYWRlclRoZW1lIiwiZ2V0VGhlbWUiLCJ0b3BIZWFkZXJCZ0NvbG9yIiwic2V0SGVhZGVyVGhlbWUiLCJpc0RhcmtDb2xvciIsInRleHRIb3ZlckNvbG9yIiwidG9wVG9vbEJvcmRlckNvbG9yIiwic2V0VGhlbWUiLCJ0b3BIZWFkZXJUZXh0Q29sb3IiLCJ0b3BIZWFkZXJIb3ZlckNvbG9yIiwic2V0TWVudVRoZW1lIiwibWVudVRoZW1lIiwibGVmdE1lbnVCZ0NvbG9yIiwicHJpbWFyeUNvbG9yIiwidXNlQ3NzVmFyIiwidGhlbWUiLCJsZWZ0TWVudUJvcmRlckNvbG9yIiwibGVmdE1lbnVCZ0xpZ2h0Q29sb3IiLCJsZWZ0TWVudUJnQWN0aXZlQ29sb3IiLCJsZWZ0TWVudUNvbGxhcHNlQmdBY3RpdmVDb2xvciIsImxlZnRNZW51VGV4dENvbG9yIiwibGVmdE1lbnVUZXh0QWN0aXZlQ29sb3IiLCJsb2dvVGl0bGVUZXh0Q29sb3IiLCJsb2dvQm9yZGVyQ29sb3IiLCJzZXRDc3NWYXJUaGVtZSIsImdldElzRGFyayIsIm4iLCJ0cmVlRGF0YSIsImZpbmRQYXRoIiwidXNlUmVuZGVyTWVudUl0ZW0iLCJhbGxSb3V0ZXJzIiwibWVudU1vZGUiLCJyZW5kZXJNZW51SXRlbSIsInJvdXRlcnMiLCJ2IiwibWV0YSIsImhpZGRlbiIsIm9uZVNob3dpbmdDaGlsZCIsIm9ubHlPbmVDaGlsZCIsInNob3dpbmdDaGlsZHJlbiIsIm5vU2hvd2luZ0NoaWxkcmVuIiwiaGFzT25lU2hvd2luZ0NoaWxkIiwiZnVsbFBhdGgiLCJpc1VybCIsImdldEFsbFBhcmVudFBhdGgiLCJyZW5kZXJNZW51VGl0bGUiLCJpY29uIiwiX2NyZWF0ZVZOb2RlIiwiYWx3YXlzU2hvdyIsInByZUZpeENscyIsInBhdGhSZXNvbHZlIiwicHJlZml4Q2xzIiwibWVudVNlbGVjdCIsIkZ1bmN0aW9uIiwidW5kZWZpbmVkIiwiYXBwU3RvcmUiLCJsYXlvdXQiLCJjdXJyZW50Um91dGUiLCJ1c2VSb3V0ZXIiLCJwZXJtaXNzaW9uU3RvcmUiLCJ1c2VQZXJtaXNzaW9uU3RvcmUiLCJnZXRNZW51VGFiUm91dGVycyIsImdldFJvdXRlcnMiLCJnZXRDb2xsYXBzZSIsImdldFVuaXF1ZU9wZW5lZCIsImFjdGl2ZU1lbnUiLCJ3aW5kb3ciLCJsb2ciLCJyZW5kZXJNZW51V3JhcCIsInJlbmRlck1lbnUiLCJfc2xvdCIsIm9uU2VsZWN0IiwiZmlsdGVyTWVudXNQYXRoIiwicm91dGVzIiwiYWxsUm91dGVzIiwiZGF0YSIsInNob3dNYWluUm91dGUiLCJhbGxQYXJlbnRQYWh0IiwiY2xvbmVEZWVwIiwiUmVmbGVjdCIsImhhcyIsInRhYlBhdGhNYXAiLCJ2YXJpYWJsZXMiLCJ0YWJSb3V0ZXJzIiwic2V0Q29sbGFwc2UiLCJyb3V0ZXJzMiIsImluaXRUYWJNYXAiLCJpbW1lZGlhdGUiLCJkZWVwIiwic2hvd1RpdGxlIiwiY29sbGFwc2UzIiwic2V0VGltZW91dCIsInNob3dNZW51IiwidGFiQWN0aXZlIiwiaXNBY3RpY2UiLCJjdXJyZW50UGF0aCIsIm1vdXNlbGVhdmUiLCJzZXRNZW51VGFiUm91dGVycyIsInRhYkNsaWNrIiwidXNlVGFnc1ZpZXdTdG9yZSIsImRlZmluZVN0b3JlIiwic3RhdGUiLCJ2aXNpdGVkVmlld3MiLCJjYWNoZWRWaWV3cyIsIlNldCIsImdldHRlcnMiLCJnZXRWaXNpdGVkVmlld3MiLCJnZXRDYWNoZWRWaWV3cyIsImFjdGlvbnMiLCJhZGRWaWV3IiwidmlldyIsImFkZFZpc2l0ZWRWaWV3IiwiYWRkQ2FjaGVkVmlldyIsInNvbWUiLCJhc3NpZ24iLCJnZXRSYXdSb3V0ZSIsImNhY2hlTWFwIiwiYWRkIiwic29ydCIsImRlbFZpZXciLCJkZWxWaXNpdGVkVmlldyIsImRlbENhY2hlZFZpZXciLCJmaW5kSW5kZXgiLCJkZWxldGUiLCJkZWxBbGxWaWV3cyIsImRlbEFsbFZpc2l0ZWRWaWV3cyIsImRlbE90aGVyc1ZpZXdzIiwiZGVsT3RoZXJzVmlzaXRlZFZpZXdzIiwiYWZmaXgiLCJkZWxMZWZ0Vmlld3MiLCJkZWxSaWdodFZpZXdzIiwidXBkYXRlVmlzaXRlZFZpZXciLCJmaWx0ZXJBZmZpeFRhZ3MiLCJwYXJlbnRQYXRoIiwidGFncyIsInRhZ1BhdGgiLCJ0ZW1wVGFncyIsImNvbW1hbmQiLCJ2aXNpYmxlQ2hhbmdlIiwidGFnSXRlbSIsImVsRHJvcGRvd25NZW51UmVmIiwicG9zaXRpb24iLCJkdXJhdGlvbiIsImNhbGxiYWNrIiwic3RhcnQiLCJjaGFuZ2UiLCJjdXJyZW50VGltZSIsImlzQWN0aXZlUmVmIiwibW92ZSIsImFuaW1hdGVTY3JvbGwiLCJ0YWdzVmlld1N0b3JlIiwiYWZmaXhUYWdBcnIiLCJ0YWdzVmlld0ljb24iLCJnZXRUYWdzVmlld0ljb24iLCJzZWxlY3RlZFRhZyIsImFkZFRhZ3MiLCJjbG9zZVNlbGVjdGVkVGFnIiwiY2xvc2VBbGxUYWdzIiwiY2xvc2VPdGhlcnNUYWdzIiwicmVmcmVzaFNlbGVjdGVkVGFnIiwiYXN5bmMiLCJxdWVyeSIsImNsb3NlTGVmdFRhZ3MiLCJjbG9zZVJpZ2h0VGFncyIsInRvTGFzdFZpZXciLCJsYXRlc3RWaWV3IiwiZ2V0QWRkUm91dGVycyIsInJlZGlyZWN0IiwidGFnTGlua3NSZWZzIiwidXNlVGVtcGxhdGVSZWZzTGlzdCIsIm1vdmVUb1RhcmdldCIsImN1cnJlbnRUYWciLCJzY3JvbGxiYXJSZWYiLCJmaXJzdFRhZyIsImxhc3RUYWciLCJ0YWdMaXN0IiwidXNlU2Nyb2xsVG8iLCJ3cmFwJCIsInRnc1JlZnMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicHJldlRhZyIsIm5leHRUYWciLCJhZnRlck5leHRUYWdPZmZzZXRMZWZ0Iiwib2Zmc2V0TGVmdCIsImJlZm9yZVByZXZUYWdPZmZzZXRMZWZ0Iiwic2Nyb2xsTGVmdE51bWJlciIsIml0ZW1SZWZzIiwic2Nyb2xsIiwic2Nyb2xsTGVmdCIsIm1vdmUyIiwidGFnIiwic2hvdyIsImdldFRpdGxlIiwiY29sbGFwc2UyIiwiY29sbGFwc2UyMiIsImxheW91dDIyIiwiZml4ZWRIZWFkZXIyIiwiZ2V0Rml4ZWRIZWFkZXIiLCJnZXRGb290ZXIiLCJnZXRDYWNoZXMiLCJzaXplTWFwIiwic2V0Q3VycmVudFNpemUiLCJzaXplMiIsInVzZUFwcFN0b3JlV2l0aE91dCIsIndzQ2FjaGUiLCJ1c2VDYWNoZSIsInVzZXJOYW1lIiwiZ2V0IiwiZ2V0VXNlckluZm8iLCJlbWFpbCIsImF2YSIsImxvZ2luT3V0IiwiRWxNZXNzYWdlQm94IiwiY29uZmlybSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsImxvZ2luT3V0QXBpIiwiY2F0Y2giLCJjbGVhciIsInRvRG9jdW1lbnQiLCJvcGVuVHJhc2giLCJ1cmwiLCJjb21wb25lbnQiLCJfX3ZpdGVQcmVsb2FkIiwiYnJlYWRjcnVtYiIsImRlbCIsIm9wZW5JbmR1c3RyeSIsIm9wZW5Hcm91cExpc3QiLCJ0b2dnbGUiLCJpc0Z1bGxzY3JlZW4iLCJ1c2VGdWxsc2NyZWVuIiwidG9nZ2xlRnVsbHNjcmVlbiIsImZpbHRlckJyZWFkY3J1bWIiLCJicmVhZGNydW1iSWNvbiIsImdldEJyZWFkY3J1bWJJY29uIiwibGV2ZWxMaXN0IiwibWVudVJvdXRlcnMiLCJzdGFydHNXaXRoIiwibm9kZSIsInRyZWVUb0xpc3QiLCJnZXRCcmVhZGNydW1iIiwiaGFtYnVyZ2VyIiwiZ2V0SGFtYnVyZ2VyIiwic2NyZWVuZnVsbCIsImdldFNjcmVlbmZ1bGwiLCJnZXRTaXplIiwibG9jYWxlIiwiZ2V0TG9jYWxlIiwicGFnZUxvYWRpbmciLCJnZXRQYWdlTG9hZGluZyIsInRhZ3NWaWV3IiwiZ2V0VGFnc1ZpZXciLCJsb2dvIiwiZml4ZWRIZWFkZXIiLCJtb2JpbGUiLCJnZXRNb2JpbGUiLCJ1c2VSZW5kZXJMYXlvdXQiLCJyZW5kZXJDbGFzc2ljIiwicmVuZGVyVG9wTGVmdCIsInJlbmRlclRvcCIsInJlbmRlckN1dE1lbnUiLCJoYW5kbGVDbGlja091dHNpZGUiLCJyZW5kZXJMYXlvdXQiXSwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL3V0aWxzL2RvbS9yZXNpemUtZXZlbnQyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvdXRpbHMvYW5pbWF0aW9uMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL3Rva2Vucy9icmVhZGNydW1iMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvYmFja3RvcC9zcmMvYmFja3RvcDQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JhY2t0b3AvaW5kZXgyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9iYWNrdG9wL3NyYy9iYWNrdG9wMy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvYnJlYWRjcnVtYi9zcmMvYnJlYWRjcnVtYjQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvc3JjL2JyZWFkY3J1bWIzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9icmVhZGNydW1iL3NyYy9icmVhZGNydW1iLWl0ZW00Lm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9icmVhZGNydW1iL3NyYy9icmVhZGNydW1iLWl0ZW0zLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9icmVhZGNydW1iL2luZGV4Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2RpcmVjdGl2ZXMvcmVzaXplL2luZGV4Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvZHJhd2VyL3NyYy9kcmF3ZXIzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9kcmF3ZXIvc3JjL2RyYXdlcjQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2RyYXdlci9pbmRleDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL3V0aWxzL3N1Ym1lbnUyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy91dGlscy9tZW51LWl0ZW0yLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy91dGlscy9tZW51LWJhcjIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtY29sbGFwc2UtdHJhbnNpdGlvbjIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL3VzZS1tZW51Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvdXNlLW1lbnUtY29sb3IyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy91c2UtbWVudS1jc3MtdmFyMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvc3ViLW1lbnUyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy9tZW51Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1pdGVtMy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1pdGVtNC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1pdGVtLWdyb3VwNC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1pdGVtLWdyb3VwMy5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9pbmRleDIubWpzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQmFja3RvcC9zcmMvQmFja3RvcC52dWUiLCIuLi8uLi9zcmMvdXRpbHMvY29sb3IudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9TZXR0aW5nL3NyYy9TZXR0aW5nLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3JjL2hlbHBlci50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL01lbnUvc3JjL2NvbXBvbmVudHMvdXNlUmVuZGVyTWVudUl0ZW0udHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvTWVudS9zcmMvY29tcG9uZW50cy91c2VSZW5kZXJNZW51VGl0bGUudHN4IiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvTWVudS9zcmMvTWVudS52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9UYWJNZW51L3NyYy9oZWxwZXIudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9UYWJNZW51L3NyYy9UYWJNZW51LnZ1ZSIsIi4uLy4uL3NyYy9zdG9yZS9tb2R1bGVzL3RhZ3NWaWV3LnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvVGFnc1ZpZXcvc3JjL2hlbHBlci50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0NvbnRleHRNZW51L3NyYy9Db250ZXh0TWVudS52dWUiLCIuLi8uLi9zcmMvaG9va3MvZXZlbnQvdXNlU2Nyb2xsVG8udHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9UYWdzVmlldy9zcmMvVGFnc1ZpZXcudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvTG9nby9zcmMvTG9nby52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Gb290ZXIvc3JjL0Zvb3Rlci52dWUiLCIuLi8uLi9zcmMvbGF5b3V0L2NvbXBvbmVudHMvQXBwVmlldy52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsYXBzZS9zcmMvQ29sbGFwc2UudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvU2l6ZURyb3Bkb3duL3NyYy9TaXplRHJvcGRvd24udnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8vc3JjL1VzZXJJbmZvLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0hlYWRCdXR0b25zL3NyYy9IZWFkQnV0dG9ucy52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9TY3JlZW5mdWxsL3NyYy9TY3JlZW5mdWxsLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWIvc3JjL2hlbHBlci50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0JyZWFkY3J1bWIvc3JjL0JyZWFkY3J1bWIudnVlIiwiLi4vLi4vc3JjL2xheW91dC9jb21wb25lbnRzL1Rvb2xIZWFkZXIudnVlIiwiLi4vLi4vc3JjL2xheW91dC9jb21wb25lbnRzL3VzZVJlbmRlckxheW91dC50c3giLCIuLi8uLi9zcmMvbGF5b3V0L0xheW91dC52dWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNDbGllbnQgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuXG5jb25zdCByZXNpemVIYW5kbGVyID0gZnVuY3Rpb24oZW50cmllcykge1xuICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBlbnRyeS50YXJnZXQuX19yZXNpemVMaXN0ZW5lcnNfXyB8fCBbXTtcbiAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKGZuKSA9PiB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBhZGRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uKGVsZW1lbnQsIGZuKSB7XG4gIGlmICghaXNDbGllbnQgfHwgIWVsZW1lbnQpXG4gICAgcmV0dXJuO1xuICBpZiAoIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXykge1xuICAgIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXyA9IFtdO1xuICAgIGVsZW1lbnQuX19yb19fID0gbmV3IFJlc2l6ZU9ic2VydmVyKHJlc2l6ZUhhbmRsZXIpO1xuICAgIGVsZW1lbnQuX19yb19fLm9ic2VydmUoZWxlbWVudCk7XG4gIH1cbiAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnB1c2goZm4pO1xufTtcbmNvbnN0IHJlbW92ZVJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24oZWxlbWVudCwgZm4pIHtcbiAgdmFyIF9hO1xuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXylcbiAgICByZXR1cm47XG4gIGVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5zcGxpY2UoZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLmluZGV4T2YoZm4pLCAxKTtcbiAgaWYgKCFlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ubGVuZ3RoKSB7XG4gICAgKF9hID0gZWxlbWVudC5fX3JvX18pID09IG51bGwgPyB2b2lkIDAgOiBfYS5kaXNjb25uZWN0KCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGFkZFJlc2l6ZUxpc3RlbmVyLCByZW1vdmVSZXNpemVMaXN0ZW5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzaXplLWV2ZW50Mi5tanMubWFwXG4iLCJjb25zdCBjdWJpYyA9ICh2YWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUgKiogMztcbn07XG5jb25zdCBlYXNlSW5PdXRDdWJpYyA9ICh2YWx1ZSkgPT4gdmFsdWUgPCAwLjUgPyBjdWJpYyh2YWx1ZSAqIDIpIC8gMiA6IDEgLSBjdWJpYygoMSAtIHZhbHVlKSAqIDIpIC8gMjtcblxuZXhwb3J0IHsgY3ViaWMsIGVhc2VJbk91dEN1YmljIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb24yLm1qcy5tYXBcbiIsImNvbnN0IGJyZWFkY3J1bWJLZXkgPSBTeW1ib2woXCJicmVhZGNydW1iS2V5XCIpO1xuXG5leHBvcnQgeyBicmVhZGNydW1iS2V5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1iMi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHNoYWxsb3dSZWYsIHJlZiwgY29tcHV0ZWQsIG9uTW91bnRlZCwgb3BlbkJsb2NrLCBjcmVhdGVCbG9jaywgVHJhbnNpdGlvbiwgdW5yZWYsIHdpdGhDdHgsIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplU3R5bGUsIG5vcm1hbGl6ZUNsYXNzLCB3aXRoTW9kaWZpZXJzLCByZW5kZXJTbG90LCBjcmVhdGVWTm9kZSwgY3JlYXRlQ29tbWVudFZOb2RlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHVzZVRocm90dGxlRm4sIHVzZUV2ZW50TGlzdGVuZXIgfSBmcm9tICdAdnVldXNlL2NvcmUnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBDYXJldFRvcCB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBiYWNrdG9wUHJvcHMsIGJhY2t0b3BFbWl0cyB9IGZyb20gJy4vYmFja3RvcDMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBlYXNlSW5PdXRDdWJpYyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2FuaW1hdGlvbjIubWpzJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcjIubWpzJztcblxuY29uc3QgX2hvaXN0ZWRfMSA9IFtcIm9uQ2xpY2tcIl07XG5jb25zdCBfX2RlZmF1bHRfXyA9IHtcbiAgbmFtZTogXCJFbEJhY2t0b3BcIlxufTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IGJhY2t0b3BQcm9wcyxcbiAgZW1pdHM6IGJhY2t0b3BFbWl0cyxcbiAgc2V0dXAoX19wcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgQ09NUE9ORU5UX05BTUUgPSBcIkVsQmFja3RvcFwiO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwiYmFja3RvcFwiKTtcbiAgICBjb25zdCBlbCA9IHNoYWxsb3dSZWYoKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBzaGFsbG93UmVmKCk7XG4gICAgY29uc3QgdmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgYmFja1RvcFN0eWxlID0gY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgIHJpZ2h0OiBgJHtwcm9wcy5yaWdodH1weGAsXG4gICAgICBib3R0b206IGAke3Byb3BzLmJvdHRvbX1weGBcbiAgICB9KSk7XG4gICAgY29uc3Qgc2Nyb2xsVG9Ub3AgPSAoKSA9PiB7XG4gICAgICBpZiAoIWVsLnZhbHVlKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBiZWdpblRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgY29uc3QgYmVnaW5WYWx1ZSA9IGVsLnZhbHVlLnNjcm9sbFRvcDtcbiAgICAgIGNvbnN0IGZyYW1lRnVuYyA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFlbC52YWx1ZSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gKERhdGUubm93KCkgLSBiZWdpblRpbWUpIC8gNTAwO1xuICAgICAgICBpZiAocHJvZ3Jlc3MgPCAxKSB7XG4gICAgICAgICAgZWwudmFsdWUuc2Nyb2xsVG9wID0gYmVnaW5WYWx1ZSAqICgxIC0gZWFzZUluT3V0Q3ViaWMocHJvZ3Jlc3MpKTtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWVGdW5jKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC52YWx1ZS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lRnVuYyk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwudmFsdWUpXG4gICAgICAgIHZpc2libGUudmFsdWUgPSBlbC52YWx1ZS5zY3JvbGxUb3AgPj0gcHJvcHMudmlzaWJpbGl0eUhlaWdodDtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICBzY3JvbGxUb1RvcCgpO1xuICAgICAgZW1pdChcImNsaWNrXCIsIGV2ZW50KTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVNjcm9sbFRocm90dGxlZCA9IHVzZVRocm90dGxlRm4oaGFuZGxlU2Nyb2xsLCAzMDApO1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoY29udGFpbmVyLCBcInNjcm9sbFwiLCBoYW5kbGVTY3JvbGxUaHJvdHRsZWQpO1xuICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBjb250YWluZXIudmFsdWUgPSBkb2N1bWVudDtcbiAgICAgIGVsLnZhbHVlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKHByb3BzLnRhcmdldCkge1xuICAgICAgICBlbC52YWx1ZSA9IChfYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvcHMudGFyZ2V0KSkgIT0gbnVsbCA/IF9hIDogdm9pZCAwO1xuICAgICAgICBpZiAoIWVsLnZhbHVlKSB7XG4gICAgICAgICAgdGhyb3dFcnJvcihDT01QT05FTlRfTkFNRSwgYHRhcmdldCBpcyBub3QgZXhpc3RlZDogJHtwcm9wcy50YXJnZXR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLnZhbHVlID0gZWwudmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIChfY3R4LCBfY2FjaGUpID0+IHtcbiAgICAgIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soVHJhbnNpdGlvbiwge1xuICAgICAgICBuYW1lOiBgJHt1bnJlZihucykubmFtZXNwYWNlLnZhbHVlfS1mYWRlLWluYFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICB2aXNpYmxlLnZhbHVlID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgc3R5bGU6IG5vcm1hbGl6ZVN0eWxlKHVucmVmKGJhY2tUb3BTdHlsZSkpLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5iKCkpLFxuICAgICAgICAgICAgb25DbGljazogd2l0aE1vZGlmaWVycyhoYW5kbGVDbGljaywgW1wic3RvcFwiXSlcbiAgICAgICAgICB9LCBbXG4gICAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIiwge30sICgpID0+IFtcbiAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoRWxJY29uKSwge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihucykuZShcImljb25cIikpXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKHVucmVmKENhcmV0VG9wKSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfOiAxXG4gICAgICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdLCAxNCwgX2hvaXN0ZWRfMSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSwgOCwgW1wibmFtZVwiXSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgQmFja3RvcCA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvYmFja3RvcC9zcmMvYmFja3RvcC52dWVcIl1dKTtcblxuZXhwb3J0IHsgQmFja3RvcCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrdG9wNC5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0IEJhY2t0b3AgZnJvbSAnLi9zcmMvYmFja3RvcDQubWpzJztcbmV4cG9ydCB7IGJhY2t0b3BFbWl0cywgYmFja3RvcFByb3BzIH0gZnJvbSAnLi9zcmMvYmFja3RvcDMubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL2luc3RhbGwyLm1qcyc7XG5cbmNvbnN0IEVsQmFja3RvcCA9IHdpdGhJbnN0YWxsKEJhY2t0b3ApO1xuXG5leHBvcnQgeyBFbEJhY2t0b3AsIEVsQmFja3RvcCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIiwiY29uc3QgYmFja3RvcFByb3BzID0ge1xuICB2aXNpYmlsaXR5SGVpZ2h0OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDIwMFxuICB9LFxuICB0YXJnZXQ6IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9LFxuICByaWdodDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA0MFxuICB9LFxuICBib3R0b206IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogNDBcbiAgfVxufTtcbmNvbnN0IGJhY2t0b3BFbWl0cyA9IHtcbiAgY2xpY2s6IChldnQpID0+IGV2dCBpbnN0YW5jZW9mIE1vdXNlRXZlbnRcbn07XG5cbmV4cG9ydCB7IGJhY2t0b3BFbWl0cywgYmFja3RvcFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrdG9wMy5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHJlZiwgcHJvdmlkZSwgb25Nb3VudGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIHVucmVmLCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vdG9rZW5zL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleDIubWpzJztcbmltcG9ydCB7IGJyZWFkY3J1bWJQcm9wcyB9IGZyb20gJy4vYnJlYWRjcnVtYjMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBicmVhZGNydW1iS2V5IH0gZnJvbSAnLi4vLi4vLi4vdG9rZW5zL2JyZWFkY3J1bWIyLm1qcyc7XG5cbmNvbnN0IF9fZGVmYXVsdF9fID0ge1xuICBuYW1lOiBcIkVsQnJlYWRjcnVtYlwiXG59O1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogYnJlYWRjcnVtYlByb3BzLFxuICBzZXR1cChfX3Byb3BzKSB7XG4gICAgY29uc3QgcHJvcHMgPSBfX3Byb3BzO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwiYnJlYWRjcnVtYlwiKTtcbiAgICBjb25zdCBicmVhZGNydW1iID0gcmVmKCk7XG4gICAgcHJvdmlkZShicmVhZGNydW1iS2V5LCBwcm9wcyk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1zID0gYnJlYWRjcnVtYi52YWx1ZS5xdWVyeVNlbGVjdG9yQWxsKGAuJHtucy5lKFwiaXRlbVwiKX1gKTtcbiAgICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0uc2V0QXR0cmlidXRlKFwiYXJpYS1jdXJyZW50XCIsIFwicGFnZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICByZWZfa2V5OiBcImJyZWFkY3J1bWJcIixcbiAgICAgICAgcmVmOiBicmVhZGNydW1iLFxuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmIoKSksXG4gICAgICAgIFwiYXJpYS1sYWJlbFwiOiBcIkJyZWFkY3J1bWJcIixcbiAgICAgICAgcm9sZTogXCJuYXZpZ2F0aW9uXCJcbiAgICAgIH0sIFtcbiAgICAgICAgcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZWZhdWx0XCIpXG4gICAgICBdLCAyKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBCcmVhZGNydW1iID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9icmVhZGNydW1iL3NyYy9icmVhZGNydW1iLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBCcmVhZGNydW1iIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWI0Lm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBidWlsZFByb3BzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUyLm1qcyc7XG5pbXBvcnQgeyBpY29uUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvaWNvbjIubWpzJztcblxuY29uc3QgYnJlYWRjcnVtYlByb3BzID0gYnVpbGRQcm9wcyh7XG4gIHNlcGFyYXRvcjoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIi9cIlxuICB9LFxuICBzZXBhcmF0b3JJY29uOiB7XG4gICAgdHlwZTogaWNvblByb3BUeXBlLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfVxufSk7XG5cbmV4cG9ydCB7IGJyZWFkY3J1bWJQcm9wcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYjMubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdCwgdG9SZWZzLCByZWYsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgdW5yZWYsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgcmVuZGVyU2xvdCwgY3JlYXRlQmxvY2ssIHdpdGhDdHgsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCB0b0Rpc3BsYXlTdHJpbmcgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdG9rZW5zL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleDIubWpzJztcbmltcG9ydCB7IGJyZWFkY3J1bWJJdGVtUHJvcHMgfSBmcm9tICcuL2JyZWFkY3J1bWItaXRlbTMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IGJyZWFkY3J1bWJLZXkgfSBmcm9tICcuLi8uLi8uLi90b2tlbnMvYnJlYWRjcnVtYjIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5cbmNvbnN0IF9fZGVmYXVsdF9fID0ge1xuICBuYW1lOiBcIkVsQnJlYWRjcnVtYkl0ZW1cIlxufTtcbmNvbnN0IF9zZmNfbWFpbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDb21wb25lbnQoe1xuICAuLi5fX2RlZmF1bHRfXyxcbiAgcHJvcHM6IGJyZWFkY3J1bWJJdGVtUHJvcHMsXG4gIHNldHVwKF9fcHJvcHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBicmVhZGNydW1iQ29udGV4dCA9IGluamVjdChicmVhZGNydW1iS2V5LCB2b2lkIDApO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwiYnJlYWRjcnVtYlwiKTtcbiAgICBjb25zdCB7IHNlcGFyYXRvciwgc2VwYXJhdG9ySWNvbiB9ID0gdG9SZWZzKGJyZWFkY3J1bWJDb250ZXh0KTtcbiAgICBjb25zdCByb3V0ZXIgPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRyb3V0ZXI7XG4gICAgY29uc3QgbGluayA9IHJlZigpO1xuICAgIGNvbnN0IG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXByb3BzLnRvIHx8ICFyb3V0ZXIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHByb3BzLnJlcGxhY2UgPyByb3V0ZXIucmVwbGFjZShwcm9wcy50bykgOiByb3V0ZXIucHVzaChwcm9wcy50byk7XG4gICAgfTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJzcGFuXCIsIHtcbiAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5lKFwiaXRlbVwiKSlcbiAgICAgIH0sIFtcbiAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgcmVmX2tleTogXCJsaW5rXCIsXG4gICAgICAgICAgcmVmOiBsaW5rLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbdW5yZWYobnMpLmUoXCJpbm5lclwiKSwgdW5yZWYobnMpLmlzKFwibGlua1wiLCAhIV9jdHgudG8pXSksXG4gICAgICAgICAgcm9sZTogXCJsaW5rXCIsXG4gICAgICAgICAgb25DbGlja1xuICAgICAgICB9LCBbXG4gICAgICAgICAgcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZWZhdWx0XCIpXG4gICAgICAgIF0sIDIpLFxuICAgICAgICB1bnJlZihzZXBhcmF0b3JJY29uKSA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2sodW5yZWYoRWxJY29uKSwge1xuICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJzZXBhcmF0b3JcIikpXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2socmVzb2x2ZUR5bmFtaWNDb21wb25lbnQodW5yZWYoc2VwYXJhdG9ySWNvbikpKSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAxXG4gICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKSkgOiAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJzZXBhcmF0b3JcIikpLFxuICAgICAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgfSwgdG9EaXNwbGF5U3RyaW5nKHVucmVmKHNlcGFyYXRvcikpLCAzKSlcbiAgICAgIF0sIDIpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIEJyZWFkY3J1bWJJdGVtID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9icmVhZGNydW1iL3NyYy9icmVhZGNydW1iLWl0ZW0udnVlXCJdXSk7XG5cbmV4cG9ydCB7IEJyZWFkY3J1bWJJdGVtIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWItaXRlbTQubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMsIGRlZmluZVByb3BUeXBlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdnVlL3Byb3BzL3J1bnRpbWUyLm1qcyc7XG5cbmNvbnN0IGJyZWFkY3J1bWJJdGVtUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgdG86IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbU3RyaW5nLCBPYmplY3RdKSxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIHJlcGxhY2U6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH1cbn0pO1xuXG5leHBvcnQgeyBicmVhZGNydW1iSXRlbVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1iLWl0ZW0zLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgQnJlYWRjcnVtYiBmcm9tICcuL3NyYy9icmVhZGNydW1iNC5tanMnO1xuaW1wb3J0IEJyZWFkY3J1bWJJdGVtIGZyb20gJy4vc3JjL2JyZWFkY3J1bWItaXRlbTQubWpzJztcbmV4cG9ydCB7IGJyZWFkY3J1bWJQcm9wcyB9IGZyb20gJy4vc3JjL2JyZWFkY3J1bWIzLm1qcyc7XG5leHBvcnQgeyBicmVhZGNydW1iSXRlbVByb3BzIH0gZnJvbSAnLi9zcmMvYnJlYWRjcnVtYi1pdGVtMy5tanMnO1xuaW1wb3J0IHsgd2l0aEluc3RhbGwsIHdpdGhOb29wSW5zdGFsbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Z1ZS9pbnN0YWxsMi5tanMnO1xuXG5jb25zdCBFbEJyZWFkY3J1bWIgPSB3aXRoSW5zdGFsbChCcmVhZGNydW1iLCB7XG4gIEJyZWFkY3J1bWJJdGVtXG59KTtcbmNvbnN0IEVsQnJlYWRjcnVtYkl0ZW0gPSB3aXRoTm9vcEluc3RhbGwoQnJlYWRjcnVtYkl0ZW0pO1xuXG5leHBvcnQgeyBFbEJyZWFkY3J1bWIsIEVsQnJlYWRjcnVtYkl0ZW0sIEVsQnJlYWRjcnVtYiBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCB7IGFkZFJlc2l6ZUxpc3RlbmVyLCByZW1vdmVSZXNpemVMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3V0aWxzL2RvbS9yZXNpemUtZXZlbnQyLm1qcyc7XG5cbmNvbnN0IFJlc2l6ZSA9IHtcbiAgYmVmb3JlTW91bnQoZWwsIGJpbmRpbmcpIHtcbiAgICBlbC5faGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgZWwgJiYgKChfYSA9IGJpbmRpbmcudmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGJpbmRpbmcsIGVsKSk7XG4gICAgfTtcbiAgICBhZGRSZXNpemVMaXN0ZW5lcihlbCwgZWwuX2hhbmRsZVJlc2l6ZSk7XG4gIH0sXG4gIGJlZm9yZVVubW91bnQoZWwpIHtcbiAgICByZW1vdmVSZXNpemVMaXN0ZW5lcihlbCwgZWwuX2hhbmRsZVJlc2l6ZSk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFJlc2l6ZSBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vZGlhbG9nL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lMi5tanMnO1xuaW1wb3J0IHsgZGlhbG9nUHJvcHMsIGRpYWxvZ0VtaXRzIH0gZnJvbSAnLi4vLi4vZGlhbG9nL3NyYy9kaWFsb2czLm1qcyc7XG5cbmNvbnN0IGRyYXdlclByb3BzID0gYnVpbGRQcm9wcyh7XG4gIC4uLmRpYWxvZ1Byb3BzLFxuICBkaXJlY3Rpb246IHtcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZGVmYXVsdDogXCJydGxcIixcbiAgICB2YWx1ZXM6IFtcImx0clwiLCBcInJ0bFwiLCBcInR0YlwiLCBcImJ0dFwiXVxuICB9LFxuICBzaXplOiB7XG4gICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICBkZWZhdWx0OiBcIjMwJVwiXG4gIH0sXG4gIHdpdGhIZWFkZXI6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgbW9kYWxGYWRlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH1cbn0pO1xuY29uc3QgZHJhd2VyRW1pdHMgPSBkaWFsb2dFbWl0cztcblxuZXhwb3J0IHsgZHJhd2VyRW1pdHMsIGRyYXdlclByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmF3ZXIzLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgY29tcHV0ZWQsIHJlZiwgcmVzb2x2ZUNvbXBvbmVudCwgb3BlbkJsb2NrLCBjcmVhdGVCbG9jaywgVGVsZXBvcnQsIGNyZWF0ZVZOb2RlLCBUcmFuc2l0aW9uLCB3aXRoQ3R4LCB3aXRoRGlyZWN0aXZlcywgY3JlYXRlRWxlbWVudFZOb2RlLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIHdpdGhNb2RpZmllcnMsIGNyZWF0ZUVsZW1lbnRCbG9jaywgcmVuZGVyU2xvdCwgdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVDb21tZW50Vk5vZGUsIHZTaG93IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IENsb3NlIH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgRWxPdmVybGF5IH0gZnJvbSAnLi4vLi4vb3ZlcmxheS9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vZm9jdXMtdHJhcC9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vZGlhbG9nL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBkcmF3ZXJQcm9wcywgZHJhd2VyRW1pdHMgfSBmcm9tICcuL2RyYXdlcjMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCBFbEZvY3VzVHJhcCBmcm9tICcuLi8uLi9mb2N1cy10cmFwL3NyYy9mb2N1cy10cmFwMi5tanMnO1xuaW1wb3J0IHsgdXNlRGVwcmVjYXRlZCB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1kZXByZWNhdGVkL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCB7IHVzZUxvY2FsZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1sb2NhbGUvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB1c2VEaWFsb2cgfSBmcm9tICcuLi8uLi9kaWFsb2cvc3JjL3VzZS1kaWFsb2cyLm1qcyc7XG5cbmNvbnN0IF9zZmNfbWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IFwiRWxEcmF3ZXJcIixcbiAgY29tcG9uZW50czoge1xuICAgIEVsT3ZlcmxheSxcbiAgICBFbEZvY3VzVHJhcCxcbiAgICBFbEljb24sXG4gICAgQ2xvc2VcbiAgfSxcbiAgcHJvcHM6IGRyYXdlclByb3BzLFxuICBlbWl0czogZHJhd2VyRW1pdHMsXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICB1c2VEZXByZWNhdGVkKHtcbiAgICAgIHNjb3BlOiBcImVsLWRyYXdlclwiLFxuICAgICAgZnJvbTogXCJ0aGUgdGl0bGUgc2xvdFwiLFxuICAgICAgcmVwbGFjZW1lbnQ6IFwidGhlIGhlYWRlciBzbG90XCIsXG4gICAgICB2ZXJzaW9uOiBcIjMuMC4wXCIsXG4gICAgICByZWY6IFwiaHR0cHM6Ly9lbGVtZW50LXBsdXMub3JnL2VuLVVTL2NvbXBvbmVudC9kcmF3ZXIuaHRtbCNzbG90c1wiXG4gICAgfSwgY29tcHV0ZWQoKCkgPT4gISFzbG90cy50aXRsZSkpO1xuICAgIGNvbnN0IGRyYXdlclJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGZvY3VzU3RhcnRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcImRyYXdlclwiKTtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpcmVjdGlvbiA9PT0gXCJydGxcIiB8fCBwcm9wcy5kaXJlY3Rpb24gPT09IFwibHRyXCIpO1xuICAgIGNvbnN0IGRyYXdlclNpemUgPSBjb21wdXRlZCgoKSA9PiB0eXBlb2YgcHJvcHMuc2l6ZSA9PT0gXCJudW1iZXJcIiA/IGAke3Byb3BzLnNpemV9cHhgIDogcHJvcHMuc2l6ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnVzZURpYWxvZyhwcm9wcywgZHJhd2VyUmVmKSxcbiAgICAgIGRyYXdlclJlZixcbiAgICAgIGZvY3VzU3RhcnRSZWYsXG4gICAgICBpc0hvcml6b250YWwsXG4gICAgICBkcmF3ZXJTaXplLFxuICAgICAgbnMsXG4gICAgICB0XG4gICAgfTtcbiAgfVxufSk7XG5jb25zdCBfaG9pc3RlZF8xID0gW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiLCBcImFyaWEtZGVzY3JpYmVkYnlcIl07XG5jb25zdCBfaG9pc3RlZF8yID0gW1wiaWRcIl07XG5jb25zdCBfaG9pc3RlZF8zID0gW1wiYXJpYS1sYWJlbFwiXTtcbmNvbnN0IF9ob2lzdGVkXzQgPSBbXCJpZFwiXTtcbmZ1bmN0aW9uIF9zZmNfcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICBjb25zdCBfY29tcG9uZW50X2Nsb3NlID0gcmVzb2x2ZUNvbXBvbmVudChcImNsb3NlXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2VsX2ljb24gPSByZXNvbHZlQ29tcG9uZW50KFwiZWwtaWNvblwiKTtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF9mb2N1c190cmFwID0gcmVzb2x2ZUNvbXBvbmVudChcImVsLWZvY3VzLXRyYXBcIik7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfb3ZlcmxheSA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1vdmVybGF5XCIpO1xuICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKFRlbGVwb3J0LCB7XG4gICAgdG86IFwiYm9keVwiLFxuICAgIGRpc2FibGVkOiAhX2N0eC5hcHBlbmRUb0JvZHlcbiAgfSwgW1xuICAgIGNyZWF0ZVZOb2RlKFRyYW5zaXRpb24sIHtcbiAgICAgIG5hbWU6IF9jdHgubnMuYihcImZhZGVcIiksXG4gICAgICBvbkFmdGVyRW50ZXI6IF9jdHguYWZ0ZXJFbnRlcixcbiAgICAgIG9uQWZ0ZXJMZWF2ZTogX2N0eC5hZnRlckxlYXZlLFxuICAgICAgb25CZWZvcmVMZWF2ZTogX2N0eC5iZWZvcmVMZWF2ZSxcbiAgICAgIHBlcnNpc3RlZDogXCJcIlxuICAgIH0sIHtcbiAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICB3aXRoRGlyZWN0aXZlcyhjcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX292ZXJsYXksIHtcbiAgICAgICAgICBtYXNrOiBfY3R4Lm1vZGFsLFxuICAgICAgICAgIFwib3ZlcmxheS1jbGFzc1wiOiBfY3R4Lm1vZGFsQ2xhc3MsXG4gICAgICAgICAgXCJ6LWluZGV4XCI6IF9jdHguekluZGV4LFxuICAgICAgICAgIG9uQ2xpY2s6IF9jdHgub25Nb2RhbENsaWNrXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgIGNyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZm9jdXNfdHJhcCwge1xuICAgICAgICAgICAgICBsb29wOiBcIlwiLFxuICAgICAgICAgICAgICB0cmFwcGVkOiBfY3R4LnZpc2libGUsXG4gICAgICAgICAgICAgIFwiZm9jdXMtdHJhcC1lbFwiOiBfY3R4LmRyYXdlclJlZixcbiAgICAgICAgICAgICAgXCJmb2N1cy1zdGFydC1lbFwiOiBfY3R4LmZvY3VzU3RhcnRSZWYsXG4gICAgICAgICAgICAgIG9uUmVsZWFzZVJlcXVlc3RlZDogX2N0eC5vbkNsb3NlUmVxdWVzdGVkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICByZWY6IFwiZHJhd2VyUmVmXCIsXG4gICAgICAgICAgICAgICAgICBcImFyaWEtbW9kYWxcIjogXCJ0cnVlXCIsXG4gICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogX2N0eC50aXRsZSB8fCB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiAhX2N0eC50aXRsZSA/IF9jdHgudGl0bGVJZCA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBfY3R4LmJvZHlJZCxcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbX2N0eC5ucy5iKCksIF9jdHguZGlyZWN0aW9uLCBfY3R4LnZpc2libGUgJiYgXCJvcGVuXCIsIF9jdHguY3VzdG9tQ2xhc3NdKSxcbiAgICAgICAgICAgICAgICAgIHN0eWxlOiBub3JtYWxpemVTdHlsZShfY3R4LmlzSG9yaXpvbnRhbCA/IFwid2lkdGg6IFwiICsgX2N0eC5kcmF3ZXJTaXplIDogXCJoZWlnaHQ6IFwiICsgX2N0eC5kcmF3ZXJTaXplKSxcbiAgICAgICAgICAgICAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IHdpdGhNb2RpZmllcnMoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgfSwgW1wic3RvcFwiXSkpXG4gICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlZjogXCJmb2N1c1N0YXJ0UmVmXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJzci1mb2N1c1wiKSksXG4gICAgICAgICAgICAgICAgICAgIHRhYmluZGV4OiBcIi0xXCJcbiAgICAgICAgICAgICAgICAgIH0sIG51bGwsIDIpLFxuICAgICAgICAgICAgICAgICAgX2N0eC53aXRoSGVhZGVyID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJoZWFkZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJoZWFkZXJcIikpXG4gICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICFfY3R4LiRzbG90cy50aXRsZSA/IHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiaGVhZGVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgY2xvc2U6IF9jdHguaGFuZGxlQ2xvc2UsXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGVJZDogX2N0eC50aXRsZUlkLFxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlQ2xhc3M6IF9jdHgubnMuZShcInRpdGxlXCIpXG4gICAgICAgICAgICAgICAgICAgIH0sICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAhX2N0eC4kc2xvdHMudGl0bGUgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IF9jdHgudGl0bGVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiaGVhZGluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcInRpdGxlXCIpKVxuICAgICAgICAgICAgICAgICAgICAgIH0sIHRvRGlzcGxheVN0cmluZyhfY3R4LnRpdGxlKSwgMTEsIF9ob2lzdGVkXzIpKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgXSkgOiByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcInRpdGxlXCIsIHsga2V5OiAxIH0sICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVDb21tZW50Vk5vZGUoXCIgREVQUkVDQVRFRCBTTE9UIFwiKVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgX2N0eC5zaG93Q2xvc2UgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiAyLFxuICAgICAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBfY3R4LnQoXCJlbC5kcmF3ZXIuY2xvc2VcIiksXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImNsb3NlLWJ0blwiKSksXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMF0gfHwgKF9jYWNoZVswXSA9ICguLi5hcmdzKSA9PiBfY3R4LmhhbmRsZUNsb3NlICYmIF9jdHguaGFuZGxlQ2xvc2UoLi4uYXJncykpXG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2ljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJjbG9zZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9jbG9zZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKVxuICAgICAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfMykpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgIF9jdHgucmVuZGVyZWQgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleTogMSxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IF9jdHguYm9keUlkLFxuICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiYm9keVwiKSlcbiAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJkZWZhdWx0XCIpXG4gICAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfNCkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgIF9jdHguJHNsb3RzLmZvb3RlciA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAyLFxuICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiZm9vdGVyXCIpKVxuICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImZvb3RlclwiKVxuICAgICAgICAgICAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIF0sIDE0LCBfaG9pc3RlZF8xKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgXzogM1xuICAgICAgICAgICAgfSwgOCwgW1widHJhcHBlZFwiLCBcImZvY3VzLXRyYXAtZWxcIiwgXCJmb2N1cy1zdGFydC1lbFwiLCBcIm9uUmVsZWFzZVJlcXVlc3RlZFwiXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfOiAzXG4gICAgICAgIH0sIDgsIFtcIm1hc2tcIiwgXCJvdmVybGF5LWNsYXNzXCIsIFwiei1pbmRleFwiLCBcIm9uQ2xpY2tcIl0pLCBbXG4gICAgICAgICAgW3ZTaG93LCBfY3R4LnZpc2libGVdXG4gICAgICAgIF0pXG4gICAgICBdKSxcbiAgICAgIF86IDNcbiAgICB9LCA4LCBbXCJuYW1lXCIsIFwib25BZnRlckVudGVyXCIsIFwib25BZnRlckxlYXZlXCIsIFwib25CZWZvcmVMZWF2ZVwiXSlcbiAgXSwgOCwgW1wiZGlzYWJsZWRcIl0pO1xufVxudmFyIERyYXdlciA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJyZW5kZXJcIiwgX3NmY19yZW5kZXJdLCBbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvZHJhd2VyL3NyYy9kcmF3ZXIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IERyYXdlciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmF3ZXI0Lm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgRHJhd2VyIGZyb20gJy4vc3JjL2RyYXdlcjQubWpzJztcbmV4cG9ydCB7IGRyYXdlckVtaXRzLCBkcmF3ZXJQcm9wcyB9IGZyb20gJy4vc3JjL2RyYXdlcjMubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL2luc3RhbGwyLm1qcyc7XG5cbmNvbnN0IEVsRHJhd2VyID0gd2l0aEluc3RhbGwoRHJhd2VyKTtcblxuZXhwb3J0IHsgRWxEcmF3ZXIsIEVsRHJhd2VyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9jb25zdGFudHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBFVkVOVF9DT0RFIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2FyaWEyLm1qcyc7XG5pbXBvcnQgeyB0cmlnZ2VyRXZlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9kb20vYXJpYTIubWpzJztcblxuY2xhc3MgU3ViTWVudSB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgZG9tTm9kZSkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgdGhpcy5zdWJJbmRleCA9IDA7XG4gICAgdGhpcy5zdWJJbmRleCA9IDA7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnN1Yk1lbnVJdGVtcyA9IHRoaXMuZG9tTm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIik7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgfVxuICBnb3RvU3ViSW5kZXgoaWR4KSB7XG4gICAgaWYgKGlkeCA9PT0gdGhpcy5zdWJNZW51SXRlbXMubGVuZ3RoKSB7XG4gICAgICBpZHggPSAwO1xuICAgIH0gZWxzZSBpZiAoaWR4IDwgMCkge1xuICAgICAgaWR4ID0gdGhpcy5zdWJNZW51SXRlbXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgO1xuICAgIHRoaXMuc3ViTWVudUl0ZW1zW2lkeF0uZm9jdXMoKTtcbiAgICB0aGlzLnN1YkluZGV4ID0gaWR4O1xuICB9XG4gIGFkZExpc3RlbmVycygpIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5wYXJlbnQuZG9tTm9kZTtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRoaXMuc3ViTWVudUl0ZW1zLCAoZWwpID0+IHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgICBsZXQgcHJldkRlZiA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmNvZGUpIHtcbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUuZG93bjoge1xuICAgICAgICAgICAgdGhpcy5nb3RvU3ViSW5kZXgodGhpcy5zdWJJbmRleCArIDEpO1xuICAgICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnVwOiB7XG4gICAgICAgICAgICB0aGlzLmdvdG9TdWJJbmRleCh0aGlzLnN1YkluZGV4IC0gMSk7XG4gICAgICAgICAgICBwcmV2RGVmID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUudGFiOiB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQocGFyZW50Tm9kZSwgXCJtb3VzZWxlYXZlXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgRVZFTlRfQ09ERS5lbnRlcjpcbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUuc3BhY2U6IHtcbiAgICAgICAgICAgIHByZXZEZWYgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2RGVmKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBTdWJNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Ym1lbnUyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2NvbnN0YW50cy9pbmRleDIubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3VibWVudTIubWpzJztcbmltcG9ydCB7IEVWRU5UX0NPREUgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudHMvYXJpYTIubWpzJztcbmltcG9ydCB7IHRyaWdnZXJFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RvbS9hcmlhMi5tanMnO1xuXG5jbGFzcyBNZW51SXRlbSB7XG4gIGNvbnN0cnVjdG9yKGRvbU5vZGUsIG5hbWVzcGFjZSkge1xuICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgdGhpcy5zdWJtZW51ID0gbnVsbDtcbiAgICB0aGlzLnN1Ym1lbnUgPSBudWxsO1xuICAgIHRoaXMuaW5pdChuYW1lc3BhY2UpO1xuICB9XG4gIGluaXQobmFtZXNwYWNlKSB7XG4gICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICBjb25zdCBtZW51Q2hpbGQgPSB0aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvcihgLiR7bmFtZXNwYWNlfS1tZW51YCk7XG4gICAgaWYgKG1lbnVDaGlsZCkge1xuICAgICAgdGhpcy5zdWJtZW51ID0gbmV3IFN1Yk1lbnUodGhpcywgbWVudUNoaWxkKTtcbiAgICB9XG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgfVxuICBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgbGV0IHByZXZEZWYgPSBmYWxzZTtcbiAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xuICAgICAgICBjYXNlIEVWRU5UX0NPREUuZG93bjoge1xuICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudC5jdXJyZW50VGFyZ2V0LCBcIm1vdXNlZW50ZXJcIik7XG4gICAgICAgICAgdGhpcy5zdWJtZW51ICYmIHRoaXMuc3VibWVudS5nb3RvU3ViSW5kZXgoMCk7XG4gICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnVwOiB7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KGV2ZW50LmN1cnJlbnRUYXJnZXQsIFwibW91c2VlbnRlclwiKTtcbiAgICAgICAgICB0aGlzLnN1Ym1lbnUgJiYgdGhpcy5zdWJtZW51LmdvdG9TdWJJbmRleCh0aGlzLnN1Ym1lbnUuc3ViTWVudUl0ZW1zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIHByZXZEZWYgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRVZFTlRfQ09ERS50YWI6IHtcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoZXZlbnQuY3VycmVudFRhcmdldCwgXCJtb3VzZWxlYXZlXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRVZFTlRfQ09ERS5lbnRlcjpcbiAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnNwYWNlOiB7XG4gICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGljaygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJldkRlZikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbnVJdGVtIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtaXRlbTIubWpzLm1hcFxuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4vbWVudS1pdGVtMi5tanMnO1xuXG5jbGFzcyBNZW51IHtcbiAgY29uc3RydWN0b3IoZG9tTm9kZSwgbmFtZXNwYWNlKSB7XG4gICAgdGhpcy5kb21Ob2RlID0gZG9tTm9kZTtcbiAgICB0aGlzLmluaXQobmFtZXNwYWNlKTtcbiAgfVxuICBpbml0KG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IG1lbnVDaGlsZHJlbiA9IHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzO1xuICAgIEFycmF5LmZyb20obWVudUNoaWxkcmVuKS5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIG5ldyBNZW51SXRlbShjaGlsZCwgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtYmFyMi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9wZW5CbG9jaywgY3JlYXRlQmxvY2ssIFRyYW5zaXRpb24sIG1lcmdlUHJvcHMsIHdpdGhDdHgsIHJlbmRlclNsb3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS9zdHlsZTIubWpzJztcblxuY29uc3QgX3NmY19tYWluID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb25cIixcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJtZW51XCIpO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHtcbiAgICAgIG9uQmVmb3JlRW50ZXI6IChlbCkgPT4gZWwuc3R5bGUub3BhY2l0eSA9IFwiMC4yXCIsXG4gICAgICBvbkVudGVyKGVsLCBkb25lKSB7XG4gICAgICAgIGFkZENsYXNzKGVsLCBgJHtucy5uYW1lc3BhY2UudmFsdWV9LW9wYWNpdHktdHJhbnNpdGlvbmApO1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sXG4gICAgICBvbkFmdGVyRW50ZXIoZWwpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsIGAke25zLm5hbWVzcGFjZS52YWx1ZX0tb3BhY2l0eS10cmFuc2l0aW9uYCk7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBcIlwiO1xuICAgICAgfSxcbiAgICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgICAgaWYgKCFlbC5kYXRhc2V0KSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGVsLmRhdGFzZXQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSkpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgbnMubShcImNvbGxhcHNlXCIpKTtcbiAgICAgICAgICBlbC5kYXRhc2V0Lm9sZE92ZXJmbG93ID0gZWwuc3R5bGUub3ZlcmZsb3c7XG4gICAgICAgICAgZWwuZGF0YXNldC5zY3JvbGxXaWR0aCA9IGVsLmNsaWVudFdpZHRoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgYWRkQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSk7XG4gICAgICAgICAgZWwuZGF0YXNldC5vbGRPdmVyZmxvdyA9IGVsLnN0eWxlLm92ZXJmbG93O1xuICAgICAgICAgIGVsLmRhdGFzZXQuc2Nyb2xsV2lkdGggPSBlbC5jbGllbnRXaWR0aC50b1N0cmluZygpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCBucy5tKFwiY29sbGFwc2VcIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gYCR7ZWwuc2Nyb2xsV2lkdGh9cHhgO1xuICAgICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICB9LFxuICAgICAgb25MZWF2ZShlbCkge1xuICAgICAgICBhZGRDbGFzcyhlbCwgXCJob3Jpem9udGFsLWNvbGxhcHNlLXRyYW5zaXRpb25cIik7XG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gYCR7ZWwuZGF0YXNldC5zY3JvbGxXaWR0aH1weGA7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgbGlzdGVuZXJzXG4gICAgfTtcbiAgfVxufSk7XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhUcmFuc2l0aW9uLCBtZXJnZVByb3BzKHsgbW9kZTogXCJvdXQtaW5cIiB9LCBfY3R4Lmxpc3RlbmVycyksIHtcbiAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgIF0pLFxuICAgIF86IDNcbiAgfSwgMTYpO1xufVxudmFyIEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJyZW5kZXJcIiwgX3NmY19yZW5kZXJdLCBbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1jb2xsYXBzZS10cmFuc2l0aW9uLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb24gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVudS1jb2xsYXBzZS10cmFuc2l0aW9uMi5tanMubWFwXG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIHVzZU1lbnUoaW5zdGFuY2UsIGN1cnJlbnRJbmRleCkge1xuICBjb25zdCBpbmRleFBhdGggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGluc3RhbmNlLnBhcmVudDtcbiAgICBjb25zdCBwYXRoID0gW2N1cnJlbnRJbmRleC52YWx1ZV07XG4gICAgd2hpbGUgKHBhcmVudC50eXBlLm5hbWUgIT09IFwiRWxNZW51XCIpIHtcbiAgICAgIGlmIChwYXJlbnQucHJvcHMuaW5kZXgpIHtcbiAgICAgICAgcGF0aC51bnNoaWZ0KHBhcmVudC5wcm9wcy5pbmRleCk7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfSk7XG4gIGNvbnN0IHBhcmVudE1lbnUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGluc3RhbmNlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICYmICFbXCJFbE1lbnVcIiwgXCJFbFN1Yk1lbnVcIl0uaW5jbHVkZXMocGFyZW50LnR5cGUubmFtZSkpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBhcmVudE1lbnUsXG4gICAgaW5kZXhQYXRoXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZU1lbnUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lbnUyLm1qcy5tYXBcbiIsImltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFRpbnlDb2xvciB9IGZyb20gJ0BjdHJsL3Rpbnljb2xvcic7XG5cbmZ1bmN0aW9uIHVzZU1lbnVDb2xvcihwcm9wcykge1xuICBjb25zdCBtZW51QmFyQ29sb3IgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgY29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGNvbG9yKS5zaGFkZSgyMCkudG9TdHJpbmcoKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWVudUJhckNvbG9yO1xufVxuXG5leHBvcnQgeyB1c2VNZW51Q29sb3IgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lbnUtY29sb3IyLm1qcy5tYXBcbiIsImltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgdXNlTWVudUNvbG9yIGZyb20gJy4vdXNlLW1lbnUtY29sb3IyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Mi5tanMnO1xuXG5jb25zdCB1c2VNZW51Q3NzVmFyID0gKHByb3BzLCBsZXZlbCkgPT4ge1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcIm1lbnVcIik7XG4gIHJldHVybiBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIG5zLmNzc1ZhckJsb2NrKHtcbiAgICAgIFwidGV4dC1jb2xvclwiOiBwcm9wcy50ZXh0Q29sb3IgfHwgXCJcIixcbiAgICAgIFwiaG92ZXItdGV4dC1jb2xvclwiOiBwcm9wcy50ZXh0Q29sb3IgfHwgXCJcIixcbiAgICAgIFwiYmctY29sb3JcIjogcHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IFwiXCIsXG4gICAgICBcImhvdmVyLWJnLWNvbG9yXCI6IHVzZU1lbnVDb2xvcihwcm9wcykudmFsdWUgfHwgXCJcIixcbiAgICAgIFwiYWN0aXZlLWNvbG9yXCI6IHByb3BzLmFjdGl2ZVRleHRDb2xvciB8fCBcIlwiLFxuICAgICAgbGV2ZWw6IGAke2xldmVsfWBcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgeyB1c2VNZW51Q3NzVmFyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbWVudS1jc3MtdmFyMi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgY29tcHV0ZWQsIGluamVjdCwgcmVmLCByZWFjdGl2ZSwgd2F0Y2gsIHByb3ZpZGUsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBoLCBGcmFnbWVudCwgd2l0aERpcmVjdGl2ZXMsIHZTaG93IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHVzZVRpbWVvdXRGbiB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgX0NvbGxhcHNlVHJhbnNpdGlvbiBmcm9tICcuLi8uLi9jb2xsYXBzZS10cmFuc2l0aW9uL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRWxUb29sdGlwIH0gZnJvbSAnLi4vLi4vdG9vbHRpcC9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgQXJyb3dEb3duLCBBcnJvd1JpZ2h0IH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleDIubWpzJztcbmltcG9ydCB1c2VNZW51IGZyb20gJy4vdXNlLW1lbnUyLm1qcyc7XG5pbXBvcnQgeyB1c2VNZW51Q3NzVmFyIH0gZnJvbSAnLi91c2UtbWVudS1jc3MtdmFyMi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lMi5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcjIubWpzJztcblxuY29uc3Qgc3ViTWVudVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGluZGV4OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHNob3dUaW1lb3V0OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDMwMFxuICB9LFxuICBoaWRlVGltZW91dDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAzMDBcbiAgfSxcbiAgcG9wcGVyQ2xhc3M6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIHBvcHBlckFwcGVuZFRvQm9keToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdm9pZCAwXG4gIH0sXG4gIHBvcHBlck9mZnNldDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA2XG4gIH1cbn0pO1xuY29uc3QgQ09NUE9ORU5UX05BTUUgPSBcIkVsU3ViTWVudVwiO1xudmFyIFN1Yk1lbnUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBDT01QT05FTlRfTkFNRSxcbiAgcHJvcHM6IHN1Yk1lbnVQcm9wcyxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGV4cG9zZSB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCB7IGluZGV4UGF0aCwgcGFyZW50TWVudSB9ID0gdXNlTWVudShpbnN0YW5jZSwgY29tcHV0ZWQoKCkgPT4gcHJvcHMuaW5kZXgpKTtcbiAgICBjb25zdCBuc01lbnUgPSB1c2VOYW1lc3BhY2UoXCJtZW51XCIpO1xuICAgIGNvbnN0IG5zU3ViTWVudSA9IHVzZU5hbWVzcGFjZShcInN1Yi1tZW51XCIpO1xuICAgIGNvbnN0IHJvb3RNZW51ID0gaW5qZWN0KFwicm9vdE1lbnVcIik7XG4gICAgaWYgKCFyb290TWVudSlcbiAgICAgIHRocm93RXJyb3IoQ09NUE9ORU5UX05BTUUsIFwiY2FuIG5vdCBpbmplY3Qgcm9vdCBtZW51XCIpO1xuICAgIGNvbnN0IHN1Yk1lbnUgPSBpbmplY3QoYHN1Yk1lbnU6JHtwYXJlbnRNZW51LnZhbHVlLnVpZH1gKTtcbiAgICBpZiAoIXN1Yk1lbnUpXG4gICAgICB0aHJvd0Vycm9yKENPTVBPTkVOVF9OQU1FLCBcImNhbiBub3QgaW5qZWN0IHN1YiBtZW51XCIpO1xuICAgIGNvbnN0IGl0ZW1zID0gcmVmKHt9KTtcbiAgICBjb25zdCBzdWJNZW51cyA9IHJlZih7fSk7XG4gICAgbGV0IHRpbWVvdXQ7XG4gICAgY29uc3QgbW91c2VJbkNoaWxkID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCB2ZXJ0aWNhbFRpdGxlUmVmID0gcmVmKCk7XG4gICAgY29uc3QgdlBvcHBlciA9IHJlZihudWxsKTtcbiAgICBjb25zdCBjdXJyZW50UGxhY2VtZW50ID0gY29tcHV0ZWQoKCkgPT4gbW9kZS52YWx1ZSA9PT0gXCJob3Jpem9udGFsXCIgJiYgaXNGaXJzdExldmVsLnZhbHVlID8gXCJib3R0b20tc3RhcnRcIiA6IFwicmlnaHQtc3RhcnRcIik7XG4gICAgY29uc3Qgc3ViTWVudVRpdGxlSWNvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBtb2RlLnZhbHVlID09PSBcImhvcml6b250YWxcIiAmJiBpc0ZpcnN0TGV2ZWwudmFsdWUgfHwgbW9kZS52YWx1ZSA9PT0gXCJ2ZXJ0aWNhbFwiICYmICFyb290TWVudS5wcm9wcy5jb2xsYXBzZSA/IEFycm93RG93biA6IEFycm93UmlnaHQ7XG4gICAgfSk7XG4gICAgY29uc3QgaXNGaXJzdExldmVsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHN1Yk1lbnUubGV2ZWwgPT09IDA7XG4gICAgfSk7XG4gICAgY29uc3QgYXBwZW5kVG9Cb2R5ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnBvcHBlckFwcGVuZFRvQm9keSA9PT0gdm9pZCAwID8gaXNGaXJzdExldmVsLnZhbHVlIDogQm9vbGVhbihwcm9wcy5wb3BwZXJBcHBlbmRUb0JvZHkpO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lbnVUcmFuc2l0aW9uTmFtZSA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLmNvbGxhcHNlID8gYCR7bnNNZW51Lm5hbWVzcGFjZS52YWx1ZX0tem9vbS1pbi1sZWZ0YCA6IGAke25zTWVudS5uYW1lc3BhY2UudmFsdWV9LXpvb20taW4tdG9wYCk7XG4gICAgY29uc3QgZmFsbGJhY2tQbGFjZW1lbnRzID0gY29tcHV0ZWQoKCkgPT4gbW9kZS52YWx1ZSA9PT0gXCJob3Jpem9udGFsXCIgJiYgaXNGaXJzdExldmVsLnZhbHVlID8gW1xuICAgICAgXCJib3R0b20tc3RhcnRcIixcbiAgICAgIFwiYm90dG9tLWVuZFwiLFxuICAgICAgXCJ0b3Atc3RhcnRcIixcbiAgICAgIFwidG9wLWVuZFwiLFxuICAgICAgXCJyaWdodC1zdGFydFwiLFxuICAgICAgXCJsZWZ0LXN0YXJ0XCJcbiAgICBdIDogW1xuICAgICAgXCJyaWdodC1zdGFydFwiLFxuICAgICAgXCJsZWZ0LXN0YXJ0XCIsXG4gICAgICBcImJvdHRvbS1zdGFydFwiLFxuICAgICAgXCJib3R0b20tZW5kXCIsXG4gICAgICBcInRvcC1zdGFydFwiLFxuICAgICAgXCJ0b3AtZW5kXCJcbiAgICBdKTtcbiAgICBjb25zdCBvcGVuZWQgPSBjb21wdXRlZCgoKSA9PiByb290TWVudS5vcGVuZWRNZW51cy5pbmNsdWRlcyhwcm9wcy5pbmRleCkpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgT2JqZWN0LnZhbHVlcyhpdGVtcy52YWx1ZSkuZm9yRWFjaCgoaXRlbTIpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0yLmFjdGl2ZSkge1xuICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBPYmplY3QudmFsdWVzKHN1Yk1lbnVzLnZhbHVlKS5mb3JFYWNoKChzdWJJdGVtKSA9PiB7XG4gICAgICAgIGlmIChzdWJJdGVtLmFjdGl2ZSkge1xuICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXNBY3RpdmU7XG4gICAgfSk7XG4gICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gY29tcHV0ZWQoKCkgPT4gcm9vdE1lbnUucHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IFwiXCIpO1xuICAgIGNvbnN0IGFjdGl2ZVRleHRDb2xvciA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLmFjdGl2ZVRleHRDb2xvciB8fCBcIlwiKTtcbiAgICBjb25zdCB0ZXh0Q29sb3IgPSBjb21wdXRlZCgoKSA9PiByb290TWVudS5wcm9wcy50ZXh0Q29sb3IgfHwgXCJcIik7XG4gICAgY29uc3QgbW9kZSA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLm1vZGUpO1xuICAgIGNvbnN0IGl0ZW0gPSByZWFjdGl2ZSh7XG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICBpbmRleFBhdGgsXG4gICAgICBhY3RpdmVcbiAgICB9KTtcbiAgICBjb25zdCB0aXRsZVN0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKG1vZGUudmFsdWUgIT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29sb3I6IHRleHRDb2xvci52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IGFjdGl2ZS52YWx1ZSA/IHJvb3RNZW51LnByb3BzLmFjdGl2ZVRleHRDb2xvciA/IGFjdGl2ZVRleHRDb2xvci52YWx1ZSA6IFwiXCIgOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgIGNvbG9yOiBhY3RpdmUudmFsdWUgPyBhY3RpdmVUZXh0Q29sb3IudmFsdWUgOiB0ZXh0Q29sb3IudmFsdWVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgZG9EZXN0cm95ID0gKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICByZXR1cm4gKF9jID0gKF9iID0gKF9hID0gdlBvcHBlci52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBvcHBlclJlZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnBvcHBlckluc3RhbmNlUmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZGVzdHJveSgpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ29sbGFwc2VUb2dnbGUgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgZG9EZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgIGlmIChyb290TWVudS5wcm9wcy5tZW51VHJpZ2dlciA9PT0gXCJob3ZlclwiICYmIHJvb3RNZW51LnByb3BzLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiIHx8IHJvb3RNZW51LnByb3BzLmNvbGxhcHNlICYmIHJvb3RNZW51LnByb3BzLm1vZGUgPT09IFwidmVydGljYWxcIiB8fCBwcm9wcy5kaXNhYmxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcm9vdE1lbnUuaGFuZGxlU3ViTWVudUNsaWNrKHtcbiAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICBpbmRleFBhdGg6IGluZGV4UGF0aC52YWx1ZSxcbiAgICAgICAgYWN0aXZlOiBhY3RpdmUudmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW91c2VlbnRlciA9IChldmVudCwgc2hvd1RpbWVvdXQgPSBwcm9wcy5zaG93VGltZW91dCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwiZm9jdXNcIiAmJiAhZXZlbnQucmVsYXRlZFRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocm9vdE1lbnUucHJvcHMubWVudVRyaWdnZXIgPT09IFwiY2xpY2tcIiAmJiByb290TWVudS5wcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCAhcm9vdE1lbnUucHJvcHMuY29sbGFwc2UgJiYgcm9vdE1lbnUucHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiIHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN1Yk1lbnUubW91c2VJbkNoaWxkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHRpbWVvdXQgPT0gbnVsbCA/IHZvaWQgMCA6IHRpbWVvdXQoKTtcbiAgICAgICh7IHN0b3A6IHRpbWVvdXQgfSA9IHVzZVRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgIHJvb3RNZW51Lm9wZW5NZW51KHByb3BzLmluZGV4LCBpbmRleFBhdGgudmFsdWUpO1xuICAgICAgfSwgc2hvd1RpbWVvdXQpKTtcbiAgICAgIGlmIChhcHBlbmRUb0JvZHkudmFsdWUpIHtcbiAgICAgICAgKF9hID0gcGFyZW50TWVudS52YWx1ZS52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJtb3VzZWVudGVyXCIpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlbGVhdmUgPSAoZGVlcERpc3BhdGNoID0gZmFsc2UpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICBpZiAocm9vdE1lbnUucHJvcHMubWVudVRyaWdnZXIgPT09IFwiY2xpY2tcIiAmJiByb290TWVudS5wcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCAhcm9vdE1lbnUucHJvcHMuY29sbGFwc2UgJiYgcm9vdE1lbnUucHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRpbWVvdXQgPT0gbnVsbCA/IHZvaWQgMCA6IHRpbWVvdXQoKTtcbiAgICAgIHN1Yk1lbnUubW91c2VJbkNoaWxkLnZhbHVlID0gZmFsc2U7XG4gICAgICAoeyBzdG9wOiB0aW1lb3V0IH0gPSB1c2VUaW1lb3V0Rm4oKCkgPT4gIW1vdXNlSW5DaGlsZC52YWx1ZSAmJiByb290TWVudS5jbG9zZU1lbnUocHJvcHMuaW5kZXgsIGluZGV4UGF0aC52YWx1ZSksIHByb3BzLmhpZGVUaW1lb3V0KSk7XG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5LnZhbHVlICYmIGRlZXBEaXNwYXRjaCkge1xuICAgICAgICBpZiAoKChfYSA9IGluc3RhbmNlLnBhcmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnR5cGUubmFtZSkgPT09IFwiRWxTdWJNZW51XCIpIHtcbiAgICAgICAgICAoX2IgPSBzdWJNZW51LmhhbmRsZU1vdXNlbGVhdmUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKHN1Yk1lbnUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiByb290TWVudS5wcm9wcy5jb2xsYXBzZSwgKHZhbHVlKSA9PiBoYW5kbGVDb2xsYXBzZVRvZ2dsZShCb29sZWFuKHZhbHVlKSkpO1xuICAgIHtcbiAgICAgIGNvbnN0IGFkZFN1Yk1lbnUgPSAoaXRlbTIpID0+IHtcbiAgICAgICAgc3ViTWVudXMudmFsdWVbaXRlbTIuaW5kZXhdID0gaXRlbTI7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVtb3ZlU3ViTWVudSA9IChpdGVtMikgPT4ge1xuICAgICAgICBkZWxldGUgc3ViTWVudXMudmFsdWVbaXRlbTIuaW5kZXhdO1xuICAgICAgfTtcbiAgICAgIHByb3ZpZGUoYHN1Yk1lbnU6JHtpbnN0YW5jZS51aWR9YCwge1xuICAgICAgICBhZGRTdWJNZW51LFxuICAgICAgICByZW1vdmVTdWJNZW51LFxuICAgICAgICBoYW5kbGVNb3VzZWxlYXZlLFxuICAgICAgICBtb3VzZUluQ2hpbGQsXG4gICAgICAgIGxldmVsOiBzdWJNZW51LmxldmVsICsgMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGV4cG9zZSh7XG4gICAgICBvcGVuZWRcbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgcm9vdE1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICAgIHN1Yk1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgc3ViTWVudS5yZW1vdmVTdWJNZW51KGl0ZW0pO1xuICAgICAgcm9vdE1lbnUucmVtb3ZlU3ViTWVudShpdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgdGl0bGVUYWcgPSBbXG4gICAgICAgIChfYSA9IHNsb3RzLnRpdGxlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChzbG90cyksXG4gICAgICAgIGgoRWxJY29uLCB7XG4gICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwiaWNvbi1hcnJvd1wiKVxuICAgICAgICB9LCB7IGRlZmF1bHQ6ICgpID0+IGgoc3ViTWVudVRpdGxlSWNvbi52YWx1ZSkgfSlcbiAgICAgIF07XG4gICAgICBjb25zdCB1bFN0eWxlID0gdXNlTWVudUNzc1Zhcihyb290TWVudS5wcm9wcywgc3ViTWVudS5sZXZlbCArIDEpO1xuICAgICAgY29uc3QgY2hpbGQgPSByb290TWVudS5pc01lbnVQb3B1cCA/IGgoRWxUb29sdGlwLCB7XG4gICAgICAgIHJlZjogdlBvcHBlcixcbiAgICAgICAgdmlzaWJsZTogb3BlbmVkLnZhbHVlLFxuICAgICAgICBlZmZlY3Q6IFwibGlnaHRcIixcbiAgICAgICAgcHVyZTogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiBwcm9wcy5wb3BwZXJPZmZzZXQsXG4gICAgICAgIHNob3dBcnJvdzogZmFsc2UsXG4gICAgICAgIHBlcnNpc3RlbnQ6IHRydWUsXG4gICAgICAgIHBvcHBlckNsYXNzOiBwcm9wcy5wb3BwZXJDbGFzcyxcbiAgICAgICAgcGxhY2VtZW50OiBjdXJyZW50UGxhY2VtZW50LnZhbHVlLFxuICAgICAgICB0ZWxlcG9ydGVkOiBhcHBlbmRUb0JvZHkudmFsdWUsXG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogZmFsbGJhY2tQbGFjZW1lbnRzLnZhbHVlLFxuICAgICAgICB0cmFuc2l0aW9uOiBtZW51VHJhbnNpdGlvbk5hbWUudmFsdWUsXG4gICAgICAgIGdwdUFjY2VsZXJhdGlvbjogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgY29udGVudDogKCkgPT4ge1xuICAgICAgICAgIHZhciBfYTI7XG4gICAgICAgICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgICAgbnNNZW51Lm0obW9kZS52YWx1ZSksXG4gICAgICAgICAgICAgIG5zTWVudS5tKFwicG9wdXAtY29udGFpbmVyXCIpLFxuICAgICAgICAgICAgICBwcm9wcy5wb3BwZXJDbGFzc1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9uTW91c2VlbnRlcjogKGV2dCkgPT4gaGFuZGxlTW91c2VlbnRlcihldnQsIDEwMCksXG4gICAgICAgICAgICBvbk1vdXNlbGVhdmU6ICgpID0+IGhhbmRsZU1vdXNlbGVhdmUodHJ1ZSksXG4gICAgICAgICAgICBvbkZvY3VzOiAoZXZ0KSA9PiBoYW5kbGVNb3VzZWVudGVyKGV2dCwgMTAwKVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIGgoXCJ1bFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICAgICAgbnNNZW51LmIoKSxcbiAgICAgICAgICAgICAgICBuc01lbnUubShcInBvcHVwXCIpLFxuICAgICAgICAgICAgICAgIG5zTWVudS5tKGBwb3B1cC0ke2N1cnJlbnRQbGFjZW1lbnQudmFsdWV9YClcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3R5bGU6IHVsU3R5bGUudmFsdWVcbiAgICAgICAgICAgIH0sIFsoX2EyID0gc2xvdHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHNsb3RzKV0pXG4gICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGgoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzOiBuc1N1Yk1lbnUuZShcInRpdGxlXCIpLFxuICAgICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgICB0aXRsZVN0eWxlLnZhbHVlLFxuICAgICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvci52YWx1ZSB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgICB9LCB0aXRsZVRhZylcbiAgICAgIH0pIDogaChGcmFnbWVudCwge30sIFtcbiAgICAgICAgaChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwidGl0bGVcIiksXG4gICAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICAgIHRpdGxlU3R5bGUudmFsdWUsXG4gICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLnZhbHVlIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlZjogdmVydGljYWxUaXRsZVJlZixcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgICB9LCB0aXRsZVRhZyksXG4gICAgICAgIGgoX0NvbGxhcHNlVHJhbnNpdGlvbiwge30sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EyO1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKGgoXCJ1bFwiLCB7XG4gICAgICAgICAgICAgIHJvbGU6IFwibWVudVwiLFxuICAgICAgICAgICAgICBjbGFzczogW25zTWVudS5iKCksIG5zTWVudS5tKFwiaW5saW5lXCIpXSxcbiAgICAgICAgICAgICAgc3R5bGU6IHVsU3R5bGUudmFsdWVcbiAgICAgICAgICAgIH0sIFsoX2EyID0gc2xvdHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHNsb3RzKV0pLCBbW3ZTaG93LCBvcGVuZWQudmFsdWVdXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSk7XG4gICAgICByZXR1cm4gaChcImxpXCIsIHtcbiAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICBuc1N1Yk1lbnUuYigpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcImFjdGl2ZVwiLCBhY3RpdmUudmFsdWUpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcIm9wZW5lZFwiLCBvcGVuZWQudmFsdWUpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcImRpc2FibGVkXCIsIHByb3BzLmRpc2FibGVkKVxuICAgICAgICBdLFxuICAgICAgICByb2xlOiBcIm1lbnVpdGVtXCIsXG4gICAgICAgIGFyaWFIYXNwb3B1cDogdHJ1ZSxcbiAgICAgICAgYXJpYUV4cGFuZGVkOiBvcGVuZWQudmFsdWUsXG4gICAgICAgIG9uTW91c2VlbnRlcjogaGFuZGxlTW91c2VlbnRlcixcbiAgICAgICAgb25Nb3VzZWxlYXZlOiAoKSA9PiBoYW5kbGVNb3VzZWxlYXZlKHRydWUpLFxuICAgICAgICBvbkZvY3VzOiBoYW5kbGVNb3VzZWVudGVyXG4gICAgICB9LCBbY2hpbGRdKTtcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgU3ViTWVudSBhcyBkZWZhdWx0LCBzdWJNZW51UHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Yi1tZW51Mi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgcmVmLCBjb21wdXRlZCwgbmV4dFRpY2ssIHdhdGNoLCBwcm92aWRlLCByZWFjdGl2ZSwgb25Nb3VudGVkLCB3aXRoRGlyZWN0aXZlcywgaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi9pY29uL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgTW9yZSB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IE1lbnUkMSBmcm9tICcuL3V0aWxzL21lbnUtYmFyMi5tanMnO1xuaW1wb3J0IEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiBmcm9tICcuL21lbnUtY29sbGFwc2UtdHJhbnNpdGlvbjIubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3ViLW1lbnUyLm1qcyc7XG5pbXBvcnQgeyB1c2VNZW51Q3NzVmFyIH0gZnJvbSAnLi91c2UtbWVudS1jc3MtdmFyMi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcbmltcG9ydCB7IG11dGFibGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy90eXBlc2NyaXB0Mi5tanMnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzT2JqZWN0IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9yZXNpemUvaW5kZXgyLm1qcyc7XG5cbmNvbnN0IG1lbnVQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICBtb2RlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogW1wiaG9yaXpvbnRhbFwiLCBcInZlcnRpY2FsXCJdLFxuICAgIGRlZmF1bHQ6IFwidmVydGljYWxcIlxuICB9LFxuICBkZWZhdWx0QWN0aXZlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgZGVmYXVsdE9wZW5lZHM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShBcnJheSksXG4gICAgZGVmYXVsdDogKCkgPT4gbXV0YWJsZShbXSlcbiAgfSxcbiAgdW5pcXVlT3BlbmVkOiBCb29sZWFuLFxuICByb3V0ZXI6IEJvb2xlYW4sXG4gIG1lbnVUcmlnZ2VyOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogW1wiaG92ZXJcIiwgXCJjbGlja1wiXSxcbiAgICBkZWZhdWx0OiBcImhvdmVyXCJcbiAgfSxcbiAgY29sbGFwc2U6IEJvb2xlYW4sXG4gIGJhY2tncm91bmRDb2xvcjogU3RyaW5nLFxuICB0ZXh0Q29sb3I6IFN0cmluZyxcbiAgYWN0aXZlVGV4dENvbG9yOiBTdHJpbmcsXG4gIGNvbGxhcHNlVHJhbnNpdGlvbjoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBlbGxpcHNpczoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9XG59KTtcbmNvbnN0IGNoZWNrSW5kZXhQYXRoID0gKGluZGV4UGF0aCkgPT4gQXJyYXkuaXNBcnJheShpbmRleFBhdGgpICYmIGluZGV4UGF0aC5ldmVyeSgocGF0aCkgPT4gaXNTdHJpbmcocGF0aCkpO1xuY29uc3QgbWVudUVtaXRzID0ge1xuICBjbG9zZTogKGluZGV4LCBpbmRleFBhdGgpID0+IGlzU3RyaW5nKGluZGV4KSAmJiBjaGVja0luZGV4UGF0aChpbmRleFBhdGgpLFxuICBvcGVuOiAoaW5kZXgsIGluZGV4UGF0aCkgPT4gaXNTdHJpbmcoaW5kZXgpICYmIGNoZWNrSW5kZXhQYXRoKGluZGV4UGF0aCksXG4gIHNlbGVjdDogKGluZGV4LCBpbmRleFBhdGgsIGl0ZW0sIHJvdXRlclJlc3VsdCkgPT4gaXNTdHJpbmcoaW5kZXgpICYmIGNoZWNrSW5kZXhQYXRoKGluZGV4UGF0aCkgJiYgaXNPYmplY3QoaXRlbSkgJiYgKHJvdXRlclJlc3VsdCA9PT0gdm9pZCAwIHx8IHJvdXRlclJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpXG59O1xudmFyIE1lbnUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsTWVudVwiLFxuICBwcm9wczogbWVudVByb3BzLFxuICBlbWl0czogbWVudUVtaXRzLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cywgZXhwb3NlIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHJvdXRlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlcjtcbiAgICBjb25zdCBtZW51ID0gcmVmKCk7XG4gICAgY29uc3QgbnNNZW51ID0gdXNlTmFtZXNwYWNlKFwibWVudVwiKTtcbiAgICBjb25zdCBuc1N1Yk1lbnUgPSB1c2VOYW1lc3BhY2UoXCJzdWItbWVudVwiKTtcbiAgICBjb25zdCBvcGVuZWRNZW51cyA9IHJlZihwcm9wcy5kZWZhdWx0T3BlbmVkcyAmJiAhcHJvcHMuY29sbGFwc2UgPyBwcm9wcy5kZWZhdWx0T3BlbmVkcy5zbGljZSgwKSA6IFtdKTtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHJlZihwcm9wcy5kZWZhdWx0QWN0aXZlKTtcbiAgICBjb25zdCBpdGVtcyA9IHJlZih7fSk7XG4gICAgY29uc3Qgc3ViTWVudXMgPSByZWYoe30pO1xuICAgIGNvbnN0IGlzTWVudVBvcHVwID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiIHx8IHByb3BzLm1vZGUgPT09IFwidmVydGljYWxcIiAmJiBwcm9wcy5jb2xsYXBzZTtcbiAgICB9KTtcbiAgICBjb25zdCBpbml0TWVudSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSBhY3RpdmVJbmRleC52YWx1ZSAmJiBpdGVtcy52YWx1ZVthY3RpdmVJbmRleC52YWx1ZV07XG4gICAgICBpZiAoIWFjdGl2ZUl0ZW0gfHwgcHJvcHMubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgfHwgcHJvcHMuY29sbGFwc2UpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGluZGV4UGF0aCA9IGFjdGl2ZUl0ZW0uaW5kZXhQYXRoO1xuICAgICAgaW5kZXhQYXRoLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHN1Yk1lbnUgPSBzdWJNZW51cy52YWx1ZVtpbmRleF07XG4gICAgICAgIHN1Yk1lbnUgJiYgb3Blbk1lbnUoaW5kZXgsIHN1Yk1lbnUuaW5kZXhQYXRoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb3Blbk1lbnUgPSAoaW5kZXgsIGluZGV4UGF0aCkgPT4ge1xuICAgICAgaWYgKG9wZW5lZE1lbnVzLnZhbHVlLmluY2x1ZGVzKGluZGV4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHByb3BzLnVuaXF1ZU9wZW5lZCkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IG9wZW5lZE1lbnVzLnZhbHVlLmZpbHRlcigoaW5kZXgyKSA9PiBpbmRleFBhdGguaW5jbHVkZXMoaW5kZXgyKSk7XG4gICAgICB9XG4gICAgICBvcGVuZWRNZW51cy52YWx1ZS5wdXNoKGluZGV4KTtcbiAgICAgIGVtaXQoXCJvcGVuXCIsIGluZGV4LCBpbmRleFBhdGgpO1xuICAgIH07XG4gICAgY29uc3QgY2xvc2VNZW51ID0gKGluZGV4LCBpbmRleFBhdGgpID0+IHtcbiAgICAgIGNvbnN0IGkgPSBvcGVuZWRNZW51cy52YWx1ZS5pbmRleE9mKGluZGV4KTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgICBlbWl0KFwiY2xvc2VcIiwgaW5kZXgsIGluZGV4UGF0aCk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTdWJNZW51Q2xpY2sgPSAoe1xuICAgICAgaW5kZXgsXG4gICAgICBpbmRleFBhdGhcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBpc09wZW5lZCA9IG9wZW5lZE1lbnVzLnZhbHVlLmluY2x1ZGVzKGluZGV4KTtcbiAgICAgIGlmIChpc09wZW5lZCkge1xuICAgICAgICBjbG9zZU1lbnUoaW5kZXgsIGluZGV4UGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuTWVudShpbmRleCwgaW5kZXhQYXRoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1lbnVJdGVtQ2xpY2sgPSAobWVudUl0ZW0pID0+IHtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCBwcm9wcy5jb2xsYXBzZSkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IFtdO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBpbmRleCwgaW5kZXhQYXRoIH0gPSBtZW51SXRlbTtcbiAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwIHx8IGluZGV4UGF0aCA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAocHJvcHMucm91dGVyICYmIHJvdXRlcikge1xuICAgICAgICBjb25zdCByb3V0ZSA9IG1lbnVJdGVtLnJvdXRlIHx8IGluZGV4O1xuICAgICAgICBjb25zdCByb3V0ZXJSZXN1bHQgPSByb3V0ZXIucHVzaChyb3V0ZSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICBhY3RpdmVJbmRleC52YWx1ZSA9IGluZGV4O1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgICAgICBlbWl0KFwic2VsZWN0XCIsIGluZGV4LCBpbmRleFBhdGgsIHsgaW5kZXgsIGluZGV4UGF0aCwgcm91dGUgfSwgcm91dGVyUmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUluZGV4LnZhbHVlID0gaW5kZXg7XG4gICAgICAgIGVtaXQoXCJzZWxlY3RcIiwgaW5kZXgsIGluZGV4UGF0aCwgeyBpbmRleCwgaW5kZXhQYXRoIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlQWN0aXZlSW5kZXggPSAodmFsKSA9PiB7XG4gICAgICBjb25zdCBpdGVtc0luRGF0YSA9IGl0ZW1zLnZhbHVlO1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zSW5EYXRhW3ZhbF0gfHwgYWN0aXZlSW5kZXgudmFsdWUgJiYgaXRlbXNJbkRhdGFbYWN0aXZlSW5kZXgudmFsdWVdIHx8IGl0ZW1zSW5EYXRhW3Byb3BzLmRlZmF1bHRBY3RpdmVdO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXgudmFsdWUgPSBpdGVtLmluZGV4O1xuICAgICAgICBpbml0TWVudSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlSW5kZXgudmFsdWUgPSB2YWw7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBuZXh0VGljaygoKSA9PiBpbnN0YW5jZS5wcm94eS4kZm9yY2VVcGRhdGUoKSk7XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kZWZhdWx0QWN0aXZlLCAoY3VycmVudEFjdGl2ZSkgPT4ge1xuICAgICAgaWYgKCFpdGVtcy52YWx1ZVtjdXJyZW50QWN0aXZlXSkge1xuICAgICAgICBhY3RpdmVJbmRleC52YWx1ZSA9IFwiXCI7XG4gICAgICB9XG4gICAgICB1cGRhdGVBY3RpdmVJbmRleChjdXJyZW50QWN0aXZlKTtcbiAgICB9KTtcbiAgICB3YXRjaChpdGVtcy52YWx1ZSwgKCkgPT4gaW5pdE1lbnUoKSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuY29sbGFwc2UsICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKVxuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IFtdO1xuICAgIH0pO1xuICAgIHtcbiAgICAgIGNvbnN0IGFkZFN1Yk1lbnUgPSAoaXRlbSkgPT4ge1xuICAgICAgICBzdWJNZW51cy52YWx1ZVtpdGVtLmluZGV4XSA9IGl0ZW07XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVtb3ZlU3ViTWVudSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBzdWJNZW51cy52YWx1ZVtpdGVtLmluZGV4XTtcbiAgICAgIH07XG4gICAgICBjb25zdCBhZGRNZW51SXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGl0ZW1zLnZhbHVlW2l0ZW0uaW5kZXhdID0gaXRlbTtcbiAgICAgIH07XG4gICAgICBjb25zdCByZW1vdmVNZW51SXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBpdGVtcy52YWx1ZVtpdGVtLmluZGV4XTtcbiAgICAgIH07XG4gICAgICBwcm92aWRlKFwicm9vdE1lbnVcIiwgcmVhY3RpdmUoe1xuICAgICAgICBwcm9wcyxcbiAgICAgICAgb3BlbmVkTWVudXMsXG4gICAgICAgIGl0ZW1zLFxuICAgICAgICBzdWJNZW51cyxcbiAgICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICAgIGlzTWVudVBvcHVwLFxuICAgICAgICBhZGRNZW51SXRlbSxcbiAgICAgICAgcmVtb3ZlTWVudUl0ZW0sXG4gICAgICAgIGFkZFN1Yk1lbnUsXG4gICAgICAgIHJlbW92ZVN1Yk1lbnUsXG4gICAgICAgIG9wZW5NZW51LFxuICAgICAgICBjbG9zZU1lbnUsXG4gICAgICAgIGhhbmRsZU1lbnVJdGVtQ2xpY2ssXG4gICAgICAgIGhhbmRsZVN1Yk1lbnVDbGlja1xuICAgICAgfSkpO1xuICAgICAgcHJvdmlkZShgc3ViTWVudToke2luc3RhbmNlLnVpZH1gLCB7XG4gICAgICAgIGFkZFN1Yk1lbnUsXG4gICAgICAgIHJlbW92ZVN1Yk1lbnUsXG4gICAgICAgIG1vdXNlSW5DaGlsZDogcmVmKGZhbHNlKSxcbiAgICAgICAgbGV2ZWw6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaW5pdE1lbnUoKTtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICBuZXcgTWVudSQxKGluc3RhbmNlLnZub2RlLmVsLCBuc01lbnUubmFtZXNwYWNlLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB7XG4gICAgICBjb25zdCBvcGVuID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXhQYXRoIH0gPSBzdWJNZW51cy52YWx1ZVtpbmRleF07XG4gICAgICAgIGluZGV4UGF0aC5mb3JFYWNoKChpKSA9PiBvcGVuTWVudShpLCBpbmRleFBhdGgpKTtcbiAgICAgIH07XG4gICAgICBleHBvc2Uoe1xuICAgICAgICBvcGVuLFxuICAgICAgICBjbG9zZTogY2xvc2VNZW51LFxuICAgICAgICBoYW5kbGVSZXNpemVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBmbGF0dGVkQ2hpbGRyZW4gPSAoY2hpbGRyZW4pID0+IHtcbiAgICAgIGNvbnN0IHZub2RlcyA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBbY2hpbGRyZW5dO1xuICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICB2bm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQuY2hpbGRyZW4pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goLi4uZmxhdHRlZENoaWxkcmVuKGNoaWxkLmNoaWxkcmVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBjb25zdCB1c2VWTm9kZVJlc2l6ZSA9ICh2bm9kZSkgPT4gcHJvcHMubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgPyB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgW1tSZXNpemUsIGhhbmRsZVJlc2l6ZV1dKSA6IHZub2RlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICBsZXQgc2xvdCA9IChfYiA9IChfYSA9IHNsb3RzLmRlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHNsb3RzKSkgIT0gbnVsbCA/IF9iIDogW107XG4gICAgICBjb25zdCB2U2hvd01vcmUgPSBbXTtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiAmJiBtZW51LnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zMiA9IEFycmF5LmZyb20oKF9kID0gKF9jID0gbWVudS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNoaWxkTm9kZXMpICE9IG51bGwgPyBfZCA6IFtdKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ubm9kZU5hbWUgIT09IFwiI3RleHRcIiB8fCBpdGVtLm5vZGVWYWx1ZSk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU2xvdCA9IGZsYXR0ZWRDaGlsZHJlbihzbG90KTtcbiAgICAgICAgY29uc3QgbW9yZUl0ZW1XaWR0aCA9IDY0O1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IE51bWJlci5wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lbnUudmFsdWUpLnBhZGRpbmdMZWZ0LCAxMCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IE51bWJlci5wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lbnUudmFsdWUpLnBhZGRpbmdSaWdodCwgMTApO1xuICAgICAgICBjb25zdCBtZW51V2lkdGggPSBtZW51LnZhbHVlLmNsaWVudFdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG4gICAgICAgIGxldCBjYWxjV2lkdGggPSAwO1xuICAgICAgICBsZXQgc2xpY2VJbmRleCA9IDA7XG4gICAgICAgIGl0ZW1zMi5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNhbGNXaWR0aCArPSBpdGVtLm9mZnNldFdpZHRoIHx8IDA7XG4gICAgICAgICAgaWYgKGNhbGNXaWR0aCA8PSBtZW51V2lkdGggLSBtb3JlSXRlbVdpZHRoKSB7XG4gICAgICAgICAgICBzbGljZUluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNsb3REZWZhdWx0ID0gb3JpZ2luYWxTbG90LnNsaWNlKDAsIHNsaWNlSW5kZXgpO1xuICAgICAgICBjb25zdCBzbG90TW9yZSA9IG9yaWdpbmFsU2xvdC5zbGljZShzbGljZUluZGV4KTtcbiAgICAgICAgaWYgKChzbG90TW9yZSA9PSBudWxsID8gdm9pZCAwIDogc2xvdE1vcmUubGVuZ3RoKSAmJiBwcm9wcy5lbGxpcHNpcykge1xuICAgICAgICAgIHNsb3QgPSBzbG90RGVmYXVsdDtcbiAgICAgICAgICB2U2hvd01vcmUucHVzaChoKFN1Yk1lbnUsIHtcbiAgICAgICAgICAgIGluZGV4OiBcInN1Yi1tZW51LW1vcmVcIixcbiAgICAgICAgICAgIGNsYXNzOiBuc1N1Yk1lbnUuZShcImhpZGUtYXJyb3dcIilcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogKCkgPT4gaChFbEljb24sIHtcbiAgICAgICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwiaWNvbi1tb3JlXCIpXG4gICAgICAgICAgICB9LCB7IGRlZmF1bHQ6ICgpID0+IGgoTW9yZSkgfSksXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90TW9yZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdWxTdHlsZSA9IHVzZU1lbnVDc3NWYXIocHJvcHMsIDApO1xuICAgICAgY29uc3QgcmVzaXplTWVudSA9ICh2Tm9kZSkgPT4gcHJvcHMuZWxsaXBzaXMgPyB1c2VWTm9kZVJlc2l6ZSh2Tm9kZSkgOiB2Tm9kZTtcbiAgICAgIGNvbnN0IHZNZW51ID0gcmVzaXplTWVudShoKFwidWxcIiwge1xuICAgICAgICBrZXk6IFN0cmluZyhwcm9wcy5jb2xsYXBzZSksXG4gICAgICAgIHJvbGU6IFwibWVudWJhclwiLFxuICAgICAgICByZWY6IG1lbnUsXG4gICAgICAgIHN0eWxlOiB1bFN0eWxlLnZhbHVlLFxuICAgICAgICBjbGFzczoge1xuICAgICAgICAgIFtuc01lbnUuYigpXTogdHJ1ZSxcbiAgICAgICAgICBbbnNNZW51Lm0ocHJvcHMubW9kZSldOiB0cnVlLFxuICAgICAgICAgIFtuc01lbnUubShcImNvbGxhcHNlXCIpXTogcHJvcHMuY29sbGFwc2VcbiAgICAgICAgfVxuICAgICAgfSwgWy4uLnNsb3QsIC4uLnZTaG93TW9yZV0pKTtcbiAgICAgIGlmIChwcm9wcy5jb2xsYXBzZVRyYW5zaXRpb24gJiYgcHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHJldHVybiBoKEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiwgKCkgPT4gdk1lbnUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZNZW51O1xuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBNZW51IGFzIGRlZmF1bHQsIG1lbnVFbWl0cywgbWVudVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51Mi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBtZW51SXRlbVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGluZGV4OiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgbnVsbF0pLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgcm91dGU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbU3RyaW5nLCBPYmplY3RdKVxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhblxufSk7XG5jb25zdCBtZW51SXRlbUVtaXRzID0ge1xuICBjbGljazogKGl0ZW0pID0+IGlzU3RyaW5nKGl0ZW0uaW5kZXgpICYmIEFycmF5LmlzQXJyYXkoaXRlbS5pbmRleFBhdGgpXG59O1xuXG5leHBvcnQgeyBtZW51SXRlbUVtaXRzLCBtZW51SXRlbVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0zLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgZ2V0Q3VycmVudEluc3RhbmNlLCBpbmplY3QsIHRvUmVmLCBjb21wdXRlZCwgcmVhY3RpdmUsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCByZXNvbHZlQ29tcG9uZW50LCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCByZW5kZXJTbG90LCBjcmVhdGVFbGVtZW50Vk5vZGUsIEZyYWdtZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsVG9vbHRpcCB9IGZyb20gJy4uLy4uL3Rvb2x0aXAvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uL3BvcHBlci9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHVzZU1lbnUgZnJvbSAnLi91c2UtbWVudTIubWpzJztcbmltcG9ydCB7IG1lbnVJdGVtUHJvcHMsIG1lbnVJdGVtRW1pdHMgfSBmcm9tICcuL21lbnUtaXRlbTMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3IyLm1qcyc7XG5pbXBvcnQgeyBFZmZlY3QgfSBmcm9tICcuLi8uLi9wb3BwZXIvc3JjL3BvcHBlcjMubWpzJztcblxuY29uc3QgQ09NUE9ORU5UX05BTUUgPSBcIkVsTWVudUl0ZW1cIjtcbmNvbnN0IF9zZmNfbWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxUb29sdGlwXG4gIH0sXG4gIHByb3BzOiBtZW51SXRlbVByb3BzLFxuICBlbWl0czogbWVudUl0ZW1FbWl0cyxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCByb290TWVudSA9IGluamVjdChcInJvb3RNZW51XCIpO1xuICAgIGNvbnN0IG5zTWVudSA9IHVzZU5hbWVzcGFjZShcIm1lbnVcIik7XG4gICAgY29uc3QgbnNNZW51SXRlbSA9IHVzZU5hbWVzcGFjZShcIm1lbnUtaXRlbVwiKTtcbiAgICBpZiAoIXJvb3RNZW51KVxuICAgICAgdGhyb3dFcnJvcihDT01QT05FTlRfTkFNRSwgXCJjYW4gbm90IGluamVjdCByb290IG1lbnVcIik7XG4gICAgY29uc3QgeyBwYXJlbnRNZW51LCBpbmRleFBhdGggfSA9IHVzZU1lbnUoaW5zdGFuY2UsIHRvUmVmKHByb3BzLCBcImluZGV4XCIpKTtcbiAgICBjb25zdCBzdWJNZW51ID0gaW5qZWN0KGBzdWJNZW51OiR7cGFyZW50TWVudS52YWx1ZS51aWR9YCk7XG4gICAgaWYgKCFzdWJNZW51KVxuICAgICAgdGhyb3dFcnJvcihDT01QT05FTlRfTkFNRSwgXCJjYW4gbm90IGluamVjdCBzdWIgbWVudVwiKTtcbiAgICBjb25zdCBhY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pbmRleCA9PT0gcm9vdE1lbnUuYWN0aXZlSW5kZXgpO1xuICAgIGNvbnN0IGl0ZW0gPSByZWFjdGl2ZSh7XG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICBpbmRleFBhdGgsXG4gICAgICBhY3RpdmVcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcm9vdE1lbnUuaGFuZGxlTWVudUl0ZW1DbGljayh7XG4gICAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICAgIGluZGV4UGF0aDogaW5kZXhQYXRoLnZhbHVlLFxuICAgICAgICAgIHJvdXRlOiBwcm9wcy5yb3V0ZVxuICAgICAgICB9KTtcbiAgICAgICAgZW1pdChcImNsaWNrXCIsIGl0ZW0pO1xuICAgICAgfVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHN1Yk1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICAgIHJvb3RNZW51LmFkZE1lbnVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBzdWJNZW51LnJlbW92ZVN1Yk1lbnUoaXRlbSk7XG4gICAgICByb290TWVudS5yZW1vdmVNZW51SXRlbShpdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgRWZmZWN0LFxuICAgICAgcGFyZW50TWVudSxcbiAgICAgIHJvb3RNZW51LFxuICAgICAgYWN0aXZlLFxuICAgICAgbnNNZW51LFxuICAgICAgbnNNZW51SXRlbSxcbiAgICAgIGhhbmRsZUNsaWNrXG4gICAgfTtcbiAgfVxufSk7XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF90b29sdGlwID0gcmVzb2x2ZUNvbXBvbmVudChcImVsLXRvb2x0aXBcIik7XG4gIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwibGlcIiwge1xuICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICBfY3R4Lm5zTWVudUl0ZW0uYigpLFxuICAgICAgX2N0eC5uc01lbnVJdGVtLmlzKFwiYWN0aXZlXCIsIF9jdHguYWN0aXZlKSxcbiAgICAgIF9jdHgubnNNZW51SXRlbS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgXSksXG4gICAgcm9sZTogXCJtZW51aXRlbVwiLFxuICAgIHRhYmluZGV4OiBcIi0xXCIsXG4gICAgb25DbGljazogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoLi4uYXJncykgPT4gX2N0eC5oYW5kbGVDbGljayAmJiBfY3R4LmhhbmRsZUNsaWNrKC4uLmFyZ3MpKVxuICB9LCBbXG4gICAgX2N0eC5wYXJlbnRNZW51LnR5cGUubmFtZSA9PT0gXCJFbE1lbnVcIiAmJiBfY3R4LnJvb3RNZW51LnByb3BzLmNvbGxhcHNlICYmIF9jdHguJHNsb3RzLnRpdGxlID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3Rvb2x0aXAsIHtcbiAgICAgIGtleTogMCxcbiAgICAgIGVmZmVjdDogX2N0eC5FZmZlY3QuREFSSyxcbiAgICAgIHBsYWNlbWVudDogXCJyaWdodFwiLFxuICAgICAgXCJmYWxsYmFjay1wbGFjZW1lbnRzXCI6IFtcImxlZnRcIl0sXG4gICAgICBwZXJzaXN0ZW50OiBcIlwiXG4gICAgfSwge1xuICAgICAgY29udGVudDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwidGl0bGVcIilcbiAgICAgIF0pLFxuICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnNNZW51LmJlKFwidG9vbHRpcFwiLCBcInRyaWdnZXJcIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgICAgXSwgMilcbiAgICAgIF0pLFxuICAgICAgXzogM1xuICAgIH0sIDgsIFtcImVmZmVjdFwiXSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAxIH0sIFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKSxcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwidGl0bGVcIilcbiAgICBdLCA2NCkpXG4gIF0sIDIpO1xufVxudmFyIE1lbnVJdGVtID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcInJlbmRlclwiLCBfc2ZjX3JlbmRlcl0sIFtcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9tZW51L3NyYy9tZW51LWl0ZW0udnVlXCJdXSk7XG5cbmV4cG9ydCB7IE1lbnVJdGVtIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtaXRlbTQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgRnJhZ21lbnQsIGNyZWF0ZVRleHRWTm9kZSwgdG9EaXNwbGF5U3RyaW5nLCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBtZW51SXRlbUdyb3VwUHJvcHMgfSBmcm9tICcuL21lbnUtaXRlbS1ncm91cDMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5cbmNvbnN0IENPTVBPTkVOVF9OQU1FID0gXCJFbE1lbnVJdGVtR3JvdXBcIjtcbmNvbnN0IF9zZmNfbWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICBwcm9wczogbWVudUl0ZW1Hcm91cFByb3BzLFxuICBzZXR1cCgpIHtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcIm1lbnUtaXRlbS1ncm91cFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgbnNcbiAgICB9O1xuICB9XG59KTtcbmZ1bmN0aW9uIF9zZmNfcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImxpXCIsIHtcbiAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5iKCkpXG4gIH0sIFtcbiAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcInRpdGxlXCIpKVxuICAgIH0sIFtcbiAgICAgICFfY3R4LiRzbG90cy50aXRsZSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCB7IGtleTogMCB9LCBbXG4gICAgICAgIGNyZWF0ZVRleHRWTm9kZSh0b0Rpc3BsYXlTdHJpbmcoX2N0eC50aXRsZSksIDEpXG4gICAgICBdLCA2NCkpIDogcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJ0aXRsZVwiLCB7IGtleTogMSB9KVxuICAgIF0sIDIpLFxuICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInVsXCIsIG51bGwsIFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgIF0pXG4gIF0sIDIpO1xufVxudmFyIE1lbnVJdGVtR3JvdXAgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wicmVuZGVyXCIsIF9zZmNfcmVuZGVyXSwgW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbS1ncm91cC52dWVcIl1dKTtcblxuZXhwb3J0IHsgTWVudUl0ZW1Hcm91cCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0tZ3JvdXA0Lm1qcy5tYXBcbiIsImNvbnN0IG1lbnVJdGVtR3JvdXBQcm9wcyA9IHtcbiAgdGl0bGU6IFN0cmluZ1xufTtcblxuZXhwb3J0IHsgbWVudUl0ZW1Hcm91cFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0tZ3JvdXAzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgTWVudSBmcm9tICcuL3NyYy9tZW51Mi5tanMnO1xuZXhwb3J0IHsgbWVudUVtaXRzLCBtZW51UHJvcHMgfSBmcm9tICcuL3NyYy9tZW51Mi5tanMnO1xuaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4vc3JjL21lbnUtaXRlbTQubWpzJztcbmltcG9ydCBNZW51SXRlbUdyb3VwIGZyb20gJy4vc3JjL21lbnUtaXRlbS1ncm91cDQubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3JjL3N1Yi1tZW51Mi5tanMnO1xuZXhwb3J0IHsgc3ViTWVudVByb3BzIH0gZnJvbSAnLi9zcmMvc3ViLW1lbnUyLm1qcyc7XG5leHBvcnQgeyBtZW51SXRlbUVtaXRzLCBtZW51SXRlbVByb3BzIH0gZnJvbSAnLi9zcmMvbWVudS1pdGVtMy5tanMnO1xuZXhwb3J0IHsgbWVudUl0ZW1Hcm91cFByb3BzIH0gZnJvbSAnLi9zcmMvbWVudS1pdGVtLWdyb3VwMy5tanMnO1xuaW1wb3J0ICcuL3NyYy90eXBlczIubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsLCB3aXRoTm9vcEluc3RhbGwgfSBmcm9tICcuLi8uLi91dGlscy92dWUvaW5zdGFsbDIubWpzJztcblxuY29uc3QgRWxNZW51ID0gd2l0aEluc3RhbGwoTWVudSwge1xuICBNZW51SXRlbSxcbiAgTWVudUl0ZW1Hcm91cCxcbiAgU3ViTWVudVxufSk7XG5jb25zdCBFbE1lbnVJdGVtID0gd2l0aE5vb3BJbnN0YWxsKE1lbnVJdGVtKTtcbmNvbnN0IEVsTWVudUl0ZW1Hcm91cCA9IHdpdGhOb29wSW5zdGFsbChNZW51SXRlbUdyb3VwKTtcbmNvbnN0IEVsU3ViTWVudSA9IHdpdGhOb29wSW5zdGFsbChTdWJNZW51KTtcblxuZXhwb3J0IHsgRWxNZW51LCBFbE1lbnVJdGVtLCBFbE1lbnVJdGVtR3JvdXAsIEVsU3ViTWVudSwgRWxNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgRWxCYWNrdG9wIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscywgdmFyaWFibGVzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2JhY2t0b3AnKVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsQmFja3RvcFxuICAgIDpjbGFzcz1cImAke3ByZWZpeENsc30tYmFja3RvcGBcIlxuICAgIDp0YXJnZXQ9XCJgLiR7dmFyaWFibGVzLm5hbWVzcGFjZX0tbGF5b3V0LWNvbnRlbnQtc2Nyb2xsYmFyIC4ke3ZhcmlhYmxlcy5lbE5hbWVzcGFjZX0tc2Nyb2xsYmFyX193cmFwYFwiXG4gIC8+XG48L3RlbXBsYXRlPlxuIiwiLyoqXG4gKiDliKTmlq3mmK/lkKYg5Y2B5YWt6L+b5Yi26aKc6Imy5YC8LlxuICog6L6T5YWl5b2i5byP5Y+v5Li6ICNmZmYwMDAgI2YwMFxuICpcbiAqIEBwYXJhbSAgIFN0cmluZyAgY29sb3IgICDljYHlha3ov5vliLbpopzoibLlgLxcbiAqIEByZXR1cm4gIEJvb2xlYW5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzSGV4Q29sb3IgPSAoY29sb3I6IHN0cmluZykgPT4ge1xuICBjb25zdCByZWcgPSAvXiMoWzAtOWEtZkEtRl17M318WzAtOWEtZkEtZl17Nn0pJC9cbiAgcmV0dXJuIHJlZy50ZXN0KGNvbG9yKVxufVxuXG4vKipcbiAqIFJHQiDpopzoibLlgLzovazmjaLkuLog5Y2B5YWt6L+b5Yi26aKc6Imy5YC8LlxuICogciwgZywg5ZKMIGIg6ZyA6KaB5ZyoIFswLCAyNTVdIOiMg+WbtOWGhVxuICpcbiAqIEByZXR1cm4gIFN0cmluZyAgICAgICAgICDnsbvkvLwjZmYwMGZmXG4gKiBAcGFyYW0gclxuICogQHBhcmFtIGdcbiAqIEBwYXJhbSBiXG4gKi9cbmV4cG9ydCBjb25zdCByZ2JUb0hleCA9IChyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyKSA9PiB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gIGNvbnN0IGhleCA9ICgociA8PCAxNikgfCAoZyA8PCA4KSB8IGIpLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gJyMnICsgbmV3IEFycmF5KE1hdGguYWJzKGhleC5sZW5ndGggLSA3KSkuam9pbignMCcpICsgaGV4XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgSEVYIGNvbG9yIHRvIGl0cyBSR0IgcmVwcmVzZW50YXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBoZXggVGhlIGNvbG9yIHRvIHRyYW5zZm9ybVxuICogQHJldHVybnMgVGhlIFJHQiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcGFzc2VkIGNvbG9yXG4gKi9cbmV4cG9ydCBjb25zdCBoZXhUb1JHQiA9IChoZXg6IHN0cmluZywgb3BhY2l0eT86IG51bWJlcikgPT4ge1xuICBsZXQgc0hleCA9IGhleC50b0xvd2VyQ2FzZSgpXG4gIGlmIChpc0hleENvbG9yKGhleCkpIHtcbiAgICBpZiAoc0hleC5sZW5ndGggPT09IDQpIHtcbiAgICAgIGxldCBzQ29sb3JOZXcgPSAnIydcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgNDsgaSArPSAxKSB7XG4gICAgICAgIHNDb2xvck5ldyArPSBzSGV4LnNsaWNlKGksIGkgKyAxKS5jb25jYXQoc0hleC5zbGljZShpLCBpICsgMSkpXG4gICAgICB9XG4gICAgICBzSGV4ID0gc0NvbG9yTmV3XG4gICAgfVxuICAgIGNvbnN0IHNDb2xvckNoYW5nZTogbnVtYmVyW10gPSBbXVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgNzsgaSArPSAyKSB7XG4gICAgICBzQ29sb3JDaGFuZ2UucHVzaChwYXJzZUludCgnMHgnICsgc0hleC5zbGljZShpLCBpICsgMikpKVxuICAgIH1cbiAgICByZXR1cm4gb3BhY2l0eVxuICAgICAgPyAnUkdCQSgnICsgc0NvbG9yQ2hhbmdlLmpvaW4oJywnKSArICcsJyArIG9wYWNpdHkgKyAnKSdcbiAgICAgIDogJ1JHQignICsgc0NvbG9yQ2hhbmdlLmpvaW4oJywnKSArICcpJ1xuICB9XG4gIHJldHVybiBzSGV4XG59XG5cbmV4cG9ydCBjb25zdCBjb2xvcklzRGFyayA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gIGlmICghaXNIZXhDb2xvcihjb2xvcikpIHJldHVyblxuICBjb25zdCBbciwgZywgYl0gPSBoZXhUb1JHQihjb2xvcilcbiAgICAucmVwbGFjZSgvKD86XFwofFxcKXxyZ2J8UkdCKSovZywgJycpXG4gICAgLnNwbGl0KCcsJylcbiAgICAubWFwKChpdGVtKSA9PiBOdW1iZXIoaXRlbSkpXG4gIHJldHVybiByICogMC4yOTkgKyBnICogMC41NzggKyBiICogMC4xMTQgPCAxOTJcbn1cblxuLyoqXG4gKiBEYXJrZW5zIGEgSEVYIGNvbG9yIGdpdmVuIHRoZSBwYXNzZWQgcGVyY2VudGFnZVxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIFRoZSBjb2xvciB0byBwcm9jZXNzXG4gKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IFRoZSBhbW91bnQgdG8gY2hhbmdlIHRoZSBjb2xvciBieVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIEhFWCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJvY2Vzc2VkIGNvbG9yXG4gKi9cbmV4cG9ydCBjb25zdCBkYXJrZW4gPSAoY29sb3I6IHN0cmluZywgYW1vdW50OiBudW1iZXIpID0+IHtcbiAgY29sb3IgPSBjb2xvci5pbmRleE9mKCcjJykgPj0gMCA/IGNvbG9yLnN1YnN0cmluZygxLCBjb2xvci5sZW5ndGgpIDogY29sb3JcbiAgYW1vdW50ID0gTWF0aC50cnVuYygoMjU1ICogYW1vdW50KSAvIDEwMClcbiAgcmV0dXJuIGAjJHtzdWJ0cmFjdExpZ2h0KGNvbG9yLnN1YnN0cmluZygwLCAyKSwgYW1vdW50KX0ke3N1YnRyYWN0TGlnaHQoXG4gICAgY29sb3Iuc3Vic3RyaW5nKDIsIDQpLFxuICAgIGFtb3VudFxuICApfSR7c3VidHJhY3RMaWdodChjb2xvci5zdWJzdHJpbmcoNCwgNiksIGFtb3VudCl9YFxufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgNiBjaGFyIEhFWCBjb2xvciBhY2NvcmRpbmcgdG8gdGhlIHBhc3NlZCBwZXJjZW50YWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIGNvbG9yIHRvIGNoYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBUaGUgYW1vdW50IHRvIGNoYW5nZSB0aGUgY29sb3IgYnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwcm9jZXNzZWQgY29sb3IgcmVwcmVzZW50ZWQgYXMgSEVYXG4gKi9cbmV4cG9ydCBjb25zdCBsaWdodGVuID0gKGNvbG9yOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKSA9PiB7XG4gIGNvbG9yID0gY29sb3IuaW5kZXhPZignIycpID49IDAgPyBjb2xvci5zdWJzdHJpbmcoMSwgY29sb3IubGVuZ3RoKSA6IGNvbG9yXG4gIGFtb3VudCA9IE1hdGgudHJ1bmMoKDI1NSAqIGFtb3VudCkgLyAxMDApXG4gIHJldHVybiBgIyR7YWRkTGlnaHQoY29sb3Iuc3Vic3RyaW5nKDAsIDIpLCBhbW91bnQpfSR7YWRkTGlnaHQoXG4gICAgY29sb3Iuc3Vic3RyaW5nKDIsIDQpLFxuICAgIGFtb3VudFxuICApfSR7YWRkTGlnaHQoY29sb3Iuc3Vic3RyaW5nKDQsIDYpLCBhbW91bnQpfWBcbn1cblxuLyogU3VtYSBlbCBwb3JjZW50YWplIGluZGljYWRvIGEgdW4gY29sb3IgKFJSLCBHRyBvIEJCKSBoZXhhZGVjaW1hbCBwYXJhIGFjbGFyYXJsbyAqL1xuLyoqXG4gKiBTdW1zIHRoZSBwYXNzZWQgcGVyY2VudGFnZSB0byB0aGUgUiwgRyBvciBCIG9mIGEgSEVYIGNvbG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgVGhlIGNvbG9yIHRvIGNoYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBUaGUgYW1vdW50IHRvIGNoYW5nZSB0aGUgY29sb3IgYnlcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwcm9jZXNzZWQgcGFydCBvZiB0aGUgY29sb3JcbiAqL1xuY29uc3QgYWRkTGlnaHQgPSAoY29sb3I6IHN0cmluZywgYW1vdW50OiBudW1iZXIpID0+IHtcbiAgY29uc3QgY2MgPSBwYXJzZUludChjb2xvciwgMTYpICsgYW1vdW50XG4gIGNvbnN0IGMgPSBjYyA+IDI1NSA/IDI1NSA6IGNjXG4gIHJldHVybiBjLnRvU3RyaW5nKDE2KS5sZW5ndGggPiAxID8gYy50b1N0cmluZygxNikgOiBgMCR7Yy50b1N0cmluZygxNil9YFxufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgbHVtaW5hbmNlIG9mIGFuIHJnYiBjb2xvclxuICogQHBhcmFtIHtudW1iZXJ9IHIgcmVkXG4gKiBAcGFyYW0ge251bWJlcn0gZyBncmVlblxuICogQHBhcmFtIHtudW1iZXJ9IGIgYmx1ZVxuICovXG5jb25zdCBsdW1pbmFuYWNlID0gKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbiAgY29uc3QgYSA9IFtyLCBnLCBiXS5tYXAoKHYpID0+IHtcbiAgICB2IC89IDI1NVxuICAgIHJldHVybiB2IDw9IDAuMDM5MjggPyB2IC8gMTIuOTIgOiBNYXRoLnBvdygodiArIDAuMDU1KSAvIDEuMDU1LCAyLjQpXG4gIH0pXG4gIHJldHVybiBhWzBdICogMC4yMTI2ICsgYVsxXSAqIDAuNzE1MiArIGFbMl0gKiAwLjA3MjJcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIGNvbnRyYXN0IGJldHdlZW4gdHdvIHJnYiBjb2xvcnNcbiAqIEBwYXJhbSB7c3RyaW5nfSByZ2IxIHJnYiBjb2xvciAxXG4gKiBAcGFyYW0ge3N0cmluZ30gcmdiMiByZ2IgY29sb3IgMlxuICovXG5jb25zdCBjb250cmFzdCA9IChyZ2IxOiBzdHJpbmdbXSwgcmdiMjogbnVtYmVyW10pID0+IHtcbiAgcmV0dXJuIChcbiAgICAobHVtaW5hbmFjZSh+fnJnYjFbMF0sIH5+cmdiMVsxXSwgfn5yZ2IxWzJdKSArIDAuMDUpIC9cbiAgICAobHVtaW5hbmFjZShyZ2IyWzBdLCByZ2IyWzFdLCByZ2IyWzJdKSArIDAuMDUpXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoYXQgdGhlIGJlc3QgdGV4dCBjb2xvciBpcyAoYmxhY2sgb3Igd2hpdGUpIGJhc2VkIGNvbiB0aGUgY29udHJhc3Qgd2l0aCB0aGUgYmFja2dyb3VuZFxuICogQHBhcmFtIGhleENvbG9yIC0gTGFzdCBzZWxlY3RlZCBjb2xvciBieSB0aGUgdXNlclxuICovXG5leHBvcnQgY29uc3QgY2FsY3VsYXRlQmVzdFRleHRDb2xvciA9IChoZXhDb2xvcjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHJnYkNvbG9yID0gaGV4VG9SR0IoaGV4Q29sb3Iuc3Vic3RyaW5nKDEpKVxuICBjb25zdCBjb250cmFzdFdpdGhCbGFjayA9IGNvbnRyYXN0KHJnYkNvbG9yLnNwbGl0KCcsJyksIFswLCAwLCAwXSlcblxuICByZXR1cm4gY29udHJhc3RXaXRoQmxhY2sgPj0gMTIgPyAnIzAwMDAwMCcgOiAnI0ZGRkZGRidcbn1cblxuLyoqXG4gKiBTdWJ0cmFjdHMgdGhlIGluZGljYXRlZCBwZXJjZW50YWdlIHRvIHRoZSBSLCBHIG9yIEIgb2YgYSBIRVggY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciBUaGUgY29sb3IgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge251bWJlcn0gYW1vdW50IFRoZSBhbW91bnQgdG8gY2hhbmdlIHRoZSBjb2xvciBieVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHByb2Nlc3NlZCBwYXJ0IG9mIHRoZSBjb2xvclxuICovXG5jb25zdCBzdWJ0cmFjdExpZ2h0ID0gKGNvbG9yOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGNjID0gcGFyc2VJbnQoY29sb3IsIDE2KSAtIGFtb3VudFxuICBjb25zdCBjID0gY2MgPCAwID8gMCA6IGNjXG4gIHJldHVybiBjLnRvU3RyaW5nKDE2KS5sZW5ndGggPiAxID8gYy50b1N0cmluZygxNikgOiBgMCR7Yy50b1N0cmluZygxNil9YFxufVxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbi8vIGltcG9ydCB7IEVsRHJhd2VyLCBFbERpdmlkZXIsIEVsQnV0dG9uLCBFbE1lc3NhZ2UgfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyBFbERyYXdlciwgRWxEaXZpZGVyIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgcmVmLCB1bnJlZiwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUkxOG4nXG5pbXBvcnQgeyBUaGVtZVN3aXRjaCB9IGZyb20gJ0AvY29tcG9uZW50cy9UaGVtZVN3aXRjaCdcbmltcG9ydCB7IGNvbG9ySXNEYXJrLCBsaWdodGVuLCBoZXhUb1JHQiB9IGZyb20gJ0AvdXRpbHMvY29sb3InXG5pbXBvcnQgeyB1c2VDc3NWYXIgfSBmcm9tICdAdnVldXNlL2NvcmUnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG4vLyBpbXBvcnQgeyB0cmltLCBzZXRDc3NWYXIgfSBmcm9tICdAL3V0aWxzJ1xuLy8gaW1wb3J0IENvbG9yUmFkaW9QaWNrZXIgZnJvbSAnLi9jb21wb25lbnRzL0NvbG9yUmFkaW9QaWNrZXIudnVlJ1xuLy8gaW1wb3J0IEludGVyZmFjZURpc3BsYXkgZnJvbSAnLi9jb21wb25lbnRzL0ludGVyZmFjZURpc3BsYXkudnVlJ1xuLy8gaW1wb3J0IExheW91dFJhZGlvUGlja2VyIGZyb20gJy4vY29tcG9uZW50cy9MYXlvdXRSYWRpb1BpY2tlci52dWUnXG4vLyBpbXBvcnQgeyB1c2VDYWNoZSB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUNhY2hlJ1xuLy8gaW1wb3J0IHsgdXNlQ2xpcGJvYXJkIH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzZXR0aW5nJylcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbmNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG5cbmNvbnN0IGxheW91dCA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldExheW91dClcblxuY29uc3QgZHJhd2VyID0gcmVmKGZhbHNlKVxuXG4vLyDkuLvpopjoibLnm7jlhbNcbi8vIGNvbnN0IHN5c3RlbVRoZW1lID0gcmVmKGFwcFN0b3JlLmdldFRoZW1lLmVsQ29sb3JQcmltYXJ5KVxuXG4vLyBjb25zdCBzZXRTeXN0ZW1UaGVtZSA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4vLyAgIHNldENzc1ZhcignLS1lbC1jb2xvci1wcmltYXJ5JywgY29sb3IpXG4vLyAgIGFwcFN0b3JlLnNldFRoZW1lKHsgZWxDb2xvclByaW1hcnk6IGNvbG9yIH0pXG4vLyAgIGNvbnN0IGxlZnRNZW51QmdDb2xvciA9IHVzZUNzc1ZhcignLS1sZWZ0LW1lbnUtYmctY29sb3InLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXG4vLyAgIHNldE1lbnVUaGVtZSh0cmltKHVucmVmKGxlZnRNZW51QmdDb2xvcikpKVxuLy8gfVxuXG4vLyDlpLTpg6jkuLvpopjnm7jlhbNcbmNvbnN0IGhlYWRlclRoZW1lID0gcmVmKGFwcFN0b3JlLmdldFRoZW1lLnRvcEhlYWRlckJnQ29sb3IgfHwgJycpXG5cbmNvbnN0IHNldEhlYWRlclRoZW1lID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgaXNEYXJrQ29sb3IgPSBjb2xvcklzRGFyayhjb2xvcilcbiAgY29uc3QgdGV4dENvbG9yID0gaXNEYXJrQ29sb3IgPyAnI2ZmZicgOiAnaW5oZXJpdCdcbiAgY29uc3QgdGV4dEhvdmVyQ29sb3IgPSBpc0RhcmtDb2xvciA/IGxpZ2h0ZW4oY29sb3IhLCA2KSA6ICcjZjZmNmY2J1xuICBjb25zdCB0b3BUb29sQm9yZGVyQ29sb3IgPSBpc0RhcmtDb2xvciA/IGNvbG9yIDogJyNlZWUnXG4gIC8vIHNldENzc1ZhcignLS10b3AtaGVhZGVyLWJnLWNvbG9yJywgY29sb3IpXG4gIC8vIHNldENzc1ZhcignLS10b3AtaGVhZGVyLXRleHQtY29sb3InLCB0ZXh0Q29sb3IpXG4gIC8vIHNldENzc1ZhcignLS10b3AtaGVhZGVyLWhvdmVyLWNvbG9yJywgdGV4dEhvdmVyQ29sb3IpXG4gIC8vIHNldENzc1ZhcignLS10b3AtdG9vbC1ib3JkZXItY29sb3InLCB0b3BUb29sQm9yZGVyQ29sb3IpXG4gIGFwcFN0b3JlLnNldFRoZW1lKHtcbiAgICB0b3BIZWFkZXJCZ0NvbG9yOiBjb2xvcixcbiAgICB0b3BIZWFkZXJUZXh0Q29sb3I6IHRleHRDb2xvcixcbiAgICB0b3BIZWFkZXJIb3ZlckNvbG9yOiB0ZXh0SG92ZXJDb2xvcixcbiAgICB0b3BUb29sQm9yZGVyQ29sb3JcbiAgfSlcbiAgaWYgKHVucmVmKGxheW91dCkgPT09ICd0b3AnKSB7XG4gICAgc2V0TWVudVRoZW1lKGNvbG9yKVxuICB9XG59XG5cbi8vIOiPnOWNleS4u+mimOebuOWFs1xuY29uc3QgbWVudVRoZW1lID0gcmVmKGFwcFN0b3JlLmdldFRoZW1lLmxlZnRNZW51QmdDb2xvciB8fCAnJylcblxuY29uc3Qgc2V0TWVudVRoZW1lID0gKGNvbG9yOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcHJpbWFyeUNvbG9yID0gdXNlQ3NzVmFyKCctLWVsLWNvbG9yLXByaW1hcnknLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXG4gIGNvbnN0IGlzRGFya0NvbG9yID0gY29sb3JJc0RhcmsoY29sb3IpXG4gIGNvbnN0IHRoZW1lOiBSZWNvcmRhYmxlID0ge1xuICAgIC8vIOW3puS+p+iPnOWNlei+ueahhuminOiJslxuICAgIGxlZnRNZW51Qm9yZGVyQ29sb3I6IGlzRGFya0NvbG9yID8gJ2luaGVyaXQnIDogJyNlZWUnLFxuICAgIC8vIOW3puS+p+iPnOWNleiDjOaZr+minOiJslxuICAgIGxlZnRNZW51QmdDb2xvcjogY29sb3IsXG4gICAgLy8g5bem5L6n6I+c5Y2V5rWF6Imy6IOM5pmv6aKc6ImyXG4gICAgbGVmdE1lbnVCZ0xpZ2h0Q29sb3I6IGlzRGFya0NvbG9yID8gbGlnaHRlbihjb2xvciEsIDYpIDogY29sb3IsXG4gICAgLy8g5bem5L6n6I+c5Y2V6YCJ5Lit6IOM5pmv6aKc6ImyXG4gICAgbGVmdE1lbnVCZ0FjdGl2ZUNvbG9yOiBpc0RhcmtDb2xvclxuICAgICAgPyAndmFyKC0tZWwtY29sb3ItcHJpbWFyeSknXG4gICAgICA6IGhleFRvUkdCKHVucmVmKHByaW1hcnlDb2xvciksIDAuMSksXG4gICAgLy8g5bem5L6n6I+c5Y2V5pS26LW36YCJ5Lit6IOM5pmv6aKc6ImyXG4gICAgbGVmdE1lbnVDb2xsYXBzZUJnQWN0aXZlQ29sb3I6IGlzRGFya0NvbG9yXG4gICAgICA/ICd2YXIoLS1lbC1jb2xvci1wcmltYXJ5KSdcbiAgICAgIDogaGV4VG9SR0IodW5yZWYocHJpbWFyeUNvbG9yKSwgMC4xKSxcbiAgICAvLyDlt6bkvqfoj5zljZXlrZfkvZPpopzoibJcbiAgICBsZWZ0TWVudVRleHRDb2xvcjogaXNEYXJrQ29sb3IgPyAnI2JmY2JkOScgOiAnIzMzMycsXG4gICAgLy8g5bem5L6n6I+c5Y2V6YCJ5Lit5a2X5L2T6aKc6ImyXG4gICAgbGVmdE1lbnVUZXh0QWN0aXZlQ29sb3I6IGlzRGFya0NvbG9yID8gJyNmZmYnIDogJ3ZhcigtLWVsLWNvbG9yLXByaW1hcnkpJyxcbiAgICAvLyBsb2dv5a2X5L2T6aKc6ImyXG4gICAgbG9nb1RpdGxlVGV4dENvbG9yOiBpc0RhcmtDb2xvciA/ICcjZmZmJyA6ICdpbmhlcml0JyxcbiAgICAvLyBsb2dv6L655qGG6aKc6ImyXG4gICAgbG9nb0JvcmRlckNvbG9yOiBpc0RhcmtDb2xvciA/IGNvbG9yIDogJyNlZWUnXG4gIH1cbiAgYXBwU3RvcmUuc2V0VGhlbWUodGhlbWUpXG4gIGFwcFN0b3JlLnNldENzc1ZhclRoZW1lKClcbn1cbmlmIChsYXlvdXQudmFsdWUgPT09ICd0b3AnICYmICFhcHBTdG9yZS5nZXRJc0RhcmspIHtcbiAgaGVhZGVyVGhlbWUudmFsdWUgPSAnI2ZmZidcbiAgc2V0SGVhZGVyVGhlbWUoJyNmZmYnKVxufVxuXG4vLyDnm5HlkKxsYXlvdXTlj5jljJbvvIzph43nva7kuIDkupvkuLvpopjoibJcbndhdGNoKFxuICAoKSA9PiBsYXlvdXQudmFsdWUsXG4gIChuKSA9PiB7XG4gICAgaWYgKG4gPT09ICd0b3AnICYmICFhcHBTdG9yZS5nZXRJc0RhcmspIHtcbiAgICAgIGhlYWRlclRoZW1lLnZhbHVlID0gJyNmZmYnXG4gICAgICBzZXRIZWFkZXJUaGVtZSgnI2ZmZicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNldE1lbnVUaGVtZSh1bnJlZihtZW51VGhlbWUpKVxuICAgIH1cbiAgfVxuKVxuLyoqIFxuLy8g5ou36LSdXG5jb25zdCBjb3B5Q29uZmlnID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGNvcHksIGNvcGllZCwgaXNTdXBwb3J0ZWQgfSA9IHVzZUNsaXBib2FyZCh7XG4gICAgc291cmNlOiBgXG4gICAgICAvLyDpnaLljIXlsZFcbiAgICAgIGJyZWFkY3J1bWI6ICR7YXBwU3RvcmUuZ2V0QnJlYWRjcnVtYn0sXG4gICAgICAvLyDpnaLljIXlsZHlm77moIdcbiAgICAgIGJyZWFkY3J1bWJJY29uOiAke2FwcFN0b3JlLmdldEJyZWFkY3J1bWJJY29ufSxcbiAgICAgIC8vIOaKmOWPoOWbvuagh1xuICAgICAgaGFtYnVyZ2VyOiAke2FwcFN0b3JlLmdldEhhbWJ1cmdlcn0sXG4gICAgICAvLyDlhajlsY/lm77moIdcbiAgICAgIHNjcmVlbmZ1bGw6ICR7YXBwU3RvcmUuZ2V0U2NyZWVuZnVsbH0sXG4gICAgICAvLyDlsLrlr7jlm77moIdcbiAgICAgIHNpemU6ICR7YXBwU3RvcmUuZ2V0U2l6ZX0sXG4gICAgICAvLyDlpJror63oqIDlm77moIdcbiAgICAgIGxvY2FsZTogJHthcHBTdG9yZS5nZXRMb2NhbGV9LFxuICAgICAgLy8g5qCH562+6aG1XG4gICAgICB0YWdzVmlldzogJHthcHBTdG9yZS5nZXRUYWdzVmlld30sXG4gICAgICAvLyDmoIfnrb7pobXlm77moIdcbiAgICAgIGdldFRhZ3NWaWV3SWNvbjogJHthcHBTdG9yZS5nZXRUYWdzVmlld0ljb259LFxuICAgICAgLy8gbG9nb1xuICAgICAgbG9nbzogJHthcHBTdG9yZS5nZXRMb2dvfSxcbiAgICAgIC8vIOiPnOWNleaJi+mjjueQtFxuICAgICAgdW5pcXVlT3BlbmVkOiAke2FwcFN0b3JlLmdldFVuaXF1ZU9wZW5lZH0sXG4gICAgICAvLyDlm7rlrppoZWFkZXJcbiAgICAgIGZpeGVkSGVhZGVyOiAke2FwcFN0b3JlLmdldEZpeGVkSGVhZGVyfSxcbiAgICAgIC8vIOmhteiEmlxuICAgICAgZm9vdGVyOiAke2FwcFN0b3JlLmdldEZvb3Rlcn0sXG4gICAgICAvLyDngbDoibLmqKHlvI9cbiAgICAgIGdyZXlNb2RlOiAke2FwcFN0b3JlLmdldEdyZXlNb2RlfSxcbiAgICAgIC8vIGxheW91dOW4g+WxgFxuICAgICAgbGF5b3V0OiAnJHthcHBTdG9yZS5nZXRMYXlvdXR9JyxcbiAgICAgIC8vIOaal+m7keaooeW8j1xuICAgICAgaXNEYXJrOiAke2FwcFN0b3JlLmdldElzRGFya30sXG4gICAgICAvLyDnu4Tku7blsLrlr7hcbiAgICAgIGN1cnJlbnRTaXplOiAnJHthcHBTdG9yZS5nZXRDdXJyZW50U2l6ZX0nLFxuICAgICAgLy8g5Li76aKY55u45YWzXG4gICAgICB0aGVtZToge1xuICAgICAgICAvLyDkuLvpopjoibJcbiAgICAgICAgZWxDb2xvclByaW1hcnk6ICcke2FwcFN0b3JlLmdldFRoZW1lLmVsQ29sb3JQcmltYXJ5fScsXG4gICAgICAgIC8vIOW3puS+p+iPnOWNlei+ueahhuminOiJslxuICAgICAgICBsZWZ0TWVudUJvcmRlckNvbG9yOiAnJHthcHBTdG9yZS5nZXRUaGVtZS5sZWZ0TWVudUJvcmRlckNvbG9yfScsXG4gICAgICAgIC8vIOW3puS+p+iPnOWNleiDjOaZr+minOiJslxuICAgICAgICBsZWZ0TWVudUJnQ29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLmxlZnRNZW51QmdDb2xvcn0nLFxuICAgICAgICAvLyDlt6bkvqfoj5zljZXmtYXoibLog4zmma/popzoibJcbiAgICAgICAgbGVmdE1lbnVCZ0xpZ2h0Q29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLmxlZnRNZW51QmdMaWdodENvbG9yfScsXG4gICAgICAgIC8vIOW3puS+p+iPnOWNlemAieS4reiDjOaZr+minOiJslxuICAgICAgICBsZWZ0TWVudUJnQWN0aXZlQ29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLmxlZnRNZW51QmdBY3RpdmVDb2xvcn0nLFxuICAgICAgICAvLyDlt6bkvqfoj5zljZXmlLbotbfpgInkuK3og4zmma/popzoibJcbiAgICAgICAgbGVmdE1lbnVDb2xsYXBzZUJnQWN0aXZlQ29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLmxlZnRNZW51Q29sbGFwc2VCZ0FjdGl2ZUNvbG9yfScsXG4gICAgICAgIC8vIOW3puS+p+iPnOWNleWtl+S9k+minOiJslxuICAgICAgICBsZWZ0TWVudVRleHRDb2xvcjogJyR7YXBwU3RvcmUuZ2V0VGhlbWUubGVmdE1lbnVUZXh0Q29sb3J9JyxcbiAgICAgICAgLy8g5bem5L6n6I+c5Y2V6YCJ5Lit5a2X5L2T6aKc6ImyXG4gICAgICAgIGxlZnRNZW51VGV4dEFjdGl2ZUNvbG9yOiAnJHthcHBTdG9yZS5nZXRUaGVtZS5sZWZ0TWVudVRleHRBY3RpdmVDb2xvcn0nLFxuICAgICAgICAvLyBsb2dv5a2X5L2T6aKc6ImyXG4gICAgICAgIGxvZ29UaXRsZVRleHRDb2xvcjogJyR7YXBwU3RvcmUuZ2V0VGhlbWUubG9nb1RpdGxlVGV4dENvbG9yfScsXG4gICAgICAgIC8vIGxvZ2/ovrnmoYbpopzoibJcbiAgICAgICAgbG9nb0JvcmRlckNvbG9yOiAnJHthcHBTdG9yZS5nZXRUaGVtZS5sb2dvQm9yZGVyQ29sb3J9JyxcbiAgICAgICAgLy8g5aS06YOo6IOM5pmv6aKc6ImyXG4gICAgICAgIHRvcEhlYWRlckJnQ29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLnRvcEhlYWRlckJnQ29sb3J9JyxcbiAgICAgICAgLy8g5aS06YOo5a2X5L2T6aKc6ImyXG4gICAgICAgIHRvcEhlYWRlclRleHRDb2xvcjogJyR7YXBwU3RvcmUuZ2V0VGhlbWUudG9wSGVhZGVyVGV4dENvbG9yfScsXG4gICAgICAgIC8vIOWktOmDqOaCrOWBnOminOiJslxuICAgICAgICB0b3BIZWFkZXJIb3ZlckNvbG9yOiAnJHthcHBTdG9yZS5nZXRUaGVtZS50b3BIZWFkZXJIb3ZlckNvbG9yfScsXG4gICAgICAgIC8vIOWktOmDqOi+ueahhuminOiJslxuICAgICAgICB0b3BUb29sQm9yZGVyQ29sb3I6ICcke2FwcFN0b3JlLmdldFRoZW1lLnRvcFRvb2xCb3JkZXJDb2xvcn0nXG4gICAgICB9XG4gICAgYFxuICB9KVxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgRWxNZXNzYWdlLmVycm9yKHQoJ3NldHRpbmcuY29weUZhaWxlZCcpKVxuICB9IGVsc2Uge1xuICAgIGF3YWl0IGNvcHkoKVxuICAgIGlmICh1bnJlZihjb3BpZWQpKSB7XG4gICAgICBFbE1lc3NhZ2Uuc3VjY2Vzcyh0KCdzZXR0aW5nLmNvcHlTdWNjZXNzJykpXG4gICAgfVxuICB9XG59XG5cbi8vIOa4heepuue8k+WtmFxuY29uc3QgY2xlYXIgPSAoKSA9PiB7XG4gIGNvbnN0IHsgd3NDYWNoZSB9ID0gdXNlQ2FjaGUoKVxuICB3c0NhY2hlLmRlbGV0ZSgnbGF5b3V0JylcbiAgd3NDYWNoZS5kZWxldGUoJ3RoZW1lJylcbiAgd3NDYWNoZS5kZWxldGUoJ2lzRGFyaycpXG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxufVxuXG4qKi9cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXZcbiAgICA6Y2xhc3M9XCJwcmVmaXhDbHNcIlxuICAgIGNsYXNzPVwiZml4ZWQgdG9wLVs0NSVdIHJpZ2h0LTAgdy00MHB4IGgtNDBweCB0ZXh0LWNlbnRlciBsZWFkaW5nLTQwcHggYmctW3ZhcigtLWVsLWNvbG9yLXByaW1hcnkpXSBjdXJzb3ItcG9pbnRlclwiXG4gICAgQGNsaWNrPVwiZHJhd2VyID0gdHJ1ZVwiXG4gID5cbiAgICA8SWNvbiBpY29uPVwiYW50LWRlc2lnbjpzZXR0aW5nLW91dGxpbmVkXCIgY29sb3I9XCIjZmZmXCIgLz5cbiAgPC9kaXY+XG5cbiAgPEVsRHJhd2VyIHYtbW9kZWw9XCJkcmF3ZXJcIiBkaXJlY3Rpb249XCJydGxcIiBzaXplPVwiMzUwcHhcIj5cbiAgICA8dGVtcGxhdGUgI2hlYWRlcj5cbiAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC0xNnB4IGZvbnQtNzAwXCI+e3sgdCgnc2V0dGluZy5wcm9qZWN0U2V0dGluZycpIH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgIDwhLS0g5Li76aKYIC0tPlxuICAgICAgPEVsRGl2aWRlcj57eyB0KCdzZXR0aW5nLnRoZW1lJykgfX08L0VsRGl2aWRlcj5cbiAgICAgIDxUaGVtZVN3aXRjaCAvPlxuXG4gICAgICA8IS0tIOW4g+WxgFxuICAgICAgPEVsRGl2aWRlcj57eyB0KCdzZXR0aW5nLmxheW91dCcpIH19PC9FbERpdmlkZXI+XG4gICAgICA8TGF5b3V0UmFkaW9QaWNrZXIgLz5cbiAtLT5cbiAgICAgIDwhLS0g57O757uf5Li76aKYIFxuICAgICAgPEVsRGl2aWRlcj57eyB0KCdzZXR0aW5nLnN5c3RlbVRoZW1lJykgfX08L0VsRGl2aWRlcj5cbiAgICAgIDxDb2xvclJhZGlvUGlja2VyXG4gICAgICAgIHYtbW9kZWw9XCJzeXN0ZW1UaGVtZVwiXG4gICAgICAgIDpzY2hlbWE9XCJbXG4gICAgICAgICAgJyM0MDllZmYnLFxuICAgICAgICAgICcjMDA5Njg4JyxcbiAgICAgICAgICAnIzUzNmRmZScsXG4gICAgICAgICAgJyNmZjVjOTMnLFxuICAgICAgICAgICcjZWU0ZjEyJyxcbiAgICAgICAgICAnIzAwOTZjNycsXG4gICAgICAgICAgJyM5YzI3YjAnLFxuICAgICAgICAgICcjZmY5ODAwJ1xuICAgICAgICBdXCJcbiAgICAgICAgQGNoYW5nZT1cInNldFN5c3RlbVRoZW1lXCJcbiAgICAgIC8+XG4tLT5cbiAgICAgIDwhLS0g5aS06YOo5Li76aKYIFxuICAgICAgPEVsRGl2aWRlcj57eyB0KCdzZXR0aW5nLmhlYWRlclRoZW1lJykgfX08L0VsRGl2aWRlcj5cbiAgICAgIDxDb2xvclJhZGlvUGlja2VyXG4gICAgICAgIHYtbW9kZWw9XCJoZWFkZXJUaGVtZVwiXG4gICAgICAgIDpzY2hlbWE9XCJbXG4gICAgICAgICAgJyNmZmYnLFxuICAgICAgICAgICcjMTUxNTE1JyxcbiAgICAgICAgICAnIzUxNzJkYycsXG4gICAgICAgICAgJyNlNzRjM2MnLFxuICAgICAgICAgICcjMjQyOTJlJyxcbiAgICAgICAgICAnIzM5NDY2NCcsXG4gICAgICAgICAgJyMwMDk2ODgnLFxuICAgICAgICAgICcjMzgzZjQ1J1xuICAgICAgICBdXCJcbiAgICAgICAgQGNoYW5nZT1cInNldEhlYWRlclRoZW1lXCJcbiAgICAgIC8+XG4tLT5cbiAgICAgIDwhLS0g6I+c5Y2V5Li76aKYIFxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJsYXlvdXQgIT09ICd0b3AnXCI+XG4gICAgICAgIDxFbERpdmlkZXI+e3sgdCgnc2V0dGluZy5tZW51VGhlbWUnKSB9fTwvRWxEaXZpZGVyPlxuICAgICAgICA8Q29sb3JSYWRpb1BpY2tlclxuICAgICAgICAgIHYtbW9kZWw9XCJtZW51VGhlbWVcIlxuICAgICAgICAgIDpzY2hlbWE9XCJbXG4gICAgICAgICAgICAnI2ZmZicsXG4gICAgICAgICAgICAnIzAwMTUyOScsXG4gICAgICAgICAgICAnIzIxMjEyMScsXG4gICAgICAgICAgICAnIzI3MzM1MicsXG4gICAgICAgICAgICAnIzE5MWIyNCcsXG4gICAgICAgICAgICAnIzM4M2Y0NScsXG4gICAgICAgICAgICAnIzAwMTYyOCcsXG4gICAgICAgICAgICAnIzM0NDA1OCdcbiAgICAgICAgICBdXCJcbiAgICAgICAgICBAY2hhbmdlPVwic2V0TWVudVRoZW1lXCJcbiAgICAgICAgLz5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAtLT5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0g55WM6Z2i5pi+56S6IFxuICAgIDxFbERpdmlkZXI+e3sgdCgnc2V0dGluZy5pbnRlcmZhY2VEaXNwbGF5JykgfX08L0VsRGl2aWRlcj5cbiAgICA8SW50ZXJmYWNlRGlzcGxheSAvPlxuXG4gICAgPEVsRGl2aWRlciAvPlxuICAgIDxkaXY+XG4gICAgICA8RWxCdXR0b24gdHlwZT1cInByaW1hcnlcIiBjbGFzcz1cInctZnVsbFwiIEBjbGljaz1cImNvcHlDb25maWdcIj57eyB0KCdzZXR0aW5nLmNvcHknKSB9fTwvRWxCdXR0b24+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm10LTVweFwiPlxuICAgICAgPEVsQnV0dG9uIHR5cGU9XCJkYW5nZXJcIiBjbGFzcz1cInctZnVsbFwiIEBjbGljaz1cImNsZWFyXCI+XG4gICAgICAgIHt7IHQoJ3NldHRpbmcuY2xlYXJBbmRSZXNldCcpIH19XG4gICAgICA8L0VsQnV0dG9uPlxuICAgIDwvZGl2PlxuXG4gICAgLS0+XG4gIDwvRWxEcmF3ZXI+XG48L3RlbXBsYXRlPlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tc2V0dGluZyc7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgYm9yZGVyLXJhZGl1czogNnB4IDAgMCA2cHg7XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHR5cGUgeyBSb3V0ZU1ldGEgfSBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IHsgcmVmLCB1bnJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGZpbmRQYXRoIH0gZnJvbSAnQC91dGlscy90cmVlJ1xuXG50eXBlIE9ubHlPbmVDaGlsZFR5cGUgPSBBcHBSb3V0ZVJlY29yZFJhdyAmIHsgbm9TaG93aW5nQ2hpbGRyZW4/OiBib29sZWFuIH1cblxuaW50ZXJmYWNlIEhhc09uZVNob3dpbmdDaGlsZCB7XG4gIG9uZVNob3dpbmdDaGlsZD86IGJvb2xlYW5cbiAgb25seU9uZUNoaWxkPzogT25seU9uZUNoaWxkVHlwZVxufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsUGFyZW50UGF0aCA9IDxUID0gUmVjb3JkYWJsZT4odHJlZURhdGE6IFRbXSwgcGF0aDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG1lbnVMaXN0ID0gZmluZFBhdGgodHJlZURhdGEsIChuKSA9PiBuLnBhdGggPT09IHBhdGgpIGFzIEFwcFJvdXRlUmVjb3JkUmF3W11cbiAgcmV0dXJuIChtZW51TGlzdCB8fCBbXSkubWFwKChpdGVtKSA9PiBpdGVtLnBhdGgpXG59XG5cbmV4cG9ydCBjb25zdCBoYXNPbmVTaG93aW5nQ2hpbGQgPSAoXG4gIGNoaWxkcmVuOiBBcHBSb3V0ZVJlY29yZFJhd1tdID0gW10sXG4gIHBhcmVudDogQXBwUm91dGVSZWNvcmRSYXdcbik6IEhhc09uZVNob3dpbmdDaGlsZCA9PiB7XG4gIGNvbnN0IG9ubHlPbmVDaGlsZCA9IHJlZjxPbmx5T25lQ2hpbGRUeXBlPigpXG5cbiAgY29uc3Qgc2hvd2luZ0NoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKCh2KSA9PiB7XG4gICAgY29uc3QgbWV0YSA9ICh2Lm1ldGEgPz8ge30pIGFzIFJvdXRlTWV0YVxuICAgIGlmIChtZXRhLmhpZGRlbikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRlbXAgc2V0KHdpbGwgYmUgdXNlZCBpZiBvbmx5IGhhcyBvbmUgc2hvd2luZyBjaGlsZClcbiAgICAgIG9ubHlPbmVDaGlsZC52YWx1ZSA9IHZcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9KVxuXG4gIC8vIFdoZW4gdGhlcmUgaXMgb25seSBvbmUgY2hpbGQgcm91dGVyLCB0aGUgY2hpbGQgcm91dGVyIGlzIGRpc3BsYXllZCBieSBkZWZhdWx0XG4gIGlmIChzaG93aW5nQ2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uZVNob3dpbmdDaGlsZDogdHJ1ZSxcbiAgICAgIG9ubHlPbmVDaGlsZDogdW5yZWYob25seU9uZUNoaWxkKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNob3cgcGFyZW50IGlmIHRoZXJlIGFyZSBubyBjaGlsZCByb3V0ZXIgdG8gZGlzcGxheVxuICBpZiAoIXNob3dpbmdDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBvbmx5T25lQ2hpbGQudmFsdWUgPSB7IC4uLnBhcmVudCwgcGF0aDogJycsIG5vU2hvd2luZ0NoaWxkcmVuOiB0cnVlIH1cbiAgICByZXR1cm4ge1xuICAgICAgb25lU2hvd2luZ0NoaWxkOiB0cnVlLFxuICAgICAgb25seU9uZUNoaWxkOiB1bnJlZihvbmx5T25lQ2hpbGQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbmVTaG93aW5nQ2hpbGQ6IGZhbHNlLFxuICAgIG9ubHlPbmVDaGlsZDogdW5yZWYob25seU9uZUNoaWxkKVxuICB9XG59XG4iLCJpbXBvcnQgeyBFbFN1Yk1lbnUsIEVsTWVudUl0ZW0gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBnZXRBbGxQYXJlbnRQYXRoLCBoYXNPbmVTaG93aW5nQ2hpbGQgfSBmcm9tICcuLi9oZWxwZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyB1c2VSZW5kZXJNZW51VGl0bGUgfSBmcm9tICcuL3VzZVJlbmRlck1lbnVUaXRsZSdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB7IHBhdGhSZXNvbHZlIH0gZnJvbSAnQC91dGlscy9yb3V0ZXJIZWxwZXInXG5cbmV4cG9ydCBjb25zdCB1c2VSZW5kZXJNZW51SXRlbSA9IChcbiAgYWxsUm91dGVyczogQXBwUm91dGVSZWNvcmRSYXdbXSA9IFtdLFxuICBtZW51TW9kZTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJ1xuKSA9PiB7XG4gIGNvbnN0IHJlbmRlck1lbnVJdGVtID0gKHJvdXRlcnM/OiBBcHBSb3V0ZVJlY29yZFJhd1tdKSA9PiB7XG4gICAgcmV0dXJuIChyb3V0ZXJzIHx8IGFsbFJvdXRlcnMpLm1hcCgodikgPT4ge1xuICAgICAgY29uc3QgbWV0YSA9ICh2Lm1ldGEgPz8ge30pIGFzIFJvdXRlTWV0YVxuICAgICAgaWYgKCFtZXRhLmhpZGRlbikge1xuICAgICAgICBjb25zdCB7IG9uZVNob3dpbmdDaGlsZCwgb25seU9uZUNoaWxkIH0gPSBoYXNPbmVTaG93aW5nQ2hpbGQodi5jaGlsZHJlbiwgdilcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBpc1VybCh2LnBhdGgpXG4gICAgICAgICAgPyB2LnBhdGhcbiAgICAgICAgICA6IGdldEFsbFBhcmVudFBhdGg8QXBwUm91dGVSZWNvcmRSYXc+KGFsbFJvdXRlcnMsIHYucGF0aCkuam9pbignLycpXG5cbiAgICAgICAgY29uc3QgeyByZW5kZXJNZW51VGl0bGUgfSA9IHVzZVJlbmRlck1lbnVUaXRsZSgpXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9uZVNob3dpbmdDaGlsZCAmJlxuICAgICAgICAgICghb25seU9uZUNoaWxkPy5jaGlsZHJlbiB8fCBvbmx5T25lQ2hpbGQ/Lm5vU2hvd2luZ0NoaWxkcmVuKSAmJlxuICAgICAgICAgICFtZXRhPy5hbHdheXNTaG93XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RWxNZW51SXRlbSBpbmRleD17b25seU9uZUNoaWxkID8gcGF0aFJlc29sdmUoZnVsbFBhdGgsIG9ubHlPbmVDaGlsZC5wYXRoKSA6IGZ1bGxQYXRofT5cbiAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiByZW5kZXJNZW51VGl0bGUob25seU9uZUNoaWxkID8gb25seU9uZUNoaWxkPy5tZXRhIDogbWV0YSlcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIDwvRWxNZW51SXRlbT5cbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbiAgICAgICAgICBjb25zdCBwcmVGaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ21lbnUtcG9wcGVyJylcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEVsU3ViTWVudVxuICAgICAgICAgICAgICBpbmRleD17ZnVsbFBhdGh9XG4gICAgICAgICAgICAgIHBvcHBlckNsYXNzPXtcbiAgICAgICAgICAgICAgICBtZW51TW9kZSA9PT0gJ3ZlcnRpY2FsJyA/IGAke3ByZUZpeENsc30tLXZlcnRpY2FsYCA6IGAke3ByZUZpeENsc30tLWhvcml6b250YWxgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICB0aXRsZTogKCkgPT4gcmVuZGVyTWVudVRpdGxlKG1ldGEpLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHJlbmRlck1lbnVJdGVtKHYuY2hpbGRyZW4pXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA8L0VsU3ViTWVudT5cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJNZW51SXRlbVxuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcblxuZXhwb3J0IGNvbnN0IHVzZVJlbmRlck1lbnVUaXRsZSA9ICgpID0+IHtcbiAgY29uc3QgcmVuZGVyTWVudVRpdGxlID0gKG1ldGE6IFJvdXRlTWV0YSkgPT4ge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG4gICAgY29uc3QgeyB0aXRsZSA9ICdQbGVhc2Ugc2V0IHRpdGxlJywgaWNvbiB9ID0gbWV0YVxuXG4gICAgcmV0dXJuIGljb24gPyAoXG4gICAgICA8PlxuICAgICAgICA8SWNvbiBpY29uPXttZXRhLmljb259PjwvSWNvbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ2LW1lbnVfX3RpdGxlXCI+e3QodGl0bGUgYXMgc3RyaW5nKX08L3NwYW4+XG4gICAgICA8Lz5cbiAgICApIDogKFxuICAgICAgPHNwYW4gY2xhc3M9XCJ2LW1lbnVfX3RpdGxlXCI+e3QodGl0bGUgYXMgc3RyaW5nKX08L3NwYW4+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJNZW51VGl0bGVcbiAgfVxufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCB1bnJlZiwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBFbE1lbnUsIEVsU2Nyb2xsYmFyIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlUGVybWlzc2lvblN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3Blcm1pc3Npb24nXG5pbXBvcnQgdHlwZSB7IExheW91dFR5cGUgfSBmcm9tICdAL2NvbmZpZy9hcHAnXG5pbXBvcnQgeyB1c2VSZW5kZXJNZW51SXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy91c2VSZW5kZXJNZW51SXRlbSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ21lbnUnKVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnTWVudScsXG4gIHByb3BzOiB7XG4gICAgbWVudVNlbGVjdDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24gYXMgUHJvcFR5cGU8KGluZGV4OiBzdHJpbmcpID0+IHZvaWQ+LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBzZXR1cChwcm9wcykge1xuICAgIGNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0TGF5b3V0KVxuXG4gICAgY29uc3QgeyBwdXNoLCBjdXJyZW50Um91dGUgfSA9IHVzZVJvdXRlcigpXG5cbiAgICBjb25zdCBwZXJtaXNzaW9uU3RvcmUgPSB1c2VQZXJtaXNzaW9uU3RvcmUoKVxuXG4gICAgY29uc3QgbWVudU1vZGUgPSBjb21wdXRlZCgoKTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJyA9PiB7XG4gICAgICAvLyDnq5ZcbiAgICAgIGNvbnN0IHZlcnRpY2FsOiBMYXlvdXRUeXBlW10gPSBbJ2NsYXNzaWMnLCAndG9wTGVmdCcsICdjdXRNZW51J11cblxuICAgICAgaWYgKHZlcnRpY2FsLmluY2x1ZGVzKHVucmVmKGxheW91dCkpKSB7XG4gICAgICAgIHJldHVybiAndmVydGljYWwnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2hvcml6b250YWwnXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHJvdXRlcnMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgdW5yZWYobGF5b3V0KSA9PT0gJ2N1dE1lbnUnID8gcGVybWlzc2lvblN0b3JlLmdldE1lbnVUYWJSb3V0ZXJzIDogcGVybWlzc2lvblN0b3JlLmdldFJvdXRlcnNcbiAgICApXG5cbiAgICBjb25zdCBjb2xsYXBzZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldENvbGxhcHNlKVxuXG4gICAgY29uc3QgdW5pcXVlT3BlbmVkID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0VW5pcXVlT3BlbmVkKVxuXG4gICAgY29uc3QgYWN0aXZlTWVudSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgbWV0YSwgcGF0aCB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgICAgLy8gaWYgc2V0IHBhdGgsIHRoZSBzaWRlYmFyIHdpbGwgaGlnaGxpZ2h0IHRoZSBwYXRoIHlvdSBzZXRcbiAgICAgIGlmIChtZXRhLmFjdGl2ZU1lbnUpIHtcbiAgICAgICAgcmV0dXJuIG1ldGEuYWN0aXZlTWVudSBhcyBzdHJpbmdcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoXG4gICAgfSlcblxuICAgIGNvbnN0IG1lbnVTZWxlY3QgPSAoaW5kZXg6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHByb3BzLm1lbnVTZWxlY3QpIHtcbiAgICAgICAgcHJvcHMubWVudVNlbGVjdChpbmRleClcbiAgICAgIH1cbiAgICAgIC8vIOiHquWumuS5ieS6i+S7tlxuICAgICAgaWYgKGlzVXJsKGluZGV4KSkge1xuICAgICAgICB3aW5kb3cub3BlbihpbmRleClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwdXNoLT09PScsIGluZGV4KVxuICAgICAgICBwdXNoKGluZGV4KVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlck1lbnVXcmFwID0gKCkgPT4ge1xuICAgICAgaWYgKHVucmVmKGxheW91dCkgPT09ICd0b3AnKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJNZW51KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA8RWxTY3JvbGxiYXI+e3JlbmRlck1lbnUoKX08L0VsU2Nyb2xsYmFyPlxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlck1lbnUgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RWxNZW51XG4gICAgICAgICAgZGVmYXVsdEFjdGl2ZT17dW5yZWYoYWN0aXZlTWVudSl9XG4gICAgICAgICAgbW9kZT17dW5yZWYobWVudU1vZGUpfVxuICAgICAgICAgIGNvbGxhcHNlPXtcbiAgICAgICAgICAgIHVucmVmKGxheW91dCkgPT09ICd0b3AnIHx8IHVucmVmKGxheW91dCkgPT09ICdjdXRNZW51JyA/IGZhbHNlIDogdW5yZWYoY29sbGFwc2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIHVuaXF1ZU9wZW5lZD17dW5yZWYobGF5b3V0KSA9PT0gJ3RvcCcgPyBmYWxzZSA6IHVucmVmKHVuaXF1ZU9wZW5lZCl9XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPVwidmFyKC0tbGVmdC1tZW51LWJnLWNvbG9yKVwiXG4gICAgICAgICAgdGV4dENvbG9yPVwidmFyKC0tbGVmdC1tZW51LXRleHQtY29sb3IpXCJcbiAgICAgICAgICBhY3RpdmVUZXh0Q29sb3I9XCJ2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpXCJcbiAgICAgICAgICBvblNlbGVjdD17bWVudVNlbGVjdH1cbiAgICAgICAgPlxuICAgICAgICAgIHt7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgcmVuZGVyTWVudUl0ZW0gfSA9IHVzZVJlbmRlck1lbnVJdGVtKHVucmVmKHJvdXRlcnMpLCB1bnJlZihtZW51TW9kZSkpXG4gICAgICAgICAgICAgIHJldHVybiByZW5kZXJNZW51SXRlbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgPC9FbE1lbnU+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IChcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9e3ByZWZpeENsc31cbiAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICBgJHtwcmVmaXhDbHN9ICR7cHJlZml4Q2xzfV9fJHt1bnJlZihtZW51TW9kZSl9YCxcbiAgICAgICAgICAnaC1bMTAwJV0gb3ZlcmZsb3ctaGlkZGVuIGZsZXgtY29sIGJnLVt2YXIoLS1sZWZ0LW1lbnUtYmctY29sb3IpXScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgJ3ctW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6IHVucmVmKGNvbGxhcHNlKSAmJiB1bnJlZihsYXlvdXQpICE9PSAnY3V0TWVudScsXG4gICAgICAgICAgICAndy1bdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCldJzogIXVucmVmKGNvbGxhcHNlKSAmJiB1bnJlZihsYXlvdXQpICE9PSAnY3V0TWVudSdcbiAgICAgICAgICB9XG4gICAgICAgIF19XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJNZW51V3JhcCgpfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59KVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD5cbkBwcmVmaXgtY2xzOiB+J0B7bmFtZXNwYWNlfS1tZW51JztcblxuLmlzLWFjdGl2ZS0tYWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIHdpZHRoOiA0cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gIGNvbnRlbnQ6ICcnO1xufVxuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcblxuICAmOmFmdGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHZhcigtLWxlZnQtbWVudS1ib3JkZXItY29sb3IpO1xuICAgIGNvbnRlbnQ6ICcnO1xuICB9XG5cbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LW1lbnUpIHtcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1yaWdodDogbm9uZTtcblxuICAgIC8vIOiuvue9rumAieS4reaXtuWtkOagh+mimOeahOminOiJslxuICAgIC5pcy1hY3RpdmUge1xuICAgICAgJiA+IC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUge1xuICAgICAgICBjb2xvcjogdmFyKC0tbGVmdC1tZW51LXRleHQtYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9ruWtkOiPnOWNleaCrOWBnOeahOmrmOS6ruWSjOiDjOaZr+iJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUsXG4gICAgLkB7ZWxOYW1lc3BhY2V9LW1lbnUtaXRlbSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9rumAieS4reaXtueahOmrmOS6ruiDjOaZr+WSjOmrmOS6ruminOiJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudS5pcy1hY3RpdmUsXG4gICAgLkB7ZWxOYW1lc3BhY2V9LW1lbnUtaXRlbS5pcy1hY3RpdmUge1xuICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC5Ae2VsTmFtZXNwYWNlfS1tZW51LWl0ZW0uaXMtYWN0aXZlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgJjphZnRlciB7XG4gICAgICAgIC5pcy1hY3RpdmUtLWFmdGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9ruWtkOiPnOWNleeahOiDjOaZr+minOiJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1tZW51IHtcbiAgICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUsXG4gICAgICAuQHtlbE5hbWVzcGFjZX0tbWVudS1pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1saWdodC1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDmipjlj6Dml7bnmoTmnIDlsI/lrr3luqZcbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LW1lbnUtLWNvbGxhcHNlKSB7XG4gICAgd2lkdGg6IHZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpO1xuXG4gICAgJiA+IC5pcy1hY3RpdmUsXG4gICAgJiA+IC5pcy1hY3RpdmUgPiAuQHtlbE5hbWVzcGFjZX0tc3ViLW1lbnVfX3RpdGxlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1jb2xsYXBzZS1iZy1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG5cbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICAuaXMtYWN0aXZlLS1hZnRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDmipjlj6DliqjnlLvnmoTml7blgJnvvIzlsLHpnIDopoHmiormloflrZfnu5npmpDol4/mjolcbiAgOmRlZXAoLmhvcml6b250YWwtY29sbGFwc2UtdHJhbnNpdGlvbikge1xuICAgIC8vIHRyYW5zaXRpb246IDBzIHdpZHRoIGVhc2UtaW4tb3V0LCAwcyBwYWRkaW5nLWxlZnQgZWFzZS1pbi1vdXQsIDBzIHBhZGRpbmctcmlnaHQgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAuQHtwcmVmaXgtY2xzfV9fdGl0bGUge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAvLyDmsLTlubPoj5zljZVcbiAgJl9faG9yaXpvbnRhbCB7XG4gICAgaGVpZ2h0OiBjYWxjKH4ndmFyKCAtIC10b3AtdG9vbC1oZWlnaHQpJykgIWltcG9ydGFudDtcblxuICAgIDpkZWVwKC5Ae2VsTmFtZXNwYWNlfS1tZW51LS1ob3Jpem9udGFsKSB7XG4gICAgICBoZWlnaHQ6IGNhbGMofid2YXIoIC0gLXRvcC10b29sLWhlaWdodCknKTtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICAvLyDph43mlrDorr7nva7lupXpg6jpq5jkuq7popzoibJcbiAgICAgICYgPiAuQHtlbE5hbWVzcGFjZX0tc3ViLW1lbnUuaXMtYWN0aXZlIHtcbiAgICAgICAgLkB7ZWxOYW1lc3BhY2V9LXN1Yi1tZW51X190aXRsZSB7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSkgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuQHtlbE5hbWVzcGFjZX0tbWVudS1pdGVtLmlzLWFjdGl2ZSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLkB7cHJlZml4LWNsc31fX3RpdGxlIHtcbiAgICAgICAgLyogc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG4gICAgICAgIG1heC1oZWlnaHQ6IGNhbGMofid2YXIoLS10b3AtdG9vbC1oZWlnaHQpIC0gMnB4JykgIWltcG9ydGFudDtcbiAgICAgICAgLyogc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG4gICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKH4ndmFyKC0tdG9wLXRvb2wtaGVpZ2h0KSAtIDJweCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tbWVudS1wb3BwZXInO1xuXG4uaXMtYWN0aXZlLS1hZnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgd2lkdGg6IDRweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbC1jb2xvci1wcmltYXJ5KTtcbiAgY29udGVudDogJyc7XG59XG5cbi5Ae3ByZWZpeC1jbHN9LS12ZXJ0aWNhbCxcbi5Ae3ByZWZpeC1jbHN9LS1ob3Jpem9udGFsIHtcbiAgLy8g6K6+572u6YCJ5Lit5pe25a2Q5qCH6aKY55qE6aKc6ImyXG4gIC5pcy1hY3RpdmUge1xuICAgICYgPiAuZWwtc3ViLW1lbnVfX3RpdGxlIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8g6K6+572u5a2Q6I+c5Y2V5oKs5YGc55qE6auY5Lqu5ZKM6IOM5pmv6ImyXG4gIC5lbC1zdWItbWVudV9fdGl0bGUsXG4gIC5lbC1tZW51LWl0ZW0ge1xuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1jb2xvcikgIWltcG9ydGFudDtcbiAgICB9XG4gIH1cblxuICAvLyDorr7nva7pgInkuK3ml7bnmoTpq5jkuq7og4zmma9cbiAgLmVsLW1lbnUtaXRlbS5pcy1hY3RpdmUge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgLmlzLWFjdGl2ZS0tYWZ0ZXI7XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgZ2V0QWxsUGFyZW50UGF0aCB9IGZyb20gJ0AvY29tcG9uZW50cy9NZW51L3NyYy9oZWxwZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnXG5pbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IHR5cGUgVGFiTWFwVHlwZXMgPSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBjb25zdCB0YWJQYXRoTWFwID0gcmVhY3RpdmU8VGFiTWFwVHlwZXM+KHt9KVxuXG5leHBvcnQgY29uc3QgaW5pdFRhYk1hcCA9IChyb3V0ZXM6IEFwcFJvdXRlUmVjb3JkUmF3W10pID0+IHtcbiAgZm9yIChjb25zdCB2IG9mIHJvdXRlcykge1xuICAgIGNvbnN0IG1ldGEgPSAodi5tZXRhID8/IHt9KSBhcyBSb3V0ZU1ldGFcbiAgICBpZiAoIW1ldGE/LmhpZGRlbikge1xuICAgICAgdGFiUGF0aE1hcFt2LnBhdGhdID0gW11cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlck1lbnVzUGF0aCA9IChcbiAgcm91dGVzOiBBcHBSb3V0ZVJlY29yZFJhd1tdLFxuICBhbGxSb3V0ZXM6IEFwcFJvdXRlUmVjb3JkUmF3W11cbik6IEFwcFJvdXRlUmVjb3JkUmF3W10gPT4ge1xuICBjb25zdCByZXM6IEFwcFJvdXRlUmVjb3JkUmF3W10gPSBbXVxuICBmb3IgKGNvbnN0IHYgb2Ygcm91dGVzKSB7XG4gICAgbGV0IGRhdGE6IE51bGxhYmxlPEFwcFJvdXRlUmVjb3JkUmF3PiA9IG51bGxcbiAgICBjb25zdCBtZXRhID0gKHYubWV0YSA/PyB7fSkgYXMgUm91dGVNZXRhXG4gICAgaWYgKCFtZXRhLmhpZGRlbiB8fCBtZXRhLnNob3dNYWluUm91dGUpIHtcbiAgICAgIGNvbnN0IGFsbFBhcmVudFBhaHQgPSBnZXRBbGxQYXJlbnRQYXRoPEFwcFJvdXRlUmVjb3JkUmF3PihhbGxSb3V0ZXMsIHYucGF0aClcblxuICAgICAgY29uc3QgZnVsbFBhdGggPSBpc1VybCh2LnBhdGgpID8gdi5wYXRoIDogYWxsUGFyZW50UGFodC5qb2luKCcvJylcblxuICAgICAgZGF0YSA9IGNsb25lRGVlcCh2KVxuICAgICAgZGF0YS5wYXRoID0gZnVsbFBhdGhcbiAgICAgIGlmICh2LmNoaWxkcmVuICYmIGRhdGEpIHtcbiAgICAgICAgZGF0YS5jaGlsZHJlbiA9IGZpbHRlck1lbnVzUGF0aCh2LmNoaWxkcmVuLCBhbGxSb3V0ZXMpXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJlcy5wdXNoKGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmIChhbGxQYXJlbnRQYWh0Lmxlbmd0aCAmJiBSZWZsZWN0Lmhhcyh0YWJQYXRoTWFwLCBhbGxQYXJlbnRQYWh0WzBdKSkge1xuICAgICAgICB0YWJQYXRoTWFwW2FsbFBhcmVudFBhaHRbMF1dLnB1c2goZnVsbFBhdGgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc1xufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyB1c2VQZXJtaXNzaW9uU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvcGVybWlzc2lvbidcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IGNvbXB1dGVkLCB1bnJlZiwgZGVmaW5lQ29tcG9uZW50LCB3YXRjaCwgcmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUkxOG4nXG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IEljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCB7IE1lbnUgfSBmcm9tICdAL2NvbXBvbmVudHMvTWVudSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBwYXRoUmVzb2x2ZSB9IGZyb20gJ0AvdXRpbHMvcm91dGVySGVscGVyJ1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJ1xuaW1wb3J0IHsgZmlsdGVyTWVudXNQYXRoLCBpbml0VGFiTWFwLCB0YWJQYXRoTWFwIH0gZnJvbSAnLi9oZWxwZXInXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzLCB2YXJpYWJsZXMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGFiLW1lbnUnKVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVGFiTWVudScsXG4gIHNldHVwKCkge1xuICAgIGNvbnN0IHsgcHVzaCwgY3VycmVudFJvdXRlIH0gPSB1c2VSb3V0ZXIoKVxuXG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuICAgIGNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4gICAgY29uc3QgY29sbGFwc2UgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRDb2xsYXBzZSlcblxuICAgIGNvbnN0IHBlcm1pc3Npb25TdG9yZSA9IHVzZVBlcm1pc3Npb25TdG9yZSgpXG5cbiAgICBjb25zdCByb3V0ZXJzID0gY29tcHV0ZWQoKCkgPT4gcGVybWlzc2lvblN0b3JlLmdldFJvdXRlcnMpXG5cbiAgICBjb25zdCB0YWJSb3V0ZXJzID0gY29tcHV0ZWQoKCkgPT4gdW5yZWYocm91dGVycykuZmlsdGVyKCh2KSA9PiAhdj8ubWV0YT8uaGlkZGVuKSlcblxuICAgIGNvbnN0IHNldENvbGxhcHNlID0gKCkgPT4ge1xuICAgICAgYXBwU3RvcmUuc2V0Q29sbGFwc2UoIXVucmVmKGNvbGxhcHNlKSlcbiAgICB9XG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHJvdXRlcnMudmFsdWUsXG4gICAgICAocm91dGVyczogQXBwUm91dGVSZWNvcmRSYXdbXSkgPT4ge1xuICAgICAgICBpbml0VGFiTWFwKHJvdXRlcnMpXG4gICAgICAgIGZpbHRlck1lbnVzUGF0aChyb3V0ZXJzLCByb3V0ZXJzKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgICBkZWVwOiB0cnVlXG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3Qgc2hvd1RpdGxlID0gcmVmKHRydWUpXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGNvbGxhcHNlLnZhbHVlLFxuICAgICAgKGNvbGxhcHNlOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGlmICghY29sbGFwc2UpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNob3dUaXRsZS52YWx1ZSA9ICFjb2xsYXBzZVxuICAgICAgICAgIH0sIDIwMClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaG93VGl0bGUudmFsdWUgPSAhY29sbGFwc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcblxuICAgIC8vIOaYr+WQpuaYvuekuuiPnOWNlVxuICAgIGNvbnN0IHNob3dNZW51ID0gcmVmKGZhbHNlKVxuXG4gICAgLy8gdGFi6auY5LquXG4gICAgY29uc3QgdGFiQWN0aXZlID0gcmVmKCcnKVxuXG4gICAgLy8gdGFi54K55Ye75LqL5Lu2XG4gICAgY29uc3QgdGFiQ2xpY2sgPSAoaXRlbTogQXBwUm91dGVSZWNvcmRSYXcpID0+IHtcbiAgICAgIGlmIChpc1VybChpdGVtLnBhdGgpKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGl0ZW0ucGF0aClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0YWJBY3RpdmUudmFsdWUgPSBpdGVtLmNoaWxkcmVuID8gaXRlbS5wYXRoIDogaXRlbS5wYXRoLnNwbGl0KCcvJylbMF1cbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIHNob3dNZW51LnZhbHVlID0gIXVucmVmKHNob3dNZW51KVxuICAgICAgICBpZiAodW5yZWYoc2hvd01lbnUpKSB7XG4gICAgICAgICAgcGVybWlzc2lvblN0b3JlLnNldE1lbnVUYWJSb3V0ZXJzKFxuICAgICAgICAgICAgY2xvbmVEZWVwKGl0ZW0uY2hpbGRyZW4pLm1hcCgodikgPT4ge1xuICAgICAgICAgICAgICB2LnBhdGggPSBwYXRoUmVzb2x2ZSh1bnJlZih0YWJBY3RpdmUpLCB2LnBhdGgpXG4gICAgICAgICAgICAgIHJldHVybiB2XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChpdGVtLnBhdGgpXG4gICAgICAgIHBlcm1pc3Npb25TdG9yZS5zZXRNZW51VGFiUm91dGVycyhbXSlcbiAgICAgICAgc2hvd01lbnUudmFsdWUgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9rumrmOS6rlxuICAgIGNvbnN0IGlzQWN0aWNlID0gKGN1cnJlbnRQYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHsgcGF0aCB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgICAgaWYgKHRhYlBhdGhNYXBbY3VycmVudFBhdGhdLmluY2x1ZGVzKHBhdGgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBtb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgaWYgKCF1bnJlZihzaG93TWVudSkpIHJldHVyblxuICAgICAgc2hvd01lbnUudmFsdWUgPSBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGlkPXtgJHt2YXJpYWJsZXMubmFtZXNwYWNlfS1tZW51YH1cbiAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgICAgJ3JlbGF0aXZlIGJnLVt2YXIoLS1sZWZ0LW1lbnUtYmctY29sb3IpXSB0b3AtMXB4IHotOTk5JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAndy1bdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKV0nOiAhdW5yZWYoY29sbGFwc2UpLFxuICAgICAgICAgICAgJ3ctW3ZhcigtLXRhYi1tZW51LW1pbi13aWR0aCldJzogdW5yZWYoY29sbGFwc2UpXG4gICAgICAgICAgfVxuICAgICAgICBdfVxuICAgICAgICBvbk1vdXNlbGVhdmU9e21vdXNlbGVhdmV9XG4gICAgICA+XG4gICAgICAgIDxFbFNjcm9sbGJhciBjbGFzcz1cIiFoLVtjYWxjKDEwMCUtdmFyKC0tdGFiLW1lbnUtY29sbGFwc2UtaGVpZ2h0KS0xcHgpXVwiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7KCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdW5yZWYodGFiUm91dGVycykubWFwKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IChcbiAgICAgICAgICAgICAgICAgIHYubWV0YT8uYWx3YXlzU2hvdyB8fCAodj8uY2hpbGRyZW4/Lmxlbmd0aCAmJiB2Py5jaGlsZHJlbj8ubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAgICAgPyB2XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHY/LmNoaWxkcmVuICYmIHY/LmNoaWxkcmVuWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGhSZXNvbHZlKHYucGF0aCwgKHY/LmNoaWxkcmVuICYmIHY/LmNoaWxkcmVuWzBdKT8ucGF0aCBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkgYXMgQXBwUm91dGVSZWNvcmRSYXdcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGAke3ByZWZpeENsc31fX2l0ZW1gLFxuICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWNlbnRlciB0ZXh0LTEycHggcmVsYXRpdmUgcHktMTJweCBjdXJzb3ItcG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWFjdGl2ZSc6IGlzQWN0aWNlKHYucGF0aClcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0YWJDbGljayhpdGVtKVxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGljb249e2l0ZW0/Lm1ldGE/Lmljb259PjwvSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHshdW5yZWYoc2hvd1RpdGxlKSA/IHVuZGVmaW5lZCA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImJyZWFrLXdvcmRzIG10LTVweCBweC0ycHhcIj57dChpdGVtLm1ldGE/LnRpdGxlKX08L3A+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0VsU2Nyb2xsYmFyPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgIGAke3ByZWZpeENsc30tLWNvbGxhcHNlYCxcbiAgICAgICAgICAgICd0ZXh0LWNlbnRlciBoLVt2YXIoLS10YWItbWVudS1jb2xsYXBzZS1oZWlnaHQpXSBsZWFkaW5nLVt2YXIoLS10YWItbWVudS1jb2xsYXBzZS1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlcidcbiAgICAgICAgICBdfVxuICAgICAgICAgIG9uQ2xpY2s9e3NldENvbGxhcHNlfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gaWNvbj17dW5yZWYoY29sbGFwc2UpID8gJ2VwOmQtYXJyb3ctcmlnaHQnIDogJ2VwOmQtYXJyb3ctbGVmdCd9PjwvSWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNZW51XG4gICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICchYWJzb2x1dGUgdG9wLTAgYm9yZGVyLWxlZnQtMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS1sZWZ0LW1lbnUtYmctbGlnaHQtY29sb3IpXScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICchbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWluLXdpZHRoKV0nOiB1bnJlZihjb2xsYXBzZSksXG4gICAgICAgICAgICAgICchbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKV0nOiAhdW5yZWYoY29sbGFwc2UpLFxuICAgICAgICAgICAgICAnIXctW2NhbGModmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCkrMXB4KV0nOiB1bnJlZihzaG93TWVudSksXG4gICAgICAgICAgICAgICchdy0wJzogIXVucmVmKHNob3dNZW51KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF19XG4gICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiB3aWR0aCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpLCBsZWZ0IHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XCJcbiAgICAgICAgPjwvTWVudT5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSlcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tdGFiLW1lbnUnO1xuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIHRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1xuXG4gICY6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1sZWZ0LW1lbnUtYm9yZGVyLWNvbG9yKTtcbiAgICBjb250ZW50OiAnJztcbiAgfVxuXG4gICZfX2l0ZW0ge1xuICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1jb2xvcik7XG4gICAgdHJhbnNpdGlvbjogYWxsIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpO1xuICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWFjdGl2ZS1jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgJi0tY29sbGFwc2Uge1xuICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1jb2xvcik7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWxpZ2h0LWNvbG9yKTtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tbGVmdC1tZW51LWJvcmRlci1jb2xvcik7XG4gIH1cblxuICAuaXMtYWN0aXZlIHtcbiAgICBjb2xvcjogdmFyKC0tbGVmdC1tZW51LXRleHQtYWN0aXZlLWNvbG9yKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKTtcbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCByb3V0ZXIgZnJvbSAnQC9yb3V0ZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkIH0gZnJvbSAndnVlLXJvdXRlcidcbmltcG9ydCB7IGdldFJhd1JvdXRlIH0gZnJvbSAnQC91dGlscy9yb3V0ZXJIZWxwZXInXG5pbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJ1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gJ0AvdXRpbHMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnc1ZpZXdTdGF0ZSB7XG4gIHZpc2l0ZWRWaWV3czogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXVxuICBjYWNoZWRWaWV3czogU2V0PHN0cmluZz5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZVRhZ3NWaWV3U3RvcmUgPSBkZWZpbmVTdG9yZSh7XG4gIGlkOiAndGFnc1ZpZXcnLFxuICBzdGF0ZTogKCk6IFRhZ3NWaWV3U3RhdGUgPT4gKHtcbiAgICB2aXNpdGVkVmlld3M6IFtdLFxuICAgIGNhY2hlZFZpZXdzOiBuZXcgU2V0KClcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBnZXRWaXNpdGVkVmlld3MoKTogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXSB7XG4gICAgICByZXR1cm4gdGhpcy52aXNpdGVkVmlld3NcbiAgICB9LFxuICAgIGdldENhY2hlZFZpZXdzKCk6IHN0cmluZ1tdIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2FjaGVkVmlld3MpXG4gICAgfVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgLy8g5paw5aKe57yT5a2Y5ZKMdGFnXG4gICAgYWRkVmlldyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCk6IHZvaWQge1xuICAgICAgdGhpcy5hZGRWaXNpdGVkVmlldyh2aWV3KVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOaWsOWinnRhZ1xuICAgIGFkZFZpc2l0ZWRWaWV3KHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBpZiAodGhpcy52aXNpdGVkVmlld3Muc29tZSgodikgPT4gdi5wYXRoID09PSB2aWV3LnBhdGgpKSByZXR1cm5cbiAgICAgIGlmICh2aWV3Lm1ldGE/Lm5vVGFnc1ZpZXcpIHJldHVyblxuICAgICAgdGhpcy52aXNpdGVkVmlld3MucHVzaChcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdmlldywge1xuICAgICAgICAgIHRpdGxlOiB2aWV3Lm1ldGE/LnRpdGxlIHx8ICduby1uYW1lJ1xuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0sXG4gICAgLy8g5paw5aKe57yT5a2YXG4gICAgYWRkQ2FjaGVkVmlldygpIHtcbiAgICAgIGNvbnN0IGNhY2hlTWFwOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKVxuICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMudmlzaXRlZFZpZXdzKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRSYXdSb3V0ZSh2KVxuICAgICAgICBjb25zdCBuZWVkQ2FjaGUgPSAhaXRlbS5tZXRhPy5ub0NhY2hlXG4gICAgICAgIGlmICghbmVlZENhY2hlKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gaXRlbS5uYW1lIGFzIHN0cmluZ1xuICAgICAgICBjYWNoZU1hcC5hZGQobmFtZSlcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5mcm9tKHRoaXMuY2FjaGVkVmlld3MpLnNvcnQoKS50b1N0cmluZygpID09PSBBcnJheS5mcm9tKGNhY2hlTWFwKS5zb3J0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB0aGlzLmNhY2hlZFZpZXdzID0gY2FjaGVNYXBcbiAgICB9LFxuICAgIC8vIOWIoOmZpOafkOS4qlxuICAgIGRlbFZpZXcodmlldzogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpIHtcbiAgICAgIHRoaXMuZGVsVmlzaXRlZFZpZXcodmlldylcbiAgICAgIHRoaXMuYWRkQ2FjaGVkVmlldygpXG4gICAgfSxcbiAgICAvLyDliKDpmaR0YWdcbiAgICBkZWxWaXNpdGVkVmlldyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgZm9yIChjb25zdCBbaSwgdl0gb2YgdGhpcy52aXNpdGVkVmlld3MuZW50cmllcygpKSB7XG4gICAgICAgIGlmICh2LnBhdGggPT09IHZpZXcucGF0aCkge1xuICAgICAgICAgIHRoaXMudmlzaXRlZFZpZXdzLnNwbGljZShpLCAxKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIOWIoOmZpOe8k+WtmFxuICAgIGRlbENhY2hlZFZpZXcoKSB7XG4gICAgICBjb25zdCByb3V0ZSA9IHJvdXRlci5jdXJyZW50Um91dGUudmFsdWVcbiAgICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4PHN0cmluZz4odGhpcy5nZXRDYWNoZWRWaWV3cywgKHYpID0+IHYgPT09IHJvdXRlLm5hbWUpXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLmNhY2hlZFZpZXdzLmRlbGV0ZSh0aGlzLmdldENhY2hlZFZpZXdzW2luZGV4XSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIOWIoOmZpOaJgOaciee8k+WtmOWSjHRhZ1xuICAgIGRlbEFsbFZpZXdzKCkge1xuICAgICAgdGhpcy5kZWxBbGxWaXNpdGVkVmlld3MoKVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOWIoOmZpOaJgOaciXRhZ1xuICAgIGRlbEFsbFZpc2l0ZWRWaWV3cygpIHtcbiAgICAgIC8vIGNvbnN0IGFmZml4VGFncyA9IHRoaXMudmlzaXRlZFZpZXdzLmZpbHRlcigodGFnKSA9PiB0YWcubWV0YS5hZmZpeClcbiAgICAgIHRoaXMudmlzaXRlZFZpZXdzID0gW11cbiAgICB9LFxuICAgIC8vIOWIoOmZpOWFtuS7llxuICAgIGRlbE90aGVyc1ZpZXdzKHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICB0aGlzLmRlbE90aGVyc1Zpc2l0ZWRWaWV3cyh2aWV3KVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOWIoOmZpOWFtuS7lnRhZ1xuICAgIGRlbE90aGVyc1Zpc2l0ZWRWaWV3cyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgdGhpcy52aXNpdGVkVmlld3MgPSB0aGlzLnZpc2l0ZWRWaWV3cy5maWx0ZXIoKHYpID0+IHtcbiAgICAgICAgcmV0dXJuIHY/Lm1ldGE/LmFmZml4IHx8IHYucGF0aCA9PT0gdmlldy5wYXRoXG4gICAgICB9KVxuICAgIH0sXG4gICAgLy8g5Yig6Zmk5bem5L6nXG4gICAgZGVsTGVmdFZpZXdzKHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGZpbmRJbmRleDxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4oXG4gICAgICAgIHRoaXMudmlzaXRlZFZpZXdzLFxuICAgICAgICAodikgPT4gdi5wYXRoID09PSB2aWV3LnBhdGhcbiAgICAgIClcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMudmlzaXRlZFZpZXdzID0gdGhpcy52aXNpdGVkVmlld3MuZmlsdGVyKCh2LCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHY/Lm1ldGE/LmFmZml4IHx8IHYucGF0aCA9PT0gdmlldy5wYXRoIHx8IGkgPiBpbmRleFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFkZENhY2hlZFZpZXcoKVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8g5Yig6Zmk5Y+z5L6nXG4gICAgZGVsUmlnaHRWaWV3cyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgY29uc3QgaW5kZXggPSBmaW5kSW5kZXg8Um91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQ+KFxuICAgICAgICB0aGlzLnZpc2l0ZWRWaWV3cyxcbiAgICAgICAgKHYpID0+IHYucGF0aCA9PT0gdmlldy5wYXRoXG4gICAgICApXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLnZpc2l0ZWRWaWV3cyA9IHRoaXMudmlzaXRlZFZpZXdzLmZpbHRlcigodiwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiB2Py5tZXRhPy5hZmZpeCB8fCB2LnBhdGggPT09IHZpZXcucGF0aCB8fCBpIDwgaW5kZXhcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVZpc2l0ZWRWaWV3KHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBmb3IgKGxldCB2IG9mIHRoaXMudmlzaXRlZFZpZXdzKSB7XG4gICAgICAgIGlmICh2LnBhdGggPT09IHZpZXcucGF0aCkge1xuICAgICAgICAgIHYgPSBPYmplY3QuYXNzaWduKHYsIHZpZXcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHVzZVRhZ3NWaWV3U3RvcmVXaXRoT3V0ID0gKCkgPT4ge1xuICByZXR1cm4gdXNlVGFnc1ZpZXdTdG9yZShzdG9yZSlcbn1cbiIsImltcG9ydCB0eXBlIHsgUm91dGVNZXRhLCBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBwYXRoUmVzb2x2ZSB9IGZyb20gJ0AvdXRpbHMvcm91dGVySGVscGVyJ1xuXG5leHBvcnQgY29uc3QgZmlsdGVyQWZmaXhUYWdzID0gKHJvdXRlczogQXBwUm91dGVSZWNvcmRSYXdbXSwgcGFyZW50UGF0aCA9ICcnKSA9PiB7XG4gIGxldCB0YWdzOiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZFtdID0gW11cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlKSA9PiB7XG4gICAgY29uc3QgbWV0YSA9IHJvdXRlLm1ldGEgYXMgUm91dGVNZXRhXG4gICAgY29uc3QgdGFnUGF0aCA9IHBhdGhSZXNvbHZlKHBhcmVudFBhdGgsIHJvdXRlLnBhdGgpXG4gICAgaWYgKG1ldGE/LmFmZml4KSB7XG4gICAgICB0YWdzLnB1c2goeyAuLi5yb3V0ZSwgcGF0aDogdGFnUGF0aCwgZnVsbFBhdGg6IHRhZ1BhdGggfSBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZClcbiAgICB9XG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCB0ZW1wVGFnczogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXSA9IGZpbHRlckFmZml4VGFncyhyb3V0ZS5jaGlsZHJlbiwgdGFnUGF0aClcbiAgICAgIGlmICh0ZW1wVGFncy5sZW5ndGggPj0gMSkge1xuICAgICAgICB0YWdzID0gWy4uLnRhZ3MsIC4uLnRlbXBUYWdzXVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gdGFnc1xufVxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IEVsRHJvcGRvd24sIEVsRHJvcGRvd25NZW51LCBFbERyb3Bkb3duSXRlbSB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IFByb3BUeXBlLCByZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB0eXBlIHsgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQgfSBmcm9tICd2dWUtcm91dGVyJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjb250ZXh0LW1lbnUnKVxuXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd2aXNpYmxlQ2hhbmdlJ10pXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBzY2hlbWE6IHtcbiAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxjb250ZXh0TWVudVNjaGVtYVtdPixcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICB0cmlnZ2VyOiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPCdjbGljaycgfCAnaG92ZXInIHwgJ2ZvY3VzJyB8ICdjb250ZXh0bWVudSc+LFxuICAgIGRlZmF1bHQ6ICdjb250ZXh0bWVudSdcbiAgfSxcbiAgdGFnSXRlbToge1xuICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4sXG4gICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICB9XG59KVxuXG5jb25zdCBjb21tYW5kID0gKGl0ZW06IGNvbnRleHRNZW51U2NoZW1hKSA9PiB7XG4gIGl0ZW0uY29tbWFuZCAmJiBpdGVtLmNvbW1hbmQoaXRlbSlcbn1cblxuY29uc3QgdmlzaWJsZUNoYW5nZSA9ICh2aXNpYmxlOiBib29sZWFuKSA9PiB7XG4gIGVtaXQoJ3Zpc2libGVDaGFuZ2UnLCB2aXNpYmxlLCBwcm9wcy50YWdJdGVtKVxufVxuXG5jb25zdCBlbERyb3Bkb3duTWVudVJlZiA9IHJlZjxDb21wb25lbnRSZWY8dHlwZW9mIEVsRHJvcGRvd24+PigpXG5cbmRlZmluZUV4cG9zZSh7XG4gIGVsRHJvcGRvd25NZW51UmVmLFxuICB0YWdJdGVtOiBwcm9wcy50YWdJdGVtXG59KVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsRHJvcGRvd25cbiAgICByZWY9XCJlbERyb3Bkb3duTWVudVJlZlwiXG4gICAgOmNsYXNzPVwicHJlZml4Q2xzXCJcbiAgICA6dHJpZ2dlcj1cInRyaWdnZXJcIlxuICAgIHBsYWNlbWVudD1cImJvdHRvbS1zdGFydFwiXG4gICAgQGNvbW1hbmQ9XCJjb21tYW5kXCJcbiAgICBAdmlzaWJsZS1jaGFuZ2U9XCJ2aXNpYmxlQ2hhbmdlXCJcbiAgICBwb3BwZXItY2xhc3M9XCJ2LWNvbnRleHQtbWVudS1wb3BwZXJcIlxuICA+XG4gICAgPHNsb3Q+PC9zbG90PlxuICAgIDx0ZW1wbGF0ZSAjZHJvcGRvd24+XG4gICAgICA8RWxEcm9wZG93bk1lbnU+XG4gICAgICAgIDxFbERyb3Bkb3duSXRlbVxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBzY2hlbWFcIlxuICAgICAgICAgIDprZXk9XCJgZHJvcGRvd24ke2luZGV4fWBcIlxuICAgICAgICAgIDpkaXZpZGVkPVwiaXRlbS5kaXZpZGVkXCJcbiAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcbiAgICAgICAgICA6Y29tbWFuZD1cIml0ZW1cIlxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gOmljb249XCJpdGVtLmljb25cIiAvPiB7eyB0KGl0ZW0ubGFiZWwpIH19XG4gICAgICAgIDwvRWxEcm9wZG93bkl0ZW0+XG4gICAgICA8L0VsRHJvcGRvd25NZW51PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvRWxEcm9wZG93bj5cbjwvdGVtcGxhdGU+XG4iLCJpbXBvcnQgeyByZWYsIHVucmVmIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbFRvUGFyYW1zIHtcbiAgZWw6IEhUTUxFbGVtZW50XG4gIHRvOiBudW1iZXJcbiAgcG9zaXRpb246IHN0cmluZ1xuICBkdXJhdGlvbj86IG51bWJlclxuICBjYWxsYmFjaz86ICgpID0+IHZvaWRcbn1cblxuY29uc3QgZWFzZUluT3V0UXVhZCA9ICh0OiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpID0+IHtcbiAgdCAvPSBkIC8gMlxuICBpZiAodCA8IDEpIHtcbiAgICByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICsgYlxuICB9XG4gIHQtLVxuICByZXR1cm4gKC1jIC8gMikgKiAodCAqICh0IC0gMikgLSAxKSArIGJcbn1cbmNvbnN0IG1vdmUgPSAoZWw6IEhUTUxFbGVtZW50LCBwb3NpdGlvbjogc3RyaW5nLCBhbW91bnQ6IG51bWJlcikgPT4ge1xuICBlbFtwb3NpdGlvbl0gPSBhbW91bnRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbFRvKHtcbiAgZWwsXG4gIHBvc2l0aW9uID0gJ3Njcm9sbExlZnQnLFxuICB0byxcbiAgZHVyYXRpb24gPSA1MDAsXG4gIGNhbGxiYWNrXG59OiBTY3JvbGxUb1BhcmFtcykge1xuICBjb25zdCBpc0FjdGl2ZVJlZiA9IHJlZihmYWxzZSlcbiAgY29uc3Qgc3RhcnQgPSBlbFtwb3NpdGlvbl1cbiAgY29uc3QgY2hhbmdlID0gdG8gLSBzdGFydFxuICBjb25zdCBpbmNyZW1lbnQgPSAyMFxuICBsZXQgY3VycmVudFRpbWUgPSAwXG5cbiAgZnVuY3Rpb24gYW5pbWF0ZVNjcm9sbCgpIHtcbiAgICBpZiAoIXVucmVmKGlzQWN0aXZlUmVmKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGN1cnJlbnRUaW1lICs9IGluY3JlbWVudFxuICAgIGNvbnN0IHZhbCA9IGVhc2VJbk91dFF1YWQoY3VycmVudFRpbWUsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKVxuICAgIG1vdmUoZWwsIHBvc2l0aW9uLCB2YWwpXG4gICAgaWYgKGN1cnJlbnRUaW1lIDwgZHVyYXRpb24gJiYgdW5yZWYoaXNBY3RpdmVSZWYpKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjcm9sbClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW4oKSB7XG4gICAgaXNBY3RpdmVSZWYudmFsdWUgPSB0cnVlXG4gICAgYW5pbWF0ZVNjcm9sbCgpXG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlzQWN0aXZlUmVmLnZhbHVlID0gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB7IHN0YXJ0OiBydW4sIHN0b3AgfVxufVxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IG9uTW91bnRlZCwgd2F0Y2gsIGNvbXB1dGVkLCB1bnJlZiwgcmVmLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkLCBSb3V0ZXJMaW5rUHJvcHMgfSBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IHsgdXNlUGVybWlzc2lvblN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3Blcm1pc3Npb24nXG5pbXBvcnQgeyB1c2VUYWdzVmlld1N0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3RhZ3NWaWV3J1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUkxOG4nXG5pbXBvcnQgeyBmaWx0ZXJBZmZpeFRhZ3MgfSBmcm9tICcuL2hlbHBlcidcbmltcG9ydCB7IENvbnRleHRNZW51LCBDb250ZXh0TWVudUV4cG9zZSB9IGZyb20gJ0AvY29tcG9uZW50cy9Db250ZXh0TWVudSdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB7IHVzZVRlbXBsYXRlUmVmc0xpc3QgfSBmcm9tICdAdnVldXNlL2NvcmUnXG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZVNjcm9sbFRvIH0gZnJvbSAnQC9ob29rcy9ldmVudC91c2VTY3JvbGxUbydcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGFncy12aWV3JylcblxuY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuY29uc3QgeyBjdXJyZW50Um91dGUsIHB1c2gsIHJlcGxhY2UgfSA9IHVzZVJvdXRlcigpXG5cbmNvbnN0IHBlcm1pc3Npb25TdG9yZSA9IHVzZVBlcm1pc3Npb25TdG9yZSgpXG5cbmNvbnN0IHJvdXRlcnMgPSBjb21wdXRlZCgoKSA9PiBwZXJtaXNzaW9uU3RvcmUuZ2V0Um91dGVycylcblxuY29uc3QgdGFnc1ZpZXdTdG9yZSA9IHVzZVRhZ3NWaWV3U3RvcmUoKVxuXG5jb25zdCB2aXNpdGVkVmlld3MgPSBjb21wdXRlZCgoKSA9PiB0YWdzVmlld1N0b3JlLmdldFZpc2l0ZWRWaWV3cylcblxuY29uc3QgYWZmaXhUYWdBcnIgPSByZWY8Um91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXT4oW10pXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG5jb25zdCB0YWdzVmlld0ljb24gPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUYWdzVmlld0ljb24pXG5cbi8vIOWIneWni+WMlnRhZ1xuY29uc3QgaW5pdFRhZ3MgPSAoKSA9PiB7XG4gIGFmZml4VGFnQXJyLnZhbHVlID0gZmlsdGVyQWZmaXhUYWdzKHVucmVmKHJvdXRlcnMpKVxuICBmb3IgKGNvbnN0IHRhZyBvZiB1bnJlZihhZmZpeFRhZ0FycikpIHtcbiAgICAvLyBNdXN0IGhhdmUgdGFnIG5hbWVcbiAgICBpZiAodGFnLm5hbWUpIHtcbiAgICAgIHRhZ3NWaWV3U3RvcmUuYWRkVmlzaXRlZFZpZXcodGFnKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzZWxlY3RlZFRhZyA9IHJlZjxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4oKVxuXG4vLyDmlrDlop50YWdcbmNvbnN0IGFkZFRhZ3MgPSAoKSA9PiB7XG4gIGNvbnN0IHsgbmFtZSB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICBpZiAobmFtZSkge1xuICAgIHNlbGVjdGVkVGFnLnZhbHVlID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgIHRhZ3NWaWV3U3RvcmUuYWRkVmlldyh1bnJlZihjdXJyZW50Um91dGUpKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyDlhbPpl63pgInkuK3nmoR0YWdcbmNvbnN0IGNsb3NlU2VsZWN0ZWRUYWcgPSAodmlldzogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpID0+IHtcbiAgaWYgKHZpZXc/Lm1ldGE/LmFmZml4KSByZXR1cm5cbiAgdGFnc1ZpZXdTdG9yZS5kZWxWaWV3KHZpZXcpXG4gIGlmIChpc0FjdGl2ZSh2aWV3KSkge1xuICAgIHRvTGFzdFZpZXcoKVxuICB9XG59XG5cbi8vIOWFs+mXreWFqOmDqFxuY29uc3QgY2xvc2VBbGxUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbEFsbFZpZXdzKClcbiAgdG9MYXN0VmlldygpXG59XG5cbi8vIOWFs+mXreWFtuS7llxuY29uc3QgY2xvc2VPdGhlcnNUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbE90aGVyc1ZpZXdzKHVucmVmKHNlbGVjdGVkVGFnKSBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZClcbn1cblxuLy8g6YeN5paw5Yqg6L29XG5jb25zdCByZWZyZXNoU2VsZWN0ZWRUYWcgPSBhc3luYyAodmlldz86IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSA9PiB7XG4gIGlmICghdmlldykgcmV0dXJuXG4gIHRhZ3NWaWV3U3RvcmUuZGVsQ2FjaGVkVmlldygpXG4gIGNvbnN0IHsgcGF0aCwgcXVlcnkgfSA9IHZpZXdcbiAgYXdhaXQgbmV4dFRpY2soKVxuICByZXBsYWNlKHtcbiAgICBwYXRoOiAnL3JlZGlyZWN0JyArIHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pXG59XG5cbi8vIOWFs+mXreW3puS+p1xuY29uc3QgY2xvc2VMZWZ0VGFncyA9ICgpID0+IHtcbiAgdGFnc1ZpZXdTdG9yZS5kZWxMZWZ0Vmlld3ModW5yZWYoc2VsZWN0ZWRUYWcpIGFzIFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKVxufVxuXG4vLyDlhbPpl63lj7PkvqdcbmNvbnN0IGNsb3NlUmlnaHRUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbFJpZ2h0Vmlld3ModW5yZWYoc2VsZWN0ZWRUYWcpIGFzIFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKVxufVxuXG4vLyDot7PovazliLDmnIDlkI7kuIDkuKpcbmNvbnN0IHRvTGFzdFZpZXcgPSAoKSA9PiB7XG4gIGNvbnN0IHZpc2l0ZWRWaWV3cyA9IHRhZ3NWaWV3U3RvcmUuZ2V0VmlzaXRlZFZpZXdzXG4gIGNvbnN0IGxhdGVzdFZpZXcgPSB2aXNpdGVkVmlld3Muc2xpY2UoLTEpWzBdXG4gIGlmIChsYXRlc3RWaWV3KSB7XG4gICAgcHVzaChsYXRlc3RWaWV3KVxuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIHVucmVmKGN1cnJlbnRSb3V0ZSkucGF0aCA9PT0gcGVybWlzc2lvblN0b3JlLmdldEFkZFJvdXRlcnNbMF0ucGF0aCB8fFxuICAgICAgdW5yZWYoY3VycmVudFJvdXRlKS5wYXRoID09PSBwZXJtaXNzaW9uU3RvcmUuZ2V0QWRkUm91dGVyc1swXS5yZWRpcmVjdFxuICAgICkge1xuICAgICAgYWRkVGFncygpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gWW91IGNhbiBzZXQgYW5vdGhlciByb3V0ZVxuICAgIHB1c2gocGVybWlzc2lvblN0b3JlLmdldEFkZFJvdXRlcnNbMF0ucGF0aClcbiAgfVxufVxuXG4vLyDmu5rliqjliLDpgInkuK3nmoR0YWdcbmNvbnN0IG1vdmVUb0N1cnJlbnRUYWcgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IG5leHRUaWNrKClcbiAgZm9yIChjb25zdCB2IG9mIHVucmVmKHZpc2l0ZWRWaWV3cykpIHtcbiAgICBpZiAodi5mdWxsUGF0aCA9PT0gdW5yZWYoY3VycmVudFJvdXRlKS5wYXRoKSB7XG4gICAgICBtb3ZlVG9UYXJnZXQodilcbiAgICAgIGlmICh2LmZ1bGxQYXRoICE9PSB1bnJlZihjdXJyZW50Um91dGUpLmZ1bGxQYXRoKSB7XG4gICAgICAgIHRhZ3NWaWV3U3RvcmUudXBkYXRlVmlzaXRlZFZpZXcodW5yZWYoY3VycmVudFJvdXRlKSlcbiAgICAgIH1cblxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgdGFnTGlua3NSZWZzID0gdXNlVGVtcGxhdGVSZWZzTGlzdDxSb3V0ZXJMaW5rUHJvcHM+KClcblxuY29uc3QgbW92ZVRvVGFyZ2V0ID0gKGN1cnJlbnRUYWc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSA9PiB7XG4gIGNvbnN0IHdyYXAkID0gdW5yZWYoc2Nyb2xsYmFyUmVmKT8ud3JhcCRcbiAgbGV0IGZpcnN0VGFnOiBOdWxsYWJsZTxSb3V0ZXJMaW5rUHJvcHM+ID0gbnVsbFxuICBsZXQgbGFzdFRhZzogTnVsbGFibGU8Um91dGVyTGlua1Byb3BzPiA9IG51bGxcblxuICBjb25zdCB0YWdMaXN0ID0gdW5yZWYodGFnTGlua3NSZWZzKVxuICAvLyBmaW5kIGZpcnN0IHRhZyBhbmQgbGFzdCB0YWdcbiAgaWYgKHRhZ0xpc3QubGVuZ3RoID4gMCkge1xuICAgIGZpcnN0VGFnID0gdGFnTGlzdFswXVxuICAgIGxhc3RUYWcgPSB0YWdMaXN0W3RhZ0xpc3QubGVuZ3RoIC0gMV1cbiAgfVxuICBpZiAoKGZpcnN0VGFnPy50byBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkuZnVsbFBhdGggPT09IGN1cnJlbnRUYWcuZnVsbFBhdGgpIHtcbiAgICAvLyDnm7TmjqXmu5rliqjliLAw55qE5L2N572uXG4gICAgY29uc3QgeyBzdGFydCB9ID0gdXNlU2Nyb2xsVG8oe1xuICAgICAgZWw6IHdyYXAkISxcbiAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICB0bzogMCxcbiAgICAgIGR1cmF0aW9uOiA1MDBcbiAgICB9KVxuICAgIHN0YXJ0KClcbiAgfSBlbHNlIGlmICgobGFzdFRhZz8udG8gYXMgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpLmZ1bGxQYXRoID09PSBjdXJyZW50VGFnLmZ1bGxQYXRoKSB7XG4gICAgLy8g5rua5Yqo5Yiw5pyA5ZCO55qE5L2N572uXG4gICAgY29uc3QgeyBzdGFydCB9ID0gdXNlU2Nyb2xsVG8oe1xuICAgICAgZWw6IHdyYXAkISxcbiAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICB0bzogd3JhcCQhLnNjcm9sbFdpZHRoIC0gd3JhcCQhLm9mZnNldFdpZHRoLFxuICAgICAgZHVyYXRpb246IDUwMFxuICAgIH0pXG4gICAgc3RhcnQoKVxuICB9IGVsc2Uge1xuICAgIC8vIGZpbmQgcHJlVGFnIGFuZCBuZXh0VGFnXG4gICAgY29uc3QgY3VycmVudEluZGV4OiBudW1iZXIgPSB0YWdMaXN0LmZpbmRJbmRleChcbiAgICAgIChpdGVtKSA9PiAoaXRlbT8udG8gYXMgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpLmZ1bGxQYXRoID09PSBjdXJyZW50VGFnLmZ1bGxQYXRoXG4gICAgKVxuICAgIGNvbnN0IHRnc1JlZnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGAke3ByZWZpeENsc31fX2l0ZW1gKVxuXG4gICAgY29uc3QgcHJldlRhZyA9IHRnc1JlZnNbY3VycmVudEluZGV4IC0gMV0gYXMgSFRNTEVsZW1lbnRcbiAgICBjb25zdCBuZXh0VGFnID0gdGdzUmVmc1tjdXJyZW50SW5kZXggKyAxXSBhcyBIVE1MRWxlbWVudFxuXG4gICAgLy8gdGhlIHRhZydzIG9mZnNldExlZnQgYWZ0ZXIgb2YgbmV4dFRhZ1xuICAgIGNvbnN0IGFmdGVyTmV4dFRhZ09mZnNldExlZnQgPSBuZXh0VGFnLm9mZnNldExlZnQgKyBuZXh0VGFnLm9mZnNldFdpZHRoICsgNFxuXG4gICAgLy8gdGhlIHRhZydzIG9mZnNldExlZnQgYmVmb3JlIG9mIHByZXZUYWdcbiAgICBjb25zdCBiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCA9IHByZXZUYWcub2Zmc2V0TGVmdCAtIDRcblxuICAgIGlmIChhZnRlck5leHRUYWdPZmZzZXRMZWZ0ID4gdW5yZWYoc2Nyb2xsTGVmdE51bWJlcikgKyB3cmFwJCEub2Zmc2V0V2lkdGgpIHtcbiAgICAgIGNvbnN0IHsgc3RhcnQgfSA9IHVzZVNjcm9sbFRvKHtcbiAgICAgICAgZWw6IHdyYXAkISxcbiAgICAgICAgcG9zaXRpb246ICdzY3JvbGxMZWZ0JyxcbiAgICAgICAgdG86IGFmdGVyTmV4dFRhZ09mZnNldExlZnQgLSB3cmFwJCEub2Zmc2V0V2lkdGgsXG4gICAgICAgIGR1cmF0aW9uOiA1MDBcbiAgICAgIH0pXG4gICAgICBzdGFydCgpXG4gICAgfSBlbHNlIGlmIChiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCA8IHVucmVmKHNjcm9sbExlZnROdW1iZXIpKSB7XG4gICAgICBjb25zdCB7IHN0YXJ0IH0gPSB1c2VTY3JvbGxUbyh7XG4gICAgICAgIGVsOiB3cmFwJCEsXG4gICAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICAgIHRvOiBiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCxcbiAgICAgICAgZHVyYXRpb246IDUwMFxuICAgICAgfSlcbiAgICAgIHN0YXJ0KClcbiAgICB9XG4gIH1cbn1cblxuLy8g5piv5ZCm5piv5b2T5YmNdGFnXG5jb25zdCBpc0FjdGl2ZSA9IChyb3V0ZTogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHJvdXRlLnBhdGggPT09IHVucmVmKGN1cnJlbnRSb3V0ZSkucGF0aFxufVxuXG4vLyDmiYDmnInlj7PplK7oj5zljZXnu4Tku7bnmoTlhYPntKBcbmNvbnN0IGl0ZW1SZWZzID0gdXNlVGVtcGxhdGVSZWZzTGlzdDxDb21wb25lbnRSZWY8dHlwZW9mIENvbnRleHRNZW51ICYgQ29udGV4dE1lbnVFeHBvc2U+PigpXG5cbi8vIOWPs+mUruiPnOWNleijheWhq+aUueWPmOeahOaXtuWAmVxuY29uc3QgdmlzaWJsZUNoYW5nZSA9ICh2aXNpYmxlOiBib29sZWFuLCB0YWdJdGVtOiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkgPT4ge1xuICBpZiAodmlzaWJsZSkge1xuICAgIGZvciAoY29uc3QgdiBvZiB1bnJlZihpdGVtUmVmcykpIHtcbiAgICAgIGNvbnN0IGVsRHJvcGRvd25NZW51UmVmID0gdi5lbERyb3Bkb3duTWVudVJlZlxuICAgICAgaWYgKHRhZ0l0ZW0uZnVsbFBhdGggIT09IHYudGFnSXRlbS5mdWxsUGF0aCkge1xuICAgICAgICBlbERyb3Bkb3duTWVudVJlZj8uaGFuZGxlQ2xvc2UoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBlbHNjcm9sbCDlrp7kvotcbmNvbnN0IHNjcm9sbGJhclJlZiA9IHJlZjxDb21wb25lbnRSZWY8dHlwZW9mIEVsU2Nyb2xsYmFyPj4oKVxuXG4vLyDkv53lrZjmu5rliqjkvY3nva5cbmNvbnN0IHNjcm9sbExlZnROdW1iZXIgPSByZWYoMClcblxuY29uc3Qgc2Nyb2xsID0gKHsgc2Nyb2xsTGVmdCB9KSA9PiB7XG4gIHNjcm9sbExlZnROdW1iZXIudmFsdWUgPSBzY3JvbGxMZWZ0IGFzIG51bWJlclxufVxuXG4vLyDnp7vliqjliLDmn5DkuKrkvY3nva5cbmNvbnN0IG1vdmUgPSAodG86IG51bWJlcikgPT4ge1xuICBjb25zdCB3cmFwJCA9IHVucmVmKHNjcm9sbGJhclJlZik/LndyYXAkXG4gIGNvbnN0IHsgc3RhcnQgfSA9IHVzZVNjcm9sbFRvKHtcbiAgICBlbDogd3JhcCQhLFxuICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgdG86IHVucmVmKHNjcm9sbExlZnROdW1iZXIpICsgdG8sXG4gICAgZHVyYXRpb246IDUwMFxuICB9KVxuICBzdGFydCgpXG59XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGluaXRUYWdzKClcbiAgYWRkVGFncygpXG59KVxuXG53YXRjaChcbiAgKCkgPT4gY3VycmVudFJvdXRlLnZhbHVlLFxuICAoKSA9PiB7XG4gICAgYWRkVGFncygpXG4gICAgbW92ZVRvQ3VycmVudFRhZygpXG4gIH1cbilcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXZcbiAgICA6aWQ9XCJwcmVmaXhDbHNcIlxuICAgIDpjbGFzcz1cInByZWZpeENsc1wiXG4gICAgY2xhc3M9XCJmbGV4IHctZnVsbCByZWxhdGl2ZSBiZy1bI2ZmZl0gZGFyazpiZy1bdmFyKC0tZWwtYmctY29sb3IpXVwiXG4gID5cbiAgICA8c3BhblxuICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgY2xhc3M9XCJ3LVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gaC1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIHRleHQtY2VudGVyIGxlYWRpbmctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlclwiXG4gICAgICBAY2xpY2s9XCJtb3ZlKC0yMDApXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiZXA6ZC1hcnJvdy1sZWZ0XCJcbiAgICAgICAgOmNvbG9yPVwiYXBwU3RvcmUuZ2V0SXNEYXJrID8gJ3ZhcigtLWVsLXRleHQtY29sb3ItcmVndWxhciknIDogJyMzMzMnXCJcbiAgICAgIC8+XG4gICAgPC9zcGFuPlxuICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvdy1oaWRkZW4gZmxleC0xXCI+XG4gICAgICA8RWxTY3JvbGxiYXIgcmVmPVwic2Nyb2xsYmFyUmVmXCIgY2xhc3M9XCJoLWZ1bGxcIiBAc2Nyb2xsPVwic2Nyb2xsXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGgtZnVsbFwiPlxuICAgICAgICAgIDxDb250ZXh0TWVudVxuICAgICAgICAgICAgOnJlZj1cIml0ZW1SZWZzLnNldFwiXG4gICAgICAgICAgICA6c2NoZW1hPVwiW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246c3luYy1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5yZWxvYWQnKSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogc2VsZWN0ZWRUYWc/LmZ1bGxQYXRoICE9PSBpdGVtLmZ1bGxQYXRoLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hTZWxlY3RlZFRhZyhpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlVGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/Lm1ldGEuYWZmaXgsXG4gICAgICAgICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY2xvc2VTZWxlY3RlZFRhZyhpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtcmlnaHQtb3V0bGluZWQnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VUaGVMZWZ0VGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAoaXRlbS5mdWxsUGF0aCA9PT0gdmlzaXRlZFZpZXdzWzBdLmZ1bGxQYXRoIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnPy5mdWxsUGF0aCAhPT0gaXRlbS5mdWxsUGF0aCksXG4gICAgICAgICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY2xvc2VMZWZ0VGFncygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtbGVmdC1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZVRoZVJpZ2h0VGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAoaXRlbS5mdWxsUGF0aCA9PT0gdmlzaXRlZFZpZXdzW3Zpc2l0ZWRWaWV3cy5sZW5ndGggLSAxXS5mdWxsUGF0aCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZz8uZnVsbFBhdGggIT09IGl0ZW0uZnVsbFBhdGgpLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlUmlnaHRUYWdzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXZpZGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOnRhZy1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZU90aGVyJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHNlbGVjdGVkVGFnPy5mdWxsUGF0aCAhPT0gaXRlbS5mdWxsUGF0aCxcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjbG9zZU90aGVyc1RhZ3MoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmxpbmUtb3V0bGluZWQnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VBbGwnKSxcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjbG9zZUFsbFRhZ3MoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVwiXG4gICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gdmlzaXRlZFZpZXdzXCJcbiAgICAgICAgICAgIDprZXk9XCJpdGVtLmZ1bGxQYXRoXCJcbiAgICAgICAgICAgIDp0YWctaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgOmNsYXNzPVwiW1xuICAgICAgICAgICAgICBgJHtwcmVmaXhDbHN9X19pdGVtYCxcbiAgICAgICAgICAgICAgaXRlbT8ubWV0YT8uYWZmaXggPyBgJHtwcmVmaXhDbHN9X19pdGVtLS1hZmZpeGAgOiAnJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdpcy1hY3RpdmUnOiBpc0FjdGl2ZShpdGVtKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXCJcbiAgICAgICAgICAgIEB2aXNpYmxlLWNoYW5nZT1cInZpc2libGVDaGFuZ2VcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6cmVmPVwidGFnTGlua3NSZWZzLnNldFwiIDp0bz1cInsgLi4uaXRlbSB9XCIgY3VzdG9tIHYtc2xvdD1cInsgbmF2aWdhdGUgfVwiPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIEBjbGljaz1cIm5hdmlnYXRlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaC1mdWxsIGZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHdoaXRlc3BhY2Utbm93cmFwIHBsLTE1cHhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgIHYtaWY9XCJcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtPy5tYXRjaGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgaXRlbT8ubWF0Y2hlZFsxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW0/Lm1hdGNoZWRbMV0/Lm1ldGE/Lmljb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICB0YWdzVmlld0ljb25cbiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgOmljb249XCJpdGVtPy5tYXRjaGVkWzFdPy5tZXRhPy5pY29uXCJcbiAgICAgICAgICAgICAgICAgICAgOnNpemU9XCIxMlwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibXItNXB4XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICB7eyB0KGl0ZW0/Lm1ldGE/LnRpdGxlIGFzIHN0cmluZykgfX1cbiAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cImAke3ByZWZpeENsc31fX2l0ZW0tLWNsb3NlYFwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiIzMzM1wiXG4gICAgICAgICAgICAgICAgICAgIGljb249XCJhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgOnNpemU9XCIxMlwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50LnN0b3A9XCJjbG9zZVNlbGVjdGVkVGFnKGl0ZW0pXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0NvbnRleHRNZW51PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgPC9kaXY+XG4gICAgPHNwYW5cbiAgICAgIDpjbGFzcz1cImAke3ByZWZpeENsc31fX3Rvb2xgXCJcbiAgICAgIGNsYXNzPVwidy1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIGgtW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSB0ZXh0LWNlbnRlciBsZWFkaW5nLVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgQGNsaWNrPVwibW92ZSgyMDApXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiZXA6ZC1hcnJvdy1yaWdodFwiXG4gICAgICAgIDpjb2xvcj1cImFwcFN0b3JlLmdldElzRGFyayA/ICd2YXIoLS1lbC10ZXh0LWNvbG9yLXJlZ3VsYXIpJyA6ICcjMzMzJ1wiXG4gICAgICAvPlxuICAgIDwvc3Bhbj5cbiAgICA8c3BhblxuICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgY2xhc3M9XCJ3LVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gaC1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIHRleHQtY2VudGVyIGxlYWRpbmctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlclwiXG4gICAgICBAY2xpY2s9XCJyZWZyZXNoU2VsZWN0ZWRUYWcoc2VsZWN0ZWRUYWcpXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiYW50LWRlc2lnbjpyZWxvYWQtb3V0bGluZWRcIlxuICAgICAgICA6Y29sb3I9XCJhcHBTdG9yZS5nZXRJc0RhcmsgPyAndmFyKC0tZWwtdGV4dC1jb2xvci1yZWd1bGFyKScgOiAnIzMzMydcIlxuICAgICAgLz5cbiAgICA8L3NwYW4+XG4gICAgPENvbnRleHRNZW51XG4gICAgICB0cmlnZ2VyPVwiY2xpY2tcIlxuICAgICAgOnNjaGVtYT1cIltcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOnN5bmMtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24ucmVsb2FkJyksXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGVkVGFnKHNlbGVjdGVkVGFnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkJyxcbiAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlVGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/Lm1ldGEuYWZmaXhcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtcmlnaHQtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VUaGVMZWZ0VGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/LmZ1bGxQYXRoID09PSB2aXNpdGVkVmlld3NbMF0uZnVsbFBhdGgsXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VMZWZ0VGFncygpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtbGVmdC1vdXRsaW5lZCcsXG4gICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZVRoZVJpZ2h0VGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICBzZWxlY3RlZFRhZz8uZnVsbFBhdGggPT09IHZpc2l0ZWRWaWV3c1t2aXNpdGVkVmlld3MubGVuZ3RoIC0gMV0uZnVsbFBhdGgsXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VSaWdodFRhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dGFnLW91dGxpbmVkJyxcbiAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlT3RoZXInKSxcbiAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICBjbG9zZU90aGVyc1RhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmxpbmUtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VBbGwnKSxcbiAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICBjbG9zZUFsbFRhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVwiXG4gICAgPlxuICAgICAgPHNwYW5cbiAgICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgICBjbGFzcz1cInctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBoLVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gdGV4dC1jZW50ZXIgbGVhZGluZy1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIGN1cnNvci1wb2ludGVyIGJsb2NrXCJcbiAgICAgID5cbiAgICAgICAgPEljb25cbiAgICAgICAgICBpY29uPVwiYW50LWRlc2lnbjpzZXR0aW5nLW91dGxpbmVkXCJcbiAgICAgICAgICA6Y29sb3I9XCJhcHBTdG9yZS5nZXRJc0RhcmsgPyAndmFyKC0tZWwtdGV4dC1jb2xvci1yZWd1bGFyKScgOiAnIzMzMydcIlxuICAgICAgICAvPlxuICAgICAgPC9zcGFuPlxuICAgIDwvQ29udGV4dE1lbnU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuQHByZWZpeC1jbHM6IH4nQHtuYW1lc3BhY2V9LXRhZ3Mtdmlldyc7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LXNjcm9sbGJhcl9fdmlldykge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuXG4gICZfX3Rvb2wge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICY6aG92ZXIge1xuICAgICAgOmRlZXAoc3Bhbikge1xuICAgICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3ItYmxhY2spICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJjphZnRlciB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDFweDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogY2FsYyh+JzEwMCUgLSAxcHgnKTtcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHZhcigtLXRhZ3Mtdmlldy1ib3JkZXItY29sb3IpO1xuICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS10YWdzLXZpZXctYm9yZGVyLWNvbG9yKTtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgIH1cbiAgfVxuXG4gICZfX2l0ZW0gKyAmX19pdGVtIHtcbiAgICBtYXJnaW4tbGVmdDogNHB4O1xuICB9XG5cbiAgJl9faXRlbSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMnB4O1xuICAgIGhlaWdodDogY2FsYyh+JzEwMCUgLSA0cHgnKTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2Q5ZDlkOTtcblxuICAgICYtLWNsb3NlIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgcmlnaHQ6IDVweDtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcbiAgICB9XG4gICAgJjpub3QoLkB7cHJlZml4LWNsc31fX2l0ZW0tLWFmZml4KTpob3ZlciB7XG4gICAgICAuQHtwcmVmaXgtY2xzfV9faXRlbS0tY2xvc2Uge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX19pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gICAgfVxuICB9XG5cbiAgJl9faXRlbS5pcy1hY3RpdmUge1xuICAgIGNvbG9yOiB2YXIoLS1lbC1jb2xvci13aGl0ZSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gICAgLkB7cHJlZml4LWNsc31fX2l0ZW0tLWNsb3NlIHtcbiAgICAgIDpkZWVwKHNwYW4pIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXdoaXRlKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4uZGFyayB7XG4gIC5Ae3ByZWZpeC1jbHN9IHtcbiAgICAmX190b29sIHtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICA6ZGVlcChzcGFuKSB7XG4gICAgICAgICAgY29sb3I6ICNmZmYgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tZWwtYm9yZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1lbC1ib3JkZXItY29sb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2l0ZW0ge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdG9wOiAycHg7XG4gICAgICBoZWlnaHQ6IGNhbGMoficxMDAlIC0gNHB4Jyk7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZWwtYm9yZGVyLWNvbG9yKTtcbiAgICB9XG5cbiAgICAmX19pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2l0ZW0uaXMtYWN0aXZlIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1lbC1jb2xvci13aGl0ZSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbC1jb2xvci1wcmltYXJ5KTtcbiAgICAgIC5Ae3ByZWZpeC1jbHN9X19pdGVtLS1jbG9zZSB7XG4gICAgICAgIDpkZWVwKHNwYW4pIHtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3Itd2hpdGUpICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIG9uTW91bnRlZCwgdW5yZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2xvZ28nKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuXG5jb25zdCB0aXRsZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldFRpdGxlKVxuXG5jb25zdCBsYXlvdXQgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMYXlvdXQpXG5cbmNvbnN0IGNvbGxhcHNlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Q29sbGFwc2UpXG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGlmICh1bnJlZihjb2xsYXBzZSkpIHNob3cudmFsdWUgPSBmYWxzZVxufSlcblxud2F0Y2goXG4gICgpID0+IGNvbGxhcHNlLnZhbHVlLFxuICAoY29sbGFwc2U6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAodW5yZWYobGF5b3V0KSA9PT0gJ3RvcExlZnQnIHx8IHVucmVmKGxheW91dCkgPT09ICdjdXRNZW51Jykge1xuICAgICAgc2hvdy52YWx1ZSA9IHRydWVcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIWNvbGxhcHNlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2hvdy52YWx1ZSA9ICFjb2xsYXBzZVxuICAgICAgfSwgNDAwKVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG93LnZhbHVlID0gIWNvbGxhcHNlXG4gICAgfVxuICB9XG4pXG5cbndhdGNoKFxuICAoKSA9PiBsYXlvdXQudmFsdWUsXG4gIChsYXlvdXQpID0+IHtcbiAgICBpZiAobGF5b3V0ID09PSAndG9wJyB8fCBsYXlvdXQgPT09ICdjdXRNZW51Jykge1xuICAgICAgc2hvdy52YWx1ZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHVucmVmKGNvbGxhcHNlKSkge1xuICAgICAgICBzaG93LnZhbHVlID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3cudmFsdWUgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG4pXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8cm91dGVyLWxpbmtcbiAgICA6Y2xhc3M9XCJbXG4gICAgICBwcmVmaXhDbHMsXG4gICAgICBsYXlvdXQgIT09ICdjbGFzc2ljJyA/IGAke3ByZWZpeENsc31fX1RvcGAgOiAnJyxcbiAgICAgICdmbGV4ICFoLVt2YXIoLS1sb2dvLWhlaWdodCldIGl0ZW1zLWNlbnRlciBjdXJzb3ItcG9pbnRlciBwbC04cHggcmVsYXRpdmUnLFxuICAgICAgJ2Rhcms6YmctW3ZhcigtLWVsLWJnLWNvbG9yKV0nXG4gICAgXVwiXG4gICAgdG89XCIvXCJcbiAgPlxuICAgIDxpbWdcbiAgICAgIHNyYz1cIkAvYXNzZXRzL2ltZ3MvbG9nby5wbmdcIlxuICAgICAgY2xhc3M9XCJ3LVtjYWxjKHZhcigtLWxvZ28taGVpZ2h0KS0xMHB4KV0gaC1bY2FsYyh2YXIoLS1sb2dvLWhlaWdodCktMTBweCldXCJcbiAgICAvPlxuICAgIDxkaXZcbiAgICAgIHYtaWY9XCJzaG93XCJcbiAgICAgIDpjbGFzcz1cIltcbiAgICAgICAgJ21sLTEwcHggdGV4dC0xNnB4IGZvbnQtNzAwJyxcbiAgICAgICAge1xuICAgICAgICAgICd0ZXh0LVt2YXIoLS1sb2dvLXRpdGxlLXRleHQtY29sb3IpXSc6IGxheW91dCA9PT0gJ2NsYXNzaWMnLFxuICAgICAgICAgICd0ZXh0LVt2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXSc6XG4gICAgICAgICAgICBsYXlvdXQgPT09ICd0b3BMZWZ0JyB8fCBsYXlvdXQgPT09ICd0b3AnIHx8IGxheW91dCA9PT0gJ2N1dE1lbnUnXG4gICAgICAgIH1cbiAgICAgIF1cIlxuICAgID5cbiAgICAgIHt7IHRpdGxlIH19XG4gICAgPC9kaXY+XG4gIDwvcm91dGVyLWxpbms+XG48L3RlbXBsYXRlPlxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdmb290ZXInKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3QgdGl0bGUgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUaXRsZSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXZcbiAgICA6Y2xhc3M9XCJwcmVmaXhDbHNcIlxuICAgIGNsYXNzPVwidGV4dC1jZW50ZXIgdGV4dC1bdmFyKC0tZWwtdGV4dC1jb2xvci1wbGFjZWhvbGRlcildIGJnLVt2YXIoLS1hcHAtY29udG5ldC1iZy1jb2xvcildIGgtW3ZhcigtLWFwcC1mb290ZXItaGVpZ2h0KV0gbGVhZGluZy1bdmFyKC0tYXBwLWZvb3Rlci1oZWlnaHQpXSBkYXJrOmJnLVt2YXIoLS1lbC1iZy1jb2xvcildXCJcbiAgPlxuICAgIENvcHlyaWdodCDCqTIwMjEtcHJlc2VudCB7eyB0aXRsZSB9fVxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgdXNlVGFnc1ZpZXdTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy90YWdzVmlldydcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJ0AvY29tcG9uZW50cy9Gb290ZXInXG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbmNvbnN0IGxheW91dCA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldExheW91dClcblxuY29uc3QgZml4ZWRIZWFkZXIgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRGaXhlZEhlYWRlcilcblxuY29uc3QgZm9vdGVyID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Rm9vdGVyKVxuXG5jb25zdCB0YWdzVmlld1N0b3JlID0gdXNlVGFnc1ZpZXdTdG9yZSgpXG5cbmNvbnN0IGdldENhY2hlcyA9IGNvbXB1dGVkKCgpOiBzdHJpbmdbXSA9PiB7XG4gIHJldHVybiB0YWdzVmlld1N0b3JlLmdldENhY2hlZFZpZXdzXG59KVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPHNlY3Rpb25cbiAgICA6Y2xhc3M9XCJbXG4gICAgICAncC1bdmFyKC0tYXBwLWNvbnRlbnQtcGFkZGluZyldIHctWzEwMCVdIGJnLVt2YXIoLS1hcHAtY29udG5ldC1iZy1jb2xvcildIGRhcms6YmctW3ZhcigtLWVsLWJnLWNvbG9yKV0nLFxuICAgICAge1xuICAgICAgICAnIW1pbi1oLVtjYWxjKDEwMCUtdmFyKC0tYXBwLWZvb3Rlci1oZWlnaHQpKV0nOlxuICAgICAgICAgIGZpeGVkSGVhZGVyICYmIChsYXlvdXQgPT09ICdjbGFzc2ljJyB8fCBsYXlvdXQgPT09ICd0b3BMZWZ0JykgJiYgZm9vdGVyLFxuXG4gICAgICAgICchbWluLWgtW2NhbGMoMTAwJS12YXIoLS10YWdzLXZpZXctaGVpZ2h0KS12YXIoLS10b3AtdG9vbC1oZWlnaHQpLXZhcigtLWFwcC1mb290ZXItaGVpZ2h0KSldJzpcbiAgICAgICAgICAoKCFmaXhlZEhlYWRlciAmJiBsYXlvdXQgPT09ICdjbGFzc2ljJykgfHwgbGF5b3V0ID09PSAndG9wJykgJiYgZm9vdGVyLFxuXG4gICAgICAgICchbWluLWgtW2NhbGMoMTAwJS12YXIoLS10YWdzLXZpZXctaGVpZ2h0KS12YXIoLS1hcHAtZm9vdGVyLWhlaWdodCkpXSc6XG4gICAgICAgICAgIWZpeGVkSGVhZGVyICYmIGxheW91dCA9PT0gJ3RvcExlZnQnICYmIGZvb3RlcixcblxuICAgICAgICAnIW1pbi1oLVtjYWxjKDEwMCUtdmFyKC0tdG9wLXRvb2wtaGVpZ2h0KSldJzogZml4ZWRIZWFkZXIgJiYgbGF5b3V0ID09PSAnY3V0TWVudScgJiYgZm9vdGVyLFxuXG4gICAgICAgICchbWluLWgtW2NhbGMoMTAwJS12YXIoLS10b3AtdG9vbC1oZWlnaHQpLXZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0nOlxuICAgICAgICAgICFmaXhlZEhlYWRlciAmJiBsYXlvdXQgPT09ICdjdXRNZW51JyAmJiBmb290ZXJcbiAgICAgIH1cbiAgICBdXCJcbiAgPlxuICAgIDxyb3V0ZXItdmlldz5cbiAgICAgIDx0ZW1wbGF0ZSAjZGVmYXVsdD1cInsgQ29tcG9uZW50LCByb3V0ZSB9XCI+XG4gICAgICAgIDxrZWVwLWFsaXZlIDppbmNsdWRlPVwiZ2V0Q2FjaGVzXCI+XG4gICAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJDb21wb25lbnRcIiA6a2V5PVwicm91dGUuZnVsbFBhdGhcIiAvPlxuICAgICAgICA8L2tlZXAtYWxpdmU+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvcm91dGVyLXZpZXc+XG4gIDwvc2VjdGlvbj5cbiAgPEZvb3RlciB2LWlmPVwiZm9vdGVyXCIgLz5cbjwvdGVtcGxhdGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuLy8gaW1wb3J0IHsgY29tcHV0ZWQsIHVucmVmIH0gZnJvbSAndnVlJ1xuLy8gaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgcHJvcFR5cGVzIH0gZnJvbSAnQC91dGlscy9wcm9wVHlwZXMnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2NvbGxhcHNlJylcblxuZGVmaW5lUHJvcHMoe1xuICBjb2xvcjogcHJvcFR5cGVzLnN0cmluZy5kZWYoJycpXG59KVxuXG4vLyBjb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuLy8gY29uc3QgY29sbGFwc2UgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRDb2xsYXBzZSlcblxuLy8gY29uc3QgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4vLyAgIGNvbnN0IGNvbGxhcHNlZCA9IHVucmVmKGNvbGxhcHNlKVxuLy8gICBhcHBTdG9yZS5zZXRDb2xsYXBzZSghY29sbGFwc2VkKVxuLy8gfVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiA6Y2xhc3M9XCJwcmVmaXhDbHNcIj5cbiAgICA8IS0tIEljb25cbiAgICAgIDpzaXplPVwiMThcIlxuICAgICAgOmljb249XCJjb2xsYXBzZSA/ICdhbnQtZGVzaWduOm1lbnUtdW5mb2xkLW91dGxpbmVkJyA6ICdhbnQtZGVzaWduOm1lbnUtZm9sZC1vdXRsaW5lZCdcIlxuICAgICAgOmNvbG9yPVwiY29sb3JcIlxuICAgICAgY2xhc3M9XCJjdXJzb3ItcG9pbnRlclwiXG4gICAgICBAY2xpY2s9XCJ0b2dnbGVDb2xsYXBzZVwiXG4gICAgLyAtLT5cbiAgICA8aW1nIHNyYz1cIkAvYXNzZXRzL2ltZ3MvbG9nby5wbmdcIiBhbHQ9XCJcIiBjbGFzcz1cInctMThweCBoLTE4cHggbXItMThweFwiIC8+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IEVsRHJvcGRvd24sIEVsRHJvcGRvd25NZW51LCBFbERyb3Bkb3duSXRlbSB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VJMThuJ1xuaW1wb3J0IHsgcHJvcFR5cGVzIH0gZnJvbSAnQC91dGlscy9wcm9wVHlwZXMnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3NpemUtZHJvcGRvd24nKVxuXG5kZWZpbmVQcm9wcyh7XG4gIGNvbG9yOiBwcm9wVHlwZXMuc3RyaW5nLmRlZignJylcbn0pXG5cbmNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG5jb25zdCBzaXplTWFwID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuc2l6ZU1hcClcblxuY29uc3Qgc2V0Q3VycmVudFNpemUgPSAoc2l6ZTogRWxlbWVtdFBsdXNTaXplKSA9PiB7XG4gIGFwcFN0b3JlLnNldEN1cnJlbnRTaXplKHNpemUpXG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8RWxEcm9wZG93biA6Y2xhc3M9XCJwcmVmaXhDbHNcIiB0cmlnZ2VyPVwiY2xpY2tcIiBAY29tbWFuZD1cInNldEN1cnJlbnRTaXplXCI+XG4gICAgPEljb24gOnNpemU9XCIxOFwiIGljb249XCJtZGk6Zm9ybWF0LXNpemVcIiA6Y29sb3I9XCJjb2xvclwiIGNsYXNzPVwiY3Vyc29yLXBvaW50ZXJcIiAvPlxuICAgIDx0ZW1wbGF0ZSAjZHJvcGRvd24+XG4gICAgICA8RWxEcm9wZG93bk1lbnU+XG4gICAgICAgIDxFbERyb3Bkb3duSXRlbSB2LWZvcj1cIml0ZW0gaW4gc2l6ZU1hcFwiIDprZXk9XCJpdGVtXCIgOmNvbW1hbmQ9XCJpdGVtXCI+XG4gICAgICAgICAge3sgdChgc2l6ZS4ke2l0ZW19YCkgfX1cbiAgICAgICAgPC9FbERyb3Bkb3duSXRlbT5cbiAgICAgIDwvRWxEcm9wZG93bk1lbnU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9FbERyb3Bkb3duPlxuPC90ZW1wbGF0ZT5cbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBFbERyb3Bkb3duLCBFbERyb3Bkb3duTWVudSwgRWxEcm9wZG93bkl0ZW0sIEVsTWVzc2FnZUJveCB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VJMThuJ1xuaW1wb3J0IHsgdXNlQ2FjaGUgfSBmcm9tICdAL2hvb2tzL3dlYi91c2VDYWNoZSdcbmltcG9ydCB7IHJlc2V0Um91dGVyIH0gZnJvbSAnQC9yb3V0ZXInXG5pbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IHsgbG9naW5PdXRBcGkgfSBmcm9tICdAL2FwaS9sb2dpbidcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB7IHVzZVRhZ3NWaWV3U3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvdGFnc1ZpZXcnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZVdpdGhPdXQgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlV2l0aE91dCgpXG5cbmNvbnN0IHRhZ3NWaWV3U3RvcmUgPSB1c2VUYWdzVmlld1N0b3JlKClcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndXNlci1pbmZvJylcblxuY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuY29uc3QgeyB3c0NhY2hlIH0gPSB1c2VDYWNoZSgpXG5cbmNvbnN0IHsgcmVwbGFjZSB9ID0gdXNlUm91dGVyKClcblxuY29uc3QgdXNlckluZm8gPSB3c0NhY2hlLmdldChhcHBTdG9yZS5nZXRVc2VySW5mbylcblxuY29uc3QgZnVsbFVzZXJOYW1lID0gdXNlckluZm8uZW1haWxcblxuY29uc3QgdXNlck5hbWUgPSBmdWxsVXNlck5hbWUuc3BsaXQoJ0AnKVswXVxuXG5sZXQgYXZhID0gJ2F2YXRhci5qcGcnXG5pZiAodXNlck5hbWUgPT0gJ2FkbWluJykge1xuICBhdmEgPSAnYWRtaW4uanBnJ1xufVxuXG4vLyBjb25zb2xlLmxvZygndXNlckluZm89PT09PScsIHVzZXJJbmZvKVxuXG5jb25zdCBsb2dpbk91dCA9ICgpID0+IHtcbiAgRWxNZXNzYWdlQm94LmNvbmZpcm0odCgnY29tbW9uLmxvZ2luT3V0TWVzc2FnZScpLCB0KCdjb21tb24ucmVtaW5kZXInKSwge1xuICAgIGNvbmZpcm1CdXR0b25UZXh0OiB0KCdjb21tb24ub2snKSxcbiAgICBjYW5jZWxCdXR0b25UZXh0OiB0KCdjb21tb24uY2FuY2VsJyksXG4gICAgdHlwZTogJ3dhcm5pbmcnXG4gIH0pXG4gICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgbG9naW5PdXRBcGkoKS5jYXRjaCgoKSA9PiB7fSlcbiAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgd3NDYWNoZS5jbGVhcigpXG4gICAgICAgIHRhZ3NWaWV3U3RvcmUuZGVsQWxsVmlld3MoKVxuICAgICAgICByZXNldFJvdXRlcigpIC8vIOmHjee9rumdmeaAgei3r+eUseihqFxuICAgICAgICByZXBsYWNlKCcvbG9naW4nKVxuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHt9KVxufVxuXG5jb25zdCB0b0RvY3VtZW50ID0gKCkgPT4ge1xuICB3aW5kb3cub3BlbignaHR0cHM6Ly9naXRodWIuY29tL0hhcnZleS1TcGVjdGVyL3BsdW5nZV91aScpXG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8RWxEcm9wZG93biA6Y2xhc3M9XCJwcmVmaXhDbHNcIiB0cmlnZ2VyPVwiY2xpY2tcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cbiAgICAgIDxpbWdcbiAgICAgICAgOnNyYz1cIidzcmMvYXNzZXRzL2ltZ3MvJyArIGF2YVwiXG4gICAgICAgIGFsdD1cIlwiXG4gICAgICAgIGNsYXNzPVwidy1bY2FsYyh2YXIoLS1sb2dvLWhlaWdodCktMjVweCldIHJvdW5kZWQtWzUwJV1cIlxuICAgICAgLz5cbiAgICAgIDxzcGFuIGNsYXNzPVwiPGxnOmhpZGRlbiB0ZXh0LTE0cHggcGwtWzVweF0gdGV4dC1bdmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKV1cIj57e1xuICAgICAgICB1c2VyTmFtZVxuICAgICAgfX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICAgPHRlbXBsYXRlICNkcm9wZG93bj5cbiAgICAgIDxFbERyb3Bkb3duTWVudT5cbiAgICAgICAgPEVsRHJvcGRvd25JdGVtPlxuICAgICAgICAgIDxkaXYgQGNsaWNrPVwidG9Eb2N1bWVudFwiPnt7IHQoJ3N0b2NrLnByb2REb2MnKSB9fTwvZGl2PlxuICAgICAgICA8L0VsRHJvcGRvd25JdGVtPlxuICAgICAgICA8RWxEcm9wZG93bkl0ZW0gZGl2aWRlZD5cbiAgICAgICAgICA8ZGl2IEBjbGljaz1cImxvZ2luT3V0XCI+e3sgdCgnY29tbW9uLmxvZ2luT3V0JykgfX08L2Rpdj5cbiAgICAgICAgPC9FbERyb3Bkb3duSXRlbT5cbiAgICAgIDwvRWxEcm9wZG93bk1lbnU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9FbERyb3Bkb3duPlxuPC90ZW1wbGF0ZT5cbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBFbEJ1dHRvbiB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VJMThuJ1xuaW1wb3J0IHsgdXNlUm91dGVyLCBSb3V0ZVJlY29yZFJhdyB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG4vLyBpbXBvcnQgeyB1c2VDYWNoZSB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUNhY2hlJ1xuLy8gaW1wb3J0IHsgcmVzZXRSb3V0ZXIgfSBmcm9tICdAL3JvdXRlcidcbi8vIGltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG4vLyBpbXBvcnQgeyBsb2dpbk91dEFwaSB9IGZyb20gJ0AvYXBpL2xvZ2luJ1xuLy8gaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuLy8gaW1wb3J0IHsgdXNlVGFnc1ZpZXdTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy90YWdzVmlldydcbi8vIGltcG9ydCB7IHVzZUFwcFN0b3JlV2l0aE91dCB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5cbi8vIGNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmVXaXRoT3V0KClcblxuLy8gY29uc3QgdGFnc1ZpZXdTdG9yZSA9IHVzZVRhZ3NWaWV3U3RvcmUoKVxuXG4vLyBjb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuLy8gY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd1c2VyLWluZm8nKVxuXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxuXG4vLyBjb25zdCB7IHdzQ2FjaGUgfSA9IHVzZUNhY2hlKClcblxuLy8gY29uc3QgdXNlckluZm8gPSB3c0NhY2hlLmdldChhcHBTdG9yZS5nZXRVc2VySW5mbylcblxuLy8gY29uc3QgZnVsbFVzZXJOYW1lID0gdXNlckluZm8uZW1haWxcblxuLy8gY29uc3QgdXNlck5hbWUgPSBmdWxsVXNlck5hbWUuc3BsaXQoJ0AnKVswXVxuXG4vLyBjb25zb2xlLmxvZygndXNlckluZm89PT09PScsIHVzZXJJbmZvKVxuXG5jb25zdCB7IHB1c2ggfSA9IHVzZVJvdXRlcigpXG5sZXQgcm91dGVyID0gdXNlUm91dGVyKClcblxuY29uc3Qgb3BlblRyYXNoID0gKCkgPT4ge1xuICBsZXQgdXJsID0gJy9zdG9jay9TdG9ja0xpc3QnXG4gIGxldCBxdWVyeVBhcmFtID0ge1xuICAgIGRlbDogMVxuICAgIC8vIGNvZGU6IHJvdy5jb2RlLnJlcGxhY2UoLyAvZywgJycpXG4gIH1cbiAgbGV0IHI6IFJvdXRlUmVjb3JkUmF3ID0ge1xuICAgIHBhdGg6IHVybCxcbiAgICBjb21wb25lbnQ6ICgpID0+IGltcG9ydCgnQC92aWV3cy9TdG9jay9TdG9ja0xpc3QudnVlJyksXG4gICAgbmFtZTogJ1N0b2NrTGlzdERlbCcsXG4gICAgbWV0YToge1xuICAgICAgdGl0bGU6IHQoJ3N0b2NrLnRyYXNoJyksXG4gICAgICBicmVhZGNydW1iOiB0cnVlXG4gICAgfVxuICB9XG4gIHJvdXRlci5hZGRSb3V0ZSgnR3JvdXAnLCByKVxuICBwdXNoKHsgcGF0aDogdXJsLCBxdWVyeTogcXVlcnlQYXJhbSB9KVxufVxuXG5jb25zdCBvcGVuSW5kdXN0cnkgPSAoKSA9PiB7XG4gIGxldCB1cmwgPSAnL2luZHVzdHJ5L2luZGV4J1xuICBwdXNoKHsgcGF0aDogdXJsIH0pXG59XG5cbmNvbnN0IG9wZW5Hcm91cExpc3QgPSAoKSA9PiB7XG4gIGxldCB1cmwgPSAnL2dyb3VwL2luZGV4J1xuICBwdXNoKHsgcGF0aDogdXJsIH0pXG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8RWxCdXR0b24gcGxhaW4gdHlwZT1cIlwiIEBjbGljaz1cIm9wZW5Hcm91cExpc3RcIiBzaXplPVwic21hbGxcIiBsaW5rPnt7XG4gICAgdCgnc3RvY2suZ3JvdXBMaXN0JylcbiAgfX08L0VsQnV0dG9uPlxuICA8IS0tIEVsQnV0dG9uIHBsYWluIHR5cGU9XCJcIiBAY2xpY2s9XCJvcGVuSW5kdXN0cnlcIiBzaXplPVwic21hbGxcIiBsaW5rPnt7XG4gICAgdCgnc3RvY2suc2V0Q2FsYycpXG4gIH19PC9FbEJ1dHRvbiAtLT5cbiAgPEVsQnV0dG9uIHBsYWluIHR5cGU9XCJcIiBAY2xpY2s9XCJvcGVuSW5kdXN0cnlcIiBzaXplPVwic21hbGxcIiBsaW5rPnt7XG4gICAgdCgnc3RvY2suaW5kdXN0cnlfc2VjdG9yJylcbiAgfX08L0VsQnV0dG9uPlxuICA8RWxCdXR0b24gcGxhaW4gdHlwZT1cIlwiIEBjbGljaz1cIm9wZW5UcmFzaFwiIHNpemU9XCJzbWFsbFwiIGxpbms+e3sgdCgnc3RvY2sudHJhc2gnKSB9fTwvRWxCdXR0b24+XG48L3RlbXBsYXRlPlxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IEljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCB7IHVzZUZ1bGxzY3JlZW4gfSBmcm9tICdAdnVldXNlL2NvcmUnXG5pbXBvcnQgeyBwcm9wVHlwZXMgfSBmcm9tICdAL3V0aWxzL3Byb3BUeXBlcydcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnc2NyZWVuZnVsbCcpXG5cbmRlZmluZVByb3BzKHtcbiAgY29sb3I6IHByb3BUeXBlcy5zdHJpbmcuZGVmKCcnKVxufSlcblxuY29uc3QgeyB0b2dnbGUsIGlzRnVsbHNjcmVlbiB9ID0gdXNlRnVsbHNjcmVlbigpXG5cbmNvbnN0IHRvZ2dsZUZ1bGxzY3JlZW4gPSAoKSA9PiB7XG4gIHRvZ2dsZSgpXG59XG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IDpjbGFzcz1cInByZWZpeENsc1wiIEBjbGljaz1cInRvZ2dsZUZ1bGxzY3JlZW5cIj5cbiAgICA8SWNvblxuICAgICAgOnNpemU9XCIxOFwiXG4gICAgICA6aWNvbj1cImlzRnVsbHNjcmVlbiA/ICd6bWRpOmZ1bGxzY3JlZW4tZXhpdCcgOiAnem1kaTpmdWxsc2NyZWVuJ1wiXG4gICAgICA6Y29sb3I9XCJjb2xvclwiXG4gICAgLz5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuIiwiaW1wb3J0IHsgcGF0aFJlc29sdmUgfSBmcm9tICdAL3V0aWxzL3JvdXRlckhlbHBlcidcbmltcG9ydCB0eXBlIHsgUm91dGVNZXRhIH0gZnJvbSAndnVlLXJvdXRlcidcblxuZXhwb3J0IGNvbnN0IGZpbHRlckJyZWFkY3J1bWIgPSAoXG4gIHJvdXRlczogQXBwUm91dGVSZWNvcmRSYXdbXSxcbiAgcGFyZW50UGF0aCA9ICcnXG4pOiBBcHBSb3V0ZVJlY29yZFJhd1tdID0+IHtcbiAgY29uc3QgcmVzOiBBcHBSb3V0ZVJlY29yZFJhd1tdID0gW11cblxuICBmb3IgKGNvbnN0IHJvdXRlIG9mIHJvdXRlcykge1xuICAgIGNvbnN0IG1ldGEgPSByb3V0ZT8ubWV0YSBhcyBSb3V0ZU1ldGFcbiAgICBpZiAobWV0YS5oaWRkZW4gJiYgIW1ldGEuc2hvd01haW5Sb3V0ZSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhOiBBcHBSb3V0ZVJlY29yZFJhdyA9XG4gICAgICAhbWV0YS5hbHdheXNTaG93ICYmIHJvdXRlLmNoaWxkcmVuPy5sZW5ndGggPT09IDFcbiAgICAgICAgPyB7IC4uLnJvdXRlLmNoaWxkcmVuWzBdLCBwYXRoOiBwYXRoUmVzb2x2ZShyb3V0ZS5wYXRoLCByb3V0ZS5jaGlsZHJlblswXS5wYXRoKSB9XG4gICAgICAgIDogeyAuLi5yb3V0ZSB9XG5cbiAgICBkYXRhLnBhdGggPSBwYXRoUmVzb2x2ZShwYXJlbnRQYXRoLCBkYXRhLnBhdGgpXG5cbiAgICBpZiAoZGF0YS5jaGlsZHJlbikge1xuICAgICAgZGF0YS5jaGlsZHJlbiA9IGZpbHRlckJyZWFkY3J1bWIoZGF0YS5jaGlsZHJlbiwgZGF0YS5wYXRoKVxuICAgIH1cbiAgICBpZiAoZGF0YSkge1xuICAgICAgcmVzLnB1c2goZGF0YSlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBFbEJyZWFkY3J1bWIsIEVsQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyByZWYsIHdhdGNoLCBjb21wdXRlZCwgdW5yZWYsIGRlZmluZUNvbXBvbmVudCwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAndnVlLXJvdXRlcidcbmltcG9ydCB7IHVzZVBlcm1pc3Npb25TdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9wZXJtaXNzaW9uJ1xuaW1wb3J0IHsgZmlsdGVyQnJlYWRjcnVtYiB9IGZyb20gJy4vaGVscGVyJ1xuaW1wb3J0IHsgZmlsdGVyLCB0cmVlVG9MaXN0IH0gZnJvbSAnQC91dGlscy90cmVlJ1xuaW1wb3J0IHR5cGUgeyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCwgUm91dGVNZXRhIH0gZnJvbSAndnVlLXJvdXRlcidcbmltcG9ydCB7IHVzZUkxOG4gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VJMThuJ1xuaW1wb3J0IHsgSWNvbiB9IGZyb20gJ0AvY29tcG9uZW50cy9JY29uJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdicmVhZGNydW1iJylcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbi8vIOmdouWMheWxkeWbvuagh1xuY29uc3QgYnJlYWRjcnVtYkljb24gPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRCcmVhZGNydW1iSWNvbilcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ0JyZWFkY3J1bWInLFxuICBzZXR1cCgpIHtcbiAgICBjb25zdCB7IGN1cnJlbnRSb3V0ZSB9ID0gdXNlUm91dGVyKClcblxuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG5cbiAgICBjb25zdCBsZXZlbExpc3QgPSByZWY8QXBwUm91dGVSZWNvcmRSYXdbXT4oW10pXG5cbiAgICBjb25zdCBwZXJtaXNzaW9uU3RvcmUgPSB1c2VQZXJtaXNzaW9uU3RvcmUoKVxuXG4gICAgY29uc3QgbWVudVJvdXRlcnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgICBjb25zdCByb3V0ZXJzID0gcGVybWlzc2lvblN0b3JlLmdldFJvdXRlcnNcbiAgICAgIHJldHVybiBmaWx0ZXJCcmVhZGNydW1iKHJvdXRlcnMpXG4gICAgfSlcblxuICAgIGNvbnN0IGdldEJyZWFkY3J1bWIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50UGF0aCA9IGN1cnJlbnRSb3V0ZS52YWx1ZS5wYXRoXG5cbiAgICAgIGxldmVsTGlzdC52YWx1ZSA9IGZpbHRlcjxBcHBSb3V0ZVJlY29yZFJhdz4odW5yZWYobWVudVJvdXRlcnMpLCAobm9kZTogQXBwUm91dGVSZWNvcmRSYXcpID0+IHtcbiAgICAgICAgcmV0dXJuIG5vZGUucGF0aCA9PT0gY3VycmVudFBhdGhcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyQnJlYWRjcnVtYiA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGJyZWFkY3J1bWJMaXN0ID0gdHJlZVRvTGlzdDxBcHBSb3V0ZVJlY29yZFJhd1tdPih1bnJlZihsZXZlbExpc3QpKVxuICAgICAgcmV0dXJuIGJyZWFkY3J1bWJMaXN0Lm1hcCgodikgPT4ge1xuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IHYucmVkaXJlY3QgPT09ICdub3JlZGlyZWN0J1xuICAgICAgICBjb25zdCBtZXRhID0gdi5tZXRhIGFzIFJvdXRlTWV0YVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxFbEJyZWFkY3J1bWJJdGVtIHRvPXt7IHBhdGg6IGRpc2FibGVkID8gJycgOiB2LnBhdGggfX0ga2V5PXt2Lm5hbWV9PlxuICAgICAgICAgICAge21ldGE/Lmljb24gJiYgYnJlYWRjcnVtYkljb24udmFsdWUgPyAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPEljb24gaWNvbj17bWV0YS5pY29ufSBjbGFzcz1cIm1yLVs1cHhdXCI+PC9JY29uPiB7dCh2Py5tZXRhPy50aXRsZSl9XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgdCh2Py5tZXRhPy50aXRsZSlcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9FbEJyZWFkY3J1bWJJdGVtPlxuICAgICAgICApXG4gICAgICB9KVxuICAgIH1cblxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gY3VycmVudFJvdXRlLnZhbHVlLFxuICAgICAgKHJvdXRlOiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkgPT4ge1xuICAgICAgICBpZiAocm91dGUucGF0aC5zdGFydHNXaXRoKCcvcmVkaXJlY3QvJykpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBnZXRCcmVhZGNydW1iKClcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGltbWVkaWF0ZTogdHJ1ZVxuICAgICAgfVxuICAgIClcblxuICAgIHJldHVybiAoKSA9PiAoXG4gICAgICA8RWxCcmVhZGNydW1iIHNlcGFyYXRvcj1cIi9cIiBjbGFzcz17YCR7cHJlZml4Q2xzfSBmbGV4IGl0ZW1zLWNlbnRlciBoLWZ1bGwgbWwtWzEwcHhdYH0+XG4gICAgICAgIDxUcmFuc2l0aW9uR3JvdXAgYXBwZWFyIGVudGVyLWFjdGl2ZS1jbGFzcz1cImFuaW1hdGVfX2FuaW1hdGVkIGFuaW1hdGVfX2ZhZGVJblJpZ2h0XCI+XG4gICAgICAgICAge3JlbmRlckJyZWFkY3J1bWIoKX1cbiAgICAgICAgPC9UcmFuc2l0aW9uR3JvdXA+XG4gICAgICA8L0VsQnJlYWRjcnVtYj5cbiAgICApXG4gIH1cbn0pXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuQHByZWZpeC1jbHM6IH4nQHtlbE5hbWVzcGFjZX0tYnJlYWRjcnVtYic7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgOmRlZXAoJl9faXRlbSkge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgLkB7cHJlZml4LWNsc31fX2lubmVyIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgY29sb3I6IHZhcigtLXRvcC1oZWFkZXItdGV4dC1jb2xvcik7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgOmRlZXAoJl9faXRlbSk6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgLkB7cHJlZml4LWNsc31fX2lubmVyIHtcbiAgICAgIGNvbG9yOiB2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpO1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIDpkZWVwKCZfX2l0ZW0pOmxhc3QtY2hpbGQge1xuICAgIC5Ae3ByZWZpeC1jbHN9X19pbm5lciB7XG4gICAgICBjb2xvcjogdmFyKC0tZWwtdGV4dC1jb2xvci1wbGFjZWhvbGRlcik7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBjb2xvcjogdmFyKC0tZWwtdGV4dC1jb2xvci1wbGFjZWhvbGRlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tICdAL2NvbXBvbmVudHMvQ29sbGFwc2UnXG5pbXBvcnQgeyBMb2NhbGVEcm9wZG93biB9IGZyb20gJ0AvY29tcG9uZW50cy9Mb2NhbGVEcm9wZG93bidcbmltcG9ydCB7IFNpemVEcm9wZG93biB9IGZyb20gJ0AvY29tcG9uZW50cy9TaXplRHJvcGRvd24nXG5pbXBvcnQgeyBVc2VySW5mbyB9IGZyb20gJ0AvY29tcG9uZW50cy9Vc2VySW5mbydcbmltcG9ydCB7IEhlYWRCdXR0b25zIH0gZnJvbSAnQC9jb21wb25lbnRzL0hlYWRCdXR0b25zJ1xuXG5pbXBvcnQgeyBTY3JlZW5mdWxsIH0gZnJvbSAnQC9jb21wb25lbnRzL1NjcmVlbmZ1bGwnXG5pbXBvcnQgeyBCcmVhZGNydW1iIH0gZnJvbSAnQC9jb21wb25lbnRzL0JyZWFkY3J1bWInXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cblxuY29uc3QgeyBnZXRQcmVmaXhDbHMsIHZhcmlhYmxlcyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCd0b29sLWhlYWRlcicpXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4vLyDpnaLljIXlsZFcbmNvbnN0IGJyZWFkY3J1bWIgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRCcmVhZGNydW1iKVxuXG4vLyDmipjlj6Dlm77moIdcbmNvbnN0IGhhbWJ1cmdlciA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldEhhbWJ1cmdlcilcblxuLy8g5YWo5bGP5Zu+5qCHXG5jb25zdCBzY3JlZW5mdWxsID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0U2NyZWVuZnVsbClcblxuLy8g5bC65a+45Zu+5qCHXG5jb25zdCBzaXplID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0U2l6ZSlcblxuLy8g5biD5bGAXG5jb25zdCBsYXlvdXQgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMYXlvdXQpXG5cbi8vIOWkmuivreiogOWbvuagh1xuY29uc3QgbG9jYWxlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0TG9jYWxlKVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVG9vbEhlYWRlcicsXG4gIHNldHVwKCkge1xuICAgIHJldHVybiAoKSA9PiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGlkPXtgJHt2YXJpYWJsZXMubmFtZXNwYWNlfS10b29sLWhlYWRlcmB9XG4gICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgcHJlZml4Q2xzLFxuICAgICAgICAgICdoLVt2YXIoLS10b3AtdG9vbC1oZWlnaHQpXSByZWxhdGl2ZSBweC1bdmFyKC0tdG9wLXRvb2wtcC14KV0gZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuJyxcbiAgICAgICAgICAnZGFyazpiZy1bdmFyKC0tZWwtYmctY29sb3IpXSdcbiAgICAgICAgXX1cbiAgICAgID5cbiAgICAgICAge2xheW91dC52YWx1ZSAhPT0gJ3RvcCcgPyAoXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImgtZnVsbCBmbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAge2hhbWJ1cmdlci52YWx1ZSAmJiBsYXlvdXQudmFsdWUgIT09ICdjdXRNZW51JyA/IChcbiAgICAgICAgICAgICAgPENvbGxhcHNlIGNsYXNzPVwiaG92ZXItdGlnZ2VyXCIgY29sb3I9XCJ2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXCI+PC9Db2xsYXBzZT5cbiAgICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICB7YnJlYWRjcnVtYi52YWx1ZSA/IDxCcmVhZGNydW1iIGNsYXNzPVwiPG1kOmhpZGRlblwiPjwvQnJlYWRjcnVtYj4gOiB1bmRlZmluZWR9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJoLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXJcIj5cblxuICAgICAgICA8SGVhZEJ1dHRvbnMgY2xhc3M9XCJob3Zlci10aWdnZXJcIiBjb2xvcj1cInZhcigtLXRvcC1oZWFkZXItdGV4dC1jb2xvcilcIj48L0hlYWRCdXR0b25zPlxuXG4gICAgICAgICAge3NjcmVlbmZ1bGwudmFsdWUgPyAoXG4gICAgICAgICAgICA8U2NyZWVuZnVsbCBjbGFzcz1cImhvdmVyLXRpZ2dlclwiIGNvbG9yPVwidmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKVwiPjwvU2NyZWVuZnVsbD5cbiAgICAgICAgICApIDogdW5kZWZpbmVkfVxuICAgICAgICAgIHtzaXplLnZhbHVlID8gKFxuICAgICAgICAgICAgPFNpemVEcm9wZG93biBjbGFzcz1cImhvdmVyLXRpZ2dlclwiIGNvbG9yPVwidmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKVwiPjwvU2l6ZURyb3Bkb3duPlxuICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAge2xvY2FsZS52YWx1ZSA/IChcbiAgICAgICAgICAgIDxMb2NhbGVEcm9wZG93blxuICAgICAgICAgICAgICBjbGFzcz1cImhvdmVyLXRpZ2dlclwiXG4gICAgICAgICAgICAgIGNvbG9yPVwidmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKVwiXG4gICAgICAgICAgICA+PC9Mb2NhbGVEcm9wZG93bj5cbiAgICAgICAgICApIDogdW5kZWZpbmVkfVxuICAgICAgICAgIDxVc2VySW5mbyBjbGFzcz1cImhvdmVyLXRpZ2dlclwiPjwvVXNlckluZm8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59KVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD5cbkBwcmVmaXgtY2xzOiB+J0B7bmFtZXNwYWNlfS10b29sLWhlYWRlcic7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgdHJhbnNpdGlvbjogbGVmdCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1xufVxuPC9zdHlsZT5cbiIsImltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgTWVudSB9IGZyb20gJ0AvY29tcG9uZW50cy9NZW51J1xuaW1wb3J0IHsgVGFiTWVudSB9IGZyb20gJ0AvY29tcG9uZW50cy9UYWJNZW51J1xuaW1wb3J0IHsgVGFnc1ZpZXcgfSBmcm9tICdAL2NvbXBvbmVudHMvVGFnc1ZpZXcnXG5pbXBvcnQgeyBMb2dvIH0gZnJvbSAnQC9jb21wb25lbnRzL0xvZ28nXG5pbXBvcnQgQXBwVmlldyBmcm9tICcuL0FwcFZpZXcudnVlJ1xuaW1wb3J0IFRvb2xIZWFkZXIgZnJvbSAnLi9Ub29sSGVhZGVyLnZ1ZSdcbmltcG9ydCB7IEVsU2Nyb2xsYmFyIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdsYXlvdXQnKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3QgcGFnZUxvYWRpbmcgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRQYWdlTG9hZGluZylcblxuLy8g5qCH562+6aG1XG5jb25zdCB0YWdzVmlldyA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldFRhZ3NWaWV3KVxuXG4vLyDoj5zljZXmipjlj6BcbmNvbnN0IGNvbGxhcHNlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Q29sbGFwc2UpXG5cbi8vIGxvZ29cbmNvbnN0IGxvZ28gPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5sb2dvKVxuXG4vLyDlm7rlrprlpLTpg6hcbmNvbnN0IGZpeGVkSGVhZGVyID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Rml4ZWRIZWFkZXIpXG5cbi8vIOaYr+WQpuaYr+enu+WKqOerr1xuY29uc3QgbW9iaWxlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0TW9iaWxlKVxuXG5leHBvcnQgY29uc3QgdXNlUmVuZGVyTGF5b3V0ID0gKCkgPT4ge1xuICBjb25zdCByZW5kZXJDbGFzc2ljID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIlxuICAgICAgICAgIGNsYXNzPXtbJ2Fic29sdXRlIHRvcC0wIGxlZnQtMCBoLWZ1bGwnLCB7ICchZml4ZWQgei0zMDAwJzogbW9iaWxlLnZhbHVlIH1dfVxuICAgICAgICA+XG4gICAgICAgICAge2xvZ28udmFsdWUgPyAoXG4gICAgICAgICAgICA8TG9nb1xuICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICdiZy1bdmFyKC0tbGVmdC1tZW51LWJnLWNvbG9yKV0gYm9yZGVyLWJvdHRvbS0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLWxvZ28tYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAnIXBsLTAnOiBtb2JpbGUudmFsdWUgJiYgY29sbGFwc2UudmFsdWUsXG4gICAgICAgICAgICAgICAgICAndy1bdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCldJzogYXBwU3RvcmUuZ2V0Q29sbGFwc2UsXG4gICAgICAgICAgICAgICAgICAndy1bdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCldJzogIWFwcFN0b3JlLmdldENvbGxhcHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgICAgICA+PC9Mb2dvPlxuICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAgPE1lbnUgY2xhc3M9e1t7ICchaC1bY2FsYygxMDAlLXZhcigtLWxvZ28taGVpZ2h0KSldJzogbG9nby52YWx1ZSB9XX0+PC9NZW51PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICBgJHtwcmVmaXhDbHN9LWNvbnRlbnRgLFxuICAgICAgICAgICAgJ2Fic29sdXRlIHRvcC0wIGgtWzEwMCVdJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWluLXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgY29sbGFwc2UudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSAmJiAhbW9iaWxlLnZhbHVlLFxuICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpKV0gbGVmdC1bdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAhY29sbGFwc2UudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSAmJiAhbW9iaWxlLnZhbHVlLFxuICAgICAgICAgICAgICAnZml4ZWQgIXctZnVsbCAhbGVmdC0wJzogbW9iaWxlLnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXX1cbiAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgID5cbiAgICAgICAgICA8RWxTY3JvbGxiYXJcbiAgICAgICAgICAgIHYtbG9hZGluZz17cGFnZUxvYWRpbmcudmFsdWV9XG4gICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICBgJHtwcmVmaXhDbHN9LWNvbnRlbnQtc2Nyb2xsYmFyYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICchaC1bY2FsYygxMDAlLXZhcigtLXRvcC10b29sLWhlaWdodCktdmFyKC0tdGFncy12aWV3LWhlaWdodCkpXSBtdC1bY2FsYyh2YXIoLS10b3AtdG9vbC1oZWlnaHQpK3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0nOlxuICAgICAgICAgICAgICAgICAgZml4ZWRIZWFkZXIudmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJ2ZpeGVkIHRvcC0wIGxlZnQtMCB6LTEwJzogZml4ZWRIZWFkZXIudmFsdWUsXG4gICAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpKV0gbGVmdC1bdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSxcblxuICAgICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgICAgICFjb2xsYXBzZS52YWx1ZSAmJiBmaXhlZEhlYWRlci52YWx1ZSAmJiAhbW9iaWxlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgJyF3LWZ1bGwgIWxlZnQtMCc6IG1vYmlsZS52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8VG9vbEhlYWRlciBjbGFzcz1cImJvcmRlci1ib3R0b20tMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS10b3AtdG9vbC1ib3JkZXItY29sb3IpXSBiZy1bdmFyKC0tdG9wLWhlYWRlci1iZy1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXVwiPjwvVG9vbEhlYWRlcj5cblxuICAgICAgICAgICAgICB7dGFnc1ZpZXcudmFsdWUgPyAoXG4gICAgICAgICAgICAgICAgPFRhZ3NWaWV3IGNsYXNzPVwiYm9yZGVyLWJvdHRvbS0xIGJvcmRlci10b3AtMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS10YWdzLXZpZXctYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildXCI+PC9UYWdzVmlldz5cbiAgICAgICAgICAgICAgKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8QXBwVmlldz48L0FwcFZpZXc+XG4gICAgICAgICAgPC9FbFNjcm9sbGJhcj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApXG4gIH1cblxuICBjb25zdCByZW5kZXJUb3BMZWZ0ID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgYmctW3ZhcigtLXRvcC1oZWFkZXItYmctY29sb3IpXSBib3JkZXItYm90dG9tLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdG9wLXRvb2wtYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildXCI+XG4gICAgICAgICAge2xvZ28udmFsdWUgPyA8TG9nbyBjbGFzcz1cImhvdmVyLXRpZ2dlciAhcHItMTVweFwiPjwvTG9nbz4gOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICA8VG9vbEhlYWRlciBjbGFzcz1cImZsZXgtMVwiPjwvVG9vbEhlYWRlcj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhYnNvbHV0ZSB0b3AtW3ZhcigtLWxvZ28taGVpZ2h0KSsxcHhdIGxlZnQtMCB3LWZ1bGwgaC1bY2FsYygxMDAlLTFweC12YXIoLS1sb2dvLWhlaWdodCkpXSBmbGV4XCI+XG4gICAgICAgICAgPE1lbnUgY2xhc3M9XCIhaC1mdWxsXCI+PC9NZW51PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgIGAke3ByZWZpeENsc30tY29udGVudGAsXG4gICAgICAgICAgICAgICdoLVsxMDAlXScsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpKV0gbGVmdC1bdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAgIGNvbGxhcHNlLnZhbHVlLFxuICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCkpXSBsZWZ0LVt2YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKV0nOlxuICAgICAgICAgICAgICAgICAgIWNvbGxhcHNlLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF19XG4gICAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPEVsU2Nyb2xsYmFyXG4gICAgICAgICAgICAgIHYtbG9hZGluZz17cGFnZUxvYWRpbmcudmFsdWV9XG4gICAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgICAgYCR7cHJlZml4Q2xzfS1jb250ZW50LXNjcm9sbGJhcmAsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJyFoLVtjYWxjKDEwMCUtdmFyKC0tdGFncy12aWV3LWhlaWdodCkpXSBtdC1bY2FsYyh2YXIoLS10YWdzLXZpZXctaGVpZ2h0KSldJzpcbiAgICAgICAgICAgICAgICAgICAgZml4ZWRIZWFkZXIudmFsdWUgJiYgdGFnc1ZpZXcudmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0YWdzVmlldy52YWx1ZSA/IChcbiAgICAgICAgICAgICAgICA8VGFnc1ZpZXdcbiAgICAgICAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgICAgICAgICdib3JkZXItYm90dG9tLTEgYm9yZGVyLXRvcC0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLXRhZ3Mtdmlldy1ib3JkZXItY29sb3IpXSBkYXJrOmJvcmRlci1bdmFyKC0tZWwtYm9yZGVyLWNvbG9yKV0nLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgJyFmaXhlZCB0b3AtMCBsZWZ0LTAgei0xMCc6IGZpeGVkSGVhZGVyLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCkpXSBsZWZ0LVt2YXIoLS1sZWZ0LW1lbnUtbWluLXdpZHRoKV0gbXQtW3ZhcigtLWxvZ28taGVpZ2h0KV0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpXSBtdC1bdmFyKC0tbG9nby1oZWlnaHQpXSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAhY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPVwidHJhbnNpdGlvbjogd2lkdGggdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKSwgbGVmdCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgICAgICAgICAgPjwvVGFnc1ZpZXc+XG4gICAgICAgICAgICAgICkgOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgICAgPEFwcFZpZXc+PC9BcHBWaWV3PlxuICAgICAgICAgICAgPC9FbFNjcm9sbGJhcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApXG4gIH1cblxuICBjb25zdCByZW5kZXJUb3AgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gYmctW3ZhcigtLXRvcC1oZWFkZXItYmctY29sb3IpXSBib3JkZXItYm90dG9tLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdG9wLXRvb2wtYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildXCI+XG4gICAgICAgICAge2xvZ28udmFsdWUgPyA8TG9nbyBjbGFzcz1cImhvdmVyLXRpZ2dlclwiPjwvTG9nbz4gOiB1bmRlZmluZWR9XG4gICAgICAgICAgPE1lbnUgY2xhc3M9XCJmbGV4LTEgcHgtMTBweCBoLVt2YXIoLS10b3AtdG9vbC1oZWlnaHQpXVwiPjwvTWVudT5cbiAgICAgICAgICA8VG9vbEhlYWRlcj48L1Rvb2xIZWFkZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPXtbYCR7cHJlZml4Q2xzfS1jb250ZW50YCwgJ2gtZnVsbCB3LWZ1bGwnXX0+XG4gICAgICAgICAgPEVsU2Nyb2xsYmFyXG4gICAgICAgICAgICB2LWxvYWRpbmc9e3BhZ2VMb2FkaW5nLnZhbHVlfVxuICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgYCR7cHJlZml4Q2xzfS1jb250ZW50LXNjcm9sbGJhcmAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnbXQtW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSc6IGZpeGVkSGVhZGVyLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3RhZ3NWaWV3LnZhbHVlID8gKFxuICAgICAgICAgICAgICA8VGFnc1ZpZXdcbiAgICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICAgJ2JvcmRlci1ib3R0b20tMSBib3JkZXItdG9wLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdGFncy12aWV3LWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXScsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICchZml4ZWQgdy1mdWxsIHRvcC1bdmFyKC0tdG9wLXRvb2wtaGVpZ2h0KV0gbGVmdC0wJzogZml4ZWRIZWFkZXIudmFsdWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgIHN0eWxlPVwidHJhbnNpdGlvbjogd2lkdGggdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKSwgbGVmdCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgICAgICAgID48L1RhZ3NWaWV3PlxuICAgICAgICAgICAgKSA6IHVuZGVmaW5lZH1cblxuICAgICAgICAgICAgPEFwcFZpZXc+PC9BcHBWaWV3PlxuICAgICAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyQ3V0TWVudSA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGJnLVt2YXIoLS10b3AtaGVhZGVyLWJnLWNvbG9yKV0gYm9yZGVyLWJvdHRvbS0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLXRvcC10b29sLWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXVwiPlxuICAgICAgICAgIHtsb2dvLnZhbHVlID8gPExvZ28gY2xhc3M9XCJob3Zlci10aWdnZXIgIXByLTE1cHhcIj48L0xvZ28+IDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgPFRvb2xIZWFkZXIgY2xhc3M9XCJmbGV4LTFcIj48L1Rvb2xIZWFkZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUgdG9wLVt2YXIoLS1sb2dvLWhlaWdodCldIGxlZnQtMCB3LWZ1bGwgaC1bY2FsYygxMDAlLXZhcigtLWxvZ28taGVpZ2h0KSldIGZsZXhcIj5cbiAgICAgICAgICA8VGFiTWVudT48L1RhYk1lbnU+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgYCR7cHJlZml4Q2xzfS1jb250ZW50YCxcbiAgICAgICAgICAgICAgJ2gtWzEwMCVdJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tdGFiLW1lbnUtbWluLXdpZHRoKSldIGxlZnQtW3ZhcigtLXRhYi1tZW51LW1pbi13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAgIGNvbGxhcHNlLnZhbHVlLFxuICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKSldIGxlZnQtW3ZhcigtLXRhYi1tZW51LW1heC13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAgICFjb2xsYXBzZS52YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxFbFNjcm9sbGJhclxuICAgICAgICAgICAgICB2LWxvYWRpbmc9e3BhZ2VMb2FkaW5nLnZhbHVlfVxuICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgIGAke3ByZWZpeENsc30tY29udGVudC1zY3JvbGxiYXJgLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICchaC1bY2FsYygxMDAlLXZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0gbXQtW2NhbGModmFyKC0tdGFncy12aWV3LWhlaWdodCkpXSc6XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkSGVhZGVyLnZhbHVlICYmIHRhZ3NWaWV3LnZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGFnc1ZpZXcudmFsdWUgPyAoXG4gICAgICAgICAgICAgICAgPFRhZ3NWaWV3XG4gICAgICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbS0xIGJvcmRlci10b3AtMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS10YWdzLXZpZXctYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICchZml4ZWQgdG9wLTAgbGVmdC0wIHotMTAnOiBmaXhlZEhlYWRlci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLXRhYi1tZW51LW1pbi13aWR0aCkpXSBsZWZ0LVt2YXIoLS10YWItbWVudS1taW4td2lkdGgpXSBtdC1bdmFyKC0tbG9nby1oZWlnaHQpXSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZS52YWx1ZSAmJiBmaXhlZEhlYWRlci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLXRhYi1tZW51LW1heC13aWR0aCkpXSBsZWZ0LVt2YXIoLS10YWItbWVudS1tYXgtd2lkdGgpXSBtdC1bdmFyKC0tbG9nby1oZWlnaHQpXSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAhY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgIHN0eWxlPVwidHJhbnNpdGlvbjogd2lkdGggdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKSwgbGVmdCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1wiXG4gICAgICAgICAgICAgICAgPjwvVGFnc1ZpZXc+XG4gICAgICAgICAgICAgICkgOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgICAgPEFwcFZpZXc+PC9BcHBWaWV3PlxuICAgICAgICAgICAgPC9FbFNjcm9sbGJhcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbmRlckNsYXNzaWMsXG4gICAgcmVuZGVyVG9wTGVmdCxcbiAgICByZW5kZXJUb3AsXG4gICAgcmVuZGVyQ3V0TWVudVxuICB9XG59XG4iLCI8c2NyaXB0IGxhbmc9XCJ0c3hcIj5cbmltcG9ydCB7IGNvbXB1dGVkLCBkZWZpbmVDb21wb25lbnQsIHVucmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgQmFja3RvcCB9IGZyb20gJ0AvY29tcG9uZW50cy9CYWNrdG9wJ1xuaW1wb3J0IHsgU2V0dGluZyB9IGZyb20gJ0AvY29tcG9uZW50cy9TZXR0aW5nJ1xuaW1wb3J0IHsgdXNlUmVuZGVyTGF5b3V0IH0gZnJvbSAnLi9jb21wb25lbnRzL3VzZVJlbmRlckxheW91dCdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnbGF5b3V0JylcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbi8vIOaYr+WQpuaYr+enu+WKqOerr1xuY29uc3QgbW9iaWxlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0TW9iaWxlKVxuXG4vLyDoj5zljZXmipjlj6BcbmNvbnN0IGNvbGxhcHNlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Q29sbGFwc2UpXG5cbmNvbnN0IGxheW91dCA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldExheW91dClcblxuY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKCkgPT4ge1xuICBhcHBTdG9yZS5zZXRDb2xsYXBzZSh0cnVlKVxufVxuXG5jb25zdCByZW5kZXJMYXlvdXQgPSAoKSA9PiB7XG4gIHN3aXRjaCAodW5yZWYobGF5b3V0KSkge1xuICAgIGNhc2UgJ2NsYXNzaWMnOlxuICAgICAgY29uc3QgeyByZW5kZXJDbGFzc2ljIH0gPSB1c2VSZW5kZXJMYXlvdXQoKVxuICAgICAgcmV0dXJuIHJlbmRlckNsYXNzaWMoKVxuICAgIGNhc2UgJ3RvcExlZnQnOlxuICAgICAgY29uc3QgeyByZW5kZXJUb3BMZWZ0IH0gPSB1c2VSZW5kZXJMYXlvdXQoKVxuICAgICAgcmV0dXJuIHJlbmRlclRvcExlZnQoKVxuICAgIGNhc2UgJ3RvcCc6XG4gICAgICBjb25zdCB7IHJlbmRlclRvcCB9ID0gdXNlUmVuZGVyTGF5b3V0KClcbiAgICAgIHJldHVybiByZW5kZXJUb3AoKVxuICAgIGNhc2UgJ2N1dE1lbnUnOlxuICAgICAgY29uc3QgeyByZW5kZXJDdXRNZW51IH0gPSB1c2VSZW5kZXJMYXlvdXQoKVxuICAgICAgcmV0dXJuIHJlbmRlckN1dE1lbnUoKVxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVha1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdMYXlvdXQnLFxuICBzZXR1cCgpIHtcbiAgICByZXR1cm4gKCkgPT4gKFxuICAgICAgPHNlY3Rpb24gY2xhc3M9e1twcmVmaXhDbHMsIGAke3ByZWZpeENsc31fXyR7bGF5b3V0LnZhbHVlfWAsICd3LVsxMDAlXSBoLVsxMDAlXSByZWxhdGl2ZSddfT5cbiAgICAgICAge21vYmlsZS52YWx1ZSAmJiAhY29sbGFwc2UudmFsdWUgPyAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJhYnNvbHV0ZSB0b3AtMCBsZWZ0LTAgdy1mdWxsIGgtZnVsbCBvcGFjaXR5LTMwIHotOTkgYmctW3ZhcigtLWVsLWNvbG9yLWJsYWNrKV1cIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2tPdXRzaWRlfVxuICAgICAgICAgID48L2Rpdj5cbiAgICAgICAgKSA6IHVuZGVmaW5lZH1cblxuICAgICAgICB7cmVuZGVyTGF5b3V0KCl9XG5cbiAgICAgICAgPEJhY2t0b3A+PC9CYWNrdG9wPlxuXG4gICAgICAgIDxTZXR0aW5nPjwvU2V0dGluZz5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApXG4gIH1cbn0pXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuQHByZWZpeC1jbHM6IH4nQHtuYW1lc3BhY2V9LWxheW91dCc7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYXBwLWNvbnRuZXQtYmctY29sb3IpO1xuICA6ZGVlcCguQHtlbE5hbWVzcGFjZX0tc2Nyb2xsYmFyX192aWV3KSB7XG4gICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIH1cbn1cbjwvc3R5bGU+XG4iXSwiZmlsZSI6ImFzc2V0cy9MYXlvdXQuNGY1YWRiZWYuanMifQ==
