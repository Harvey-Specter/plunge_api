import{P as e,d as t,Y as l,aR as a,r as o,D as n,bf as r,$ as s,ad as i,o as u,h as c,w as d,c as v,a2 as p,g as h,a as m,cx as f,n as g,a0 as b,a4 as w,ac as x,at as _,i as y,a9 as k,cy as C,ae as M,Q as V,b6 as S,ar as I,R as P,ak as $,aD as T,e as z,as as j,t as L,aI as E,aE as A,au as R,c5 as O,c6 as B,aV as N,a6 as D,ax as q,aH as W,s as F,v as H,b0 as G,aF as U,av as Q,aQ as K,G as X,c3 as Y,cz as J,V as Z,W as ee,aa as te,aX as le,E as ae,x as oe,j as ne,k as re,bj as se,cA as ie,cB as ue,b as ce,u as de,m as ve,a3 as pe,bk as he,c0 as me,c7 as fe,cC as ge,cD as be,bh as we,F as xe,cE as _e,cF as ye,B as ke,bQ as Ce,q as Me,cG as Ve,_ as Se,cH as Ie,T as Pe,aO as $e}from"./index.f2e05143.js";import{E as Te,f as ze}from"./el-popper.7090df9f.js";import{a as je,b as Le,f as Ee}from"./tree.b6e955f9.js";import{t as Ae}from"./aria2.b5095a02.js";import{_ as Re}from"./index2.312fa1be.js";import{T as Oe,E as Be}from"./el-button.c85984df.js";import{m as Ne}from"./typescript2.0e462989.js";import{_ as De}from"./plugin-vue_export-helper.21dcd24c.js";import{b as qe,a as We,E as Fe}from"./el-dropdown-item.0651fc7d.js";import{_ as He}from"./logo.32bb2b9e.js";import{a as Ge,_ as Ue}from"./LocaleDropdown.bb0ef4e6.js";import{E as Qe}from"./el-message-box.1514d4cd.js";import"./el-input.2911c078.js";import"./el-overlay.df6b9408.js";import{b as Ke}from"./index.9c9621c0.js";import"./index2.bac0fa94.js";import"./index2.7bbd87c9.js";import"./index2.309e467b.js";import"./refs2.9b43771e.js";import"./el-switch.83e4e4db.js";import"./validator2.6f1987ff.js";import"./event2.1741f333.js";import"./useIcon.9cd4d07c.js";import"./scroll2.dc2faf83.js";import"./vnode2.65b846cb.js";import"./useAxios.5e836160.js";const Xe=function(e){for(const t of e){const e=t.target.__resizeListeners__||[];e.length&&e.forEach((e=>{e()}))}},Ye=e=>e**3,Je=Symbol("breadcrumbKey"),Ze=["onClick"];const et=M(k(t({name:"ElBacktop",props:{visibilityHeight:{type:Number,default:200},target:{type:String,default:""},right:{type:Number,default:40},bottom:{type:Number,default:40}},emits:{click:e=>e instanceof MouseEvent},setup(e,{emit:t}){const k=e,M=l("backtop"),V=a(),S=a(),I=o(!1),P=n((()=>({right:`${k.right}px`,bottom:`${k.bottom}px`}))),$=()=>{if(!V.value)return;const e=Date.now(),t=V.value.scrollTop,l=()=>{if(!V.value)return;const a=(Date.now()-e)/500;var o;a<1?(V.value.scrollTop=t*(1-((o=a)<.5?Ye(2*o)/2:1-Ye(2*(1-o))/2)),requestAnimationFrame(l)):V.value.scrollTop=0};requestAnimationFrame(l)},T=e=>{$(),t("click",e)},z=C((()=>{V.value&&(I.value=V.value.scrollTop>=k.visibilityHeight)}),300);return r(S,"scroll",z),s((()=>{var e;S.value=document,V.value=document.documentElement,k.target&&(V.value=null!=(e=document.querySelector(k.target))?e:void 0,V.value||i("ElBacktop",`target is not existed: ${k.target}`),S.value=V.value)})),(e,t)=>(u(),c(y,{name:`${m(M).namespace.value}-fade-in`},{default:d((()=>[I.value?(u(),v("div",{key:0,style:w(m(P)),class:g(m(M).b()),onClick:x(T,["stop"])},[p(e.$slots,"default",{},(()=>[h(m(b),{class:g(m(M).e("icon"))},{default:d((()=>[h(m(f))])),_:1},8,["class"])]))],14,Ze)):_("v-if",!0)])),_:3},8,["name"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/backtop/src/backtop.vue"]]));var tt=k(t({name:"ElBreadcrumb",props:V({separator:{type:String,default:"/"},separatorIcon:{type:S,default:""}}),setup(e){const t=e,a=l("breadcrumb"),n=o();return I(Je,t),s((()=>{const e=n.value.querySelectorAll(`.${a.e("item")}`);e.length&&e[e.length-1].setAttribute("aria-current","page")})),(e,t)=>(u(),v("div",{ref_key:"breadcrumb",ref:n,class:g(m(a).b()),"aria-label":"Breadcrumb",role:"navigation"},[p(e.$slots,"default")],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb.vue"]]);var lt=k(t({name:"ElBreadcrumbItem",props:V({to:{type:P([String,Object]),default:""},replace:{type:Boolean,default:!1}}),setup(e){const t=e,a=E(),n=$(Je,void 0),r=l("breadcrumb"),{separator:s,separatorIcon:i}=T(n),h=a.appContext.config.globalProperties.$router,f=o(),w=()=>{t.to&&h&&(t.replace?h.replace(t.to):h.push(t.to))};return(e,t)=>(u(),v("span",{class:g(m(r).e("item"))},[z("span",{ref_key:"link",ref:f,class:g([m(r).e("inner"),m(r).is("link",!!e.to)]),role:"link",onClick:w},[p(e.$slots,"default")],2),m(i)?(u(),c(m(b),{key:0,class:g(m(r).e("separator"))},{default:d((()=>[(u(),c(j(m(i))))])),_:1},8,["class"])):(u(),v("span",{key:1,class:g(m(r).e("separator")),role:"presentation"},L(m(s)),3))],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/breadcrumb/src/breadcrumb-item.vue"]]);const at=M(tt,{BreadcrumbItem:lt}),ot=A(lt),nt={beforeMount(t,l){var a,o;t._handleResize=()=>{var e;t&&(null==(e=l.value)||e.call(l,t))},a=t,o=t._handleResize,e&&a&&(a.__resizeListeners__||(a.__resizeListeners__=[],a.__ro__=new ResizeObserver(Xe),a.__ro__.observe(a)),a.__resizeListeners__.push(o))},beforeUnmount(e){var t,l,a;t=e,l=e._handleResize,t&&t.__resizeListeners__&&(t.__resizeListeners__.splice(t.__resizeListeners__.indexOf(l),1),t.__resizeListeners__.length||null==(a=t.__ro__)||a.disconnect())}};class rt{constructor(e,t){this.parent=e,this.domNode=t,this.subIndex=0,this.subIndex=0,this.init()}init(){this.subMenuItems=this.domNode.querySelectorAll("li"),this.addListeners()}gotoSubIndex(e){e===this.subMenuItems.length?e=0:e<0&&(e=this.subMenuItems.length-1),this.subMenuItems[e].focus(),this.subIndex=e}addListeners(){const e=this.parent.domNode;Array.prototype.forEach.call(this.subMenuItems,(t=>{t.addEventListener("keydown",(t=>{let l=!1;switch(t.code){case R.down:this.gotoSubIndex(this.subIndex+1),l=!0;break;case R.up:this.gotoSubIndex(this.subIndex-1),l=!0;break;case R.tab:Ae(e,"mouseleave");break;case R.enter:case R.space:l=!0,t.currentTarget.click()}return l&&(t.preventDefault(),t.stopPropagation()),!1}))}))}}class st{constructor(e,t){this.domNode=e,this.submenu=null,this.submenu=null,this.init(t)}init(e){this.domNode.setAttribute("tabindex","0");const t=this.domNode.querySelector(`.${e}-menu`);t&&(this.submenu=new rt(this,t)),this.addListeners()}addListeners(){this.domNode.addEventListener("keydown",(e=>{let t=!1;switch(e.code){case R.down:Ae(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(0),t=!0;break;case R.up:Ae(e.currentTarget,"mouseenter"),this.submenu&&this.submenu.gotoSubIndex(this.submenu.subMenuItems.length-1),t=!0;break;case R.tab:Ae(e.currentTarget,"mouseleave");break;case R.enter:case R.space:t=!0,e.currentTarget.click()}t&&e.preventDefault()}))}}class it{constructor(e,t){this.domNode=e,this.init(t)}init(e){const t=this.domNode.childNodes;Array.from(t).forEach((t=>{1===t.nodeType&&new st(t,e)}))}}var ut=k(t({name:"ElMenuCollapseTransition",setup(){const e=l("menu");return{listeners:{onBeforeEnter:e=>e.style.opacity="0.2",onEnter(t,l){O(t,`${e.namespace.value}-opacity-transition`),t.style.opacity="1",l()},onAfterEnter(t){B(t,`${e.namespace.value}-opacity-transition`),t.style.opacity=""},onBeforeLeave(t){t.dataset||(t.dataset={}),N(t,e.m("collapse"))?(B(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),O(t,e.m("collapse"))):(O(t,e.m("collapse")),t.dataset.oldOverflow=t.style.overflow,t.dataset.scrollWidth=t.clientWidth.toString(),B(t,e.m("collapse"))),t.style.width=`${t.scrollWidth}px`,t.style.overflow="hidden"},onLeave(e){O(e,"horizontal-collapse-transition"),e.style.width=`${e.dataset.scrollWidth}px`}}}}}),[["render",function(e,t,l,a,o,n){return u(),c(y,D({mode:"out-in"},e.listeners),{default:d((()=>[p(e.$slots,"default")])),_:3},16)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-collapse-transition.vue"]]);function ct(e,t){const l=n((()=>{let l=e.parent;const a=[t.value];for(;"ElMenu"!==l.type.name;)l.props.index&&a.unshift(l.props.index),l=l.parent;return a}));return{parentMenu:n((()=>{let t=e.parent;for(;t&&!["ElMenu","ElSubMenu"].includes(t.type.name);)t=t.parent;return t})),indexPath:l}}function dt(e){return n((()=>{const t=e.backgroundColor;return t?new Oe(t).shade(20).toString():""}))}const vt=(e,t)=>{const a=l("menu");return n((()=>a.cssVarBlock({"text-color":e.textColor||"","hover-text-color":e.textColor||"","bg-color":e.backgroundColor||"","hover-bg-color":dt(e).value||"","active-color":e.activeTextColor||"",level:`${t}`})))},pt=V({index:{type:String,required:!0},showTimeout:{type:Number,default:300},hideTimeout:{type:Number,default:300},popperClass:String,disabled:Boolean,popperAppendToBody:{type:Boolean,default:void 0},popperOffset:{type:Number,default:6}});var ht=t({name:"ElSubMenu",props:pt,setup(e,{slots:t,expose:a}){const r=E(),{indexPath:u,parentMenu:c}=ct(r,n((()=>e.index))),d=l("menu"),v=l("sub-menu"),p=$("rootMenu");p||i("ElSubMenu","can not inject root menu");const h=$(`subMenu:${c.value.uid}`);h||i("ElSubMenu","can not inject sub menu");const m=o({}),f=o({});let g;const w=o(!1),x=o(),_=o(null),y=n((()=>"horizontal"===A.value&&C.value?"bottom-start":"right-start")),k=n((()=>"horizontal"===A.value&&C.value||"vertical"===A.value&&!p.props.collapse?q:W)),C=n((()=>0===h.level)),M=n((()=>void 0===e.popperAppendToBody?C.value:Boolean(e.popperAppendToBody))),V=n((()=>p.props.collapse?`${d.namespace.value}-zoom-in-left`:`${d.namespace.value}-zoom-in-top`)),S=n((()=>"horizontal"===A.value&&C.value?["bottom-start","bottom-end","top-start","top-end","right-start","left-start"]:["right-start","left-start","bottom-start","bottom-end","top-start","top-end"])),P=n((()=>p.openedMenus.includes(e.index))),T=n((()=>{let e=!1;return Object.values(m.value).forEach((t=>{t.active&&(e=!0)})),Object.values(f.value).forEach((t=>{t.active&&(e=!0)})),e})),z=n((()=>p.props.backgroundColor||"")),j=n((()=>p.props.activeTextColor||"")),L=n((()=>p.props.textColor||"")),A=n((()=>p.props.mode)),R=F({index:e.index,indexPath:u,active:T}),O=n((()=>"horizontal"!==A.value?{color:L.value}:{borderBottomColor:T.value?p.props.activeTextColor?j.value:"":"transparent",color:T.value?j.value:L.value})),B=e=>{var t,l,a;e||null==(a=null==(l=null==(t=_.value)?void 0:t.popperRef)?void 0:l.popperInstanceRef)||a.destroy()},N=()=>{"hover"===p.props.menuTrigger&&"horizontal"===p.props.mode||p.props.collapse&&"vertical"===p.props.mode||e.disabled||p.handleSubMenuClick({index:e.index,indexPath:u.value,active:T.value})},D=(t,l=e.showTimeout)=>{var a;("focus"!==t.type||t.relatedTarget)&&("click"===p.props.menuTrigger&&"horizontal"===p.props.mode||!p.props.collapse&&"vertical"===p.props.mode||e.disabled||(h.mouseInChild.value=!0,null==g||g(),({stop:g}=Y((()=>{p.openMenu(e.index,u.value)}),l)),M.value&&(null==(a=c.value.vnode.el)||a.dispatchEvent(new MouseEvent("mouseenter")))))},J=(t=!1)=>{var l,a;"click"===p.props.menuTrigger&&"horizontal"===p.props.mode||!p.props.collapse&&"vertical"===p.props.mode||(null==g||g(),h.mouseInChild.value=!1,({stop:g}=Y((()=>!w.value&&p.closeMenu(e.index,u.value)),e.hideTimeout)),M.value&&t&&"ElSubMenu"===(null==(l=r.parent)?void 0:l.type.name)&&(null==(a=h.handleMouseleave)||a.call(h,!0)))};H((()=>p.props.collapse),(e=>B(Boolean(e))));{const e=e=>{f.value[e.index]=e},t=e=>{delete f.value[e.index]};I(`subMenu:${r.uid}`,{addSubMenu:e,removeSubMenu:t,handleMouseleave:J,mouseInChild:w,level:h.level+1})}return a({opened:P}),s((()=>{p.addSubMenu(R),h.addSubMenu(R)})),G((()=>{h.removeSubMenu(R),p.removeSubMenu(R)})),()=>{var l;const a=[null==(l=t.title)?void 0:l.call(t),U(b,{class:v.e("icon-arrow")},{default:()=>U(k.value)})],o=vt(p.props,h.level+1),n=p.isMenuPopup?U(Te,{ref:_,visible:P.value,effect:"light",pure:!0,offset:e.popperOffset,showArrow:!1,persistent:!0,popperClass:e.popperClass,placement:y.value,teleported:M.value,fallbackPlacements:S.value,transition:V.value,gpuAcceleration:!1},{content:()=>{var l;return U("div",{class:[d.m(A.value),d.m("popup-container"),e.popperClass],onMouseenter:e=>D(e,100),onMouseleave:()=>J(!0),onFocus:e=>D(e,100)},[U("ul",{class:[d.b(),d.m("popup"),d.m(`popup-${y.value}`)],style:o.value},[null==(l=t.default)?void 0:l.call(t)])])},default:()=>U("div",{class:v.e("title"),style:[O.value,{backgroundColor:z.value}],onClick:N},a)}):U(X,{},[U("div",{class:v.e("title"),style:[O.value,{backgroundColor:z.value}],ref:x,onClick:N},a),U(Re,{},{default:()=>{var e;return Q(U("ul",{role:"menu",class:[d.b(),d.m("inline")],style:o.value},[null==(e=t.default)?void 0:e.call(t)]),[[K,P.value]])}})]);return U("li",{class:[v.b(),v.is("active",T.value),v.is("opened",P.value),v.is("disabled",e.disabled)],role:"menuitem",ariaHaspopup:!0,ariaExpanded:P.value,onMouseenter:D,onMouseleave:()=>J(!0),onFocus:D},[n])}}});const mt=V({mode:{type:String,values:["horizontal","vertical"],default:"vertical"},defaultActive:{type:String,default:""},defaultOpeneds:{type:P(Array),default:()=>Ne([])},uniqueOpened:Boolean,router:Boolean,menuTrigger:{type:String,values:["hover","click"],default:"hover"},collapse:Boolean,backgroundColor:String,textColor:String,activeTextColor:String,collapseTransition:{type:Boolean,default:!0},ellipsis:{type:Boolean,default:!0}}),ft=e=>Array.isArray(e)&&e.every((e=>Z(e)));var gt=t({name:"ElMenu",props:mt,emits:{close:(e,t)=>Z(e)&&ft(t),open:(e,t)=>Z(e)&&ft(t),select:(e,t,l,a)=>Z(e)&&ft(t)&&ee(l)&&(void 0===a||a instanceof Promise)},setup(e,{emit:t,slots:a,expose:r}){const i=E(),u=i.appContext.config.globalProperties.$router,c=o(),d=l("menu"),v=l("sub-menu"),p=o(e.defaultOpeneds&&!e.collapse?e.defaultOpeneds.slice(0):[]),h=o(e.defaultActive),m=o({}),f=o({}),g=n((()=>"horizontal"===e.mode||"vertical"===e.mode&&e.collapse)),w=()=>{const t=h.value&&m.value[h.value];if(!t||"horizontal"===e.mode||e.collapse)return;t.indexPath.forEach((e=>{const t=f.value[e];t&&x(e,t.indexPath)}))},x=(l,a)=>{p.value.includes(l)||(e.uniqueOpened&&(p.value=p.value.filter((e=>a.includes(e)))),p.value.push(l),t("open",l,a))},_=(e,l)=>{const a=p.value.indexOf(e);-1!==a&&p.value.splice(a,1),t("close",e,l)},y=({index:e,indexPath:t})=>{p.value.includes(e)?_(e,t):x(e,t)},k=l=>{("horizontal"===e.mode||e.collapse)&&(p.value=[]);const{index:a,indexPath:o}=l;if(void 0!==a&&void 0!==o)if(e.router&&u){const e=l.route||a,n=u.push(e).then((e=>(e||(h.value=a),e)));t("select",a,o,{index:a,indexPath:o,route:e},n)}else h.value=a,t("select",a,o,{index:a,indexPath:o})},C=()=>{te((()=>i.proxy.$forceUpdate()))};H((()=>e.defaultActive),(t=>{m.value[t]||(h.value=""),(t=>{const l=m.value,a=l[t]||h.value&&l[h.value]||l[e.defaultActive];a?(h.value=a.index,w()):h.value=t})(t)})),H(m.value,(()=>w())),H((()=>e.collapse),(e=>{e&&(p.value=[])}));{const t=e=>{f.value[e.index]=e},l=e=>{delete f.value[e.index]},a=e=>{m.value[e.index]=e},n=e=>{delete m.value[e.index]};I("rootMenu",F({props:e,openedMenus:p,items:m,subMenus:f,activeIndex:h,isMenuPopup:g,addMenuItem:a,removeMenuItem:n,addSubMenu:t,removeSubMenu:l,openMenu:x,closeMenu:_,handleMenuItemClick:k,handleSubMenuClick:y})),I(`subMenu:${i.uid}`,{addSubMenu:t,removeSubMenu:l,mouseInChild:o(!1),level:0})}s((()=>{w(),"horizontal"===e.mode&&new it(i.vnode.el,d.namespace.value)}));r({open:e=>{const{indexPath:t}=f.value[e];t.forEach((e=>x(e,t)))},close:_,handleResize:C});const M=e=>{const t=Array.isArray(e)?e:[e],l=[];return t.forEach((e=>{Array.isArray(e.children)?l.push(...M(e.children)):l.push(e)})),l};return()=>{var t,l,o,n;let r=null!=(l=null==(t=a.default)?void 0:t.call(a))?l:[];const s=[];if("horizontal"===e.mode&&c.value){const t=Array.from(null!=(n=null==(o=c.value)?void 0:o.childNodes)?n:[]).filter((e=>"#text"!==e.nodeName||e.nodeValue)),l=M(r),a=64,i=Number.parseInt(getComputedStyle(c.value).paddingLeft,10),u=Number.parseInt(getComputedStyle(c.value).paddingRight,10),d=c.value.clientWidth-i-u;let p=0,h=0;t.forEach(((e,t)=>{p+=e.offsetWidth||0,p<=d-a&&(h=t+1)}));const m=l.slice(0,h),f=l.slice(h);(null==f?void 0:f.length)&&e.ellipsis&&(r=m,s.push(U(ht,{index:"sub-menu-more",class:v.e("hide-arrow")},{title:()=>U(b,{class:v.e("icon-more")},{default:()=>U(J)}),default:()=>f})))}const i=vt(e,0),u=(p=U("ul",{key:String(e.collapse),role:"menubar",ref:c,style:i.value,class:{[d.b()]:!0,[d.m(e.mode)]:!0,[d.m("collapse")]:e.collapse}},[...r,...s]),e.ellipsis?(h=p,"horizontal"===e.mode?Q(h,[[nt,C]]):h):p);var p,h;return e.collapseTransition&&"vertical"===e.mode?U(ut,(()=>u)):u}}});const bt=V({index:{type:P([String,null]),default:null},route:{type:P([String,Object])},disabled:Boolean});var wt=k(t({name:"ElMenuItem",components:{ElTooltip:Te},props:bt,emits:{click:e=>Z(e.index)&&Array.isArray(e.indexPath)},setup(e,{emit:t}){const a=E(),o=$("rootMenu"),r=l("menu"),u=l("menu-item");o||i("ElMenuItem","can not inject root menu");const{parentMenu:c,indexPath:d}=ct(a,le(e,"index")),v=$(`subMenu:${c.value.uid}`);v||i("ElMenuItem","can not inject sub menu");const p=n((()=>e.index===o.activeIndex)),h=F({index:e.index,indexPath:d,active:p});return s((()=>{v.addSubMenu(h),o.addMenuItem(h)})),G((()=>{v.removeSubMenu(h),o.removeMenuItem(h)})),{Effect:ze,parentMenu:c,rootMenu:o,active:p,nsMenu:r,nsMenuItem:u,handleClick:()=>{e.disabled||(o.handleMenuItemClick({index:e.index,indexPath:d.value,route:e.route}),t("click",h))}}}}),[["render",function(e,t,l,a,o,n){const r=ae("el-tooltip");return u(),v("li",{class:g([e.nsMenuItem.b(),e.nsMenuItem.is("active",e.active),e.nsMenuItem.is("disabled",e.disabled)]),role:"menuitem",tabindex:"-1",onClick:t[0]||(t[0]=(...t)=>e.handleClick&&e.handleClick(...t))},["ElMenu"===e.parentMenu.type.name&&e.rootMenu.props.collapse&&e.$slots.title?(u(),c(r,{key:0,effect:e.Effect.DARK,placement:"right","fallback-placements":["left"],persistent:""},{content:d((()=>[p(e.$slots,"title")])),default:d((()=>[z("div",{class:g(e.nsMenu.be("tooltip","trigger"))},[p(e.$slots,"default")],2)])),_:3},8,["effect"])):(u(),v(X,{key:1},[p(e.$slots,"default"),p(e.$slots,"title")],64))],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue"]]);var xt=k(t({name:"ElMenuItemGroup",props:{title:String},setup:()=>({ns:l("menu-item-group")})}),[["render",function(e,t,l,a,o,n){return u(),v("li",{class:g(e.ns.b())},[z("div",{class:g(e.ns.e("title"))},[e.$slots.title?p(e.$slots,"title",{key:1}):(u(),v(X,{key:0},[oe(L(e.title),1)],64))],2),z("ul",null,[p(e.$slots,"default")])],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item-group.vue"]]);const _t=M(gt,{MenuItem:wt,MenuItemGroup:xt,SubMenu:ht}),yt=A(wt);A(xt);const kt=A(ht);var Ct=t({__name:"Backtop",setup(e){const{getPrefixCls:t,variables:l}=ne(),a=t("backtop");return(e,t)=>(u(),c(m(et),{class:g(`${m(a)}-backtop`),target:`.${m(l).namespace}-layout-content-scrollbar .${m(l).elNamespace}-scrollbar__wrap`},null,8,["class","target"]))}});const Mt=(e,t)=>(je(e,(e=>e.path===t))||[]).map((e=>e.path)),Vt=(e=[],t)=>{const l=a=>(a||e).map((a=>{var n;const r=null!=(n=a.meta)?n:{};if(!r.hidden){const{oneShowingChild:n,onlyOneChild:s}=((e=[],t)=>{const l=o(),a=e.filter((e=>{var t;return!(null!=(t=e.meta)?t:{}).hidden&&(l.value=e,!0)}));return 1===a.length?{oneShowingChild:!0,onlyOneChild:m(l)}:a.length?{oneShowingChild:!1,onlyOneChild:m(l)}:(l.value={...t,path:"",noShowingChildren:!0},{oneShowingChild:!0,onlyOneChild:m(l)})})(a.children,a),i=ie(a.path)?a.path:Mt(e,a.path).join("/"),{renderMenuTitle:u}={renderMenuTitle:e=>{const{t:t}=re(),{title:l="Please set title",icon:a}=e;return a?h(X,null,[h(se,{icon:e.icon},null),h("span",{class:"v-menu__title"},[t(l)])]):h("span",{class:"v-menu__title"},[t(l)])}};if(!n||(null==s?void 0:s.children)&&!(null==s?void 0:s.noShowingChildren)||(null==r?void 0:r.alwaysShow)){const{getPrefixCls:e}=ne(),o=e("menu-popper");return h(kt,{index:i,popperClass:"vertical"===t?`${o}--vertical`:`${o}--horizontal`},{title:()=>u(r),default:()=>l(a.children)})}return h(yt,{index:s?ue(i,s.path):i},{default:()=>u(s?null==s?void 0:s.meta:r)})}}));return{renderMenuItem:l}};const{getPrefixCls:St}=ne(),It=St("menu");var Pt=t({name:"Menu",props:{menuSelect:{type:Function,default:void 0}},setup(e){const t=ce(),l=n((()=>t.getLayout)),{push:a,currentRoute:o}=de(),r=ve(),s=n((()=>["classic","topLeft","cutMenu"].includes(m(l))?"vertical":"horizontal")),i=n((()=>"cutMenu"===m(l)?r.getMenuTabRouters:r.getRouters)),u=n((()=>t.getCollapse)),c=n((()=>t.getUniqueOpened)),d=n((()=>{const{meta:e,path:t}=m(o);return e.activeMenu?e.activeMenu:t})),v=t=>{e.menuSelect&&e.menuSelect(t),ie(t)?window.open(t):(console.log("push-===",t),a(t))},p=()=>{if("top"===m(l))return f();{let t;return h(pe,null,"function"==typeof(e=t=f())||"[object Object]"===Object.prototype.toString.call(e)&&!he(e)?t:{default:()=>[t]})}var e},f=()=>h(_t,{defaultActive:m(d),mode:m(s),collapse:"top"!==m(l)&&"cutMenu"!==m(l)&&m(u),uniqueOpened:"top"!==m(l)&&m(c),backgroundColor:"var(--left-menu-bg-color)",textColor:"var(--left-menu-text-color)",activeTextColor:"var(--left-menu-text-active-color)",onSelect:v},{default:()=>{const{renderMenuItem:e}=Vt(m(i),m(s));return e()}});return()=>h("div",{id:It,class:[`${It} ${It}__${m(s)}`,"h-[100%] overflow-hidden flex-col bg-[var(--left-menu-bg-color)]",{"w-[var(--left-menu-min-width)]":m(u)&&"cutMenu"!==m(l),"w-[var(--left-menu-max-width)]":!m(u)&&"cutMenu"!==m(l)}]},[p()])}}),$t=De(Pt,[["__scopeId","data-v-c68359d8"]]);const Tt=F({}),zt=(e,t)=>{var l;const a=[];for(const o of e){let e=null;const n=null!=(l=o.meta)?l:{};if(!n.hidden||n.showMainRoute){const l=Mt(t,o.path),n=ie(o.path)?o.path:l.join("/");e=me(o),e.path=n,o.children&&e&&(e.children=zt(o.children,t)),e&&a.push(e),l.length&&Reflect.has(Tt,l[0])&&Tt[l[0]].push(n)}}return a},{getPrefixCls:jt,variables:Lt}=ne(),Et=jt("tab-menu");var At=t({name:"TabMenu",setup(){const{push:e,currentRoute:t}=de(),{t:l}=re(),a=ce(),r=n((()=>a.getCollapse)),s=ve(),i=n((()=>s.getRouters)),u=n((()=>m(i).filter((e=>{var t;return!(null==(t=null==e?void 0:e.meta)?void 0:t.hidden)})))),c=()=>{a.setCollapse(!m(r))};H((()=>i.value),(e=>{(e=>{var t;for(const l of e){const e=null!=(t=l.meta)?t:{};(null==e?void 0:e.hidden)||(Tt[l.path]=[])}})(e),zt(e,e)}),{immediate:!0,deep:!0});const d=o(!0);H((()=>r.value),(e=>{e?d.value=!e:setTimeout((()=>{d.value=!e}),200)}));const v=o(!1),p=o(""),f=e=>{const{path:l}=m(t);return!!Tt[e].includes(l)},g=()=>{m(v)&&(v.value=!1)};return()=>h("div",{id:`${Lt.namespace}-menu`,class:[Et,"relative bg-[var(--left-menu-bg-color)] top-1px z-999",{"w-[var(--tab-menu-max-width)]":!m(r),"w-[var(--tab-menu-min-width)]":m(r)}],onMouseleave:g},[h(pe,{class:"!h-[calc(100%-var(--tab-menu-collapse-height)-1px)]"},{default:()=>[h("div",null,{default:()=>m(u).map((t=>{var a,o,n,r,i,u;const c=(null==(a=t.meta)?void 0:a.alwaysShow)||(null==(o=null==t?void 0:t.children)?void 0:o.length)&&(null==(n=null==t?void 0:t.children)?void 0:n.length)>1?t:{...(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]),path:ue(t.path,null==(r=(null==t?void 0:t.children)&&(null==t?void 0:t.children[0]))?void 0:r.path)};return h("div",{class:[`${Et}__item`,"text-center text-12px relative py-12px cursor-pointer",{"is-active":f(t.path)}],onClick:()=>{(t=>{ie(t.path)?window.open(t.path):(p.value=t.children?t.path:t.path.split("/")[0],t.children?(v.value=!m(v),m(v)&&s.setMenuTabRouters(me(t.children).map((e=>(e.path=ue(m(p),e.path),e))))):(e(t.path),s.setMenuTabRouters([]),v.value=!1))})(c)}},[h("div",null,[h(se,{icon:null==(i=null==c?void 0:c.meta)?void 0:i.icon},null)]),m(d)?h("p",{class:"break-words mt-5px px-2px"},[l(null==(u=c.meta)?void 0:u.title)]):void 0])}))})]}),h("div",{class:[`${Et}--collapse`,"text-center h-[var(--tab-menu-collapse-height)] leading-[var(--tab-menu-collapse-height)] cursor-pointer"],onClick:c},[h(se,{icon:m(r)?"ep:d-arrow-right":"ep:d-arrow-left"},null)]),h($t,{class:["!absolute top-0 border-left-1 border-solid border-[var(--left-menu-bg-light-color)]",{"!left-[var(--tab-menu-min-width)]":m(r),"!left-[var(--tab-menu-max-width)]":!m(r),"!w-[calc(var(--left-menu-max-width)+1px)]":m(v),"!w-0":!m(v)}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null)])}}),Rt=De(At,[["__scopeId","data-v-55b0cd10"]]);const Ot=fe({id:"tagsView",state:()=>({visitedViews:[],cachedViews:new Set}),getters:{getVisitedViews(){return this.visitedViews},getCachedViews(){return Array.from(this.cachedViews)}},actions:{addView(e){this.addVisitedView(e),this.addCachedView()},addVisitedView(e){var t,l;this.visitedViews.some((t=>t.path===e.path))||(null==(t=e.meta)?void 0:t.noTagsView)||this.visitedViews.push(Object.assign({},e,{title:(null==(l=e.meta)?void 0:l.title)||"no-name"}))},addCachedView(){var e;const t=new Set;for(const l of this.visitedViews){const a=ge(l);if(!!(null==(e=a.meta)?void 0:e.noCache))continue;const o=a.name;t.add(o)}Array.from(this.cachedViews).sort().toString()!==Array.from(t).sort().toString()&&(this.cachedViews=t)},delView(e){this.delVisitedView(e),this.addCachedView()},delVisitedView(e){for(const[t,l]of this.visitedViews.entries())if(l.path===e.path){this.visitedViews.splice(t,1);break}},delCachedView(){const e=be.currentRoute.value,t=we(this.getCachedViews,(t=>t===e.name));t>-1&&this.cachedViews.delete(this.getCachedViews[t])},delAllViews(){this.delAllVisitedViews(),this.addCachedView()},delAllVisitedViews(){this.visitedViews=[]},delOthersViews(e){this.delOthersVisitedViews(e),this.addCachedView()},delOthersVisitedViews(e){this.visitedViews=this.visitedViews.filter((t=>{var l;return(null==(l=null==t?void 0:t.meta)?void 0:l.affix)||t.path===e.path}))},delLeftViews(e){const t=we(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a>t})),this.addCachedView())},delRightViews(e){const t=we(this.visitedViews,(t=>t.path===e.path));t>-1&&(this.visitedViews=this.visitedViews.filter(((l,a)=>{var o;return(null==(o=null==l?void 0:l.meta)?void 0:o.affix)||l.path===e.path||a<t})),this.addCachedView())},updateVisitedView(e){for(let t of this.visitedViews)if(t.path===e.path){t=Object.assign(t,e);break}}}}),Bt=(e,t="")=>{let l=[];return e.forEach((e=>{const a=e.meta,o=ue(t,e.path);if((null==a?void 0:a.affix)&&l.push({...e,path:o,fullPath:o}),e.children){const t=Bt(e.children,o);t.length>=1&&(l=[...l,...t])}})),l},Nt=t({__name:"ContextMenu",props:{schema:{type:Array,default:()=>[]},trigger:{type:String,default:"contextmenu"},tagItem:{type:Object,default:()=>({})}},emits:["visibleChange"],setup(e,{expose:t,emit:l}){const a=e,{getPrefixCls:n}=ne(),r=n("context-menu"),{t:s}=re(),i=e=>{e.command&&e.command(e)},f=e=>{l("visibleChange",e,a.tagItem)},b=o();return t({elDropdownMenuRef:b,tagItem:a.tagItem}),(t,l)=>{const a=ae("Icon");return u(),c(m(Fe),{ref_key:"elDropdownMenuRef",ref:b,class:g(m(r)),trigger:e.trigger,placement:"bottom-start",onCommand:i,onVisibleChange:f,"popper-class":"v-context-menu-popper"},{dropdown:d((()=>[h(m(We),null,{default:d((()=>[(u(!0),v(X,null,xe(e.schema,((e,t)=>(u(),c(m(qe),{key:`dropdown${t}`,divided:e.divided,disabled:e.disabled,command:e},{default:d((()=>[h(a,{icon:e.icon},null,8,["icon"]),oe(" "+L(m(s)(e.label)),1)])),_:2},1032,["divided","disabled","command"])))),128))])),_:1})])),default:d((()=>[p(t.$slots,"default")])),_:3},8,["class","trigger"])}}});function Dt({el:e,position:t="scrollLeft",to:l,duration:a=500,callback:n}){const r=o(!1),s=e[t],i=l-s;let u=0;function c(){if(!m(r))return;u+=20;const l=(o=u,d=s,v=i,(o/=a/2)<1?v/2*o*o+d:-v/2*(--o*(o-2)-1)+d);var o,d,v;((e,t,l)=>{e[t]=l})(e,t,l),u<a&&m(r)?requestAnimationFrame(c):n&&n()}return{start:function(){r.value=!0,c()},stop:function(){r.value=!1}}}const qt=["id"],Wt={class:"overflow-hidden flex-1"},Ft={class:"flex h-full"},Ht=["onClick"];var Gt=De(t({__name:"TagsView",setup(e){const{getPrefixCls:t}=ne(),l=t("tags-view"),{t:a}=re(),{currentRoute:r,push:i,replace:p}=de(),f=ve(),b=n((()=>f.getRouters)),w=Ot(),y=n((()=>w.getVisitedViews)),k=o([]),C=ce(),M=n((()=>C.getTagsViewIcon)),V=o(),S=()=>{const{name:e}=m(r);return e&&(V.value=m(r),w.addView(m(r))),!1},I=e=>{var t;(null==(t=null==e?void 0:e.meta)?void 0:t.affix)||(w.delView(e),B(e)&&A())},P=()=>{w.delAllViews(),A()},$=()=>{w.delOthersViews(m(V))},T=async e=>{if(!e)return;w.delCachedView();const{path:t,query:l}=e;await te(),p({path:"/redirect"+t,query:l})},j=()=>{w.delLeftViews(m(V))},E=()=>{w.delRightViews(m(V))},A=()=>{const e=w.getVisitedViews.slice(-1)[0];if(e)i(e);else{if(m(r).path===f.getAddRouters[0].path||m(r).path===f.getAddRouters[0].redirect)return void S();i(f.getAddRouters[0].path)}},R=_e(),O=e=>{var t;const a=null==(t=m(q))?void 0:t.wrap$;let o=null,n=null;const r=m(R);if(r.length>0&&(o=r[0],n=r[r.length-1]),(null==o?void 0:o.to).fullPath===e.fullPath){const{start:e}=Dt({el:a,position:"scrollLeft",to:0,duration:500});e()}else if((null==n?void 0:n.to).fullPath===e.fullPath){const{start:e}=Dt({el:a,position:"scrollLeft",to:a.scrollWidth-a.offsetWidth,duration:500});e()}else{const t=r.findIndex((t=>(null==t?void 0:t.to).fullPath===e.fullPath)),o=document.getElementsByClassName(`${l}__item`),n=o[t-1],s=o[t+1],i=s.offsetLeft+s.offsetWidth+4,u=n.offsetLeft-4;if(i>m(W)+a.offsetWidth){const{start:e}=Dt({el:a,position:"scrollLeft",to:i-a.offsetWidth,duration:500});e()}else if(u<m(W)){const{start:e}=Dt({el:a,position:"scrollLeft",to:u,duration:500});e()}}},B=e=>e.path===m(r).path,N=_e(),D=(e,t)=>{if(e)for(const l of m(N)){const e=l.elDropdownMenuRef;t.fullPath!==l.tagItem.fullPath&&(null==e||e.handleClose())}},q=o(),W=o(0),F=({scrollLeft:e})=>{W.value=e},G=e=>{var t;const l=null==(t=m(q))?void 0:t.wrap$,{start:a}=Dt({el:l,position:"scrollLeft",to:m(W)+e,duration:500});a()};return s((()=>{(()=>{k.value=Bt(m(b));for(const e of m(k))e.name&&w.addVisitedView(e)})(),S()})),H((()=>r.value),(()=>{S(),(async()=>{await te();for(const e of m(y))if(e.fullPath===m(r).path){O(e),e.fullPath!==m(r).fullPath&&w.updateVisitedView(m(r));break}})()})),(e,t)=>{var o,n,r,s,i,p;const f=ae("Icon"),b=ae("router-link");return u(),v("div",{id:m(l),class:g([m(l),"flex w-full relative bg-[#fff] dark:bg-[var(--el-bg-color)]"])},[z("span",{class:g([`${m(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[0]||(t[0]=e=>G(-200))},[h(f,{icon:"ep:d-arrow-left",color:m(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),z("div",Wt,[h(m(pe),{ref_key:"scrollbarRef",ref:q,class:"h-full",onScroll:F},{default:d((()=>[z("div",Ft,[(u(!0),v(X,null,xe(m(y),(e=>{var t,o,n,r,s,i,v,p,w;return u(),c(m(Nt),{ref_for:!0,ref:m(N).set,schema:[{icon:"ant-design:sync-outlined",label:m(a)("common.reload"),disabled:(null==(t=V.value)?void 0:t.fullPath)!==e.fullPath,command:()=>{T(e)}},{icon:"ant-design:close-outlined",label:m(a)("common.closeTab"),disabled:!!(null==(o=m(y))?void 0:o.length)&&(null==(n=V.value)?void 0:n.meta.affix),command:()=>{I(e)}},{divided:!0,icon:"ant-design:vertical-right-outlined",label:m(a)("common.closeTheLeftTab"),disabled:!!(null==(r=m(y))?void 0:r.length)&&(e.fullPath===m(y)[0].fullPath||(null==(s=V.value)?void 0:s.fullPath)!==e.fullPath),command:()=>{j()}},{icon:"ant-design:vertical-left-outlined",label:m(a)("common.closeTheRightTab"),disabled:!!(null==(i=m(y))?void 0:i.length)&&(e.fullPath===m(y)[m(y).length-1].fullPath||(null==(v=V.value)?void 0:v.fullPath)!==e.fullPath),command:()=>{E()}},{divided:!0,icon:"ant-design:tag-outlined",label:m(a)("common.closeOther"),disabled:(null==(p=V.value)?void 0:p.fullPath)!==e.fullPath,command:()=>{$()}},{icon:"ant-design:line-outlined",label:m(a)("common.closeAll"),command:()=>{P()}}],key:e.fullPath,"tag-item":e,class:g([`${m(l)}__item`,(null==(w=null==e?void 0:e.meta)?void 0:w.affix)?`${m(l)}__item--affix`:"",{"is-active":B(e)}]),onVisibleChange:D},{default:d((()=>[z("div",null,[h(b,{ref_for:!0,ref:m(R).set,to:{...e},custom:""},{default:d((({navigate:t})=>{var o,n,r,s,i;return[z("div",{onClick:t,class:"h-full flex justify-center items-center whitespace-nowrap pl-15px"},[(null==e?void 0:e.matched)&&(null==e?void 0:e.matched[1])&&(null==(n=null==(o=null==e?void 0:e.matched[1])?void 0:o.meta)?void 0:n.icon)&&m(M)?(u(),c(f,{key:0,icon:null==(s=null==(r=null==e?void 0:e.matched[1])?void 0:r.meta)?void 0:s.icon,size:12,class:"mr-5px"},null,8,["icon"])):_("",!0),oe(" "+L(m(a)(null==(i=null==e?void 0:e.meta)?void 0:i.title))+" ",1),h(f,{class:g(`${m(l)}__item--close`),color:"#333",icon:"ant-design:close-outlined",size:12,onClick:x((t=>I(e)),["prevent","stop"])},null,8,["class","onClick"])],8,Ht)]})),_:2},1032,["to"])])])),_:2},1032,["schema","tag-item","class"])})),128))])])),_:1},512)]),z("span",{class:g([`${m(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[1]||(t[1]=e=>G(200))},[h(f,{icon:"ep:d-arrow-right",color:m(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),z("span",{class:g([`${m(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer"]),onClick:t[2]||(t[2]=e=>T(V.value))},[h(f,{icon:"ant-design:reload-outlined",color:m(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2),h(m(Nt),{trigger:"click",schema:[{icon:"ant-design:sync-outlined",label:m(a)("common.reload"),command:()=>{T(V.value)}},{icon:"ant-design:close-outlined",label:m(a)("common.closeTab"),disabled:!!(null==(o=m(y))?void 0:o.length)&&(null==(n=V.value)?void 0:n.meta.affix)},{divided:!0,icon:"ant-design:vertical-right-outlined",label:m(a)("common.closeTheLeftTab"),disabled:!!(null==(r=m(y))?void 0:r.length)&&(null==(s=V.value)?void 0:s.fullPath)===m(y)[0].fullPath,command:()=>{j()}},{icon:"ant-design:vertical-left-outlined",label:m(a)("common.closeTheRightTab"),disabled:!!(null==(i=m(y))?void 0:i.length)&&(null==(p=V.value)?void 0:p.fullPath)===m(y)[m(y).length-1].fullPath,command:()=>{E()}},{divided:!0,icon:"ant-design:tag-outlined",label:m(a)("common.closeOther"),command:()=>{$()}},{icon:"ant-design:line-outlined",label:m(a)("common.closeAll"),command:()=>{P()}}]},{default:d((()=>[z("span",{class:g([`${m(l)}__tool`,"w-[var(--tags-view-height)] h-[var(--tags-view-height)] text-center leading-[var(--tags-view-height)] cursor-pointer block"])},[h(f,{icon:"ant-design:setting-outlined",color:m(C).getIsDark?"var(--el-text-color-regular)":"#333"},null,8,["color"])],2)])),_:1},8,["schema"])],10,qt)}}}),[["__scopeId","data-v-58cd7090"]]);const Ut=z("img",{src:He,class:"w-[calc(var(--logo-height)-10px)] h-[calc(var(--logo-height)-10px)]"},null,-1),Qt=t({__name:"Logo",setup(e){const{getPrefixCls:t}=ne(),l=t("logo"),a=ce(),r=o(!0),i=n((()=>a.getTitle)),p=n((()=>a.getLayout)),h=n((()=>a.getCollapse));return s((()=>{m(h)&&(r.value=!1)})),H((()=>h.value),(e=>{"topLeft"!==m(p)&&"cutMenu"!==m(p)?e?r.value=!e:setTimeout((()=>{r.value=!e}),400):r.value=!0})),H((()=>p.value),(e=>{"top"===e||"cutMenu"===e?r.value=!0:m(h)?r.value=!1:r.value=!0})),(e,t)=>{const a=ae("router-link");return u(),c(a,{class:g([m(l),"classic"!==m(p)?`${m(l)}__Top`:"","flex !h-[var(--logo-height)] items-center cursor-pointer pl-8px relative","dark:bg-[var(--el-bg-color)]"]),to:"/"},{default:d((()=>[Ut,r.value?(u(),v("div",{key:0,class:g(["ml-10px text-16px font-700",{"text-[var(--logo-title-text-color)]":"classic"===m(p),"text-[var(--top-header-text-color)]":"topLeft"===m(p)||"top"===m(p)||"cutMenu"===m(p)}])},L(m(i)),3)):_("",!0)])),_:1},8,["class"])}}}),Kt=t({__name:"Footer",setup(e){const{getPrefixCls:t}=ne(),l=t("footer"),a=ce(),o=n((()=>a.getTitle));return(e,t)=>(u(),v("div",{class:g([m(l),"text-center text-[var(--el-text-color-placeholder)] bg-[var(--app-contnet-bg-color)] h-[var(--app-footer-height)] leading-[var(--app-footer-height)] dark:bg-[var(--el-bg-color)]"])}," Copyright © lihong671@gmail "+L(m(o)),3))}}),Xt=t({__name:"AppView",setup(e){const t=ce(),l=n((()=>t.getLayout)),a=n((()=>t.getFixedHeader)),o=n((()=>t.getFooter)),r=Ot(),s=n((()=>r.getCachedViews));return(e,t)=>{const n=ae("router-view");return u(),v(X,null,[z("section",{class:g(["p-[var(--app-content-padding)] w-[100%] bg-[var(--app-contnet-bg-color)] dark:bg-[var(--el-bg-color)]",{"!min-h-[calc(100%-var(--app-footer-height))]":m(a)&&("classic"===m(l)||"topLeft"===m(l))&&m(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--top-tool-height)-var(--app-footer-height))]":(!m(a)&&"classic"===m(l)||"top"===m(l))&&m(o),"!min-h-[calc(100%-var(--tags-view-height)-var(--app-footer-height))]":!m(a)&&"topLeft"===m(l)&&m(o),"!min-h-[calc(100%-var(--top-tool-height))]":m(a)&&"cutMenu"===m(l)&&m(o),"!min-h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))]":!m(a)&&"cutMenu"===m(l)&&m(o)}])},[h(n,null,{default:d((({Component:e,route:t})=>[(u(),c(ye,{include:m(s)},[(u(),c(j(e),{key:t.fullPath}))],1032,["include"]))])),_:1})],2),m(o)?(u(),c(m(Kt),{key:0})):_("",!0)],64)}}}),Yt=[z("img",{src:He,alt:"",class:"w-18px h-18px mr-18px"},null,-1)],Jt=t({__name:"Collapse",props:{color:ke.string.def("")},setup(e){const{getPrefixCls:t}=ne(),l=t("collapse");return(e,t)=>(u(),v("div",{class:g(m(l))},Yt,2))}}),Zt=t({__name:"SizeDropdown",props:{color:ke.string.def("")},setup(e){const{getPrefixCls:t}=ne(),l=t("size-dropdown"),{t:a}=re(),o=ce(),r=n((()=>o.sizeMap)),s=e=>{o.setCurrentSize(e)};return(t,o)=>{const n=ae("Icon");return u(),c(m(Fe),{class:g(m(l)),trigger:"click",onCommand:s},{dropdown:d((()=>[h(m(We),null,{default:d((()=>[(u(!0),v(X,null,xe(m(r),(e=>(u(),c(m(qe),{key:e,command:e},{default:d((()=>[oe(L(m(a)(`size.${e}`)),1)])),_:2},1032,["command"])))),128))])),_:1})])),default:d((()=>[h(n,{size:18,icon:"mdi:format-size",color:e.color,class:"cursor-pointer"},null,8,["color"])])),_:1},8,["class"])}}}),el={class:"flex items-center"},tl=["src"],ll={class:"<lg:hidden text-14px pl-[5px] text-[var(--top-header-text-color)]"},al=t({__name:"UserInfo",setup(e){const t=Ce(),l=Ot(),{getPrefixCls:a}=ne(),o=a("user-info"),{t:n}=re(),{wsCache:r}=Me(),{replace:s}=de(),i=r.get(t.getUserInfo).email.split("@")[0];let v="avatar.jpg";"admin"==i&&(v="admin.jpg");const p=()=>{Qe.confirm(n("common.loginOutMessage"),n("common.reminder"),{confirmButtonText:n("common.ok"),cancelButtonText:n("common.cancel"),type:"warning"}).then((async()=>{await Ke().catch((()=>{}))&&(r.clear(),l.delAllViews(),Ve(),s("/login"))})).catch((()=>{}))},f=()=>{window.open("https://github.com/Harvey-Specter/plunge_ui")};return(e,t)=>(u(),c(m(Fe),{class:g(m(o)),trigger:"click"},{dropdown:d((()=>[h(m(We),null,{default:d((()=>[h(m(qe),null,{default:d((()=>[z("div",{onClick:f},L(m(n)("stock.prodDoc")),1)])),_:1}),h(m(qe),{divided:""},{default:d((()=>[z("div",{onClick:p},L(m(n)("common.loginOut")),1)])),_:1})])),_:1})])),default:d((()=>[z("div",el,[z("img",{src:"src/assets/imgs/"+m(v),alt:"",class:"w-[calc(var(--logo-height)-25px)] rounded-[50%]"},null,8,tl),z("span",ll,L(m(i)),1)])])),_:1},8,["class"]))}}),ol=t({__name:"HeadButtons",setup(e){const{t:t}=re(),{push:l}=de();let a=de();const o=()=>{let e="/stock/StockList",o={path:e,component:()=>Se((()=>import("./StockList.873ddd9e.js")),["assets/StockList.873ddd9e.js","assets/ContentWrap.93253eae.js","assets/index.f2e05143.js","assets/index.03b2aafe.css","assets/el-card.76af1dc0.js","assets/el-card.62f62b18.css","assets/el-popper.7090df9f.js","assets/el-popper.2129afad.css","assets/index2.bac0fa94.js","assets/SearchButton.80adad7b.js","assets/Form.9f3ad28e.js","assets/Form.d407a4ef.css","assets/el-col.ae597e62.js","assets/el-col.9009e796.css","assets/typescript2.0e462989.js","assets/el-input.2911c078.js","assets/el-input.5a4ee1fb.css","assets/event2.1741f333.js","assets/index2.7bbd87c9.js","assets/el-tag.1d3a3f94.js","assets/el-tag.c8ed32b1.css","assets/tsxHelper.2e29a15d.js","assets/tsxHelper.eec292c5.css","assets/index2.309e467b.js","assets/scroll2.dc2faf83.js","assets/debounce.9184f38e.js","assets/validator2.6f1987ff.js","assets/el-button.c85984df.js","assets/el-button.31ff1471.css","assets/el-input-number.de78a412.js","assets/el-input-number.fa2b2d4e.css","assets/el-switch.83e4e4db.js","assets/el-switch.1190ebc1.css","assets/el-divider.1a444038.js","assets/el-divider.562ae4b3.css","assets/InputPassword.9aadb9c3.js","assets/InputPassword.d5f6a39f.css","assets/plugin-vue_export-helper.21dcd24c.js","assets/Editor.b5873d10.js","assets/Editor.337bdbf6.css","assets/aria2.b5095a02.js","assets/browser2.761a8cbc.js","assets/useForm.2045d6ea.js","assets/Dialog.38c0a3d1.js","assets/Dialog.5402f204.css","assets/el-overlay.df6b9408.js","assets/el-overlay.56bab24d.css","assets/vnode2.65b846cb.js","assets/refs2.9b43771e.js","assets/el-message-box.1514d4cd.js","assets/el-message-box.ac87c762.css","assets/Table.vue_vue_type_script_lang.35225308.js","assets/Table.vue_vue_type_script_lang.de076dea.css","assets/useAxios.5e836160.js","assets/useTable.1a1069ae.js","assets/Write.1654adbe.js","assets/useValidator.61d7760c.js","assets/Detail.29aca1b1.js","assets/Descriptions.1ec68d5f.js","assets/Descriptions.04c96593.css","assets/index2.312fa1be.js","assets/useCrudSchemas.ab34991b.js","assets/tree.b6e955f9.js","assets/useIcon.9cd4d07c.js"]),name:"StockListDel",meta:{title:t("stock.trash"),breadcrumb:!0}};a.addRoute("Group",o),l({path:e,query:{del:1}})},n=()=>{l({path:"/industry/index"})},r=()=>{l({path:"/group/index"})};return(e,l)=>(u(),v(X,null,[h(m(Be),{plain:"",type:"",onClick:r,size:"small",link:""},{default:d((()=>[oe(L(m(t)("stock.groupList")),1)])),_:1}),h(m(Be),{plain:"",type:"",onClick:n,size:"small",link:""},{default:d((()=>[oe(L(m(t)("stock.industry_sector")),1)])),_:1}),h(m(Be),{plain:"",type:"",onClick:o,size:"small",link:""},{default:d((()=>[oe(L(m(t)("stock.trash")),1)])),_:1})],64))}}),nl=t({__name:"Screenfull",props:{color:ke.string.def("")},setup(e){const{getPrefixCls:t}=ne(),l=t("screenfull"),{toggle:a,isFullscreen:o}=Ie(),n=()=>{a()};return(t,a)=>(u(),v("div",{class:g(m(l)),onClick:n},[h(m(se),{size:18,icon:m(o)?"zmdi:fullscreen-exit":"zmdi:fullscreen",color:e.color},null,8,["icon","color"])],2))}});const rl=(e,t="")=>{var l;const a=[];for(const o of e){const e=null==o?void 0:o.meta;if(e.hidden&&!e.showMainRoute)continue;const n=e.alwaysShow||1!==(null==(l=o.children)?void 0:l.length)?{...o}:{...o.children[0],path:ue(o.path,o.children[0].path)};n.path=ue(t,n.path),n.children&&(n.children=rl(n.children,n.path)),n&&a.push(n)}return a};const{getPrefixCls:sl}=ne(),il=sl("breadcrumb"),ul=ce(),cl=n((()=>ul.getBreadcrumbIcon));var dl=t({name:"Breadcrumb",setup(){const{currentRoute:e}=de(),{t:t}=re(),l=o([]),a=ve(),r=n((()=>{const e=a.getRouters;return rl(e)}));return H((()=>e.value),(t=>{t.path.startsWith("/redirect/")||(()=>{const t=e.value.path;l.value=Ee(m(r),(e=>e.path===t))})()}),{immediate:!0}),()=>{let e;return h(at,{separator:"/",class:`${il} flex items-center h-full ml-[10px]`},{default:()=>{return[h(Pe,{appear:!0,"enter-active-class":"animate__animated animate__fadeInRight"},(a=e=Le(m(l)).map((e=>{const l="noredirect"===e.redirect,a=e.meta;return h(ot,{to:{path:l?"":e.path},key:e.name},{default:()=>{var l,o;return[(null==a?void 0:a.icon)&&cl.value?h(X,null,[h(se,{icon:a.icon,class:"mr-[5px]"},null),oe(" "),t(null==(l=null==e?void 0:e.meta)?void 0:l.title)]):t(null==(o=null==e?void 0:e.meta)?void 0:o.title)]}})})),"function"==typeof a||"[object Object]"===Object.prototype.toString.call(a)&&!he(a)?e:{default:()=>[e]}))];var a}})}}}),vl=De(dl,[["__scopeId","data-v-22fc605d"]]);const{getPrefixCls:pl,variables:hl}=ne(),ml=pl("tool-header"),fl=ce(),gl=n((()=>fl.getBreadcrumb)),bl=n((()=>fl.getHamburger)),wl=n((()=>fl.getScreenfull)),xl=n((()=>fl.getSize)),_l=n((()=>fl.getLayout)),yl=n((()=>fl.getLocale));var kl=t({name:"ToolHeader",setup:()=>()=>h("div",{id:`${hl.namespace}-tool-header`,class:[ml,"h-[var(--top-tool-height)] relative px-[var(--top-tool-p-x)] flex items-center justify-between","dark:bg-[var(--el-bg-color)]"]},["top"!==_l.value?h("div",{class:"h-full flex items-center"},[bl.value&&"cutMenu"!==_l.value?h(Jt,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,gl.value?h(vl,{class:"<md:hidden"},null):void 0]):void 0,h("div",{class:"h-full flex items-center"},[h(ol,{class:"hover-tigger",color:"var(--top-header-text-color)"},null),wl.value?h(nl,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,xl.value?h(Zt,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,yl.value?h(Ge,{class:"hover-tigger",color:"var(--top-header-text-color)"},null):void 0,h(Ue,null,null),h(al,{class:"hover-tigger"},null)])])}),Cl=De(kl,[["__scopeId","data-v-63d0b79c"]]);const{getPrefixCls:Ml}=ne(),Vl=Ml("layout"),Sl=ce(),Il=n((()=>Sl.getPageLoading)),Pl=n((()=>Sl.getTagsView)),$l=n((()=>Sl.getCollapse)),Tl=n((()=>Sl.logo)),zl=n((()=>Sl.getFixedHeader)),jl=n((()=>Sl.getMobile)),Ll=()=>({renderClassic:()=>h(X,null,[h("div",{style:"display:none",class:["absolute top-0 left-0 h-full",{"!fixed z-3000":jl.value}]},[Tl.value?h(Qt,{class:["bg-[var(--left-menu-bg-color)] border-bottom-1 border-solid border-[var(--logo-border-color)] dark:border-[var(--el-border-color)]",{"!pl-0":jl.value&&$l.value,"w-[var(--left-menu-min-width)]":Sl.getCollapse,"w-[var(--left-menu-max-width)]":!Sl.getCollapse}],style:"transition: all var(--transition-time-02);"},null):void 0,h($t,{class:[{"!h-[calc(100%-var(--logo-height))]":Tl.value}]},null)]),h("div",{class:[`${Vl}-content`,"absolute top-0 h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":$l.value&&!jl.value&&!jl.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!$l.value&&!jl.value&&!jl.value,"fixed !w-full !left-0":jl.value}],style:"transition: all var(--transition-time-02);"},[Q(h(pe,{class:[`${Vl}-content-scrollbar`,{"!h-[calc(100%-var(--top-tool-height)-var(--tags-view-height))] mt-[calc(var(--top-tool-height)+var(--tags-view-height))]":zl.value}]},{default:()=>[h("div",{class:[{"fixed top-0 left-0 z-10":zl.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":$l.value&&zl.value&&!jl.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!$l.value&&zl.value&&!jl.value,"!w-full !left-0":jl.value}],style:"transition: all var(--transition-time-02);"},[h(Cl,{class:"border-bottom-1 border-solid border-[var(--top-tool-border-color)] bg-[var(--top-header-bg-color)] dark:border-[var(--el-border-color)]"},null),Pl.value?h(Gt,{class:"border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]"},null):void 0]),h(Xt,null,null)]}),[[$e("loading"),Il.value]])])]),renderTopLeft:()=>h(X,null,[h("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Tl.value?h(Qt,{class:"hover-tigger !pr-15px"},null):void 0,h(Cl,{class:"flex-1"},null)]),h("div",{class:"absolute top-[var(--logo-height)+1px] left-0 w-full h-[calc(100%-1px-var(--logo-height))] flex"},[h($t,{class:"!h-full"},null),h("div",{class:[`${Vl}-content`,"h-[100%]",{"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)]":$l.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)]":!$l.value}],style:"transition: all var(--transition-time-02);"},[Q(h(pe,{class:[`${Vl}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":zl.value&&Pl.value}]},{default:()=>[Pl.value?h(Gt,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":zl.value,"w-[calc(100%-var(--left-menu-min-width))] left-[var(--left-menu-min-width)] mt-[var(--logo-height)]":$l.value&&zl.value,"w-[calc(100%-var(--left-menu-max-width))] left-[var(--left-menu-max-width)] mt-[var(--logo-height)]":!$l.value&&zl.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,h(Xt,null,null)]}),[[$e("loading"),Il.value]])])])]),renderTop:()=>h(X,null,[h("div",{class:"flex items-center justify-between bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Tl.value?h(Qt,{class:"hover-tigger"},null):void 0,h($t,{class:"flex-1 px-10px h-[var(--top-tool-height)]"},null),h(Cl,null,null)]),h("div",{class:[`${Vl}-content`,"h-full w-full"]},[Q(h(pe,{class:[`${Vl}-content-scrollbar`,{"mt-[var(--tags-view-height)]":zl.value}]},{default:()=>[Pl.value?h(Gt,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed w-full top-[var(--top-tool-height)] left-0":zl.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,h(Xt,null,null)]}),[[$e("loading"),Il.value]])])]),renderCutMenu:()=>h(X,null,[h("div",{class:"flex items-center bg-[var(--top-header-bg-color)] border-bottom-1 border-solid border-[var(--top-tool-border-color)] dark:border-[var(--el-border-color)]"},[Tl.value?h(Qt,{class:"hover-tigger !pr-15px"},null):void 0,h(Cl,{class:"flex-1"},null)]),h("div",{class:"absolute top-[var(--logo-height)] left-0 w-full h-[calc(100%-var(--logo-height))] flex"},[h(Rt,null,null),h("div",{class:[`${Vl}-content`,"h-[100%]",{"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)]":$l.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)]":!$l.value}],style:"transition: all var(--transition-time-02);"},[Q(h(pe,{class:[`${Vl}-content-scrollbar`,{"!h-[calc(100%-var(--tags-view-height))] mt-[calc(var(--tags-view-height))]":zl.value&&Pl.value}]},{default:()=>[Pl.value?h(Gt,{class:["border-bottom-1 border-top-1 border-solid border-[var(--tags-view-border-color)] dark:border-[var(--el-border-color)]",{"!fixed top-0 left-0 z-10":zl.value,"w-[calc(100%-var(--tab-menu-min-width))] left-[var(--tab-menu-min-width)] mt-[var(--logo-height)]":$l.value&&zl.value,"w-[calc(100%-var(--tab-menu-max-width))] left-[var(--tab-menu-max-width)] mt-[var(--logo-height)]":!$l.value&&zl.value}],style:"transition: width var(--transition-time-02), left var(--transition-time-02);"},null):void 0,h(Xt,null,null)]}),[[$e("loading"),Il.value]])])])])}),{getPrefixCls:El}=ne(),Al=El("layout"),Rl=ce(),Ol=n((()=>Rl.getMobile)),Bl=n((()=>Rl.getCollapse)),Nl=n((()=>Rl.getLayout)),Dl=()=>{Rl.setCollapse(!0)},ql=()=>{switch(m(Nl)){case"classic":const{renderClassic:e}=Ll();return e();case"topLeft":const{renderTopLeft:t}=Ll();return t();case"top":const{renderTop:l}=Ll();return l();case"cutMenu":const{renderCutMenu:a}=Ll();return a()}};var Wl=t({name:"Layout",setup:()=>()=>h("section",{class:[Al,`${Al}__${Nl.value}`,"w-[100%] h-[100%] relative"]},[Ol.value&&!Bl.value?h("div",{class:"absolute top-0 left-0 w-full h-full opacity-30 z-99 bg-[var(--el-color-black)]",onClick:Dl},null):void 0,ql(),h(Ct,null,null)])}),Fl=De(Wl,[["__scopeId","data-v-0392060e"]]);export{Fl as default};
//# sourceMappingURL=data:application/json;base64,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QUVqQixpRkFBK0VtRSxRQUM1RTJpQixJQUFrQixXQUUzQi9NLEVBRUhnTixLQUlMdE4iLCJuYW1lcyI6WyJyZXNpemVIYW5kbGVyIiwiZW50cmllcyIsImVudHJ5IiwibGlzdGVuZXJzIiwidGFyZ2V0IiwiX19yZXNpemVMaXN0ZW5lcnNfXyIsImxlbmd0aCIsImZuIiwiY3ViaWMiLCJ2YWx1ZSIsImJyZWFkY3J1bWJLZXkiLCJTeW1ib2wiLCJfaG9pc3RlZF8xIiwiRWxCYWNrdG9wIiwid2l0aEluc3RhbGwiLCJkZWZpbmVDb21wb25lbnQiLCJuYW1lIiwicHJvcHMiLCJ2aXNpYmlsaXR5SGVpZ2h0IiwidHlwZSIsIk51bWJlciIsImRlZmF1bHQiLCJTdHJpbmciLCJyaWdodCIsImJvdHRvbSIsImVtaXRzIiwiY2xpY2siLCJldnQiLCJNb3VzZUV2ZW50Iiwic2V0dXAiLCJfX3Byb3BzIiwiZW1pdCIsIm5zIiwidXNlTmFtZXNwYWNlIiwiZWwiLCJzaGFsbG93UmVmIiwiY29udGFpbmVyIiwidmlzaWJsZSIsInJlZiIsImJhY2tUb3BTdHlsZSIsImNvbXB1dGVkIiwic2Nyb2xsVG9Ub3AiLCJEYXRlIiwibm93IiwiYmVnaW5WYWx1ZSIsInNjcm9sbFRvcCIsImZyYW1lRnVuYyIsInByb2dyZXNzIiwiYmVnaW5UaW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaGFuZGxlQ2xpY2siLCJldmVudCIsImhhbmRsZVNjcm9sbFRocm90dGxlZCIsInVzZVRocm90dGxlRm4iLCJ1c2VFdmVudExpc3RlbmVyIiwib25Nb3VudGVkIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJfYSIsInF1ZXJ5U2VsZWN0b3IiLCJDT01QT05FTlRfTkFNRSIsIl9jdHgiLCJfY2FjaGUiLCJvcGVuQmxvY2siLCJjcmVhdGVCbG9jayIsIlRyYW5zaXRpb24iLCJ1bnJlZiIsIm5hbWVzcGFjZSIsIndpdGhDdHgiLCJjcmVhdGVFbGVtZW50QmxvY2siLCJrZXkiLCJzdHlsZSIsIm5vcm1hbGl6ZVN0eWxlIiwiY2xhc3MiLCJub3JtYWxpemVDbGFzcyIsImIiLCJvbkNsaWNrIiwid2l0aE1vZGlmaWVycyIsInJlbmRlclNsb3QiLCIkc2xvdHMiLCJjcmVhdGVWTm9kZSIsIkVsSWNvbiIsImUiLCJDYXJldFRvcCIsIl8iLCJjcmVhdGVDb21tZW50Vk5vZGUiLCJCcmVhZGNydW1iIiwiYnVpbGRQcm9wcyIsInNlcGFyYXRvciIsInNlcGFyYXRvckljb24iLCJpY29uUHJvcFR5cGUiLCJicmVhZGNydW1iIiwicHJvdmlkZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtcyIsInNldEF0dHJpYnV0ZSIsInJlZl9rZXkiLCJyb2xlIiwiQnJlYWRjcnVtYkl0ZW0iLCJ0byIsImRlZmluZVByb3BUeXBlIiwiT2JqZWN0IiwicmVwbGFjZSIsIkJvb2xlYW4iLCJpbnN0YW5jZSIsImdldEN1cnJlbnRJbnN0YW5jZSIsImJyZWFkY3J1bWJDb250ZXh0IiwiaW5qZWN0IiwidG9SZWZzIiwicm91dGVyIiwiYXBwQ29udGV4dCIsImNvbmZpZyIsImdsb2JhbFByb3BlcnRpZXMiLCIkcm91dGVyIiwibGluayIsInB1c2giLCJjcmVhdGVFbGVtZW50Vk5vZGUiLCJpcyIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwidG9EaXNwbGF5U3RyaW5nIiwiRWxCcmVhZGNydW1iIiwiRWxCcmVhZGNydW1iSXRlbSIsIndpdGhOb29wSW5zdGFsbCIsIlJlc2l6ZSIsImJlZm9yZU1vdW50IiwiYmluZGluZyIsImVsZW1lbnQiLCJfaGFuZGxlUmVzaXplIiwiY2FsbCIsImlzQ2xpZW50IiwiUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiYmVmb3JlVW5tb3VudCIsInNwbGljZSIsImluZGV4T2YiLCJfX3JvX18iLCJkaXNjb25uZWN0IiwiU3ViTWVudSIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwiZG9tTm9kZSIsInRoaXMiLCJzdWJJbmRleCIsImluaXQiLCJzdWJNZW51SXRlbXMiLCJhZGRMaXN0ZW5lcnMiLCJnb3RvU3ViSW5kZXgiLCJpZHgiLCJmb2N1cyIsIkFycmF5IiwicHJvdG90eXBlIiwiZm9yRWFjaCIsInByZXZEZWYiLCJjb2RlIiwiRVZFTlRfQ09ERSIsImRvd24iLCJ1cCIsInRhYiIsInRyaWdnZXJFdmVudCIsInBhcmVudE5vZGUiLCJlbnRlciIsInNwYWNlIiwiY3VycmVudFRhcmdldCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiTWVudUl0ZW0iLCJzdWJtZW51IiwibWVudUNoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIk1lbnUiLCJjaGlsZE5vZGVzIiwiZnJvbSIsIm1lbnVDaGlsZHJlbiIsImNoaWxkIiwibm9kZVR5cGUiLCJFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb24iLCJfZXhwb3J0X3NmYyIsIm9uQmVmb3JlRW50ZXIiLCJvcGFjaXR5Iiwib25FbnRlciIsImRvbmUiLCJhZGRDbGFzcyIsIm9uQWZ0ZXJFbnRlciIsInJlbW92ZUNsYXNzIiwib25CZWZvcmVMZWF2ZSIsImRhdGFzZXQiLCJoYXNDbGFzcyIsIm0iLCJvbGRPdmVyZmxvdyIsIm92ZXJmbG93Iiwic2Nyb2xsV2lkdGgiLCJjbGllbnRXaWR0aCIsInRvU3RyaW5nIiwid2lkdGgiLCJvbkxlYXZlIiwiJHByb3BzIiwiJHNldHVwIiwiJGRhdGEiLCIkb3B0aW9ucyIsIm1lcmdlUHJvcHMiLCJtb2RlIiwidXNlTWVudSIsImN1cnJlbnRJbmRleCIsImluZGV4IiwicGF0aCIsInBhcmVudE1lbnUiLCJpbmNsdWRlcyIsImluZGV4UGF0aCIsInVzZU1lbnVDb2xvciIsImNvbG9yIiwiYmFja2dyb3VuZENvbG9yIiwiVGlueUNvbG9yIiwic2hhZGUiLCJ1c2VNZW51Q3NzVmFyIiwibGV2ZWwiLCJjc3NWYXJCbG9jayIsInRleHRDb2xvciIsImFjdGl2ZVRleHRDb2xvciIsInN1Yk1lbnVQcm9wcyIsInJlcXVpcmVkIiwic2hvd1RpbWVvdXQiLCJoaWRlVGltZW91dCIsInBvcHBlckNsYXNzIiwiZGlzYWJsZWQiLCJwb3BwZXJBcHBlbmRUb0JvZHkiLCJwb3BwZXJPZmZzZXQiLCJzbG90cyIsImV4cG9zZSIsIm5zTWVudSIsIm5zU3ViTWVudSIsInJvb3RNZW51IiwidGhyb3dFcnJvciIsInN1Yk1lbnUiLCJ1aWQiLCJzdWJNZW51cyIsInZlcnRpY2FsVGl0bGVSZWYiLCJ2UG9wcGVyIiwiY3VycmVudFBsYWNlbWVudCIsImlzRmlyc3RMZXZlbCIsInN1Yk1lbnVUaXRsZUljb24iLCJjb2xsYXBzZSIsIkFycm93RG93biIsIkFycm93UmlnaHQiLCJhcHBlbmRUb0JvZHkiLCJtZW51VHJhbnNpdGlvbk5hbWUiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJvcGVuZWQiLCJvcGVuZWRNZW51cyIsImFjdGl2ZSIsImlzQWN0aXZlIiwidmFsdWVzIiwiaXRlbTIiLCJzdWJJdGVtIiwiaXRlbSIsInJlYWN0aXZlIiwidGl0bGVTdHlsZSIsImJvcmRlckJvdHRvbUNvbG9yIiwiaGFuZGxlQ29sbGFwc2VUb2dnbGUiLCJfYiIsIl9jIiwicG9wcGVyUmVmIiwicG9wcGVySW5zdGFuY2VSZWYiLCJkZXN0cm95IiwibWVudVRyaWdnZXIiLCJoYW5kbGVTdWJNZW51Q2xpY2siLCJoYW5kbGVNb3VzZWVudGVyIiwicmVsYXRlZFRhcmdldCIsIm1vdXNlSW5DaGlsZCIsInRpbWVvdXQiLCJzdG9wIiwidXNlVGltZW91dEZuIiwib3Blbk1lbnUiLCJ2bm9kZSIsImRpc3BhdGNoRXZlbnQiLCJoYW5kbGVNb3VzZWxlYXZlIiwiZGVlcERpc3BhdGNoIiwiY2xvc2VNZW51Iiwid2F0Y2giLCJyZW1vdmVTdWJNZW51IiwiYWRkU3ViTWVudSIsIm9uQmVmb3JlVW5tb3VudCIsInRpdGxlVGFnIiwidGl0bGUiLCJoIiwidWxTdHlsZSIsImlzTWVudVBvcHVwIiwiRWxUb29sdGlwIiwiZWZmZWN0IiwicHVyZSIsIm9mZnNldCIsInNob3dBcnJvdyIsInBlcnNpc3RlbnQiLCJwbGFjZW1lbnQiLCJ0ZWxlcG9ydGVkIiwidHJhbnNpdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsImNvbnRlbnQiLCJvbk1vdXNlZW50ZXIiLCJvbk1vdXNlbGVhdmUiLCJvbkZvY3VzIiwiX2EyIiwiRnJhZ21lbnQiLCJfQ29sbGFwc2VUcmFuc2l0aW9uIiwidlNob3ciLCJhcmlhSGFzcG9wdXAiLCJhcmlhRXhwYW5kZWQiLCJtZW51UHJvcHMiLCJkZWZhdWx0QWN0aXZlIiwiZGVmYXVsdE9wZW5lZHMiLCJtdXRhYmxlIiwidW5pcXVlT3BlbmVkIiwiY29sbGFwc2VUcmFuc2l0aW9uIiwiZWxsaXBzaXMiLCJjaGVja0luZGV4UGF0aCIsImlzQXJyYXkiLCJldmVyeSIsImlzU3RyaW5nIiwiY2xvc2UiLCJvcGVuIiwic2VsZWN0Iiwicm91dGVyUmVzdWx0IiwiaXNPYmplY3QiLCJQcm9taXNlIiwibWVudSIsInNsaWNlIiwiYWN0aXZlSW5kZXgiLCJpbml0TWVudSIsImFjdGl2ZUl0ZW0iLCJmaWx0ZXIiLCJpbmRleDIiLCJpIiwiaGFuZGxlTWVudUl0ZW1DbGljayIsIm1lbnVJdGVtIiwicm91dGUiLCJ0aGVuIiwicmVzIiwiaGFuZGxlUmVzaXplIiwibmV4dFRpY2siLCJwcm94eSIsIiRmb3JjZVVwZGF0ZSIsImN1cnJlbnRBY3RpdmUiLCJ2YWwiLCJpdGVtc0luRGF0YSIsInVwZGF0ZUFjdGl2ZUluZGV4IiwiYWRkTWVudUl0ZW0iLCJyZW1vdmVNZW51SXRlbSIsIk1lbnUkMSIsImNoaWxkcmVuIiwidm5vZGVzIiwicmVzdWx0IiwiZmxhdHRlZENoaWxkcmVuIiwiX2QiLCJzbG90IiwidlNob3dNb3JlIiwibm9kZU5hbWUiLCJub2RlVmFsdWUiLCJvcmlnaW5hbFNsb3QiLCJtb3JlSXRlbVdpZHRoIiwicGFkZGluZ0xlZnQiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJwYWRkaW5nUmlnaHQiLCJtZW51V2lkdGgiLCJjYWxjV2lkdGgiLCJzbGljZUluZGV4IiwiaXRlbXMyIiwib2Zmc2V0V2lkdGgiLCJzbG90RGVmYXVsdCIsInNsb3RNb3JlIiwiTW9yZSIsInZNZW51Iiwidk5vZGUiLCJ3aXRoRGlyZWN0aXZlcyIsIm1lbnVJdGVtUHJvcHMiLCJjb21wb25lbnRzIiwibnNNZW51SXRlbSIsInRvUmVmIiwiRWZmZWN0IiwicmVzb2x2ZUNvbXBvbmVudCIsInRhYmluZGV4IiwiYXJncyIsIl9jb21wb25lbnRfZWxfdG9vbHRpcCIsIkRBUksiLCJiZSIsIk1lbnVJdGVtR3JvdXAiLCJjcmVhdGVUZXh0Vk5vZGUiLCJFbE1lbnUiLCJFbE1lbnVJdGVtIiwiRWxTdWJNZW51IiwiZ2V0UHJlZml4Q2xzIiwidmFyaWFibGVzIiwidXNlRGVzaWduIiwicHJlZml4Q2xzIiwidHJlZURhdGEiLCJmaW5kUGF0aCIsIm4iLCJtYXAiLCJ1c2VSZW5kZXJNZW51SXRlbSIsImFsbFJvdXRlcnMiLCJtZW51TW9kZSIsInJlbmRlck1lbnVJdGVtIiwicm91dGVycyIsInYiLCJtZXRhIiwiaGlkZGVuIiwib25lU2hvd2luZ0NoaWxkIiwib25seU9uZUNoaWxkIiwic2hvd2luZ0NoaWxkcmVuIiwibm9TaG93aW5nQ2hpbGRyZW4iLCJoYXNPbmVTaG93aW5nQ2hpbGQiLCJmdWxsUGF0aCIsImlzVXJsIiwiZ2V0QWxsUGFyZW50UGF0aCIsImpvaW4iLCJyZW5kZXJNZW51VGl0bGUiLCJ0IiwidXNlSTE4biIsImljb24iLCJfY3JlYXRlVk5vZGUiLCJhbHdheXNTaG93IiwicHJlRml4Q2xzIiwicGF0aFJlc29sdmUiLCJtZW51U2VsZWN0IiwiRnVuY3Rpb24iLCJ1bmRlZmluZWQiLCJhcHBTdG9yZSIsInVzZUFwcFN0b3JlIiwibGF5b3V0IiwiZ2V0TGF5b3V0IiwiY3VycmVudFJvdXRlIiwidXNlUm91dGVyIiwicGVybWlzc2lvblN0b3JlIiwidXNlUGVybWlzc2lvblN0b3JlIiwiZ2V0TWVudVRhYlJvdXRlcnMiLCJnZXRSb3V0ZXJzIiwiZ2V0Q29sbGFwc2UiLCJnZXRVbmlxdWVPcGVuZWQiLCJhY3RpdmVNZW51Iiwid2luZG93IiwibG9nIiwicmVuZGVyTWVudVdyYXAiLCJyZW5kZXJNZW51IiwiX3Nsb3QiLCJvblNlbGVjdCIsImZpbHRlck1lbnVzUGF0aCIsInJvdXRlcyIsImFsbFJvdXRlcyIsImRhdGEiLCJzaG93TWFpblJvdXRlIiwiYWxsUGFyZW50UGFodCIsImNsb25lRGVlcCIsIlJlZmxlY3QiLCJoYXMiLCJ0YWJQYXRoTWFwIiwidGFiUm91dGVycyIsInNldENvbGxhcHNlIiwiaW5pdFRhYk1hcCIsImltbWVkaWF0ZSIsImRlZXAiLCJzaG93VGl0bGUiLCJzZXRUaW1lb3V0Iiwic2hvd01lbnUiLCJ0YWJBY3RpdmUiLCJpc0FjdGljZSIsImN1cnJlbnRQYXRoIiwibW91c2VsZWF2ZSIsInNwbGl0Iiwic2V0TWVudVRhYlJvdXRlcnMiLCJ0YWJDbGljayIsInVzZVRhZ3NWaWV3U3RvcmUiLCJkZWZpbmVTdG9yZSIsImlkIiwic3RhdGUiLCJ2aXNpdGVkVmlld3MiLCJjYWNoZWRWaWV3cyIsIlNldCIsImdldHRlcnMiLCJnZXRWaXNpdGVkVmlld3MiLCJnZXRDYWNoZWRWaWV3cyIsImFjdGlvbnMiLCJhZGRWaWV3IiwidmlldyIsImFkZFZpc2l0ZWRWaWV3IiwiYWRkQ2FjaGVkVmlldyIsInNvbWUiLCJhc3NpZ24iLCJnZXRSYXdSb3V0ZSIsImNhY2hlTWFwIiwiYWRkIiwic29ydCIsImRlbFZpZXciLCJkZWxWaXNpdGVkVmlldyIsImRlbENhY2hlZFZpZXciLCJmaW5kSW5kZXgiLCJkZWxldGUiLCJkZWxBbGxWaWV3cyIsImRlbEFsbFZpc2l0ZWRWaWV3cyIsImRlbE90aGVyc1ZpZXdzIiwiZGVsT3RoZXJzVmlzaXRlZFZpZXdzIiwiYWZmaXgiLCJkZWxMZWZ0Vmlld3MiLCJkZWxSaWdodFZpZXdzIiwidXBkYXRlVmlzaXRlZFZpZXciLCJmaWx0ZXJBZmZpeFRhZ3MiLCJwYXJlbnRQYXRoIiwidGFncyIsInRhZ1BhdGgiLCJ0ZW1wVGFncyIsImNvbW1hbmQiLCJ2aXNpYmxlQ2hhbmdlIiwidGFnSXRlbSIsImVsRHJvcGRvd25NZW51UmVmIiwidXNlU2Nyb2xsVG8iLCJwb3NpdGlvbiIsImR1cmF0aW9uIiwiY2FsbGJhY2siLCJzdGFydCIsImNoYW5nZSIsImN1cnJlbnRUaW1lIiwiYW5pbWF0ZVNjcm9sbCIsImlzQWN0aXZlUmVmIiwiYyIsImFtb3VudCIsIm1vdmUiLCJ0YWdzVmlld1N0b3JlIiwiYWZmaXhUYWdBcnIiLCJ0YWdzVmlld0ljb24iLCJnZXRUYWdzVmlld0ljb24iLCJzZWxlY3RlZFRhZyIsImFkZFRhZ3MiLCJjbG9zZVNlbGVjdGVkVGFnIiwiY2xvc2VBbGxUYWdzIiwiY2xvc2VPdGhlcnNUYWdzIiwicmVmcmVzaFNlbGVjdGVkVGFnIiwiYXN5bmMiLCJxdWVyeSIsImNsb3NlTGVmdFRhZ3MiLCJjbG9zZVJpZ2h0VGFncyIsInRvTGFzdFZpZXciLCJsYXRlc3RWaWV3IiwiZ2V0QWRkUm91dGVycyIsInJlZGlyZWN0IiwidGFnTGlua3NSZWZzIiwidXNlVGVtcGxhdGVSZWZzTGlzdCIsIm1vdmVUb1RhcmdldCIsImN1cnJlbnRUYWciLCJzY3JvbGxiYXJSZWYiLCJmaXJzdFRhZyIsImxhc3RUYWciLCJ0YWdMaXN0Iiwid3JhcCQiLCJ0Z3NSZWZzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInByZXZUYWciLCJuZXh0VGFnIiwiYWZ0ZXJOZXh0VGFnT2Zmc2V0TGVmdCIsIm9mZnNldExlZnQiLCJiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCIsInNjcm9sbExlZnROdW1iZXIiLCJpdGVtUmVmcyIsInNjcm9sbCIsInNjcm9sbExlZnQiLCJ0YWciLCJzaG93IiwiZ2V0VGl0bGUiLCJmaXhlZEhlYWRlciIsImdldEZpeGVkSGVhZGVyIiwiZm9vdGVyIiwiZ2V0Rm9vdGVyIiwiZ2V0Q2FjaGVzIiwic2l6ZU1hcCIsInNldEN1cnJlbnRTaXplIiwic2l6ZSIsInVzZUFwcFN0b3JlV2l0aE91dCIsIndzQ2FjaGUiLCJ1c2VDYWNoZSIsInVzZXJOYW1lIiwiZ2V0IiwiZ2V0VXNlckluZm8iLCJlbWFpbCIsImF2YSIsImxvZ2luT3V0IiwiRWxNZXNzYWdlQm94IiwiY29uZmlybSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsImxvZ2luT3V0QXBpIiwiY2F0Y2giLCJjbGVhciIsInRvRG9jdW1lbnQiLCJvcGVuVHJhc2giLCJ1cmwiLCJyIiwiY29tcG9uZW50IiwiX192aXRlUHJlbG9hZCIsImRlbCIsIm9wZW5JbmR1c3RyeSIsIm9wZW5Hcm91cExpc3QiLCJ0b2dnbGUiLCJpc0Z1bGxzY3JlZW4iLCJ1c2VGdWxsc2NyZWVuIiwidG9nZ2xlRnVsbHNjcmVlbiIsImZpbHRlckJyZWFkY3J1bWIiLCJicmVhZGNydW1iSWNvbiIsImdldEJyZWFkY3J1bWJJY29uIiwibGV2ZWxMaXN0IiwibWVudVJvdXRlcnMiLCJzdGFydHNXaXRoIiwibm9kZSIsInMiLCJ0cmVlVG9MaXN0IiwiZ2V0QnJlYWRjcnVtYiIsImhhbWJ1cmdlciIsImdldEhhbWJ1cmdlciIsInNjcmVlbmZ1bGwiLCJnZXRTY3JlZW5mdWxsIiwiZ2V0U2l6ZSIsImxvY2FsZSIsImdldExvY2FsZSIsInBhZ2VMb2FkaW5nIiwiZ2V0UGFnZUxvYWRpbmciLCJ0YWdzVmlldyIsImdldFRhZ3NWaWV3IiwibG9nbyIsIm1vYmlsZSIsImdldE1vYmlsZSIsInVzZVJlbmRlckxheW91dCIsInJlbmRlckNsYXNzaWMiLCJyZW5kZXJUb3BMZWZ0IiwicmVuZGVyVG9wIiwicmVuZGVyQ3V0TWVudSIsImhhbmRsZUNsaWNrT3V0c2lkZSIsInJlbmRlckxheW91dCJdLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvdXRpbHMvZG9tL3Jlc2l6ZS1ldmVudDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy91dGlscy9hbmltYXRpb24yLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvdG9rZW5zL2JyZWFkY3J1bWIyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9iYWNrdG9wL3NyYy9iYWNrdG9wNC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvYmFja3RvcC9pbmRleDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JhY2t0b3Avc3JjL2JhY2t0b3AzLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9icmVhZGNydW1iL3NyYy9icmVhZGNydW1iNC5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvYnJlYWRjcnVtYi9zcmMvYnJlYWRjcnVtYjMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvc3JjL2JyZWFkY3J1bWItaXRlbTQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvc3JjL2JyZWFkY3J1bWItaXRlbTMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvaW5kZXgyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvZGlyZWN0aXZlcy9yZXNpemUvaW5kZXgyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy91dGlscy9zdWJtZW51Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvdXRpbHMvbWVudS1pdGVtMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvdXRpbHMvbWVudS1iYXIyLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy9tZW51LWNvbGxhcHNlLXRyYW5zaXRpb24yLm1qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvY29tcG9uZW50cy9tZW51L3NyYy91c2UtbWVudTIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL3VzZS1tZW51LWNvbG9yMi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvdXNlLW1lbnUtY3NzLXZhcjIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL3N1Yi1tZW51Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudTIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbTMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbTQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbS1ncm91cDQubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbS1ncm91cDMubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lbnUvaW5kZXgyLm1qcyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0JhY2t0b3Avc3JjL0JhY2t0b3AudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvTWVudS9zcmMvaGVscGVyLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvTWVudS9zcmMvY29tcG9uZW50cy91c2VSZW5kZXJNZW51SXRlbS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9NZW51L3NyYy9jb21wb25lbnRzL3VzZVJlbmRlck1lbnVUaXRsZS50c3giLCIuLi8uLi9zcmMvY29tcG9uZW50cy9NZW51L3NyYy9NZW51LnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1RhYk1lbnUvc3JjL2hlbHBlci50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1RhYk1lbnUvc3JjL1RhYk1lbnUudnVlIiwiLi4vLi4vc3JjL3N0b3JlL21vZHVsZXMvdGFnc1ZpZXcudHMiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9UYWdzVmlldy9zcmMvaGVscGVyLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQ29udGV4dE1lbnUvc3JjL0NvbnRleHRNZW51LnZ1ZSIsIi4uLy4uL3NyYy9ob29rcy9ldmVudC91c2VTY3JvbGxUby50cyIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1RhZ3NWaWV3L3NyYy9UYWdzVmlldy52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Mb2dvL3NyYy9Mb2dvLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci9zcmMvRm9vdGVyLnZ1ZSIsIi4uLy4uL3NyYy9sYXlvdXQvY29tcG9uZW50cy9BcHBWaWV3LnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxhcHNlL3NyYy9Db2xsYXBzZS52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9TaXplRHJvcGRvd24vc3JjL1NpemVEcm9wZG93bi52dWUiLCIuLi8uLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby9zcmMvVXNlckluZm8udnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvSGVhZEJ1dHRvbnMvc3JjL0hlYWRCdXR0b25zLnZ1ZSIsIi4uLy4uL3NyYy9jb21wb25lbnRzL1NjcmVlbmZ1bGwvc3JjL1NjcmVlbmZ1bGwudnVlIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQnJlYWRjcnVtYi9zcmMvaGVscGVyLnRzIiwiLi4vLi4vc3JjL2NvbXBvbmVudHMvQnJlYWRjcnVtYi9zcmMvQnJlYWRjcnVtYi52dWUiLCIuLi8uLi9zcmMvbGF5b3V0L2NvbXBvbmVudHMvVG9vbEhlYWRlci52dWUiLCIuLi8uLi9zcmMvbGF5b3V0L2NvbXBvbmVudHMvdXNlUmVuZGVyTGF5b3V0LnRzeCIsIi4uLy4uL3NyYy9sYXlvdXQvTGF5b3V0LnZ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0NsaWVudCB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5cbmNvbnN0IHJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbihlbnRyaWVzKSB7XG4gIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IGVudHJ5LnRhcmdldC5fX3Jlc2l6ZUxpc3RlbmVyc19fIHx8IFtdO1xuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICBsaXN0ZW5lcnMuZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGFkZFJlc2l6ZUxpc3RlbmVyID0gZnVuY3Rpb24oZWxlbWVudCwgZm4pIHtcbiAgaWYgKCFpc0NsaWVudCB8fCAhZWxlbWVudClcbiAgICByZXR1cm47XG4gIGlmICghZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKSB7XG4gICAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fID0gW107XG4gICAgZWxlbWVudC5fX3JvX18gPSBuZXcgUmVzaXplT2JzZXJ2ZXIocmVzaXplSGFuZGxlcik7XG4gICAgZWxlbWVudC5fX3JvX18ub2JzZXJ2ZShlbGVtZW50KTtcbiAgfVxuICBlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18ucHVzaChmbik7XG59O1xuY29uc3QgcmVtb3ZlUmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCBmbikge1xuICB2YXIgX2E7XG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fKVxuICAgIHJldHVybjtcbiAgZWxlbWVudC5fX3Jlc2l6ZUxpc3RlbmVyc19fLnNwbGljZShlbGVtZW50Ll9fcmVzaXplTGlzdGVuZXJzX18uaW5kZXhPZihmbiksIDEpO1xuICBpZiAoIWVsZW1lbnQuX19yZXNpemVMaXN0ZW5lcnNfXy5sZW5ndGgpIHtcbiAgICAoX2EgPSBlbGVtZW50Ll9fcm9fXykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRpc2Nvbm5lY3QoKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgYWRkUmVzaXplTGlzdGVuZXIsIHJlbW92ZVJlc2l6ZUxpc3RlbmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNpemUtZXZlbnQyLm1qcy5tYXBcbiIsImNvbnN0IGN1YmljID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAqKiAzO1xufTtcbmNvbnN0IGVhc2VJbk91dEN1YmljID0gKHZhbHVlKSA9PiB2YWx1ZSA8IDAuNSA/IGN1YmljKHZhbHVlICogMikgLyAyIDogMSAtIGN1YmljKCgxIC0gdmFsdWUpICogMikgLyAyO1xuXG5leHBvcnQgeyBjdWJpYywgZWFzZUluT3V0Q3ViaWMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFuaW1hdGlvbjIubWpzLm1hcFxuIiwiY29uc3QgYnJlYWRjcnVtYktleSA9IFN5bWJvbChcImJyZWFkY3J1bWJLZXlcIik7XG5cbmV4cG9ydCB7IGJyZWFkY3J1bWJLZXkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWIyLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgc2hhbGxvd1JlZiwgcmVmLCBjb21wdXRlZCwgb25Nb3VudGVkLCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCBUcmFuc2l0aW9uLCB1bnJlZiwgd2l0aEN0eCwgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVTdHlsZSwgbm9ybWFsaXplQ2xhc3MsIHdpdGhNb2RpZmllcnMsIHJlbmRlclNsb3QsIGNyZWF0ZVZOb2RlLCBjcmVhdGVDb21tZW50Vk5vZGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgdXNlVGhyb3R0bGVGbiwgdXNlRXZlbnRMaXN0ZW5lciB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi9pY29uL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCB7IENhcmV0VG9wIH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleDIubWpzJztcbmltcG9ydCB7IGJhY2t0b3BQcm9wcywgYmFja3RvcEVtaXRzIH0gZnJvbSAnLi9iYWNrdG9wMy5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCB7IGVhc2VJbk91dEN1YmljIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvYW5pbWF0aW9uMi5tanMnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2Vycm9yMi5tanMnO1xuXG5jb25zdCBfaG9pc3RlZF8xID0gW1wib25DbGlja1wiXTtcbmNvbnN0IF9fZGVmYXVsdF9fID0ge1xuICBuYW1lOiBcIkVsQmFja3RvcFwiXG59O1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogYmFja3RvcFByb3BzLFxuICBlbWl0czogYmFja3RvcEVtaXRzLFxuICBzZXR1cChfX3Byb3BzLCB7IGVtaXQgfSkge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBDT01QT05FTlRfTkFNRSA9IFwiRWxCYWNrdG9wXCI7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJiYWNrdG9wXCIpO1xuICAgIGNvbnN0IGVsID0gc2hhbGxvd1JlZigpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHNoYWxsb3dSZWYoKTtcbiAgICBjb25zdCB2aXNpYmxlID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCBiYWNrVG9wU3R5bGUgPSBjb21wdXRlZCgoKSA9PiAoe1xuICAgICAgcmlnaHQ6IGAke3Byb3BzLnJpZ2h0fXB4YCxcbiAgICAgIGJvdHRvbTogYCR7cHJvcHMuYm90dG9tfXB4YFxuICAgIH0pKTtcbiAgICBjb25zdCBzY3JvbGxUb1RvcCA9ICgpID0+IHtcbiAgICAgIGlmICghZWwudmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGJlZ2luVGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBiZWdpblZhbHVlID0gZWwudmFsdWUuc2Nyb2xsVG9wO1xuICAgICAgY29uc3QgZnJhbWVGdW5jID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWVsLnZhbHVlKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSAoRGF0ZS5ub3coKSAtIGJlZ2luVGltZSkgLyA1MDA7XG4gICAgICAgIGlmIChwcm9ncmVzcyA8IDEpIHtcbiAgICAgICAgICBlbC52YWx1ZS5zY3JvbGxUb3AgPSBiZWdpblZhbHVlICogKDEgLSBlYXNlSW5PdXRDdWJpYyhwcm9ncmVzcykpO1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmcmFtZUZ1bmMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnZhbHVlLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnJhbWVGdW5jKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmIChlbC52YWx1ZSlcbiAgICAgICAgdmlzaWJsZS52YWx1ZSA9IGVsLnZhbHVlLnNjcm9sbFRvcCA+PSBwcm9wcy52aXNpYmlsaXR5SGVpZ2h0O1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQpID0+IHtcbiAgICAgIHNjcm9sbFRvVG9wKCk7XG4gICAgICBlbWl0KFwiY2xpY2tcIiwgZXZlbnQpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlU2Nyb2xsVGhyb3R0bGVkID0gdXNlVGhyb3R0bGVGbihoYW5kbGVTY3JvbGwsIDMwMCk7XG4gICAgdXNlRXZlbnRMaXN0ZW5lcihjb250YWluZXIsIFwic2Nyb2xsXCIsIGhhbmRsZVNjcm9sbFRocm90dGxlZCk7XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGNvbnRhaW5lci52YWx1ZSA9IGRvY3VtZW50O1xuICAgICAgZWwudmFsdWUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICBpZiAocHJvcHMudGFyZ2V0KSB7XG4gICAgICAgIGVsLnZhbHVlID0gKF9hID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9wcy50YXJnZXQpKSAhPSBudWxsID8gX2EgOiB2b2lkIDA7XG4gICAgICAgIGlmICghZWwudmFsdWUpIHtcbiAgICAgICAgICB0aHJvd0Vycm9yKENPTVBPTkVOVF9OQU1FLCBgdGFyZ2V0IGlzIG5vdCBleGlzdGVkOiAke3Byb3BzLnRhcmdldH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250YWluZXIudmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKF9jdHgsIF9jYWNoZSkgPT4ge1xuICAgICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhUcmFuc2l0aW9uLCB7XG4gICAgICAgIG5hbWU6IGAke3VucmVmKG5zKS5uYW1lc3BhY2UudmFsdWV9LWZhZGUtaW5gXG4gICAgICB9LCB7XG4gICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgIHZpc2libGUudmFsdWUgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICBzdHlsZTogbm9ybWFsaXplU3R5bGUodW5yZWYoYmFja1RvcFN0eWxlKSksXG4gICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmIoKSksXG4gICAgICAgICAgICBvbkNsaWNrOiB3aXRoTW9kaWZpZXJzKGhhbmRsZUNsaWNrLCBbXCJzdG9wXCJdKVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgKCkgPT4gW1xuICAgICAgICAgICAgICBjcmVhdGVWTm9kZSh1bnJlZihFbEljb24pLCB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKHVucmVmKG5zKS5lKFwiaWNvblwiKSlcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUodW5yZWYoQ2FyZXRUb3ApKVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgfSwgOCwgW1wiY2xhc3NcIl0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0sIDE0LCBfaG9pc3RlZF8xKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgIF0pLFxuICAgICAgICBfOiAzXG4gICAgICB9LCA4LCBbXCJuYW1lXCJdKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciBCYWNrdG9wID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9iYWNrdG9wL3NyYy9iYWNrdG9wLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBCYWNrdG9wIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2t0b3A0Lm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgQmFja3RvcCBmcm9tICcuL3NyYy9iYWNrdG9wNC5tanMnO1xuZXhwb3J0IHsgYmFja3RvcEVtaXRzLCBiYWNrdG9wUHJvcHMgfSBmcm9tICcuL3NyYy9iYWNrdG9wMy5tanMnO1xuaW1wb3J0IHsgd2l0aEluc3RhbGwgfSBmcm9tICcuLi8uLi91dGlscy92dWUvaW5zdGFsbDIubWpzJztcblxuY29uc3QgRWxCYWNrdG9wID0gd2l0aEluc3RhbGwoQmFja3RvcCk7XG5cbmV4cG9ydCB7IEVsQmFja3RvcCwgRWxCYWNrdG9wIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCJjb25zdCBiYWNrdG9wUHJvcHMgPSB7XG4gIHZpc2liaWxpdHlIZWlnaHQ6IHtcbiAgICB0eXBlOiBOdW1iZXIsXG4gICAgZGVmYXVsdDogMjAwXG4gIH0sXG4gIHRhcmdldDoge1xuICAgIHR5cGU6IFN0cmluZyxcbiAgICBkZWZhdWx0OiBcIlwiXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDQwXG4gIH0sXG4gIGJvdHRvbToge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA0MFxuICB9XG59O1xuY29uc3QgYmFja3RvcEVtaXRzID0ge1xuICBjbGljazogKGV2dCkgPT4gZXZ0IGluc3RhbmNlb2YgTW91c2VFdmVudFxufTtcblxuZXhwb3J0IHsgYmFja3RvcEVtaXRzLCBiYWNrdG9wUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhY2t0b3AzLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmLCBwcm92aWRlLCBvbk1vdW50ZWQsIG9wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrLCBub3JtYWxpemVDbGFzcywgdW5yZWYsIHJlbmRlclNsb3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi90b2tlbnMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnJlYWRjcnVtYlByb3BzIH0gZnJvbSAnLi9icmVhZGNydW1iMy5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCB7IGJyZWFkY3J1bWJLZXkgfSBmcm9tICcuLi8uLi8uLi90b2tlbnMvYnJlYWRjcnVtYjIubWpzJztcblxuY29uc3QgX19kZWZhdWx0X18gPSB7XG4gIG5hbWU6IFwiRWxCcmVhZGNydW1iXCJcbn07XG5jb25zdCBfc2ZjX21haW4gPSAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ29tcG9uZW50KHtcbiAgLi4uX19kZWZhdWx0X18sXG4gIHByb3BzOiBicmVhZGNydW1iUHJvcHMsXG4gIHNldHVwKF9fcHJvcHMpIHtcbiAgICBjb25zdCBwcm9wcyA9IF9fcHJvcHM7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJicmVhZGNydW1iXCIpO1xuICAgIGNvbnN0IGJyZWFkY3J1bWIgPSByZWYoKTtcbiAgICBwcm92aWRlKGJyZWFkY3J1bWJLZXksIHByb3BzKTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgaXRlbXMgPSBicmVhZGNydW1iLnZhbHVlLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke25zLmUoXCJpdGVtXCIpfWApO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIiwgXCJwYWdlXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgIHJlZl9rZXk6IFwiYnJlYWRjcnVtYlwiLFxuICAgICAgICByZWY6IGJyZWFkY3J1bWIsXG4gICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihucykuYigpKSxcbiAgICAgICAgXCJhcmlhLWxhYmVsXCI6IFwiQnJlYWRjcnVtYlwiLFxuICAgICAgICByb2xlOiBcIm5hdmlnYXRpb25cIlxuICAgICAgfSwgW1xuICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgIF0sIDIpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIEJyZWFkY3J1bWIgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvc3JjL2JyZWFkY3J1bWIudnVlXCJdXSk7XG5cbmV4cG9ydCB7IEJyZWFkY3J1bWIgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYjQubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCB7IGJ1aWxkUHJvcHMgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcbmltcG9ydCB7IGljb25Qcm9wVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9pY29uMi5tanMnO1xuXG5jb25zdCBicmVhZGNydW1iUHJvcHMgPSBidWlsZFByb3BzKHtcbiAgc2VwYXJhdG9yOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiL1wiXG4gIH0sXG4gIHNlcGFyYXRvckljb246IHtcbiAgICB0eXBlOiBpY29uUHJvcFR5cGUsXG4gICAgZGVmYXVsdDogXCJcIlxuICB9XG59KTtcblxuZXhwb3J0IHsgYnJlYWRjcnVtYlByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icmVhZGNydW1iMy5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgaW5qZWN0LCB0b1JlZnMsIHJlZiwgb3BlbkJsb2NrLCBjcmVhdGVFbGVtZW50QmxvY2ssIG5vcm1hbGl6ZUNsYXNzLCB1bnJlZiwgY3JlYXRlRWxlbWVudFZOb2RlLCByZW5kZXJTbG90LCBjcmVhdGVCbG9jaywgd2l0aEN0eCwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHRvRGlzcGxheVN0cmluZyB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi9pY29uL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi90b2tlbnMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnJlYWRjcnVtYkl0ZW1Qcm9wcyB9IGZyb20gJy4vYnJlYWRjcnVtYi1pdGVtMy5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IHsgYnJlYWRjcnVtYktleSB9IGZyb20gJy4uLy4uLy4uL3Rva2Vucy9icmVhZGNydW1iMi5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcblxuY29uc3QgX19kZWZhdWx0X18gPSB7XG4gIG5hbWU6IFwiRWxCcmVhZGNydW1iSXRlbVwiXG59O1xuY29uc3QgX3NmY19tYWluID0gLyogQF9fUFVSRV9fICovIGRlZmluZUNvbXBvbmVudCh7XG4gIC4uLl9fZGVmYXVsdF9fLFxuICBwcm9wczogYnJlYWRjcnVtYkl0ZW1Qcm9wcyxcbiAgc2V0dXAoX19wcm9wcykge1xuICAgIGNvbnN0IHByb3BzID0gX19wcm9wcztcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGJyZWFkY3J1bWJDb250ZXh0ID0gaW5qZWN0KGJyZWFkY3J1bWJLZXksIHZvaWQgMCk7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJicmVhZGNydW1iXCIpO1xuICAgIGNvbnN0IHsgc2VwYXJhdG9yLCBzZXBhcmF0b3JJY29uIH0gPSB0b1JlZnMoYnJlYWRjcnVtYkNvbnRleHQpO1xuICAgIGNvbnN0IHJvdXRlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlcjtcbiAgICBjb25zdCBsaW5rID0gcmVmKCk7XG4gICAgY29uc3Qgb25DbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMudG8gfHwgIXJvdXRlcilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcHJvcHMucmVwbGFjZSA/IHJvdXRlci5yZXBsYWNlKHByb3BzLnRvKSA6IHJvdXRlci5wdXNoKHByb3BzLnRvKTtcbiAgICB9O1xuICAgIHJldHVybiAoX2N0eCwgX2NhY2hlKSA9PiB7XG4gICAgICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcInNwYW5cIiwge1xuICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3ModW5yZWYobnMpLmUoXCJpdGVtXCIpKVxuICAgICAgfSwgW1xuICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJzcGFuXCIsIHtcbiAgICAgICAgICByZWZfa2V5OiBcImxpbmtcIixcbiAgICAgICAgICByZWY6IGxpbmssXG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFt1bnJlZihucykuZShcImlubmVyXCIpLCB1bnJlZihucykuaXMoXCJsaW5rXCIsICEhX2N0eC50byldKSxcbiAgICAgICAgICByb2xlOiBcImxpbmtcIixcbiAgICAgICAgICBvbkNsaWNrXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgICAgXSwgMiksXG4gICAgICAgIHVucmVmKHNlcGFyYXRvckljb24pID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayh1bnJlZihFbEljb24pLCB7XG4gICAgICAgICAga2V5OiAwLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihucykuZShcInNlcGFyYXRvclwiKSlcbiAgICAgICAgfSwge1xuICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhyZXNvbHZlRHluYW1pY0NvbXBvbmVudCh1bnJlZihzZXBhcmF0b3JJY29uKSkpKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF86IDFcbiAgICAgICAgfSwgOCwgW1wiY2xhc3NcIl0pKSA6IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwic3BhblwiLCB7XG4gICAgICAgICAga2V5OiAxLFxuICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyh1bnJlZihucykuZShcInNlcGFyYXRvclwiKSksXG4gICAgICAgICAgcm9sZTogXCJwcmVzZW50YXRpb25cIlxuICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcodW5yZWYoc2VwYXJhdG9yKSksIDMpKVxuICAgICAgXSwgMik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgQnJlYWRjcnVtYkl0ZW0gPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL2JyZWFkY3J1bWIvc3JjL2JyZWFkY3J1bWItaXRlbS52dWVcIl1dKTtcblxuZXhwb3J0IHsgQnJlYWRjcnVtYkl0ZW0gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJlYWRjcnVtYi1pdGVtNC5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcblxuY29uc3QgYnJlYWRjcnVtYkl0ZW1Qcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICB0bzoge1xuICAgIHR5cGU6IGRlZmluZVByb3BUeXBlKFtTdHJpbmcsIE9iamVjdF0pLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgcmVwbGFjZToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfVxufSk7XG5cbmV4cG9ydCB7IGJyZWFkY3J1bWJJdGVtUHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyZWFkY3J1bWItaXRlbTMubWpzLm1hcFxuIiwiaW1wb3J0ICcuLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCBCcmVhZGNydW1iIGZyb20gJy4vc3JjL2JyZWFkY3J1bWI0Lm1qcyc7XG5pbXBvcnQgQnJlYWRjcnVtYkl0ZW0gZnJvbSAnLi9zcmMvYnJlYWRjcnVtYi1pdGVtNC5tanMnO1xuZXhwb3J0IHsgYnJlYWRjcnVtYlByb3BzIH0gZnJvbSAnLi9zcmMvYnJlYWRjcnVtYjMubWpzJztcbmV4cG9ydCB7IGJyZWFkY3J1bWJJdGVtUHJvcHMgfSBmcm9tICcuL3NyYy9icmVhZGNydW1iLWl0ZW0zLm1qcyc7XG5pbXBvcnQgeyB3aXRoSW5zdGFsbCwgd2l0aE5vb3BJbnN0YWxsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdnVlL2luc3RhbGwyLm1qcyc7XG5cbmNvbnN0IEVsQnJlYWRjcnVtYiA9IHdpdGhJbnN0YWxsKEJyZWFkY3J1bWIsIHtcbiAgQnJlYWRjcnVtYkl0ZW1cbn0pO1xuY29uc3QgRWxCcmVhZGNydW1iSXRlbSA9IHdpdGhOb29wSW5zdGFsbChCcmVhZGNydW1iSXRlbSk7XG5cbmV4cG9ydCB7IEVsQnJlYWRjcnVtYiwgRWxCcmVhZGNydW1iSXRlbSwgRWxCcmVhZGNydW1iIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYWRkUmVzaXplTGlzdGVuZXIsIHJlbW92ZVJlc2l6ZUxpc3RlbmVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvZG9tL3Jlc2l6ZS1ldmVudDIubWpzJztcblxuY29uc3QgUmVzaXplID0ge1xuICBiZWZvcmVNb3VudChlbCwgYmluZGluZykge1xuICAgIGVsLl9oYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBlbCAmJiAoKF9hID0gYmluZGluZy52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmNhbGwoYmluZGluZywgZWwpKTtcbiAgICB9O1xuICAgIGFkZFJlc2l6ZUxpc3RlbmVyKGVsLCBlbC5faGFuZGxlUmVzaXplKTtcbiAgfSxcbiAgYmVmb3JlVW5tb3VudChlbCkge1xuICAgIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKGVsLCBlbC5faGFuZGxlUmVzaXplKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgUmVzaXplIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi8uLi8uLi9jb25zdGFudHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBFVkVOVF9DT0RFIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzL2FyaWEyLm1qcyc7XG5pbXBvcnQgeyB0cmlnZ2VyRXZlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9kb20vYXJpYTIubWpzJztcblxuY2xhc3MgU3ViTWVudSB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgZG9tTm9kZSkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgdGhpcy5zdWJJbmRleCA9IDA7XG4gICAgdGhpcy5zdWJJbmRleCA9IDA7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnN1Yk1lbnVJdGVtcyA9IHRoaXMuZG9tTm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwibGlcIik7XG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgfVxuICBnb3RvU3ViSW5kZXgoaWR4KSB7XG4gICAgaWYgKGlkeCA9PT0gdGhpcy5zdWJNZW51SXRlbXMubGVuZ3RoKSB7XG4gICAgICBpZHggPSAwO1xuICAgIH0gZWxzZSBpZiAoaWR4IDwgMCkge1xuICAgICAgaWR4ID0gdGhpcy5zdWJNZW51SXRlbXMubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgO1xuICAgIHRoaXMuc3ViTWVudUl0ZW1zW2lkeF0uZm9jdXMoKTtcbiAgICB0aGlzLnN1YkluZGV4ID0gaWR4O1xuICB9XG4gIGFkZExpc3RlbmVycygpIHtcbiAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5wYXJlbnQuZG9tTm9kZTtcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHRoaXMuc3ViTWVudUl0ZW1zLCAoZWwpID0+IHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgICBsZXQgcHJldkRlZiA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmNvZGUpIHtcbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUuZG93bjoge1xuICAgICAgICAgICAgdGhpcy5nb3RvU3ViSW5kZXgodGhpcy5zdWJJbmRleCArIDEpO1xuICAgICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnVwOiB7XG4gICAgICAgICAgICB0aGlzLmdvdG9TdWJJbmRleCh0aGlzLnN1YkluZGV4IC0gMSk7XG4gICAgICAgICAgICBwcmV2RGVmID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUudGFiOiB7XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQocGFyZW50Tm9kZSwgXCJtb3VzZWxlYXZlXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgRVZFTlRfQ09ERS5lbnRlcjpcbiAgICAgICAgICBjYXNlIEVWRU5UX0NPREUuc3BhY2U6IHtcbiAgICAgICAgICAgIHByZXZEZWYgPSB0cnVlO1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGljaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcmV2RGVmKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBTdWJNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Ym1lbnUyLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uLy4uL2NvbnN0YW50cy9pbmRleDIubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3VibWVudTIubWpzJztcbmltcG9ydCB7IEVWRU5UX0NPREUgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudHMvYXJpYTIubWpzJztcbmltcG9ydCB7IHRyaWdnZXJFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2RvbS9hcmlhMi5tanMnO1xuXG5jbGFzcyBNZW51SXRlbSB7XG4gIGNvbnN0cnVjdG9yKGRvbU5vZGUsIG5hbWVzcGFjZSkge1xuICAgIHRoaXMuZG9tTm9kZSA9IGRvbU5vZGU7XG4gICAgdGhpcy5zdWJtZW51ID0gbnVsbDtcbiAgICB0aGlzLnN1Ym1lbnUgPSBudWxsO1xuICAgIHRoaXMuaW5pdChuYW1lc3BhY2UpO1xuICB9XG4gIGluaXQobmFtZXNwYWNlKSB7XG4gICAgdGhpcy5kb21Ob2RlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICBjb25zdCBtZW51Q2hpbGQgPSB0aGlzLmRvbU5vZGUucXVlcnlTZWxlY3RvcihgLiR7bmFtZXNwYWNlfS1tZW51YCk7XG4gICAgaWYgKG1lbnVDaGlsZCkge1xuICAgICAgdGhpcy5zdWJtZW51ID0gbmV3IFN1Yk1lbnUodGhpcywgbWVudUNoaWxkKTtcbiAgICB9XG4gICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgfVxuICBhZGRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuICAgICAgbGV0IHByZXZEZWYgPSBmYWxzZTtcbiAgICAgIHN3aXRjaCAoZXZlbnQuY29kZSkge1xuICAgICAgICBjYXNlIEVWRU5UX0NPREUuZG93bjoge1xuICAgICAgICAgIHRyaWdnZXJFdmVudChldmVudC5jdXJyZW50VGFyZ2V0LCBcIm1vdXNlZW50ZXJcIik7XG4gICAgICAgICAgdGhpcy5zdWJtZW51ICYmIHRoaXMuc3VibWVudS5nb3RvU3ViSW5kZXgoMCk7XG4gICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnVwOiB7XG4gICAgICAgICAgdHJpZ2dlckV2ZW50KGV2ZW50LmN1cnJlbnRUYXJnZXQsIFwibW91c2VlbnRlclwiKTtcbiAgICAgICAgICB0aGlzLnN1Ym1lbnUgJiYgdGhpcy5zdWJtZW51LmdvdG9TdWJJbmRleCh0aGlzLnN1Ym1lbnUuc3ViTWVudUl0ZW1zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgIHByZXZEZWYgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRVZFTlRfQ09ERS50YWI6IHtcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoZXZlbnQuY3VycmVudFRhcmdldCwgXCJtb3VzZWxlYXZlXCIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgRVZFTlRfQ09ERS5lbnRlcjpcbiAgICAgICAgY2FzZSBFVkVOVF9DT0RFLnNwYWNlOiB7XG4gICAgICAgICAgcHJldkRlZiA9IHRydWU7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldC5jbGljaygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJldkRlZikge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbnVJdGVtIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtaXRlbTIubWpzLm1hcFxuIiwiaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4vbWVudS1pdGVtMi5tanMnO1xuXG5jbGFzcyBNZW51IHtcbiAgY29uc3RydWN0b3IoZG9tTm9kZSwgbmFtZXNwYWNlKSB7XG4gICAgdGhpcy5kb21Ob2RlID0gZG9tTm9kZTtcbiAgICB0aGlzLmluaXQobmFtZXNwYWNlKTtcbiAgfVxuICBpbml0KG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IG1lbnVDaGlsZHJlbiA9IHRoaXMuZG9tTm9kZS5jaGlsZE5vZGVzO1xuICAgIEFycmF5LmZyb20obWVudUNoaWxkcmVuKS5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIG5ldyBNZW51SXRlbShjaGlsZCwgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtYmFyMi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9wZW5CbG9jaywgY3JlYXRlQmxvY2ssIFRyYW5zaXRpb24sIG1lcmdlUHJvcHMsIHdpdGhDdHgsIHJlbmRlclNsb3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi8uLi9ob29rcy9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgX2V4cG9ydF9zZmMgZnJvbSAnLi4vLi4vLi4vX3ZpcnR1YWwvcGx1Z2luLXZ1ZV9leHBvcnQtaGVscGVyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzLCBoYXNDbGFzcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS9zdHlsZTIubWpzJztcblxuY29uc3QgX3NmY19tYWluID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogXCJFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb25cIixcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgbnMgPSB1c2VOYW1lc3BhY2UoXCJtZW51XCIpO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHtcbiAgICAgIG9uQmVmb3JlRW50ZXI6IChlbCkgPT4gZWwuc3R5bGUub3BhY2l0eSA9IFwiMC4yXCIsXG4gICAgICBvbkVudGVyKGVsLCBkb25lKSB7XG4gICAgICAgIGFkZENsYXNzKGVsLCBgJHtucy5uYW1lc3BhY2UudmFsdWV9LW9wYWNpdHktdHJhbnNpdGlvbmApO1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sXG4gICAgICBvbkFmdGVyRW50ZXIoZWwpIHtcbiAgICAgICAgcmVtb3ZlQ2xhc3MoZWwsIGAke25zLm5hbWVzcGFjZS52YWx1ZX0tb3BhY2l0eS10cmFuc2l0aW9uYCk7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBcIlwiO1xuICAgICAgfSxcbiAgICAgIG9uQmVmb3JlTGVhdmUoZWwpIHtcbiAgICAgICAgaWYgKCFlbC5kYXRhc2V0KSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGVsLmRhdGFzZXQgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSkpIHtcbiAgICAgICAgICByZW1vdmVDbGFzcyhlbCwgbnMubShcImNvbGxhcHNlXCIpKTtcbiAgICAgICAgICBlbC5kYXRhc2V0Lm9sZE92ZXJmbG93ID0gZWwuc3R5bGUub3ZlcmZsb3c7XG4gICAgICAgICAgZWwuZGF0YXNldC5zY3JvbGxXaWR0aCA9IGVsLmNsaWVudFdpZHRoLnRvU3RyaW5nKCk7XG4gICAgICAgICAgYWRkQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2xhc3MoZWwsIG5zLm0oXCJjb2xsYXBzZVwiKSk7XG4gICAgICAgICAgZWwuZGF0YXNldC5vbGRPdmVyZmxvdyA9IGVsLnN0eWxlLm92ZXJmbG93O1xuICAgICAgICAgIGVsLmRhdGFzZXQuc2Nyb2xsV2lkdGggPSBlbC5jbGllbnRXaWR0aC50b1N0cmluZygpO1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCBucy5tKFwiY29sbGFwc2VcIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gYCR7ZWwuc2Nyb2xsV2lkdGh9cHhgO1xuICAgICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgICB9LFxuICAgICAgb25MZWF2ZShlbCkge1xuICAgICAgICBhZGRDbGFzcyhlbCwgXCJob3Jpem9udGFsLWNvbGxhcHNlLXRyYW5zaXRpb25cIik7XG4gICAgICAgIGVsLnN0eWxlLndpZHRoID0gYCR7ZWwuZGF0YXNldC5zY3JvbGxXaWR0aH1weGA7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgbGlzdGVuZXJzXG4gICAgfTtcbiAgfVxufSk7XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhUcmFuc2l0aW9uLCBtZXJnZVByb3BzKHsgbW9kZTogXCJvdXQtaW5cIiB9LCBfY3R4Lmxpc3RlbmVycyksIHtcbiAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgIF0pLFxuICAgIF86IDNcbiAgfSwgMTYpO1xufVxudmFyIEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfZXhwb3J0X3NmYyhfc2ZjX21haW4sIFtbXCJyZW5kZXJcIiwgX3NmY19yZW5kZXJdLCBbXCJfX2ZpbGVcIiwgXCIvaG9tZS9ydW5uZXIvd29yay9lbGVtZW50LXBsdXMvZWxlbWVudC1wbHVzL3BhY2thZ2VzL2NvbXBvbmVudHMvbWVudS9zcmMvbWVudS1jb2xsYXBzZS10cmFuc2l0aW9uLnZ1ZVwiXV0pO1xuXG5leHBvcnQgeyBFbE1lbnVDb2xsYXBzZVRyYW5zaXRpb24gYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVudS1jb2xsYXBzZS10cmFuc2l0aW9uMi5tanMubWFwXG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIHVzZU1lbnUoaW5zdGFuY2UsIGN1cnJlbnRJbmRleCkge1xuICBjb25zdCBpbmRleFBhdGggPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGluc3RhbmNlLnBhcmVudDtcbiAgICBjb25zdCBwYXRoID0gW2N1cnJlbnRJbmRleC52YWx1ZV07XG4gICAgd2hpbGUgKHBhcmVudC50eXBlLm5hbWUgIT09IFwiRWxNZW51XCIpIHtcbiAgICAgIGlmIChwYXJlbnQucHJvcHMuaW5kZXgpIHtcbiAgICAgICAgcGF0aC51bnNoaWZ0KHBhcmVudC5wcm9wcy5pbmRleCk7XG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcGF0aDtcbiAgfSk7XG4gIGNvbnN0IHBhcmVudE1lbnUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGluc3RhbmNlLnBhcmVudDtcbiAgICB3aGlsZSAocGFyZW50ICYmICFbXCJFbE1lbnVcIiwgXCJFbFN1Yk1lbnVcIl0uaW5jbHVkZXMocGFyZW50LnR5cGUubmFtZSkpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBhcmVudE1lbnUsXG4gICAgaW5kZXhQYXRoXG4gIH07XG59XG5cbmV4cG9ydCB7IHVzZU1lbnUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lbnUyLm1qcy5tYXBcbiIsImltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IFRpbnlDb2xvciB9IGZyb20gJ0BjdHJsL3Rpbnljb2xvcic7XG5cbmZ1bmN0aW9uIHVzZU1lbnVDb2xvcihwcm9wcykge1xuICBjb25zdCBtZW51QmFyQ29sb3IgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgY29uc3QgY29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgVGlueUNvbG9yKGNvbG9yKS5zaGFkZSgyMCkudG9TdHJpbmcoKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWVudUJhckNvbG9yO1xufVxuXG5leHBvcnQgeyB1c2VNZW51Q29sb3IgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lbnUtY29sb3IyLm1qcy5tYXBcbiIsImltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgdXNlTWVudUNvbG9yIGZyb20gJy4vdXNlLW1lbnUtY29sb3IyLm1qcyc7XG5pbXBvcnQgeyB1c2VOYW1lc3BhY2UgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtbmFtZXNwYWNlL2luZGV4Mi5tanMnO1xuXG5jb25zdCB1c2VNZW51Q3NzVmFyID0gKHByb3BzLCBsZXZlbCkgPT4ge1xuICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcIm1lbnVcIik7XG4gIHJldHVybiBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIG5zLmNzc1ZhckJsb2NrKHtcbiAgICAgIFwidGV4dC1jb2xvclwiOiBwcm9wcy50ZXh0Q29sb3IgfHwgXCJcIixcbiAgICAgIFwiaG92ZXItdGV4dC1jb2xvclwiOiBwcm9wcy50ZXh0Q29sb3IgfHwgXCJcIixcbiAgICAgIFwiYmctY29sb3JcIjogcHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IFwiXCIsXG4gICAgICBcImhvdmVyLWJnLWNvbG9yXCI6IHVzZU1lbnVDb2xvcihwcm9wcykudmFsdWUgfHwgXCJcIixcbiAgICAgIFwiYWN0aXZlLWNvbG9yXCI6IHByb3BzLmFjdGl2ZVRleHRDb2xvciB8fCBcIlwiLFxuICAgICAgbGV2ZWw6IGAke2xldmVsfWBcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgeyB1c2VNZW51Q3NzVmFyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbWVudS1jc3MtdmFyMi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgY29tcHV0ZWQsIGluamVjdCwgcmVmLCByZWFjdGl2ZSwgd2F0Y2gsIHByb3ZpZGUsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCBoLCBGcmFnbWVudCwgd2l0aERpcmVjdGl2ZXMsIHZTaG93IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHVzZVRpbWVvdXRGbiB9IGZyb20gJ0B2dWV1c2UvY29yZSc7XG5pbXBvcnQgX0NvbGxhcHNlVHJhbnNpdGlvbiBmcm9tICcuLi8uLi9jb2xsYXBzZS10cmFuc2l0aW9uL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRWxUb29sdGlwIH0gZnJvbSAnLi4vLi4vdG9vbHRpcC9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgQXJyb3dEb3duLCBBcnJvd1JpZ2h0IH0gZnJvbSAnQGVsZW1lbnQtcGx1cy9pY29ucy12dWUnO1xuaW1wb3J0IHsgRWxJY29uIH0gZnJvbSAnLi4vLi4vaWNvbi9pbmRleDIubWpzJztcbmltcG9ydCB1c2VNZW51IGZyb20gJy4vdXNlLW1lbnUyLm1qcyc7XG5pbXBvcnQgeyB1c2VNZW51Q3NzVmFyIH0gZnJvbSAnLi91c2UtbWVudS1jc3MtdmFyMi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9wcm9wcy9ydW50aW1lMi5tanMnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCB7IHRocm93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvcjIubWpzJztcblxuY29uc3Qgc3ViTWVudVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGluZGV4OiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHJlcXVpcmVkOiB0cnVlXG4gIH0sXG4gIHNob3dUaW1lb3V0OiB7XG4gICAgdHlwZTogTnVtYmVyLFxuICAgIGRlZmF1bHQ6IDMwMFxuICB9LFxuICBoaWRlVGltZW91dDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiAzMDBcbiAgfSxcbiAgcG9wcGVyQ2xhc3M6IFN0cmluZyxcbiAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gIHBvcHBlckFwcGVuZFRvQm9keToge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdm9pZCAwXG4gIH0sXG4gIHBvcHBlck9mZnNldDoge1xuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZWZhdWx0OiA2XG4gIH1cbn0pO1xuY29uc3QgQ09NUE9ORU5UX05BTUUgPSBcIkVsU3ViTWVudVwiO1xudmFyIFN1Yk1lbnUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBDT01QT05FTlRfTkFNRSxcbiAgcHJvcHM6IHN1Yk1lbnVQcm9wcyxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMsIGV4cG9zZSB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCB7IGluZGV4UGF0aCwgcGFyZW50TWVudSB9ID0gdXNlTWVudShpbnN0YW5jZSwgY29tcHV0ZWQoKCkgPT4gcHJvcHMuaW5kZXgpKTtcbiAgICBjb25zdCBuc01lbnUgPSB1c2VOYW1lc3BhY2UoXCJtZW51XCIpO1xuICAgIGNvbnN0IG5zU3ViTWVudSA9IHVzZU5hbWVzcGFjZShcInN1Yi1tZW51XCIpO1xuICAgIGNvbnN0IHJvb3RNZW51ID0gaW5qZWN0KFwicm9vdE1lbnVcIik7XG4gICAgaWYgKCFyb290TWVudSlcbiAgICAgIHRocm93RXJyb3IoQ09NUE9ORU5UX05BTUUsIFwiY2FuIG5vdCBpbmplY3Qgcm9vdCBtZW51XCIpO1xuICAgIGNvbnN0IHN1Yk1lbnUgPSBpbmplY3QoYHN1Yk1lbnU6JHtwYXJlbnRNZW51LnZhbHVlLnVpZH1gKTtcbiAgICBpZiAoIXN1Yk1lbnUpXG4gICAgICB0aHJvd0Vycm9yKENPTVBPTkVOVF9OQU1FLCBcImNhbiBub3QgaW5qZWN0IHN1YiBtZW51XCIpO1xuICAgIGNvbnN0IGl0ZW1zID0gcmVmKHt9KTtcbiAgICBjb25zdCBzdWJNZW51cyA9IHJlZih7fSk7XG4gICAgbGV0IHRpbWVvdXQ7XG4gICAgY29uc3QgbW91c2VJbkNoaWxkID0gcmVmKGZhbHNlKTtcbiAgICBjb25zdCB2ZXJ0aWNhbFRpdGxlUmVmID0gcmVmKCk7XG4gICAgY29uc3QgdlBvcHBlciA9IHJlZihudWxsKTtcbiAgICBjb25zdCBjdXJyZW50UGxhY2VtZW50ID0gY29tcHV0ZWQoKCkgPT4gbW9kZS52YWx1ZSA9PT0gXCJob3Jpem9udGFsXCIgJiYgaXNGaXJzdExldmVsLnZhbHVlID8gXCJib3R0b20tc3RhcnRcIiA6IFwicmlnaHQtc3RhcnRcIik7XG4gICAgY29uc3Qgc3ViTWVudVRpdGxlSWNvbiA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIHJldHVybiBtb2RlLnZhbHVlID09PSBcImhvcml6b250YWxcIiAmJiBpc0ZpcnN0TGV2ZWwudmFsdWUgfHwgbW9kZS52YWx1ZSA9PT0gXCJ2ZXJ0aWNhbFwiICYmICFyb290TWVudS5wcm9wcy5jb2xsYXBzZSA/IEFycm93RG93biA6IEFycm93UmlnaHQ7XG4gICAgfSk7XG4gICAgY29uc3QgaXNGaXJzdExldmVsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHN1Yk1lbnUubGV2ZWwgPT09IDA7XG4gICAgfSk7XG4gICAgY29uc3QgYXBwZW5kVG9Cb2R5ID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLnBvcHBlckFwcGVuZFRvQm9keSA9PT0gdm9pZCAwID8gaXNGaXJzdExldmVsLnZhbHVlIDogQm9vbGVhbihwcm9wcy5wb3BwZXJBcHBlbmRUb0JvZHkpO1xuICAgIH0pO1xuICAgIGNvbnN0IG1lbnVUcmFuc2l0aW9uTmFtZSA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLmNvbGxhcHNlID8gYCR7bnNNZW51Lm5hbWVzcGFjZS52YWx1ZX0tem9vbS1pbi1sZWZ0YCA6IGAke25zTWVudS5uYW1lc3BhY2UudmFsdWV9LXpvb20taW4tdG9wYCk7XG4gICAgY29uc3QgZmFsbGJhY2tQbGFjZW1lbnRzID0gY29tcHV0ZWQoKCkgPT4gbW9kZS52YWx1ZSA9PT0gXCJob3Jpem9udGFsXCIgJiYgaXNGaXJzdExldmVsLnZhbHVlID8gW1xuICAgICAgXCJib3R0b20tc3RhcnRcIixcbiAgICAgIFwiYm90dG9tLWVuZFwiLFxuICAgICAgXCJ0b3Atc3RhcnRcIixcbiAgICAgIFwidG9wLWVuZFwiLFxuICAgICAgXCJyaWdodC1zdGFydFwiLFxuICAgICAgXCJsZWZ0LXN0YXJ0XCJcbiAgICBdIDogW1xuICAgICAgXCJyaWdodC1zdGFydFwiLFxuICAgICAgXCJsZWZ0LXN0YXJ0XCIsXG4gICAgICBcImJvdHRvbS1zdGFydFwiLFxuICAgICAgXCJib3R0b20tZW5kXCIsXG4gICAgICBcInRvcC1zdGFydFwiLFxuICAgICAgXCJ0b3AtZW5kXCJcbiAgICBdKTtcbiAgICBjb25zdCBvcGVuZWQgPSBjb21wdXRlZCgoKSA9PiByb290TWVudS5vcGVuZWRNZW51cy5pbmNsdWRlcyhwcm9wcy5pbmRleCkpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGxldCBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgT2JqZWN0LnZhbHVlcyhpdGVtcy52YWx1ZSkuZm9yRWFjaCgoaXRlbTIpID0+IHtcbiAgICAgICAgaWYgKGl0ZW0yLmFjdGl2ZSkge1xuICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBPYmplY3QudmFsdWVzKHN1Yk1lbnVzLnZhbHVlKS5mb3JFYWNoKChzdWJJdGVtKSA9PiB7XG4gICAgICAgIGlmIChzdWJJdGVtLmFjdGl2ZSkge1xuICAgICAgICAgIGlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gaXNBY3RpdmU7XG4gICAgfSk7XG4gICAgY29uc3QgYmFja2dyb3VuZENvbG9yID0gY29tcHV0ZWQoKCkgPT4gcm9vdE1lbnUucHJvcHMuYmFja2dyb3VuZENvbG9yIHx8IFwiXCIpO1xuICAgIGNvbnN0IGFjdGl2ZVRleHRDb2xvciA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLmFjdGl2ZVRleHRDb2xvciB8fCBcIlwiKTtcbiAgICBjb25zdCB0ZXh0Q29sb3IgPSBjb21wdXRlZCgoKSA9PiByb290TWVudS5wcm9wcy50ZXh0Q29sb3IgfHwgXCJcIik7XG4gICAgY29uc3QgbW9kZSA9IGNvbXB1dGVkKCgpID0+IHJvb3RNZW51LnByb3BzLm1vZGUpO1xuICAgIGNvbnN0IGl0ZW0gPSByZWFjdGl2ZSh7XG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICBpbmRleFBhdGgsXG4gICAgICBhY3RpdmVcbiAgICB9KTtcbiAgICBjb25zdCB0aXRsZVN0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgaWYgKG1vZGUudmFsdWUgIT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29sb3I6IHRleHRDb2xvci52YWx1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IGFjdGl2ZS52YWx1ZSA/IHJvb3RNZW51LnByb3BzLmFjdGl2ZVRleHRDb2xvciA/IGFjdGl2ZVRleHRDb2xvci52YWx1ZSA6IFwiXCIgOiBcInRyYW5zcGFyZW50XCIsXG4gICAgICAgIGNvbG9yOiBhY3RpdmUudmFsdWUgPyBhY3RpdmVUZXh0Q29sb3IudmFsdWUgOiB0ZXh0Q29sb3IudmFsdWVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgZG9EZXN0cm95ID0gKCkgPT4ge1xuICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICByZXR1cm4gKF9jID0gKF9iID0gKF9hID0gdlBvcHBlci52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnBvcHBlclJlZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLnBvcHBlckluc3RhbmNlUmVmKSA9PSBudWxsID8gdm9pZCAwIDogX2MuZGVzdHJveSgpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQ29sbGFwc2VUb2dnbGUgPSAodmFsdWUpID0+IHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgZG9EZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgIGlmIChyb290TWVudS5wcm9wcy5tZW51VHJpZ2dlciA9PT0gXCJob3ZlclwiICYmIHJvb3RNZW51LnByb3BzLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiIHx8IHJvb3RNZW51LnByb3BzLmNvbGxhcHNlICYmIHJvb3RNZW51LnByb3BzLm1vZGUgPT09IFwidmVydGljYWxcIiB8fCBwcm9wcy5kaXNhYmxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcm9vdE1lbnUuaGFuZGxlU3ViTWVudUNsaWNrKHtcbiAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICBpbmRleFBhdGg6IGluZGV4UGF0aC52YWx1ZSxcbiAgICAgICAgYWN0aXZlOiBhY3RpdmUudmFsdWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlTW91c2VlbnRlciA9IChldmVudCwgc2hvd1RpbWVvdXQgPSBwcm9wcy5zaG93VGltZW91dCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwiZm9jdXNcIiAmJiAhZXZlbnQucmVsYXRlZFRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocm9vdE1lbnUucHJvcHMubWVudVRyaWdnZXIgPT09IFwiY2xpY2tcIiAmJiByb290TWVudS5wcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCAhcm9vdE1lbnUucHJvcHMuY29sbGFwc2UgJiYgcm9vdE1lbnUucHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiIHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN1Yk1lbnUubW91c2VJbkNoaWxkLnZhbHVlID0gdHJ1ZTtcbiAgICAgIHRpbWVvdXQgPT0gbnVsbCA/IHZvaWQgMCA6IHRpbWVvdXQoKTtcbiAgICAgICh7IHN0b3A6IHRpbWVvdXQgfSA9IHVzZVRpbWVvdXRGbigoKSA9PiB7XG4gICAgICAgIHJvb3RNZW51Lm9wZW5NZW51KHByb3BzLmluZGV4LCBpbmRleFBhdGgudmFsdWUpO1xuICAgICAgfSwgc2hvd1RpbWVvdXQpKTtcbiAgICAgIGlmIChhcHBlbmRUb0JvZHkudmFsdWUpIHtcbiAgICAgICAgKF9hID0gcGFyZW50TWVudS52YWx1ZS52bm9kZS5lbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJtb3VzZWVudGVyXCIpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlbGVhdmUgPSAoZGVlcERpc3BhdGNoID0gZmFsc2UpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICBpZiAocm9vdE1lbnUucHJvcHMubWVudVRyaWdnZXIgPT09IFwiY2xpY2tcIiAmJiByb290TWVudS5wcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCAhcm9vdE1lbnUucHJvcHMuY29sbGFwc2UgJiYgcm9vdE1lbnUucHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRpbWVvdXQgPT0gbnVsbCA/IHZvaWQgMCA6IHRpbWVvdXQoKTtcbiAgICAgIHN1Yk1lbnUubW91c2VJbkNoaWxkLnZhbHVlID0gZmFsc2U7XG4gICAgICAoeyBzdG9wOiB0aW1lb3V0IH0gPSB1c2VUaW1lb3V0Rm4oKCkgPT4gIW1vdXNlSW5DaGlsZC52YWx1ZSAmJiByb290TWVudS5jbG9zZU1lbnUocHJvcHMuaW5kZXgsIGluZGV4UGF0aC52YWx1ZSksIHByb3BzLmhpZGVUaW1lb3V0KSk7XG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5LnZhbHVlICYmIGRlZXBEaXNwYXRjaCkge1xuICAgICAgICBpZiAoKChfYSA9IGluc3RhbmNlLnBhcmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnR5cGUubmFtZSkgPT09IFwiRWxTdWJNZW51XCIpIHtcbiAgICAgICAgICAoX2IgPSBzdWJNZW51LmhhbmRsZU1vdXNlbGVhdmUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKHN1Yk1lbnUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiByb290TWVudS5wcm9wcy5jb2xsYXBzZSwgKHZhbHVlKSA9PiBoYW5kbGVDb2xsYXBzZVRvZ2dsZShCb29sZWFuKHZhbHVlKSkpO1xuICAgIHtcbiAgICAgIGNvbnN0IGFkZFN1Yk1lbnUgPSAoaXRlbTIpID0+IHtcbiAgICAgICAgc3ViTWVudXMudmFsdWVbaXRlbTIuaW5kZXhdID0gaXRlbTI7XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVtb3ZlU3ViTWVudSA9IChpdGVtMikgPT4ge1xuICAgICAgICBkZWxldGUgc3ViTWVudXMudmFsdWVbaXRlbTIuaW5kZXhdO1xuICAgICAgfTtcbiAgICAgIHByb3ZpZGUoYHN1Yk1lbnU6JHtpbnN0YW5jZS51aWR9YCwge1xuICAgICAgICBhZGRTdWJNZW51LFxuICAgICAgICByZW1vdmVTdWJNZW51LFxuICAgICAgICBoYW5kbGVNb3VzZWxlYXZlLFxuICAgICAgICBtb3VzZUluQ2hpbGQsXG4gICAgICAgIGxldmVsOiBzdWJNZW51LmxldmVsICsgMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGV4cG9zZSh7XG4gICAgICBvcGVuZWRcbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgcm9vdE1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICAgIHN1Yk1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICB9KTtcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgICAgc3ViTWVudS5yZW1vdmVTdWJNZW51KGl0ZW0pO1xuICAgICAgcm9vdE1lbnUucmVtb3ZlU3ViTWVudShpdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgY29uc3QgdGl0bGVUYWcgPSBbXG4gICAgICAgIChfYSA9IHNsb3RzLnRpdGxlKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChzbG90cyksXG4gICAgICAgIGgoRWxJY29uLCB7XG4gICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwiaWNvbi1hcnJvd1wiKVxuICAgICAgICB9LCB7IGRlZmF1bHQ6ICgpID0+IGgoc3ViTWVudVRpdGxlSWNvbi52YWx1ZSkgfSlcbiAgICAgIF07XG4gICAgICBjb25zdCB1bFN0eWxlID0gdXNlTWVudUNzc1Zhcihyb290TWVudS5wcm9wcywgc3ViTWVudS5sZXZlbCArIDEpO1xuICAgICAgY29uc3QgY2hpbGQgPSByb290TWVudS5pc01lbnVQb3B1cCA/IGgoRWxUb29sdGlwLCB7XG4gICAgICAgIHJlZjogdlBvcHBlcixcbiAgICAgICAgdmlzaWJsZTogb3BlbmVkLnZhbHVlLFxuICAgICAgICBlZmZlY3Q6IFwibGlnaHRcIixcbiAgICAgICAgcHVyZTogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiBwcm9wcy5wb3BwZXJPZmZzZXQsXG4gICAgICAgIHNob3dBcnJvdzogZmFsc2UsXG4gICAgICAgIHBlcnNpc3RlbnQ6IHRydWUsXG4gICAgICAgIHBvcHBlckNsYXNzOiBwcm9wcy5wb3BwZXJDbGFzcyxcbiAgICAgICAgcGxhY2VtZW50OiBjdXJyZW50UGxhY2VtZW50LnZhbHVlLFxuICAgICAgICB0ZWxlcG9ydGVkOiBhcHBlbmRUb0JvZHkudmFsdWUsXG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogZmFsbGJhY2tQbGFjZW1lbnRzLnZhbHVlLFxuICAgICAgICB0cmFuc2l0aW9uOiBtZW51VHJhbnNpdGlvbk5hbWUudmFsdWUsXG4gICAgICAgIGdwdUFjY2VsZXJhdGlvbjogZmFsc2VcbiAgICAgIH0sIHtcbiAgICAgICAgY29udGVudDogKCkgPT4ge1xuICAgICAgICAgIHZhciBfYTI7XG4gICAgICAgICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgICAgbnNNZW51Lm0obW9kZS52YWx1ZSksXG4gICAgICAgICAgICAgIG5zTWVudS5tKFwicG9wdXAtY29udGFpbmVyXCIpLFxuICAgICAgICAgICAgICBwcm9wcy5wb3BwZXJDbGFzc1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIG9uTW91c2VlbnRlcjogKGV2dCkgPT4gaGFuZGxlTW91c2VlbnRlcihldnQsIDEwMCksXG4gICAgICAgICAgICBvbk1vdXNlbGVhdmU6ICgpID0+IGhhbmRsZU1vdXNlbGVhdmUodHJ1ZSksXG4gICAgICAgICAgICBvbkZvY3VzOiAoZXZ0KSA9PiBoYW5kbGVNb3VzZWVudGVyKGV2dCwgMTAwKVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIGgoXCJ1bFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbXG4gICAgICAgICAgICAgICAgbnNNZW51LmIoKSxcbiAgICAgICAgICAgICAgICBuc01lbnUubShcInBvcHVwXCIpLFxuICAgICAgICAgICAgICAgIG5zTWVudS5tKGBwb3B1cC0ke2N1cnJlbnRQbGFjZW1lbnQudmFsdWV9YClcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3R5bGU6IHVsU3R5bGUudmFsdWVcbiAgICAgICAgICAgIH0sIFsoX2EyID0gc2xvdHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHNsb3RzKV0pXG4gICAgICAgICAgXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6ICgpID0+IGgoXCJkaXZcIiwge1xuICAgICAgICAgIGNsYXNzOiBuc1N1Yk1lbnUuZShcInRpdGxlXCIpLFxuICAgICAgICAgIHN0eWxlOiBbXG4gICAgICAgICAgICB0aXRsZVN0eWxlLnZhbHVlLFxuICAgICAgICAgICAgeyBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvci52YWx1ZSB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgICB9LCB0aXRsZVRhZylcbiAgICAgIH0pIDogaChGcmFnbWVudCwge30sIFtcbiAgICAgICAgaChcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwidGl0bGVcIiksXG4gICAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICAgIHRpdGxlU3R5bGUudmFsdWUsXG4gICAgICAgICAgICB7IGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLnZhbHVlIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlZjogdmVydGljYWxUaXRsZVJlZixcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGlja1xuICAgICAgICB9LCB0aXRsZVRhZyksXG4gICAgICAgIGgoX0NvbGxhcHNlVHJhbnNpdGlvbiwge30sIHtcbiAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EyO1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKGgoXCJ1bFwiLCB7XG4gICAgICAgICAgICAgIHJvbGU6IFwibWVudVwiLFxuICAgICAgICAgICAgICBjbGFzczogW25zTWVudS5iKCksIG5zTWVudS5tKFwiaW5saW5lXCIpXSxcbiAgICAgICAgICAgICAgc3R5bGU6IHVsU3R5bGUudmFsdWVcbiAgICAgICAgICAgIH0sIFsoX2EyID0gc2xvdHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hMi5jYWxsKHNsb3RzKV0pLCBbW3ZTaG93LCBvcGVuZWQudmFsdWVdXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSk7XG4gICAgICByZXR1cm4gaChcImxpXCIsIHtcbiAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICBuc1N1Yk1lbnUuYigpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcImFjdGl2ZVwiLCBhY3RpdmUudmFsdWUpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcIm9wZW5lZFwiLCBvcGVuZWQudmFsdWUpLFxuICAgICAgICAgIG5zU3ViTWVudS5pcyhcImRpc2FibGVkXCIsIHByb3BzLmRpc2FibGVkKVxuICAgICAgICBdLFxuICAgICAgICByb2xlOiBcIm1lbnVpdGVtXCIsXG4gICAgICAgIGFyaWFIYXNwb3B1cDogdHJ1ZSxcbiAgICAgICAgYXJpYUV4cGFuZGVkOiBvcGVuZWQudmFsdWUsXG4gICAgICAgIG9uTW91c2VlbnRlcjogaGFuZGxlTW91c2VlbnRlcixcbiAgICAgICAgb25Nb3VzZWxlYXZlOiAoKSA9PiBoYW5kbGVNb3VzZWxlYXZlKHRydWUpLFxuICAgICAgICBvbkZvY3VzOiBoYW5kbGVNb3VzZWVudGVyXG4gICAgICB9LCBbY2hpbGRdKTtcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgU3ViTWVudSBhcyBkZWZhdWx0LCBzdWJNZW51UHJvcHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1Yi1tZW51Mi5tanMubWFwXG4iLCJpbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGdldEN1cnJlbnRJbnN0YW5jZSwgcmVmLCBjb21wdXRlZCwgbmV4dFRpY2ssIHdhdGNoLCBwcm92aWRlLCByZWFjdGl2ZSwgb25Nb3VudGVkLCB3aXRoRGlyZWN0aXZlcywgaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi9pY29uL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgTW9yZSB9IGZyb20gJ0BlbGVtZW50LXBsdXMvaWNvbnMtdnVlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IE1lbnUkMSBmcm9tICcuL3V0aWxzL21lbnUtYmFyMi5tanMnO1xuaW1wb3J0IEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiBmcm9tICcuL21lbnUtY29sbGFwc2UtdHJhbnNpdGlvbjIubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3ViLW1lbnUyLm1qcyc7XG5pbXBvcnQgeyB1c2VNZW51Q3NzVmFyIH0gZnJvbSAnLi91c2UtbWVudS1jc3MtdmFyMi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcbmltcG9ydCB7IG11dGFibGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy90eXBlc2NyaXB0Mi5tanMnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzT2JqZWN0IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuaW1wb3J0IHsgdXNlTmFtZXNwYWNlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLW5hbWVzcGFjZS9pbmRleDIubWpzJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9yZXNpemUvaW5kZXgyLm1qcyc7XG5cbmNvbnN0IG1lbnVQcm9wcyA9IGJ1aWxkUHJvcHMoe1xuICBtb2RlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogW1wiaG9yaXpvbnRhbFwiLCBcInZlcnRpY2FsXCJdLFxuICAgIGRlZmF1bHQ6IFwidmVydGljYWxcIlxuICB9LFxuICBkZWZhdWx0QWN0aXZlOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRlZmF1bHQ6IFwiXCJcbiAgfSxcbiAgZGVmYXVsdE9wZW5lZHM6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShBcnJheSksXG4gICAgZGVmYXVsdDogKCkgPT4gbXV0YWJsZShbXSlcbiAgfSxcbiAgdW5pcXVlT3BlbmVkOiBCb29sZWFuLFxuICByb3V0ZXI6IEJvb2xlYW4sXG4gIG1lbnVUcmlnZ2VyOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIHZhbHVlczogW1wiaG92ZXJcIiwgXCJjbGlja1wiXSxcbiAgICBkZWZhdWx0OiBcImhvdmVyXCJcbiAgfSxcbiAgY29sbGFwc2U6IEJvb2xlYW4sXG4gIGJhY2tncm91bmRDb2xvcjogU3RyaW5nLFxuICB0ZXh0Q29sb3I6IFN0cmluZyxcbiAgYWN0aXZlVGV4dENvbG9yOiBTdHJpbmcsXG4gIGNvbGxhcHNlVHJhbnNpdGlvbjoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBlbGxpcHNpczoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9XG59KTtcbmNvbnN0IGNoZWNrSW5kZXhQYXRoID0gKGluZGV4UGF0aCkgPT4gQXJyYXkuaXNBcnJheShpbmRleFBhdGgpICYmIGluZGV4UGF0aC5ldmVyeSgocGF0aCkgPT4gaXNTdHJpbmcocGF0aCkpO1xuY29uc3QgbWVudUVtaXRzID0ge1xuICBjbG9zZTogKGluZGV4LCBpbmRleFBhdGgpID0+IGlzU3RyaW5nKGluZGV4KSAmJiBjaGVja0luZGV4UGF0aChpbmRleFBhdGgpLFxuICBvcGVuOiAoaW5kZXgsIGluZGV4UGF0aCkgPT4gaXNTdHJpbmcoaW5kZXgpICYmIGNoZWNrSW5kZXhQYXRoKGluZGV4UGF0aCksXG4gIHNlbGVjdDogKGluZGV4LCBpbmRleFBhdGgsIGl0ZW0sIHJvdXRlclJlc3VsdCkgPT4gaXNTdHJpbmcoaW5kZXgpICYmIGNoZWNrSW5kZXhQYXRoKGluZGV4UGF0aCkgJiYgaXNPYmplY3QoaXRlbSkgJiYgKHJvdXRlclJlc3VsdCA9PT0gdm9pZCAwIHx8IHJvdXRlclJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpXG59O1xudmFyIE1lbnUgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsTWVudVwiLFxuICBwcm9wczogbWVudVByb3BzLFxuICBlbWl0czogbWVudUVtaXRzLFxuICBzZXR1cChwcm9wcywgeyBlbWl0LCBzbG90cywgZXhwb3NlIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHJvdXRlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHJvdXRlcjtcbiAgICBjb25zdCBtZW51ID0gcmVmKCk7XG4gICAgY29uc3QgbnNNZW51ID0gdXNlTmFtZXNwYWNlKFwibWVudVwiKTtcbiAgICBjb25zdCBuc1N1Yk1lbnUgPSB1c2VOYW1lc3BhY2UoXCJzdWItbWVudVwiKTtcbiAgICBjb25zdCBvcGVuZWRNZW51cyA9IHJlZihwcm9wcy5kZWZhdWx0T3BlbmVkcyAmJiAhcHJvcHMuY29sbGFwc2UgPyBwcm9wcy5kZWZhdWx0T3BlbmVkcy5zbGljZSgwKSA6IFtdKTtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHJlZihwcm9wcy5kZWZhdWx0QWN0aXZlKTtcbiAgICBjb25zdCBpdGVtcyA9IHJlZih7fSk7XG4gICAgY29uc3Qgc3ViTWVudXMgPSByZWYoe30pO1xuICAgIGNvbnN0IGlzTWVudVBvcHVwID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgcmV0dXJuIHByb3BzLm1vZGUgPT09IFwiaG9yaXpvbnRhbFwiIHx8IHByb3BzLm1vZGUgPT09IFwidmVydGljYWxcIiAmJiBwcm9wcy5jb2xsYXBzZTtcbiAgICB9KTtcbiAgICBjb25zdCBpbml0TWVudSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGFjdGl2ZUl0ZW0gPSBhY3RpdmVJbmRleC52YWx1ZSAmJiBpdGVtcy52YWx1ZVthY3RpdmVJbmRleC52YWx1ZV07XG4gICAgICBpZiAoIWFjdGl2ZUl0ZW0gfHwgcHJvcHMubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgfHwgcHJvcHMuY29sbGFwc2UpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGluZGV4UGF0aCA9IGFjdGl2ZUl0ZW0uaW5kZXhQYXRoO1xuICAgICAgaW5kZXhQYXRoLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHN1Yk1lbnUgPSBzdWJNZW51cy52YWx1ZVtpbmRleF07XG4gICAgICAgIHN1Yk1lbnUgJiYgb3Blbk1lbnUoaW5kZXgsIHN1Yk1lbnUuaW5kZXhQYXRoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb3Blbk1lbnUgPSAoaW5kZXgsIGluZGV4UGF0aCkgPT4ge1xuICAgICAgaWYgKG9wZW5lZE1lbnVzLnZhbHVlLmluY2x1ZGVzKGluZGV4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHByb3BzLnVuaXF1ZU9wZW5lZCkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IG9wZW5lZE1lbnVzLnZhbHVlLmZpbHRlcigoaW5kZXgyKSA9PiBpbmRleFBhdGguaW5jbHVkZXMoaW5kZXgyKSk7XG4gICAgICB9XG4gICAgICBvcGVuZWRNZW51cy52YWx1ZS5wdXNoKGluZGV4KTtcbiAgICAgIGVtaXQoXCJvcGVuXCIsIGluZGV4LCBpbmRleFBhdGgpO1xuICAgIH07XG4gICAgY29uc3QgY2xvc2VNZW51ID0gKGluZGV4LCBpbmRleFBhdGgpID0+IHtcbiAgICAgIGNvbnN0IGkgPSBvcGVuZWRNZW51cy52YWx1ZS5pbmRleE9mKGluZGV4KTtcbiAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgICBlbWl0KFwiY2xvc2VcIiwgaW5kZXgsIGluZGV4UGF0aCk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVTdWJNZW51Q2xpY2sgPSAoe1xuICAgICAgaW5kZXgsXG4gICAgICBpbmRleFBhdGhcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBpc09wZW5lZCA9IG9wZW5lZE1lbnVzLnZhbHVlLmluY2x1ZGVzKGluZGV4KTtcbiAgICAgIGlmIChpc09wZW5lZCkge1xuICAgICAgICBjbG9zZU1lbnUoaW5kZXgsIGluZGV4UGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcGVuTWVudShpbmRleCwgaW5kZXhQYXRoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1lbnVJdGVtQ2xpY2sgPSAobWVudUl0ZW0pID0+IHtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiB8fCBwcm9wcy5jb2xsYXBzZSkge1xuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IFtdO1xuICAgICAgfVxuICAgICAgY29uc3QgeyBpbmRleCwgaW5kZXhQYXRoIH0gPSBtZW51SXRlbTtcbiAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwIHx8IGluZGV4UGF0aCA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAocHJvcHMucm91dGVyICYmIHJvdXRlcikge1xuICAgICAgICBjb25zdCByb3V0ZSA9IG1lbnVJdGVtLnJvdXRlIHx8IGluZGV4O1xuICAgICAgICBjb25zdCByb3V0ZXJSZXN1bHQgPSByb3V0ZXIucHVzaChyb3V0ZSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXMpXG4gICAgICAgICAgICBhY3RpdmVJbmRleC52YWx1ZSA9IGluZGV4O1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgICAgICBlbWl0KFwic2VsZWN0XCIsIGluZGV4LCBpbmRleFBhdGgsIHsgaW5kZXgsIGluZGV4UGF0aCwgcm91dGUgfSwgcm91dGVyUmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUluZGV4LnZhbHVlID0gaW5kZXg7XG4gICAgICAgIGVtaXQoXCJzZWxlY3RcIiwgaW5kZXgsIGluZGV4UGF0aCwgeyBpbmRleCwgaW5kZXhQYXRoIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgdXBkYXRlQWN0aXZlSW5kZXggPSAodmFsKSA9PiB7XG4gICAgICBjb25zdCBpdGVtc0luRGF0YSA9IGl0ZW1zLnZhbHVlO1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zSW5EYXRhW3ZhbF0gfHwgYWN0aXZlSW5kZXgudmFsdWUgJiYgaXRlbXNJbkRhdGFbYWN0aXZlSW5kZXgudmFsdWVdIHx8IGl0ZW1zSW5EYXRhW3Byb3BzLmRlZmF1bHRBY3RpdmVdO1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgYWN0aXZlSW5kZXgudmFsdWUgPSBpdGVtLmluZGV4O1xuICAgICAgICBpbml0TWVudSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlSW5kZXgudmFsdWUgPSB2YWw7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBuZXh0VGljaygoKSA9PiBpbnN0YW5jZS5wcm94eS4kZm9yY2VVcGRhdGUoKSk7XG4gICAgfTtcbiAgICB3YXRjaCgoKSA9PiBwcm9wcy5kZWZhdWx0QWN0aXZlLCAoY3VycmVudEFjdGl2ZSkgPT4ge1xuICAgICAgaWYgKCFpdGVtcy52YWx1ZVtjdXJyZW50QWN0aXZlXSkge1xuICAgICAgICBhY3RpdmVJbmRleC52YWx1ZSA9IFwiXCI7XG4gICAgICB9XG4gICAgICB1cGRhdGVBY3RpdmVJbmRleChjdXJyZW50QWN0aXZlKTtcbiAgICB9KTtcbiAgICB3YXRjaChpdGVtcy52YWx1ZSwgKCkgPT4gaW5pdE1lbnUoKSk7XG4gICAgd2F0Y2goKCkgPT4gcHJvcHMuY29sbGFwc2UsICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHZhbHVlKVxuICAgICAgICBvcGVuZWRNZW51cy52YWx1ZSA9IFtdO1xuICAgIH0pO1xuICAgIHtcbiAgICAgIGNvbnN0IGFkZFN1Yk1lbnUgPSAoaXRlbSkgPT4ge1xuICAgICAgICBzdWJNZW51cy52YWx1ZVtpdGVtLmluZGV4XSA9IGl0ZW07XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVtb3ZlU3ViTWVudSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBzdWJNZW51cy52YWx1ZVtpdGVtLmluZGV4XTtcbiAgICAgIH07XG4gICAgICBjb25zdCBhZGRNZW51SXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGl0ZW1zLnZhbHVlW2l0ZW0uaW5kZXhdID0gaXRlbTtcbiAgICAgIH07XG4gICAgICBjb25zdCByZW1vdmVNZW51SXRlbSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBpdGVtcy52YWx1ZVtpdGVtLmluZGV4XTtcbiAgICAgIH07XG4gICAgICBwcm92aWRlKFwicm9vdE1lbnVcIiwgcmVhY3RpdmUoe1xuICAgICAgICBwcm9wcyxcbiAgICAgICAgb3BlbmVkTWVudXMsXG4gICAgICAgIGl0ZW1zLFxuICAgICAgICBzdWJNZW51cyxcbiAgICAgICAgYWN0aXZlSW5kZXgsXG4gICAgICAgIGlzTWVudVBvcHVwLFxuICAgICAgICBhZGRNZW51SXRlbSxcbiAgICAgICAgcmVtb3ZlTWVudUl0ZW0sXG4gICAgICAgIGFkZFN1Yk1lbnUsXG4gICAgICAgIHJlbW92ZVN1Yk1lbnUsXG4gICAgICAgIG9wZW5NZW51LFxuICAgICAgICBjbG9zZU1lbnUsXG4gICAgICAgIGhhbmRsZU1lbnVJdGVtQ2xpY2ssXG4gICAgICAgIGhhbmRsZVN1Yk1lbnVDbGlja1xuICAgICAgfSkpO1xuICAgICAgcHJvdmlkZShgc3ViTWVudToke2luc3RhbmNlLnVpZH1gLCB7XG4gICAgICAgIGFkZFN1Yk1lbnUsXG4gICAgICAgIHJlbW92ZVN1Yk1lbnUsXG4gICAgICAgIG1vdXNlSW5DaGlsZDogcmVmKGZhbHNlKSxcbiAgICAgICAgbGV2ZWw6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgaW5pdE1lbnUoKTtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICBuZXcgTWVudSQxKGluc3RhbmNlLnZub2RlLmVsLCBuc01lbnUubmFtZXNwYWNlLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB7XG4gICAgICBjb25zdCBvcGVuID0gKGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaW5kZXhQYXRoIH0gPSBzdWJNZW51cy52YWx1ZVtpbmRleF07XG4gICAgICAgIGluZGV4UGF0aC5mb3JFYWNoKChpKSA9PiBvcGVuTWVudShpLCBpbmRleFBhdGgpKTtcbiAgICAgIH07XG4gICAgICBleHBvc2Uoe1xuICAgICAgICBvcGVuLFxuICAgICAgICBjbG9zZTogY2xvc2VNZW51LFxuICAgICAgICBoYW5kbGVSZXNpemVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBmbGF0dGVkQ2hpbGRyZW4gPSAoY2hpbGRyZW4pID0+IHtcbiAgICAgIGNvbnN0IHZub2RlcyA9IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW4gOiBbY2hpbGRyZW5dO1xuICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICB2bm9kZXMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGQuY2hpbGRyZW4pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goLi4uZmxhdHRlZENoaWxkcmVuKGNoaWxkLmNoaWxkcmVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBjb25zdCB1c2VWTm9kZVJlc2l6ZSA9ICh2bm9kZSkgPT4gcHJvcHMubW9kZSA9PT0gXCJob3Jpem9udGFsXCIgPyB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgW1tSZXNpemUsIGhhbmRsZVJlc2l6ZV1dKSA6IHZub2RlO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICBsZXQgc2xvdCA9IChfYiA9IChfYSA9IHNsb3RzLmRlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHNsb3RzKSkgIT0gbnVsbCA/IF9iIDogW107XG4gICAgICBjb25zdCB2U2hvd01vcmUgPSBbXTtcbiAgICAgIGlmIChwcm9wcy5tb2RlID09PSBcImhvcml6b250YWxcIiAmJiBtZW51LnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGl0ZW1zMiA9IEFycmF5LmZyb20oKF9kID0gKF9jID0gbWVudS52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmNoaWxkTm9kZXMpICE9IG51bGwgPyBfZCA6IFtdKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0ubm9kZU5hbWUgIT09IFwiI3RleHRcIiB8fCBpdGVtLm5vZGVWYWx1ZSk7XG4gICAgICAgIGNvbnN0IG9yaWdpbmFsU2xvdCA9IGZsYXR0ZWRDaGlsZHJlbihzbG90KTtcbiAgICAgICAgY29uc3QgbW9yZUl0ZW1XaWR0aCA9IDY0O1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IE51bWJlci5wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lbnUudmFsdWUpLnBhZGRpbmdMZWZ0LCAxMCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IE51bWJlci5wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG1lbnUudmFsdWUpLnBhZGRpbmdSaWdodCwgMTApO1xuICAgICAgICBjb25zdCBtZW51V2lkdGggPSBtZW51LnZhbHVlLmNsaWVudFdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG4gICAgICAgIGxldCBjYWxjV2lkdGggPSAwO1xuICAgICAgICBsZXQgc2xpY2VJbmRleCA9IDA7XG4gICAgICAgIGl0ZW1zMi5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNhbGNXaWR0aCArPSBpdGVtLm9mZnNldFdpZHRoIHx8IDA7XG4gICAgICAgICAgaWYgKGNhbGNXaWR0aCA8PSBtZW51V2lkdGggLSBtb3JlSXRlbVdpZHRoKSB7XG4gICAgICAgICAgICBzbGljZUluZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNsb3REZWZhdWx0ID0gb3JpZ2luYWxTbG90LnNsaWNlKDAsIHNsaWNlSW5kZXgpO1xuICAgICAgICBjb25zdCBzbG90TW9yZSA9IG9yaWdpbmFsU2xvdC5zbGljZShzbGljZUluZGV4KTtcbiAgICAgICAgaWYgKChzbG90TW9yZSA9PSBudWxsID8gdm9pZCAwIDogc2xvdE1vcmUubGVuZ3RoKSAmJiBwcm9wcy5lbGxpcHNpcykge1xuICAgICAgICAgIHNsb3QgPSBzbG90RGVmYXVsdDtcbiAgICAgICAgICB2U2hvd01vcmUucHVzaChoKFN1Yk1lbnUsIHtcbiAgICAgICAgICAgIGluZGV4OiBcInN1Yi1tZW51LW1vcmVcIixcbiAgICAgICAgICAgIGNsYXNzOiBuc1N1Yk1lbnUuZShcImhpZGUtYXJyb3dcIilcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB0aXRsZTogKCkgPT4gaChFbEljb24sIHtcbiAgICAgICAgICAgICAgY2xhc3M6IG5zU3ViTWVudS5lKFwiaWNvbi1tb3JlXCIpXG4gICAgICAgICAgICB9LCB7IGRlZmF1bHQ6ICgpID0+IGgoTW9yZSkgfSksXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBzbG90TW9yZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdWxTdHlsZSA9IHVzZU1lbnVDc3NWYXIocHJvcHMsIDApO1xuICAgICAgY29uc3QgcmVzaXplTWVudSA9ICh2Tm9kZSkgPT4gcHJvcHMuZWxsaXBzaXMgPyB1c2VWTm9kZVJlc2l6ZSh2Tm9kZSkgOiB2Tm9kZTtcbiAgICAgIGNvbnN0IHZNZW51ID0gcmVzaXplTWVudShoKFwidWxcIiwge1xuICAgICAgICBrZXk6IFN0cmluZyhwcm9wcy5jb2xsYXBzZSksXG4gICAgICAgIHJvbGU6IFwibWVudWJhclwiLFxuICAgICAgICByZWY6IG1lbnUsXG4gICAgICAgIHN0eWxlOiB1bFN0eWxlLnZhbHVlLFxuICAgICAgICBjbGFzczoge1xuICAgICAgICAgIFtuc01lbnUuYigpXTogdHJ1ZSxcbiAgICAgICAgICBbbnNNZW51Lm0ocHJvcHMubW9kZSldOiB0cnVlLFxuICAgICAgICAgIFtuc01lbnUubShcImNvbGxhcHNlXCIpXTogcHJvcHMuY29sbGFwc2VcbiAgICAgICAgfVxuICAgICAgfSwgWy4uLnNsb3QsIC4uLnZTaG93TW9yZV0pKTtcbiAgICAgIGlmIChwcm9wcy5jb2xsYXBzZVRyYW5zaXRpb24gJiYgcHJvcHMubW9kZSA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHJldHVybiBoKEVsTWVudUNvbGxhcHNlVHJhbnNpdGlvbiwgKCkgPT4gdk1lbnUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZNZW51O1xuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBNZW51IGFzIGRlZmF1bHQsIG1lbnVFbWl0cywgbWVudVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51Mi5tanMubWFwXG4iLCJpbXBvcnQgJy4uLy4uLy4uL3V0aWxzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgYnVpbGRQcm9wcywgZGVmaW5lUHJvcFR5cGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvcHJvcHMvcnVudGltZTIubWpzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBtZW51SXRlbVByb3BzID0gYnVpbGRQcm9wcyh7XG4gIGluZGV4OiB7XG4gICAgdHlwZTogZGVmaW5lUHJvcFR5cGUoW1N0cmluZywgbnVsbF0pLFxuICAgIGRlZmF1bHQ6IG51bGxcbiAgfSxcbiAgcm91dGU6IHtcbiAgICB0eXBlOiBkZWZpbmVQcm9wVHlwZShbU3RyaW5nLCBPYmplY3RdKVxuICB9LFxuICBkaXNhYmxlZDogQm9vbGVhblxufSk7XG5jb25zdCBtZW51SXRlbUVtaXRzID0ge1xuICBjbGljazogKGl0ZW0pID0+IGlzU3RyaW5nKGl0ZW0uaW5kZXgpICYmIEFycmF5LmlzQXJyYXkoaXRlbS5pbmRleFBhdGgpXG59O1xuXG5leHBvcnQgeyBtZW51SXRlbUVtaXRzLCBtZW51SXRlbVByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0zLm1qcy5tYXBcbiIsImltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgZ2V0Q3VycmVudEluc3RhbmNlLCBpbmplY3QsIHRvUmVmLCBjb21wdXRlZCwgcmVhY3RpdmUsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCByZXNvbHZlQ29tcG9uZW50LCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUJsb2NrLCB3aXRoQ3R4LCByZW5kZXJTbG90LCBjcmVhdGVFbGVtZW50Vk5vZGUsIEZyYWdtZW50IH0gZnJvbSAndnVlJztcbmltcG9ydCB7IEVsVG9vbHRpcCB9IGZyb20gJy4uLy4uL3Rvb2x0aXAvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uL3BvcHBlci9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHVzZU1lbnUgZnJvbSAnLi91c2UtbWVudTIubWpzJztcbmltcG9ydCB7IG1lbnVJdGVtUHJvcHMsIG1lbnVJdGVtRW1pdHMgfSBmcm9tICcuL21lbnUtaXRlbTMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3IyLm1qcyc7XG5pbXBvcnQgeyBFZmZlY3QgfSBmcm9tICcuLi8uLi9wb3BwZXIvc3JjL3BvcHBlcjMubWpzJztcblxuY29uc3QgQ09NUE9ORU5UX05BTUUgPSBcIkVsTWVudUl0ZW1cIjtcbmNvbnN0IF9zZmNfbWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICBjb21wb25lbnRzOiB7XG4gICAgRWxUb29sdGlwXG4gIH0sXG4gIHByb3BzOiBtZW51SXRlbVByb3BzLFxuICBlbWl0czogbWVudUl0ZW1FbWl0cyxcbiAgc2V0dXAocHJvcHMsIHsgZW1pdCB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCByb290TWVudSA9IGluamVjdChcInJvb3RNZW51XCIpO1xuICAgIGNvbnN0IG5zTWVudSA9IHVzZU5hbWVzcGFjZShcIm1lbnVcIik7XG4gICAgY29uc3QgbnNNZW51SXRlbSA9IHVzZU5hbWVzcGFjZShcIm1lbnUtaXRlbVwiKTtcbiAgICBpZiAoIXJvb3RNZW51KVxuICAgICAgdGhyb3dFcnJvcihDT01QT05FTlRfTkFNRSwgXCJjYW4gbm90IGluamVjdCByb290IG1lbnVcIik7XG4gICAgY29uc3QgeyBwYXJlbnRNZW51LCBpbmRleFBhdGggfSA9IHVzZU1lbnUoaW5zdGFuY2UsIHRvUmVmKHByb3BzLCBcImluZGV4XCIpKTtcbiAgICBjb25zdCBzdWJNZW51ID0gaW5qZWN0KGBzdWJNZW51OiR7cGFyZW50TWVudS52YWx1ZS51aWR9YCk7XG4gICAgaWYgKCFzdWJNZW51KVxuICAgICAgdGhyb3dFcnJvcihDT01QT05FTlRfTkFNRSwgXCJjYW4gbm90IGluamVjdCBzdWIgbWVudVwiKTtcbiAgICBjb25zdCBhY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pbmRleCA9PT0gcm9vdE1lbnUuYWN0aXZlSW5kZXgpO1xuICAgIGNvbnN0IGl0ZW0gPSByZWFjdGl2ZSh7XG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICBpbmRleFBhdGgsXG4gICAgICBhY3RpdmVcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcm9vdE1lbnUuaGFuZGxlTWVudUl0ZW1DbGljayh7XG4gICAgICAgICAgaW5kZXg6IHByb3BzLmluZGV4LFxuICAgICAgICAgIGluZGV4UGF0aDogaW5kZXhQYXRoLnZhbHVlLFxuICAgICAgICAgIHJvdXRlOiBwcm9wcy5yb3V0ZVxuICAgICAgICB9KTtcbiAgICAgICAgZW1pdChcImNsaWNrXCIsIGl0ZW0pO1xuICAgICAgfVxuICAgIH07XG4gICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgIHN1Yk1lbnUuYWRkU3ViTWVudShpdGVtKTtcbiAgICAgIHJvb3RNZW51LmFkZE1lbnVJdGVtKGl0ZW0pO1xuICAgIH0pO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBzdWJNZW51LnJlbW92ZVN1Yk1lbnUoaXRlbSk7XG4gICAgICByb290TWVudS5yZW1vdmVNZW51SXRlbShpdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgRWZmZWN0LFxuICAgICAgcGFyZW50TWVudSxcbiAgICAgIHJvb3RNZW51LFxuICAgICAgYWN0aXZlLFxuICAgICAgbnNNZW51LFxuICAgICAgbnNNZW51SXRlbSxcbiAgICAgIGhhbmRsZUNsaWNrXG4gICAgfTtcbiAgfVxufSk7XG5mdW5jdGlvbiBfc2ZjX3JlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHtcbiAgY29uc3QgX2NvbXBvbmVudF9lbF90b29sdGlwID0gcmVzb2x2ZUNvbXBvbmVudChcImVsLXRvb2x0aXBcIik7XG4gIHJldHVybiBvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKFwibGlcIiwge1xuICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICBfY3R4Lm5zTWVudUl0ZW0uYigpLFxuICAgICAgX2N0eC5uc01lbnVJdGVtLmlzKFwiYWN0aXZlXCIsIF9jdHguYWN0aXZlKSxcbiAgICAgIF9jdHgubnNNZW51SXRlbS5pcyhcImRpc2FibGVkXCIsIF9jdHguZGlzYWJsZWQpXG4gICAgXSksXG4gICAgcm9sZTogXCJtZW51aXRlbVwiLFxuICAgIHRhYmluZGV4OiBcIi0xXCIsXG4gICAgb25DbGljazogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoLi4uYXJncykgPT4gX2N0eC5oYW5kbGVDbGljayAmJiBfY3R4LmhhbmRsZUNsaWNrKC4uLmFyZ3MpKVxuICB9LCBbXG4gICAgX2N0eC5wYXJlbnRNZW51LnR5cGUubmFtZSA9PT0gXCJFbE1lbnVcIiAmJiBfY3R4LnJvb3RNZW51LnByb3BzLmNvbGxhcHNlICYmIF9jdHguJHNsb3RzLnRpdGxlID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX3Rvb2x0aXAsIHtcbiAgICAgIGtleTogMCxcbiAgICAgIGVmZmVjdDogX2N0eC5FZmZlY3QuREFSSyxcbiAgICAgIHBsYWNlbWVudDogXCJyaWdodFwiLFxuICAgICAgXCJmYWxsYmFjay1wbGFjZW1lbnRzXCI6IFtcImxlZnRcIl0sXG4gICAgICBwZXJzaXN0ZW50OiBcIlwiXG4gICAgfSwge1xuICAgICAgY29udGVudDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwidGl0bGVcIilcbiAgICAgIF0pLFxuICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnNNZW51LmJlKFwidG9vbHRpcFwiLCBcInRyaWdnZXJcIikpXG4gICAgICAgIH0sIFtcbiAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIilcbiAgICAgICAgXSwgMilcbiAgICAgIF0pLFxuICAgICAgXzogM1xuICAgIH0sIDgsIFtcImVmZmVjdFwiXSkpIDogKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soRnJhZ21lbnQsIHsga2V5OiAxIH0sIFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKSxcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwidGl0bGVcIilcbiAgICBdLCA2NCkpXG4gIF0sIDIpO1xufVxudmFyIE1lbnVJdGVtID0gLyogQF9fUFVSRV9fICovIF9leHBvcnRfc2ZjKF9zZmNfbWFpbiwgW1tcInJlbmRlclwiLCBfc2ZjX3JlbmRlcl0sIFtcIl9fZmlsZVwiLCBcIi9ob21lL3J1bm5lci93b3JrL2VsZW1lbnQtcGx1cy9lbGVtZW50LXBsdXMvcGFja2FnZXMvY29tcG9uZW50cy9tZW51L3NyYy9tZW51LWl0ZW0udnVlXCJdXSk7XG5cbmV4cG9ydCB7IE1lbnVJdGVtIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUtaXRlbTQubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBvcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jaywgbm9ybWFsaXplQ2xhc3MsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgRnJhZ21lbnQsIGNyZWF0ZVRleHRWTm9kZSwgdG9EaXNwbGF5U3RyaW5nLCByZW5kZXJTbG90IH0gZnJvbSAndnVlJztcbmltcG9ydCAnLi4vLi4vLi4vaG9va3MvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBtZW51SXRlbUdyb3VwUHJvcHMgfSBmcm9tICcuL21lbnUtaXRlbS1ncm91cDMubWpzJztcbmltcG9ydCBfZXhwb3J0X3NmYyBmcm9tICcuLi8uLi8uLi9fdmlydHVhbC9wbHVnaW4tdnVlX2V4cG9ydC1oZWxwZXIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5cbmNvbnN0IENPTVBPTkVOVF9OQU1FID0gXCJFbE1lbnVJdGVtR3JvdXBcIjtcbmNvbnN0IF9zZmNfbWFpbiA9IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6IENPTVBPTkVOVF9OQU1FLFxuICBwcm9wczogbWVudUl0ZW1Hcm91cFByb3BzLFxuICBzZXR1cCgpIHtcbiAgICBjb25zdCBucyA9IHVzZU5hbWVzcGFjZShcIm1lbnUtaXRlbS1ncm91cFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgbnNcbiAgICB9O1xuICB9XG59KTtcbmZ1bmN0aW9uIF9zZmNfcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykge1xuICByZXR1cm4gb3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImxpXCIsIHtcbiAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5iKCkpXG4gIH0sIFtcbiAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcInRpdGxlXCIpKVxuICAgIH0sIFtcbiAgICAgICFfY3R4LiRzbG90cy50aXRsZSA/IChvcGVuQmxvY2soKSwgY3JlYXRlRWxlbWVudEJsb2NrKEZyYWdtZW50LCB7IGtleTogMCB9LCBbXG4gICAgICAgIGNyZWF0ZVRleHRWTm9kZSh0b0Rpc3BsYXlTdHJpbmcoX2N0eC50aXRsZSksIDEpXG4gICAgICBdLCA2NCkpIDogcmVuZGVyU2xvdChfY3R4LiRzbG90cywgXCJ0aXRsZVwiLCB7IGtleTogMSB9KVxuICAgIF0sIDIpLFxuICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInVsXCIsIG51bGwsIFtcbiAgICAgIHJlbmRlclNsb3QoX2N0eC4kc2xvdHMsIFwiZGVmYXVsdFwiKVxuICAgIF0pXG4gIF0sIDIpO1xufVxudmFyIE1lbnVJdGVtR3JvdXAgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wicmVuZGVyXCIsIF9zZmNfcmVuZGVyXSwgW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL21lbnUvc3JjL21lbnUtaXRlbS1ncm91cC52dWVcIl1dKTtcblxuZXhwb3J0IHsgTWVudUl0ZW1Hcm91cCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0tZ3JvdXA0Lm1qcy5tYXBcbiIsImNvbnN0IG1lbnVJdGVtR3JvdXBQcm9wcyA9IHtcbiAgdGl0bGU6IFN0cmluZ1xufTtcblxuZXhwb3J0IHsgbWVudUl0ZW1Hcm91cFByb3BzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LWl0ZW0tZ3JvdXAzLm1qcy5tYXBcbiIsImltcG9ydCAnLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgTWVudSBmcm9tICcuL3NyYy9tZW51Mi5tanMnO1xuZXhwb3J0IHsgbWVudUVtaXRzLCBtZW51UHJvcHMgfSBmcm9tICcuL3NyYy9tZW51Mi5tanMnO1xuaW1wb3J0IE1lbnVJdGVtIGZyb20gJy4vc3JjL21lbnUtaXRlbTQubWpzJztcbmltcG9ydCBNZW51SXRlbUdyb3VwIGZyb20gJy4vc3JjL21lbnUtaXRlbS1ncm91cDQubWpzJztcbmltcG9ydCBTdWJNZW51IGZyb20gJy4vc3JjL3N1Yi1tZW51Mi5tanMnO1xuZXhwb3J0IHsgc3ViTWVudVByb3BzIH0gZnJvbSAnLi9zcmMvc3ViLW1lbnUyLm1qcyc7XG5leHBvcnQgeyBtZW51SXRlbUVtaXRzLCBtZW51SXRlbVByb3BzIH0gZnJvbSAnLi9zcmMvbWVudS1pdGVtMy5tanMnO1xuZXhwb3J0IHsgbWVudUl0ZW1Hcm91cFByb3BzIH0gZnJvbSAnLi9zcmMvbWVudS1pdGVtLWdyb3VwMy5tanMnO1xuaW1wb3J0ICcuL3NyYy90eXBlczIubWpzJztcbmltcG9ydCB7IHdpdGhJbnN0YWxsLCB3aXRoTm9vcEluc3RhbGwgfSBmcm9tICcuLi8uLi91dGlscy92dWUvaW5zdGFsbDIubWpzJztcblxuY29uc3QgRWxNZW51ID0gd2l0aEluc3RhbGwoTWVudSwge1xuICBNZW51SXRlbSxcbiAgTWVudUl0ZW1Hcm91cCxcbiAgU3ViTWVudVxufSk7XG5jb25zdCBFbE1lbnVJdGVtID0gd2l0aE5vb3BJbnN0YWxsKE1lbnVJdGVtKTtcbmNvbnN0IEVsTWVudUl0ZW1Hcm91cCA9IHdpdGhOb29wSW5zdGFsbChNZW51SXRlbUdyb3VwKTtcbmNvbnN0IEVsU3ViTWVudSA9IHdpdGhOb29wSW5zdGFsbChTdWJNZW51KTtcblxuZXhwb3J0IHsgRWxNZW51LCBFbE1lbnVJdGVtLCBFbE1lbnVJdGVtR3JvdXAsIEVsU3ViTWVudSwgRWxNZW51IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgRWxCYWNrdG9wIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscywgdmFyaWFibGVzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2JhY2t0b3AnKVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsQmFja3RvcFxuICAgIDpjbGFzcz1cImAke3ByZWZpeENsc30tYmFja3RvcGBcIlxuICAgIDp0YXJnZXQ9XCJgLiR7dmFyaWFibGVzLm5hbWVzcGFjZX0tbGF5b3V0LWNvbnRlbnQtc2Nyb2xsYmFyIC4ke3ZhcmlhYmxlcy5lbE5hbWVzcGFjZX0tc2Nyb2xsYmFyX193cmFwYFwiXG4gIC8+XG48L3RlbXBsYXRlPlxuIiwiaW1wb3J0IHR5cGUgeyBSb3V0ZU1ldGEgfSBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IHsgcmVmLCB1bnJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGZpbmRQYXRoIH0gZnJvbSAnQC91dGlscy90cmVlJ1xuXG50eXBlIE9ubHlPbmVDaGlsZFR5cGUgPSBBcHBSb3V0ZVJlY29yZFJhdyAmIHsgbm9TaG93aW5nQ2hpbGRyZW4/OiBib29sZWFuIH1cblxuaW50ZXJmYWNlIEhhc09uZVNob3dpbmdDaGlsZCB7XG4gIG9uZVNob3dpbmdDaGlsZD86IGJvb2xlYW5cbiAgb25seU9uZUNoaWxkPzogT25seU9uZUNoaWxkVHlwZVxufVxuXG5leHBvcnQgY29uc3QgZ2V0QWxsUGFyZW50UGF0aCA9IDxUID0gUmVjb3JkYWJsZT4odHJlZURhdGE6IFRbXSwgcGF0aDogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG1lbnVMaXN0ID0gZmluZFBhdGgodHJlZURhdGEsIChuKSA9PiBuLnBhdGggPT09IHBhdGgpIGFzIEFwcFJvdXRlUmVjb3JkUmF3W11cbiAgcmV0dXJuIChtZW51TGlzdCB8fCBbXSkubWFwKChpdGVtKSA9PiBpdGVtLnBhdGgpXG59XG5cbmV4cG9ydCBjb25zdCBoYXNPbmVTaG93aW5nQ2hpbGQgPSAoXG4gIGNoaWxkcmVuOiBBcHBSb3V0ZVJlY29yZFJhd1tdID0gW10sXG4gIHBhcmVudDogQXBwUm91dGVSZWNvcmRSYXdcbik6IEhhc09uZVNob3dpbmdDaGlsZCA9PiB7XG4gIGNvbnN0IG9ubHlPbmVDaGlsZCA9IHJlZjxPbmx5T25lQ2hpbGRUeXBlPigpXG5cbiAgY29uc3Qgc2hvd2luZ0NoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKCh2KSA9PiB7XG4gICAgY29uc3QgbWV0YSA9ICh2Lm1ldGEgPz8ge30pIGFzIFJvdXRlTWV0YVxuICAgIGlmIChtZXRhLmhpZGRlbikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRlbXAgc2V0KHdpbGwgYmUgdXNlZCBpZiBvbmx5IGhhcyBvbmUgc2hvd2luZyBjaGlsZClcbiAgICAgIG9ubHlPbmVDaGlsZC52YWx1ZSA9IHZcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9KVxuXG4gIC8vIFdoZW4gdGhlcmUgaXMgb25seSBvbmUgY2hpbGQgcm91dGVyLCB0aGUgY2hpbGQgcm91dGVyIGlzIGRpc3BsYXllZCBieSBkZWZhdWx0XG4gIGlmIChzaG93aW5nQ2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uZVNob3dpbmdDaGlsZDogdHJ1ZSxcbiAgICAgIG9ubHlPbmVDaGlsZDogdW5yZWYob25seU9uZUNoaWxkKVxuICAgIH1cbiAgfVxuXG4gIC8vIFNob3cgcGFyZW50IGlmIHRoZXJlIGFyZSBubyBjaGlsZCByb3V0ZXIgdG8gZGlzcGxheVxuICBpZiAoIXNob3dpbmdDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBvbmx5T25lQ2hpbGQudmFsdWUgPSB7IC4uLnBhcmVudCwgcGF0aDogJycsIG5vU2hvd2luZ0NoaWxkcmVuOiB0cnVlIH1cbiAgICByZXR1cm4ge1xuICAgICAgb25lU2hvd2luZ0NoaWxkOiB0cnVlLFxuICAgICAgb25seU9uZUNoaWxkOiB1bnJlZihvbmx5T25lQ2hpbGQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbmVTaG93aW5nQ2hpbGQ6IGZhbHNlLFxuICAgIG9ubHlPbmVDaGlsZDogdW5yZWYob25seU9uZUNoaWxkKVxuICB9XG59XG4iLCJpbXBvcnQgeyBFbFN1Yk1lbnUsIEVsTWVudUl0ZW0gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBnZXRBbGxQYXJlbnRQYXRoLCBoYXNPbmVTaG93aW5nQ2hpbGQgfSBmcm9tICcuLi9oZWxwZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyB1c2VSZW5kZXJNZW51VGl0bGUgfSBmcm9tICcuL3VzZVJlbmRlck1lbnVUaXRsZSdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB7IHBhdGhSZXNvbHZlIH0gZnJvbSAnQC91dGlscy9yb3V0ZXJIZWxwZXInXG5cbmV4cG9ydCBjb25zdCB1c2VSZW5kZXJNZW51SXRlbSA9IChcbiAgYWxsUm91dGVyczogQXBwUm91dGVSZWNvcmRSYXdbXSA9IFtdLFxuICBtZW51TW9kZTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJ1xuKSA9PiB7XG4gIGNvbnN0IHJlbmRlck1lbnVJdGVtID0gKHJvdXRlcnM/OiBBcHBSb3V0ZVJlY29yZFJhd1tdKSA9PiB7XG4gICAgcmV0dXJuIChyb3V0ZXJzIHx8IGFsbFJvdXRlcnMpLm1hcCgodikgPT4ge1xuICAgICAgY29uc3QgbWV0YSA9ICh2Lm1ldGEgPz8ge30pIGFzIFJvdXRlTWV0YVxuICAgICAgaWYgKCFtZXRhLmhpZGRlbikge1xuICAgICAgICBjb25zdCB7IG9uZVNob3dpbmdDaGlsZCwgb25seU9uZUNoaWxkIH0gPSBoYXNPbmVTaG93aW5nQ2hpbGQodi5jaGlsZHJlbiwgdilcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBpc1VybCh2LnBhdGgpXG4gICAgICAgICAgPyB2LnBhdGhcbiAgICAgICAgICA6IGdldEFsbFBhcmVudFBhdGg8QXBwUm91dGVSZWNvcmRSYXc+KGFsbFJvdXRlcnMsIHYucGF0aCkuam9pbignLycpXG5cbiAgICAgICAgY29uc3QgeyByZW5kZXJNZW51VGl0bGUgfSA9IHVzZVJlbmRlck1lbnVUaXRsZSgpXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9uZVNob3dpbmdDaGlsZCAmJlxuICAgICAgICAgICghb25seU9uZUNoaWxkPy5jaGlsZHJlbiB8fCBvbmx5T25lQ2hpbGQ/Lm5vU2hvd2luZ0NoaWxkcmVuKSAmJlxuICAgICAgICAgICFtZXRhPy5hbHdheXNTaG93XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RWxNZW51SXRlbSBpbmRleD17b25seU9uZUNoaWxkID8gcGF0aFJlc29sdmUoZnVsbFBhdGgsIG9ubHlPbmVDaGlsZC5wYXRoKSA6IGZ1bGxQYXRofT5cbiAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiByZW5kZXJNZW51VGl0bGUob25seU9uZUNoaWxkID8gb25seU9uZUNoaWxkPy5tZXRhIDogbWV0YSlcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIDwvRWxNZW51SXRlbT5cbiAgICAgICAgICApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbiAgICAgICAgICBjb25zdCBwcmVGaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ21lbnUtcG9wcGVyJylcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPEVsU3ViTWVudVxuICAgICAgICAgICAgICBpbmRleD17ZnVsbFBhdGh9XG4gICAgICAgICAgICAgIHBvcHBlckNsYXNzPXtcbiAgICAgICAgICAgICAgICBtZW51TW9kZSA9PT0gJ3ZlcnRpY2FsJyA/IGAke3ByZUZpeENsc30tLXZlcnRpY2FsYCA6IGAke3ByZUZpeENsc30tLWhvcml6b250YWxgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICB0aXRsZTogKCkgPT4gcmVuZGVyTWVudVRpdGxlKG1ldGEpLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IHJlbmRlck1lbnVJdGVtKHYuY2hpbGRyZW4pXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA8L0VsU3ViTWVudT5cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJNZW51SXRlbVxuICB9XG59XG4iLCJpbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcblxuZXhwb3J0IGNvbnN0IHVzZVJlbmRlck1lbnVUaXRsZSA9ICgpID0+IHtcbiAgY29uc3QgcmVuZGVyTWVudVRpdGxlID0gKG1ldGE6IFJvdXRlTWV0YSkgPT4ge1xuICAgIGNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG4gICAgY29uc3QgeyB0aXRsZSA9ICdQbGVhc2Ugc2V0IHRpdGxlJywgaWNvbiB9ID0gbWV0YVxuXG4gICAgcmV0dXJuIGljb24gPyAoXG4gICAgICA8PlxuICAgICAgICA8SWNvbiBpY29uPXttZXRhLmljb259PjwvSWNvbj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJ2LW1lbnVfX3RpdGxlXCI+e3QodGl0bGUgYXMgc3RyaW5nKX08L3NwYW4+XG4gICAgICA8Lz5cbiAgICApIDogKFxuICAgICAgPHNwYW4gY2xhc3M9XCJ2LW1lbnVfX3RpdGxlXCI+e3QodGl0bGUgYXMgc3RyaW5nKX08L3NwYW4+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJNZW51VGl0bGVcbiAgfVxufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCB1bnJlZiwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBFbE1lbnUsIEVsU2Nyb2xsYmFyIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlUGVybWlzc2lvblN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3Blcm1pc3Npb24nXG5pbXBvcnQgdHlwZSB7IExheW91dFR5cGUgfSBmcm9tICdAL2NvbmZpZy9hcHAnXG5pbXBvcnQgeyB1c2VSZW5kZXJNZW51SXRlbSB9IGZyb20gJy4vY29tcG9uZW50cy91c2VSZW5kZXJNZW51SXRlbSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ21lbnUnKVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnTWVudScsXG4gIHByb3BzOiB7XG4gICAgbWVudVNlbGVjdDoge1xuICAgICAgdHlwZTogRnVuY3Rpb24gYXMgUHJvcFR5cGU8KGluZGV4OiBzdHJpbmcpID0+IHZvaWQ+LFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxuICB9LFxuICBzZXR1cChwcm9wcykge1xuICAgIGNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4gICAgY29uc3QgbGF5b3V0ID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0TGF5b3V0KVxuXG4gICAgY29uc3QgeyBwdXNoLCBjdXJyZW50Um91dGUgfSA9IHVzZVJvdXRlcigpXG5cbiAgICBjb25zdCBwZXJtaXNzaW9uU3RvcmUgPSB1c2VQZXJtaXNzaW9uU3RvcmUoKVxuXG4gICAgY29uc3QgbWVudU1vZGUgPSBjb21wdXRlZCgoKTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJyA9PiB7XG4gICAgICAvLyDnq5ZcbiAgICAgIGNvbnN0IHZlcnRpY2FsOiBMYXlvdXRUeXBlW10gPSBbJ2NsYXNzaWMnLCAndG9wTGVmdCcsICdjdXRNZW51J11cblxuICAgICAgaWYgKHZlcnRpY2FsLmluY2x1ZGVzKHVucmVmKGxheW91dCkpKSB7XG4gICAgICAgIHJldHVybiAndmVydGljYWwnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ2hvcml6b250YWwnXG4gICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHJvdXRlcnMgPSBjb21wdXRlZCgoKSA9PlxuICAgICAgdW5yZWYobGF5b3V0KSA9PT0gJ2N1dE1lbnUnID8gcGVybWlzc2lvblN0b3JlLmdldE1lbnVUYWJSb3V0ZXJzIDogcGVybWlzc2lvblN0b3JlLmdldFJvdXRlcnNcbiAgICApXG5cbiAgICBjb25zdCBjb2xsYXBzZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldENvbGxhcHNlKVxuXG4gICAgY29uc3QgdW5pcXVlT3BlbmVkID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0VW5pcXVlT3BlbmVkKVxuXG4gICAgY29uc3QgYWN0aXZlTWVudSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAgIGNvbnN0IHsgbWV0YSwgcGF0aCB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgICAgLy8gaWYgc2V0IHBhdGgsIHRoZSBzaWRlYmFyIHdpbGwgaGlnaGxpZ2h0IHRoZSBwYXRoIHlvdSBzZXRcbiAgICAgIGlmIChtZXRhLmFjdGl2ZU1lbnUpIHtcbiAgICAgICAgcmV0dXJuIG1ldGEuYWN0aXZlTWVudSBhcyBzdHJpbmdcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXRoXG4gICAgfSlcblxuICAgIGNvbnN0IG1lbnVTZWxlY3QgPSAoaW5kZXg6IHN0cmluZykgPT4ge1xuICAgICAgaWYgKHByb3BzLm1lbnVTZWxlY3QpIHtcbiAgICAgICAgcHJvcHMubWVudVNlbGVjdChpbmRleClcbiAgICAgIH1cbiAgICAgIC8vIOiHquWumuS5ieS6i+S7tlxuICAgICAgaWYgKGlzVXJsKGluZGV4KSkge1xuICAgICAgICB3aW5kb3cub3BlbihpbmRleClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwdXNoLT09PScsIGluZGV4KVxuICAgICAgICBwdXNoKGluZGV4KVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlck1lbnVXcmFwID0gKCkgPT4ge1xuICAgICAgaWYgKHVucmVmKGxheW91dCkgPT09ICd0b3AnKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJNZW51KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA8RWxTY3JvbGxiYXI+e3JlbmRlck1lbnUoKX08L0VsU2Nyb2xsYmFyPlxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlck1lbnUgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8RWxNZW51XG4gICAgICAgICAgZGVmYXVsdEFjdGl2ZT17dW5yZWYoYWN0aXZlTWVudSl9XG4gICAgICAgICAgbW9kZT17dW5yZWYobWVudU1vZGUpfVxuICAgICAgICAgIGNvbGxhcHNlPXtcbiAgICAgICAgICAgIHVucmVmKGxheW91dCkgPT09ICd0b3AnIHx8IHVucmVmKGxheW91dCkgPT09ICdjdXRNZW51JyA/IGZhbHNlIDogdW5yZWYoY29sbGFwc2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIHVuaXF1ZU9wZW5lZD17dW5yZWYobGF5b3V0KSA9PT0gJ3RvcCcgPyBmYWxzZSA6IHVucmVmKHVuaXF1ZU9wZW5lZCl9XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPVwidmFyKC0tbGVmdC1tZW51LWJnLWNvbG9yKVwiXG4gICAgICAgICAgdGV4dENvbG9yPVwidmFyKC0tbGVmdC1tZW51LXRleHQtY29sb3IpXCJcbiAgICAgICAgICBhY3RpdmVUZXh0Q29sb3I9XCJ2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpXCJcbiAgICAgICAgICBvblNlbGVjdD17bWVudVNlbGVjdH1cbiAgICAgICAgPlxuICAgICAgICAgIHt7XG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgcmVuZGVyTWVudUl0ZW0gfSA9IHVzZVJlbmRlck1lbnVJdGVtKHVucmVmKHJvdXRlcnMpLCB1bnJlZihtZW51TW9kZSkpXG4gICAgICAgICAgICAgIHJldHVybiByZW5kZXJNZW51SXRlbSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgPC9FbE1lbnU+XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IChcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9e3ByZWZpeENsc31cbiAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICBgJHtwcmVmaXhDbHN9ICR7cHJlZml4Q2xzfV9fJHt1bnJlZihtZW51TW9kZSl9YCxcbiAgICAgICAgICAnaC1bMTAwJV0gb3ZlcmZsb3ctaGlkZGVuIGZsZXgtY29sIGJnLVt2YXIoLS1sZWZ0LW1lbnUtYmctY29sb3IpXScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgJ3ctW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6IHVucmVmKGNvbGxhcHNlKSAmJiB1bnJlZihsYXlvdXQpICE9PSAnY3V0TWVudScsXG4gICAgICAgICAgICAndy1bdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCldJzogIXVucmVmKGNvbGxhcHNlKSAmJiB1bnJlZihsYXlvdXQpICE9PSAnY3V0TWVudSdcbiAgICAgICAgICB9XG4gICAgICAgIF19XG4gICAgICA+XG4gICAgICAgIHtyZW5kZXJNZW51V3JhcCgpfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59KVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD5cbkBwcmVmaXgtY2xzOiB+J0B7bmFtZXNwYWNlfS1tZW51JztcblxuLmlzLWFjdGl2ZS0tYWZ0ZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIHdpZHRoOiA0cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gIGNvbnRlbnQ6ICcnO1xufVxuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdHJhbnNpdGlvbjogd2lkdGggdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcblxuICAmOmFmdGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHZhcigtLWxlZnQtbWVudS1ib3JkZXItY29sb3IpO1xuICAgIGNvbnRlbnQ6ICcnO1xuICB9XG5cbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LW1lbnUpIHtcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xuICAgIGJvcmRlci1yaWdodDogbm9uZTtcblxuICAgIC8vIOiuvue9rumAieS4reaXtuWtkOagh+mimOeahOminOiJslxuICAgIC5pcy1hY3RpdmUge1xuICAgICAgJiA+IC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUge1xuICAgICAgICBjb2xvcjogdmFyKC0tbGVmdC1tZW51LXRleHQtYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9ruWtkOiPnOWNleaCrOWBnOeahOmrmOS6ruWSjOiDjOaZr+iJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUsXG4gICAgLkB7ZWxOYW1lc3BhY2V9LW1lbnUtaXRlbSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9rumAieS4reaXtueahOmrmOS6ruiDjOaZr+WSjOmrmOS6ruminOiJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudS5pcy1hY3RpdmUsXG4gICAgLkB7ZWxOYW1lc3BhY2V9LW1lbnUtaXRlbS5pcy1hY3RpdmUge1xuICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG5cbiAgICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC5Ae2VsTmFtZXNwYWNlfS1tZW51LWl0ZW0uaXMtYWN0aXZlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgJjphZnRlciB7XG4gICAgICAgIC5pcy1hY3RpdmUtLWFmdGVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9ruWtkOiPnOWNleeahOiDjOaZr+minOiJslxuICAgIC5Ae2VsTmFtZXNwYWNlfS1tZW51IHtcbiAgICAgIC5Ae2VsTmFtZXNwYWNlfS1zdWItbWVudV9fdGl0bGUsXG4gICAgICAuQHtlbE5hbWVzcGFjZX0tbWVudS1pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1saWdodC1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDmipjlj6Dml7bnmoTmnIDlsI/lrr3luqZcbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LW1lbnUtLWNvbGxhcHNlKSB7XG4gICAgd2lkdGg6IHZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpO1xuXG4gICAgJiA+IC5pcy1hY3RpdmUsXG4gICAgJiA+IC5pcy1hY3RpdmUgPiAuQHtlbE5hbWVzcGFjZX0tc3ViLW1lbnVfX3RpdGxlIHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1jb2xsYXBzZS1iZy1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG5cbiAgICAgICY6YWZ0ZXIge1xuICAgICAgICAuaXMtYWN0aXZlLS1hZnRlcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDmipjlj6DliqjnlLvnmoTml7blgJnvvIzlsLHpnIDopoHmiormloflrZfnu5npmpDol4/mjolcbiAgOmRlZXAoLmhvcml6b250YWwtY29sbGFwc2UtdHJhbnNpdGlvbikge1xuICAgIC8vIHRyYW5zaXRpb246IDBzIHdpZHRoIGVhc2UtaW4tb3V0LCAwcyBwYWRkaW5nLWxlZnQgZWFzZS1pbi1vdXQsIDBzIHBhZGRpbmctcmlnaHQgZWFzZS1pbi1vdXQgIWltcG9ydGFudDtcbiAgICAuQHtwcmVmaXgtY2xzfV9fdGl0bGUge1xuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cblxuICAvLyDmsLTlubPoj5zljZVcbiAgJl9faG9yaXpvbnRhbCB7XG4gICAgaGVpZ2h0OiBjYWxjKH4ndmFyKCAtIC10b3AtdG9vbC1oZWlnaHQpJykgIWltcG9ydGFudDtcblxuICAgIDpkZWVwKC5Ae2VsTmFtZXNwYWNlfS1tZW51LS1ob3Jpem9udGFsKSB7XG4gICAgICBoZWlnaHQ6IGNhbGMofid2YXIoIC0gLXRvcC10b29sLWhlaWdodCknKTtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7XG4gICAgICAvLyDph43mlrDorr7nva7lupXpg6jpq5jkuq7popzoibJcbiAgICAgICYgPiAuQHtlbE5hbWVzcGFjZX0tc3ViLW1lbnUuaXMtYWN0aXZlIHtcbiAgICAgICAgLkB7ZWxOYW1lc3BhY2V9LXN1Yi1tZW51X190aXRsZSB7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSkgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAuQHtlbE5hbWVzcGFjZX0tbWVudS1pdGVtLmlzLWFjdGl2ZSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLkB7cHJlZml4LWNsc31fX3RpdGxlIHtcbiAgICAgICAgLyogc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG4gICAgICAgIG1heC1oZWlnaHQ6IGNhbGMofid2YXIoLS10b3AtdG9vbC1oZWlnaHQpIC0gMnB4JykgIWltcG9ydGFudDtcbiAgICAgICAgLyogc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lICovXG4gICAgICAgIGxpbmUtaGVpZ2h0OiBjYWxjKH4ndmFyKC0tdG9wLXRvb2wtaGVpZ2h0KSAtIDJweCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCI+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tbWVudS1wb3BwZXInO1xuXG4uaXMtYWN0aXZlLS1hZnRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgd2lkdGg6IDRweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbC1jb2xvci1wcmltYXJ5KTtcbiAgY29udGVudDogJyc7XG59XG5cbi5Ae3ByZWZpeC1jbHN9LS12ZXJ0aWNhbCxcbi5Ae3ByZWZpeC1jbHN9LS1ob3Jpem9udGFsIHtcbiAgLy8g6K6+572u6YCJ5Lit5pe25a2Q5qCH6aKY55qE6aKc6ImyXG4gIC5pcy1hY3RpdmUge1xuICAgICYgPiAuZWwtc3ViLW1lbnVfX3RpdGxlIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpICFpbXBvcnRhbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8g6K6+572u5a2Q6I+c5Y2V5oKs5YGc55qE6auY5Lqu5ZKM6IOM5pmv6ImyXG4gIC5lbC1zdWItbWVudV9fdGl0bGUsXG4gIC5lbC1tZW51LWl0ZW0ge1xuICAgICY6aG92ZXIge1xuICAgICAgY29sb3I6IHZhcigtLWxlZnQtbWVudS10ZXh0LWFjdGl2ZS1jb2xvcikgIWltcG9ydGFudDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxlZnQtbWVudS1iZy1jb2xvcikgIWltcG9ydGFudDtcbiAgICB9XG4gIH1cblxuICAvLyDorr7nva7pgInkuK3ml7bnmoTpq5jkuq7og4zmma9cbiAgLmVsLW1lbnUtaXRlbS5pcy1hY3RpdmUge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKSAhaW1wb3J0YW50O1xuICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgLmlzLWFjdGl2ZS0tYWZ0ZXI7XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IHsgZ2V0QWxsUGFyZW50UGF0aCB9IGZyb20gJ0AvY29tcG9uZW50cy9NZW51L3NyYy9oZWxwZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnXG5pbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gJ3Z1ZSdcblxuZXhwb3J0IHR5cGUgVGFiTWFwVHlwZXMgPSB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZ1tdXG59XG5cbmV4cG9ydCBjb25zdCB0YWJQYXRoTWFwID0gcmVhY3RpdmU8VGFiTWFwVHlwZXM+KHt9KVxuXG5leHBvcnQgY29uc3QgaW5pdFRhYk1hcCA9IChyb3V0ZXM6IEFwcFJvdXRlUmVjb3JkUmF3W10pID0+IHtcbiAgZm9yIChjb25zdCB2IG9mIHJvdXRlcykge1xuICAgIGNvbnN0IG1ldGEgPSAodi5tZXRhID8/IHt9KSBhcyBSb3V0ZU1ldGFcbiAgICBpZiAoIW1ldGE/LmhpZGRlbikge1xuICAgICAgdGFiUGF0aE1hcFt2LnBhdGhdID0gW11cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGZpbHRlck1lbnVzUGF0aCA9IChcbiAgcm91dGVzOiBBcHBSb3V0ZVJlY29yZFJhd1tdLFxuICBhbGxSb3V0ZXM6IEFwcFJvdXRlUmVjb3JkUmF3W11cbik6IEFwcFJvdXRlUmVjb3JkUmF3W10gPT4ge1xuICBjb25zdCByZXM6IEFwcFJvdXRlUmVjb3JkUmF3W10gPSBbXVxuICBmb3IgKGNvbnN0IHYgb2Ygcm91dGVzKSB7XG4gICAgbGV0IGRhdGE6IE51bGxhYmxlPEFwcFJvdXRlUmVjb3JkUmF3PiA9IG51bGxcbiAgICBjb25zdCBtZXRhID0gKHYubWV0YSA/PyB7fSkgYXMgUm91dGVNZXRhXG4gICAgaWYgKCFtZXRhLmhpZGRlbiB8fCBtZXRhLnNob3dNYWluUm91dGUpIHtcbiAgICAgIGNvbnN0IGFsbFBhcmVudFBhaHQgPSBnZXRBbGxQYXJlbnRQYXRoPEFwcFJvdXRlUmVjb3JkUmF3PihhbGxSb3V0ZXMsIHYucGF0aClcblxuICAgICAgY29uc3QgZnVsbFBhdGggPSBpc1VybCh2LnBhdGgpID8gdi5wYXRoIDogYWxsUGFyZW50UGFodC5qb2luKCcvJylcblxuICAgICAgZGF0YSA9IGNsb25lRGVlcCh2KVxuICAgICAgZGF0YS5wYXRoID0gZnVsbFBhdGhcbiAgICAgIGlmICh2LmNoaWxkcmVuICYmIGRhdGEpIHtcbiAgICAgICAgZGF0YS5jaGlsZHJlbiA9IGZpbHRlck1lbnVzUGF0aCh2LmNoaWxkcmVuLCBhbGxSb3V0ZXMpXG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIHJlcy5wdXNoKGRhdGEpXG4gICAgICB9XG5cbiAgICAgIGlmIChhbGxQYXJlbnRQYWh0Lmxlbmd0aCAmJiBSZWZsZWN0Lmhhcyh0YWJQYXRoTWFwLCBhbGxQYXJlbnRQYWh0WzBdKSkge1xuICAgICAgICB0YWJQYXRoTWFwW2FsbFBhcmVudFBhaHRbMF1dLnB1c2goZnVsbFBhdGgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc1xufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyB1c2VQZXJtaXNzaW9uU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvcGVybWlzc2lvbidcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IGNvbXB1dGVkLCB1bnJlZiwgZGVmaW5lQ29tcG9uZW50LCB3YXRjaCwgcmVmIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUkxOG4nXG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IEljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCB7IE1lbnUgfSBmcm9tICdAL2NvbXBvbmVudHMvTWVudSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBwYXRoUmVzb2x2ZSB9IGZyb20gJ0AvdXRpbHMvcm91dGVySGVscGVyJ1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJ1xuaW1wb3J0IHsgZmlsdGVyTWVudXNQYXRoLCBpbml0VGFiTWFwLCB0YWJQYXRoTWFwIH0gZnJvbSAnLi9oZWxwZXInXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5pbXBvcnQgeyBpc1VybCB9IGZyb20gJ0AvdXRpbHMvaXMnXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzLCB2YXJpYWJsZXMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGFiLW1lbnUnKVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnVGFiTWVudScsXG4gIHNldHVwKCkge1xuICAgIGNvbnN0IHsgcHVzaCwgY3VycmVudFJvdXRlIH0gPSB1c2VSb3V0ZXIoKVxuXG4gICAgY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuICAgIGNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4gICAgY29uc3QgY29sbGFwc2UgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRDb2xsYXBzZSlcblxuICAgIGNvbnN0IHBlcm1pc3Npb25TdG9yZSA9IHVzZVBlcm1pc3Npb25TdG9yZSgpXG5cbiAgICBjb25zdCByb3V0ZXJzID0gY29tcHV0ZWQoKCkgPT4gcGVybWlzc2lvblN0b3JlLmdldFJvdXRlcnMpXG5cbiAgICBjb25zdCB0YWJSb3V0ZXJzID0gY29tcHV0ZWQoKCkgPT4gdW5yZWYocm91dGVycykuZmlsdGVyKCh2KSA9PiAhdj8ubWV0YT8uaGlkZGVuKSlcblxuICAgIGNvbnN0IHNldENvbGxhcHNlID0gKCkgPT4ge1xuICAgICAgYXBwU3RvcmUuc2V0Q29sbGFwc2UoIXVucmVmKGNvbGxhcHNlKSlcbiAgICB9XG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IHJvdXRlcnMudmFsdWUsXG4gICAgICAocm91dGVyczogQXBwUm91dGVSZWNvcmRSYXdbXSkgPT4ge1xuICAgICAgICBpbml0VGFiTWFwKHJvdXRlcnMpXG4gICAgICAgIGZpbHRlck1lbnVzUGF0aChyb3V0ZXJzLCByb3V0ZXJzKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgICBkZWVwOiB0cnVlXG4gICAgICB9XG4gICAgKVxuXG4gICAgY29uc3Qgc2hvd1RpdGxlID0gcmVmKHRydWUpXG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGNvbGxhcHNlLnZhbHVlLFxuICAgICAgKGNvbGxhcHNlOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGlmICghY29sbGFwc2UpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHNob3dUaXRsZS52YWx1ZSA9ICFjb2xsYXBzZVxuICAgICAgICAgIH0sIDIwMClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaG93VGl0bGUudmFsdWUgPSAhY29sbGFwc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcblxuICAgIC8vIOaYr+WQpuaYvuekuuiPnOWNlVxuICAgIGNvbnN0IHNob3dNZW51ID0gcmVmKGZhbHNlKVxuXG4gICAgLy8gdGFi6auY5LquXG4gICAgY29uc3QgdGFiQWN0aXZlID0gcmVmKCcnKVxuXG4gICAgLy8gdGFi54K55Ye75LqL5Lu2XG4gICAgY29uc3QgdGFiQ2xpY2sgPSAoaXRlbTogQXBwUm91dGVSZWNvcmRSYXcpID0+IHtcbiAgICAgIGlmIChpc1VybChpdGVtLnBhdGgpKSB7XG4gICAgICAgIHdpbmRvdy5vcGVuKGl0ZW0ucGF0aClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0YWJBY3RpdmUudmFsdWUgPSBpdGVtLmNoaWxkcmVuID8gaXRlbS5wYXRoIDogaXRlbS5wYXRoLnNwbGl0KCcvJylbMF1cbiAgICAgIGlmIChpdGVtLmNoaWxkcmVuKSB7XG4gICAgICAgIHNob3dNZW51LnZhbHVlID0gIXVucmVmKHNob3dNZW51KVxuICAgICAgICBpZiAodW5yZWYoc2hvd01lbnUpKSB7XG4gICAgICAgICAgcGVybWlzc2lvblN0b3JlLnNldE1lbnVUYWJSb3V0ZXJzKFxuICAgICAgICAgICAgY2xvbmVEZWVwKGl0ZW0uY2hpbGRyZW4pLm1hcCgodikgPT4ge1xuICAgICAgICAgICAgICB2LnBhdGggPSBwYXRoUmVzb2x2ZSh1bnJlZih0YWJBY3RpdmUpLCB2LnBhdGgpXG4gICAgICAgICAgICAgIHJldHVybiB2XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaChpdGVtLnBhdGgpXG4gICAgICAgIHBlcm1pc3Npb25TdG9yZS5zZXRNZW51VGFiUm91dGVycyhbXSlcbiAgICAgICAgc2hvd01lbnUudmFsdWUgPSBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOiuvue9rumrmOS6rlxuICAgIGNvbnN0IGlzQWN0aWNlID0gKGN1cnJlbnRQYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHsgcGF0aCB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgICAgaWYgKHRhYlBhdGhNYXBbY3VycmVudFBhdGhdLmluY2x1ZGVzKHBhdGgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBtb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgaWYgKCF1bnJlZihzaG93TWVudSkpIHJldHVyblxuICAgICAgc2hvd01lbnUudmFsdWUgPSBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGlkPXtgJHt2YXJpYWJsZXMubmFtZXNwYWNlfS1tZW51YH1cbiAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgICAgJ3JlbGF0aXZlIGJnLVt2YXIoLS1sZWZ0LW1lbnUtYmctY29sb3IpXSB0b3AtMXB4IHotOTk5JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAndy1bdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKV0nOiAhdW5yZWYoY29sbGFwc2UpLFxuICAgICAgICAgICAgJ3ctW3ZhcigtLXRhYi1tZW51LW1pbi13aWR0aCldJzogdW5yZWYoY29sbGFwc2UpXG4gICAgICAgICAgfVxuICAgICAgICBdfVxuICAgICAgICBvbk1vdXNlbGVhdmU9e21vdXNlbGVhdmV9XG4gICAgICA+XG4gICAgICAgIDxFbFNjcm9sbGJhciBjbGFzcz1cIiFoLVtjYWxjKDEwMCUtdmFyKC0tdGFiLW1lbnUtY29sbGFwc2UtaGVpZ2h0KS0xcHgpXVwiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7KCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdW5yZWYodGFiUm91dGVycykubWFwKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IChcbiAgICAgICAgICAgICAgICAgIHYubWV0YT8uYWx3YXlzU2hvdyB8fCAodj8uY2hpbGRyZW4/Lmxlbmd0aCAmJiB2Py5jaGlsZHJlbj8ubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAgICAgPyB2XG4gICAgICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHY/LmNoaWxkcmVuICYmIHY/LmNoaWxkcmVuWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGhSZXNvbHZlKHYucGF0aCwgKHY/LmNoaWxkcmVuICYmIHY/LmNoaWxkcmVuWzBdKT8ucGF0aCBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICkgYXMgQXBwUm91dGVSZWNvcmRSYXdcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGAke3ByZWZpeENsc31fX2l0ZW1gLFxuICAgICAgICAgICAgICAgICAgICAgICd0ZXh0LWNlbnRlciB0ZXh0LTEycHggcmVsYXRpdmUgcHktMTJweCBjdXJzb3ItcG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWFjdGl2ZSc6IGlzQWN0aWNlKHYucGF0aClcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0YWJDbGljayhpdGVtKVxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxJY29uIGljb249e2l0ZW0/Lm1ldGE/Lmljb259PjwvSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHshdW5yZWYoc2hvd1RpdGxlKSA/IHVuZGVmaW5lZCA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImJyZWFrLXdvcmRzIG10LTVweCBweC0ycHhcIj57dChpdGVtLm1ldGE/LnRpdGxlKX08L3A+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0VsU2Nyb2xsYmFyPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgIGAke3ByZWZpeENsc30tLWNvbGxhcHNlYCxcbiAgICAgICAgICAgICd0ZXh0LWNlbnRlciBoLVt2YXIoLS10YWItbWVudS1jb2xsYXBzZS1oZWlnaHQpXSBsZWFkaW5nLVt2YXIoLS10YWItbWVudS1jb2xsYXBzZS1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlcidcbiAgICAgICAgICBdfVxuICAgICAgICAgIG9uQ2xpY2s9e3NldENvbGxhcHNlfVxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gaWNvbj17dW5yZWYoY29sbGFwc2UpID8gJ2VwOmQtYXJyb3ctcmlnaHQnIDogJ2VwOmQtYXJyb3ctbGVmdCd9PjwvSWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxNZW51XG4gICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICchYWJzb2x1dGUgdG9wLTAgYm9yZGVyLWxlZnQtMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS1sZWZ0LW1lbnUtYmctbGlnaHQtY29sb3IpXScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICchbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWluLXdpZHRoKV0nOiB1bnJlZihjb2xsYXBzZSksXG4gICAgICAgICAgICAgICchbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKV0nOiAhdW5yZWYoY29sbGFwc2UpLFxuICAgICAgICAgICAgICAnIXctW2NhbGModmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCkrMXB4KV0nOiB1bnJlZihzaG93TWVudSksXG4gICAgICAgICAgICAgICchdy0wJzogIXVucmVmKHNob3dNZW51KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF19XG4gICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiB3aWR0aCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpLCBsZWZ0IHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XCJcbiAgICAgICAgPjwvTWVudT5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSlcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tdGFiLW1lbnUnO1xuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIHRyYW5zaXRpb246IGFsbCB2YXIoLS10cmFuc2l0aW9uLXRpbWUtMDIpO1xuXG4gICY6YWZ0ZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1sZWZ0LW1lbnUtYm9yZGVyLWNvbG9yKTtcbiAgICBjb250ZW50OiAnJztcbiAgfVxuXG4gICZfX2l0ZW0ge1xuICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1jb2xvcik7XG4gICAgdHJhbnNpdGlvbjogYWxsIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1hY3RpdmUtY29sb3IpO1xuICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWFjdGl2ZS1jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgJi0tY29sbGFwc2Uge1xuICAgIGNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtdGV4dC1jb2xvcik7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGVmdC1tZW51LWJnLWxpZ2h0LWNvbG9yKTtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tbGVmdC1tZW51LWJvcmRlci1jb2xvcik7XG4gIH1cblxuICAuaXMtYWN0aXZlIHtcbiAgICBjb2xvcjogdmFyKC0tbGVmdC1tZW51LXRleHQtYWN0aXZlLWNvbG9yKTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1sZWZ0LW1lbnUtYmctYWN0aXZlLWNvbG9yKTtcbiAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCByb3V0ZXIgZnJvbSAnQC9yb3V0ZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkIH0gZnJvbSAndnVlLXJvdXRlcidcbmltcG9ydCB7IGdldFJhd1JvdXRlIH0gZnJvbSAnQC91dGlscy9yb3V0ZXJIZWxwZXInXG5pbXBvcnQgeyBkZWZpbmVTdG9yZSB9IGZyb20gJ3BpbmlhJ1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuLi9pbmRleCdcbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gJ0AvdXRpbHMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnc1ZpZXdTdGF0ZSB7XG4gIHZpc2l0ZWRWaWV3czogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXVxuICBjYWNoZWRWaWV3czogU2V0PHN0cmluZz5cbn1cblxuZXhwb3J0IGNvbnN0IHVzZVRhZ3NWaWV3U3RvcmUgPSBkZWZpbmVTdG9yZSh7XG4gIGlkOiAndGFnc1ZpZXcnLFxuICBzdGF0ZTogKCk6IFRhZ3NWaWV3U3RhdGUgPT4gKHtcbiAgICB2aXNpdGVkVmlld3M6IFtdLFxuICAgIGNhY2hlZFZpZXdzOiBuZXcgU2V0KClcbiAgfSksXG4gIGdldHRlcnM6IHtcbiAgICBnZXRWaXNpdGVkVmlld3MoKTogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXSB7XG4gICAgICByZXR1cm4gdGhpcy52aXNpdGVkVmlld3NcbiAgICB9LFxuICAgIGdldENhY2hlZFZpZXdzKCk6IHN0cmluZ1tdIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuY2FjaGVkVmlld3MpXG4gICAgfVxuICB9LFxuICBhY3Rpb25zOiB7XG4gICAgLy8g5paw5aKe57yT5a2Y5ZKMdGFnXG4gICAgYWRkVmlldyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCk6IHZvaWQge1xuICAgICAgdGhpcy5hZGRWaXNpdGVkVmlldyh2aWV3KVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOaWsOWinnRhZ1xuICAgIGFkZFZpc2l0ZWRWaWV3KHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBpZiAodGhpcy52aXNpdGVkVmlld3Muc29tZSgodikgPT4gdi5wYXRoID09PSB2aWV3LnBhdGgpKSByZXR1cm5cbiAgICAgIGlmICh2aWV3Lm1ldGE/Lm5vVGFnc1ZpZXcpIHJldHVyblxuICAgICAgdGhpcy52aXNpdGVkVmlld3MucHVzaChcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdmlldywge1xuICAgICAgICAgIHRpdGxlOiB2aWV3Lm1ldGE/LnRpdGxlIHx8ICduby1uYW1lJ1xuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0sXG4gICAgLy8g5paw5aKe57yT5a2YXG4gICAgYWRkQ2FjaGVkVmlldygpIHtcbiAgICAgIGNvbnN0IGNhY2hlTWFwOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKVxuICAgICAgZm9yIChjb25zdCB2IG9mIHRoaXMudmlzaXRlZFZpZXdzKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRSYXdSb3V0ZSh2KVxuICAgICAgICBjb25zdCBuZWVkQ2FjaGUgPSAhaXRlbS5tZXRhPy5ub0NhY2hlXG4gICAgICAgIGlmICghbmVlZENhY2hlKSB7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gaXRlbS5uYW1lIGFzIHN0cmluZ1xuICAgICAgICBjYWNoZU1hcC5hZGQobmFtZSlcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5mcm9tKHRoaXMuY2FjaGVkVmlld3MpLnNvcnQoKS50b1N0cmluZygpID09PSBBcnJheS5mcm9tKGNhY2hlTWFwKS5zb3J0KCkudG9TdHJpbmcoKSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB0aGlzLmNhY2hlZFZpZXdzID0gY2FjaGVNYXBcbiAgICB9LFxuICAgIC8vIOWIoOmZpOafkOS4qlxuICAgIGRlbFZpZXcodmlldzogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpIHtcbiAgICAgIHRoaXMuZGVsVmlzaXRlZFZpZXcodmlldylcbiAgICAgIHRoaXMuYWRkQ2FjaGVkVmlldygpXG4gICAgfSxcbiAgICAvLyDliKDpmaR0YWdcbiAgICBkZWxWaXNpdGVkVmlldyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgZm9yIChjb25zdCBbaSwgdl0gb2YgdGhpcy52aXNpdGVkVmlld3MuZW50cmllcygpKSB7XG4gICAgICAgIGlmICh2LnBhdGggPT09IHZpZXcucGF0aCkge1xuICAgICAgICAgIHRoaXMudmlzaXRlZFZpZXdzLnNwbGljZShpLCAxKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIOWIoOmZpOe8k+WtmFxuICAgIGRlbENhY2hlZFZpZXcoKSB7XG4gICAgICBjb25zdCByb3V0ZSA9IHJvdXRlci5jdXJyZW50Um91dGUudmFsdWVcbiAgICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4PHN0cmluZz4odGhpcy5nZXRDYWNoZWRWaWV3cywgKHYpID0+IHYgPT09IHJvdXRlLm5hbWUpXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLmNhY2hlZFZpZXdzLmRlbGV0ZSh0aGlzLmdldENhY2hlZFZpZXdzW2luZGV4XSlcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIOWIoOmZpOaJgOaciee8k+WtmOWSjHRhZ1xuICAgIGRlbEFsbFZpZXdzKCkge1xuICAgICAgdGhpcy5kZWxBbGxWaXNpdGVkVmlld3MoKVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOWIoOmZpOaJgOaciXRhZ1xuICAgIGRlbEFsbFZpc2l0ZWRWaWV3cygpIHtcbiAgICAgIC8vIGNvbnN0IGFmZml4VGFncyA9IHRoaXMudmlzaXRlZFZpZXdzLmZpbHRlcigodGFnKSA9PiB0YWcubWV0YS5hZmZpeClcbiAgICAgIHRoaXMudmlzaXRlZFZpZXdzID0gW11cbiAgICB9LFxuICAgIC8vIOWIoOmZpOWFtuS7llxuICAgIGRlbE90aGVyc1ZpZXdzKHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICB0aGlzLmRlbE90aGVyc1Zpc2l0ZWRWaWV3cyh2aWV3KVxuICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICB9LFxuICAgIC8vIOWIoOmZpOWFtuS7lnRhZ1xuICAgIGRlbE90aGVyc1Zpc2l0ZWRWaWV3cyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgdGhpcy52aXNpdGVkVmlld3MgPSB0aGlzLnZpc2l0ZWRWaWV3cy5maWx0ZXIoKHYpID0+IHtcbiAgICAgICAgcmV0dXJuIHY/Lm1ldGE/LmFmZml4IHx8IHYucGF0aCA9PT0gdmlldy5wYXRoXG4gICAgICB9KVxuICAgIH0sXG4gICAgLy8g5Yig6Zmk5bem5L6nXG4gICAgZGVsTGVmdFZpZXdzKHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGZpbmRJbmRleDxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4oXG4gICAgICAgIHRoaXMudmlzaXRlZFZpZXdzLFxuICAgICAgICAodikgPT4gdi5wYXRoID09PSB2aWV3LnBhdGhcbiAgICAgIClcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHRoaXMudmlzaXRlZFZpZXdzID0gdGhpcy52aXNpdGVkVmlld3MuZmlsdGVyKCh2LCBpKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHY/Lm1ldGE/LmFmZml4IHx8IHYucGF0aCA9PT0gdmlldy5wYXRoIHx8IGkgPiBpbmRleFxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmFkZENhY2hlZFZpZXcoKVxuICAgICAgfVxuICAgIH0sXG4gICAgLy8g5Yig6Zmk5Y+z5L6nXG4gICAgZGVsUmlnaHRWaWV3cyh2aWV3OiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkge1xuICAgICAgY29uc3QgaW5kZXggPSBmaW5kSW5kZXg8Um91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQ+KFxuICAgICAgICB0aGlzLnZpc2l0ZWRWaWV3cyxcbiAgICAgICAgKHYpID0+IHYucGF0aCA9PT0gdmlldy5wYXRoXG4gICAgICApXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICB0aGlzLnZpc2l0ZWRWaWV3cyA9IHRoaXMudmlzaXRlZFZpZXdzLmZpbHRlcigodiwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiB2Py5tZXRhPy5hZmZpeCB8fCB2LnBhdGggPT09IHZpZXcucGF0aCB8fCBpIDwgaW5kZXhcbiAgICAgICAgfSlcbiAgICAgICAgdGhpcy5hZGRDYWNoZWRWaWV3KClcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVZpc2l0ZWRWaWV3KHZpZXc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSB7XG4gICAgICBmb3IgKGxldCB2IG9mIHRoaXMudmlzaXRlZFZpZXdzKSB7XG4gICAgICAgIGlmICh2LnBhdGggPT09IHZpZXcucGF0aCkge1xuICAgICAgICAgIHYgPSBPYmplY3QuYXNzaWduKHYsIHZpZXcpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGNvbnN0IHVzZVRhZ3NWaWV3U3RvcmVXaXRoT3V0ID0gKCkgPT4ge1xuICByZXR1cm4gdXNlVGFnc1ZpZXdTdG9yZShzdG9yZSlcbn1cbiIsImltcG9ydCB0eXBlIHsgUm91dGVNZXRhLCBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyBwYXRoUmVzb2x2ZSB9IGZyb20gJ0AvdXRpbHMvcm91dGVySGVscGVyJ1xuXG5leHBvcnQgY29uc3QgZmlsdGVyQWZmaXhUYWdzID0gKHJvdXRlczogQXBwUm91dGVSZWNvcmRSYXdbXSwgcGFyZW50UGF0aCA9ICcnKSA9PiB7XG4gIGxldCB0YWdzOiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZFtdID0gW11cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlKSA9PiB7XG4gICAgY29uc3QgbWV0YSA9IHJvdXRlLm1ldGEgYXMgUm91dGVNZXRhXG4gICAgY29uc3QgdGFnUGF0aCA9IHBhdGhSZXNvbHZlKHBhcmVudFBhdGgsIHJvdXRlLnBhdGgpXG4gICAgaWYgKG1ldGE/LmFmZml4KSB7XG4gICAgICB0YWdzLnB1c2goeyAuLi5yb3V0ZSwgcGF0aDogdGFnUGF0aCwgZnVsbFBhdGg6IHRhZ1BhdGggfSBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZClcbiAgICB9XG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCB0ZW1wVGFnczogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXSA9IGZpbHRlckFmZml4VGFncyhyb3V0ZS5jaGlsZHJlbiwgdGFnUGF0aClcbiAgICAgIGlmICh0ZW1wVGFncy5sZW5ndGggPj0gMSkge1xuICAgICAgICB0YWdzID0gWy4uLnRhZ3MsIC4uLnRlbXBUYWdzXVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gdGFnc1xufVxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IEVsRHJvcGRvd24sIEVsRHJvcGRvd25NZW51LCBFbERyb3Bkb3duSXRlbSB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IFByb3BUeXBlLCByZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB0eXBlIHsgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQgfSBmcm9tICd2dWUtcm91dGVyJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjb250ZXh0LW1lbnUnKVxuXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd2aXNpYmxlQ2hhbmdlJ10pXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBzY2hlbWE6IHtcbiAgICB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxjb250ZXh0TWVudVNjaGVtYVtdPixcbiAgICBkZWZhdWx0OiAoKSA9PiBbXVxuICB9LFxuICB0cmlnZ2VyOiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPCdjbGljaycgfCAnaG92ZXInIHwgJ2ZvY3VzJyB8ICdjb250ZXh0bWVudSc+LFxuICAgIGRlZmF1bHQ6ICdjb250ZXh0bWVudSdcbiAgfSxcbiAgdGFnSXRlbToge1xuICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4sXG4gICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICB9XG59KVxuXG5jb25zdCBjb21tYW5kID0gKGl0ZW06IGNvbnRleHRNZW51U2NoZW1hKSA9PiB7XG4gIGl0ZW0uY29tbWFuZCAmJiBpdGVtLmNvbW1hbmQoaXRlbSlcbn1cblxuY29uc3QgdmlzaWJsZUNoYW5nZSA9ICh2aXNpYmxlOiBib29sZWFuKSA9PiB7XG4gIGVtaXQoJ3Zpc2libGVDaGFuZ2UnLCB2aXNpYmxlLCBwcm9wcy50YWdJdGVtKVxufVxuXG5jb25zdCBlbERyb3Bkb3duTWVudVJlZiA9IHJlZjxDb21wb25lbnRSZWY8dHlwZW9mIEVsRHJvcGRvd24+PigpXG5cbmRlZmluZUV4cG9zZSh7XG4gIGVsRHJvcGRvd25NZW51UmVmLFxuICB0YWdJdGVtOiBwcm9wcy50YWdJdGVtXG59KVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsRHJvcGRvd25cbiAgICByZWY9XCJlbERyb3Bkb3duTWVudVJlZlwiXG4gICAgOmNsYXNzPVwicHJlZml4Q2xzXCJcbiAgICA6dHJpZ2dlcj1cInRyaWdnZXJcIlxuICAgIHBsYWNlbWVudD1cImJvdHRvbS1zdGFydFwiXG4gICAgQGNvbW1hbmQ9XCJjb21tYW5kXCJcbiAgICBAdmlzaWJsZS1jaGFuZ2U9XCJ2aXNpYmxlQ2hhbmdlXCJcbiAgICBwb3BwZXItY2xhc3M9XCJ2LWNvbnRleHQtbWVudS1wb3BwZXJcIlxuICA+XG4gICAgPHNsb3Q+PC9zbG90PlxuICAgIDx0ZW1wbGF0ZSAjZHJvcGRvd24+XG4gICAgICA8RWxEcm9wZG93bk1lbnU+XG4gICAgICAgIDxFbERyb3Bkb3duSXRlbVxuICAgICAgICAgIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBzY2hlbWFcIlxuICAgICAgICAgIDprZXk9XCJgZHJvcGRvd24ke2luZGV4fWBcIlxuICAgICAgICAgIDpkaXZpZGVkPVwiaXRlbS5kaXZpZGVkXCJcbiAgICAgICAgICA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCJcbiAgICAgICAgICA6Y29tbWFuZD1cIml0ZW1cIlxuICAgICAgICA+XG4gICAgICAgICAgPEljb24gOmljb249XCJpdGVtLmljb25cIiAvPiB7eyB0KGl0ZW0ubGFiZWwpIH19XG4gICAgICAgIDwvRWxEcm9wZG93bkl0ZW0+XG4gICAgICA8L0VsRHJvcGRvd25NZW51PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvRWxEcm9wZG93bj5cbjwvdGVtcGxhdGU+XG4iLCJpbXBvcnQgeyByZWYsIHVucmVmIH0gZnJvbSAndnVlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbFRvUGFyYW1zIHtcbiAgZWw6IEhUTUxFbGVtZW50XG4gIHRvOiBudW1iZXJcbiAgcG9zaXRpb246IHN0cmluZ1xuICBkdXJhdGlvbj86IG51bWJlclxuICBjYWxsYmFjaz86ICgpID0+IHZvaWRcbn1cblxuY29uc3QgZWFzZUluT3V0UXVhZCA9ICh0OiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCBkOiBudW1iZXIpID0+IHtcbiAgdCAvPSBkIC8gMlxuICBpZiAodCA8IDEpIHtcbiAgICByZXR1cm4gKGMgLyAyKSAqIHQgKiB0ICsgYlxuICB9XG4gIHQtLVxuICByZXR1cm4gKC1jIC8gMikgKiAodCAqICh0IC0gMikgLSAxKSArIGJcbn1cbmNvbnN0IG1vdmUgPSAoZWw6IEhUTUxFbGVtZW50LCBwb3NpdGlvbjogc3RyaW5nLCBhbW91bnQ6IG51bWJlcikgPT4ge1xuICBlbFtwb3NpdGlvbl0gPSBhbW91bnRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNjcm9sbFRvKHtcbiAgZWwsXG4gIHBvc2l0aW9uID0gJ3Njcm9sbExlZnQnLFxuICB0byxcbiAgZHVyYXRpb24gPSA1MDAsXG4gIGNhbGxiYWNrXG59OiBTY3JvbGxUb1BhcmFtcykge1xuICBjb25zdCBpc0FjdGl2ZVJlZiA9IHJlZihmYWxzZSlcbiAgY29uc3Qgc3RhcnQgPSBlbFtwb3NpdGlvbl1cbiAgY29uc3QgY2hhbmdlID0gdG8gLSBzdGFydFxuICBjb25zdCBpbmNyZW1lbnQgPSAyMFxuICBsZXQgY3VycmVudFRpbWUgPSAwXG5cbiAgZnVuY3Rpb24gYW5pbWF0ZVNjcm9sbCgpIHtcbiAgICBpZiAoIXVucmVmKGlzQWN0aXZlUmVmKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGN1cnJlbnRUaW1lICs9IGluY3JlbWVudFxuICAgIGNvbnN0IHZhbCA9IGVhc2VJbk91dFF1YWQoY3VycmVudFRpbWUsIHN0YXJ0LCBjaGFuZ2UsIGR1cmF0aW9uKVxuICAgIG1vdmUoZWwsIHBvc2l0aW9uLCB2YWwpXG4gICAgaWYgKGN1cnJlbnRUaW1lIDwgZHVyYXRpb24gJiYgdW5yZWYoaXNBY3RpdmVSZWYpKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjcm9sbClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBydW4oKSB7XG4gICAgaXNBY3RpdmVSZWYudmFsdWUgPSB0cnVlXG4gICAgYW5pbWF0ZVNjcm9sbCgpXG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIGlzQWN0aXZlUmVmLnZhbHVlID0gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB7IHN0YXJ0OiBydW4sIHN0b3AgfVxufVxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IG9uTW91bnRlZCwgd2F0Y2gsIGNvbXB1dGVkLCB1bnJlZiwgcmVmLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkLCBSb3V0ZXJMaW5rUHJvcHMgfSBmcm9tICd2dWUtcm91dGVyJ1xuaW1wb3J0IHsgdXNlUGVybWlzc2lvblN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3Blcm1pc3Npb24nXG5pbXBvcnQgeyB1c2VUYWdzVmlld1N0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3RhZ3NWaWV3J1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlSTE4biB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZUkxOG4nXG5pbXBvcnQgeyBmaWx0ZXJBZmZpeFRhZ3MgfSBmcm9tICcuL2hlbHBlcidcbmltcG9ydCB7IENvbnRleHRNZW51LCBDb250ZXh0TWVudUV4cG9zZSB9IGZyb20gJ0AvY29tcG9uZW50cy9Db250ZXh0TWVudSdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbmltcG9ydCB7IHVzZVRlbXBsYXRlUmVmc0xpc3QgfSBmcm9tICdAdnVldXNlL2NvcmUnXG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZVNjcm9sbFRvIH0gZnJvbSAnQC9ob29rcy9ldmVudC91c2VTY3JvbGxUbydcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndGFncy12aWV3JylcblxuY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuY29uc3QgeyBjdXJyZW50Um91dGUsIHB1c2gsIHJlcGxhY2UgfSA9IHVzZVJvdXRlcigpXG5cbmNvbnN0IHBlcm1pc3Npb25TdG9yZSA9IHVzZVBlcm1pc3Npb25TdG9yZSgpXG5cbmNvbnN0IHJvdXRlcnMgPSBjb21wdXRlZCgoKSA9PiBwZXJtaXNzaW9uU3RvcmUuZ2V0Um91dGVycylcblxuY29uc3QgdGFnc1ZpZXdTdG9yZSA9IHVzZVRhZ3NWaWV3U3RvcmUoKVxuXG5jb25zdCB2aXNpdGVkVmlld3MgPSBjb21wdXRlZCgoKSA9PiB0YWdzVmlld1N0b3JlLmdldFZpc2l0ZWRWaWV3cylcblxuY29uc3QgYWZmaXhUYWdBcnIgPSByZWY8Um91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWRbXT4oW10pXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG5jb25zdCB0YWdzVmlld0ljb24gPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUYWdzVmlld0ljb24pXG5cbi8vIOWIneWni+WMlnRhZ1xuY29uc3QgaW5pdFRhZ3MgPSAoKSA9PiB7XG4gIGFmZml4VGFnQXJyLnZhbHVlID0gZmlsdGVyQWZmaXhUYWdzKHVucmVmKHJvdXRlcnMpKVxuICBmb3IgKGNvbnN0IHRhZyBvZiB1bnJlZihhZmZpeFRhZ0FycikpIHtcbiAgICAvLyBNdXN0IGhhdmUgdGFnIG5hbWVcbiAgICBpZiAodGFnLm5hbWUpIHtcbiAgICAgIHRhZ3NWaWV3U3RvcmUuYWRkVmlzaXRlZFZpZXcodGFnKVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzZWxlY3RlZFRhZyA9IHJlZjxSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZD4oKVxuXG4vLyDmlrDlop50YWdcbmNvbnN0IGFkZFRhZ3MgPSAoKSA9PiB7XG4gIGNvbnN0IHsgbmFtZSB9ID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICBpZiAobmFtZSkge1xuICAgIHNlbGVjdGVkVGFnLnZhbHVlID0gdW5yZWYoY3VycmVudFJvdXRlKVxuICAgIHRhZ3NWaWV3U3RvcmUuYWRkVmlldyh1bnJlZihjdXJyZW50Um91dGUpKVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyDlhbPpl63pgInkuK3nmoR0YWdcbmNvbnN0IGNsb3NlU2VsZWN0ZWRUYWcgPSAodmlldzogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpID0+IHtcbiAgaWYgKHZpZXc/Lm1ldGE/LmFmZml4KSByZXR1cm5cbiAgdGFnc1ZpZXdTdG9yZS5kZWxWaWV3KHZpZXcpXG4gIGlmIChpc0FjdGl2ZSh2aWV3KSkge1xuICAgIHRvTGFzdFZpZXcoKVxuICB9XG59XG5cbi8vIOWFs+mXreWFqOmDqFxuY29uc3QgY2xvc2VBbGxUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbEFsbFZpZXdzKClcbiAgdG9MYXN0VmlldygpXG59XG5cbi8vIOWFs+mXreWFtuS7llxuY29uc3QgY2xvc2VPdGhlcnNUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbE90aGVyc1ZpZXdzKHVucmVmKHNlbGVjdGVkVGFnKSBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZClcbn1cblxuLy8g6YeN5paw5Yqg6L29XG5jb25zdCByZWZyZXNoU2VsZWN0ZWRUYWcgPSBhc3luYyAodmlldz86IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSA9PiB7XG4gIGlmICghdmlldykgcmV0dXJuXG4gIHRhZ3NWaWV3U3RvcmUuZGVsQ2FjaGVkVmlldygpXG4gIGNvbnN0IHsgcGF0aCwgcXVlcnkgfSA9IHZpZXdcbiAgYXdhaXQgbmV4dFRpY2soKVxuICByZXBsYWNlKHtcbiAgICBwYXRoOiAnL3JlZGlyZWN0JyArIHBhdGgsXG4gICAgcXVlcnk6IHF1ZXJ5XG4gIH0pXG59XG5cbi8vIOWFs+mXreW3puS+p1xuY29uc3QgY2xvc2VMZWZ0VGFncyA9ICgpID0+IHtcbiAgdGFnc1ZpZXdTdG9yZS5kZWxMZWZ0Vmlld3ModW5yZWYoc2VsZWN0ZWRUYWcpIGFzIFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKVxufVxuXG4vLyDlhbPpl63lj7PkvqdcbmNvbnN0IGNsb3NlUmlnaHRUYWdzID0gKCkgPT4ge1xuICB0YWdzVmlld1N0b3JlLmRlbFJpZ2h0Vmlld3ModW5yZWYoc2VsZWN0ZWRUYWcpIGFzIFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKVxufVxuXG4vLyDot7PovazliLDmnIDlkI7kuIDkuKpcbmNvbnN0IHRvTGFzdFZpZXcgPSAoKSA9PiB7XG4gIGNvbnN0IHZpc2l0ZWRWaWV3cyA9IHRhZ3NWaWV3U3RvcmUuZ2V0VmlzaXRlZFZpZXdzXG4gIGNvbnN0IGxhdGVzdFZpZXcgPSB2aXNpdGVkVmlld3Muc2xpY2UoLTEpWzBdXG4gIGlmIChsYXRlc3RWaWV3KSB7XG4gICAgcHVzaChsYXRlc3RWaWV3KVxuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIHVucmVmKGN1cnJlbnRSb3V0ZSkucGF0aCA9PT0gcGVybWlzc2lvblN0b3JlLmdldEFkZFJvdXRlcnNbMF0ucGF0aCB8fFxuICAgICAgdW5yZWYoY3VycmVudFJvdXRlKS5wYXRoID09PSBwZXJtaXNzaW9uU3RvcmUuZ2V0QWRkUm91dGVyc1swXS5yZWRpcmVjdFxuICAgICkge1xuICAgICAgYWRkVGFncygpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gWW91IGNhbiBzZXQgYW5vdGhlciByb3V0ZVxuICAgIHB1c2gocGVybWlzc2lvblN0b3JlLmdldEFkZFJvdXRlcnNbMF0ucGF0aClcbiAgfVxufVxuXG4vLyDmu5rliqjliLDpgInkuK3nmoR0YWdcbmNvbnN0IG1vdmVUb0N1cnJlbnRUYWcgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0IG5leHRUaWNrKClcbiAgZm9yIChjb25zdCB2IG9mIHVucmVmKHZpc2l0ZWRWaWV3cykpIHtcbiAgICBpZiAodi5mdWxsUGF0aCA9PT0gdW5yZWYoY3VycmVudFJvdXRlKS5wYXRoKSB7XG4gICAgICBtb3ZlVG9UYXJnZXQodilcbiAgICAgIGlmICh2LmZ1bGxQYXRoICE9PSB1bnJlZihjdXJyZW50Um91dGUpLmZ1bGxQYXRoKSB7XG4gICAgICAgIHRhZ3NWaWV3U3RvcmUudXBkYXRlVmlzaXRlZFZpZXcodW5yZWYoY3VycmVudFJvdXRlKSlcbiAgICAgIH1cblxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgdGFnTGlua3NSZWZzID0gdXNlVGVtcGxhdGVSZWZzTGlzdDxSb3V0ZXJMaW5rUHJvcHM+KClcblxuY29uc3QgbW92ZVRvVGFyZ2V0ID0gKGN1cnJlbnRUYWc6IFJvdXRlTG9jYXRpb25Ob3JtYWxpemVkTG9hZGVkKSA9PiB7XG4gIGNvbnN0IHdyYXAkID0gdW5yZWYoc2Nyb2xsYmFyUmVmKT8ud3JhcCRcbiAgbGV0IGZpcnN0VGFnOiBOdWxsYWJsZTxSb3V0ZXJMaW5rUHJvcHM+ID0gbnVsbFxuICBsZXQgbGFzdFRhZzogTnVsbGFibGU8Um91dGVyTGlua1Byb3BzPiA9IG51bGxcblxuICBjb25zdCB0YWdMaXN0ID0gdW5yZWYodGFnTGlua3NSZWZzKVxuICAvLyBmaW5kIGZpcnN0IHRhZyBhbmQgbGFzdCB0YWdcbiAgaWYgKHRhZ0xpc3QubGVuZ3RoID4gMCkge1xuICAgIGZpcnN0VGFnID0gdGFnTGlzdFswXVxuICAgIGxhc3RUYWcgPSB0YWdMaXN0W3RhZ0xpc3QubGVuZ3RoIC0gMV1cbiAgfVxuICBpZiAoKGZpcnN0VGFnPy50byBhcyBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkuZnVsbFBhdGggPT09IGN1cnJlbnRUYWcuZnVsbFBhdGgpIHtcbiAgICAvLyDnm7TmjqXmu5rliqjliLAw55qE5L2N572uXG4gICAgY29uc3QgeyBzdGFydCB9ID0gdXNlU2Nyb2xsVG8oe1xuICAgICAgZWw6IHdyYXAkISxcbiAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICB0bzogMCxcbiAgICAgIGR1cmF0aW9uOiA1MDBcbiAgICB9KVxuICAgIHN0YXJ0KClcbiAgfSBlbHNlIGlmICgobGFzdFRhZz8udG8gYXMgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpLmZ1bGxQYXRoID09PSBjdXJyZW50VGFnLmZ1bGxQYXRoKSB7XG4gICAgLy8g5rua5Yqo5Yiw5pyA5ZCO55qE5L2N572uXG4gICAgY29uc3QgeyBzdGFydCB9ID0gdXNlU2Nyb2xsVG8oe1xuICAgICAgZWw6IHdyYXAkISxcbiAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICB0bzogd3JhcCQhLnNjcm9sbFdpZHRoIC0gd3JhcCQhLm9mZnNldFdpZHRoLFxuICAgICAgZHVyYXRpb246IDUwMFxuICAgIH0pXG4gICAgc3RhcnQoKVxuICB9IGVsc2Uge1xuICAgIC8vIGZpbmQgcHJlVGFnIGFuZCBuZXh0VGFnXG4gICAgY29uc3QgY3VycmVudEluZGV4OiBudW1iZXIgPSB0YWdMaXN0LmZpbmRJbmRleChcbiAgICAgIChpdGVtKSA9PiAoaXRlbT8udG8gYXMgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpLmZ1bGxQYXRoID09PSBjdXJyZW50VGFnLmZ1bGxQYXRoXG4gICAgKVxuICAgIGNvbnN0IHRnc1JlZnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGAke3ByZWZpeENsc31fX2l0ZW1gKVxuXG4gICAgY29uc3QgcHJldlRhZyA9IHRnc1JlZnNbY3VycmVudEluZGV4IC0gMV0gYXMgSFRNTEVsZW1lbnRcbiAgICBjb25zdCBuZXh0VGFnID0gdGdzUmVmc1tjdXJyZW50SW5kZXggKyAxXSBhcyBIVE1MRWxlbWVudFxuXG4gICAgLy8gdGhlIHRhZydzIG9mZnNldExlZnQgYWZ0ZXIgb2YgbmV4dFRhZ1xuICAgIGNvbnN0IGFmdGVyTmV4dFRhZ09mZnNldExlZnQgPSBuZXh0VGFnLm9mZnNldExlZnQgKyBuZXh0VGFnLm9mZnNldFdpZHRoICsgNFxuXG4gICAgLy8gdGhlIHRhZydzIG9mZnNldExlZnQgYmVmb3JlIG9mIHByZXZUYWdcbiAgICBjb25zdCBiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCA9IHByZXZUYWcub2Zmc2V0TGVmdCAtIDRcblxuICAgIGlmIChhZnRlck5leHRUYWdPZmZzZXRMZWZ0ID4gdW5yZWYoc2Nyb2xsTGVmdE51bWJlcikgKyB3cmFwJCEub2Zmc2V0V2lkdGgpIHtcbiAgICAgIGNvbnN0IHsgc3RhcnQgfSA9IHVzZVNjcm9sbFRvKHtcbiAgICAgICAgZWw6IHdyYXAkISxcbiAgICAgICAgcG9zaXRpb246ICdzY3JvbGxMZWZ0JyxcbiAgICAgICAgdG86IGFmdGVyTmV4dFRhZ09mZnNldExlZnQgLSB3cmFwJCEub2Zmc2V0V2lkdGgsXG4gICAgICAgIGR1cmF0aW9uOiA1MDBcbiAgICAgIH0pXG4gICAgICBzdGFydCgpXG4gICAgfSBlbHNlIGlmIChiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCA8IHVucmVmKHNjcm9sbExlZnROdW1iZXIpKSB7XG4gICAgICBjb25zdCB7IHN0YXJ0IH0gPSB1c2VTY3JvbGxUbyh7XG4gICAgICAgIGVsOiB3cmFwJCEsXG4gICAgICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgICAgIHRvOiBiZWZvcmVQcmV2VGFnT2Zmc2V0TGVmdCxcbiAgICAgICAgZHVyYXRpb246IDUwMFxuICAgICAgfSlcbiAgICAgIHN0YXJ0KClcbiAgICB9XG4gIH1cbn1cblxuLy8g5piv5ZCm5piv5b2T5YmNdGFnXG5jb25zdCBpc0FjdGl2ZSA9IChyb3V0ZTogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHJvdXRlLnBhdGggPT09IHVucmVmKGN1cnJlbnRSb3V0ZSkucGF0aFxufVxuXG4vLyDmiYDmnInlj7PplK7oj5zljZXnu4Tku7bnmoTlhYPntKBcbmNvbnN0IGl0ZW1SZWZzID0gdXNlVGVtcGxhdGVSZWZzTGlzdDxDb21wb25lbnRSZWY8dHlwZW9mIENvbnRleHRNZW51ICYgQ29udGV4dE1lbnVFeHBvc2U+PigpXG5cbi8vIOWPs+mUruiPnOWNleijheWhq+aUueWPmOeahOaXtuWAmVxuY29uc3QgdmlzaWJsZUNoYW5nZSA9ICh2aXNpYmxlOiBib29sZWFuLCB0YWdJdGVtOiBSb3V0ZUxvY2F0aW9uTm9ybWFsaXplZExvYWRlZCkgPT4ge1xuICBpZiAodmlzaWJsZSkge1xuICAgIGZvciAoY29uc3QgdiBvZiB1bnJlZihpdGVtUmVmcykpIHtcbiAgICAgIGNvbnN0IGVsRHJvcGRvd25NZW51UmVmID0gdi5lbERyb3Bkb3duTWVudVJlZlxuICAgICAgaWYgKHRhZ0l0ZW0uZnVsbFBhdGggIT09IHYudGFnSXRlbS5mdWxsUGF0aCkge1xuICAgICAgICBlbERyb3Bkb3duTWVudVJlZj8uaGFuZGxlQ2xvc2UoKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBlbHNjcm9sbCDlrp7kvotcbmNvbnN0IHNjcm9sbGJhclJlZiA9IHJlZjxDb21wb25lbnRSZWY8dHlwZW9mIEVsU2Nyb2xsYmFyPj4oKVxuXG4vLyDkv53lrZjmu5rliqjkvY3nva5cbmNvbnN0IHNjcm9sbExlZnROdW1iZXIgPSByZWYoMClcblxuY29uc3Qgc2Nyb2xsID0gKHsgc2Nyb2xsTGVmdCB9KSA9PiB7XG4gIHNjcm9sbExlZnROdW1iZXIudmFsdWUgPSBzY3JvbGxMZWZ0IGFzIG51bWJlclxufVxuXG4vLyDnp7vliqjliLDmn5DkuKrkvY3nva5cbmNvbnN0IG1vdmUgPSAodG86IG51bWJlcikgPT4ge1xuICBjb25zdCB3cmFwJCA9IHVucmVmKHNjcm9sbGJhclJlZik/LndyYXAkXG4gIGNvbnN0IHsgc3RhcnQgfSA9IHVzZVNjcm9sbFRvKHtcbiAgICBlbDogd3JhcCQhLFxuICAgIHBvc2l0aW9uOiAnc2Nyb2xsTGVmdCcsXG4gICAgdG86IHVucmVmKHNjcm9sbExlZnROdW1iZXIpICsgdG8sXG4gICAgZHVyYXRpb246IDUwMFxuICB9KVxuICBzdGFydCgpXG59XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGluaXRUYWdzKClcbiAgYWRkVGFncygpXG59KVxuXG53YXRjaChcbiAgKCkgPT4gY3VycmVudFJvdXRlLnZhbHVlLFxuICAoKSA9PiB7XG4gICAgYWRkVGFncygpXG4gICAgbW92ZVRvQ3VycmVudFRhZygpXG4gIH1cbilcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXZcbiAgICA6aWQ9XCJwcmVmaXhDbHNcIlxuICAgIDpjbGFzcz1cInByZWZpeENsc1wiXG4gICAgY2xhc3M9XCJmbGV4IHctZnVsbCByZWxhdGl2ZSBiZy1bI2ZmZl0gZGFyazpiZy1bdmFyKC0tZWwtYmctY29sb3IpXVwiXG4gID5cbiAgICA8c3BhblxuICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgY2xhc3M9XCJ3LVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gaC1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIHRleHQtY2VudGVyIGxlYWRpbmctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlclwiXG4gICAgICBAY2xpY2s9XCJtb3ZlKC0yMDApXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiZXA6ZC1hcnJvdy1sZWZ0XCJcbiAgICAgICAgOmNvbG9yPVwiYXBwU3RvcmUuZ2V0SXNEYXJrID8gJ3ZhcigtLWVsLXRleHQtY29sb3ItcmVndWxhciknIDogJyMzMzMnXCJcbiAgICAgIC8+XG4gICAgPC9zcGFuPlxuICAgIDxkaXYgY2xhc3M9XCJvdmVyZmxvdy1oaWRkZW4gZmxleC0xXCI+XG4gICAgICA8RWxTY3JvbGxiYXIgcmVmPVwic2Nyb2xsYmFyUmVmXCIgY2xhc3M9XCJoLWZ1bGxcIiBAc2Nyb2xsPVwic2Nyb2xsXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGgtZnVsbFwiPlxuICAgICAgICAgIDxDb250ZXh0TWVudVxuICAgICAgICAgICAgOnJlZj1cIml0ZW1SZWZzLnNldFwiXG4gICAgICAgICAgICA6c2NoZW1hPVwiW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246c3luYy1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5yZWxvYWQnKSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogc2VsZWN0ZWRUYWc/LmZ1bGxQYXRoICE9PSBpdGVtLmZ1bGxQYXRoLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlZnJlc2hTZWxlY3RlZFRhZyhpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkJyxcbiAgICAgICAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlVGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/Lm1ldGEuYWZmaXgsXG4gICAgICAgICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY2xvc2VTZWxlY3RlZFRhZyhpdGVtKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtcmlnaHQtb3V0bGluZWQnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VUaGVMZWZ0VGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAoaXRlbS5mdWxsUGF0aCA9PT0gdmlzaXRlZFZpZXdzWzBdLmZ1bGxQYXRoIHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkVGFnPy5mdWxsUGF0aCAhPT0gaXRlbS5mdWxsUGF0aCksXG4gICAgICAgICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY2xvc2VMZWZ0VGFncygpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtbGVmdC1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZVRoZVJpZ2h0VGFiJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAoaXRlbS5mdWxsUGF0aCA9PT0gdmlzaXRlZFZpZXdzW3Zpc2l0ZWRWaWV3cy5sZW5ndGggLSAxXS5mdWxsUGF0aCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFRhZz8uZnVsbFBhdGggIT09IGl0ZW0uZnVsbFBhdGgpLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNsb3NlUmlnaHRUYWdzKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkaXZpZGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOnRhZy1vdXRsaW5lZCcsXG4gICAgICAgICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZU90aGVyJyksXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHNlbGVjdGVkVGFnPy5mdWxsUGF0aCAhPT0gaXRlbS5mdWxsUGF0aCxcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjbG9zZU90aGVyc1RhZ3MoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmxpbmUtb3V0bGluZWQnLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VBbGwnKSxcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjbG9zZUFsbFRhZ3MoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVwiXG4gICAgICAgICAgICB2LWZvcj1cIml0ZW0gaW4gdmlzaXRlZFZpZXdzXCJcbiAgICAgICAgICAgIDprZXk9XCJpdGVtLmZ1bGxQYXRoXCJcbiAgICAgICAgICAgIDp0YWctaXRlbT1cIml0ZW1cIlxuICAgICAgICAgICAgOmNsYXNzPVwiW1xuICAgICAgICAgICAgICBgJHtwcmVmaXhDbHN9X19pdGVtYCxcbiAgICAgICAgICAgICAgaXRlbT8ubWV0YT8uYWZmaXggPyBgJHtwcmVmaXhDbHN9X19pdGVtLS1hZmZpeGAgOiAnJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICdpcy1hY3RpdmUnOiBpc0FjdGl2ZShpdGVtKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXCJcbiAgICAgICAgICAgIEB2aXNpYmxlLWNoYW5nZT1cInZpc2libGVDaGFuZ2VcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxyb3V0ZXItbGluayA6cmVmPVwidGFnTGlua3NSZWZzLnNldFwiIDp0bz1cInsgLi4uaXRlbSB9XCIgY3VzdG9tIHYtc2xvdD1cInsgbmF2aWdhdGUgfVwiPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIEBjbGljaz1cIm5hdmlnYXRlXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaC1mdWxsIGZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIHdoaXRlc3BhY2Utbm93cmFwIHBsLTE1cHhcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgIHYtaWY9XCJcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtPy5tYXRjaGVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgaXRlbT8ubWF0Y2hlZFsxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW0/Lm1hdGNoZWRbMV0/Lm1ldGE/Lmljb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICB0YWdzVmlld0ljb25cbiAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgOmljb249XCJpdGVtPy5tYXRjaGVkWzFdPy5tZXRhPy5pY29uXCJcbiAgICAgICAgICAgICAgICAgICAgOnNpemU9XCIxMlwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibXItNXB4XCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICB7eyB0KGl0ZW0/Lm1ldGE/LnRpdGxlIGFzIHN0cmluZykgfX1cbiAgICAgICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cImAke3ByZWZpeENsc31fX2l0ZW0tLWNsb3NlYFwiXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiIzMzM1wiXG4gICAgICAgICAgICAgICAgICAgIGljb249XCJhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkXCJcbiAgICAgICAgICAgICAgICAgICAgOnNpemU9XCIxMlwiXG4gICAgICAgICAgICAgICAgICAgIEBjbGljay5wcmV2ZW50LnN0b3A9XCJjbG9zZVNlbGVjdGVkVGFnKGl0ZW0pXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvcm91dGVyLWxpbms+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0NvbnRleHRNZW51PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgPC9kaXY+XG4gICAgPHNwYW5cbiAgICAgIDpjbGFzcz1cImAke3ByZWZpeENsc31fX3Rvb2xgXCJcbiAgICAgIGNsYXNzPVwidy1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIGgtW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSB0ZXh0LWNlbnRlciBsZWFkaW5nLVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgQGNsaWNrPVwibW92ZSgyMDApXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiZXA6ZC1hcnJvdy1yaWdodFwiXG4gICAgICAgIDpjb2xvcj1cImFwcFN0b3JlLmdldElzRGFyayA/ICd2YXIoLS1lbC10ZXh0LWNvbG9yLXJlZ3VsYXIpJyA6ICcjMzMzJ1wiXG4gICAgICAvPlxuICAgIDwvc3Bhbj5cbiAgICA8c3BhblxuICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgY2xhc3M9XCJ3LVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gaC1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIHRleHQtY2VudGVyIGxlYWRpbmctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBjdXJzb3ItcG9pbnRlclwiXG4gICAgICBAY2xpY2s9XCJyZWZyZXNoU2VsZWN0ZWRUYWcoc2VsZWN0ZWRUYWcpXCJcbiAgICA+XG4gICAgICA8SWNvblxuICAgICAgICBpY29uPVwiYW50LWRlc2lnbjpyZWxvYWQtb3V0bGluZWRcIlxuICAgICAgICA6Y29sb3I9XCJhcHBTdG9yZS5nZXRJc0RhcmsgPyAndmFyKC0tZWwtdGV4dC1jb2xvci1yZWd1bGFyKScgOiAnIzMzMydcIlxuICAgICAgLz5cbiAgICA8L3NwYW4+XG4gICAgPENvbnRleHRNZW51XG4gICAgICB0cmlnZ2VyPVwiY2xpY2tcIlxuICAgICAgOnNjaGVtYT1cIltcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOnN5bmMtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24ucmVsb2FkJyksXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgcmVmcmVzaFNlbGVjdGVkVGFnKHNlbGVjdGVkVGFnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmNsb3NlLW91dGxpbmVkJyxcbiAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlVGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/Lm1ldGEuYWZmaXhcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtcmlnaHQtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VUaGVMZWZ0VGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6ICEhdmlzaXRlZFZpZXdzPy5sZW5ndGggJiYgc2VsZWN0ZWRUYWc/LmZ1bGxQYXRoID09PSB2aXNpdGVkVmlld3NbMF0uZnVsbFBhdGgsXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VMZWZ0VGFncygpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dmVydGljYWwtbGVmdC1vdXRsaW5lZCcsXG4gICAgICAgICAgbGFiZWw6IHQoJ2NvbW1vbi5jbG9zZVRoZVJpZ2h0VGFiJyksXG4gICAgICAgICAgZGlzYWJsZWQ6XG4gICAgICAgICAgICAhIXZpc2l0ZWRWaWV3cz8ubGVuZ3RoICYmXG4gICAgICAgICAgICBzZWxlY3RlZFRhZz8uZnVsbFBhdGggPT09IHZpc2l0ZWRWaWV3c1t2aXNpdGVkVmlld3MubGVuZ3RoIC0gMV0uZnVsbFBhdGgsXG4gICAgICAgICAgY29tbWFuZDogKCkgPT4ge1xuICAgICAgICAgICAgY2xvc2VSaWdodFRhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGRpdmlkZWQ6IHRydWUsXG4gICAgICAgICAgaWNvbjogJ2FudC1kZXNpZ246dGFnLW91dGxpbmVkJyxcbiAgICAgICAgICBsYWJlbDogdCgnY29tbW9uLmNsb3NlT3RoZXInKSxcbiAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICBjbG9zZU90aGVyc1RhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICdhbnQtZGVzaWduOmxpbmUtb3V0bGluZWQnLFxuICAgICAgICAgIGxhYmVsOiB0KCdjb21tb24uY2xvc2VBbGwnKSxcbiAgICAgICAgICBjb21tYW5kOiAoKSA9PiB7XG4gICAgICAgICAgICBjbG9zZUFsbFRhZ3MoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVwiXG4gICAgPlxuICAgICAgPHNwYW5cbiAgICAgICAgOmNsYXNzPVwiYCR7cHJlZml4Q2xzfV9fdG9vbGBcIlxuICAgICAgICBjbGFzcz1cInctW3ZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpXSBoLVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0gdGV4dC1jZW50ZXIgbGVhZGluZy1bdmFyKC0tdGFncy12aWV3LWhlaWdodCldIGN1cnNvci1wb2ludGVyIGJsb2NrXCJcbiAgICAgID5cbiAgICAgICAgPEljb25cbiAgICAgICAgICBpY29uPVwiYW50LWRlc2lnbjpzZXR0aW5nLW91dGxpbmVkXCJcbiAgICAgICAgICA6Y29sb3I9XCJhcHBTdG9yZS5nZXRJc0RhcmsgPyAndmFyKC0tZWwtdGV4dC1jb2xvci1yZWd1bGFyKScgOiAnIzMzMydcIlxuICAgICAgICAvPlxuICAgICAgPC9zcGFuPlxuICAgIDwvQ29udGV4dE1lbnU+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuQHByZWZpeC1jbHM6IH4nQHtuYW1lc3BhY2V9LXRhZ3Mtdmlldyc7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgOmRlZXAoLkB7ZWxOYW1lc3BhY2V9LXNjcm9sbGJhcl9fdmlldykge1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxuXG4gICZfX3Rvb2wge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAgICY6aG92ZXIge1xuICAgICAgOmRlZXAoc3Bhbikge1xuICAgICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3ItYmxhY2spICFpbXBvcnRhbnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJjphZnRlciB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDFweDtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogY2FsYyh+JzEwMCUgLSAxcHgnKTtcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIHZhcigtLXRhZ3Mtdmlldy1ib3JkZXItY29sb3IpO1xuICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS10YWdzLXZpZXctYm9yZGVyLWNvbG9yKTtcbiAgICAgIGNvbnRlbnQ6ICcnO1xuICAgIH1cbiAgfVxuXG4gICZfX2l0ZW0gKyAmX19pdGVtIHtcbiAgICBtYXJnaW4tbGVmdDogNHB4O1xuICB9XG5cbiAgJl9faXRlbSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMnB4O1xuICAgIGhlaWdodDogY2FsYyh+JzEwMCUgLSA0cHgnKTtcbiAgICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2Q5ZDlkOTtcblxuICAgICYtLWNsb3NlIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgcmlnaHQ6IDVweDtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcbiAgICB9XG4gICAgJjpub3QoLkB7cHJlZml4LWNsc31fX2l0ZW0tLWFmZml4KTpob3ZlciB7XG4gICAgICAuQHtwcmVmaXgtY2xzfV9faXRlbS0tY2xvc2Uge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmX19pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgJjpob3ZlciB7XG4gICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gICAgfVxuICB9XG5cbiAgJl9faXRlbS5pcy1hY3RpdmUge1xuICAgIGNvbG9yOiB2YXIoLS1lbC1jb2xvci13aGl0ZSk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZWwtY29sb3ItcHJpbWFyeSk7XG4gICAgLkB7cHJlZml4LWNsc31fX2l0ZW0tLWNsb3NlIHtcbiAgICAgIDpkZWVwKHNwYW4pIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXdoaXRlKSAhaW1wb3J0YW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4uZGFyayB7XG4gIC5Ae3ByZWZpeC1jbHN9IHtcbiAgICAmX190b29sIHtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICA6ZGVlcChzcGFuKSB7XG4gICAgICAgICAgY29sb3I6ICNmZmYgIWltcG9ydGFudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgdmFyKC0tZWwtYm9yZGVyLWNvbG9yKTtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB2YXIoLS1lbC1ib3JkZXItY29sb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2l0ZW0ge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdG9wOiAycHg7XG4gICAgICBoZWlnaHQ6IGNhbGMoficxMDAlIC0gNHB4Jyk7XG4gICAgICBwYWRkaW5nLXJpZ2h0OiAyNXB4O1xuICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZWwtYm9yZGVyLWNvbG9yKTtcbiAgICB9XG5cbiAgICAmX19pdGVtOm5vdCguaXMtYWN0aXZlKSB7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2l0ZW0uaXMtYWN0aXZlIHtcbiAgICAgIGNvbG9yOiB2YXIoLS1lbC1jb2xvci13aGl0ZSk7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbC1jb2xvci1wcmltYXJ5KTtcbiAgICAgIC5Ae3ByZWZpeC1jbHN9X19pdGVtLS1jbG9zZSB7XG4gICAgICAgIDpkZWVwKHNwYW4pIHtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tZWwtY29sb3Itd2hpdGUpICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIG9uTW91bnRlZCwgdW5yZWYgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2xvZ28nKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3Qgc2hvdyA9IHJlZih0cnVlKVxuXG5jb25zdCB0aXRsZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldFRpdGxlKVxuXG5jb25zdCBsYXlvdXQgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMYXlvdXQpXG5cbmNvbnN0IGNvbGxhcHNlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Q29sbGFwc2UpXG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gIGlmICh1bnJlZihjb2xsYXBzZSkpIHNob3cudmFsdWUgPSBmYWxzZVxufSlcblxud2F0Y2goXG4gICgpID0+IGNvbGxhcHNlLnZhbHVlLFxuICAoY29sbGFwc2U6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAodW5yZWYobGF5b3V0KSA9PT0gJ3RvcExlZnQnIHx8IHVucmVmKGxheW91dCkgPT09ICdjdXRNZW51Jykge1xuICAgICAgc2hvdy52YWx1ZSA9IHRydWVcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoIWNvbGxhcHNlKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2hvdy52YWx1ZSA9ICFjb2xsYXBzZVxuICAgICAgfSwgNDAwKVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG93LnZhbHVlID0gIWNvbGxhcHNlXG4gICAgfVxuICB9XG4pXG5cbndhdGNoKFxuICAoKSA9PiBsYXlvdXQudmFsdWUsXG4gIChsYXlvdXQpID0+IHtcbiAgICBpZiAobGF5b3V0ID09PSAndG9wJyB8fCBsYXlvdXQgPT09ICdjdXRNZW51Jykge1xuICAgICAgc2hvdy52YWx1ZSA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHVucmVmKGNvbGxhcHNlKSkge1xuICAgICAgICBzaG93LnZhbHVlID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNob3cudmFsdWUgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG4pXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8cm91dGVyLWxpbmtcbiAgICA6Y2xhc3M9XCJbXG4gICAgICBwcmVmaXhDbHMsXG4gICAgICBsYXlvdXQgIT09ICdjbGFzc2ljJyA/IGAke3ByZWZpeENsc31fX1RvcGAgOiAnJyxcbiAgICAgICdmbGV4ICFoLVt2YXIoLS1sb2dvLWhlaWdodCldIGl0ZW1zLWNlbnRlciBjdXJzb3ItcG9pbnRlciBwbC04cHggcmVsYXRpdmUnLFxuICAgICAgJ2Rhcms6YmctW3ZhcigtLWVsLWJnLWNvbG9yKV0nXG4gICAgXVwiXG4gICAgdG89XCIvXCJcbiAgPlxuICAgIDxpbWdcbiAgICAgIHNyYz1cIkAvYXNzZXRzL2ltZ3MvbG9nby5wbmdcIlxuICAgICAgY2xhc3M9XCJ3LVtjYWxjKHZhcigtLWxvZ28taGVpZ2h0KS0xMHB4KV0gaC1bY2FsYyh2YXIoLS1sb2dvLWhlaWdodCktMTBweCldXCJcbiAgICAvPlxuICAgIDxkaXZcbiAgICAgIHYtaWY9XCJzaG93XCJcbiAgICAgIDpjbGFzcz1cIltcbiAgICAgICAgJ21sLTEwcHggdGV4dC0xNnB4IGZvbnQtNzAwJyxcbiAgICAgICAge1xuICAgICAgICAgICd0ZXh0LVt2YXIoLS1sb2dvLXRpdGxlLXRleHQtY29sb3IpXSc6IGxheW91dCA9PT0gJ2NsYXNzaWMnLFxuICAgICAgICAgICd0ZXh0LVt2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXSc6XG4gICAgICAgICAgICBsYXlvdXQgPT09ICd0b3BMZWZ0JyB8fCBsYXlvdXQgPT09ICd0b3AnIHx8IGxheW91dCA9PT0gJ2N1dE1lbnUnXG4gICAgICAgIH1cbiAgICAgIF1cIlxuICAgID5cbiAgICAgIHt7IHRpdGxlIH19XG4gICAgPC9kaXY+XG4gIDwvcm91dGVyLWxpbms+XG48L3RlbXBsYXRlPlxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdmb290ZXInKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3QgdGl0bGUgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUaXRsZSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXZcbiAgICA6Y2xhc3M9XCJwcmVmaXhDbHNcIlxuICAgIGNsYXNzPVwidGV4dC1jZW50ZXIgdGV4dC1bdmFyKC0tZWwtdGV4dC1jb2xvci1wbGFjZWhvbGRlcildIGJnLVt2YXIoLS1hcHAtY29udG5ldC1iZy1jb2xvcildIGgtW3ZhcigtLWFwcC1mb290ZXItaGVpZ2h0KV0gbGVhZGluZy1bdmFyKC0tYXBwLWZvb3Rlci1oZWlnaHQpXSBkYXJrOmJnLVt2YXIoLS1lbC1iZy1jb2xvcildXCJcbiAgPlxuICAgIENvcHlyaWdodCDCqSBsaWhvbmc2NzFAZ21haWwge3sgdGl0bGUgfX1cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbmltcG9ydCB7IHVzZVRhZ3NWaWV3U3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvdGFnc1ZpZXcnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvRm9vdGVyJ1xuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG5jb25zdCBsYXlvdXQgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMYXlvdXQpXG5cbmNvbnN0IGZpeGVkSGVhZGVyID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Rml4ZWRIZWFkZXIpXG5cbmNvbnN0IGZvb3RlciA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldEZvb3RlcilcblxuY29uc3QgdGFnc1ZpZXdTdG9yZSA9IHVzZVRhZ3NWaWV3U3RvcmUoKVxuXG5jb25zdCBnZXRDYWNoZXMgPSBjb21wdXRlZCgoKTogc3RyaW5nW10gPT4ge1xuICByZXR1cm4gdGFnc1ZpZXdTdG9yZS5nZXRDYWNoZWRWaWV3c1xufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxzZWN0aW9uXG4gICAgOmNsYXNzPVwiW1xuICAgICAgJ3AtW3ZhcigtLWFwcC1jb250ZW50LXBhZGRpbmcpXSB3LVsxMDAlXSBiZy1bdmFyKC0tYXBwLWNvbnRuZXQtYmctY29sb3IpXSBkYXJrOmJnLVt2YXIoLS1lbC1iZy1jb2xvcildJyxcbiAgICAgIHtcbiAgICAgICAgJyFtaW4taC1bY2FsYygxMDAlLXZhcigtLWFwcC1mb290ZXItaGVpZ2h0KSldJzpcbiAgICAgICAgICBmaXhlZEhlYWRlciAmJiAobGF5b3V0ID09PSAnY2xhc3NpYycgfHwgbGF5b3V0ID09PSAndG9wTGVmdCcpICYmIGZvb3RlcixcblxuICAgICAgICAnIW1pbi1oLVtjYWxjKDEwMCUtdmFyKC0tdGFncy12aWV3LWhlaWdodCktdmFyKC0tdG9wLXRvb2wtaGVpZ2h0KS12YXIoLS1hcHAtZm9vdGVyLWhlaWdodCkpXSc6XG4gICAgICAgICAgKCghZml4ZWRIZWFkZXIgJiYgbGF5b3V0ID09PSAnY2xhc3NpYycpIHx8IGxheW91dCA9PT0gJ3RvcCcpICYmIGZvb3RlcixcblxuICAgICAgICAnIW1pbi1oLVtjYWxjKDEwMCUtdmFyKC0tdGFncy12aWV3LWhlaWdodCktdmFyKC0tYXBwLWZvb3Rlci1oZWlnaHQpKV0nOlxuICAgICAgICAgICFmaXhlZEhlYWRlciAmJiBsYXlvdXQgPT09ICd0b3BMZWZ0JyAmJiBmb290ZXIsXG5cbiAgICAgICAgJyFtaW4taC1bY2FsYygxMDAlLXZhcigtLXRvcC10b29sLWhlaWdodCkpXSc6IGZpeGVkSGVhZGVyICYmIGxheW91dCA9PT0gJ2N1dE1lbnUnICYmIGZvb3RlcixcblxuICAgICAgICAnIW1pbi1oLVtjYWxjKDEwMCUtdmFyKC0tdG9wLXRvb2wtaGVpZ2h0KS12YXIoLS10YWdzLXZpZXctaGVpZ2h0KSldJzpcbiAgICAgICAgICAhZml4ZWRIZWFkZXIgJiYgbGF5b3V0ID09PSAnY3V0TWVudScgJiYgZm9vdGVyXG4gICAgICB9XG4gICAgXVwiXG4gID5cbiAgICA8cm91dGVyLXZpZXc+XG4gICAgICA8dGVtcGxhdGUgI2RlZmF1bHQ9XCJ7IENvbXBvbmVudCwgcm91dGUgfVwiPlxuICAgICAgICA8a2VlcC1hbGl2ZSA6aW5jbHVkZT1cImdldENhY2hlc1wiPlxuICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwiQ29tcG9uZW50XCIgOmtleT1cInJvdXRlLmZ1bGxQYXRoXCIgLz5cbiAgICAgICAgPC9rZWVwLWFsaXZlPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3JvdXRlci12aWV3PlxuICA8L3NlY3Rpb24+XG4gIDxGb290ZXIgdi1pZj1cImZvb3RlclwiIC8+XG48L3RlbXBsYXRlPlxuIiwiPHNjcmlwdCBzZXR1cCBsYW5nPVwidHNcIj5cbi8vIGltcG9ydCB7IGNvbXB1dGVkLCB1bnJlZiB9IGZyb20gJ3Z1ZSdcbi8vIGltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IHByb3BUeXBlcyB9IGZyb20gJ0AvdXRpbHMvcHJvcFR5cGVzJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdjb2xsYXBzZScpXG5cbmRlZmluZVByb3BzKHtcbiAgY29sb3I6IHByb3BUeXBlcy5zdHJpbmcuZGVmKCcnKVxufSlcblxuLy8gY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbi8vIGNvbnN0IGNvbGxhcHNlID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0Q29sbGFwc2UpXG5cbi8vIGNvbnN0IHRvZ2dsZUNvbGxhcHNlID0gKCkgPT4ge1xuLy8gICBjb25zdCBjb2xsYXBzZWQgPSB1bnJlZihjb2xsYXBzZSlcbi8vICAgYXBwU3RvcmUuc2V0Q29sbGFwc2UoIWNvbGxhcHNlZClcbi8vIH1cbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgOmNsYXNzPVwicHJlZml4Q2xzXCI+XG4gICAgPCEtLSBJY29uXG4gICAgICA6c2l6ZT1cIjE4XCJcbiAgICAgIDppY29uPVwiY29sbGFwc2UgPyAnYW50LWRlc2lnbjptZW51LXVuZm9sZC1vdXRsaW5lZCcgOiAnYW50LWRlc2lnbjptZW51LWZvbGQtb3V0bGluZWQnXCJcbiAgICAgIDpjb2xvcj1cImNvbG9yXCJcbiAgICAgIGNsYXNzPVwiY3Vyc29yLXBvaW50ZXJcIlxuICAgICAgQGNsaWNrPVwidG9nZ2xlQ29sbGFwc2VcIlxuICAgIC8gLS0+XG4gICAgPGltZyBzcmM9XCJAL2Fzc2V0cy9pbWdzL2xvZ28ucG5nXCIgYWx0PVwiXCIgY2xhc3M9XCJ3LTE4cHggaC0xOHB4IG1yLTE4cHhcIiAvPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgY29tcHV0ZWQgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBFbERyb3Bkb3duLCBFbERyb3Bkb3duTWVudSwgRWxEcm9wZG93bkl0ZW0gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyB1c2VBcHBTdG9yZSB9IGZyb20gJ0Avc3RvcmUvbW9kdWxlcy9hcHAnXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IHByb3BUeXBlcyB9IGZyb20gJ0AvdXRpbHMvcHJvcFR5cGVzJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscyB9ID0gdXNlRGVzaWduKClcblxuY29uc3QgcHJlZml4Q2xzID0gZ2V0UHJlZml4Q2xzKCdzaXplLWRyb3Bkb3duJylcblxuZGVmaW5lUHJvcHMoe1xuICBjb2xvcjogcHJvcFR5cGVzLnN0cmluZy5kZWYoJycpXG59KVxuXG5jb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxuXG5jb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlKClcblxuY29uc3Qgc2l6ZU1hcCA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLnNpemVNYXApXG5cbmNvbnN0IHNldEN1cnJlbnRTaXplID0gKHNpemU6IEVsZW1lbXRQbHVzU2l6ZSkgPT4ge1xuICBhcHBTdG9yZS5zZXRDdXJyZW50U2l6ZShzaXplKVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsRHJvcGRvd24gOmNsYXNzPVwicHJlZml4Q2xzXCIgdHJpZ2dlcj1cImNsaWNrXCIgQGNvbW1hbmQ9XCJzZXRDdXJyZW50U2l6ZVwiPlxuICAgIDxJY29uIDpzaXplPVwiMThcIiBpY29uPVwibWRpOmZvcm1hdC1zaXplXCIgOmNvbG9yPVwiY29sb3JcIiBjbGFzcz1cImN1cnNvci1wb2ludGVyXCIgLz5cbiAgICA8dGVtcGxhdGUgI2Ryb3Bkb3duPlxuICAgICAgPEVsRHJvcGRvd25NZW51PlxuICAgICAgICA8RWxEcm9wZG93bkl0ZW0gdi1mb3I9XCJpdGVtIGluIHNpemVNYXBcIiA6a2V5PVwiaXRlbVwiIDpjb21tYW5kPVwiaXRlbVwiPlxuICAgICAgICAgIHt7IHQoYHNpemUuJHtpdGVtfWApIH19XG4gICAgICAgIDwvRWxEcm9wZG93bkl0ZW0+XG4gICAgICA8L0VsRHJvcGRvd25NZW51PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvRWxEcm9wZG93bj5cbjwvdGVtcGxhdGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgRWxEcm9wZG93biwgRWxEcm9wZG93bk1lbnUsIEVsRHJvcGRvd25JdGVtLCBFbE1lc3NhZ2VCb3ggfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IHVzZUNhY2hlIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlQ2FjaGUnXG5pbXBvcnQgeyByZXNldFJvdXRlciB9IGZyb20gJ0Avcm91dGVyJ1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAndnVlLXJvdXRlcidcbmltcG9ydCB7IGxvZ2luT3V0QXBpIH0gZnJvbSAnQC9hcGkvbG9naW4nXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5pbXBvcnQgeyB1c2VUYWdzVmlld1N0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL3RhZ3NWaWV3J1xuaW1wb3J0IHsgdXNlQXBwU3RvcmVXaXRoT3V0IH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZVdpdGhPdXQoKVxuXG5jb25zdCB0YWdzVmlld1N0b3JlID0gdXNlVGFnc1ZpZXdTdG9yZSgpXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3VzZXItaW5mbycpXG5cbmNvbnN0IHsgdCB9ID0gdXNlSTE4bigpXG5cbmNvbnN0IHsgd3NDYWNoZSB9ID0gdXNlQ2FjaGUoKVxuXG5jb25zdCB7IHJlcGxhY2UgfSA9IHVzZVJvdXRlcigpXG5cbmNvbnN0IHVzZXJJbmZvID0gd3NDYWNoZS5nZXQoYXBwU3RvcmUuZ2V0VXNlckluZm8pXG5cbmNvbnN0IGZ1bGxVc2VyTmFtZSA9IHVzZXJJbmZvLmVtYWlsXG5cbmNvbnN0IHVzZXJOYW1lID0gZnVsbFVzZXJOYW1lLnNwbGl0KCdAJylbMF1cblxubGV0IGF2YSA9ICdhdmF0YXIuanBnJ1xuaWYgKHVzZXJOYW1lID09ICdhZG1pbicpIHtcbiAgYXZhID0gJ2FkbWluLmpwZydcbn1cblxuLy8gY29uc29sZS5sb2coJ3VzZXJJbmZvPT09PT0nLCB1c2VySW5mbylcblxuY29uc3QgbG9naW5PdXQgPSAoKSA9PiB7XG4gIEVsTWVzc2FnZUJveC5jb25maXJtKHQoJ2NvbW1vbi5sb2dpbk91dE1lc3NhZ2UnKSwgdCgnY29tbW9uLnJlbWluZGVyJyksIHtcbiAgICBjb25maXJtQnV0dG9uVGV4dDogdCgnY29tbW9uLm9rJyksXG4gICAgY2FuY2VsQnV0dG9uVGV4dDogdCgnY29tbW9uLmNhbmNlbCcpLFxuICAgIHR5cGU6ICd3YXJuaW5nJ1xuICB9KVxuICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGxvZ2luT3V0QXBpKCkuY2F0Y2goKCkgPT4ge30pXG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdzQ2FjaGUuY2xlYXIoKVxuICAgICAgICB0YWdzVmlld1N0b3JlLmRlbEFsbFZpZXdzKClcbiAgICAgICAgcmVzZXRSb3V0ZXIoKSAvLyDph43nva7pnZnmgIHot6/nlLHooahcbiAgICAgICAgcmVwbGFjZSgnL2xvZ2luJylcbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaCgoKSA9PiB7fSlcbn1cblxuY29uc3QgdG9Eb2N1bWVudCA9ICgpID0+IHtcbiAgd2luZG93Lm9wZW4oJ2h0dHBzOi8vZ2l0aHViLmNvbS9IYXJ2ZXktU3BlY3Rlci9wbHVuZ2VfdWknKVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsRHJvcGRvd24gOmNsYXNzPVwicHJlZml4Q2xzXCIgdHJpZ2dlcj1cImNsaWNrXCI+XG4gICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICA8aW1nXG4gICAgICAgIDpzcmM9XCInc3JjL2Fzc2V0cy9pbWdzLycgKyBhdmFcIlxuICAgICAgICBhbHQ9XCJcIlxuICAgICAgICBjbGFzcz1cInctW2NhbGModmFyKC0tbG9nby1oZWlnaHQpLTI1cHgpXSByb3VuZGVkLVs1MCVdXCJcbiAgICAgIC8+XG4gICAgICA8c3BhbiBjbGFzcz1cIjxsZzpoaWRkZW4gdGV4dC0xNHB4IHBsLVs1cHhdIHRleHQtW3ZhcigtLXRvcC1oZWFkZXItdGV4dC1jb2xvcildXCI+e3tcbiAgICAgICAgdXNlck5hbWVcbiAgICAgIH19PC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDx0ZW1wbGF0ZSAjZHJvcGRvd24+XG4gICAgICA8RWxEcm9wZG93bk1lbnU+XG4gICAgICAgIDxFbERyb3Bkb3duSXRlbT5cbiAgICAgICAgICA8ZGl2IEBjbGljaz1cInRvRG9jdW1lbnRcIj57eyB0KCdzdG9jay5wcm9kRG9jJykgfX08L2Rpdj5cbiAgICAgICAgPC9FbERyb3Bkb3duSXRlbT5cbiAgICAgICAgPEVsRHJvcGRvd25JdGVtIGRpdmlkZWQ+XG4gICAgICAgICAgPGRpdiBAY2xpY2s9XCJsb2dpbk91dFwiPnt7IHQoJ2NvbW1vbi5sb2dpbk91dCcpIH19PC9kaXY+XG4gICAgICAgIDwvRWxEcm9wZG93bkl0ZW0+XG4gICAgICA8L0VsRHJvcGRvd25NZW51PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvRWxEcm9wZG93bj5cbjwvdGVtcGxhdGU+XG4iLCI8c2NyaXB0IHNldHVwIGxhbmc9XCJ0c1wiPlxuaW1wb3J0IHsgRWxCdXR0b24gfSBmcm9tICdlbGVtZW50LXBsdXMnXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IHVzZVJvdXRlciwgUm91dGVSZWNvcmRSYXcgfSBmcm9tICd2dWUtcm91dGVyJ1xuLy8gaW1wb3J0IHsgdXNlQ2FjaGUgfSBmcm9tICdAL2hvb2tzL3dlYi91c2VDYWNoZSdcbi8vIGltcG9ydCB7IHJlc2V0Um91dGVyIH0gZnJvbSAnQC9yb3V0ZXInXG4vLyBpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICd2dWUtcm91dGVyJ1xuLy8gaW1wb3J0IHsgbG9naW5PdXRBcGkgfSBmcm9tICdAL2FwaS9sb2dpbidcbi8vIGltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcbi8vIGltcG9ydCB7IHVzZVRhZ3NWaWV3U3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvdGFnc1ZpZXcnXG4vLyBpbXBvcnQgeyB1c2VBcHBTdG9yZVdpdGhPdXQgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuXG4vLyBjb25zdCBhcHBTdG9yZSA9IHVzZUFwcFN0b3JlV2l0aE91dCgpXG5cbi8vIGNvbnN0IHRhZ3NWaWV3U3RvcmUgPSB1c2VUYWdzVmlld1N0b3JlKClcblxuLy8gY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbi8vIGNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygndXNlci1pbmZvJylcblxuY29uc3QgeyB0IH0gPSB1c2VJMThuKClcblxuLy8gY29uc3QgeyB3c0NhY2hlIH0gPSB1c2VDYWNoZSgpXG5cbi8vIGNvbnN0IHVzZXJJbmZvID0gd3NDYWNoZS5nZXQoYXBwU3RvcmUuZ2V0VXNlckluZm8pXG5cbi8vIGNvbnN0IGZ1bGxVc2VyTmFtZSA9IHVzZXJJbmZvLmVtYWlsXG5cbi8vIGNvbnN0IHVzZXJOYW1lID0gZnVsbFVzZXJOYW1lLnNwbGl0KCdAJylbMF1cblxuLy8gY29uc29sZS5sb2coJ3VzZXJJbmZvPT09PT0nLCB1c2VySW5mbylcblxuY29uc3QgeyBwdXNoIH0gPSB1c2VSb3V0ZXIoKVxubGV0IHJvdXRlciA9IHVzZVJvdXRlcigpXG5cbmNvbnN0IG9wZW5UcmFzaCA9ICgpID0+IHtcbiAgbGV0IHVybCA9ICcvc3RvY2svU3RvY2tMaXN0J1xuICBsZXQgcXVlcnlQYXJhbSA9IHtcbiAgICBkZWw6IDFcbiAgICAvLyBjb2RlOiByb3cuY29kZS5yZXBsYWNlKC8gL2csICcnKVxuICB9XG4gIGxldCByOiBSb3V0ZVJlY29yZFJhdyA9IHtcbiAgICBwYXRoOiB1cmwsXG4gICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoJ0Avdmlld3MvU3RvY2svU3RvY2tMaXN0LnZ1ZScpLFxuICAgIG5hbWU6ICdTdG9ja0xpc3REZWwnLFxuICAgIG1ldGE6IHtcbiAgICAgIHRpdGxlOiB0KCdzdG9jay50cmFzaCcpLFxuICAgICAgYnJlYWRjcnVtYjogdHJ1ZVxuICAgIH1cbiAgfVxuICByb3V0ZXIuYWRkUm91dGUoJ0dyb3VwJywgcilcbiAgcHVzaCh7IHBhdGg6IHVybCwgcXVlcnk6IHF1ZXJ5UGFyYW0gfSlcbn1cblxuY29uc3Qgb3BlbkluZHVzdHJ5ID0gKCkgPT4ge1xuICBsZXQgdXJsID0gJy9pbmR1c3RyeS9pbmRleCdcbiAgcHVzaCh7IHBhdGg6IHVybCB9KVxufVxuXG5jb25zdCBvcGVuR3JvdXBMaXN0ID0gKCkgPT4ge1xuICBsZXQgdXJsID0gJy9ncm91cC9pbmRleCdcbiAgcHVzaCh7IHBhdGg6IHVybCB9KVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPEVsQnV0dG9uIHBsYWluIHR5cGU9XCJcIiBAY2xpY2s9XCJvcGVuR3JvdXBMaXN0XCIgc2l6ZT1cInNtYWxsXCIgbGluaz57e1xuICAgIHQoJ3N0b2NrLmdyb3VwTGlzdCcpXG4gIH19PC9FbEJ1dHRvbj5cbiAgPCEtLSBFbEJ1dHRvbiBwbGFpbiB0eXBlPVwiXCIgQGNsaWNrPVwib3BlbkluZHVzdHJ5XCIgc2l6ZT1cInNtYWxsXCIgbGluaz57e1xuICAgIHQoJ3N0b2NrLnNldENhbGMnKVxuICB9fTwvRWxCdXR0b24gLS0+XG4gIDxFbEJ1dHRvbiBwbGFpbiB0eXBlPVwiXCIgQGNsaWNrPVwib3BlbkluZHVzdHJ5XCIgc2l6ZT1cInNtYWxsXCIgbGluaz57e1xuICAgIHQoJ3N0b2NrLmluZHVzdHJ5X3NlY3RvcicpXG4gIH19PC9FbEJ1dHRvbj5cbiAgPEVsQnV0dG9uIHBsYWluIHR5cGU9XCJcIiBAY2xpY2s9XCJvcGVuVHJhc2hcIiBzaXplPVwic21hbGxcIiBsaW5rPnt7IHQoJ3N0b2NrLnRyYXNoJykgfX08L0VsQnV0dG9uPlxuPC90ZW1wbGF0ZT5cbiIsIjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL0ljb24nXG5pbXBvcnQgeyB1c2VGdWxsc2NyZWVuIH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJ1xuaW1wb3J0IHsgcHJvcFR5cGVzIH0gZnJvbSAnQC91dGlscy9wcm9wVHlwZXMnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3NjcmVlbmZ1bGwnKVxuXG5kZWZpbmVQcm9wcyh7XG4gIGNvbG9yOiBwcm9wVHlwZXMuc3RyaW5nLmRlZignJylcbn0pXG5cbmNvbnN0IHsgdG9nZ2xlLCBpc0Z1bGxzY3JlZW4gfSA9IHVzZUZ1bGxzY3JlZW4oKVxuXG5jb25zdCB0b2dnbGVGdWxsc2NyZWVuID0gKCkgPT4ge1xuICB0b2dnbGUoKVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiA6Y2xhc3M9XCJwcmVmaXhDbHNcIiBAY2xpY2s9XCJ0b2dnbGVGdWxsc2NyZWVuXCI+XG4gICAgPEljb25cbiAgICAgIDpzaXplPVwiMThcIlxuICAgICAgOmljb249XCJpc0Z1bGxzY3JlZW4gPyAnem1kaTpmdWxsc2NyZWVuLWV4aXQnIDogJ3ptZGk6ZnVsbHNjcmVlbidcIlxuICAgICAgOmNvbG9yPVwiY29sb3JcIlxuICAgIC8+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiIsImltcG9ydCB7IHBhdGhSZXNvbHZlIH0gZnJvbSAnQC91dGlscy9yb3V0ZXJIZWxwZXInXG5pbXBvcnQgdHlwZSB7IFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5cbmV4cG9ydCBjb25zdCBmaWx0ZXJCcmVhZGNydW1iID0gKFxuICByb3V0ZXM6IEFwcFJvdXRlUmVjb3JkUmF3W10sXG4gIHBhcmVudFBhdGggPSAnJ1xuKTogQXBwUm91dGVSZWNvcmRSYXdbXSA9PiB7XG4gIGNvbnN0IHJlczogQXBwUm91dGVSZWNvcmRSYXdbXSA9IFtdXG5cbiAgZm9yIChjb25zdCByb3V0ZSBvZiByb3V0ZXMpIHtcbiAgICBjb25zdCBtZXRhID0gcm91dGU/Lm1ldGEgYXMgUm91dGVNZXRhXG4gICAgaWYgKG1ldGEuaGlkZGVuICYmICFtZXRhLnNob3dNYWluUm91dGUpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YTogQXBwUm91dGVSZWNvcmRSYXcgPVxuICAgICAgIW1ldGEuYWx3YXlzU2hvdyAmJiByb3V0ZS5jaGlsZHJlbj8ubGVuZ3RoID09PSAxXG4gICAgICAgID8geyAuLi5yb3V0ZS5jaGlsZHJlblswXSwgcGF0aDogcGF0aFJlc29sdmUocm91dGUucGF0aCwgcm91dGUuY2hpbGRyZW5bMF0ucGF0aCkgfVxuICAgICAgICA6IHsgLi4ucm91dGUgfVxuXG4gICAgZGF0YS5wYXRoID0gcGF0aFJlc29sdmUocGFyZW50UGF0aCwgZGF0YS5wYXRoKVxuXG4gICAgaWYgKGRhdGEuY2hpbGRyZW4pIHtcbiAgICAgIGRhdGEuY2hpbGRyZW4gPSBmaWx0ZXJCcmVhZGNydW1iKGRhdGEuY2hpbGRyZW4sIGRhdGEucGF0aClcbiAgICB9XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJlcy5wdXNoKGRhdGEpXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cbiIsIjxzY3JpcHQgbGFuZz1cInRzeFwiPlxuaW1wb3J0IHsgRWxCcmVhZGNydW1iLCBFbEJyZWFkY3J1bWJJdGVtIH0gZnJvbSAnZWxlbWVudC1wbHVzJ1xuaW1wb3J0IHsgcmVmLCB3YXRjaCwgY29tcHV0ZWQsIHVucmVmLCBkZWZpbmVDb21wb25lbnQsIFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyB1c2VQZXJtaXNzaW9uU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvcGVybWlzc2lvbidcbmltcG9ydCB7IGZpbHRlckJyZWFkY3J1bWIgfSBmcm9tICcuL2hlbHBlcidcbmltcG9ydCB7IGZpbHRlciwgdHJlZVRvTGlzdCB9IGZyb20gJ0AvdXRpbHMvdHJlZSdcbmltcG9ydCB0eXBlIHsgUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQsIFJvdXRlTWV0YSB9IGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgeyB1c2VJMThuIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlSTE4bidcbmltcG9ydCB7IEljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvSWNvbidcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnYnJlYWRjcnVtYicpXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4vLyDpnaLljIXlsZHlm77moIdcbmNvbnN0IGJyZWFkY3J1bWJJY29uID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0QnJlYWRjcnVtYkljb24pXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdCcmVhZGNydW1iJyxcbiAgc2V0dXAoKSB7XG4gICAgY29uc3QgeyBjdXJyZW50Um91dGUgfSA9IHVzZVJvdXRlcigpXG5cbiAgICBjb25zdCB7IHQgfSA9IHVzZUkxOG4oKVxuXG4gICAgY29uc3QgbGV2ZWxMaXN0ID0gcmVmPEFwcFJvdXRlUmVjb3JkUmF3W10+KFtdKVxuXG4gICAgY29uc3QgcGVybWlzc2lvblN0b3JlID0gdXNlUGVybWlzc2lvblN0b3JlKClcblxuICAgIGNvbnN0IG1lbnVSb3V0ZXJzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3Qgcm91dGVycyA9IHBlcm1pc3Npb25TdG9yZS5nZXRSb3V0ZXJzXG4gICAgICByZXR1cm4gZmlsdGVyQnJlYWRjcnVtYihyb3V0ZXJzKVxuICAgIH0pXG5cbiAgICBjb25zdCBnZXRCcmVhZGNydW1iID0gKCkgPT4ge1xuICAgICAgY29uc3QgY3VycmVudFBhdGggPSBjdXJyZW50Um91dGUudmFsdWUucGF0aFxuXG4gICAgICBsZXZlbExpc3QudmFsdWUgPSBmaWx0ZXI8QXBwUm91dGVSZWNvcmRSYXc+KHVucmVmKG1lbnVSb3V0ZXJzKSwgKG5vZGU6IEFwcFJvdXRlUmVjb3JkUmF3KSA9PiB7XG4gICAgICAgIHJldHVybiBub2RlLnBhdGggPT09IGN1cnJlbnRQYXRoXG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IHJlbmRlckJyZWFkY3J1bWIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBicmVhZGNydW1iTGlzdCA9IHRyZWVUb0xpc3Q8QXBwUm91dGVSZWNvcmRSYXdbXT4odW5yZWYobGV2ZWxMaXN0KSlcbiAgICAgIHJldHVybiBicmVhZGNydW1iTGlzdC5tYXAoKHYpID0+IHtcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPSB2LnJlZGlyZWN0ID09PSAnbm9yZWRpcmVjdCdcbiAgICAgICAgY29uc3QgbWV0YSA9IHYubWV0YSBhcyBSb3V0ZU1ldGFcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8RWxCcmVhZGNydW1iSXRlbSB0bz17eyBwYXRoOiBkaXNhYmxlZCA/ICcnIDogdi5wYXRoIH19IGtleT17di5uYW1lfT5cbiAgICAgICAgICAgIHttZXRhPy5pY29uICYmIGJyZWFkY3J1bWJJY29uLnZhbHVlID8gKFxuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxJY29uIGljb249e21ldGEuaWNvbn0gY2xhc3M9XCJtci1bNXB4XVwiPjwvSWNvbj4ge3Qodj8ubWV0YT8udGl0bGUpfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIHQodj8ubWV0YT8udGl0bGUpXG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvRWxCcmVhZGNydW1iSXRlbT5cbiAgICAgICAgKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB3YXRjaChcbiAgICAgICgpID0+IGN1cnJlbnRSb3V0ZS52YWx1ZSxcbiAgICAgIChyb3V0ZTogUm91dGVMb2NhdGlvbk5vcm1hbGl6ZWRMb2FkZWQpID0+IHtcbiAgICAgICAgaWYgKHJvdXRlLnBhdGguc3RhcnRzV2l0aCgnL3JlZGlyZWN0LycpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZ2V0QnJlYWRjcnVtYigpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4gKFxuICAgICAgPEVsQnJlYWRjcnVtYiBzZXBhcmF0b3I9XCIvXCIgY2xhc3M9e2Ake3ByZWZpeENsc30gZmxleCBpdGVtcy1jZW50ZXIgaC1mdWxsIG1sLVsxMHB4XWB9PlxuICAgICAgICA8VHJhbnNpdGlvbkdyb3VwIGFwcGVhciBlbnRlci1hY3RpdmUtY2xhc3M9XCJhbmltYXRlX19hbmltYXRlZCBhbmltYXRlX19mYWRlSW5SaWdodFwiPlxuICAgICAgICAgIHtyZW5kZXJCcmVhZGNydW1iKCl9XG4gICAgICAgIDwvVHJhbnNpdGlvbkdyb3VwPlxuICAgICAgPC9FbEJyZWFkY3J1bWI+XG4gICAgKVxuICB9XG59KVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwibGVzc1wiIHNjb3BlZD5cbkBwcmVmaXgtY2xzOiB+J0B7ZWxOYW1lc3BhY2V9LWJyZWFkY3J1bWInO1xuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIDpkZWVwKCZfX2l0ZW0pIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIC5Ae3ByZWZpeC1jbHN9X19pbm5lciB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGNvbG9yOiB2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpO1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLWNvbG9yLXByaW1hcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIDpkZWVwKCZfX2l0ZW0pOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgIC5Ae3ByZWZpeC1jbHN9X19pbm5lciB7XG4gICAgICBjb2xvcjogdmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKTtcblxuICAgICAgJjpob3ZlciB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1lbC1jb2xvci1wcmltYXJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICA6ZGVlcCgmX19pdGVtKTpsYXN0LWNoaWxkIHtcbiAgICAuQHtwcmVmaXgtY2xzfV9faW5uZXIge1xuICAgICAgY29sb3I6IHZhcigtLWVsLXRleHQtY29sb3ItcGxhY2Vob2xkZXIpO1xuXG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgY29sb3I6IHZhcigtLWVsLXRleHQtY29sb3ItcGxhY2Vob2xkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zdHlsZT5cbiIsIjxzY3JpcHQgbGFuZz1cInRzeFwiPlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IENvbGxhcHNlIH0gZnJvbSAnQC9jb21wb25lbnRzL0NvbGxhcHNlJ1xuaW1wb3J0IHsgTG9jYWxlRHJvcGRvd24gfSBmcm9tICdAL2NvbXBvbmVudHMvTG9jYWxlRHJvcGRvd24nXG5pbXBvcnQgeyBTaXplRHJvcGRvd24gfSBmcm9tICdAL2NvbXBvbmVudHMvU2l6ZURyb3Bkb3duJ1xuaW1wb3J0IHsgVXNlckluZm8gfSBmcm9tICdAL2NvbXBvbmVudHMvVXNlckluZm8nXG5pbXBvcnQgeyBIZWFkQnV0dG9ucyB9IGZyb20gJ0AvY29tcG9uZW50cy9IZWFkQnV0dG9ucydcbmltcG9ydCB7IFRoZW1lU3dpdGNoIH0gZnJvbSAnQC9jb21wb25lbnRzL1RoZW1lU3dpdGNoJ1xuaW1wb3J0IHsgU2NyZWVuZnVsbCB9IGZyb20gJ0AvY29tcG9uZW50cy9TY3JlZW5mdWxsJ1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJ0AvY29tcG9uZW50cy9CcmVhZGNydW1iJ1xuaW1wb3J0IHsgdXNlQXBwU3RvcmUgfSBmcm9tICdAL3N0b3JlL21vZHVsZXMvYXBwJ1xuaW1wb3J0IHsgdXNlRGVzaWduIH0gZnJvbSAnQC9ob29rcy93ZWIvdXNlRGVzaWduJ1xuXG5jb25zdCB7IGdldFByZWZpeENscywgdmFyaWFibGVzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ3Rvb2wtaGVhZGVyJylcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbi8vIOmdouWMheWxkVxuY29uc3QgYnJlYWRjcnVtYiA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldEJyZWFkY3J1bWIpXG5cbi8vIOaKmOWPoOWbvuagh1xuY29uc3QgaGFtYnVyZ2VyID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0SGFtYnVyZ2VyKVxuXG4vLyDlhajlsY/lm77moIdcbmNvbnN0IHNjcmVlbmZ1bGwgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRTY3JlZW5mdWxsKVxuXG4vLyDlsLrlr7jlm77moIdcbmNvbnN0IHNpemUgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRTaXplKVxuXG4vLyDluIPlsYBcbmNvbnN0IGxheW91dCA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldExheW91dClcblxuLy8g5aSa6K+t6KiA5Zu+5qCHXG5jb25zdCBsb2NhbGUgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMb2NhbGUpXG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdUb29sSGVhZGVyJyxcbiAgc2V0dXAoKSB7XG4gICAgcmV0dXJuICgpID0+IChcbiAgICAgIDxkaXZcbiAgICAgICAgaWQ9e2Ake3ZhcmlhYmxlcy5uYW1lc3BhY2V9LXRvb2wtaGVhZGVyYH1cbiAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICBwcmVmaXhDbHMsXG4gICAgICAgICAgJ2gtW3ZhcigtLXRvcC10b29sLWhlaWdodCldIHJlbGF0aXZlIHB4LVt2YXIoLS10b3AtdG9vbC1wLXgpXSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4nLFxuICAgICAgICAgICdkYXJrOmJnLVt2YXIoLS1lbC1iZy1jb2xvcildJ1xuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7bGF5b3V0LnZhbHVlICE9PSAndG9wJyA/IChcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaC1mdWxsIGZsZXggaXRlbXMtY2VudGVyXCI+XG4gICAgICAgICAgICB7aGFtYnVyZ2VyLnZhbHVlICYmIGxheW91dC52YWx1ZSAhPT0gJ2N1dE1lbnUnID8gKFxuICAgICAgICAgICAgICA8Q29sbGFwc2UgY2xhc3M9XCJob3Zlci10aWdnZXJcIiBjb2xvcj1cInZhcigtLXRvcC1oZWFkZXItdGV4dC1jb2xvcilcIj48L0NvbGxhcHNlPlxuICAgICAgICAgICAgKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIHticmVhZGNydW1iLnZhbHVlID8gPEJyZWFkY3J1bWIgY2xhc3M9XCI8bWQ6aGlkZGVuXCI+PC9CcmVhZGNydW1iPiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgPGRpdiBjbGFzcz1cImgtZnVsbCBmbGV4IGl0ZW1zLWNlbnRlclwiPlxuXG4gICAgICAgIDxIZWFkQnV0dG9ucyBjbGFzcz1cImhvdmVyLXRpZ2dlclwiIGNvbG9yPVwidmFyKC0tdG9wLWhlYWRlci10ZXh0LWNvbG9yKVwiPjwvSGVhZEJ1dHRvbnM+XG5cbiAgICAgICAgICB7c2NyZWVuZnVsbC52YWx1ZSA/IChcbiAgICAgICAgICAgIDxTY3JlZW5mdWxsIGNsYXNzPVwiaG92ZXItdGlnZ2VyXCIgY29sb3I9XCJ2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXCI+PC9TY3JlZW5mdWxsPlxuICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAge3NpemUudmFsdWUgPyAoXG4gICAgICAgICAgICA8U2l6ZURyb3Bkb3duIGNsYXNzPVwiaG92ZXItdGlnZ2VyXCIgY29sb3I9XCJ2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXCI+PC9TaXplRHJvcGRvd24+XG4gICAgICAgICAgKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgICB7bG9jYWxlLnZhbHVlID8gKFxuICAgICAgICAgICAgPExvY2FsZURyb3Bkb3duXG4gICAgICAgICAgICAgIGNsYXNzPVwiaG92ZXItdGlnZ2VyXCJcbiAgICAgICAgICAgICAgY29sb3I9XCJ2YXIoLS10b3AtaGVhZGVyLXRleHQtY29sb3IpXCJcbiAgICAgICAgICAgID48L0xvY2FsZURyb3Bkb3duPlxuICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAgPFRoZW1lU3dpdGNoLz5cbiAgICAgICAgICA8VXNlckluZm8gY2xhc3M9XCJob3Zlci10aWdnZXJcIj48L1VzZXJJbmZvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufSlcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cImxlc3NcIiBzY29wZWQ+XG5AcHJlZml4LWNsczogfidAe25hbWVzcGFjZX0tdG9vbC1oZWFkZXInO1xuXG4uQHtwcmVmaXgtY2xzfSB7XG4gIHRyYW5zaXRpb246IGxlZnQgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgeyBjb21wdXRlZCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IE1lbnUgfSBmcm9tICdAL2NvbXBvbmVudHMvTWVudSdcbmltcG9ydCB7IFRhYk1lbnUgfSBmcm9tICdAL2NvbXBvbmVudHMvVGFiTWVudSdcbmltcG9ydCB7IFRhZ3NWaWV3IH0gZnJvbSAnQC9jb21wb25lbnRzL1RhZ3NWaWV3J1xuaW1wb3J0IHsgTG9nbyB9IGZyb20gJ0AvY29tcG9uZW50cy9Mb2dvJ1xuaW1wb3J0IEFwcFZpZXcgZnJvbSAnLi9BcHBWaWV3LnZ1ZSdcbmltcG9ydCBUb29sSGVhZGVyIGZyb20gJy4vVG9vbEhlYWRlci52dWUnXG5pbXBvcnQgeyBFbFNjcm9sbGJhciB9IGZyb20gJ2VsZW1lbnQtcGx1cydcbmltcG9ydCB7IHVzZURlc2lnbiB9IGZyb20gJ0AvaG9va3Mvd2ViL3VzZURlc2lnbidcblxuY29uc3QgeyBnZXRQcmVmaXhDbHMgfSA9IHVzZURlc2lnbigpXG5cbmNvbnN0IHByZWZpeENscyA9IGdldFByZWZpeENscygnbGF5b3V0JylcblxuY29uc3QgYXBwU3RvcmUgPSB1c2VBcHBTdG9yZSgpXG5cbmNvbnN0IHBhZ2VMb2FkaW5nID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUuZ2V0UGFnZUxvYWRpbmcpXG5cbi8vIOagh+etvumhtVxuY29uc3QgdGFnc1ZpZXcgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRUYWdzVmlldylcblxuLy8g6I+c5Y2V5oqY5Y+gXG5jb25zdCBjb2xsYXBzZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldENvbGxhcHNlKVxuXG4vLyBsb2dvXG5jb25zdCBsb2dvID0gY29tcHV0ZWQoKCkgPT4gYXBwU3RvcmUubG9nbylcblxuLy8g5Zu65a6a5aS06YOoXG5jb25zdCBmaXhlZEhlYWRlciA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldEZpeGVkSGVhZGVyKVxuXG4vLyDmmK/lkKbmmK/np7vliqjnq69cbmNvbnN0IG1vYmlsZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldE1vYmlsZSlcblxuZXhwb3J0IGNvbnN0IHVzZVJlbmRlckxheW91dCA9ICgpID0+IHtcbiAgY29uc3QgcmVuZGVyQ2xhc3NpYyA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlPVwiZGlzcGxheTpub25lXCJcbiAgICAgICAgICBjbGFzcz17WydhYnNvbHV0ZSB0b3AtMCBsZWZ0LTAgaC1mdWxsJywgeyAnIWZpeGVkIHotMzAwMCc6IG1vYmlsZS52YWx1ZSB9XX1cbiAgICAgICAgPlxuICAgICAgICAgIHtsb2dvLnZhbHVlID8gKFxuICAgICAgICAgICAgPExvZ29cbiAgICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgICAnYmctW3ZhcigtLWxlZnQtbWVudS1iZy1jb2xvcildIGJvcmRlci1ib3R0b20tMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS1sb2dvLWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXScsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgJyFwbC0wJzogbW9iaWxlLnZhbHVlICYmIGNvbGxhcHNlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgJ3ctW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6IGFwcFN0b3JlLmdldENvbGxhcHNlLFxuICAgICAgICAgICAgICAgICAgJ3ctW3ZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpXSc6ICFhcHBTdG9yZS5nZXRDb2xsYXBzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgICAgPjwvTG9nbz5cbiAgICAgICAgICApIDogdW5kZWZpbmVkfVxuICAgICAgICAgIDxNZW51IGNsYXNzPXtbeyAnIWgtW2NhbGMoMTAwJS12YXIoLS1sb2dvLWhlaWdodCkpXSc6IGxvZ28udmFsdWUgfV19PjwvTWVudT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgYCR7cHJlZml4Q2xzfS1jb250ZW50YCxcbiAgICAgICAgICAgICdhYnNvbHV0ZSB0b3AtMCBoLVsxMDAlXScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCkpXSBsZWZ0LVt2YXIoLS1sZWZ0LW1lbnUtbWluLXdpZHRoKV0nOlxuICAgICAgICAgICAgICAgIGNvbGxhcHNlLnZhbHVlICYmICFtb2JpbGUudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSxcbiAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgIWNvbGxhcHNlLnZhbHVlICYmICFtb2JpbGUudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSxcbiAgICAgICAgICAgICAgJ2ZpeGVkICF3LWZ1bGwgIWxlZnQtMCc6IG1vYmlsZS52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF19XG4gICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICA+XG4gICAgICAgICAgPEVsU2Nyb2xsYmFyXG4gICAgICAgICAgICB2LWxvYWRpbmc9e3BhZ2VMb2FkaW5nLnZhbHVlfVxuICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgYCR7cHJlZml4Q2xzfS1jb250ZW50LXNjcm9sbGJhcmAsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAnIWgtW2NhbGMoMTAwJS12YXIoLS10b3AtdG9vbC1oZWlnaHQpLXZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0gbXQtW2NhbGModmFyKC0tdG9wLXRvb2wtaGVpZ2h0KSt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KSldJzpcbiAgICAgICAgICAgICAgICAgIGZpeGVkSGVhZGVyLnZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICdmaXhlZCB0b3AtMCBsZWZ0LTAgei0xMCc6IGZpeGVkSGVhZGVyLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWluLXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlLnZhbHVlICYmIGZpeGVkSGVhZGVyLnZhbHVlICYmICFtb2JpbGUudmFsdWUsXG5cbiAgICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCkpXSBsZWZ0LVt2YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKV0nOlxuICAgICAgICAgICAgICAgICAgICAhY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWUgJiYgIW1vYmlsZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICchdy1mdWxsICFsZWZ0LTAnOiBtb2JpbGUudmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgIHN0eWxlPVwidHJhbnNpdGlvbjogYWxsIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFRvb2xIZWFkZXIgY2xhc3M9XCJib3JkZXItYm90dG9tLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdG9wLXRvb2wtYm9yZGVyLWNvbG9yKV0gYmctW3ZhcigtLXRvcC1oZWFkZXItYmctY29sb3IpXSBkYXJrOmJvcmRlci1bdmFyKC0tZWwtYm9yZGVyLWNvbG9yKV1cIj48L1Rvb2xIZWFkZXI+XG5cbiAgICAgICAgICAgICAge3RhZ3NWaWV3LnZhbHVlID8gKFxuICAgICAgICAgICAgICAgIDxUYWdzVmlldyBjbGFzcz1cImJvcmRlci1ib3R0b20tMSBib3JkZXItdG9wLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdGFncy12aWV3LWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXVwiPjwvVGFnc1ZpZXc+XG4gICAgICAgICAgICAgICkgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPEFwcFZpZXc+PC9BcHBWaWV3PlxuICAgICAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyVG9wTGVmdCA9ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyIGJnLVt2YXIoLS10b3AtaGVhZGVyLWJnLWNvbG9yKV0gYm9yZGVyLWJvdHRvbS0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLXRvcC10b29sLWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXVwiPlxuICAgICAgICAgIHtsb2dvLnZhbHVlID8gPExvZ28gY2xhc3M9XCJob3Zlci10aWdnZXIgIXByLTE1cHhcIj48L0xvZ28+IDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgPFRvb2xIZWFkZXIgY2xhc3M9XCJmbGV4LTFcIj48L1Rvb2xIZWFkZXI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWJzb2x1dGUgdG9wLVt2YXIoLS1sb2dvLWhlaWdodCkrMXB4XSBsZWZ0LTAgdy1mdWxsIGgtW2NhbGMoMTAwJS0xcHgtdmFyKC0tbG9nby1oZWlnaHQpKV0gZmxleFwiPlxuICAgICAgICAgIDxNZW51IGNsYXNzPVwiIWgtZnVsbFwiPjwvTWVudT5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICBgJHtwcmVmaXhDbHN9LWNvbnRlbnRgLFxuICAgICAgICAgICAgICAnaC1bMTAwJV0nLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS1sZWZ0LW1lbnUtbWluLXdpZHRoKSldIGxlZnQtW3ZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgICBjb2xsYXBzZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLWxlZnQtbWVudS1tYXgtd2lkdGgpKV0gbGVmdC1bdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCldJzpcbiAgICAgICAgICAgICAgICAgICFjb2xsYXBzZS52YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgc3R5bGU9XCJ0cmFuc2l0aW9uOiBhbGwgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxFbFNjcm9sbGJhclxuICAgICAgICAgICAgICB2LWxvYWRpbmc9e3BhZ2VMb2FkaW5nLnZhbHVlfVxuICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgIGAke3ByZWZpeENsc30tY29udGVudC1zY3JvbGxiYXJgLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICchaC1bY2FsYygxMDAlLXZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0gbXQtW2NhbGModmFyKC0tdGFncy12aWV3LWhlaWdodCkpXSc6XG4gICAgICAgICAgICAgICAgICAgIGZpeGVkSGVhZGVyLnZhbHVlICYmIHRhZ3NWaWV3LnZhbHVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7dGFnc1ZpZXcudmFsdWUgPyAoXG4gICAgICAgICAgICAgICAgPFRhZ3NWaWV3XG4gICAgICAgICAgICAgICAgICBjbGFzcz17W1xuICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLWJvdHRvbS0xIGJvcmRlci10b3AtMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS10YWdzLXZpZXctYm9yZGVyLWNvbG9yKV0gZGFyazpib3JkZXItW3ZhcigtLWVsLWJvcmRlci1jb2xvcildJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICchZml4ZWQgdG9wLTAgbGVmdC0wIHotMTAnOiBmaXhlZEhlYWRlci52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLWxlZnQtbWVudS1taW4td2lkdGgpKV0gbGVmdC1bdmFyKC0tbGVmdC1tZW51LW1pbi13aWR0aCldIG10LVt2YXIoLS1sb2dvLWhlaWdodCldJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlLnZhbHVlICYmIGZpeGVkSGVhZGVyLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICd3LVtjYWxjKDEwMCUtdmFyKC0tbGVmdC1tZW51LW1heC13aWR0aCkpXSBsZWZ0LVt2YXIoLS1sZWZ0LW1lbnUtbWF4LXdpZHRoKV0gbXQtW3ZhcigtLWxvZ28taGVpZ2h0KV0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgIWNvbGxhcHNlLnZhbHVlICYmIGZpeGVkSGVhZGVyLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IHdpZHRoIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMiksIGxlZnQgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgICAgICAgID48L1RhZ3NWaWV3PlxuICAgICAgICAgICAgICApIDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgICAgIDxBcHBWaWV3PjwvQXBwVmlldz5cbiAgICAgICAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKVxuICB9XG5cbiAgY29uc3QgcmVuZGVyVG9wID0gKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIGJnLVt2YXIoLS10b3AtaGVhZGVyLWJnLWNvbG9yKV0gYm9yZGVyLWJvdHRvbS0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLXRvcC10b29sLWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXVwiPlxuICAgICAgICAgIHtsb2dvLnZhbHVlID8gPExvZ28gY2xhc3M9XCJob3Zlci10aWdnZXJcIj48L0xvZ28+IDogdW5kZWZpbmVkfVxuICAgICAgICAgIDxNZW51IGNsYXNzPVwiZmxleC0xIHB4LTEwcHggaC1bdmFyKC0tdG9wLXRvb2wtaGVpZ2h0KV1cIj48L01lbnU+XG4gICAgICAgICAgPFRvb2xIZWFkZXI+PC9Ub29sSGVhZGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz17W2Ake3ByZWZpeENsc30tY29udGVudGAsICdoLWZ1bGwgdy1mdWxsJ119PlxuICAgICAgICAgIDxFbFNjcm9sbGJhclxuICAgICAgICAgICAgdi1sb2FkaW5nPXtwYWdlTG9hZGluZy52YWx1ZX1cbiAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgIGAke3ByZWZpeENsc30tY29udGVudC1zY3JvbGxiYXJgLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgJ210LVt2YXIoLS10YWdzLXZpZXctaGVpZ2h0KV0nOiBmaXhlZEhlYWRlci52YWx1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0YWdzVmlldy52YWx1ZSA/IChcbiAgICAgICAgICAgICAgPFRhZ3NWaWV3XG4gICAgICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgICAgICdib3JkZXItYm90dG9tLTEgYm9yZGVyLXRvcC0xIGJvcmRlci1zb2xpZCBib3JkZXItW3ZhcigtLXRhZ3Mtdmlldy1ib3JkZXItY29sb3IpXSBkYXJrOmJvcmRlci1bdmFyKC0tZWwtYm9yZGVyLWNvbG9yKV0nLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAnIWZpeGVkIHctZnVsbCB0b3AtW3ZhcigtLXRvcC10b29sLWhlaWdodCldIGxlZnQtMCc6IGZpeGVkSGVhZGVyLnZhbHVlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IHdpZHRoIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMiksIGxlZnQgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgICAgICA+PC9UYWdzVmlldz5cbiAgICAgICAgICAgICkgOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgIDxBcHBWaWV3PjwvQXBwVmlldz5cbiAgICAgICAgICA8L0VsU2Nyb2xsYmFyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgIClcbiAgfVxuXG4gIGNvbnN0IHJlbmRlckN1dE1lbnUgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBiZy1bdmFyKC0tdG9wLWhlYWRlci1iZy1jb2xvcildIGJvcmRlci1ib3R0b20tMSBib3JkZXItc29saWQgYm9yZGVyLVt2YXIoLS10b3AtdG9vbC1ib3JkZXItY29sb3IpXSBkYXJrOmJvcmRlci1bdmFyKC0tZWwtYm9yZGVyLWNvbG9yKV1cIj5cbiAgICAgICAgICB7bG9nby52YWx1ZSA/IDxMb2dvIGNsYXNzPVwiaG92ZXItdGlnZ2VyICFwci0xNXB4XCI+PC9Mb2dvPiA6IHVuZGVmaW5lZH1cblxuICAgICAgICAgIDxUb29sSGVhZGVyIGNsYXNzPVwiZmxleC0xXCI+PC9Ub29sSGVhZGVyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFic29sdXRlIHRvcC1bdmFyKC0tbG9nby1oZWlnaHQpXSBsZWZ0LTAgdy1mdWxsIGgtW2NhbGMoMTAwJS12YXIoLS1sb2dvLWhlaWdodCkpXSBmbGV4XCI+XG4gICAgICAgICAgPFRhYk1lbnU+PC9UYWJNZW51PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPXtbXG4gICAgICAgICAgICAgIGAke3ByZWZpeENsc30tY29udGVudGAsXG4gICAgICAgICAgICAgICdoLVsxMDAlXScsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLXRhYi1tZW51LW1pbi13aWR0aCkpXSBsZWZ0LVt2YXIoLS10YWItbWVudS1taW4td2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgICBjb2xsYXBzZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAndy1bY2FsYygxMDAlLXZhcigtLXRhYi1tZW51LW1heC13aWR0aCkpXSBsZWZ0LVt2YXIoLS10YWItbWVudS1tYXgtd2lkdGgpXSc6XG4gICAgICAgICAgICAgICAgICAhY29sbGFwc2UudmFsdWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIHN0eWxlPVwidHJhbnNpdGlvbjogYWxsIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMik7XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8RWxTY3JvbGxiYXJcbiAgICAgICAgICAgICAgdi1sb2FkaW5nPXtwYWdlTG9hZGluZy52YWx1ZX1cbiAgICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgICBgJHtwcmVmaXhDbHN9LWNvbnRlbnQtc2Nyb2xsYmFyYCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAnIWgtW2NhbGMoMTAwJS12YXIoLS10YWdzLXZpZXctaGVpZ2h0KSldIG10LVtjYWxjKHZhcigtLXRhZ3Mtdmlldy1oZWlnaHQpKV0nOlxuICAgICAgICAgICAgICAgICAgICBmaXhlZEhlYWRlci52YWx1ZSAmJiB0YWdzVmlldy52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RhZ3NWaWV3LnZhbHVlID8gKFxuICAgICAgICAgICAgICAgIDxUYWdzVmlld1xuICAgICAgICAgICAgICAgICAgY2xhc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlci1ib3R0b20tMSBib3JkZXItdG9wLTEgYm9yZGVyLXNvbGlkIGJvcmRlci1bdmFyKC0tdGFncy12aWV3LWJvcmRlci1jb2xvcildIGRhcms6Ym9yZGVyLVt2YXIoLS1lbC1ib3JkZXItY29sb3IpXScsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAnIWZpeGVkIHRvcC0wIGxlZnQtMCB6LTEwJzogZml4ZWRIZWFkZXIudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS10YWItbWVudS1taW4td2lkdGgpKV0gbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWluLXdpZHRoKV0gbXQtW3ZhcigtLWxvZ28taGVpZ2h0KV0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFwc2UudmFsdWUgJiYgZml4ZWRIZWFkZXIudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgJ3ctW2NhbGMoMTAwJS12YXIoLS10YWItbWVudS1tYXgtd2lkdGgpKV0gbGVmdC1bdmFyKC0tdGFiLW1lbnUtbWF4LXdpZHRoKV0gbXQtW3ZhcigtLWxvZ28taGVpZ2h0KV0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgIWNvbGxhcHNlLnZhbHVlICYmIGZpeGVkSGVhZGVyLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICBzdHlsZT1cInRyYW5zaXRpb246IHdpZHRoIHZhcigtLXRyYW5zaXRpb24tdGltZS0wMiksIGxlZnQgdmFyKC0tdHJhbnNpdGlvbi10aW1lLTAyKTtcIlxuICAgICAgICAgICAgICAgID48L1RhZ3NWaWV3PlxuICAgICAgICAgICAgICApIDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgICAgIDxBcHBWaWV3PjwvQXBwVmlldz5cbiAgICAgICAgICAgIDwvRWxTY3JvbGxiYXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW5kZXJDbGFzc2ljLFxuICAgIHJlbmRlclRvcExlZnQsXG4gICAgcmVuZGVyVG9wLFxuICAgIHJlbmRlckN1dE1lbnVcbiAgfVxufVxuIiwiPHNjcmlwdCBsYW5nPVwidHN4XCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgZGVmaW5lQ29tcG9uZW50LCB1bnJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZUFwcFN0b3JlIH0gZnJvbSAnQC9zdG9yZS9tb2R1bGVzL2FwcCdcbmltcG9ydCB7IEJhY2t0b3AgfSBmcm9tICdAL2NvbXBvbmVudHMvQmFja3RvcCdcbi8vIGltcG9ydCB7IFNldHRpbmcgfSBmcm9tICdAL2NvbXBvbmVudHMvU2V0dGluZydcbmltcG9ydCB7IHVzZVJlbmRlckxheW91dCB9IGZyb20gJy4vY29tcG9uZW50cy91c2VSZW5kZXJMYXlvdXQnXG5pbXBvcnQgeyB1c2VEZXNpZ24gfSBmcm9tICdAL2hvb2tzL3dlYi91c2VEZXNpZ24nXG5cbmNvbnN0IHsgZ2V0UHJlZml4Q2xzIH0gPSB1c2VEZXNpZ24oKVxuXG5jb25zdCBwcmVmaXhDbHMgPSBnZXRQcmVmaXhDbHMoJ2xheW91dCcpXG5cbmNvbnN0IGFwcFN0b3JlID0gdXNlQXBwU3RvcmUoKVxuXG4vLyDmmK/lkKbmmK/np7vliqjnq69cbmNvbnN0IG1vYmlsZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldE1vYmlsZSlcblxuLy8g6I+c5Y2V5oqY5Y+gXG5jb25zdCBjb2xsYXBzZSA9IGNvbXB1dGVkKCgpID0+IGFwcFN0b3JlLmdldENvbGxhcHNlKVxuXG5jb25zdCBsYXlvdXQgPSBjb21wdXRlZCgoKSA9PiBhcHBTdG9yZS5nZXRMYXlvdXQpXG5cbmNvbnN0IGhhbmRsZUNsaWNrT3V0c2lkZSA9ICgpID0+IHtcbiAgYXBwU3RvcmUuc2V0Q29sbGFwc2UodHJ1ZSlcbn1cblxuY29uc3QgcmVuZGVyTGF5b3V0ID0gKCkgPT4ge1xuICBzd2l0Y2ggKHVucmVmKGxheW91dCkpIHtcbiAgICBjYXNlICdjbGFzc2ljJzpcbiAgICAgIGNvbnN0IHsgcmVuZGVyQ2xhc3NpYyB9ID0gdXNlUmVuZGVyTGF5b3V0KClcbiAgICAgIHJldHVybiByZW5kZXJDbGFzc2ljKClcbiAgICBjYXNlICd0b3BMZWZ0JzpcbiAgICAgIGNvbnN0IHsgcmVuZGVyVG9wTGVmdCB9ID0gdXNlUmVuZGVyTGF5b3V0KClcbiAgICAgIHJldHVybiByZW5kZXJUb3BMZWZ0KClcbiAgICBjYXNlICd0b3AnOlxuICAgICAgY29uc3QgeyByZW5kZXJUb3AgfSA9IHVzZVJlbmRlckxheW91dCgpXG4gICAgICByZXR1cm4gcmVuZGVyVG9wKClcbiAgICBjYXNlICdjdXRNZW51JzpcbiAgICAgIGNvbnN0IHsgcmVuZGVyQ3V0TWVudSB9ID0gdXNlUmVuZGVyTGF5b3V0KClcbiAgICAgIHJldHVybiByZW5kZXJDdXRNZW51KClcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnTGF5b3V0JyxcbiAgc2V0dXAoKSB7XG4gICAgcmV0dXJuICgpID0+IChcbiAgICAgIDxzZWN0aW9uIGNsYXNzPXtbcHJlZml4Q2xzLCBgJHtwcmVmaXhDbHN9X18ke2xheW91dC52YWx1ZX1gLCAndy1bMTAwJV0gaC1bMTAwJV0gcmVsYXRpdmUnXX0+XG4gICAgICAgIHttb2JpbGUudmFsdWUgJiYgIWNvbGxhcHNlLnZhbHVlID8gKFxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiYWJzb2x1dGUgdG9wLTAgbGVmdC0wIHctZnVsbCBoLWZ1bGwgb3BhY2l0eS0zMCB6LTk5IGJnLVt2YXIoLS1lbC1jb2xvci1ibGFjayldXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNsaWNrT3V0c2lkZX1cbiAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICkgOiB1bmRlZmluZWR9XG5cbiAgICAgICAge3JlbmRlckxheW91dCgpfVxuXG4gICAgICAgIDxCYWNrdG9wPjwvQmFja3RvcD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICApXG4gIH1cbn0pXG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJsZXNzXCIgc2NvcGVkPlxuQHByZWZpeC1jbHM6IH4nQHtuYW1lc3BhY2V9LWxheW91dCc7XG5cbi5Ae3ByZWZpeC1jbHN9IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYXBwLWNvbnRuZXQtYmctY29sb3IpO1xuICA6ZGVlcCguQHtlbE5hbWVzcGFjZX0tc2Nyb2xsYmFyX192aWV3KSB7XG4gICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIH1cbn1cbjwvc3R5bGU+XG4iXSwiZmlsZSI6ImFzc2V0cy9MYXlvdXQuZmM5YWY1ZDguanMifQ==
