import{_ as e}from"./ContentWrap.851f508f.js";import{bZ as a,Q as t,R as s,d as n,ci as i,cj as o,ck as l,Y as u,bN as r,r as c,cl as d,aR as f,D as m,az as p,v,ab as g,$ as b,o as k,k as w,g as h,w as x,e as y,n as I,a as _,a8 as C,at as O,a0 as j,aU as z,c as T,aZ as L,aH as N,G as D,cm as A,cn as E,as as V,co as B,cp as M,F as R,av as Y,aQ as X,a4 as $,a2 as F,h as S,bO as W,aa as Z,bf as G,au as H,cq as P,ae as Q,B as q,a6 as U,cr as J,ca as K,l as ee,x as ae,t as te}from"./index.63ad27ed.js";import{m as se}from"./typescript2.0e462989.js";import{i as ne}from"./browser2.47d88281.js";import{u as ie}from"./index2.d473352e.js";import{d as oe}from"./debounce.ac76efe8.js";import{E as le}from"./el-button.6bb32269.js";import"./el-card.9f27dd59.js";import"./el-popper.2e0f947e.js";import"./index2.06b96e43.js";import"./index2.f758414f.js";function ue(e,t,s){var n=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(s)&&(n="leading"in s?!!s.leading:n,i="trailing"in s?!!s.trailing:i),oe(e,t,{leading:n,maxWait:t,trailing:i})}const re=t({urlList:{type:s(Array),default:()=>se([])},zIndex:{type:Number},initialIndex:{type:Number,default:0},infinite:{type:Boolean,default:!0},hideOnClickModal:{type:Boolean,default:!1},teleported:{type:Boolean,default:!1},closeOnPressEscape:{type:Boolean,default:!0}}),ce=["src"];const de=Q(Z(n({name:"ElImageViewer",props:re,emits:{close:()=>!0,switch:e=>"number"==typeof e},setup(e,{emit:a}){const t=e,s={CONTAIN:{name:"contain",icon:i(o)},ORIGINAL:{name:"original",icon:i(l)}},n=ne()?"DOMMouseScroll":"mousewheel",{t:Z}=ie(),Q=u("image-viewer"),{nextZIndex:q}=r(),U=c(),J=c([]),K=d(),ee=c(!0),ae=c(t.initialIndex),te=f(s.CONTAIN),se=c({scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1}),oe=m((()=>{const{urlList:e}=t;return e.length<=1})),le=m((()=>0===ae.value)),re=m((()=>ae.value===t.urlList.length-1)),de=m((()=>t.urlList[ae.value])),fe=m((()=>{const{scale:e,deg:a,offsetX:t,offsetY:n,enableTransition:i}=se.value;let o=t/e,l=n/e;switch(a%360){case 90:case-270:[o,l]=[l,-o];break;case 180:case-180:[o,l]=[-o,-l];break;case 270:case-90:[o,l]=[-l,o]}const u={transform:`scale(${e}) rotate(${a}deg) translate(${o}px, ${l}px)`,transition:i?"transform .3s":""};return te.value.name===s.CONTAIN.name&&(u.maxWidth=u.maxHeight="100%"),u})),me=m((()=>p(t.zIndex)?t.zIndex:q()));function pe(){K.stop(),a("close")}function ve(){ee.value=!1}function ge(e){ee.value=!1,e.target.alt=Z("el.image.error")}function be(e){if(ee.value||0!==e.button||!U.value)return;se.value.enableTransition=!1;const{offsetX:a,offsetY:t}=se.value,s=e.pageX,n=e.pageY,i=ue((e=>{se.value={...se.value,offsetX:a+e.pageX-s,offsetY:t+e.pageY-n}})),o=G(document,"mousemove",i);G(document,"mouseup",(()=>{o()})),e.preventDefault()}function ke(){se.value={scale:1,deg:0,offsetX:0,offsetY:0,enableTransition:!1}}function we(){if(ee.value)return;const e=P(s),a=Object.values(s),t=te.value.name,n=(a.findIndex((e=>e.name===t))+1)%e.length;te.value=s[e[n]],ke()}function he(){if(le.value&&!t.infinite)return;const e=t.urlList.length;ae.value=(ae.value-1+e)%e}function xe(){if(re.value&&!t.infinite)return;const e=t.urlList.length;ae.value=(ae.value+1)%e}function ye(e,a={}){if(ee.value)return;const{zoomRate:t,rotateDeg:s,enableTransition:n}={zoomRate:1.4,rotateDeg:90,enableTransition:!0,...a};switch(e){case"zoomOut":se.value.scale>.2&&(se.value.scale=Number.parseFloat((se.value.scale/t).toFixed(3)));break;case"zoomIn":se.value.scale<7&&(se.value.scale=Number.parseFloat((se.value.scale*t).toFixed(3)));break;case"clockwise":se.value.deg+=s;break;case"anticlockwise":se.value.deg-=s}se.value.enableTransition=n}return v(de,(()=>{g((()=>{const e=J.value[0];(null==e?void 0:e.complete)||(ee.value=!0)}))})),v(ae,(e=>{ke(),a("switch",e)})),b((()=>{var e,a;!function(){const e=ue((e=>{switch(e.code){case H.esc:t.closeOnPressEscape&&pe();break;case H.space:we();break;case H.left:he();break;case H.up:ye("zoomIn");break;case H.right:xe();break;case H.down:ye("zoomOut")}})),a=ue((e=>{ye((e.wheelDelta?e.wheelDelta:-e.detail)>0?"zoomIn":"zoomOut",{zoomRate:1.2,enableTransition:!1})}));K.run((()=>{G(document,"keydown",e),G(document,n,a)}))}(),null==(a=null==(e=U.value)?void 0:e.focus)||a.call(e)})),(e,a)=>(k(),w(W,{to:"body",disabled:!e.teleported},[h(S,{name:"viewer-fade",appear:""},{default:x((()=>[y("div",{ref_key:"wrapper",ref:U,tabindex:-1,class:I(_(Q).e("wrapper")),style:$({zIndex:_(me)})},[y("div",{class:I(_(Q).e("mask")),onClick:a[0]||(a[0]=C((a=>e.hideOnClickModal&&pe()),["self"]))},null,2),O(" CLOSE "),y("span",{class:I([_(Q).e("btn"),_(Q).e("close")]),onClick:pe},[h(_(j),null,{default:x((()=>[h(_(z))])),_:1})],2),O(" ARROW "),_(oe)?O("v-if",!0):(k(),T(D,{key:0},[y("span",{class:I([_(Q).e("btn"),_(Q).e("prev"),_(Q).is("disabled",!e.infinite&&_(le))]),onClick:he},[h(_(j),null,{default:x((()=>[h(_(L))])),_:1})],2),y("span",{class:I([_(Q).e("btn"),_(Q).e("next"),_(Q).is("disabled",!e.infinite&&_(re))]),onClick:xe},[h(_(j),null,{default:x((()=>[h(_(N))])),_:1})],2)],64)),O(" ACTIONS "),y("div",{class:I([_(Q).e("btn"),_(Q).e("actions")])},[y("div",{class:I(_(Q).e("actions__inner"))},[h(_(j),{onClick:a[1]||(a[1]=e=>ye("zoomOut"))},{default:x((()=>[h(_(A))])),_:1}),h(_(j),{onClick:a[2]||(a[2]=e=>ye("zoomIn"))},{default:x((()=>[h(_(E))])),_:1}),y("i",{class:I(_(Q).e("actions__divider"))},null,2),h(_(j),{onClick:we},{default:x((()=>[(k(),w(V(_(te).icon)))])),_:1}),y("i",{class:I(_(Q).e("actions__divider"))},null,2),h(_(j),{onClick:a[3]||(a[3]=e=>ye("anticlockwise"))},{default:x((()=>[h(_(B))])),_:1}),h(_(j),{onClick:a[4]||(a[4]=e=>ye("clockwise"))},{default:x((()=>[h(_(M))])),_:1})],2)],2),O(" CANVAS "),y("div",{class:I(_(Q).e("canvas"))},[(k(!0),T(D,null,R(e.urlList,((e,a)=>Y((k(),T("img",{ref_for:!0,ref:e=>J.value[a]=e,key:e,src:e,style:$(_(fe)),class:I(_(Q).e("img")),onLoad:ve,onError:ge,onMousedown:be},null,46,ce)),[[X,a===ae.value]]))),128))],2),F(e.$slots,"default")],6)])),_:3})],8,["disabled"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/image-viewer/src/image-viewer.vue"]]));const fe=n({__name:"ImageViewer",props:{urlList:{type:Array,default:()=>[]},zIndex:q.number.def(200),initialIndex:q.number.def(0),infinite:q.bool.def(!0),hideOnClickModal:q.bool.def(!1),appendToBody:q.bool.def(!1),show:q.bool.def(!1)},setup(e){const a=e,t=m((()=>{const e={...a};return delete e.show,e})),s=c(a.show),n=()=>{s.value=!1};return(e,a)=>s.value?(k(),w(_(de),U({key:0},_(t),{onClose:n}),null,16)):O("v-if",!0)}});let me=null;const pe=n({__name:"ImageViewer",setup(a){const{t:t}=ee(),s=()=>{!function(e){if(!J)return;const{urlList:a,initialIndex:t=0,infinite:s=!0,hideOnClickModal:n=!1,appendToBody:i=!1,zIndex:o=2e3,show:l=!0}=e,u={},r=document.createElement("div");u.urlList=a,u.initialIndex=t,u.infinite=s,u.hideOnClickModal=n,u.appendToBody=i,u.zIndex=o,u.show=l,document.body.appendChild(r),me=h(fe,u),K(me,r)}({urlList:["https://img1.baidu.com/it/u=657828739,1486746195&fm=26&fmt=auto&gp=0.jpg","https://img0.baidu.com/it/u=3114228356,677481409&fm=26&fmt=auto&gp=0.jpg","https://img1.baidu.com/it/u=508846955,3814747122&fm=26&fmt=auto&gp=0.jpg","https://img1.baidu.com/it/u=3536647690,3616605490&fm=26&fmt=auto&gp=0.jpg","https://img1.baidu.com/it/u=4087287201,1148061266&fm=26&fmt=auto&gp=0.jpg","https://img2.baidu.com/it/u=3429163260,2974496379&fm=26&fmt=auto&gp=0.jpg"]})};return(a,n)=>(k(),w(_(e),{title:_(t)("imageViewerDemo.imageViewer"),message:_(t)("imageViewerDemo.imageViewerDes")},{default:x((()=>[h(_(le),{type:"primary",onClick:s},{default:x((()=>[ae(te(_(t)("imageViewerDemo.open")),1)])),_:1})])),_:1},8,["title","message"]))}});export{pe as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
