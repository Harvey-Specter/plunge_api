import{d as e,r as t,aR as n,$ as r,v as o,aT as i,bA as a,o as u,c as s,B as l,C as c,D as f,a as d,b0 as p,at as h,g,a4 as v,ab as y,bS as m,bX as b}from"./index.63ad27ed.js";var w;if("undefined"==typeof global){if("ActiveXObject"in window){"\n Sorry, wangEditor V5+ versions do not support IE browser.",console.error("抱歉，wangEditor V5+ 版本开始，不在支持 IE 浏览器\n Sorry, wangEditor V5+ versions do not support IE browser.")}E(),D()}else global&&(null===(w=global.navigator)||void 0===w?void 0:w.userAgent.match("QQBrowser"))&&(E(),D());function E(){"undefined"==typeof globalThis&&(window.globalThis=window)}function D(){"undefined"==typeof AggregateError&&(window.AggregateError=function(e,t){var n=new Error(t);return n.errors=e,n})}if("object"==typeof global){var C=Object.getOwnPropertyDescriptor(global,"window");global.window&&!C.set||(global.window=global,global.requestAnimationFrame=function(){},global.navigator={userAgent:""},global.location={hostname:"0.0.0.0",port:0,protocol:"http:"},global.btoa=function(){},global.crypto={getRandomValues:function(e){return nodeCrypto.randomFillSync(e)}})}
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function x(e){return"[object Object]"===Object.prototype.toString.call(e)}function S(e){var t,n;return!1!==x(e)&&(void 0===(t=e.constructor)||!1!==x(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf"))}function A(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=pe[e],i=o?"function"==typeof o?o.apply(null,n):o:"unknown error nr: "+e;throw Error("[Immer] "+i)}function O(e){return!!e&&!!e[de]}function k(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===he}(e)||Array.isArray(e)||!!e[fe]||!!e.constructor[fe]||P(e)||j(e))}function B(e,t,n){void 0===n&&(n=!1),0===F(e)?(n?Object.keys:ge)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function F(e){var t=e[de];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:P(e)?2:j(e)?3:0}function _(e,t){return 2===F(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function T(e,t,n){var r=F(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function P(e){return ue&&e instanceof Map}function j(e){return se&&e instanceof Set}function N(e){return e.o||e.t}function I(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=ve(e);delete t[de];for(var n=ge(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function R(e,t){return void 0===t&&(t=!1),M(e)||O(e)||!k(e)||(F(e)>1&&(e.set=e.add=e.clear=e.delete=L),Object.freeze(e),t&&B(e,(function(e,t){return R(t,!0)}),!0)),e}function L(){A(2)}function M(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function z(e){var t=ye[e];return t||A(18,e),t}function $(){return ie||A(0),ie}function H(e,t){t&&(z("Patches"),e.u=[],e.s=[],e.v=t)}function V(e){U(e),e.p.forEach(q),e.p=null}function U(e){e===ie&&(ie=e.l)}function W(e){return ie={p:[],l:ie,h:e,m:!0,_:0}}function q(e){var t=e[de];0===t.i||1===t.i?t.j():t.O=!0}function G(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||z("ES5").S(t,e,r),r?(n[de].P&&(V(t),A(4)),k(e)&&(e=K(t,e),t.l||X(t,e)),t.u&&z("Patches").M(n[de],e,t.u,t.s)):e=K(t,n,[]),V(t),t.u&&t.v(t.u,t.s),e!==ce?e:void 0}function K(e,t,n){if(M(t))return t;var r=t[de];if(!r)return B(t,(function(o,i){return Y(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return X(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=I(r.k):r.o;B(3===r.i?new Set(o):o,(function(t,i){return Y(e,r,o,t,i,n)})),X(e,o,!1),n&&e.u&&z("Patches").R(r,n,e.u,e.s)}return r.o}function Y(e,t,n,r,o,i){if(o===n&&A(5),O(o)){var a=K(e,o,i&&t&&3!==t.i&&!_(t.D,r)?i.concat(r):void 0);if(T(n,r,a),!O(a))return;e.m=!1}if(k(o)&&!M(o)){if(!e.h.F&&e._<1)return;K(e,o),t&&t.A.l||X(e,o)}}function X(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&R(t,n)}function Z(e,t){var n=e[de];return(n?N(n):e)[t]}function J(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Q(e){e.P||(e.P=!0,e.l&&Q(e.l))}function ee(e){e.o||(e.o=I(e.t))}function te(e,t,n){var r=P(t)?z("MapSet").N(t,n):j(t)?z("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:$(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=me;n&&(o=[r],i=be);var a=Proxy.revocable(o,i),u=a.revoke,s=a.proxy;return r.k=s,r.j=u,s}(t,n):z("ES5").J(t,n);return(n?n.A:$()).p.push(r),r}function ne(e){return O(e)||A(22,e),function e(t){if(!k(t))return t;var n,r=t[de],o=F(t);if(r){if(!r.P&&(r.i<4||!z("ES5").K(r)))return r.t;r.I=!0,n=re(t,o),r.I=!1}else n=re(t,o);return B(n,(function(t,o){r&&function(e,t){return 2===F(e)?e.get(t):e[t]}(r.t,t)===o||T(n,t,e(o))})),3===o?new Set(n):n}(e)}function re(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return I(e)}var oe,ie,ae="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),ue="undefined"!=typeof Map,se="undefined"!=typeof Set,le="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ce=ae?Symbol.for("immer-nothing"):((oe={})["immer-nothing"]=!0,oe),fe=ae?Symbol.for("immer-draftable"):"__$immer_draftable",de=ae?Symbol.for("immer-state"):"__$immer_state",pe={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(e){return"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+e},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(e){return"Cannot apply patch, path doesn't resolve: "+e},16:'Sets cannot have "replace" patches.',17:function(e){return"Unsupported patch operation: "+e},18:function(e){return"The plugin for '"+e+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+e+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(e){return"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+e+"'"},22:function(e){return"'current' expects a draft, got: "+e},23:function(e){return"'original' expects a draft, got: "+e},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},he=""+Object.prototype.constructor,ge="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,ve=Object.getOwnPropertyDescriptors||function(e){var t={};return ge(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},ye={},me={get:function(e,t){if(t===de)return e;var n,r,o,i=N(e);if(!_(i,t))return n=e,(o=J(i,t))?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(n.k):void 0;var a=i[t];return e.I||!k(a)?a:a===Z(e.t,t)?(ee(e),e.o[t]=te(e.A.h,a,e)):a},has:function(e,t){return t in N(e)},ownKeys:function(e){return Reflect.ownKeys(N(e))},set:function(e,t,n){var r=J(N(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=Z(N(e),t),i=null==o?void 0:o[de];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,o)&&(void 0!==n||_(e.t,t)))return!0;ee(e),Q(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==Z(e.t,t)||t in e.t?(e.D[t]=!1,ee(e),Q(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=N(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){A(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){A(12)}},be={};B(me,(function(e,t){be[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),be.deleteProperty=function(e,t){return isNaN(parseInt(t))&&A(13),me.deleteProperty.call(this,e[0],t)},be.set=function(e,t,n){return"length"!==t&&isNaN(parseInt(t))&&A(14),me.set.call(this,e[0],t,n,e[0])};var we=function(){function e(e){var t=this;this.g=le,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),u=1;u<r;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&A(6),void 0!==r&&"function"!=typeof r&&A(7),k(e)){var u=W(t),s=te(t,e,void 0),l=!0;try{a=n(s),l=!1}finally{l?V(u):U(u)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return H(u,r),G(e,u)}),(function(e){throw V(u),e})):(H(u,r),G(a,u))}if(!e||"object"!=typeof e){if((a=n(e))===ce)return;return void 0===a&&(a=e),t.F&&R(a,!0),a}A(21,e)},this.produceWithPatches=function(e,n){return"function"==typeof e?function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))}:[t.produce(e,n,(function(e,t){r=e,o=t})),r,o];var r,o},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){k(e)||A(8),O(e)&&(e=ne(e));var t=W(this),n=te(this,e,void 0);return n[de].C=!0,U(t),n},t.finishDraft=function(e,t){var n=e&&e[de];n&&n.C||A(9),n.I&&A(10);var r=n.A;return H(r,t),G(void 0,r)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!le&&A(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=z("Patches").$;return O(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),Ee=new we,De=Ee.produce;Ee.produceWithPatches.bind(Ee),Ee.setAutoFreeze.bind(Ee),Ee.setUseProxies.bind(Ee),Ee.applyPatches.bind(Ee);var Ce=Ee.createDraft.bind(Ee),xe=Ee.finishDraft.bind(Ee);function Se(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Ae=new WeakMap,Oe=new WeakMap,ke=new WeakMap,Be=new WeakMap,Fe=new WeakMap,_e=new WeakMap;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var je=e=>{switch(e.type){case"insert_text":case"remove_text":case"set_node":var{path:t}=e;return At.levels(t);case"insert_node":var{node:n,path:r}=e;return[...At.levels(r),...$t.isText(n)?[]:Array.from(Dt.nodes(n),(e=>{var[,t]=e;return r.concat(t)}))];case"merge_node":var{path:o}=e;return[...At.ancestors(o),At.previous(o)];case"move_node":var{path:i,newPath:a}=e;if(At.equals(i,a))return[];var u=[],s=[];for(var l of At.ancestors(i)){var c=At.transform(l,e);u.push(c)}for(var f of At.ancestors(a)){var d=At.transform(f,e);s.push(d)}var p=s[s.length-1],h=a[a.length-1],g=p.concat(h);return[...u,...s,g];case"remove_node":var{path:v}=e;return[...At.ancestors(v)];case"split_node":var{path:y}=e;return[...At.levels(y),At.next(y)];default:return[]}};function Ne(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Ie,Re,Le=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=!t,r=t?Ue(e):e,o=Ie.None,i=Ie.None,a=0,u=null;for(var s of r){var l=s.codePointAt(0);if(!l)break;var c=nt(s,l);if([o,i]=n?[i,c]:[c,o],rt(o,Ie.ZWJ)&&rt(i,Ie.ExtPict)&&!ut(n?e.substring(0,a):e.substring(0,e.length-a)))break;if(rt(o,Ie.RI)&&rt(i,Ie.RI)&&!(u=null!==u?!u:!!n||lt(e.substring(0,e.length-a))))break;if(o!==Ie.None&&i!==Ie.None&&it(o,i))break;a+=s.length}return a||1},Me=/\s/,ze=/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/,$e=/['\u2018\u2019]/,He=(e,t,n)=>{if(n){var r=e.length-t;return[e.slice(r,e.length),e.slice(0,r)]}return[e.slice(0,t),e.slice(t)]},Ve=function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(Me.test(t))return!1;if($e.test(t)){var o=Le(n,r),[i,a]=He(n,o,r);if(e(i,a,r))return!0}return!ze.test(t)},Ue=function*(e){for(var t=e.length-1,n=0;n<e.length;n++){var r=e.charAt(t-n);if(qe(r.charCodeAt(0))){var o=e.charAt(t-n-1);if(We(o.charCodeAt(0))){yield o+r,n++;continue}}yield r}},We=e=>e>=55296&&e<=56319,qe=e=>e>=56320&&e<=57343;(Re=Ie||(Ie={}))[Re.None=0]="None",Re[Re.Extend=1]="Extend",Re[Re.ZWJ=2]="ZWJ",Re[Re.RI=4]="RI",Re[Re.Prepend=8]="Prepend",Re[Re.SpacingMark=16]="SpacingMark",Re[Re.L=32]="L",Re[Re.V=64]="V",Re[Re.T=128]="T",Re[Re.LV=256]="LV",Re[Re.LVT=512]="LVT",Re[Re.ExtPict=1024]="ExtPict",Re[Re.Any=2048]="Any";var Ge=/^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/,Ke=/^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/,Ye=/^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/,Xe=/^[\u1100-\u115F\uA960-\uA97C]$/,Ze=/^[\u1160-\u11A7\uD7B0-\uD7C6]$/,Je=/^[\u11A8-\u11FF\uD7CB-\uD7FB]$/,Qe=/^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/,et=/^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/,tt=/^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/,nt=(e,t)=>{var n=Ie.Any;return-1!==e.search(Ge)&&(n|=Ie.Extend),8205===t&&(n|=Ie.ZWJ),t>=127462&&t<=127487&&(n|=Ie.RI),-1!==e.search(Ke)&&(n|=Ie.Prepend),-1!==e.search(Ye)&&(n|=Ie.SpacingMark),-1!==e.search(Xe)&&(n|=Ie.L),-1!==e.search(Ze)&&(n|=Ie.V),-1!==e.search(Je)&&(n|=Ie.T),-1!==e.search(Qe)&&(n|=Ie.LV),-1!==e.search(et)&&(n|=Ie.LVT),-1!==e.search(tt)&&(n|=Ie.ExtPict),n};function rt(e,t){return 0!=(e&t)}var ot=[[Ie.L,Ie.L|Ie.V|Ie.LV|Ie.LVT],[Ie.LV|Ie.V,Ie.V|Ie.T],[Ie.LVT|Ie.T,Ie.T],[Ie.Any,Ie.Extend|Ie.ZWJ],[Ie.Any,Ie.SpacingMark],[Ie.Prepend,Ie.Any],[Ie.ZWJ,Ie.ExtPict],[Ie.RI,Ie.RI]];function it(e,t){return-1===ot.findIndex((n=>rt(e,n[0])&&rt(t,n[1])))}var at=/(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/,ut=e=>-1!==e.search(at),st=/(?:\uD83C[\uDDE6-\uDDFF])+$/g,lt=e=>{var t=e.match(st);return null!==t&&t[0].length/2%2==1},ct=e=>S(e)&&Dt.isNodeList(e.children)&&!yt.isEditor(e),ft={isAncestor:e=>S(e)&&Dt.isNodeList(e.children),isElement:ct,isElementList:e=>Array.isArray(e)&&e.every((e=>ft.isElement(e))),isElementProps:e=>void 0!==e.children,isElementType:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"type";return ct(e)&&e[n]===t},matches(e,t){for(var n in t)if("children"!==n&&e[n]!==t[n])return!1;return!0}},dt=["text"],pt=["text"];function ht(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ht(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ht(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vt=new WeakMap,yt={above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:n=!1,mode:r="lowest",at:o=e.selection,match:i}=t;if(o){var a=yt.path(e,o),u="lowest"===r;for(var[s,l]of yt.levels(e,{at:a,voids:n,match:i,reverse:u}))if(!$t.isText(s)&&!At.equals(a,l))return[s,l]}},addMark(e,t,n){e.addMark(t,n)},after(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={anchor:yt.point(e,t,{edge:"end"}),focus:yt.end(e,[])},{distance:i=1}=r,a=0;for(var u of yt.positions(e,gt(gt({},r),{},{at:o}))){if(a>i)break;0!==a&&(n=u),a++}return n},before(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={anchor:yt.start(e,[]),focus:yt.point(e,t,{edge:"start"})},{distance:i=1}=r,a=0;for(var u of yt.positions(e,gt(gt({},r),{},{at:o,reverse:!0}))){if(a>i)break;0!==a&&(n=u),a++}return n},deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n="character"}=t;e.deleteBackward(n)},deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n="character"}=t;e.deleteForward(n)},deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:n="forward"}=t;e.deleteFragment(n)},edges:(e,t)=>[yt.start(e,t),yt.end(e,t)],end:(e,t)=>yt.point(e,t,{edge:"end"}),first(e,t){var n=yt.path(e,t,{edge:"start"});return yt.node(e,n)},fragment(e,t){var n=yt.range(e,t);return Dt.fragment(e,n)},hasBlocks:(e,t)=>t.children.some((t=>yt.isBlock(e,t))),hasInlines:(e,t)=>t.children.some((t=>$t.isText(t)||yt.isInline(e,t))),hasTexts:(e,t)=>t.children.every((e=>$t.isText(e))),insertBreak(e){e.insertBreak()},insertFragment(e,t){e.insertFragment(t)},insertNode(e,t){e.insertNode(t)},insertText(e,t){e.insertText(t)},isBlock:(e,t)=>ft.isElement(t)&&!e.isInline(t),isEditor(e){if(!S(e))return!1;var t=vt.get(e);if(void 0!==t)return t;var n="function"==typeof e.addMark&&"function"==typeof e.apply&&"function"==typeof e.deleteBackward&&"function"==typeof e.deleteForward&&"function"==typeof e.deleteFragment&&"function"==typeof e.insertBreak&&"function"==typeof e.insertFragment&&"function"==typeof e.insertNode&&"function"==typeof e.insertText&&"function"==typeof e.isInline&&"function"==typeof e.isVoid&&"function"==typeof e.normalizeNode&&"function"==typeof e.onChange&&"function"==typeof e.removeMark&&(null===e.marks||S(e.marks))&&(null===e.selection||jt.isRange(e.selection))&&Dt.isNodeList(e.children)&&St.isOperationList(e.operations);return vt.set(e,n),n},isEnd(e,t,n){var r=yt.end(e,n);return Ft.equals(t,r)},isEdge:(e,t,n)=>yt.isStart(e,t,n)||yt.isEnd(e,t,n),isEmpty(e,t){var{children:n}=t,[r]=n;return 0===n.length||1===n.length&&$t.isText(r)&&""===r.text&&!e.isVoid(t)},isInline:(e,t)=>ft.isElement(t)&&e.isInline(t),isNormalizing(e){var t=ke.get(e);return void 0===t||t},isStart(e,t,n){if(0!==t.offset)return!1;var r=yt.start(e,n);return Ft.equals(t,r)},isVoid:(e,t)=>ft.isElement(t)&&e.isVoid(t),last(e,t){var n=yt.path(e,t,{edge:"end"});return yt.node(e,n)},leaf(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=yt.path(e,t,n);return[Dt.leaf(e,r),r]},*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,reverse:r=!1,voids:o=!1}=t,{match:i}=t;if(null==i&&(i=()=>!0),n){var a=[],u=yt.path(e,n);for(var[s,l]of Dt.levels(e,u))if(i(s,l)&&(a.push([s,l]),!o&&yt.isVoid(e,s)))break;r&&a.reverse(),yield*a}},marks(e){var{marks:t,selection:n}=e;if(!n)return null;if(t)return t;if(jt.isExpanded(n)){var[r]=yt.nodes(e,{match:$t.isText});if(r){var[o]=r;return Ne(o,dt)}return{}}var{anchor:i}=n,{path:a}=i,[u]=yt.leaf(e,a);if(0===i.offset){var s=yt.previous(e,{at:a,match:$t.isText}),l=yt.above(e,{match:t=>yt.isBlock(e,t)});if(s&&l){var[c,f]=s,[,d]=l;At.isAncestor(d,f)&&(u=c)}}return Ne(u,pt)},next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection}=t;if(i){var a=yt.after(e,i,{voids:r});if(a){var[,u]=yt.last(e,[]),s=[a.path,u];if(At.isPath(i)&&0===i.length)throw new Error("Cannot get the next node from the root node!");if(null==o)if(At.isPath(i)){var[l]=yt.parent(e,i);o=e=>l.children.includes(e)}else o=()=>!0;var[c]=yt.nodes(e,{at:s,match:o,mode:n,voids:r});return c}}},node(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=yt.path(e,t,n);return[Dt.get(e,r),r]},*nodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,mode:r="all",universal:o=!1,reverse:i=!1,voids:a=!1}=t,{match:u}=t;if(u||(u=()=>!0),n){var s,l;if(mt.isSpan(n))s=n[0],l=n[1];else{var c=yt.path(e,n,{edge:"start"}),f=yt.path(e,n,{edge:"end"});s=i?f:c,l=i?c:f}var d,p=Dt.nodes(e,{reverse:i,from:s,to:l,pass:t=>{var[n]=t;return!a&&yt.isVoid(e,n)}}),h=[];for(var[g,v]of p){var y=d&&0===At.compare(v,d[1]);if("highest"!==r||!y)if(u(g,v))if("lowest"===r&&y)d=[g,v];else{var m="lowest"===r?d:[g,v];m&&(o?h.push(m):yield m),d=[g,v]}else if(o&&!y&&$t.isText(g))return}"lowest"===r&&d&&(o?h.push(d):yield d),o&&(yield*h)}},normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:n=!1}=t,r=e=>Ae.get(e)||[];if(yt.isNormalizing(e)){if(n){var o=Array.from(Dt.nodes(e),(e=>{var[,t]=e;return t}));Ae.set(e,o)}0!==r(e).length&&yt.withoutNormalizing(e,(()=>{for(var t of r(e))if(Dt.has(e,t)){var n=yt.node(e,t),[o,i]=n;ft.isElement(o)&&0===o.children.length&&e.normalizeNode(n)}for(var a=42*r(e).length,u=0;0!==r(e).length;){if(u>a)throw new Error("\n            Could not completely normalize the editor after ".concat(a," iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));var s=r(e).pop();if(Dt.has(e,s)){var l=yt.node(e,s);e.normalizeNode(l)}u++}}))}},parent(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=yt.path(e,t,n),o=At.parent(r);return yt.node(e,o)},path(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:r,edge:o}=n;if(At.isPath(t))if("start"===o){var[,i]=Dt.first(e,t);t=i}else if("end"===o){var[,a]=Dt.last(e,t);t=a}return jt.isRange(t)&&(t="start"===o?jt.start(t):"end"===o?jt.end(t):At.common(t.anchor.path,t.focus.path)),Ft.isPoint(t)&&(t=t.path),null!=r&&(t=t.slice(0,r)),t},hasPath:(e,t)=>Dt.has(e,t),pathRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return yt.pathRefs(e).delete(o),o.current=null,t}};return yt.pathRefs(e).add(o),o},pathRefs(e){var t=Be.get(e);return t||(t=new Set,Be.set(e,t)),t},point(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:r="start"}=n;if(At.isPath(t)){var o;if("end"===r){var[,i]=Dt.last(e,t);o=i}else{var[,a]=Dt.first(e,t);o=a}var u=Dt.get(e,o);if(!$t.isText(u))throw new Error("Cannot get the ".concat(r," point in the node at path [").concat(t,"] because it has no ").concat(r," text node."));return{path:o,offset:"end"===r?u.text.length:0}}if(jt.isRange(t)){var[s,l]=jt.edges(t);return"start"===r?s:l}return t},pointRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return yt.pointRefs(e).delete(o),o.current=null,t}};return yt.pointRefs(e).add(o),o},pointRefs(e){var t=Fe.get(e);return t||(t=new Set,Fe.set(e,t)),t},*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,unit:r="offset",reverse:o=!1,voids:i=!1}=t;if(n){var a=yt.range(e,n),[u,s]=jt.edges(a),l=o?s:u,c=!1,f="",d=0,p=0,h=0;for(var[g,v]of yt.nodes(e,{at:n,reverse:o,voids:i})){if(ft.isElement(g)){if(!i&&e.isVoid(g)){yield yt.start(e,v);continue}if(e.isInline(g))continue;if(yt.hasInlines(e,g)){var y=At.isAncestor(v,s.path)?s:yt.end(e,v),m=At.isAncestor(v,u.path)?u:yt.start(e,v);f=yt.string(e,{anchor:m,focus:y},{voids:i}),c=!0}}if($t.isText(g)){var b=At.equals(v,l.path);for(b?(p=o?l.offset:g.text.length-l.offset,h=l.offset):(p=g.text.length,h=o?p:0),(b||c||"offset"===r)&&(yield{path:v,offset:h},c=!1);;){if(0===d){if(""===f)break;d=w(f,r,o),f=He(f,d,o)[1]}if(h=o?h-d:h+d,(p-=d)<0){d=-p;break}d=0,yield{path:v,offset:h}}}}}function w(e,t,n){return"character"===t?Le(e,n):"word"===t?function(e){for(var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=0,r=!1;e.length>0;){var o=Le(e,t),[i,a]=He(e,o,t);if(Ve(i,a,t))r=!0,n+=o;else{if(r)break;n+=o}e=a}return n}(e,n):"line"===t||"block"===t?e.length:1}},previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection}=t;if(i){var a=yt.before(e,i,{voids:r});if(a){var[,u]=yt.first(e,[]),s=[a.path,u];if(At.isPath(i)&&0===i.length)throw new Error("Cannot get the previous node from the root node!");if(null==o)if(At.isPath(i)){var[l]=yt.parent(e,i);o=e=>l.children.includes(e)}else o=()=>!0;var[c]=yt.nodes(e,{reverse:!0,at:s,match:o,mode:n,voids:r});return c}}},range:(e,t,n)=>jt.isRange(t)&&!n?t:{anchor:yt.start(e,t),focus:yt.end(e,n||t)},rangeRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r="forward"}=n,o={current:t,affinity:r,unref(){var{current:t}=o;return yt.rangeRefs(e).delete(o),o.current=null,t}};return yt.rangeRefs(e).add(o),o},rangeRefs(e){var t=_e.get(e);return t||(t=new Set,_e.set(e,t)),t},removeMark(e,t){e.removeMark(t)},setNormalizing(e,t){ke.set(e,t)},start:(e,t)=>yt.point(e,t,{edge:"start"}),string(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,o=yt.range(e,t),[i,a]=jt.edges(o),u="";for(var[s,l]of yt.nodes(e,{at:o,match:$t.isText,voids:r})){var c=s.text;At.equals(l,a.path)&&(c=c.slice(0,a.offset)),At.equals(l,i.path)&&(c=c.slice(i.offset)),u+=c}return u},unhangRange(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,[o,i]=jt.edges(t);if(0!==o.offset||0!==i.offset||jt.isCollapsed(t))return t;var a=yt.above(e,{at:i,match:t=>yt.isBlock(e,t)}),u=a?a[1]:[],s={anchor:yt.start(e,[]),focus:i},l=!0;for(var[c,f]of yt.nodes(e,{at:s,match:$t.isText,reverse:!0,voids:r}))if(l)l=!1;else if(""!==c.text||At.isBefore(f,u)){i={path:f,offset:c.text.length};break}return{anchor:o,focus:i}},void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return yt.above(e,gt(gt({},t),{},{match:t=>yt.isVoid(e,t)}))},withoutNormalizing(e,t){var n=yt.isNormalizing(e);yt.setNormalizing(e,!1);try{t()}finally{yt.setNormalizing(e,n)}yt.normalize(e)}},mt={isSpan:e=>Array.isArray(e)&&2===e.length&&e.every(At.isPath)},bt=["children"],wt=["text"],Et=new WeakMap,Dt={ancestor(e,t){var n=Dt.get(e,t);if($t.isText(n))throw new Error("Cannot get the ancestor node at path [".concat(t,"] because it refers to a text node instead: ").concat(n));return n},*ancestors(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of At.ancestors(t,n)){var o=[Dt.ancestor(e,r),r];yield o}},child(e,t){if($t.isText(e))throw new Error("Cannot get the child of a text node: ".concat(JSON.stringify(e)));var n=e.children[t];if(null==n)throw new Error("Cannot get child at index `".concat(t,"` in node: ").concat(JSON.stringify(e)));return n},*children(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:r=!1}=n,o=Dt.ancestor(e,t),{children:i}=o,a=r?i.length-1:0;r?a>=0:a<i.length;){var u=Dt.child(o,a),s=t.concat(a);yield[u,s],a=r?a-1:a+1}},common(e,t,n){var r=At.common(t,n);return[Dt.get(e,r),r]},descendant(e,t){var n=Dt.get(e,t);if(yt.isEditor(n))throw new Error("Cannot get the descendant node at path [".concat(t,"] because it refers to the root editor node instead: ").concat(n));return n},*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Dt.nodes(e,t))0!==r.length&&(yield[n,r])},*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Dt.nodes(e,t))ft.isElement(n)&&(yield[n,r])},extractProps:e=>ft.isAncestor(e)?Ne(e,bt):Ne(e,wt),first(e,t){for(var n=t.slice(),r=Dt.get(e,n);r&&!$t.isText(r)&&0!==r.children.length;)r=r.children[0],n.push(0);return[r,n]},fragment(e,t){if($t.isText(e))throw new Error("Cannot get a fragment starting from a root text node: ".concat(JSON.stringify(e)));return De({children:e.children},(e=>{var[n,r]=jt.edges(t),o=Dt.nodes(e,{reverse:!0,pass:e=>{var[,n]=e;return!jt.includes(t,n)}});for(var[,i]of o){if(!jt.includes(t,i)){var a=Dt.parent(e,i),u=i[i.length-1];a.children.splice(u,1)}if(At.equals(i,r.path)){var s=Dt.leaf(e,i);s.text=s.text.slice(0,r.offset)}if(At.equals(i,n.path)){var l=Dt.leaf(e,i);l.text=l.text.slice(n.offset)}}yt.isEditor(e)&&(e.selection=null)})).children},get(e,t){for(var n=e,r=0;r<t.length;r++){var o=t[r];if($t.isText(n)||!n.children[o])throw new Error("Cannot find a descendant at path [".concat(t,"] in node: ").concat(JSON.stringify(e)));n=n.children[o]}return n},has(e,t){for(var n=e,r=0;r<t.length;r++){var o=t[r];if($t.isText(n)||!n.children[o])return!1;n=n.children[o]}return!0},isNode:e=>$t.isText(e)||ft.isElement(e)||yt.isEditor(e),isNodeList(e){if(!Array.isArray(e))return!1;var t=Et.get(e);if(void 0!==t)return t;var n=e.every((e=>Dt.isNode(e)));return Et.set(e,n),n},last(e,t){for(var n=t.slice(),r=Dt.get(e,n);r&&!$t.isText(r)&&0!==r.children.length;){var o=r.children.length-1;r=r.children[o],n.push(o)}return[r,n]},leaf(e,t){var n=Dt.get(e,t);if(!$t.isText(n))throw new Error("Cannot get the leaf node at path [".concat(t,"] because it refers to a non-leaf node: ").concat(n));return n},*levels(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of At.levels(t,n)){var o=Dt.get(e,r);yield[o,r]}},matches:(e,t)=>ft.isElement(e)&&ft.isElementProps(t)&&ft.matches(e,t)||$t.isText(e)&&$t.isTextProps(t)&&$t.matches(e,t),*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:n,reverse:r=!1}=t,{from:o=[],to:i}=t,a=new Set,u=[],s=e;!i||!(r?At.isBefore(u,i):At.isAfter(u,i));)if(a.has(s)||(yield[s,u]),a.has(s)||$t.isText(s)||0===s.children.length||null!=n&&!1!==n([s,u])){if(0===u.length)break;if(!r){var l=At.next(u);if(Dt.has(e,l)){u=l,s=Dt.get(e,u);continue}}if(r&&0!==u[u.length-1])u=At.previous(u),s=Dt.get(e,u);else u=At.parent(u),s=Dt.get(e,u),a.add(s)}else{a.add(s);var c=r?s.children.length-1:0;At.isAncestor(u,o)&&(c=o[u.length]),u=u.concat(c),s=Dt.get(e,u)}},parent(e,t){var n=At.parent(t),r=Dt.get(e,n);if($t.isText(r))throw new Error("Cannot get the parent of path [".concat(t,"] because it does not exist in the root."));return r},string:e=>$t.isText(e)?e.text:e.children.map(Dt.string).join(""),*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of Dt.nodes(e,t))$t.isText(n)&&(yield[n,r])}};function Ct(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ct(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ct(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var St={isNodeOperation:e=>St.isOperation(e)&&e.type.endsWith("_node"),isOperation(e){if(!S(e))return!1;switch(e.type){case"insert_node":case"remove_node":return At.isPath(e.path)&&Dt.isNode(e.node);case"insert_text":case"remove_text":return"number"==typeof e.offset&&"string"==typeof e.text&&At.isPath(e.path);case"merge_node":return"number"==typeof e.position&&At.isPath(e.path)&&S(e.properties);case"move_node":return At.isPath(e.path)&&At.isPath(e.newPath);case"set_node":return At.isPath(e.path)&&S(e.properties)&&S(e.newProperties);case"set_selection":return null===e.properties&&jt.isRange(e.newProperties)||null===e.newProperties&&jt.isRange(e.properties)||S(e.properties)&&S(e.newProperties);case"split_node":return At.isPath(e.path)&&"number"==typeof e.position&&S(e.properties);default:return!1}},isOperationList:e=>Array.isArray(e)&&e.every((e=>St.isOperation(e))),isSelectionOperation:e=>St.isOperation(e)&&e.type.endsWith("_selection"),isTextOperation:e=>St.isOperation(e)&&e.type.endsWith("_text"),inverse(e){switch(e.type){case"insert_node":return xt(xt({},e),{},{type:"remove_node"});case"insert_text":return xt(xt({},e),{},{type:"remove_text"});case"merge_node":return xt(xt({},e),{},{type:"split_node",path:At.previous(e.path)});case"move_node":var{newPath:t,path:n}=e;if(At.equals(t,n))return e;if(At.isSibling(n,t))return xt(xt({},e),{},{path:t,newPath:n});var r=At.transform(n,e),o=At.transform(At.next(n),e);return xt(xt({},e),{},{path:r,newPath:o});case"remove_node":return xt(xt({},e),{},{type:"insert_node"});case"remove_text":return xt(xt({},e),{},{type:"insert_text"});case"set_node":var{properties:i,newProperties:a}=e;return xt(xt({},e),{},{properties:a,newProperties:i});case"set_selection":var{properties:u,newProperties:s}=e;return xt(xt({},e),{},null==u?{properties:s,newProperties:null}:null==s?{properties:null,newProperties:u}:{properties:s,newProperties:u});case"split_node":return xt(xt({},e),{},{type:"merge_node",path:At.next(e.path)})}}},At={ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=At.levels(e,t);return r=n?r.slice(1):r.slice(0,-1)},common(e,t){for(var n=[],r=0;r<e.length&&r<t.length;r++){var o=e[r];if(o!==t[r])break;n.push(o)}return n},compare(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){if(e[r]<t[r])return-1;if(e[r]>t[r])return 1}return 0},endsAfter(e,t){var n=e.length-1,r=e.slice(0,n),o=t.slice(0,n),i=e[n],a=t[n];return At.equals(r,o)&&i>a},endsAt(e,t){var n=e.length,r=e.slice(0,n),o=t.slice(0,n);return At.equals(r,o)},endsBefore(e,t){var n=e.length-1,r=e.slice(0,n),o=t.slice(0,n),i=e[n],a=t[n];return At.equals(r,o)&&i<a},equals:(e,t)=>e.length===t.length&&e.every(((e,n)=>e===t[n])),hasPrevious:e=>e[e.length-1]>0,isAfter:(e,t)=>1===At.compare(e,t),isAncestor:(e,t)=>e.length<t.length&&0===At.compare(e,t),isBefore:(e,t)=>-1===At.compare(e,t),isChild:(e,t)=>e.length===t.length+1&&0===At.compare(e,t),isCommon:(e,t)=>e.length<=t.length&&0===At.compare(e,t),isDescendant:(e,t)=>e.length>t.length&&0===At.compare(e,t),isParent:(e,t)=>e.length+1===t.length&&0===At.compare(e,t),isPath:e=>Array.isArray(e)&&(0===e.length||"number"==typeof e[0]),isSibling(e,t){if(e.length!==t.length)return!1;var n=e.slice(0,-1),r=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&At.equals(n,r)},levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=[],o=0;o<=e.length;o++)r.push(e.slice(0,o));return n&&r.reverse(),r},next(e){if(0===e.length)throw new Error("Cannot get the next path of a root path [".concat(e,"], because it has no next index."));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)},parent(e){if(0===e.length)throw new Error("Cannot get the parent path of the root path [".concat(e,"]."));return e.slice(0,-1)},previous(e){if(0===e.length)throw new Error("Cannot get the previous path of a root path [".concat(e,"], because it has no previous index."));var t=e[e.length-1];if(t<=0)throw new Error("Cannot get the previous path of a first child path [".concat(e,"] because it would result in a negative index."));return e.slice(0,-1).concat(t-1)},relative(e,t){if(!At.isAncestor(t,e)&&!At.equals(e,t))throw new Error("Cannot get the relative path of [".concat(e,"] inside ancestor [").concat(t,"], because it is not above or equal to the path."));return e.slice(t.length)},transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return De(e,(r=>{var{affinity:o="forward"}=n;if(e&&0!==(null==e?void 0:e.length)){if(null===r)return null;switch(t.type){case"insert_node":var{path:i}=t;(At.equals(i,r)||At.endsBefore(i,r)||At.isAncestor(i,r))&&(r[i.length-1]+=1);break;case"remove_node":var{path:a}=t;if(At.equals(a,r)||At.isAncestor(a,r))return null;At.endsBefore(a,r)&&(r[a.length-1]-=1);break;case"merge_node":var{path:u,position:s}=t;At.equals(u,r)||At.endsBefore(u,r)?r[u.length-1]-=1:At.isAncestor(u,r)&&(r[u.length-1]-=1,r[u.length]+=s);break;case"split_node":var{path:l,position:c}=t;if(At.equals(l,r)){if("forward"===o)r[r.length-1]+=1;else if("backward"!==o)return null}else At.endsBefore(l,r)?r[l.length-1]+=1:At.isAncestor(l,r)&&e[l.length]>=c&&(r[l.length-1]+=1,r[l.length]-=c);break;case"move_node":var{path:f,newPath:d}=t;if(At.equals(f,d))return;if(At.isAncestor(f,r)||At.equals(f,r)){var p=d.slice();return At.endsBefore(f,d)&&f.length<d.length&&(p[f.length-1]-=1),p.concat(r.slice(f.length))}At.isSibling(f,d)&&(At.isAncestor(d,r)||At.equals(d,r))?At.endsBefore(f,r)?r[f.length-1]-=1:r[f.length-1]+=1:At.endsBefore(d,r)||At.equals(d,r)||At.isAncestor(d,r)?(At.endsBefore(f,r)&&(r[f.length-1]-=1),r[d.length-1]+=1):At.endsBefore(f,r)&&(At.equals(d,r)&&(r[d.length-1]+=1),r[f.length-1]-=1)}}}))}},Ot={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=At.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}};function kt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kt(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ft={compare(e,t){var n=At.compare(e.path,t.path);return 0===n?e.offset<t.offset?-1:e.offset>t.offset?1:0:n},isAfter:(e,t)=>1===Ft.compare(e,t),isBefore:(e,t)=>-1===Ft.compare(e,t),equals:(e,t)=>e.offset===t.offset&&At.equals(e.path,t.path),isPoint:e=>S(e)&&"number"==typeof e.offset&&At.isPath(e.path),transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return De(e,(e=>{if(null===e)return null;var{affinity:r="forward"}=n,{path:o,offset:i}=e;switch(t.type){case"insert_node":case"move_node":e.path=At.transform(o,t,n);break;case"insert_text":At.equals(t.path,o)&&t.offset<=i&&(e.offset+=t.text.length);break;case"merge_node":At.equals(t.path,o)&&(e.offset+=t.position),e.path=At.transform(o,t,n);break;case"remove_text":At.equals(t.path,o)&&t.offset<=i&&(e.offset-=Math.min(i-t.offset,t.text.length));break;case"remove_node":if(At.equals(t.path,o)||At.isAncestor(t.path,o))return null;e.path=At.transform(o,t,n);break;case"split_node":if(At.equals(t.path,o)){if(t.position===i&&null==r)return null;(t.position<i||t.position===i&&"forward"===r)&&(e.offset-=t.position,e.path=At.transform(o,t,Bt(Bt({},n),{},{affinity:"forward"})))}else e.path=At.transform(o,t,n)}}))}},_t={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=Ft.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}},Tt=["anchor","focus"];function Pt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var jt={edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,{anchor:r,focus:o}=e;return jt.isBackward(e)===n?[r,o]:[o,r]},end(e){var[,t]=jt.edges(e);return t},equals:(e,t)=>Ft.equals(e.anchor,t.anchor)&&Ft.equals(e.focus,t.focus),includes(e,t){if(jt.isRange(t)){if(jt.includes(e,t.anchor)||jt.includes(e,t.focus))return!0;var[n,r]=jt.edges(e),[o,i]=jt.edges(t);return Ft.isBefore(n,o)&&Ft.isAfter(r,i)}var[a,u]=jt.edges(e),s=!1,l=!1;return Ft.isPoint(t)?(s=Ft.compare(t,a)>=0,l=Ft.compare(t,u)<=0):(s=At.compare(t,a.path)>=0,l=At.compare(t,u.path)<=0),s&&l},intersection(e,t){var n=Ne(e,Tt),[r,o]=jt.edges(e),[i,a]=jt.edges(t),u=Ft.isBefore(r,i)?i:r,s=Ft.isBefore(o,a)?o:a;return Ft.isBefore(s,u)?null:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pt(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({anchor:u,focus:s},n)},isBackward(e){var{anchor:t,focus:n}=e;return Ft.isAfter(t,n)},isCollapsed(e){var{anchor:t,focus:n}=e;return Ft.equals(t,n)},isExpanded:e=>!jt.isCollapsed(e),isForward:e=>!jt.isBackward(e),isRange:e=>S(e)&&Ft.isPoint(e.anchor)&&Ft.isPoint(e.focus),*points(e){yield[e.anchor,"anchor"],yield[e.focus,"focus"]},start(e){var[t]=jt.edges(e);return t},transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return De(e,(e=>{if(null===e)return null;var r,o,{affinity:i="inward"}=n;if("inward"===i){var a=jt.isCollapsed(e);jt.isForward(e)?(r="forward",o=a?r:"backward"):(r="backward",o=a?r:"forward")}else"outward"===i?jt.isForward(e)?(r="backward",o="forward"):(r="forward",o="backward"):(r=i,o=i);var u=Ft.transform(e.anchor,t,{affinity:r}),s=Ft.transform(e.focus,t,{affinity:o});if(!u||!s)return null;e.anchor=u,e.focus=s}))}},Nt={transform(e,t){var{current:n,affinity:r}=e;if(null!=n){var o=jt.transform(n,t,{affinity:r});e.current=o,null==o&&e.unref()}}},It=(e,t)=>{for(var n in e){var r=e[n],o=t[n];if(S(r)&&S(o)){if(!It(r,o))return!1}else if(Array.isArray(r)&&Array.isArray(o)){if(r.length!==o.length)return!1;for(var i=0;i<r.length;i++)if(r[i]!==o[i])return!1}else if(r!==o)return!1}for(var a in t)if(void 0===e[a]&&void 0!==t[a])return!1;return!0},Rt=["text"],Lt=["anchor","focus"];function Mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mt(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var $t={equals(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:r=!1}=n;function o(e){return Ne(e,Rt)}return It(r?o(e):e,r?o(t):t)},isText:e=>S(e)&&"string"==typeof e.text,isTextList:e=>Array.isArray(e)&&e.every((e=>$t.isText(e))),isTextProps:e=>void 0!==e.text,matches(e,t){for(var n in t)if("text"!==n&&(!e.hasOwnProperty(n)||e[n]!==t[n]))return!1;return!0},decorations(e,t){var n=[zt({},e)];for(var r of t){var o=Ne(r,Lt),[i,a]=jt.edges(r),u=[],s=0;for(var l of n){var{length:c}=l.text,f=s;if(s+=c,i.offset<=f&&a.offset>=s)Object.assign(l,o),u.push(l);else if(i.offset!==a.offset&&(i.offset===s||a.offset===f)||i.offset>s||a.offset<f||a.offset===f&&0!==f)u.push(l);else{var d=l,p=void 0,h=void 0;if(a.offset<s){var g=a.offset-f;h=zt(zt({},d),{},{text:d.text.slice(g)}),d=zt(zt({},d),{},{text:d.text.slice(0,g)})}if(i.offset>f){var v=i.offset-f;p=zt(zt({},d),{},{text:d.text.slice(0,v)}),d=zt(zt({},d),{},{text:d.text.slice(v)})}Object.assign(d,o),p&&u.push(p),u.push(d),h&&u.push(h)}}n=u}return n}};function Ht(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ht(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ht(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ut={transform(e,t){e.children=Ce(e.children);var n=e.selection&&Ce(e.selection);try{n=((e,t,n)=>{switch(n.type){case"insert_node":var{path:r,node:o}=n,i=Dt.parent(e,r),a=r[r.length-1];if(a>i.children.length)throw new Error('Cannot apply an "insert_node" operation at path ['.concat(r,"] because the destination is past the end of the node."));if(i.children.splice(a,0,o),t)for(var[u,s]of jt.points(t))t[s]=Ft.transform(u,n);break;case"insert_text":var{path:l,offset:c,text:f}=n;if(0===f.length)break;var d=Dt.leaf(e,l),p=d.text.slice(0,c),h=d.text.slice(c);if(d.text=p+f+h,t)for(var[g,v]of jt.points(t))t[v]=Ft.transform(g,n);break;case"merge_node":var{path:y}=n,m=Dt.get(e,y),b=At.previous(y),w=Dt.get(e,b),E=Dt.parent(e,y),D=y[y.length-1];if($t.isText(m)&&$t.isText(w))w.text+=m.text;else{if($t.isText(m)||$t.isText(w))throw new Error('Cannot apply a "merge_node" operation at path ['.concat(y,"] to nodes of different interfaces: ").concat(m," ").concat(w));w.children.push(...m.children)}if(E.children.splice(D,1),t)for(var[C,x]of jt.points(t))t[x]=Ft.transform(C,n);break;case"move_node":var{path:S,newPath:A}=n;if(At.isAncestor(S,A))throw new Error("Cannot move a path [".concat(S,"] to new path [").concat(A,"] because the destination is inside itself."));var O=Dt.get(e,S),k=Dt.parent(e,S),B=S[S.length-1];k.children.splice(B,1);var F=At.transform(S,n),_=Dt.get(e,At.parent(F)),T=F[F.length-1];if(_.children.splice(T,0,O),t)for(var[P,j]of jt.points(t))t[j]=Ft.transform(P,n);break;case"remove_node":var{path:N}=n,I=N[N.length-1];if(Dt.parent(e,N).children.splice(I,1),t)for(var[R,L]of jt.points(t)){var M=Ft.transform(R,n);if(null!=t&&null!=M)t[L]=M;else{var z=void 0,$=void 0;for(var[H,V]of Dt.texts(e)){if(-1!==At.compare(V,N)){$=[H,V];break}z=[H,V]}var U=!1;z&&$&&(U=At.equals($[1],N)?!At.hasPrevious($[1]):At.common(z[1],N).length<At.common($[1],N).length),z&&!U?(R.path=z[1],R.offset=z[0].text.length):$?(R.path=$[1],R.offset=0):t=null}}break;case"remove_text":var{path:W,offset:q,text:G}=n;if(0===G.length)break;var K=Dt.leaf(e,W),Y=K.text.slice(0,q),X=K.text.slice(q+G.length);if(K.text=Y+X,t)for(var[Z,J]of jt.points(t))t[J]=Ft.transform(Z,n);break;case"set_node":var{path:Q,properties:ee,newProperties:te}=n;if(0===Q.length)throw new Error("Cannot set properties on the root node!");var ne=Dt.get(e,Q);for(var re in te){if("children"===re||"text"===re)throw new Error('Cannot set the "'.concat(re,'" property of nodes!'));var oe=te[re];null==oe?delete ne[re]:ne[re]=oe}for(var ie in ee)te.hasOwnProperty(ie)||delete ne[ie];break;case"set_selection":var{newProperties:ae}=n;if(null==ae)t=ae;else{if(null==t){if(!jt.isRange(ae))throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(JSON.stringify(ae)," when there is no current selection."));t=Vt({},ae)}for(var ue in ae){var se=ae[ue];if(null==se){if("anchor"===ue||"focus"===ue)throw new Error('Cannot remove the "'.concat(ue,'" selection property'));delete t[ue]}else t[ue]=se}}break;case"split_node":var{path:le,position:ce,properties:fe}=n;if(0===le.length)throw new Error('Cannot apply a "split_node" operation at path ['.concat(le,"] because the root node cannot be split."));var de,pe=Dt.get(e,le),he=Dt.parent(e,le),ge=le[le.length-1];if($t.isText(pe)){var ve=pe.text.slice(0,ce),ye=pe.text.slice(ce);pe.text=ve,de=Vt(Vt({},fe),{},{text:ye})}else{var me=pe.children.slice(0,ce),be=pe.children.slice(ce);pe.children=me,de=Vt(Vt({},fe),{},{children:be})}if(he.children.splice(ge+1,0,de),t)for(var[we,Ee]of jt.points(t))t[Ee]=Ft.transform(we,n)}return t})(e,n,t)}finally{e.children=xe(e.children),e.selection=n?O(n)?xe(n):n:null}}},Wt=["text"],qt=["children"];function Gt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Gt(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Gt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yt={insertNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};yt.withoutNormalizing(e,(()=>{var{hanging:r=!1,voids:o=!1,mode:i="lowest"}=n,{at:a,match:u,select:s}=n;if(Dt.isNode(t)&&(t=[t]),0!==t.length){var[l]=t;if(a||(a=e.selection?e.selection:e.children.length>0?yt.end(e,[]):[0],s=!0),null==s&&(s=!1),jt.isRange(a))if(r||(a=yt.unhangRange(e,a)),jt.isCollapsed(a))a=a.anchor;else{var[,c]=jt.edges(a),f=yt.pointRef(e,c);an.delete(e,{at:a}),a=f.unref()}if(Ft.isPoint(a)){null==u&&(u=$t.isText(l)?e=>$t.isText(e):e.isInline(l)?t=>$t.isText(t)||yt.isInline(e,t):t=>yt.isBlock(e,t));var[d]=yt.nodes(e,{at:a.path,match:u,mode:i,voids:o});if(!d)return;var[,p]=d,h=yt.pathRef(e,p),g=yt.isEnd(e,a,p);an.splitNodes(e,{at:a,match:u,mode:i,voids:o});var v=h.unref();a=g?At.next(v):v}var y=At.parent(a),m=a[a.length-1];if(o||!yt.void(e,{at:y})){for(var b of t){var w=y.concat(m);m++,e.apply({type:"insert_node",path:w,node:b}),a=At.next(a)}if(a=At.previous(a),s){var E=yt.end(e,a);E&&an.select(e,E)}}}}))},liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{at:n=e.selection,mode:r="lowest",voids:o=!1}=t,{match:i}=t;if(null==i&&(i=At.isPath(n)?Jt(e,n):t=>yt.isBlock(e,t)),n){var a=yt.nodes(e,{at:n,match:i,mode:r,voids:o}),u=Array.from(a,(t=>{var[,n]=t;return yt.pathRef(e,n)}));for(var s of u){var l=s.unref();if(l.length<2)throw new Error("Cannot lift node at a path [".concat(l,"] because it has a depth of less than `2`."));var c=yt.node(e,At.parent(l)),[f,d]=c,p=l[l.length-1],{length:h}=f.children;if(1===h){var g=At.next(d);an.moveNodes(e,{at:l,to:g,voids:o}),an.removeNodes(e,{at:d,voids:o})}else if(0===p)an.moveNodes(e,{at:l,to:d,voids:o});else if(p===h-1){var v=At.next(d);an.moveNodes(e,{at:l,to:v,voids:o})}else{var y=At.next(l),m=At.next(d);an.splitNodes(e,{at:y,voids:o}),an.moveNodes(e,{at:l,to:m,voids:o})}}}}))},mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{match:n,at:r=e.selection}=t,{hanging:o=!1,voids:i=!1,mode:a="lowest"}=t;if(r){if(null==n)if(At.isPath(r)){var[u]=yt.parent(e,r);n=e=>u.children.includes(e)}else n=t=>yt.isBlock(e,t);if(!o&&jt.isRange(r)&&(r=yt.unhangRange(e,r)),jt.isRange(r))if(jt.isCollapsed(r))r=r.anchor;else{var[,s]=jt.edges(r),l=yt.pointRef(e,s);an.delete(e,{at:r}),r=l.unref(),null==t.at&&an.select(e,r)}var[c]=yt.nodes(e,{at:r,match:n,voids:i,mode:a}),f=yt.previous(e,{at:r,match:n,voids:i,mode:a});if(c&&f){var[d,p]=c,[h,g]=f;if(0!==p.length&&0!==g.length){var v,y,m=At.next(g),b=At.common(p,g),w=At.isSibling(p,g),E=Array.from(yt.levels(e,{at:p}),(e=>{var[t]=e;return t})).slice(b.length).slice(0,-1),D=yt.above(e,{at:p,mode:"highest",match:t=>E.includes(t)&&Xt(e,t)}),C=D&&yt.pathRef(e,D[1]);if($t.isText(d)&&$t.isText(h)){var x=Ne(d,Wt);y=h.text.length,v=x}else{if(!ft.isElement(d)||!ft.isElement(h))throw new Error("Cannot merge the node at path [".concat(p,"] with the previous sibling because it is not the same kind: ").concat(JSON.stringify(d)," ").concat(JSON.stringify(h)));x=Ne(d,qt);y=h.children.length,v=x}w||an.moveNodes(e,{at:p,to:m,voids:i}),C&&an.removeNodes(e,{at:C.current,voids:i}),ft.isElement(h)&&yt.isEmpty(e,h)||$t.isText(h)&&""===h.text&&0!==g[g.length-1]?an.removeNodes(e,{at:g,voids:i}):e.apply({type:"merge_node",path:m,position:y,properties:v}),C&&C.unref()}}}}))},moveNodes(e,t){yt.withoutNormalizing(e,(()=>{var{to:n,at:r=e.selection,mode:o="lowest",voids:i=!1}=t,{match:a}=t;if(r){null==a&&(a=At.isPath(r)?Jt(e,r):t=>yt.isBlock(e,t));var u=yt.pathRef(e,n),s=yt.nodes(e,{at:r,match:a,mode:o,voids:i}),l=Array.from(s,(t=>{var[,n]=t;return yt.pathRef(e,n)}));for(var c of l){var f=c.unref(),d=u.current;0!==f.length&&e.apply({type:"move_node",path:f,newPath:d}),u.current&&At.isSibling(d,f)&&At.isAfter(d,f)&&(u.current=At.next(u.current))}u.unref()}}))},removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{hanging:n=!1,voids:r=!1,mode:o="lowest"}=t,{at:i=e.selection,match:a}=t;if(i){null==a&&(a=At.isPath(i)?Jt(e,i):t=>yt.isBlock(e,t)),!n&&jt.isRange(i)&&(i=yt.unhangRange(e,i));var u=yt.nodes(e,{at:i,match:a,mode:o,voids:r}),s=Array.from(u,(t=>{var[,n]=t;return yt.pathRef(e,n)}));for(var l of s){var c=l.unref();if(c){var[f]=yt.node(e,c);e.apply({type:"remove_node",path:c,node:f})}}}}))},setNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};yt.withoutNormalizing(e,(()=>{var{match:r,at:o=e.selection}=n,{hanging:i=!1,mode:a="lowest",split:u=!1,voids:s=!1}=n;if(o){if(null==r&&(r=At.isPath(o)?Jt(e,o):t=>yt.isBlock(e,t)),!i&&jt.isRange(o)&&(o=yt.unhangRange(e,o)),u&&jt.isRange(o)){if(jt.isCollapsed(o)&&yt.leaf(e,o.anchor)[0].text.length>0)return;var l=yt.rangeRef(e,o,{affinity:"inward"}),[c,f]=jt.edges(o),d="lowest"===a?"lowest":"highest",p=yt.isEnd(e,f,f.path);an.splitNodes(e,{at:f,match:r,mode:d,voids:s,always:!p});var h=yt.isStart(e,c,c.path);an.splitNodes(e,{at:c,match:r,mode:d,voids:s,always:!h}),o=l.unref(),null==n.at&&an.select(e,o)}for(var[g,v]of yt.nodes(e,{at:o,match:r,mode:a,voids:s})){var y={},m={};if(0!==v.length){var b=!1;for(var w in t)"children"!==w&&"text"!==w&&t[w]!==g[w]&&(b=!0,g.hasOwnProperty(w)&&(y[w]=g[w]),null!=t[w]&&(m[w]=t[w]));b&&e.apply({type:"set_node",path:v,properties:y,newProperties:m})}}}}))},splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{mode:n="lowest",voids:r=!1}=t,{match:o,at:i=e.selection,height:a=0,always:u=!1}=t;if(null==o&&(o=t=>yt.isBlock(e,t)),jt.isRange(i)&&(i=Zt(e,i)),At.isPath(i)){var s=i,l=yt.point(e,s),[c]=yt.parent(e,s);o=e=>e===c,a=l.path.length-s.length+1,i=l,u=!0}if(i){var f=yt.pointRef(e,i,{affinity:"backward"}),[d]=yt.nodes(e,{at:i,match:o,mode:n,voids:r});if(d){var p=yt.void(e,{at:i,mode:"highest"});if(!r&&p){var[h,g]=p;if(ft.isElement(h)&&e.isInline(h)){var v=yt.after(e,g);if(!v){var y=At.next(g);an.insertNodes(e,{text:""},{at:y,voids:r}),v=yt.point(e,y)}i=v,u=!0}a=i.path.length-g.length+1,u=!0}var m=yt.pointRef(e,i),b=i.path.length-a,[,w]=d,E=i.path.slice(0,b),D=0===a?i.offset:i.path[b]+0;for(var[C,x]of yt.levels(e,{at:E,reverse:!0,voids:r})){var S=!1;if(x.length<w.length||0===x.length||!r&&yt.isVoid(e,C))break;var A=f.current,O=yt.isEnd(e,A,x);if(u||!f||!yt.isEdge(e,A,x)){S=!0;var k=Dt.extractProps(C);e.apply({type:"split_node",path:x,position:D,properties:k})}D=x[x.length-1]+(S||O?1:0)}if(null==t.at){var B=m.current||yt.end(e,[]);an.select(e,B)}f.unref(),m.unref()}}}))},unsetNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Array.isArray(t)||(t=[t]);var r={};for(var o of t)r[o]=null;an.setNodes(e,r,n)},unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{mode:n="lowest",split:r=!1,voids:o=!1}=t,{at:i=e.selection,match:a}=t;if(i){null==a&&(a=At.isPath(i)?Jt(e,i):t=>yt.isBlock(e,t)),At.isPath(i)&&(i=yt.range(e,i));var u=jt.isRange(i)?yt.rangeRef(e,i):null,s=yt.nodes(e,{at:i,match:a,mode:n,voids:o}),l=Array.from(s,(t=>{var[,n]=t;return yt.pathRef(e,n)})).reverse(),c=function(t){var n=t.unref(),[i]=yt.node(e,n),a=yt.range(e,n);r&&u&&(a=jt.intersection(u.current,a)),an.liftNodes(e,{at:a,match:e=>ft.isAncestor(i)&&i.children.includes(e),voids:o})};for(var f of l)c(f);u&&u.unref()}}))},wrapNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};yt.withoutNormalizing(e,(()=>{var{mode:r="lowest",split:o=!1,voids:i=!1}=n,{match:a,at:u=e.selection}=n;if(u){if(null==a&&(a=At.isPath(u)?Jt(e,u):e.isInline(t)?t=>yt.isInline(e,t)||$t.isText(t):t=>yt.isBlock(e,t)),o&&jt.isRange(u)){var[s,l]=jt.edges(u),c=yt.rangeRef(e,u,{affinity:"inward"});an.splitNodes(e,{at:l,match:a,voids:i}),an.splitNodes(e,{at:s,match:a,voids:i}),u=c.unref(),null==n.at&&an.select(e,u)}var f=Array.from(yt.nodes(e,{at:u,match:e.isInline(t)?t=>yt.isBlock(e,t):e=>yt.isEditor(e),mode:"lowest",voids:i}));for(var[,d]of f){var p=jt.isRange(u)?jt.intersection(u,yt.range(e,d)):u;if(p){var h=Array.from(yt.nodes(e,{at:p,match:a,mode:r,voids:i}));if(h.length>0)if("continue"===function(){var[n]=h,r=h[h.length-1],[,o]=n,[,a]=r;if(0===o.length&&0===a.length)return"continue";var u=At.equals(o,a)?At.parent(o):At.common(o,a),s=yt.range(e,o,a),l=yt.node(e,u),[c]=l,f=u.length+1,d=At.next(a.slice(0,f)),p=Kt(Kt({},t),{},{children:[]});an.insertNodes(e,p,{at:d,voids:i}),an.moveNodes(e,{at:s,match:e=>ft.isAncestor(c)&&c.children.includes(e),to:d.concat(0),voids:i})}())continue}}}}))}},Xt=(e,t)=>{if(ft.isElement(t)){var n=t;return!!yt.isVoid(e,t)||1===n.children.length&&Xt(e,n.children[0])}return!yt.isEditor(t)},Zt=(e,t)=>{if(jt.isCollapsed(t))return t.anchor;var[,n]=jt.edges(t),r=yt.pointRef(e,n);return an.delete(e,{at:t}),r.unref()},Jt=(e,t)=>{var[n]=yt.node(e,t);return e=>e===n};function Qt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function en(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qt(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var tn={collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:n="anchor"}=t,{selection:r}=e;if(r)if("anchor"===n)an.select(e,r.anchor);else if("focus"===n)an.select(e,r.focus);else if("start"===n){var[o]=jt.edges(r);an.select(e,o)}else if("end"===n){var[,i]=jt.edges(r);an.select(e,i)}},deselect(e){var{selection:t}=e;t&&e.apply({type:"set_selection",properties:t,newProperties:null})},move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:n}=e,{distance:r=1,unit:o="character",reverse:i=!1}=t,{edge:a=null}=t;if(n){"start"===a&&(a=jt.isBackward(n)?"focus":"anchor"),"end"===a&&(a=jt.isBackward(n)?"anchor":"focus");var{anchor:u,focus:s}=n,l={distance:r,unit:o},c={};if(null==a||"anchor"===a){var f=i?yt.before(e,u,l):yt.after(e,u,l);f&&(c.anchor=f)}if(null==a||"focus"===a){var d=i?yt.before(e,s,l):yt.after(e,s,l);d&&(c.focus=d)}an.setSelection(e,c)}},select(e,t){var{selection:n}=e;if(t=yt.range(e,t),n)an.setSelection(e,t);else{if(!jt.isRange(t))throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(JSON.stringify(t)));e.apply({type:"set_selection",properties:n,newProperties:t})}},setPoint(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:r}=e,{edge:o="both"}=n;if(r){"start"===o&&(o=jt.isBackward(r)?"focus":"anchor"),"end"===o&&(o=jt.isBackward(r)?"anchor":"focus");var{anchor:i,focus:a}=r,u="anchor"===o?i:a;an.setSelection(e,{["anchor"===o?"anchor":"focus"]:en(en({},u),t)})}},setSelection(e,t){var{selection:n}=e,r={},o={};if(n){for(var i in t)("anchor"===i&&null!=t.anchor&&!Ft.equals(t.anchor,n.anchor)||"focus"===i&&null!=t.focus&&!Ft.equals(t.focus,n.focus)||"anchor"!==i&&"focus"!==i&&t[i]!==n[i])&&(r[i]=n[i],o[i]=t[i]);Object.keys(r).length>0&&e.apply({type:"set_selection",properties:r,newProperties:o})}}},nn={delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};yt.withoutNormalizing(e,(()=>{var{reverse:n=!1,unit:r="character",distance:o=1,voids:i=!1}=t,{at:a=e.selection,hanging:u=!1}=t;if(a){if(jt.isRange(a)&&jt.isCollapsed(a)&&(a=a.anchor),Ft.isPoint(a)){var s=yt.void(e,{at:a,mode:"highest"});if(!i&&s){var[,l]=s;a=l}else{var c={unit:r,distance:o};a={anchor:a,focus:n?yt.before(e,a,c)||yt.start(e,[]):yt.after(e,a,c)||yt.end(e,[])},u=!0}}if(At.isPath(a))an.removeNodes(e,{at:a,voids:i});else if(!jt.isCollapsed(a)){if(!u){var[,f]=jt.edges(a),d=yt.end(e,[]);Ft.equals(f,d)||(a=yt.unhangRange(e,a,{voids:i}))}var[p,h]=jt.edges(a),g=yt.above(e,{match:t=>yt.isBlock(e,t),at:p,voids:i}),v=yt.above(e,{match:t=>yt.isBlock(e,t),at:h,voids:i}),y=g&&v&&!At.equals(g[1],v[1]),m=At.equals(p.path,h.path),b=i?null:yt.void(e,{at:p,mode:"highest"}),w=i?null:yt.void(e,{at:h,mode:"highest"});if(b){var E=yt.before(e,p);E&&g&&At.isAncestor(g[1],E.path)&&(p=E)}if(w){var D=yt.after(e,h);D&&v&&At.isAncestor(v[1],D.path)&&(h=D)}var C,x=[];for(var S of yt.nodes(e,{at:a,voids:i})){var[A,O]=S;C&&0===At.compare(O,C)||(!i&&yt.isVoid(e,A)||!At.isCommon(O,p.path)&&!At.isCommon(O,h.path))&&(x.push(S),C=O)}var k=Array.from(x,(t=>{var[,n]=t;return yt.pathRef(e,n)})),B=yt.pointRef(e,p),F=yt.pointRef(e,h);if(!m&&!b){var _=B.current,[T]=yt.leaf(e,_),{path:P}=_,{offset:j}=p,N=T.text.slice(j);N.length>0&&e.apply({type:"remove_text",path:P,offset:j,text:N})}for(var I of k){var R=I.unref();an.removeNodes(e,{at:R,voids:i})}if(!w){var L=F.current,[M]=yt.leaf(e,L),{path:z}=L,$=m?p.offset:0,H=M.text.slice($,h.offset);H.length>0&&e.apply({type:"remove_text",path:z,offset:$,text:H})}!m&&y&&F.current&&B.current&&an.mergeNodes(e,{at:F.current,hanging:!0,voids:i});var V=n?B.unref()||F.unref():F.unref()||B.unref();null==t.at&&V&&an.select(e,V)}}}))},insertFragment(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};yt.withoutNormalizing(e,(()=>{var{hanging:r=!1,voids:o=!1}=n,{at:i=e.selection}=n;if(t.length&&i){if(jt.isRange(i))if(r||(i=yt.unhangRange(e,i)),jt.isCollapsed(i))i=i.anchor;else{var[,a]=jt.edges(i);if(!o&&yt.void(e,{at:a}))return;var u=yt.pointRef(e,a);an.delete(e,{at:i}),i=u.unref()}else At.isPath(i)&&(i=yt.start(e,i));if(o||!yt.void(e,{at:i})){var s=yt.above(e,{at:i,match:t=>yt.isInline(e,t),mode:"highest",voids:o});if(s){var[,l]=s;if(yt.isEnd(e,i,l))i=yt.after(e,l);else if(yt.isStart(e,i,l)){i=yt.before(e,l)}}var c=yt.above(e,{match:t=>yt.isBlock(e,t),at:i,voids:o}),[,f]=c,d=yt.isStart(e,i,f),p=yt.isEnd(e,i,f),h=d&&p,g=!d||d&&p,v=!p,[,y]=Dt.first({children:t},[]),[,m]=Dt.last({children:t},[]),b=[],w=t=>{var[n,r]=t;return!(0===r.length)&&(!!h||!(g&&At.isAncestor(r,y)&&ft.isElement(n)&&!e.isVoid(n)&&!e.isInline(n))&&!(v&&At.isAncestor(r,m)&&ft.isElement(n)&&!e.isVoid(n)&&!e.isInline(n)))};for(var E of Dt.nodes({children:t},{pass:w}))w(E)&&b.push(E);var D=[],C=[],x=[],S=!0,A=!1;for(var[O]of b)ft.isElement(O)&&!e.isInline(O)?(S=!1,A=!0,C.push(O)):S?D.push(O):x.push(O);var[k]=yt.nodes(e,{at:i,match:t=>$t.isText(t)||yt.isInline(e,t),mode:"highest",voids:o}),[,B]=k,F=yt.isStart(e,i,B),_=yt.isEnd(e,i,B),T=yt.pathRef(e,p?At.next(f):f),P=yt.pathRef(e,_?At.next(B):B),j=yt.pathRef(e,f);an.splitNodes(e,{at:i,match:t=>A?yt.isBlock(e,t):$t.isText(t)||yt.isInline(e,t),mode:A?"lowest":"highest",voids:o});var N=yt.pathRef(e,!F||F&&_?At.next(B):B);if(an.insertNodes(e,D,{at:N.current,match:t=>$t.isText(t)||yt.isInline(e,t),mode:"highest",voids:o}),h&&C.length&&an.delete(e,{at:j.unref(),voids:o}),an.insertNodes(e,C,{at:T.current,match:t=>yt.isBlock(e,t),mode:"lowest",voids:o}),an.insertNodes(e,x,{at:P.current,match:t=>$t.isText(t)||yt.isInline(e,t),mode:"highest",voids:o}),!n.at){var I;I=x.length>0?At.previous(P.current):C.length>0?At.previous(T.current):At.previous(N.current);var R=yt.end(e,I);an.select(e,R)}N.unref(),T.unref(),P.unref()}}}))},insertText(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};yt.withoutNormalizing(e,(()=>{var{voids:r=!1}=n,{at:o=e.selection}=n;if(o){if(At.isPath(o)&&(o=yt.range(e,o)),jt.isRange(o))if(jt.isCollapsed(o))o=o.anchor;else{var i=jt.end(o);if(!r&&yt.void(e,{at:i}))return;var a=yt.pointRef(e,i);an.delete(e,{at:o,voids:r}),o=a.unref(),an.setSelection(e,{anchor:o,focus:o})}if(r||!yt.void(e,{at:o})){var{path:u,offset:s}=o;t.length>0&&e.apply({type:"insert_text",path:u,offset:s,text:t})}}}))}};function rn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function on(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?rn(Object(n),!0).forEach((function(t){Se(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):rn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var an=on(on(on(on({},Ut),Yt),tn),nn),un="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function sn(e){var t={exports:{}};return e(t,t.exports),t.exports}var ln="[object Map]",cn="[object Set]",fn=/^\[object .+?Constructor\]$/,dn=/^(?:0|[1-9]\d*)$/,pn="[\\ud800-\\udfff]",hn="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",gn="\\ud83c[\\udffb-\\udfff]",vn="[^\\ud800-\\udfff]",yn="(?:\\ud83c[\\udde6-\\uddff]){2}",mn="[\\ud800-\\udbff][\\udc00-\\udfff]",bn="(?:"+hn+"|"+gn+")"+"?",wn="[\\ufe0e\\ufe0f]?"+bn+("(?:\\u200d(?:"+[vn,yn,mn].join("|")+")[\\ufe0e\\ufe0f]?"+bn+")*"),En="(?:"+[vn+hn+"?",hn,yn,mn,pn].join("|")+")",Dn=RegExp(gn+"(?="+gn+")|"+En+wn,"g"),Cn=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),xn="object"==typeof un&&un&&un.Object===Object&&un,Sn="object"==typeof self&&self&&self.Object===Object&&self,An=xn||Sn||Function("return this")();function On(e,t){return function(e,t){for(var n=-1,r=e?e.length:0,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(t,(function(t){return e[t]}))}function kn(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function Bn(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}function Fn(e){return function(e){return Cn.test(e)}(e)?function(e){return e.match(Dn)||[]}(e):function(e){return e.split("")}(e)}var _n,Tn,Pn,jn=Function.prototype,Nn=Object.prototype,In=An["__core-js_shared__"],Rn=(_n=/[^.]+$/.exec(In&&In.keys&&In.keys.IE_PROTO||""))?"Symbol(src)_1."+_n:"",Ln=jn.toString,Mn=Nn.hasOwnProperty,zn=Nn.toString,$n=RegExp("^"+Ln.call(Mn).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Hn=An.Symbol,Vn=Hn?Hn.iterator:void 0,Un=Nn.propertyIsEnumerable,Wn=(Tn=Object.keys,Pn=Object,function(e){return Tn(Pn(e))}),qn=ir(An,"DataView"),Gn=ir(An,"Map"),Kn=ir(An,"Promise"),Yn=ir(An,"Set"),Xn=ir(An,"WeakMap"),Zn=sr(qn),Jn=sr(Gn),Qn=sr(Kn),er=sr(Yn),tr=sr(Xn);function nr(e,t){var n=lr(e)||function(e){return function(e){return pr(e)&&cr(e)}(e)&&Mn.call(e,"callee")&&(!Un.call(e,"callee")||"[object Arguments]"==zn.call(e))}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var i in e)!t&&!Mn.call(e,i)||o&&("length"==i||ur(i,r))||n.push(i);return n}function rr(e){if(!dr(e)||function(e){return!!Rn&&Rn in e}(e))return!1;var t=fr(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(Qh){}return t}(e)?$n:fn;return t.test(sr(e))}function or(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||Nn,t!==r)return Wn(e);var t,n,r,o=[];for(var i in Object(e))Mn.call(e,i)&&"constructor"!=i&&o.push(i);return o}function ir(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return rr(n)?n:void 0}var ar=function(e){return zn.call(e)};function ur(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||dn.test(e))&&e>-1&&e%1==0&&e<t}function sr(e){if(null!=e){try{return Ln.call(e)}catch(Qh){}try{return e+""}catch(Qh){}}return""}(qn&&"[object DataView]"!=ar(new qn(new ArrayBuffer(1)))||Gn&&ar(new Gn)!=ln||Kn&&"[object Promise]"!=ar(Kn.resolve())||Yn&&ar(new Yn)!=cn||Xn&&"[object WeakMap]"!=ar(new Xn))&&(ar=function(e){var t=zn.call(e),n="[object Object]"==t?e.constructor:void 0,r=n?sr(n):void 0;if(r)switch(r){case Zn:return"[object DataView]";case Jn:return ln;case Qn:return"[object Promise]";case er:return cn;case tr:return"[object WeakMap]"}return t});var lr=Array.isArray;function cr(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!fr(e)}function fr(e){var t=dr(e)?zn.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}function dr(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function pr(e){return!!e&&"object"==typeof e}function hr(e){return e?On(e,function(e){return cr(e)?nr(e):or(e)}(e)):[]}var gr=function(e){if(!e)return[];if(cr(e))return function(e){return"string"==typeof e||!lr(e)&&pr(e)&&"[object String]"==zn.call(e)}(e)?Fn(e):function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(e);if(Vn&&e[Vn])return function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n}(e[Vn]());var t=ar(e);return(t==ln?kn:t==cn?Bn:hr)(e)};function vr(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function yr(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(n){void 0===e[n]?e[n]=t[n]:vr(t[n])&&vr(e[n])&&Object.keys(t[n]).length>0&&yr(e[n],t[n])}))}var mr={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function br(){var e="undefined"!=typeof document?document:{};return yr(e,mr),e}var wr={document:mr,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function Er(){var e="undefined"!=typeof window?window:{};return yr(e,wr),e}function Dr(e){return(Dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Cr(e,t){return(Cr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xr(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(Qh){return!1}}function Sr(e,t,n){return(Sr=xr()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&Cr(o,n.prototype),o}).apply(null,arguments)}function Ar(e){var t="function"==typeof Map?new Map:void 0;return Ar=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return Sr(e,arguments,Dr(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Cr(r,e)},Ar(e)}var Or=function(e){var t,n;function r(t){var n,r,o;return n=e.call.apply(e,[this].concat(t))||this,r=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n),o=r.__proto__,Object.defineProperty(r,"__proto__",{get:function(){return o},set:function(e){o.__proto__=e}}),n}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,r}(Ar(Array));function kr(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,kr(e)):t.push(e)})),t}function Br(e,t){return Array.prototype.filter.call(e,t)}function Fr(e,t){var n=Er(),r=br(),o=[];if(!t&&e instanceof Or)return e;if(!e)return new Or(o);if("string"==typeof e){var i=e.trim();if(i.indexOf("<")>=0&&i.indexOf(">")>=0){var a="div";0===i.indexOf("<li")&&(a="ul"),0===i.indexOf("<tr")&&(a="tbody"),0!==i.indexOf("<td")&&0!==i.indexOf("<th")||(a="tr"),0===i.indexOf("<tbody")&&(a="table"),0===i.indexOf("<option")&&(a="select");var u=r.createElement(a);u.innerHTML=i;for(var s=0;s<u.childNodes.length;s+=1)o.push(u.childNodes[s])}else o=function(e,t){if("string"!=typeof e)return[e];for(var n=[],r=t.querySelectorAll(e),o=0;o<r.length;o+=1)n.push(r[o]);return n}(e.trim(),t||r)}else if(e.nodeType||e===n||e===r)o.push(e);else if(Array.isArray(e)){if(e instanceof Or)return e;o=e}return new Or(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(o))}function _r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=kr(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,r)})),this}function Tr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=kr(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,r)})),this}function Pr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=kr(t.map((function(e){return e.split(" ")})));return Br(this,(function(e){return r.filter((function(t){return e.classList.contains(t)})).length>0})).length>0}function jr(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var r in e)this[n][r]=e[r],this[n].setAttribute(r,e[r]);return this}function Nr(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this}function Ir(){var e=this[0];if(e){var t,n={};if(e.dataset)for(var r in e.dataset)n[r]=e.dataset[r];else for(var o=0;o<e.attributes.length;o+=1){var i=e.attributes[o];i.name.indexOf("data-")>=0&&(n[(t=i.name.split("data-")[1],t.toLowerCase().replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=i.value)}for(var a in n)"false"===n[a]?n[a]=!1:"true"===n[a]?n[a]=!0:parseFloat(n[a])===1*n[a]&&(n[a]*=1);return n}}function Rr(e){if(void 0===e){var t=this[0];if(!t)return;if(t.multiple&&"select"===t.nodeName.toLowerCase()){for(var n=[],r=0;r<t.selectedOptions.length;r+=1)n.push(t.selectedOptions[r].value);return n}return t.value}for(var o=0;o<this.length;o+=1){var i=this[o];if(Array.isArray(e)&&i.multiple&&"select"===i.nodeName.toLowerCase())for(var a=0;a<i.options.length;a+=1)i.options[a].selected=e.indexOf(i.options[a].value)>=0;else i.value=e}return this}function Lr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],i=t[2],a=t[3];function u(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),Fr(t).is(o))i.apply(t,n);else for(var r=Fr(t).parents(),a=0;a<r.length;a+=1)Fr(r[a]).is(o)&&i.apply(r[a],n)}}function s(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),i.apply(this,t)}"function"==typeof t[1]&&(r=t[0],i=t[1],a=t[2],o=void 0),a||(a=!1);for(var l,c=r.split(" "),f=0;f<this.length;f+=1){var d=this[f];if(o)for(l=0;l<c.length;l+=1){var p=c[l];d.dom7LiveListeners||(d.dom7LiveListeners={}),d.dom7LiveListeners[p]||(d.dom7LiveListeners[p]=[]),d.dom7LiveListeners[p].push({listener:i,proxyListener:u}),d.addEventListener(p,u,a)}else for(l=0;l<c.length;l+=1){var h=c[l];d.dom7Listeners||(d.dom7Listeners={}),d.dom7Listeners[h]||(d.dom7Listeners[h]=[]),d.dom7Listeners[h].push({listener:i,proxyListener:s}),d.addEventListener(h,s,a)}}return this}function Mr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t[0],o=t[1],i=t[2],a=t[3];"function"==typeof t[1]&&(r=t[0],i=t[1],a=t[2],o=void 0),a||(a=!1);for(var u=r.split(" "),s=0;s<u.length;s+=1)for(var l=u[s],c=0;c<this.length;c+=1){var f=this[c],d=void 0;if(!o&&f.dom7Listeners?d=f.dom7Listeners[l]:o&&f.dom7LiveListeners&&(d=f.dom7LiveListeners[l]),d&&d.length)for(var p=d.length-1;p>=0;p-=1){var h=d[p];i&&h.listener===i||i&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===i?(f.removeEventListener(l,h.proxyListener,a),d.splice(p,1)):i||(f.removeEventListener(l,h.proxyListener,a),d.splice(p,1))}}return this}function zr(){var e=Er();return this[0]===e?e.innerWidth:this.length>0?parseFloat(this.css("width")):null}function $r(){var e=Er();return this[0]===e?e.innerHeight:this.length>0?parseFloat(this.css("height")):null}function Hr(){if(this.length>0){var e=Er(),t=br(),n=this[0],r=n.getBoundingClientRect(),o=t.body,i=n.clientTop||o.clientTop||0,a=n.clientLeft||o.clientLeft||0,u=n===e?e.scrollY:n.scrollTop,s=n===e?e.scrollX:n.scrollLeft;return{top:r.top+u-i,left:r.left+s-a}}return null}function Vr(){for(var e=0;e<this.length;e+=1)this[e].style.display="none";return this}function Ur(){for(var e=Er(),t=0;t<this.length;t+=1){var n=this[t];"none"===n.style.display&&(n.style.display=""),"none"===e.getComputedStyle(n,null).getPropertyValue("display")&&(n.style.display="block")}return this}function Wr(e,t){var n,r=Er();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var o in e)this[n].style[o]=e[o];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this}function qr(e){return e?(this.forEach((function(t,n){e.apply(t,[t,n])})),this):this}function Gr(e){return Fr(Br(this,e))}function Kr(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this}function Yr(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this}function Xr(e){var t,n,r=Er(),o=br(),i=this[0];if(!i||void 0===e)return!1;if("string"==typeof e){if(i.matches)return i.matches(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);for(t=Fr(e),n=0;n<t.length;n+=1)if(t[n]===i)return!0;return!1}if(e===o)return i===o;if(e===r)return i===r;if(e.nodeType||e instanceof Or){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===i)return!0;return!1}return!1}function Zr(){for(var e,t=br(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var r=0;r<this.length;r+=1)if("string"==typeof e){var o=t.createElement("div");for(o.innerHTML=e;o.firstChild;)this[r].appendChild(o.firstChild)}else if(e instanceof Or)for(var i=0;i<e.length;i+=1)this[r].appendChild(e[i]);else this[r].appendChild(e)}return this}function Jr(e){var t,n,r=br();for(t=0;t<this.length;t+=1)if("string"==typeof e){var o=r.createElement("div");for(o.innerHTML=e,n=o.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(o.childNodes[n],this[t].childNodes[0])}else if(e instanceof Or)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this}function Qr(e){for(var t=[],n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?Fr(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return Fr(t)}function eo(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].parentNode;r;)e?Fr(r).is(e)&&t.push(r):t.push(r),r=r.parentNode;return Fr(t)}function to(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].querySelectorAll(e),o=0;o<r.length;o+=1)t.push(r[o]);return Fr(t)}function no(e){for(var t=[],n=0;n<this.length;n+=1)for(var r=this[n].children,o=0;o<r.length;o+=1)e&&!Fr(r[o]).is(e)||t.push(r[o]);return Fr(t)}function ro(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}function oo(){for(var e=0;e<this.length;e+=1){var t=this[e];if(1===t.nodeType){for(var n=0;n<t.childNodes.length;n+=1)t.childNodes[n].parentNode&&t.childNodes[n].parentNode.removeChild(t.childNodes[n]);t.textContent=""}}return this}Fr.fn=Or.prototype;var io="resize scroll".split(" ");function ao(e){return function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];if(void 0===n[0]){for(var o=0;o<this.length;o+=1)io.indexOf(e)<0&&(e in this[o]?this[o][e]():Fr(this[o]).trigger(e));return this}return this.on.apply(this,[e].concat(n))}}var uo=ao("click"),so=ao("focus"),lo="[object GeneratorFunction]",co=/^(?:0|[1-9]\d*)$/;function fo(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););return e}var po=Object.prototype,ho=po.hasOwnProperty,go=po.toString,vo=po.propertyIsEnumerable,yo=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object);function mo(e,t){var n=So(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ao(e)}(e)&&ho.call(e,"callee")&&(!vo.call(e,"callee")||"[object Arguments]"==go.call(e))}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var i in e)!t&&!ho.call(e,i)||o&&("length"==i||xo(i,r))||n.push(i);return n}var bo,wo,Eo=(bo=function(e,t){return e&&Do(e,t,Oo)},function(e,t){if(null==e)return e;if(!Ao(e))return bo(e,t);for(var n=e.length,r=wo?n:-1,o=Object(e);(wo?r--:++r<n)&&!1!==t(o[r],r,o););return e}),Do=function(e){return function(t,n,r){for(var o=-1,i=Object(t),a=r(t),u=a.length;u--;){var s=a[e?u:++o];if(!1===n(i[s],s,i))break}return t}}();function Co(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||po,t!==r)return yo(e);var t,n,r,o=[];for(var i in Object(e))ho.call(e,i)&&"constructor"!=i&&o.push(i);return o}function xo(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||co.test(e))&&e>-1&&e%1==0&&e<t}var So=Array.isArray;function Ao(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)?go.call(e):"";return"[object Function]"==t||t==lo}(e)}function Oo(e){return Ao(e)?mo(e):Co(e)}function ko(e){return e}var Bo=function(e,t){return(So(e)?fo:Eo)(e,"function"==typeof t?t:ko)};if("undefined"!=typeof navigator&&"ReactNative"===navigator.product&&"undefined"==typeof crypto)throw new Error("React Native does not have a built-in secure random generator. If you don’t need unpredictable IDs use `nanoid/non-secure`. For secure IDs, import `react-native-get-random-values` before Nano ID.");if("undefined"!=typeof msCrypto&&"undefined"==typeof crypto)throw new Error("Import file with `if (!window.crypto) window.crypto = window.msCrypto` before importing Nano ID to fix IE 11 support");if("undefined"==typeof crypto)throw new Error("Your browser does not have secure random generator. If you don’t need unpredictable IDs, you can use nanoid/non-secure.");let Fo=(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t};var _o=/^\s+|\s+$/g,To=/^[-+]0x[0-9a-f]+$/i,Po=/^0b[01]+$/i,jo=/^0o[0-7]+$/i,No=parseInt,Io="object"==typeof un&&un&&un.Object===Object&&un,Ro="object"==typeof self&&self&&self.Object===Object&&self,Lo=Io||Ro||Function("return this")(),Mo=Object.prototype.toString,zo=Math.max,$o=Math.min,Ho=function(){return Lo.Date.now()};function Vo(e,t,n){var r,o,i,a,u,s,l=0,c=!1,f=!1,d=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function p(t){var n=r,i=o;return r=o=void 0,l=t,a=e.apply(i,n)}function h(e){return l=e,u=setTimeout(v,t),c?p(e):a}function g(e){var n=e-s;return void 0===s||n>=t||n<0||f&&e-l>=i}function v(){var e=Ho();if(g(e))return y(e);u=setTimeout(v,function(e){var n=t-(e-s);return f?$o(n,i-(e-l)):n}(e))}function y(e){return u=void 0,d&&r?p(e):(r=o=void 0,a)}function m(){var e=Ho(),n=g(e);if(r=arguments,o=this,s=e,n){if(void 0===u)return h(s);if(f)return u=setTimeout(v,t),p(s)}return void 0===u&&(u=setTimeout(v,t)),a}return t=Wo(t)||0,Uo(n)&&(c=!!n.leading,i=(f="maxWait"in n)?zo(Wo(n.maxWait)||0,t):i,d="trailing"in n?!!n.trailing:d),m.cancel=function(){void 0!==u&&clearTimeout(u),l=0,r=s=o=u=void 0},m.flush=function(){return void 0===u?a:y(Ho())},m}function Uo(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Wo(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==Mo.call(e)}(e))return NaN;if(Uo(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=Uo(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(_o,"");var n=Po.test(e);return n||jo.test(e)?No(e.slice(2),n?2:8):To.test(e)?NaN:+e}var qo=function(e,t,n){var r=!0,o=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return Uo(n)&&(r="leading"in n?!!n.leading:r,o="trailing"in n?!!n.trailing:o),Vo(e,t,{leading:r,maxWait:t,trailing:o})};const Go={createElement:function(e,t){return document.createElement(e,t)},createElementNS:function(e,t,n){return document.createElementNS(e,t,n)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},getTextContent:function(e){return e.textContent},isElement:function(e){return 1===e.nodeType},isText:function(e){return 3===e.nodeType},isComment:function(e){return 8===e.nodeType}};function Ko(e,t,n,r,o){return{sel:e,data:t,children:n,text:r,elm:o,key:void 0===t?void 0:t.key}}const Yo=Array.isArray;function Xo(e){return"string"==typeof e||"number"==typeof e||e instanceof String||e instanceof Number}function Zo(e){return void 0===e}function Jo(e){return void 0!==e}const Qo=Ko("",{},[],void 0,void 0);function ei(e,t){var n,r;const o=e.key===t.key,i=(null===(n=e.data)||void 0===n?void 0:n.is)===(null===(r=t.data)||void 0===r?void 0:r.is);return e.sel===t.sel&&o&&i}function ti(e,t,n){var r;const o={};for(let i=t;i<=n;++i){const t=null===(r=e[i])||void 0===r?void 0:r.key;void 0!==t&&(o[t]=i)}return o}const ni=["create","update","remove","destroy","pre","post"];function ri(e,t){const n={create:[],update:[],remove:[],destroy:[],pre:[],post:[]},r=void 0!==t?t:Go;for(const c of ni)for(const t of e){const e=t[c];void 0!==e&&n[c].push(e)}function o(e,t){return function(){if(0==--t){const t=r.parentNode(e);r.removeChild(t,e)}}}function i(e,t){var o,a;let u,s=e.data;if(void 0!==s){const t=null===(o=s.hook)||void 0===o?void 0:o.init;Jo(t)&&(t(e),s=e.data)}const l=e.children,c=e.sel;if("!"===c)Zo(e.text)&&(e.text=""),e.elm=r.createComment(e.text);else if(void 0!==c){const o=c.indexOf("#"),f=c.indexOf(".",o),d=o>0?o:c.length,p=f>0?f:c.length,h=-1!==o||-1!==f?c.slice(0,Math.min(d,p)):c,g=e.elm=Jo(s)&&Jo(u=s.ns)?r.createElementNS(u,h,s):r.createElement(h,s);for(d<p&&g.setAttribute("id",c.slice(d+1,p)),f>0&&g.setAttribute("class",c.slice(p+1).replace(/\./g," ")),u=0;u<n.create.length;++u)n.create[u](Qo,e);if(Yo(l))for(u=0;u<l.length;++u){const e=l[u];null!=e&&r.appendChild(g,i(e,t))}else Xo(e.text)&&r.appendChild(g,r.createTextNode(e.text));const v=e.data.hook;Jo(v)&&(null===(a=v.create)||void 0===a||a.call(v,Qo,e),v.insert&&t.push(e))}else e.elm=r.createTextNode(e.text);return e.elm}function a(e,t,n,o,a,u){for(;o<=a;++o){const a=n[o];null!=a&&r.insertBefore(e,i(a,u),t)}}function u(e){var t,r;const o=e.data;if(void 0!==o){null===(r=null===(t=null==o?void 0:o.hook)||void 0===t?void 0:t.destroy)||void 0===r||r.call(t,e);for(let t=0;t<n.destroy.length;++t)n.destroy[t](e);if(void 0!==e.children)for(let t=0;t<e.children.length;++t){const n=e.children[t];null!=n&&"string"!=typeof n&&u(n)}}}function s(e,t,i,a){for(var s,l;i<=a;++i){let a,c;const f=t[i];if(null!=f)if(Jo(f.sel)){u(f),a=n.remove.length+1,c=o(f.elm,a);for(let t=0;t<n.remove.length;++t)n.remove[t](f,c);const e=null===(l=null===(s=null==f?void 0:f.data)||void 0===s?void 0:s.hook)||void 0===l?void 0:l.remove;Jo(e)?e(f,c):c()}else r.removeChild(e,f.elm)}}function l(e,t,o){var u,c,f,d,p;const h=null===(u=t.data)||void 0===u?void 0:u.hook;null===(c=null==h?void 0:h.prepatch)||void 0===c||c.call(h,e,t);const g=t.elm=e.elm,v=e.children,y=t.children;if(e!==t){if(void 0!==t.data){for(let r=0;r<n.update.length;++r)n.update[r](e,t);null===(d=null===(f=t.data.hook)||void 0===f?void 0:f.update)||void 0===d||d.call(f,e,t)}Zo(t.text)?Jo(v)&&Jo(y)?v!==y&&function(e,t,n,o){let u,c,f,d,p=0,h=0,g=t.length-1,v=t[0],y=t[g],m=n.length-1,b=n[0],w=n[m];for(;p<=g&&h<=m;)null==v?v=t[++p]:null==y?y=t[--g]:null==b?b=n[++h]:null==w?w=n[--m]:ei(v,b)?(l(v,b,o),v=t[++p],b=n[++h]):ei(y,w)?(l(y,w,o),y=t[--g],w=n[--m]):ei(v,w)?(l(v,w,o),r.insertBefore(e,v.elm,r.nextSibling(y.elm)),v=t[++p],w=n[--m]):ei(y,b)?(l(y,b,o),r.insertBefore(e,y.elm,v.elm),y=t[--g],b=n[++h]):(void 0===u&&(u=ti(t,p,g)),c=u[b.key],Zo(c)?r.insertBefore(e,i(b,o),v.elm):(f=t[c],f.sel!==b.sel?r.insertBefore(e,i(b,o),v.elm):(l(f,b,o),t[c]=void 0,r.insertBefore(e,f.elm,v.elm))),b=n[++h]);(p<=g||h<=m)&&(p>g?(d=null==n[m+1]?null:n[m+1].elm,a(e,d,n,h,m,o)):s(e,t,p,g))}(g,v,y,o):Jo(y)?(Jo(e.text)&&r.setTextContent(g,""),a(g,null,y,0,y.length-1,o)):Jo(v)?s(g,v,0,v.length-1):Jo(e.text)&&r.setTextContent(g,""):e.text!==t.text&&(Jo(v)&&s(g,v,0,v.length-1),r.setTextContent(g,t.text)),null===(p=null==h?void 0:h.postpatch)||void 0===p||p.call(h,e,t)}}return function(e,t){let o,a,u;const c=[];for(o=0;o<n.pre.length;++o)n.pre[o]();for(function(e){return void 0!==e.sel}(e)||(e=function(e){const t=e.id?"#"+e.id:"",n=e.getAttribute("class"),o=n?"."+n.split(" ").join("."):"";return Ko(r.tagName(e).toLowerCase()+t+o,{},[],void 0,e)}(e)),ei(e,t)?l(e,t,c):(a=e.elm,u=r.parentNode(a),i(t,c),null!==u&&(r.insertBefore(u,t.elm,r.nextSibling(a)),s(u,[e],0,0))),o=0;o<c.length;++o)c[o].data.hook.insert(c[o]);for(o=0;o<n.post.length;++o)n.post[o]();return t}}function oi(e,t,n){if(e.ns="http://www.w3.org/2000/svg","foreignObject"!==n&&void 0!==t)for(let r=0;r<t.length;++r){const e=t[r].data;void 0!==e&&oi(e,t[r].children,t[r].sel)}}function ii(e,t,n){let r,o,i,a={};if(void 0!==n?(null!==t&&(a=t),Yo(n)?r=n:Xo(n)?o=n.toString():n&&n.sel&&(r=[n])):null!=t&&(Yo(t)?r=t:Xo(t)?o=t.toString():t&&t.sel?r=[t]:a=t),void 0!==r)for(i=0;i<r.length;++i)Xo(r[i])&&(r[i]=Ko(void 0,void 0,void 0,r[i],void 0));return"s"!==e[0]||"v"!==e[1]||"g"!==e[2]||3!==e.length&&"."!==e[3]&&"#"!==e[3]||oi(a,r,e),Ko(e,a,r,o,void 0)}function ai(e,t){let n,r;const o=t.elm;let i=e.data.class,a=t.data.class;if((i||a)&&i!==a){for(r in i=i||{},a=a||{},i)i[r]&&!Object.prototype.hasOwnProperty.call(a,r)&&o.classList.remove(r);for(r in a)n=a[r],n!==i[r]&&o.classList[n?"add":"remove"](r)}}const ui={create:ai,update:ai},si=/[A-Z]/g;function li(e,t){const n=t.elm;let r,o=e.data.dataset,i=t.data.dataset;if(!o&&!i)return;if(o===i)return;o=o||{},i=i||{};const a=n.dataset;for(r in o)i[r]||(a?r in a&&delete a[r]:n.removeAttribute("data-"+r.replace(si,"-$&").toLowerCase()));for(r in i)o[r]!==i[r]&&(a?a[r]=i[r]:n.setAttribute("data-"+r.replace(si,"-$&").toLowerCase(),i[r]))}const ci={create:li,update:li};function fi(e,t,n){if("function"==typeof e)e.call(t,n,t);else if("object"==typeof e)for(let r=0;r<e.length;r++)fi(e[r],t,n)}function di(e,t){const n=e.type,r=t.data.on;r&&r[n]&&fi(r[n],t,e)}function pi(e,t){const n=e.data.on,r=e.listener,o=e.elm,i=t&&t.data.on,a=t&&t.elm;let u;if(n!==i){if(n&&r)if(i)for(u in n)i[u]||o.removeEventListener(u,r,!1);else for(u in n)o.removeEventListener(u,r,!1);if(i){const r=t.listener=e.listener||function e(t){di(t,e.vnode)};if(r.vnode=t,n)for(u in i)n[u]||a.addEventListener(u,r,!1);else for(u in i)a.addEventListener(u,r,!1)}}}const hi={create:pi,update:pi,destroy:pi};function gi(e,t){let n,r,o;const i=t.elm;let a=e.data.props,u=t.data.props;if((a||u)&&a!==u)for(n in a=a||{},u=u||{},u)r=u[n],o=a[n],o===r||"value"===n&&i[n]===r||(i[n]=r)}const vi={create:gi,update:gi},yi="undefined"!=typeof window&&window.requestAnimationFrame.bind(window)||setTimeout;let mi=!1;function bi(e,t,n){var r;r=function(){e[t]=n},yi((function(){yi(r)}))}function wi(e,t){let n,r;const o=t.elm;let i=e.data.style,a=t.data.style;if(!i&&!a)return;if(i===a)return;i=i||{},a=a||{};const u="delayed"in i;for(r in i)a[r]||("-"===r[0]&&"-"===r[1]?o.style.removeProperty(r):o.style[r]="");for(r in a)if(n=a[r],"delayed"===r&&a.delayed)for(const e in a.delayed)n=a.delayed[e],u&&n===i.delayed[e]||bi(o.style,e,n);else"remove"!==r&&n!==i[r]&&("-"===r[0]&&"-"===r[1]?o.style.setProperty(r,n):o.style[r]=n)}const Ei={pre:function(){mi=!1},create:wi,update:wi,destroy:function(e){let t,n;const r=e.elm,o=e.data.style;if(o&&(t=o.destroy))for(n in t)r.style[n]=t[n]},remove:function(e,t){const n=e.data.style;if(!n||!n.remove)return void t();let r;mi||(e.elm.offsetLeft,mi=!0);const o=e.elm;let i=0;const a=n.remove;let u=0;const s=[];for(r in a)s.push(r),o.style[r]=a[r];const l=getComputedStyle(o)["transition-property"].split(", ");for(;i<l.length;++i)-1!==s.indexOf(l[i])&&u++;o.addEventListener("transitionend",(function(e){e.target===o&&--u,0===u&&t()}))}};function Di(e,t){for(const n of e)null!=n&&!1!==n&&""!==n&&(Array.isArray(n)?Di(n,t):"string"==typeof n||"number"==typeof n||"boolean"==typeof n?t.push(Ko(void 0,void 0,void 0,String(n),void 0)):t.push(n));return t}function Ci(e,t,...n){const r=Di(n,[]);return"function"==typeof e?e(t,r):1===r.length&&!r[0].sel&&r[0].text?ii(e,t,r[0].text):ii(e,t,r)}Ci||(Ci={});var xi=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Si=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Ai="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Oi="[\\ud800-\\udfff]",ki="["+Ai+"]",Bi="[\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0]",Fi="\\d+",_i="[\\u2700-\\u27bf]",Ti="[a-z\\xdf-\\xf6\\xf8-\\xff]",Pi="[^\\ud800-\\udfff"+Ai+Fi+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",ji="\\ud83c[\\udffb-\\udfff]",Ni="[^\\ud800-\\udfff]",Ii="(?:\\ud83c[\\udde6-\\uddff]){2}",Ri="[\\ud800-\\udbff][\\udc00-\\udfff]",Li="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Mi="(?:"+Ti+"|"+Pi+")",zi="(?:"+Li+"|"+Pi+")",$i="(?:"+Bi+"|"+ji+")"+"?",Hi="[\\ufe0e\\ufe0f]?"+$i+("(?:\\u200d(?:"+[Ni,Ii,Ri].join("|")+")[\\ufe0e\\ufe0f]?"+$i+")*"),Vi="(?:"+[_i,Ii,Ri].join("|")+")"+Hi,Ui="(?:"+[Ni+Bi+"?",Bi,Ii,Ri,Oi].join("|")+")",Wi=RegExp("['’]","g"),qi=RegExp(Bi,"g"),Gi=RegExp(ji+"(?="+ji+")|"+Ui+Hi,"g"),Ki=RegExp([Li+"?"+Ti+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[ki,Li,"$"].join("|")+")",zi+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[ki,Li+Mi,"$"].join("|")+")",Li+"?"+Mi+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Li+"+(?:['’](?:D|LL|M|RE|S|T|VE))?",Fi,Vi].join("|"),"g"),Yi=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe23\\u20d0-\\u20f0\\ufe0e\\ufe0f]"),Xi=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Zi="object"==typeof un&&un&&un.Object===Object&&un,Ji="object"==typeof self&&self&&self.Object===Object&&self,Qi=Zi||Ji||Function("return this")();var ea,ta=(ea={"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"ss"},function(e){return null==ea?void 0:ea[e]});function na(e){return Yi.test(e)}function ra(e){return na(e)?function(e){return e.match(Gi)||[]}(e):function(e){return e.split("")}(e)}var oa=Object.prototype.toString,ia=Qi.Symbol,aa=ia?ia.prototype:void 0,ua=aa?aa.toString:void 0;function sa(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==oa.call(e)}(e))return ua?ua.call(e):"";var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}function la(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}(e,t,n)}function ca(e){return null==e?"":sa(e)}var fa,da=(fa=function(e,t,n){return t=t.toLowerCase(),e+(n?ha(ca(t).toLowerCase()):t)},function(e){return function(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}(function(e,t,n){return e=ca(e),void 0===(t=n?void 0:t)?function(e){return Xi.test(e)}(e)?function(e){return e.match(Ki)||[]}(e):function(e){return e.match(xi)||[]}(e):e.match(t)||[]}(function(e){return(e=ca(e))&&e.replace(Si,ta).replace(qi,"")}(e).replace(Wi,"")),fa,"")});var pa,ha=(pa="toUpperCase",function(e){var t=na(e=ca(e))?ra(e):void 0,n=t?t[0]:e.charAt(0),r=t?la(t,1).join(""):e.slice(1);return n[pa]()+r});for(var ga=da,va="undefined"!=typeof window&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),ya={alt:"altKey",control:"ctrlKey",meta:"metaKey",shift:"shiftKey"},ma={add:"+",break:"pause",cmd:"meta",command:"meta",ctl:"control",ctrl:"control",del:"delete",down:"arrowdown",esc:"escape",ins:"insert",left:"arrowleft",mod:va?"meta":"control",opt:"alt",option:"alt",return:"enter",right:"arrowright",space:" ",spacebar:" ",up:"arrowup",win:"meta",windows:"meta"},ba={backspace:8,tab:9,enter:13,shift:16,control:17,alt:18,pause:19,capslock:20,escape:27," ":32,pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,insert:45,delete:46,meta:91,numlock:144,scrolllock:145,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},wa=1;wa<20;wa++)ba["f"+wa]=111+wa;function Ea(e,t,n){t&&!("byKey"in t)&&(n=t,t=null),Array.isArray(e)||(e=[e]);var r=e.map((function(e){return function(e,t){var n=t&&t.byKey,r={},o=(e=e.replace("++","+add")).split("+"),i=o.length;for(var a in ya)r[ya[a]]=!1;var u=!0,s=!1,l=void 0;try{for(var c,f=o[Symbol.iterator]();!(u=(c=f.next()).done);u=!0){var d=c.value,p=d.endsWith("?")&&d.length>1;p&&(d=d.slice(0,-1));var h=Ca(d),g=ya[h];if(d.length>1&&!g&&!ma[d]&&!ba[h])throw new TypeError('Unknown modifier: "'+d+'"');1!==i&&g||(n?r.key=h:r.which=Da(d)),g&&(r[g]=!p||null)}}catch(v){s=!0,l=v}finally{try{!u&&f.return&&f.return()}finally{if(s)throw l}}return r}(e,t)})),o=function(e){return r.some((function(t){return function(e,t){for(var n in e){var r=e[n],o=void 0;if(null!=r&&((null!=(o="key"===n&&null!=t.key?t.key.toLowerCase():"which"===n?91===r&&93===t.which?91:t.which:t[n])||!1!==r)&&o!==r))return!1}return!0}(t,e)}))};return null==n?o:o(n)}function Da(e){return e=Ca(e),ba[e]||e.toUpperCase().charCodeAt(0)}function Ca(e){return e=e.toLowerCase(),e=ma[e]||e}var xa=Ea,Sa=function(e,t){return Ea(e,{byKey:!0},t)},Aa=/^\s+|\s+$/g,Oa=/^[-+]0x[0-9a-f]+$/i,ka=/^0b[01]+$/i,Ba=/^0o[0-7]+$/i,Fa=parseInt,_a="object"==typeof un&&un&&un.Object===Object&&un,Ta="object"==typeof self&&self&&self.Object===Object&&self,Pa=_a||Ta||Function("return this")(),ja=Object.prototype.toString,Na=Math.max,Ia=Math.min,Ra=function(){return Pa.Date.now()};function La(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ma(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==ja.call(e)}(e))return NaN;if(La(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=La(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(Aa,"");var n=ka.test(e);return n||Ba.test(e)?Fa(e.slice(2),n?2:8):Oa.test(e)?NaN:+e}var za,$a=function(e,t,n){var r,o,i,a,u,s,l=0,c=!1,f=!1,d=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function p(t){var n=r,i=o;return r=o=void 0,l=t,a=e.apply(i,n)}function h(e){return l=e,u=setTimeout(v,t),c?p(e):a}function g(e){var n=e-s;return void 0===s||n>=t||n<0||f&&e-l>=i}function v(){var e=Ra();if(g(e))return y(e);u=setTimeout(v,function(e){var n=t-(e-s);return f?Ia(n,i-(e-l)):n}(e))}function y(e){return u=void 0,d&&r?p(e):(r=o=void 0,a)}function m(){var e=Ra(),n=g(e);if(r=arguments,o=this,s=e,n){if(void 0===u)return h(s);if(f)return u=setTimeout(v,t),p(s)}return void 0===u&&(u=setTimeout(v,t)),a}return t=Ma(t)||0,La(n)&&(c=!!n.leading,i=(f="maxWait"in n)?Na(Ma(n.maxWait)||0,t):i,d="trailing"in n?!!n.trailing:d),m.cancel=function(){void 0!==u&&clearTimeout(u),l=0,r=s=o=u=void 0},m.flush=function(){return void 0===u?a:y(Ra())},m},Ha=sn((function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,o="[object Arguments]",i="[object Boolean]",a="[object Date]",u="[object Function]",s="[object GeneratorFunction]",l="[object Map]",c="[object Number]",f="[object Object]",d="[object Promise]",p="[object RegExp]",h="[object Set]",g="[object String]",v="[object Symbol]",y="[object WeakMap]",m="[object ArrayBuffer]",b="[object DataView]",w="[object Float32Array]",E="[object Float64Array]",D="[object Int8Array]",C="[object Int16Array]",x="[object Int32Array]",S="[object Uint8Array]",A="[object Uint8ClampedArray]",O="[object Uint16Array]",k="[object Uint32Array]",B=/\w*$/,F=/^\[object .+?Constructor\]$/,_=/^(?:0|[1-9]\d*)$/,T={};T[o]=T["[object Array]"]=T[m]=T[b]=T[i]=T[a]=T[w]=T[E]=T[D]=T[C]=T[x]=T[l]=T[c]=T[f]=T[p]=T[h]=T[g]=T[v]=T[S]=T[A]=T[O]=T[k]=!0,T["[object Error]"]=T[u]=T[y]=!1;var P="object"==typeof un&&un&&un.Object===Object&&un,j="object"==typeof self&&self&&self.Object===Object&&self,N=P||j||Function("return this")(),I=t&&!t.nodeType&&t,R=I&&e&&!e.nodeType&&e,L=R&&R.exports===I;function M(e,t){return e.set(t[0],t[1]),e}function z(e,t){return e.add(t),e}function $(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(Qh){}return t}function V(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function U(e,t){return function(n){return e(t(n))}}function W(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var q=Array.prototype,G=Function.prototype,K=Object.prototype,Y=N["__core-js_shared__"],X=function(){var e=/[^.]+$/.exec(Y&&Y.keys&&Y.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),Z=G.toString,J=K.hasOwnProperty,Q=K.toString,ee=RegExp("^"+Z.call(J).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=L?N.Buffer:void 0,ne=N.Symbol,re=N.Uint8Array,oe=U(Object.getPrototypeOf,Object),ie=Object.create,ae=K.propertyIsEnumerable,ue=q.splice,se=Object.getOwnPropertySymbols,le=te?te.isBuffer:void 0,ce=U(Object.keys,Object),fe=Ie(N,"DataView"),de=Ie(N,"Map"),pe=Ie(N,"Promise"),he=Ie(N,"Set"),ge=Ie(N,"WeakMap"),ve=Ie(Object,"create"),ye=$e(fe),me=$e(de),be=$e(pe),we=$e(he),Ee=$e(ge),De=ne?ne.prototype:void 0,Ce=De?De.valueOf:void 0;function xe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ae(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){this.__data__=new Se(e)}function ke(e,t){var n=Ve(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Ue(e)}(e)&&J.call(e,"callee")&&(!ae.call(e,"callee")||Q.call(e)==o)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,i=!!r;for(var a in e)!t&&!J.call(e,a)||i&&("length"==a||Me(a,r))||n.push(a);return n}function Be(e,t,n){var r=e[t];J.call(e,t)&&He(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Fe(e,t){for(var n=e.length;n--;)if(He(e[n][0],t))return n;return-1}function _e(e,t,n,r,d,y,F){var _;if(r&&(_=y?r(e,d,y,F):r(e)),void 0!==_)return _;if(!Ge(e))return e;var P=Ve(e);if(P){if(_=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&J.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,_)}else{var j=Le(e),N=j==u||j==s;if(We(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(j==f||j==o||N&&!y){if(H(e))return y?e:{};if(_=function(e){return"function"!=typeof e.constructor||ze(e)?{}:(t=oe(e),Ge(t)?ie(t):{});var t}(N?{}:e),!t)return function(e,t){return je(e,Re(e),t)}(e,function(e,t){return e&&je(t,Ke(t),e)}(_,e))}else{if(!T[j])return y?e:{};_=function(e,t,n,r){var o=e.constructor;switch(t){case m:return Pe(e);case i:case a:return new o(+e);case b:return function(e,t){var n=t?Pe(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case w:case E:case D:case C:case x:case S:case A:case O:case k:return function(e,t){var n=t?Pe(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case l:return function(e,t,n){return $(t?n(V(e),!0):V(e),M,new e.constructor)}(e,r,n);case c:case g:return new o(e);case p:return function(e){var t=new e.constructor(e.source,B.exec(e));return t.lastIndex=e.lastIndex,t}(e);case h:return function(e,t,n){return $(t?n(W(e),!0):W(e),z,new e.constructor)}(e,r,n);case v:return u=e,Ce?Object(Ce.call(u)):{}}var u}(e,j,_e,t)}}F||(F=new Oe);var I=F.get(e);if(I)return I;if(F.set(e,_),!P)var R=n?function(e){return function(e,t,n){var r=t(e);return Ve(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ke,Re)}(e):Ke(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(R||e,(function(o,i){R&&(o=e[i=o]),Be(_,i,_e(o,t,n,r,i,e,F))})),_}function Te(e){return!(!Ge(e)||function(e){return!!X&&X in e}(e))&&(qe(e)||H(e)?ee:F).test($e(e))}function Pe(e){var t=new e.constructor(e.byteLength);return new re(t).set(new re(e)),t}function je(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var a=t[o],u=r?r(n[a],e[a],a,n,e):void 0;Be(n,a,void 0===u?e[a]:u)}return n}function Ne(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ie(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Te(n)?n:void 0}xe.prototype.clear=function(){this.__data__=ve?ve(null):{}},xe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},xe.prototype.get=function(e){var t=this.__data__;if(ve){var r=t[e];return r===n?void 0:r}return J.call(t,e)?t[e]:void 0},xe.prototype.has=function(e){var t=this.__data__;return ve?void 0!==t[e]:J.call(t,e)},xe.prototype.set=function(e,t){return this.__data__[e]=ve&&void 0===t?n:t,this},Se.prototype.clear=function(){this.__data__=[]},Se.prototype.delete=function(e){var t=this.__data__,n=Fe(t,e);return!(n<0)&&(n==t.length-1?t.pop():ue.call(t,n,1),!0)},Se.prototype.get=function(e){var t=this.__data__,n=Fe(t,e);return n<0?void 0:t[n][1]},Se.prototype.has=function(e){return Fe(this.__data__,e)>-1},Se.prototype.set=function(e,t){var n=this.__data__,r=Fe(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},Ae.prototype.clear=function(){this.__data__={hash:new xe,map:new(de||Se),string:new xe}},Ae.prototype.delete=function(e){return Ne(this,e).delete(e)},Ae.prototype.get=function(e){return Ne(this,e).get(e)},Ae.prototype.has=function(e){return Ne(this,e).has(e)},Ae.prototype.set=function(e,t){return Ne(this,e).set(e,t),this},Oe.prototype.clear=function(){this.__data__=new Se},Oe.prototype.delete=function(e){return this.__data__.delete(e)},Oe.prototype.get=function(e){return this.__data__.get(e)},Oe.prototype.has=function(e){return this.__data__.has(e)},Oe.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Se){var r=n.__data__;if(!de||r.length<199)return r.push([e,t]),this;n=this.__data__=new Ae(r)}return n.set(e,t),this};var Re=se?U(se,Object):function(){return[]},Le=function(e){return Q.call(e)};function Me(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||_.test(e))&&e>-1&&e%1==0&&e<t}function ze(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||K)}function $e(e){if(null!=e){try{return Z.call(e)}catch(Qh){}try{return e+""}catch(Qh){}}return""}function He(e,t){return e===t||e!=e&&t!=t}(fe&&Le(new fe(new ArrayBuffer(1)))!=b||de&&Le(new de)!=l||pe&&Le(pe.resolve())!=d||he&&Le(new he)!=h||ge&&Le(new ge)!=y)&&(Le=function(e){var t=Q.call(e),n=t==f?e.constructor:void 0,r=n?$e(n):void 0;if(r)switch(r){case ye:return b;case me:return l;case be:return d;case we:return h;case Ee:return y}return t});var Ve=Array.isArray;function Ue(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}(e.length)&&!qe(e)}var We=le||function(){return!1};function qe(e){var t=Ge(e)?Q.call(e):"";return t==u||t==s}function Ge(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ke(e){return Ue(e)?ke(e):function(e){if(!ze(e))return ce(e);var t=[];for(var n in Object(e))J.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return _e(e,!0,!0)}}));function Va(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Ua=0;function Wa(e){return"__private_"+Ua+++"_"+e}function qa(e,t,n){const r=[];return e.forEach((e=>"string"!=typeof e?r.push(e):t[Symbol.split](e).forEach(((e,t,o)=>{""!==e&&r.push(e),t<o.length-1&&r.push(n)})))),r}
/**
 * Takes a string with placeholder variables like `%{smart_count} file selected`
 * and replaces it with values from options `{smart_count: 5}`
 *
 * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE
 * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299
 *
 * @param {string} phrase that needs interpolation, with placeholders
 * @param {object} options with values that will be used to replace placeholders
 * @returns {any[]} interpolated
 */function Ga(e,t){const n=/\$/g;let r=[e];if(null==t)return r;for(const o of Object.keys(t))if("_"!==o){let e=t[o];"string"==typeof e&&(e=n[Symbol.replace](e,"$$$$")),r=qa(r,new RegExp(`%\\{${o}\\}`,"g"),e)}return r}var Ka=(za=Wa("apply"),class{constructor(e){Object.defineProperty(this,za,{value:Ya}),this.locale={strings:{},pluralize:e=>1===e?0:1},Array.isArray(e)?e.forEach(Va(this,za)[za],this):Va(this,za)[za](e)}translate(e,t){return this.translateArray(e,t).join("")}translateArray(e,t){if(!function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}(this.locale.strings,e))throw new Error(`missing string: ${e}`);const n=this.locale.strings[e];if("object"==typeof n){if(t&&void 0!==t.smart_count){return Ga(n[this.locale.pluralize(t.smart_count)],t)}throw new Error("Attempted to use a string with plural forms, but no value was given for %{smart_count}")}return Ga(n,t)}});function Ya(e){if(null==e||!e.strings)return;const t=this.locale;this.locale={...t,strings:{...t.strings,...e.strings}},this.locale.pluralize=e.pluralize||t.pluralize}var Xa=function(){var e={},t=e._fns={};return e.emit=function(e,n,r,o,i,a,u){var s=function(e){var n=t[e]?t[e]:[],r=e.indexOf(":"),o=-1===r?[e]:[e.substring(0,r),e.substring(r+1)],i=Object.keys(t),a=0,u=i.length;for(;a<u;a++){var s=i[a];if("*"===s&&(n=n.concat(t[s])),2===o.length&&o[0]===s){n=n.concat(t[s]);break}}return n}(e);s.length&&function(e,t,n){var r=0,o=t.length;for(;r<o&&t[r];r++)t[r].event=e,t[r].apply(t[r],n)}(e,s,[n,r,o,i,a,u])},e.on=function(e,n){t[e]||(t[e]=[]),t[e].push(n)},e.once=function(t,n){this.on(t,(function r(){n.apply(this,arguments),e.off(t,r)}))},e.off=function(e,t){var n=[];if(e&&t)for(var r=this._fns[e],o=0,i=r?r.length:0;o<i;o++)r[o]!==t&&n.push(r[o]);n.length?this._fns[e]=n:delete this._fns[e]},e};var Za={urlAlphabet:"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"};let{urlAlphabet:Ja}=Za;if("undefined"!=typeof navigator&&"ReactNative"===navigator.product&&"undefined"==typeof crypto)throw new Error("React Native does not have a built-in secure random generator. If you don’t need unpredictable IDs use `nanoid/non-secure`. For secure IDs, import `react-native-get-random-values` before Nano ID.");if("undefined"!=typeof msCrypto&&"undefined"==typeof crypto)throw new Error("Import file with `if (!window.crypto) window.crypto = window.msCrypto` before importing Nano ID to fix IE 11 support");if("undefined"==typeof crypto)throw new Error("Your browser does not have secure random generator. If you don’t need unpredictable IDs, you can use nanoid/non-secure.");let Qa=e=>crypto.getRandomValues(new Uint8Array(e)),eu=(e,t,n)=>{let r=(2<<Math.log(e.length-1)/Math.LN2)-1,o=-~(1.6*r*t/e.length);return()=>{let i="";for(;;){let a=n(o),u=o;for(;u--;)if(i+=e[a[u]&r]||"",i.length===t)return i}}};var tu={nanoid:(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return t},customAlphabet:(e,t)=>eu(e,t,Qa),customRandom:eu,urlAlphabet:Ja,random:Qa},nu=function(e){if("number"!=typeof e||isNaN(e))throw new TypeError("Expected a number, got "+typeof e);var t=e<0,n=["B","KB","MB","GB","TB","PB","EB","ZB","YB"];if(t&&(e=-e),e<1)return(t?"-":"")+e+" B";var r=Math.min(Math.floor(Math.log(e)/Math.log(1024)),n.length-1);e=Number(e/Math.pow(1024,r));var o=n[r];return e>=10||e%1==0?(t?"-":"")+e.toFixed(0)+" "+o:(t?"-":"")+e.toFixed(1)+" "+o};function ru(e,t){this.text=e=e||"",this.hasWild=~e.indexOf("*"),this.separator=t,this.parts=e.split(t)}ru.prototype.match=function(e){var t,n,r=!0,o=this.parts,i=o.length;if("string"==typeof e||e instanceof String)if(this.hasWild||this.text==e){for(n=(e||"").split(this.separator),t=0;r&&t<i;t++)"*"!==o[t]&&(r=t<n.length&&o[t]===n[t]);r=r&&n}else r=!1;else if("function"==typeof e.splice)for(r=[],t=e.length;t--;)this.match(e[t])&&(r[r.length]=e[t]);else if("object"==typeof e)for(var a in r={},e)this.match(a)&&(r[a]=e[a]);return r};var ou=/[\/\+\.]/,iu=function(e,t){function n(t){var n=function(e,t,n){var r=new ru(e,n||/[\/\.]/);return void 0!==t?r.match(t):r}(t,e,ou);return n&&n.length>=2}return t?n(t.split(";")[0]):n};var au=0;function uu(e){return"__private_"+au+++"_"+e}var su=uu("publish");class lu{constructor(){Object.defineProperty(this,su,{value:cu}),this.state={},this.callbacks=[]}getState(){return this.state}setState(e){const t={...this.state},n={...this.state,...e};this.state=n,function(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}(this,su)[su](t,n,e)}subscribe(e){return this.callbacks.push(e),()=>{this.callbacks.splice(this.callbacks.indexOf(e),1)}}}function cu(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];this.callbacks.forEach((e=>{e(...t)}))}lu.VERSION="2.0.3";var fu=function(e){const t=e.lastIndexOf(".");return-1===t||t===e.length-1?{name:e,extension:void 0}:{name:e.slice(0,t),extension:e.slice(t+1)}},du={md:"text/markdown",markdown:"text/markdown",mp4:"video/mp4",mp3:"audio/mp3",svg:"image/svg+xml",jpg:"image/jpeg",png:"image/png",gif:"image/gif",heic:"image/heic",heif:"image/heif",yaml:"text/yaml",yml:"text/yaml",csv:"text/csv",tsv:"text/tab-separated-values",tab:"text/tab-separated-values",avi:"video/x-msvideo",mks:"video/x-matroska",mkv:"video/x-matroska",mov:"video/quicktime",doc:"application/msword",docm:"application/vnd.ms-word.document.macroenabled.12",docx:"application/vnd.openxmlformats-officedocument.wordprocessingml.document",dot:"application/msword",dotm:"application/vnd.ms-word.template.macroenabled.12",dotx:"application/vnd.openxmlformats-officedocument.wordprocessingml.template",xla:"application/vnd.ms-excel",xlam:"application/vnd.ms-excel.addin.macroenabled.12",xlc:"application/vnd.ms-excel",xlf:"application/x-xliff+xml",xlm:"application/vnd.ms-excel",xls:"application/vnd.ms-excel",xlsb:"application/vnd.ms-excel.sheet.binary.macroenabled.12",xlsm:"application/vnd.ms-excel.sheet.macroenabled.12",xlsx:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",xlt:"application/vnd.ms-excel",xltm:"application/vnd.ms-excel.template.macroenabled.12",xltx:"application/vnd.openxmlformats-officedocument.spreadsheetml.template",xlw:"application/vnd.ms-excel",txt:"text/plain",text:"text/plain",conf:"text/plain",log:"text/plain",pdf:"application/pdf",zip:"application/zip","7z":"application/x-7z-compressed",rar:"application/x-rar-compressed",tar:"application/x-tar",gz:"application/gzip",dmg:"application/x-apple-diskimage"};function pu(e){let t="";return e.replace(/[^A-Z0-9]/gi,(e=>(t+=`-${function(e){return e.charCodeAt(0).toString(32)}(e)}`,"/")))+t}var hu=function(e){if(null==e&&(e="undefined"!=typeof navigator?navigator.userAgent:null),!e)return!0;const t=/Edge\/(\d+\.\d+)/.exec(e);if(!t)return!0;const n=t[1];let[r,o]=n.split(".");return r=parseInt(r,10),o=parseInt(o,10),r<15||15===r&&o<15063||(r>18||18===r&&o>=18218)};function gu(e){return e<10?`0${e}`:e.toString()}var vu=function(){const e=new Date;return`${gu(e.getHours())}:${gu(e.getMinutes())}:${gu(e.getSeconds())}`};var yu={justErrorsLogger:{debug:()=>{},warn:()=>{},error:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.error(`[Uppy] [${vu()}]`,...t)}},debugLogger:{debug:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.debug(`[Uppy] [${vu()}]`,...t)},warn:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.warn(`[Uppy] [${vu()}]`,...t)},error:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return console.error(`[Uppy] [${vu()}]`,...t)}}},mu={strings:{addBulkFilesFailed:{0:"Failed to add %{smart_count} file due to an internal error",1:"Failed to add %{smart_count} files due to internal errors"},youCanOnlyUploadX:{0:"You can only upload %{smart_count} file",1:"You can only upload %{smart_count} files"},youHaveToAtLeastSelectX:{0:"You have to select at least %{smart_count} file",1:"You have to select at least %{smart_count} files"},exceedsSize:"%{file} exceeds maximum allowed size of %{size}",missingRequiredMetaField:"Missing required meta fields",missingRequiredMetaFieldOnFile:"Missing required meta fields in %{fileName}",inferiorSize:"This file is smaller than the allowed size of %{size}",youCanOnlyUploadFileTypes:"You can only upload: %{types}",noMoreFilesAllowed:"Cannot add more files",noDuplicates:"Cannot add the duplicate file '%{fileName}', it already exists",companionError:"Connection with Companion failed",authAborted:"Authentication aborted",companionUnauthorizeHint:"To unauthorize to your %{provider} account, please go to %{url}",failedToUpload:"Failed to upload %{file}",noInternetConnection:"No Internet connection",connectedToInternet:"Connected to the Internet",noFilesFound:"You have no files or folders here",selectX:{0:"Select %{smart_count}",1:"Select %{smart_count}"},allFilesFromFolderNamed:"All files from folder %{name}",openFolderNamed:"Open folder %{name}",cancel:"Cancel",logOut:"Log out",filter:"Filter",resetFilter:"Reset filter",loading:"Loading...",authenticateWithTitle:"Please authenticate with %{pluginName} to select files",authenticateWith:"Connect to %{pluginName}",signInWithGoogle:"Sign in with Google",searchImages:"Search for images",enterTextToSearch:"Enter text to search for images",backToSearch:"Back to Search",emptyFolderAdded:"No files were added from empty folder",folderAlreadyAdded:'The folder "%{folder}" was already added',folderAdded:{0:"Added %{smart_count} file from %{folder}",1:"Added %{smart_count} files from %{folder}"}}},bu=tu;let wu,Eu;function Du(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Cu=0;function xu(e){return"__private_"+Cu+++"_"+e}const{nanoid:Su}=bu,{justErrorsLogger:Au,debugLogger:Ou}=yu;class ku extends Error{constructor(){super(...arguments),this.isRestriction=!0}}"undefined"==typeof AggregateError&&(globalThis.AggregateError=class extends Error{constructor(e,t){super(t),this.errors=e}});class Bu extends AggregateError{constructor(){super(...arguments),this.isRestriction=!0}}var Fu=xu("plugins"),_u=xu("storeUnsubscribe"),Tu=xu("emitter"),Pu=xu("preProcessors"),ju=xu("uploaders"),Nu=xu("postProcessors"),Iu=xu("checkRestrictions"),Ru=xu("checkMinNumberOfFiles"),Lu=xu("checkRequiredMetaFieldsOnFile"),Mu=xu("checkRequiredMetaFields"),zu=xu("showOrLogErrorAndThrow"),$u=xu("assertNewUploadAllowed"),Hu=xu("checkAndCreateFileStateObject"),Vu=xu("startIfAutoProceed"),Uu=xu("addListeners"),Wu=xu("updateOnlineStatus"),qu=xu("createUpload"),Gu=xu("getUpload"),Ku=xu("removeUpload"),Yu=xu("runUpload");wu=Symbol.for("uppy test: getPlugins"),Eu=Symbol.for("uppy test: createUpload");class Xu{constructor(e){Object.defineProperty(this,Yu,{value:ls}),Object.defineProperty(this,Ku,{value:ss}),Object.defineProperty(this,Gu,{value:us}),Object.defineProperty(this,qu,{value:as}),Object.defineProperty(this,Uu,{value:is}),Object.defineProperty(this,Vu,{value:os}),Object.defineProperty(this,Hu,{value:rs}),Object.defineProperty(this,$u,{value:ns}),Object.defineProperty(this,zu,{value:ts}),Object.defineProperty(this,Mu,{value:es}),Object.defineProperty(this,Lu,{value:Qu}),Object.defineProperty(this,Ru,{value:Ju}),Object.defineProperty(this,Iu,{value:Zu}),Object.defineProperty(this,Fu,{writable:!0,value:Object.create(null)}),Object.defineProperty(this,_u,{writable:!0,value:void 0}),Object.defineProperty(this,Tu,{writable:!0,value:Xa()}),Object.defineProperty(this,Pu,{writable:!0,value:new Set}),Object.defineProperty(this,ju,{writable:!0,value:new Set}),Object.defineProperty(this,Nu,{writable:!0,value:new Set}),Object.defineProperty(this,Wu,{writable:!0,value:this.updateOnlineStatus.bind(this)}),this.defaultLocale=mu;const t={id:"uppy",autoProceed:!1,allowMultipleUploads:!0,allowMultipleUploadBatches:!0,debug:!1,restrictions:{maxFileSize:null,minFileSize:null,maxTotalFileSize:null,maxNumberOfFiles:null,minNumberOfFiles:null,allowedFileTypes:null,requiredMetaFields:[]},meta:{},onBeforeFileAdded:e=>e,onBeforeUpload:e=>e,store:new lu,logger:Au,infoTimeout:5e3};if(this.opts={...t,...e,restrictions:{...t.restrictions,...e&&e.restrictions}},e&&e.logger&&e.debug?this.log("You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.","warning"):e&&e.debug&&(this.opts.logger=Ou),this.log(`Using Core v${this.constructor.VERSION}`),this.opts.restrictions.allowedFileTypes&&null!==this.opts.restrictions.allowedFileTypes&&!Array.isArray(this.opts.restrictions.allowedFileTypes))throw new TypeError("`restrictions.allowedFileTypes` must be an array");this.i18nInit(),this.calculateProgress=qo(this.calculateProgress.bind(this),500,{leading:!0,trailing:!0}),this.store=this.opts.store,this.setState({plugins:{},files:{},currentUploads:{},allowNewUpload:!0,capabilities:{uploadProgress:hu(),individualCancellation:!0,resumableUploads:!1},totalProgress:0,meta:{...this.opts.meta},info:[],recoveredState:null}),Du(this,_u)[_u]=this.store.subscribe(((e,t,n)=>{this.emit("state-update",e,t,n),this.updateAll(t)})),this.opts.debug&&"undefined"!=typeof window&&(window[this.opts.id]=this),Du(this,Uu)[Uu]()}emit(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];Du(this,Tu)[Tu].emit(e,...n)}on(e,t){return Du(this,Tu)[Tu].on(e,t),this}once(e,t){return Du(this,Tu)[Tu].once(e,t),this}off(e,t){return Du(this,Tu)[Tu].off(e,t),this}updateAll(e){this.iteratePlugins((t=>{t.update(e)}))}setState(e){this.store.setState(e)}getState(){return this.store.getState()}get state(){return this.getState()}setFileState(e,t){if(!this.getState().files[e])throw new Error(`Can’t set state for ${e} (the file could have been removed)`);this.setState({files:{...this.getState().files,[e]:{...this.getState().files[e],...t}}})}i18nInit(){const e=new Ka([this.defaultLocale,this.opts.locale]);this.i18n=e.translate.bind(e),this.i18nArray=e.translateArray.bind(e),this.locale=e.locale}setOptions(e){this.opts={...this.opts,...e,restrictions:{...this.opts.restrictions,...e&&e.restrictions}},e.meta&&this.setMeta(e.meta),this.i18nInit(),e.locale&&this.iteratePlugins((e=>{e.setOptions()})),this.setState()}resetProgress(){const e={percentage:0,bytesUploaded:0,uploadComplete:!1,uploadStarted:null},t={...this.getState().files},n={};Object.keys(t).forEach((r=>{const o={...t[r]};o.progress={...o.progress,...e},n[r]=o})),this.setState({files:n,totalProgress:0}),this.emit("reset-progress")}addPreProcessor(e){Du(this,Pu)[Pu].add(e)}removePreProcessor(e){return Du(this,Pu)[Pu].delete(e)}addPostProcessor(e){Du(this,Nu)[Nu].add(e)}removePostProcessor(e){return Du(this,Nu)[Nu].delete(e)}addUploader(e){Du(this,ju)[ju].add(e)}removeUploader(e){return Du(this,ju)[ju].delete(e)}setMeta(e){const t={...this.getState().meta,...e},n={...this.getState().files};Object.keys(n).forEach((t=>{n[t]={...n[t],meta:{...n[t].meta,...e}}})),this.log("Adding metadata:"),this.log(e),this.setState({meta:t,files:n})}setFileMeta(e,t){const n={...this.getState().files};if(!n[e])return void this.log("Was trying to set metadata for a file that has been removed: ",e);const r={...n[e].meta,...t};n[e]={...n[e],meta:r},this.setState({files:n})}getFile(e){return this.getState().files[e]}getFiles(){const{files:e}=this.getState();return Object.values(e)}getObjectOfFilesPerState(){const{files:e,totalProgress:t,error:n}=this.getState(),r=Object.values(e),o=r.filter((e=>{let{progress:t}=e;return!t.uploadComplete&&t.uploadStarted})),i=r.filter((e=>!e.progress.uploadStarted)),a=r.filter((e=>e.progress.uploadStarted||e.progress.preprocess||e.progress.postprocess)),u=r.filter((e=>e.progress.uploadStarted)),s=r.filter((e=>e.isPaused)),l=r.filter((e=>e.progress.uploadComplete)),c=r.filter((e=>e.error)),f=o.filter((e=>!e.isPaused)),d=r.filter((e=>e.progress.preprocess||e.progress.postprocess));return{newFiles:i,startedFiles:a,uploadStartedFiles:u,pausedFiles:s,completeFiles:l,erroredFiles:c,inProgressFiles:o,inProgressNotPausedFiles:f,processingFiles:d,isUploadStarted:u.length>0,isAllComplete:100===t&&l.length===r.length&&0===d.length,isAllErrored:!!n&&c.length===r.length,isAllPaused:0!==o.length&&s.length===o.length,isUploadInProgress:o.length>0,isSomeGhost:r.some((e=>e.isGhost))}}validateRestrictions(e,t){try{return Du(this,Iu)[Iu](e,t),{result:!0}}catch(n){return{result:!1,reason:n.message}}}checkIfFileAlreadyExists(e){const{files:t}=this.getState();return!(!t[e]||t[e].isGhost)}addFile(e){Du(this,$u)[$u](e);const{files:t}=this.getState();let n=Du(this,Hu)[Hu](t,e);return t[n.id]&&t[n.id].isGhost&&(n={...t[n.id],data:e.data,isGhost:!1},this.log(`Replaced the blob in the restored ghost file: ${n.name}, ${n.id}`)),this.setState({files:{...t,[n.id]:n}}),this.emit("file-added",n),this.emit("files-added",[n]),this.log(`Added file: ${n.name}, ${n.id}, mime type: ${n.type}`),Du(this,Vu)[Vu](),n.id}addFiles(e){Du(this,$u)[$u]();const t={...this.getState().files},n=[],r=[];for(let i=0;i<e.length;i++)try{let r=Du(this,Hu)[Hu](t,e[i]);t[r.id]&&t[r.id].isGhost&&(r={...t[r.id],data:e[i].data,isGhost:!1},this.log(`Replaced blob in a ghost file: ${r.name}, ${r.id}`)),t[r.id]=r,n.push(r)}catch(o){o.isRestriction||r.push(o)}if(this.setState({files:t}),n.forEach((e=>{this.emit("file-added",e)})),this.emit("files-added",n),n.length>5?this.log(`Added batch of ${n.length} files`):Object.keys(n).forEach((e=>{this.log(`Added file: ${n[e].name}\n id: ${n[e].id}\n type: ${n[e].type}`)})),n.length>0&&Du(this,Vu)[Vu](),r.length>0){let e="Multiple errors occurred while adding files:\n";if(r.forEach((t=>{e+=`\n * ${t.message}`})),this.info({message:this.i18n("addBulkFilesFailed",{smart_count:r.length}),details:e},"error",this.opts.infoTimeout),"function"==typeof AggregateError)throw new AggregateError(r,e);{const t=new Error(e);throw t.errors=r,t}}}removeFiles(e,t){const{files:n,currentUploads:r}=this.getState(),o={...n},i={...r},a=Object.create(null);function u(e){return void 0===a[e]}e.forEach((e=>{n[e]&&(a[e]=n[e],delete o[e])})),Object.keys(i).forEach((e=>{const t=r[e].fileIDs.filter(u);0!==t.length?i[e]={...r[e],fileIDs:t}:delete i[e]}));const s={currentUploads:i,files:o};0===Object.keys(o).length&&(s.allowNewUpload=!0,s.error=null,s.recoveredState=null),this.setState(s),this.calculateTotalProgress();const l=Object.keys(a);l.forEach((e=>{this.emit("file-removed",a[e],t)})),l.length>5?this.log(`Removed ${l.length} files`):this.log(`Removed files: ${l.join(", ")}`)}removeFile(e,t){void 0===t&&(t=null),this.removeFiles([e],t)}pauseResume(e){if(!this.getState().capabilities.resumableUploads||this.getFile(e).uploadComplete)return;const t=!(this.getFile(e).isPaused||!1);return this.setFileState(e,{isPaused:t}),this.emit("upload-pause",e,t),t}pauseAll(){const e={...this.getState().files};Object.keys(e).filter((t=>!e[t].progress.uploadComplete&&e[t].progress.uploadStarted)).forEach((t=>{const n={...e[t],isPaused:!0};e[t]=n})),this.setState({files:e}),this.emit("pause-all")}resumeAll(){const e={...this.getState().files};Object.keys(e).filter((t=>!e[t].progress.uploadComplete&&e[t].progress.uploadStarted)).forEach((t=>{const n={...e[t],isPaused:!1,error:null};e[t]=n})),this.setState({files:e}),this.emit("resume-all")}retryAll(){const e={...this.getState().files},t=Object.keys(e).filter((t=>e[t].error));if(t.forEach((t=>{const n={...e[t],isPaused:!1,error:null};e[t]=n})),this.setState({files:e,error:null}),this.emit("retry-all",t),0===t.length)return Promise.resolve({successful:[],failed:[]});const n=Du(this,qu)[qu](t,{forceAllowNewUpload:!0});return Du(this,Yu)[Yu](n)}cancelAll(){this.emit("cancel-all");const{files:e}=this.getState(),t=Object.keys(e);t.length&&this.removeFiles(t,"cancel-all"),this.setState({totalProgress:0,error:null,recoveredState:null})}retryUpload(e){this.setFileState(e,{error:null,isPaused:!1}),this.emit("upload-retry",e);const t=Du(this,qu)[qu]([e],{forceAllowNewUpload:!0});return Du(this,Yu)[Yu](t)}reset(){this.cancelAll()}logout(){this.iteratePlugins((e=>{e.provider&&e.provider.logout&&e.provider.logout()}))}calculateProgress(e,t){if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const n=Number.isFinite(t.bytesTotal)&&t.bytesTotal>0;this.setFileState(e.id,{progress:{...this.getFile(e.id).progress,bytesUploaded:t.bytesUploaded,bytesTotal:t.bytesTotal,percentage:n?Math.round(t.bytesUploaded/t.bytesTotal*100):0}}),this.calculateTotalProgress()}calculateTotalProgress(){const e=this.getFiles().filter((e=>e.progress.uploadStarted||e.progress.preprocess||e.progress.postprocess));if(0===e.length)return this.emit("progress",0),void this.setState({totalProgress:0});const t=e.filter((e=>null!=e.progress.bytesTotal)),n=e.filter((e=>null==e.progress.bytesTotal));if(0===t.length){const t=100*e.length,r=n.reduce(((e,t)=>e+t.progress.percentage),0),o=Math.round(r/t*100);return void this.setState({totalProgress:o})}let r=t.reduce(((e,t)=>e+t.progress.bytesTotal),0);const o=r/t.length;r+=o*n.length;let i=0;t.forEach((e=>{i+=e.progress.bytesUploaded})),n.forEach((e=>{i+=o*(e.progress.percentage||0)/100}));let a=0===r?0:Math.round(i/r*100);a>100&&(a=100),this.setState({totalProgress:a}),this.emit("progress",a)}updateOnlineStatus(){void 0===window.navigator.onLine||window.navigator.onLine?(this.emit("is-online"),this.wasOffline&&(this.emit("back-online"),this.info(this.i18n("connectedToInternet"),"success",3e3),this.wasOffline=!1)):(this.emit("is-offline"),this.info(this.i18n("noInternetConnection"),"error",0),this.wasOffline=!0)}getID(){return this.opts.id}use(e,t){if("function"!=typeof e){throw new TypeError(`Expected a plugin class, but got ${null===e?"null":typeof e}. Please verify that the plugin was imported and spelled correctly.`)}const n=new e(this,t),r=n.id;if(!r)throw new Error("Your plugin must have an id");if(!n.type)throw new Error("Your plugin must have a type");const o=this.getPlugin(r);if(o){const e=`Already found a plugin named '${o.id}'. Tried to use: '${r}'.\nUppy plugins must have unique \`id\` options. See https://uppy.io/docs/plugins/#id.`;throw new Error(e)}return e.VERSION&&this.log(`Using ${r} v${e.VERSION}`),n.type in Du(this,Fu)[Fu]?Du(this,Fu)[Fu][n.type].push(n):Du(this,Fu)[Fu][n.type]=[n],n.install(),this}getPlugin(e){for(const t of Object.values(Du(this,Fu)[Fu])){const n=t.find((t=>t.id===e));if(null!=n)return n}}[wu](e){return Du(this,Fu)[Fu][e]}iteratePlugins(e){Object.values(Du(this,Fu)[Fu]).flat(1).forEach(e)}removePlugin(e){this.log(`Removing plugin ${e.id}`),this.emit("plugin-remove",e),e.uninstall&&e.uninstall();const t=Du(this,Fu)[Fu][e.type],n=t.findIndex((t=>t.id===e.id));-1!==n&&t.splice(n,1);const r={plugins:{...this.getState().plugins,[e.id]:void 0}};this.setState(r)}close(){this.log(`Closing Uppy instance ${this.opts.id}: removing all files and uninstalling plugins`),this.reset(),Du(this,_u)[_u](),this.iteratePlugins((e=>{this.removePlugin(e)})),"undefined"!=typeof window&&window.removeEventListener&&(window.removeEventListener("online",Du(this,Wu)[Wu]),window.removeEventListener("offline",Du(this,Wu)[Wu]))}hideInfo(){const{info:e}=this.getState();this.setState({info:e.slice(1)}),this.emit("info-hidden")}info(e,t,n){void 0===t&&(t="info"),void 0===n&&(n=3e3);const r="object"==typeof e;this.setState({info:[...this.getState().info,{type:t,message:r?e.message:e,details:r?e.details:null}]}),setTimeout((()=>this.hideInfo()),n),this.emit("info-visible")}log(e,t){const{logger:n}=this.opts;switch(t){case"error":n.error(e);break;case"warning":n.warn(e);break;default:n.debug(e)}}restore(e){return this.log(`Core: attempting to restore upload "${e}"`),this.getState().currentUploads[e]?Du(this,Yu)[Yu](e):(Du(this,Ku)[Ku](e),Promise.reject(new Error("Nonexistent upload")))}[Eu](){return Du(this,qu)[qu](...arguments)}addResultData(e,t){if(!Du(this,Gu)[Gu](e))return void this.log(`Not setting result for an upload that has been removed: ${e}`);const{currentUploads:n}=this.getState(),r={...n[e],result:{...n[e].result,...t}};this.setState({currentUploads:{...n,[e]:r}})}upload(){var e;null!=(e=Du(this,Fu)[Fu].uploader)&&e.length||this.log("No uploader type plugins are used","warning");let{files:t}=this.getState();const n=this.opts.onBeforeUpload(t);return!1===n?Promise.reject(new Error("Not starting the upload because onBeforeUpload returned false")):(n&&"object"==typeof n&&(t=n,this.setState({files:t})),Promise.resolve().then((()=>{Du(this,Ru)[Ru](t),Du(this,Mu)[Mu](t)})).catch((e=>{Du(this,zu)[zu](e)})).then((()=>{const{currentUploads:e}=this.getState(),n=Object.values(e).flatMap((e=>e.fileIDs)),r=[];Object.keys(t).forEach((e=>{const t=this.getFile(e);t.progress.uploadStarted||-1!==n.indexOf(e)||r.push(t.id)}));const o=Du(this,qu)[qu](r);return Du(this,Yu)[Yu](o)})).catch((e=>{Du(this,zu)[zu](e,{showInformer:!1})})))}}function Zu(e,t){void 0===t&&(t=this.getFiles());const{maxFileSize:n,minFileSize:r,maxTotalFileSize:o,maxNumberOfFiles:i,allowedFileTypes:a}=this.opts.restrictions;if(i&&t.length+1>i)throw new ku(`${this.i18n("youCanOnlyUploadX",{smart_count:i})}`);if(a){if(!a.some((t=>t.indexOf("/")>-1?!!e.type&&iu(e.type.replace(/;.*?$/,""),t):!("."!==t[0]||!e.extension)&&e.extension.toLowerCase()===t.substr(1).toLowerCase()))){const e=a.join(", ");throw new ku(this.i18n("youCanOnlyUploadFileTypes",{types:e}))}}if(o&&null!=e.size){let n=0;if(n+=e.size,t.forEach((e=>{n+=e.size})),n>o)throw new ku(this.i18n("exceedsSize",{size:nu(o),file:e.name}))}if(n&&null!=e.size&&e.size>n)throw new ku(this.i18n("exceedsSize",{size:nu(n),file:e.name}));if(r&&null!=e.size&&e.size<r)throw new ku(this.i18n("inferiorSize",{size:nu(r)}))}function Ju(e){const{minNumberOfFiles:t}=this.opts.restrictions;if(Object.keys(e).length<t)throw new ku(`${this.i18n("youHaveToAtLeastSelectX",{smart_count:t})}`)}function Qu(e){const{requiredMetaFields:t}=this.opts.restrictions,{hasOwnProperty:n}=Object.prototype,r=[],o=[];for(let i=0;i<t.length;i++)if(!n.call(e.meta,t[i])||""===e.meta[t[i]]){const n=new ku(`${this.i18n("missingRequiredMetaFieldOnFile",{fileName:e.name})}`);r.push(n),o.push(t[i]),Du(this,zu)[zu](n,{file:e,showInformer:!1,throwErr:!1})}return this.setFileState(e.id,{missingRequiredMetaFields:o}),r}function es(e){const t=Object.keys(e).flatMap((e=>{const t=this.getFile(e);return Du(this,Lu)[Lu](t)}));if(t.length)throw new Bu(t,`${this.i18n("missingRequiredMetaField")}`)}function ts(e,t){let{showInformer:n=!0,file:r=null,throwErr:o=!0}=void 0===t?{}:t;const i="object"==typeof e?e.message:e,a="object"==typeof e&&e.details?e.details:"";let u=i;if(a&&(u+=` ${a}`),e.isRestriction?(this.log(u),this.emit("restriction-failed",r,e)):this.log(u,"error"),n&&this.info({message:i,details:a},"error",this.opts.infoTimeout),o)throw"object"==typeof e?e:new Error(e)}function ns(e){const{allowNewUpload:t}=this.getState();!1===t&&Du(this,zu)[zu](new ku(this.i18n("noMoreFilesAllowed")),{file:e})}function rs(e,t){const n=function(e){var t;if(e.type)return e.type;const n=e.name?null==(t=fu(e.name).extension)?void 0:t.toLowerCase():null;return n&&n in du?du[n]:"application/octet-stream"}(t),r=function(e,t){return t.name?t.name:"image"===e.split("/")[0]?`${e.split("/")[0]}.${e.split("/")[1]}`:"noname"}(n,t),o=fu(r).extension,i=Boolean(t.isRemote),a=function(e){let t="uppy";return"string"==typeof e.name&&(t+=`-${pu(e.name.toLowerCase())}`),void 0!==e.type&&(t+=`-${e.type}`),e.meta&&"string"==typeof e.meta.relativePath&&(t+=`-${pu(e.meta.relativePath.toLowerCase())}`),void 0!==e.data.size&&(t+=`-${e.data.size}`),void 0!==e.data.lastModified&&(t+=`-${e.data.lastModified}`),t}({...t,type:n});if(this.checkIfFileAlreadyExists(a)){const e=new ku(this.i18n("noDuplicates",{fileName:r}));Du(this,zu)[zu](e,{file:t})}const u=t.meta||{};u.name=r,u.type=n;const s=Number.isFinite(t.data.size)?t.data.size:null;let l={source:t.source||"",id:a,name:r,extension:o||"",meta:{...this.getState().meta,...u},type:n,data:t.data,progress:{percentage:0,bytesUploaded:0,bytesTotal:s,uploadComplete:!1,uploadStarted:null},size:s,isRemote:i,remote:t.remote||"",preview:t.preview};const c=this.opts.onBeforeFileAdded(l,e);!1===c?Du(this,zu)[zu](new ku("Cannot add the file because onBeforeFileAdded returned false."),{showInformer:!1,fileDescriptor:t}):"object"==typeof c&&null!==c&&(l=c);try{const t=Object.keys(e).map((t=>e[t]));Du(this,Iu)[Iu](l,t)}catch(f){Du(this,zu)[zu](f,{file:l})}return l}function os(){this.opts.autoProceed&&!this.scheduledAutoProceed&&(this.scheduledAutoProceed=setTimeout((()=>{this.scheduledAutoProceed=null,this.upload().catch((e=>{e.isRestriction||this.log(e.stack||e.message||e)}))}),4))}function is(){const e=(e,t,n)=>{let r=e.message||"Unknown error";e.details&&(r+=` ${e.details}`),this.setState({error:r}),null!=t&&t.id in this.getState().files&&this.setFileState(t.id,{error:r,response:n})};this.on("error",e),this.on("upload-error",((t,n,r)=>{if(e(n,t,r),"object"==typeof n&&n.message){const e=new Error(n.message);e.details=n.message,n.details&&(e.details+=` ${n.details}`),e.message=this.i18n("failedToUpload",{file:t.name}),Du(this,zu)[zu](e,{throwErr:!1})}else Du(this,zu)[zu](n,{throwErr:!1})})),this.on("upload",(()=>{this.setState({error:null})})),this.on("upload-started",(e=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{uploadStarted:Date.now(),uploadComplete:!1,percentage:0,bytesUploaded:0,bytesTotal:e.size}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("upload-progress",this.calculateProgress),this.on("upload-success",((e,t)=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const n=this.getFile(e.id).progress;this.setFileState(e.id,{progress:{...n,postprocess:Du(this,Nu)[Nu].size>0?{mode:"indeterminate"}:null,uploadComplete:!0,percentage:100,bytesUploaded:n.bytesTotal},response:t,uploadURL:t.uploadURL,isPaused:!1}),null==e.size&&this.setFileState(e.id,{size:t.bytesUploaded||n.bytesTotal}),this.calculateTotalProgress()})),this.on("preprocess-progress",((e,t)=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{...this.getFile(e.id).progress,preprocess:t}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("preprocess-complete",(e=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const t={...this.getState().files};t[e.id]={...t[e.id],progress:{...t[e.id].progress}},delete t[e.id].progress.preprocess,this.setState({files:t})})),this.on("postprocess-progress",((e,t)=>{this.getFile(e.id)?this.setFileState(e.id,{progress:{...this.getState().files[e.id].progress,postprocess:t}}):this.log(`Not setting progress for a file that has been removed: ${e.id}`)})),this.on("postprocess-complete",(e=>{if(!this.getFile(e.id))return void this.log(`Not setting progress for a file that has been removed: ${e.id}`);const t={...this.getState().files};t[e.id]={...t[e.id],progress:{...t[e.id].progress}},delete t[e.id].progress.postprocess,this.setState({files:t})})),this.on("restored",(()=>{this.calculateTotalProgress()})),this.on("dashboard:file-edit-complete",(e=>{e&&Du(this,Lu)[Lu](e)})),"undefined"!=typeof window&&window.addEventListener&&(window.addEventListener("online",Du(this,Wu)[Wu]),window.addEventListener("offline",Du(this,Wu)[Wu]),setTimeout(Du(this,Wu)[Wu],3e3))}function as(e,t){void 0===t&&(t={});const{forceAllowNewUpload:n=!1}=t,{allowNewUpload:r,currentUploads:o}=this.getState();if(!r&&!n)throw new Error("Cannot create a new upload: already uploading.");const i=Su();return this.emit("upload",{id:i,fileIDs:e}),this.setState({allowNewUpload:!1!==this.opts.allowMultipleUploadBatches&&!1!==this.opts.allowMultipleUploads,currentUploads:{...o,[i]:{fileIDs:e,step:0,result:{}}}}),i}function us(e){const{currentUploads:t}=this.getState();return t[e]}function ss(e){const t={...this.getState().currentUploads};delete t[e],this.setState({currentUploads:t})}async function ls(e){let{currentUploads:t}=this.getState(),n=t[e];const r=n.step||0,o=[...Du(this,Pu)[Pu],...Du(this,ju)[ju],...Du(this,Nu)[Nu]];try{for(let i=r;i<o.length&&n;i++){const r=o[i],a={...n,step:i};this.setState({currentUploads:{...t,[e]:a}}),await r(a.fileIDs,e),t=this.getState().currentUploads,n=t[e]}}catch(a){throw this.emit("error",a),Du(this,Ku)[Ku](e),a}if(n){n.fileIDs.forEach((e=>{const t=this.getFile(e);t&&t.progress.postprocess&&this.emit("postprocess-complete",t)}));const r=n.fileIDs.map((e=>this.getFile(e))),o=r.filter((e=>!e.error)),i=r.filter((e=>e.error));await this.addResultData(e,{successful:o,failed:i,uploadID:e}),t=this.getState().currentUploads,n=t[e]}let i;return n&&(i=n.result,this.emit("complete",i),Du(this,Ku)[Ku](e)),null==i&&this.log(`Not setting result for an upload that has been removed: ${e}`),i}Xu.VERSION="2.1.3";var cs=Xu,fs=sn((function(e,t){var n,r,o,i,a,u,s,l,c={},f=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function p(e,t){for(var n in t)e[n]=t[n];return e}function h(e){var t=e.parentNode;t&&t.removeChild(e)}function g(e,t,r){var o,i,a,u={};for(a in t)"key"==a?o=t[a]:"ref"==a?i=t[a]:u[a]=t[a];if(arguments.length>2&&(u.children=arguments.length>3?n.call(arguments,2):r),"function"==typeof e&&null!=e.defaultProps)for(a in e.defaultProps)void 0===u[a]&&(u[a]=e.defaultProps[a]);return v(e,u,o,i,null)}function v(e,t,n,i,a){var u={type:e,props:t,key:n,ref:i,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==a?++o:a};return null==a&&null!=r.vnode&&r.vnode(u),u}function y(e){return e.children}function m(e,t){this.props=e,this.context=t}function b(e,t){if(null==t)return e.__?b(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?b(e):null}function w(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return w(e)}}function E(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!D.__r++||s!==r.debounceRendering)&&((s=r.debounceRendering)||u)(D)}function D(){for(var e;D.__r=a.length;)e=a.sort((function(e,t){return e.__v.__b-t.__v.__b})),a=[],e.some((function(e){var t,n,r,o,i,a;e.__d&&(i=(o=(t=e).__v).__e,(a=t.__P)&&(n=[],(r=p({},o)).__v=o.__v+1,F(a,o,r,t.__n,void 0!==a.ownerSVGElement,null!=o.__h?[i]:null,n,null==i?b(o):i,o.__h),_(n,o),o.__e!=i&&w(o)))}))}function C(e,t,n,r,o,i,a,u,s,l){var d,p,h,g,m,w,E,D=r&&r.__k||f,C=D.length;for(n.__k=[],d=0;d<t.length;d++)if(null!=(g=n.__k[d]=null==(g=t[d])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g||"bigint"==typeof g?v(null,g,null,null,g):Array.isArray(g)?v(y,{children:g},null,null,null):g.__b>0?v(g.type,g.props,g.key,null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(h=D[d])||h&&g.key==h.key&&g.type===h.type)D[d]=void 0;else for(p=0;p<C;p++){if((h=D[p])&&g.key==h.key&&g.type===h.type){D[p]=void 0;break}h=null}F(e,g,h=h||c,o,i,a,u,s,l),m=g.__e,(p=g.ref)&&h.ref!=p&&(E||(E=[]),h.ref&&E.push(h.ref,null,g),E.push(p,g.__c||m,g)),null!=m?(null==w&&(w=m),"function"==typeof g.type&&g.__k===h.__k?g.__d=s=x(g,s,e):s=S(e,g,h,D,m,s),"function"==typeof n.type&&(n.__d=s)):s&&h.__e==s&&s.parentNode!=e&&(s=b(h))}for(n.__e=w,d=C;d--;)null!=D[d]&&("function"==typeof n.type&&null!=D[d].__e&&D[d].__e==n.__d&&(n.__d=b(r,d+1)),P(D[d],D[d]));if(E)for(d=0;d<E.length;d++)T(E[d],E[++d],E[++d])}function x(e,t,n){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,t="function"==typeof r.type?x(r,t,n):S(n,r,r,o,r.__e,t));return t}function S(e,t,n,r,o,i){var a,u,s;if(void 0!==t.__d)a=t.__d,t.__d=void 0;else if(null==n||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),a=null;else{for(u=i,s=0;(u=u.nextSibling)&&s<r.length;s+=2)if(u==o)break e;e.insertBefore(o,i),a=i}return void 0!==a?a:o.nextSibling}function A(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||d.test(t)?n:n+"px"}function O(e,t,n,r,o){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||A(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||A(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?r||e.addEventListener(t,i?B:k,i):e.removeEventListener(t,i?B:k,i);else if("dangerouslySetInnerHTML"!==t){if(o)t=t.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(a){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function k(e){this.l[e.type+!1](r.event?r.event(e):e)}function B(e){this.l[e.type+!0](r.event?r.event(e):e)}function F(e,t,o,i,a,u,s,l,f){var d,g,v,w,E,D,x,S,A,k,B,F=t.type;if(void 0!==t.constructor)return null;null!=o.__h&&(f=o.__h,l=t.__e=o.__e,t.__h=null,u=[l]),(d=r.__b)&&d(t);try{e:if("function"==typeof F){if(S=t.props,A=(d=F.contextType)&&i[d.__c],k=d?A?A.props.value:d.__:i,o.__c?x=(g=t.__c=o.__c).__=g.__E:("prototype"in F&&F.prototype.render?t.__c=g=new F(S,k):(t.__c=g=new m(S,k),g.constructor=F,g.render=j),A&&A.sub(g),g.props=S,g.state||(g.state={}),g.context=k,g.__n=i,v=g.__d=!0,g.__h=[]),null==g.__s&&(g.__s=g.state),null!=F.getDerivedStateFromProps&&(g.__s==g.state&&(g.__s=p({},g.__s)),p(g.__s,F.getDerivedStateFromProps(S,g.__s))),w=g.props,E=g.state,v)null==F.getDerivedStateFromProps&&null!=g.componentWillMount&&g.componentWillMount(),null!=g.componentDidMount&&g.__h.push(g.componentDidMount);else{if(null==F.getDerivedStateFromProps&&S!==w&&null!=g.componentWillReceiveProps&&g.componentWillReceiveProps(S,k),!g.__e&&null!=g.shouldComponentUpdate&&!1===g.shouldComponentUpdate(S,g.__s,k)||t.__v===o.__v){g.props=S,g.state=g.__s,t.__v!==o.__v&&(g.__d=!1),g.__v=t,t.__e=o.__e,t.__k=o.__k,t.__k.forEach((function(e){e&&(e.__=t)})),g.__h.length&&s.push(g);break e}null!=g.componentWillUpdate&&g.componentWillUpdate(S,g.__s,k),null!=g.componentDidUpdate&&g.__h.push((function(){g.componentDidUpdate(w,E,D)}))}g.context=k,g.props=S,g.state=g.__s,(d=r.__r)&&d(t),g.__d=!1,g.__v=t,g.__P=e,d=g.render(g.props,g.state,g.context),g.state=g.__s,null!=g.getChildContext&&(i=p(p({},i),g.getChildContext())),v||null==g.getSnapshotBeforeUpdate||(D=g.getSnapshotBeforeUpdate(w,E)),B=null!=d&&d.type===y&&null==d.key?d.props.children:d,C(e,Array.isArray(B)?B:[B],t,o,i,a,u,s,l,f),g.base=t.__e,t.__h=null,g.__h.length&&s.push(g),x&&(g.__E=g.__=null),g.__e=!1}else null==u&&t.__v===o.__v?(t.__k=o.__k,t.__e=o.__e):t.__e=function(e,t,r,o,i,a,u,s){var l,f,d,p=r.props,g=t.props,v=t.type,y=0;if("svg"===v&&(i=!0),null!=a)for(;y<a.length;y++)if((l=a[y])&&"setAttribute"in l==!!v&&(v?l.localName===v:3===l.nodeType)){e=l,a[y]=null;break}if(null==e){if(null===v)return document.createTextNode(g);e=i?document.createElementNS("http://www.w3.org/2000/svg",v):document.createElement(v,g.is&&g),a=null,s=!1}if(null===v)p===g||s&&e.data===g||(e.data=g);else{if(a=a&&n.call(e.childNodes),f=(p=r.props||c).dangerouslySetInnerHTML,d=g.dangerouslySetInnerHTML,!s){if(null!=a)for(p={},y=0;y<e.attributes.length;y++)p[e.attributes[y].name]=e.attributes[y].value;(d||f)&&(d&&(f&&d.__html==f.__html||d.__html===e.innerHTML)||(e.innerHTML=d&&d.__html||""))}if(function(e,t,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in t||O(e,i,null,n[i],r);for(i in t)o&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||O(e,i,t[i],n[i],r)}(e,g,p,i,s),d)t.__k=[];else if(y=t.props.children,C(e,Array.isArray(y)?y:[y],t,r,o,i&&"foreignObject"!==v,a,u,a?a[0]:r.__k&&b(r,0),s),null!=a)for(y=a.length;y--;)null!=a[y]&&h(a[y]);s||("value"in g&&void 0!==(y=g.value)&&(y!==p.value||y!==e.value||"progress"===v&&!y)&&O(e,"value",y,p.value,!1),"checked"in g&&void 0!==(y=g.checked)&&y!==e.checked&&O(e,"checked",y,p.checked,!1))}return e}(o.__e,t,o,i,a,u,s,f);(d=r.diffed)&&d(t)}catch(_){t.__v=null,(f||null!=u)&&(t.__e=l,t.__h=!!f,u[u.indexOf(l)]=null),r.__e(_,t,o)}}function _(e,t){r.__c&&r.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(n){r.__e(n,t.__v)}}))}function T(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(o){r.__e(o,n)}}function P(e,t,n){var o,i;if(r.unmount&&r.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||T(o,null,t)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(a){r.__e(a,t)}o.base=o.__P=null}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&P(o[i],t,"function"!=typeof e.type);n||null==e.__e||h(e.__e),e.__e=e.__d=void 0}function j(e,t,n){return this.constructor(e,n)}function N(e,t,o){var i,a,u;r.__&&r.__(e,t),a=(i="function"==typeof o)?null:o&&o.__k||t.__k,u=[],F(t,e=(!i&&o||t).__k=g(y,null,[e]),a||c,c,void 0!==t.ownerSVGElement,!i&&o?[o]:a?null:t.firstChild?n.call(t.childNodes):null,u,!i&&o?o:a?a.__e:t.firstChild,i),_(u,e)}n=f.slice,r={__e:function(e,t){for(var n,r,o;t=t.__;)if((n=t.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(e)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(e),o=n.__d),o)return n.__E=n}catch(i){e=i}throw e}},o=0,i=function(e){return null!=e&&void 0===e.constructor},m.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=p({},this.state),"function"==typeof e&&(e=e(p({},n),this.props)),e&&p(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),E(this))},m.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),E(this))},m.prototype.render=y,a=[],u="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,D.__r=0,l=0,t.Component=m,t.Fragment=y,t.cloneElement=function(e,t,r){var o,i,a,u=p({},e.props);for(a in t)"key"==a?o=t[a]:"ref"==a?i=t[a]:u[a]=t[a];return arguments.length>2&&(u.children=arguments.length>3?n.call(arguments,2):r),v(e.type,u,o||e.key,i||e.ref,null)},t.createContext=function(e,t){var n={__c:t="__cC"+l++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,r;return this.getChildContext||(n=[],(r={})[t]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(E)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n},t.createElement=g,t.createRef=function(){return{current:null}},t.h=g,t.hydrate=function e(t,n){N(t,n,e)},t.isValidElement=i,t.options=r,t.render=N,t.toChildArray=function e(t,n){return n=n||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){e(t,n)})):n.push(t)),n}})),ds=function(e,t){return void 0===t&&(t=document),"string"==typeof e?t.querySelector(e):(null==(n=e)?void 0:n.nodeType)===Node.ELEMENT_NODE?e:null;var n},ps=class{constructor(e,t){void 0===t&&(t={}),this.uppy=e,this.opts=t}getPluginState(){const{plugins:e}=this.uppy.getState();return e[this.id]||{}}setPluginState(e){const{plugins:t}=this.uppy.getState();this.uppy.setState({plugins:{...t,[this.id]:{...t[this.id],...e}}})}setOptions(e){this.opts={...this.opts,...e},this.setPluginState(),this.i18nInit()}i18nInit(){const e=new Ka([this.defaultLocale,this.uppy.locale,this.opts.locale]);this.i18n=e.translate.bind(e),this.i18nArray=e.translateArray.bind(e),this.setPluginState()}addTarget(){throw new Error("Extend the addTarget method to add your plugin to another plugin's target")}install(){}uninstall(){}render(){throw new Error("Extend the render method to add your plugin to a DOM element")}update(){}afterUpdate(){}};function hs(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var gs=0;function vs(e){return"__private_"+gs+++"_"+e}const{render:ys}=fs;var ms=vs("updateUI");class bs extends ps{constructor(){super(...arguments),Object.defineProperty(this,ms,{writable:!0,value:void 0})}mount(e,t){const n=t.id,r=ds(e);if(r){this.isTargetDOMEl=!0;const t=document.createDocumentFragment();return hs(this,ms)[ms]=function(e){let t=null,n=null;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=o,t||(t=Promise.resolve().then((()=>(t=null,e(...n))))),t}}((e=>{this.uppy.getPlugin(this.id)&&(ys(this.render(e),t),this.afterUpdate())})),this.uppy.log(`Installing ${n} to a DOM element '${e}'`),this.opts.replaceTargetContent&&(r.innerHTML=""),ys(this.render(this.uppy.getState()),t),this.el=t.firstElementChild,r.appendChild(t),this.onMount(),this.el}let o;if("object"==typeof e&&e instanceof bs)o=e;else if("function"==typeof e){const t=e;this.uppy.iteratePlugins((e=>{if(e instanceof t)return o=e,!1}))}if(o)return this.uppy.log(`Installing ${n} to ${o.id}`),this.parent=o,this.el=o.addTarget(t),this.onMount(),this.el;this.uppy.log(`Not installing ${n}`);let i=`Invalid target option given to ${n}.`;throw i+="function"==typeof e?" The given target is not a Plugin class. Please check that you're not specifying a React Component instead of a plugin. If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.":"If you meant to target an HTML element, please make sure that the element exists. Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. (see https://github.com/transloadit/uppy/issues/1042)\n\nIf you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.",new Error(i)}update(e){var t,n;null!=this.el&&(null==(t=(n=hs(this,ms))[ms])||t.call(n,e))}unmount(){var e;this.isTargetDOMEl&&(null==(e=this.el)||e.remove());this.onUnmount()}onMount(){}onUnmount(){}}var ws=bs;const{debugLogger:Es}=yu;var Ds=cs,Cs=cs,xs=ws,Ss=ps,As=Es;Ds.Uppy=Cs,Ds.UIPlugin=xs,Ds.BasePlugin=Ss,Ds.debugLogger=As;class Os extends Error{constructor(e,t){void 0===t&&(t=null),super("This looks like a network error, the endpoint might be blocked by an internet provider or a firewall."),this.cause=e,this.isNetworkError=!0,this.request=t}}var ks=Os,Bs=function(){return fetch(...arguments).catch((e=>{throw"AbortError"===e.name?e:new ks(e)}))};class Fs extends Error{constructor(){super("Authorization required"),this.name="AuthError",this.isAuthError=!0}}var _s,Ts,Ps,js,Ns,Is=Fs;function Rs(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Ls=0;function Ms(e){return"__private_"+Ls+++"_"+e}async function zs(e){if(401===e.status)throw new Is;const t=e.json();if(e.status<200||e.status>300){let n=`Failed request with status: ${e.status}. ${e.statusText}`;try{const e=await t;n=e.message?`${n} message: ${e.message}`:n,n=e.requestId?`${n} request-Id: ${e.requestId}`:n}finally{throw new Error(n)}}return t}var $s=(Ts=Ms("getPostResponseFunc"),Ps=Ms("getUrl"),js=Ms("errorHandler"),Ns=_s=class e{constructor(e,t){Object.defineProperty(this,js,{value:Vs}),Object.defineProperty(this,Ps,{value:Hs}),Object.defineProperty(this,Ts,{writable:!0,value:e=>t=>e?t:this.onReceiveResponse(t)}),this.uppy=e,this.opts=t,this.onReceiveResponse=this.onReceiveResponse.bind(this),this.allowedHeaders=["accept","content-type","uppy-auth-token"],this.preflightDone=!1}get hostname(){const{companion:e}=this.uppy.getState(),t=this.opts.companionUrl;return(e&&e[t]?e[t]:t).replace(/\/$/,"")}headers(){const t=this.opts.companionHeaders||{};return Promise.resolve({...e.defaultHeaders,...t})}onReceiveResponse(e){const t=this.uppy.getState().companion||{},n=this.opts.companionUrl,{headers:r}=e;return r.has("i-am")&&r.get("i-am")!==t[n]&&this.uppy.setState({companion:{...t,[n]:r.get("i-am")}}),e}preflight(e){return this.preflightDone?Promise.resolve(this.allowedHeaders.slice()):fetch(Rs(this,Ps)[Ps](e),{method:"OPTIONS"}).then((e=>(e.headers.has("access-control-allow-headers")&&(this.allowedHeaders=e.headers.get("access-control-allow-headers").split(",").map((e=>e.trim().toLowerCase()))),this.preflightDone=!0,this.allowedHeaders.slice()))).catch((e=>(this.uppy.log(`[CompanionClient] unable to make preflight request ${e}`,"warning"),this.preflightDone=!0,this.allowedHeaders.slice())))}preflightAndHeaders(e){return Promise.all([this.preflight(e),this.headers()]).then((e=>{let[t,n]=e;return Object.keys(n).forEach((e=>{t.includes(e.toLowerCase())||(this.uppy.log(`[CompanionClient] excluding disallowed header ${e}`),delete n[e])})),n}))}get(e,t){return this.preflightAndHeaders(e).then((t=>Bs(Rs(this,Ps)[Ps](e),{method:"get",headers:t,credentials:this.opts.companionCookiesRule||"same-origin"}))).then(Rs(this,Ts)[Ts](t)).then(zs).catch(Rs(this,js)[js]("get",e))}post(e,t,n){const r="post";return this.preflightAndHeaders(e).then((n=>Bs(Rs(this,Ps)[Ps](e),{method:r,headers:n,credentials:this.opts.companionCookiesRule||"same-origin",body:JSON.stringify(t)}))).then(Rs(this,Ts)[Ts](n)).then(zs).catch(Rs(this,js)[js](r,e))}delete(e,t,n){const r="delete";return this.preflightAndHeaders(e).then((n=>Bs(`${this.hostname}/${e}`,{method:r,headers:n,credentials:this.opts.companionCookiesRule||"same-origin",body:t?JSON.stringify(t):null}))).then(Rs(this,Ts)[Ts](n)).then(zs).catch(Rs(this,js)[js](r,e))}},_s.VERSION="2.0.4",_s.defaultHeaders={Accept:"application/json","Content-Type":"application/json","Uppy-Versions":`@uppy/companion-client=${_s.VERSION}`},Ns);function Hs(e){return/^(https?:|)\/\//.test(e)?e:`${this.hostname}/${e}`}function Vs(e,t){return n=>{var r;if(null==(r=n)||!r.isAuthError){const r=new Error(`Could not ${e} ${Rs(this,Ps)[Ps](t)}`);r.cause=n,n=r}return Promise.reject(n)}}var Us={setItem:(e,t)=>new Promise((n=>{localStorage.setItem(e,t),n()})),getItem:e=>Promise.resolve(localStorage.getItem(e)),removeItem:e=>new Promise((t=>{localStorage.removeItem(e),t()}))};var Ws,qs,Gs,Ks,Ys;let Xs,Zs;function Js(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var Qs=0;function el(e){return"__private_"+Qs+++"_"+e}var tl=(Ws=el("queued"),qs=el("emitter"),Gs=el("isOpen"),Ks=el("socket"),Ys=el("handleMessage"),Xs=Symbol.for("uppy test: getSocket"),Zs=Symbol.for("uppy test: getQueued"),class{constructor(e){Object.defineProperty(this,Ws,{writable:!0,value:[]}),Object.defineProperty(this,qs,{writable:!0,value:Xa()}),Object.defineProperty(this,Gs,{writable:!0,value:!1}),Object.defineProperty(this,Ks,{writable:!0,value:void 0}),Object.defineProperty(this,Ys,{writable:!0,value:e=>{try{const t=JSON.parse(e.data);this.emit(t.action,t.payload)}catch(t){console.log(t)}}}),this.opts=e,e&&!1===e.autoOpen||this.open()}get isOpen(){return Js(this,Gs)[Gs]}[Xs](){return Js(this,Ks)[Ks]}[Zs](){return Js(this,Ws)[Ws]}open(){Js(this,Ks)[Ks]=new WebSocket(this.opts.target),Js(this,Ks)[Ks].onopen=()=>{for(Js(this,Gs)[Gs]=!0;Js(this,Ws)[Ws].length>0&&Js(this,Gs)[Gs];){const e=Js(this,Ws)[Ws].shift();this.send(e.action,e.payload)}},Js(this,Ks)[Ks].onclose=()=>{Js(this,Gs)[Gs]=!1},Js(this,Ks)[Ks].onmessage=Js(this,Ys)[Ys]}close(){var e;null==(e=Js(this,Ks)[Ks])||e.close()}send(e,t){Js(this,Gs)[Gs]?Js(this,Ks)[Ks].send(JSON.stringify({action:e,payload:t})):Js(this,Ws)[Ws].push({action:e,payload:t})}on(e,t){Js(this,qs)[qs].on(e,t)}emit(e,t){Js(this,qs)[qs].emit(e,t)}once(e,t){Js(this,qs)[qs].once(e,t)}}),nl={RequestClient:$s,Provider:class extends $s{constructor(e,t){super(e,t),this.provider=t.provider,this.id=this.provider,this.name=this.opts.name||this.id.split("-").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" "),this.pluginId=this.opts.pluginId,this.tokenKey=`companion-${this.pluginId}-auth-token`,this.companionKeysParams=this.opts.companionKeysParams,this.preAuthToken=null}headers(){return Promise.all([super.headers(),this.getAuthToken()]).then((e=>{let[t,n]=e;const r={};return n&&(r["uppy-auth-token"]=n),this.companionKeysParams&&(r["uppy-credentials-params"]=btoa(JSON.stringify({params:this.companionKeysParams}))),{...t,...r}}))}onReceiveResponse(e){e=super.onReceiveResponse(e);const t=this.uppy.getPlugin(this.pluginId),n=t.getPluginState().authenticated?401!==e.status:e.status<400;return t.setPluginState({authenticated:n}),e}setAuthToken(e){return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey,e)}getAuthToken(){return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey)}authUrl(e){return void 0===e&&(e={}),this.preAuthToken&&(e.uppyPreAuthToken=this.preAuthToken),`${this.hostname}/${this.id}/connect?${new URLSearchParams(e)}`}fileUrl(e){return`${this.hostname}/${this.id}/get/${e}`}fetchPreAuthToken(){return this.companionKeysParams?this.post(`${this.id}/preauth/`,{params:this.companionKeysParams}).then((e=>{this.preAuthToken=e.token})).catch((e=>{this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${e}`,"warning")})):Promise.resolve()}list(e){return this.get(`${this.id}/list/${e||""}`)}logout(){return this.get(`${this.id}/logout`).then((e=>Promise.all([e,this.uppy.getPlugin(this.pluginId).storage.removeItem(this.tokenKey)]))).then((e=>{let[t]=e;return t}))}static initPlugin(e,t,n){if(e.type="acquirer",e.files=[],n&&(e.opts={...n,...t}),t.serverUrl||t.serverPattern)throw new Error("`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`");if(t.companionAllowedHosts){const n=t.companionAllowedHosts;if(!("string"==typeof n||Array.isArray(n)||n instanceof RegExp))throw new TypeError(`${e.id}: the option "companionAllowedHosts" must be one of string, Array, RegExp`);e.opts.companionAllowedHosts=n}else/^(?!https?:\/\/).*$/i.test(t.companionUrl)?e.opts.companionAllowedHosts=`https://${t.companionUrl.replace(/^\/\//,"")}`:e.opts.companionAllowedHosts=new URL(t.companionUrl).origin;e.storage=e.opts.storage||Us}},SearchProvider:class extends $s{constructor(e,t){super(e,t),this.provider=t.provider,this.id=this.provider,this.name=this.opts.name||this.id.split("-").map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" "),this.pluginId=this.opts.pluginId}fileUrl(e){return`${this.hostname}/search/${this.id}/get/${e}`}search(e,t){return t=t?`&${t}`:"",this.get(`search/${this.id}/list?q=${encodeURIComponent(e)}${t}`)}},Socket:tl};var rl,ol,il=qo((function(e,t,n){const{progress:r,bytesUploaded:o,bytesTotal:i}=t;r&&(e.uppy.log(`Upload progress: ${r}`),e.uppy.emit("upload-progress",n,{uploader:e,bytesUploaded:o,bytesTotal:i}))}),300,{leading:!0,trailing:!0});function al(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var ul=0;function sl(e){return"__private_"+ul+++"_"+e}var ll=(rl=sl("emitter"),ol=sl("events"),class{constructor(e){Object.defineProperty(this,rl,{writable:!0,value:void 0}),Object.defineProperty(this,ol,{writable:!0,value:[]}),al(this,rl)[rl]=e}on(e,t){return al(this,ol)[ol].push([e,t]),al(this,rl)[rl].on(e,t)}remove(){for(const[e,t]of al(this,ol)[ol].splice(0))al(this,rl)[rl].off(e,t)}});function cl(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var fl=0;function dl(e){return"__private_"+fl+++"_"+e}var pl=dl("aliveTimer"),hl=dl("isDone"),gl=dl("onTimedOut"),vl=dl("timeout");var yl=class{constructor(e,t){Object.defineProperty(this,pl,{writable:!0,value:void 0}),Object.defineProperty(this,hl,{writable:!0,value:!1}),Object.defineProperty(this,gl,{writable:!0,value:void 0}),Object.defineProperty(this,vl,{writable:!0,value:void 0}),cl(this,vl)[vl]=e,cl(this,gl)[gl]=t}progress(){cl(this,hl)[hl]||cl(this,vl)[vl]>0&&(clearTimeout(cl(this,pl)[pl]),cl(this,pl)[pl]=setTimeout(cl(this,gl)[gl],cl(this,vl)[vl]))}done(){cl(this,hl)[hl]||(clearTimeout(cl(this,pl)[pl]),cl(this,pl)[pl]=null,cl(this,hl)[hl]=!0)}};function ml(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}var bl=0;function wl(e){return"__private_"+bl+++"_"+e}function El(){return new Error("Cancelled")}var Dl=wl("activeRequests"),Cl=wl("queuedHandlers"),xl=wl("call"),Sl=wl("queueNext"),Al=wl("next"),Ol=wl("queue"),kl=wl("dequeue");function Bl(e){ml(this,Dl)[Dl]+=1;let t,n=!1;try{t=e()}catch(r){throw ml(this,Dl)[Dl]-=1,r}return{abort:()=>{n||(n=!0,ml(this,Dl)[Dl]-=1,t(),ml(this,Sl)[Sl]())},done:()=>{n||(n=!0,ml(this,Dl)[Dl]-=1,ml(this,Sl)[Sl]())}}}function Fl(){queueMicrotask((()=>ml(this,Al)[Al]()))}function _l(){if(ml(this,Dl)[Dl]>=this.limit)return;if(0===ml(this,Cl)[Cl].length)return;const e=ml(this,Cl)[Cl].shift(),t=ml(this,xl)[xl](e.fn);e.abort=t.abort,e.done=t.done}function Tl(e,t){void 0===t&&(t={});const n={fn:e,priority:t.priority||0,abort:()=>{ml(this,kl)[kl](n)},done:()=>{throw new Error("Cannot mark a queued request as done: this indicates a bug")}},r=ml(this,Cl)[Cl].findIndex((e=>n.priority>e.priority));return-1===r?ml(this,Cl)[Cl].push(n):ml(this,Cl)[Cl].splice(r,0,n),n}function Pl(e){const t=ml(this,Cl)[Cl].indexOf(e);-1!==t&&ml(this,Cl)[Cl].splice(t,1)}var jl={RateLimitedQueue:class{constructor(e){Object.defineProperty(this,kl,{value:Pl}),Object.defineProperty(this,Ol,{value:Tl}),Object.defineProperty(this,Al,{value:_l}),Object.defineProperty(this,Sl,{value:Fl}),Object.defineProperty(this,xl,{value:Bl}),Object.defineProperty(this,Dl,{writable:!0,value:0}),Object.defineProperty(this,Cl,{writable:!0,value:[]}),this.limit="number"!=typeof e||0===e?1/0:e}run(e,t){return ml(this,Dl)[Dl]<this.limit?ml(this,xl)[xl](e):ml(this,Ol)[Ol](e,t)}wrapPromiseFunction(e,t){var n=this;return function(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];let a;const u=new Promise(((r,i)=>{a=n.run((()=>{let t,n;try{n=Promise.resolve(e(...o))}catch(u){n=Promise.reject(u)}return n.then((e=>{t?i(t):(a.done(),r(e))}),(e=>{t?i(t):(a.done(),i(e))})),()=>{t=El()}}),t)}));return u.abort=()=>{a.abort()},u}}},internalRateLimitedQueue:Symbol("__queue")};var Nl,Il,Rl=function(e){return!!e&&(0!==e.readyState&&4!==e.readyState||0===e.status)},Ll={strings:{timedOut:"Upload stalled for %{seconds} seconds, aborting."}};const{nanoid:Ml}=bu,{Provider:zl,RequestClient:$l,Socket:Hl}=nl,{RateLimitedQueue:Vl,internalRateLimitedQueue:Ul}=jl;function Wl(e,t){let n=t;return n||(n=new Error("Upload error")),"string"==typeof n&&(n=new Error(n)),n instanceof Error||(n=Object.assign(new Error("Upload error"),{data:n})),Rl(e)?(n=new ks(n,e),n):(n.request=e,n)}function ql(e){return e.data.slice(0,e.data.size,e.meta.type)}var Gl=(Il=Nl=class extends ps{constructor(e,t){super(e,t),this.type="uploader",this.id=this.opts.id||"XHRUpload",this.title="XHRUpload",this.defaultLocale=Ll;const n={formData:!0,fieldName:t.bundle?"files[]":"file",method:"post",metaFields:null,responseUrlFieldName:"url",bundle:!1,headers:{},timeout:3e4,limit:5,withCredentials:!1,responseType:"",getResponseData(t){let n={};try{n=JSON.parse(t)}catch(r){e.log(r)}return n},getResponseError(e,t){let n=new Error("Upload error");return Rl(t)&&(n=new ks(n,t)),n},validateStatus:e=>e>=200&&e<300};if(this.opts={...n,...t},this.i18nInit(),this.handleUpload=this.handleUpload.bind(this),Ul in this.opts?this.requests=this.opts[Ul]:this.requests=new Vl(this.opts.limit),this.opts.bundle&&!this.opts.formData)throw new Error("`opts.formData` must be true when `opts.bundle` is enabled.");this.uploaderEvents=Object.create(null)}getOptions(e){const t=this.uppy.getState().xhrUpload,{headers:n}=this.opts,r={...this.opts,...t||{},...e.xhrUpload||{},headers:{}};return"function"==typeof n?r.headers=n(e):Object.assign(r.headers,this.opts.headers),t&&Object.assign(r.headers,t.headers),e.xhrUpload&&Object.assign(r.headers,e.xhrUpload.headers),r}addMetadata(e,t,n){(Array.isArray(n.metaFields)?n.metaFields:Object.keys(t)).forEach((n=>{e.append(n,t[n])}))}createFormDataUpload(e,t){const n=new FormData;this.addMetadata(n,e.meta,t);const r=ql(e);return e.name?n.append(t.fieldName,r,e.meta.name):n.append(t.fieldName,r),n}createBundledUpload(e,t){const n=new FormData,{meta:r}=this.uppy.getState();return this.addMetadata(n,r,t),e.forEach((e=>{const t=this.getOptions(e),r=ql(e);e.name?n.append(t.fieldName,r,e.name):n.append(t.fieldName,r)})),n}upload(e,t,n){const r=this.getOptions(e);return this.uppy.log(`uploading ${t} of ${n}`),new Promise(((t,n)=>{this.uppy.emit("upload-started",e);const o=r.formData?this.createFormDataUpload(e,r):e.data,i=new XMLHttpRequest;this.uploaderEvents[e.id]=new ll(this.uppy);const a=new yl(r.timeout,(()=>{i.abort(),s.done();const t=new Error(this.i18n("timedOut",{seconds:Math.ceil(r.timeout/1e3)}));this.uppy.emit("upload-error",e,t),n(t)})),u=Ml();i.upload.addEventListener("loadstart",(()=>{this.uppy.log(`[XHRUpload] ${u} started`)})),i.upload.addEventListener("progress",(t=>{this.uppy.log(`[XHRUpload] ${u} progress: ${t.loaded} / ${t.total}`),a.progress(),t.lengthComputable&&this.uppy.emit("upload-progress",e,{uploader:this,bytesUploaded:t.loaded,bytesTotal:t.total})})),i.addEventListener("load",(o=>{if(this.uppy.log(`[XHRUpload] ${u} finished`),a.done(),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),r.validateStatus(o.target.status,i.responseText,i)){const n=r.getResponseData(i.responseText,i),a=n[r.responseUrlFieldName],u={status:o.target.status,body:n,uploadURL:a};return this.uppy.emit("upload-success",e,u),a&&this.uppy.log(`Download ${e.name} from ${a}`),t(e)}const l=r.getResponseData(i.responseText,i),c=Wl(i,r.getResponseError(i.responseText,i)),f={status:o.target.status,body:l};return this.uppy.emit("upload-error",e,c,f),n(c)})),i.addEventListener("error",(()=>{this.uppy.log(`[XHRUpload] ${u} errored`),a.done(),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null);const t=Wl(i,r.getResponseError(i.responseText,i));return this.uppy.emit("upload-error",e,t),n(t)})),i.open(r.method.toUpperCase(),r.endpoint,!0),i.withCredentials=r.withCredentials,""!==r.responseType&&(i.responseType=r.responseType);const s=this.requests.run((()=>{this.uppy.emit("upload-started",e);const t=this.getOptions(e);return Object.keys(t.headers).forEach((e=>{i.setRequestHeader(e,t.headers[e])})),i.send(o),()=>{a.done(),i.abort()}}));this.onFileRemove(e.id,(()=>{s.abort(),n(new Error("File removed"))})),this.onCancelAll(e.id,(()=>{s.abort(),n(new Error("Upload cancelled"))}))}))}uploadRemote(e){const t=this.getOptions(e);return new Promise(((n,r)=>{this.uppy.emit("upload-started",e);const o={};(Array.isArray(t.metaFields)?t.metaFields:Object.keys(e.meta)).forEach((t=>{o[t]=e.meta[t]}));new(e.remote.providerOptions.provider?zl:$l)(this.uppy,e.remote.providerOptions).post(e.remote.url,{...e.remote.body,endpoint:t.endpoint,size:e.data.size,fieldname:t.fieldName,metadata:o,httpMethod:t.method,useFormData:t.formData,headers:t.headers}).then((o=>{const{token:i}=o,a=function(e){const t=/^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i.exec(e)[1];return`${/^http:\/\//i.test(e)?"ws":"wss"}://${t}`}(e.remote.companionUrl),u=new Hl({target:`${a}/api/${i}`,autoOpen:!1});this.uploaderEvents[e.id]=new ll(this.uppy),this.onFileRemove(e.id,(()=>{u.send("cancel",{}),s.abort(),n(`upload ${e.id} was removed`)})),this.onCancelAll(e.id,(()=>{u.send("cancel",{}),s.abort(),n(`upload ${e.id} was canceled`)})),this.onRetry(e.id,(()=>{u.send("pause",{}),u.send("resume",{})})),this.onRetryAll(e.id,(()=>{u.send("pause",{}),u.send("resume",{})})),u.on("progress",(t=>il(this,t,e))),u.on("success",(r=>{const o=t.getResponseData(r.response.responseText,r.response),i=o[t.responseUrlFieldName],a={status:r.response.status,body:o,uploadURL:i};return this.uppy.emit("upload-success",e,a),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),n()})),u.on("error",(n=>{const o=n.response,i=o?t.getResponseError(o.responseText,o):Object.assign(new Error(n.error.message),{cause:n.error});this.uppy.emit("upload-error",e,i),s.done(),this.uploaderEvents[e.id]&&(this.uploaderEvents[e.id].remove(),this.uploaderEvents[e.id]=null),r(i)}));const s=this.requests.run((()=>(u.open(),e.isPaused&&u.send("pause",{}),()=>u.close())))})).catch((t=>{this.uppy.emit("upload-error",e,t),r(t)}))}))}uploadBundle(e){return new Promise(((t,n)=>{const{endpoint:r}=this.opts,{method:o}=this.opts,i=this.uppy.getState().xhrUpload,a=this.createBundledUpload(e,{...this.opts,...i||{}}),u=new XMLHttpRequest,s=new yl(this.opts.timeout,(()=>{u.abort();const e=new Error(this.i18n("timedOut",{seconds:Math.ceil(this.opts.timeout/1e3)}));l(e),n(e)})),l=t=>{e.forEach((e=>{this.uppy.emit("upload-error",e,t)}))};u.upload.addEventListener("loadstart",(()=>{this.uppy.log("[XHRUpload] started uploading bundle"),s.progress()})),u.upload.addEventListener("progress",(t=>{s.progress(),t.lengthComputable&&e.forEach((e=>{this.uppy.emit("upload-progress",e,{uploader:this,bytesUploaded:t.loaded/t.total*e.size,bytesTotal:e.size})}))})),u.addEventListener("load",(r=>{if(s.done(),this.opts.validateStatus(r.target.status,u.responseText,u)){const n=this.opts.getResponseData(u.responseText,u),o={status:r.target.status,body:n};return e.forEach((e=>{this.uppy.emit("upload-success",e,o)})),t()}const o=this.opts.getResponseError(u.responseText,u)||new Error("Upload error");return o.request=u,l(o),n(o)})),u.addEventListener("error",(()=>{s.done();const e=this.opts.getResponseError(u.responseText,u)||new Error("Upload error");return l(e),n(e)})),this.uppy.on("cancel-all",(()=>{s.done(),u.abort()})),u.open(o.toUpperCase(),r,!0),u.withCredentials=this.opts.withCredentials,""!==this.opts.responseType&&(u.responseType=this.opts.responseType),Object.keys(this.opts.headers).forEach((e=>{u.setRequestHeader(e,this.opts.headers[e])})),u.send(a),e.forEach((e=>{this.uppy.emit("upload-started",e)}))}))}uploadFiles(e){return function(e){const t=[],n=[];function r(e){t.push(e)}function o(e){n.push(e)}return Promise.all(e.map((e=>e.then(r,o)))).then((()=>({successful:t,failed:n})))}(e.map(((t,n)=>{const r=parseInt(n,10)+1,o=e.length;return t.error?Promise.reject(new Error(t.error)):t.isRemote?this.uploadRemote(t,r,o):this.upload(t,r,o)})))}onFileRemove(e,t){this.uploaderEvents[e].on("file-removed",(n=>{e===n.id&&t(n.id)}))}onRetry(e,t){this.uploaderEvents[e].on("upload-retry",(n=>{e===n&&t()}))}onRetryAll(e,t){this.uploaderEvents[e].on("retry-all",(()=>{this.uppy.getFile(e)&&t()}))}onCancelAll(e,t){this.uploaderEvents[e].on("cancel-all",(()=>{this.uppy.getFile(e)&&t()}))}handleUpload(e){if(0===e.length)return this.uppy.log("[XHRUpload] No files to upload!"),Promise.resolve();0!==this.opts.limit||this.opts[Ul]||this.uppy.log("[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0","warning"),this.uppy.log("[XHRUpload] Uploading...");const t=e.map((e=>this.uppy.getFile(e)));if(this.opts.bundle){if(t.some((e=>e.isRemote)))throw new Error("Can’t upload remote files when the `bundle: true` option is set");if("function"==typeof this.opts.headers)throw new TypeError("`headers` may not be a function when the `bundle: true` option is set");return this.uploadBundle(t)}return this.uploadFiles(t).then((()=>null))}install(){if(this.opts.bundle){const{capabilities:e}=this.uppy.getState();this.uppy.setState({capabilities:{...e,individualCancellation:!1}})}this.uppy.addUploader(this.handleUpload)}uninstall(){if(this.opts.bundle){const{capabilities:e}=this.uppy.getState();this.uppy.setState({capabilities:{...e,individualCancellation:!0}})}this.uppy.removeUploader(this.handleUpload)}},Nl.VERSION="2.0.6",Il),Kl="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function Yl(e){var t={exports:{}};return e(t,t.exports),t.exports}var Xl,Zl,Jl=function(e){return e&&e.Math==Math&&e},Ql=Jl("object"==typeof globalThis&&globalThis)||Jl("object"==typeof window&&window)||Jl("object"==typeof self&&self)||Jl("object"==typeof Kl&&Kl)||function(){return this}()||Function("return this")(),ec=Object.defineProperty,tc=function(e,t){try{ec(Ql,e,{value:t,configurable:!0,writable:!0})}catch(mG){Ql[e]=t}return t},nc=Ql["__core-js_shared__"]||tc("__core-js_shared__",{}),rc=Yl((function(e){(e.exports=function(e,t){return nc[e]||(nc[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),oc=Function.prototype,ic=oc.bind,ac=oc.call,uc=ic&&ic.bind(ac),sc=ic?function(e){return e&&uc(ac,e)}:function(e){return e&&function(){return ac.apply(e,arguments)}},lc=Ql.TypeError,cc=function(e){if(null==e)throw lc("Can't call method on "+e);return e},fc=Ql.Object,dc=function(e){return fc(cc(e))},pc=sc({}.hasOwnProperty),hc=Object.hasOwn||function(e,t){return pc(dc(e),t)},gc=0,vc=Math.random(),yc=sc(1..toString),mc=function(e){return"Symbol("+(void 0===e?"":e)+")_"+yc(++gc+vc,36)},bc=function(e){return"function"==typeof e},wc=function(e){return bc(e)?e:void 0},Ec=function(e,t){return arguments.length<2?wc(Ql[e]):Ql[e]&&Ql[e][t]},Dc=Ec("navigator","userAgent")||"",Cc=Ql.process,xc=Ql.Deno,Sc=Cc&&Cc.versions||xc&&xc.version,Ac=Sc&&Sc.v8;Ac&&(Zl=(Xl=Ac.split("."))[0]>0&&Xl[0]<4?1:+(Xl[0]+Xl[1])),!Zl&&Dc&&(!(Xl=Dc.match(/Edge\/(\d+)/))||Xl[1]>=74)&&(Xl=Dc.match(/Chrome\/(\d+)/))&&(Zl=+Xl[1]);var Oc=Zl,kc=function(e){try{return!!e()}catch(t){return!0}},Bc=!!Object.getOwnPropertySymbols&&!kc((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&Oc&&Oc<41})),Fc=Bc&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,_c=rc("wks"),Tc=Ql.Symbol,Pc=Tc&&Tc.for,jc=Fc?Tc:Tc&&Tc.withoutSetter||mc,Nc=function(e){if(!hc(_c,e)||!Bc&&"string"!=typeof _c[e]){var t="Symbol."+e;Bc&&hc(Tc,e)?_c[e]=Tc[e]:_c[e]=Fc&&Pc?Pc(t):jc(t)}return _c[e]},Ic={};Ic[Nc("toStringTag")]="z";var Rc="[object z]"===String(Ic),Lc=!kc((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),Mc=function(e){return"object"==typeof e?null!==e:bc(e)},zc=Ql.document,$c=Mc(zc)&&Mc(zc.createElement),Hc=function(e){return $c?zc.createElement(e):{}},Vc=!Lc&&!kc((function(){return 7!=Object.defineProperty(Hc("div"),"a",{get:function(){return 7}}).a})),Uc=Ql.String,Wc=Ql.TypeError,qc=function(e){if(Mc(e))return e;throw Wc(Uc(e)+" is not an object")},Gc=Function.prototype.call,Kc=Gc.bind?Gc.bind(Gc):function(){return Gc.apply(Gc,arguments)},Yc=sc({}.isPrototypeOf),Xc=Ql.Object,Zc=Fc?function(e){return"symbol"==typeof e}:function(e){var t=Ec("Symbol");return bc(t)&&Yc(t.prototype,Xc(e))},Jc=Ql.String,Qc=function(e){try{return Jc(e)}catch(t){return"Object"}},ef=Ql.TypeError,tf=function(e){if(bc(e))return e;throw ef(Qc(e)+" is not a function")},nf=function(e,t){var n=e[t];return null==n?void 0:tf(n)},rf=Ql.TypeError,of=Ql.TypeError,af=Nc("toPrimitive"),uf=function(e){var t=function(e,t){if(!Mc(e)||Zc(e))return e;var n,r=nf(e,af);if(r){if(void 0===t&&(t="default"),n=Kc(r,e,t),!Mc(n)||Zc(n))return n;throw of("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&bc(n=e.toString)&&!Mc(r=Kc(n,e)))return r;if(bc(n=e.valueOf)&&!Mc(r=Kc(n,e)))return r;if("string"!==t&&bc(n=e.toString)&&!Mc(r=Kc(n,e)))return r;throw rf("Can't convert object to primitive value")}(e,t)}(e,"string");return Zc(t)?t:t+""},sf=Ql.TypeError,lf=Object.defineProperty,cf={f:Lc?lf:function(e,t,n){if(qc(e),t=uf(t),qc(n),Vc)try{return lf(e,t,n)}catch(r){}if("get"in n||"set"in n)throw sf("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},ff=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},df=Lc?function(e,t,n){return cf.f(e,t,ff(1,n))}:function(e,t,n){return e[t]=n,e},pf=sc(Function.toString);bc(nc.inspectSource)||(nc.inspectSource=function(e){return pf(e)});var hf,gf,vf,yf=nc.inspectSource,mf=Ql.WeakMap,bf=bc(mf)&&/native code/.test(yf(mf)),wf=rc("keys"),Ef=function(e){return wf[e]||(wf[e]=mc(e))},Df={},Cf=Ql.TypeError,xf=Ql.WeakMap;if(bf||nc.state){var Sf=nc.state||(nc.state=new xf),Af=sc(Sf.get),Of=sc(Sf.has),kf=sc(Sf.set);hf=function(e,t){if(Of(Sf,e))throw new Cf("Object already initialized");return t.facade=e,kf(Sf,e,t),t},gf=function(e){return Af(Sf,e)||{}},vf=function(e){return Of(Sf,e)}}else{var Bf=Ef("state");Df[Bf]=!0,hf=function(e,t){if(hc(e,Bf))throw new Cf("Object already initialized");return t.facade=e,df(e,Bf,t),t},gf=function(e){return hc(e,Bf)?e[Bf]:{}},vf=function(e){return hc(e,Bf)}}var Ff={set:hf,get:gf,has:vf,enforce:function(e){return vf(e)?gf(e):hf(e,{})},getterFor:function(e){return function(t){var n;if(!Mc(t)||(n=gf(t)).type!==e)throw Cf("Incompatible receiver, "+e+" required");return n}}},_f=Function.prototype,Tf=Lc&&Object.getOwnPropertyDescriptor,Pf=hc(_f,"name"),jf={EXISTS:Pf,PROPER:Pf&&"something"===function(){}.name,CONFIGURABLE:Pf&&(!Lc||Lc&&Tf(_f,"name").configurable)},Nf=Yl((function(e){var t=jf.CONFIGURABLE,n=Ff.get,r=Ff.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;bc(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!hc(i,"name")||t&&i.name!==f)&&df(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==Ql?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:df(e,n,i)):l?e[n]=i:tc(n,i)})(Function.prototype,"toString",(function(){return bc(this)&&n(this).source||yf(this)}))})),If=sc({}.toString),Rf=sc("".slice),Lf=function(e){return Rf(If(e),8,-1)},Mf=Nc("toStringTag"),zf=Ql.Object,$f="Arguments"==Lf(function(){return arguments}()),Hf=Rc?Lf:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=zf(e),Mf))?n:$f?Lf(t):"Object"==(r=Lf(t))&&bc(t.callee)?"Arguments":r},Vf=Rc?{}.toString:function(){return"[object "+Hf(this)+"]"};Rc||Nf(Object.prototype,"toString",Vf,{unsafe:!0});var Uf={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Wf=Hc("span").classList,qf=Wf&&Wf.constructor&&Wf.constructor.prototype,Gf=qf===Object.prototype?void 0:qf,Kf=sc(sc.bind),Yf=function(e,t){return tf(e),void 0===t?e:Kf?Kf(e,t):function(){return e.apply(t,arguments)}},Xf=Ql.Object,Zf=sc("".split),Jf=kc((function(){return!Xf("z").propertyIsEnumerable(0)}))?function(e){return"String"==Lf(e)?Zf(e,""):Xf(e)}:Xf,Qf=Math.ceil,ed=Math.floor,td=function(e){var t=+e;return t!=t||0===t?0:(t>0?ed:Qf)(t)},nd=Math.min,rd=function(e){return e>0?nd(td(e),9007199254740991):0},od=function(e){return rd(e.length)},id=Array.isArray||function(e){return"Array"==Lf(e)},ad=function(){},ud=[],sd=Ec("Reflect","construct"),ld=/^\s*(?:class|function)\b/,cd=sc(ld.exec),fd=!ld.exec(ad),dd=function(e){if(!bc(e))return!1;try{return sd(ad,ud,e),!0}catch(t){return!1}},pd=!sd||kc((function(){var e;return dd(dd.call)||!dd(Object)||!dd((function(){e=!0}))||e}))?function(e){if(!bc(e))return!1;switch(Hf(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return fd||!!cd(ld,yf(e))}:dd,hd=Nc("species"),gd=Ql.Array,vd=function(e,t){return new(id(n=e)&&(r=n.constructor,(pd(r)&&(r===gd||id(r.prototype))||Mc(r)&&null===(r=r[hd]))&&(r=void 0)),void 0===r?gd:r)(0===t?0:t);var n,r},yd=sc([].push),md=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=dc(s),g=Jf(h),v=Yf(l,c),y=od(g),m=0,b=f||vd,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:yd(w,d)}else switch(e){case 4:return!1;case 7:yd(w,d)}return i?-1:r||o?o:w}},bd={forEach:md(0),map:md(1),filter:md(2),some:md(3),every:md(4),find:md(5),findIndex:md(6),filterReject:md(7)},wd=function(e,t){var n=[][e];return!!n&&kc((function(){n.call(null,t||function(){throw 1},1)}))},Ed=bd.forEach,Dd=wd("forEach")?[].forEach:function(e){return Ed(this,e,arguments.length>1?arguments[1]:void 0)},Cd=function(e){if(e&&e.forEach!==Dd)try{df(e,"forEach",Dd)}catch(eg){e.forEach=Dd}};for(var xd in Uf)Uf[xd]&&Cd(Ql[xd]&&Ql[xd].prototype);Cd(Gf);var Sd={}.propertyIsEnumerable,Ad=Object.getOwnPropertyDescriptor,Od=Ad&&!Sd.call({1:2},1)?function(e){var t=Ad(this,e);return!!t&&t.enumerable}:Sd,kd={f:Od},Bd=function(e){return Jf(cc(e))},Fd=Object.getOwnPropertyDescriptor,_d={f:Lc?Fd:function(e,t){if(e=Bd(e),t=uf(t),Vc)try{return Fd(e,t)}catch(n){}if(hc(e,t))return ff(!Kc(kd.f,e,t),e[t])}},Td=Math.max,Pd=Math.min,jd=function(e,t){var n=td(e);return n<0?Td(n+t,0):Pd(n,t)},Nd=function(e){return function(t,n,r){var o,i=Bd(t),a=od(i),u=jd(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},Id={includes:Nd(!0),indexOf:Nd(!1)},Rd=Id.indexOf,Ld=sc([].push),Md=function(e,t){var n,r=Bd(e),o=0,i=[];for(n in r)!hc(Df,n)&&hc(r,n)&&Ld(i,n);for(;t.length>o;)hc(r,n=t[o++])&&(~Rd(i,n)||Ld(i,n));return i},zd=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],$d=zd.concat("length","prototype"),Hd={f:Object.getOwnPropertyNames||function(e){return Md(e,$d)}},Vd={f:Object.getOwnPropertySymbols},Ud=sc([].concat),Wd=Ec("Reflect","ownKeys")||function(e){var t=Hd.f(qc(e)),n=Vd.f;return n?Ud(t,n(e)):t},qd=function(e,t){for(var n=Wd(t),r=cf.f,o=_d.f,i=0;i<n.length;i++){var a=n[i];hc(e,a)||r(e,a,o(t,a))}},Gd=/#|\.prototype\./,Kd=function(e,t){var n=Xd[Yd(e)];return n==Jd||n!=Zd&&(bc(t)?kc(t):!!t)},Yd=Kd.normalize=function(e){return String(e).replace(Gd,".").toLowerCase()},Xd=Kd.data={},Zd=Kd.NATIVE="N",Jd=Kd.POLYFILL="P",Qd=Kd,ep=_d.f,tp=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?Ql:l?Ql[u]||tc(u,{}):(Ql[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=ep(n,r))&&a.value:n[r],!Qd(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;qd(i,o)}(e.sham||o&&o.sham)&&df(i,"sham",!0),Nf(n,r,i,e)}},np=Nc("species"),rp=function(e){return Oc>=51||!kc((function(){var t=[];return(t.constructor={})[np]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},op=bd.map,ip=rp("map");tp({target:"Array",proto:!0,forced:!ip},{map:function(e){return op(this,e,arguments.length>1?arguments[1]:void 0)}});var ap=function(e,t,n){var r,o;qc(e);try{if(!(r=nf(e,"return"))){if("throw"===t)throw n;return n}r=Kc(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return qc(r),n},up=function(e,t,n,r){try{return r?t(qc(n)[0],n[1]):t(n)}catch(o){ap(e,"throw",o)}},sp={},lp=Nc("iterator"),cp=Array.prototype,fp=function(e){return void 0!==e&&(sp.Array===e||cp[lp]===e)},dp=function(e,t,n){var r=uf(t);r in e?cf.f(e,r,ff(0,n)):e[r]=n},pp=Nc("iterator"),hp=function(e){if(null!=e)return nf(e,pp)||nf(e,"@@iterator")||sp[Hf(e)]},gp=Ql.TypeError,vp=function(e,t){var n=arguments.length<2?hp(e):t;if(tf(n))return qc(Kc(n,e));throw gp(Qc(e)+" is not iterable")},yp=Ql.Array,mp=Nc("iterator"),bp=!1;try{var wp=0,Ep={next:function(){return{done:!!wp++}},return:function(){bp=!0}};Ep[mp]=function(){return this},Array.from(Ep,(function(){throw 2}))}catch(Qh){}var Dp=function(e,t){if(!t&&!bp)return!1;var n=!1;try{var r={};r[mp]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},Cp=!Dp((function(e){Array.from(e)}));tp({target:"Array",stat:!0,forced:Cp},{from:function(e){var t=dc(e),n=pd(this),r=arguments.length,o=r>1?arguments[1]:void 0,i=void 0!==o;i&&(o=Yf(o,r>2?arguments[2]:void 0));var a,u,s,l,c,f,d=hp(t),p=0;if(!d||this==yp&&fp(d))for(a=od(t),u=n?new this(a):yp(a);a>p;p++)f=i?o(t[p],p):t[p],dp(u,p,f);else for(c=(l=vp(t,d)).next,u=n?new this:[];!(s=Kc(c,l)).done;p++)f=i?up(l,o,[s.value,p],!0):s.value,dp(u,p,f);return u.length=p,u}});var xp,Sp=Ql.String,Ap=function(e){if("Symbol"===Hf(e))throw TypeError("Cannot convert a Symbol value to a string");return Sp(e)},Op=sc("".charAt),kp=sc("".charCodeAt),Bp=sc("".slice),Fp=function(e){return function(t,n){var r,o,i=Ap(cc(t)),a=td(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=kp(i,a))<55296||r>56319||a+1===u||(o=kp(i,a+1))<56320||o>57343?e?Op(i,a):r:e?Bp(i,a,a+2):o-56320+(r-55296<<10)+65536}},_p={codeAt:Fp(!1),charAt:Fp(!0)},Tp=Object.keys||function(e){return Md(e,zd)},Pp=Lc?Object.defineProperties:function(e,t){qc(e);for(var n,r=Bd(t),o=Tp(t),i=o.length,a=0;i>a;)cf.f(e,n=o[a++],r[n]);return e},jp=Ec("document","documentElement"),Np=Ef("IE_PROTO"),Ip=function(){},Rp=function(e){return"<script>"+e+"<\/script>"},Lp=function(e){e.write(Rp("")),e.close();var t=e.parentWindow.Object;return e=null,t},Mp=function(){try{xp=new ActiveXObject("htmlfile")}catch(r){}var e,t;Mp="undefined"!=typeof document?document.domain&&xp?Lp(xp):((t=Hc("iframe")).style.display="none",jp.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Rp("document.F=Object")),e.close(),e.F):Lp(xp);for(var n=zd.length;n--;)delete Mp.prototype[zd[n]];return Mp()};Df[Np]=!0;var zp,$p,Hp,Vp=Object.create||function(e,t){var n;return null!==e?(Ip.prototype=qc(e),n=new Ip,Ip.prototype=null,n[Np]=e):n=Mp(),void 0===t?n:Pp(n,t)},Up=!kc((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),Wp=Ef("IE_PROTO"),qp=Ql.Object,Gp=qp.prototype,Kp=Up?qp.getPrototypeOf:function(e){var t=dc(e);if(hc(t,Wp))return t[Wp];var n=t.constructor;return bc(n)&&t instanceof n?n.prototype:t instanceof qp?Gp:null},Yp=Nc("iterator"),Xp=!1;[].keys&&("next"in(Hp=[].keys())?($p=Kp(Kp(Hp)))!==Object.prototype&&(zp=$p):Xp=!0);var Zp=null==zp||kc((function(){var e={};return zp[Yp].call(e)!==e}));Zp&&(zp={}),bc(zp[Yp])||Nf(zp,Yp,(function(){return this}));var Jp={IteratorPrototype:zp,BUGGY_SAFARI_ITERATORS:Xp},Qp=cf.f,eh=Nc("toStringTag"),th=function(e,t,n){e&&!hc(e=n?e:e.prototype,eh)&&Qp(e,eh,{configurable:!0,value:t})},nh=Jp.IteratorPrototype,rh=function(){return this},oh=Ql.String,ih=Ql.TypeError,ah=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=sc(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return qc(n),function(e){if("object"==typeof e||bc(e))return e;throw ih("Can't set "+oh(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),uh=jf.PROPER,sh=jf.CONFIGURABLE,lh=Jp.IteratorPrototype,ch=Jp.BUGGY_SAFARI_ITERATORS,fh=Nc("iterator"),dh=function(){return this},ph=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=Vp(nh,{next:ff(1,s)}),th(u,l,!1),sp[l]=rh;var c,f,d,p=function(e){if(e===o&&m)return m;if(!ch&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[fh]||v["@@iterator"]||o&&v[o],m=!ch&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=Kp(b.call(new e)))!==Object.prototype&&c.next&&(Kp(c)!==lh&&(ah?ah(c,lh):bc(c[fh])||Nf(c,fh,dh)),th(c,h,!0)),uh&&"values"==o&&y&&"values"!==y.name&&(sh?df(v,"name","values"):(g=!0,m=function(){return Kc(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(ch||g||!(d in v))&&Nf(v,d,f[d]);else tp({target:t,proto:!0,forced:ch||g},f);return v[fh]!==m&&Nf(v,fh,m,{name:o}),sp[t]=m,f},hh=_p.charAt,gh=Ff.set,vh=Ff.getterFor("String Iterator");ph(String,"String",(function(e){gh(this,{type:"String Iterator",string:Ap(e),index:0})}),(function(){var e,t=vh(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=hh(n,r),t.index+=e.length,{value:e,done:!1})}));var yh=kc((function(){Tp(1)}));
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */function mh(e){return"[object Object]"===Object.prototype.toString.call(e)}tp({target:"Object",stat:!0,forced:yh},{keys:function(e){return Tp(dc(e))}});var bh={isHistory(e){return!1!==mh(t=e)&&(void 0===(n=t.constructor)||!1!==mh(r=n.prototype)&&!1!==r.hasOwnProperty("isPrototypeOf"))&&Array.isArray(e.redos)&&Array.isArray(e.undos)&&(0===e.redos.length||St.isOperationList(e.redos[0]))&&(0===e.undos.length||St.isOperationList(e.undos[0]));var t,n,r}},wh=new WeakMap,Eh=new WeakMap,Dh={isHistoryEditor:e=>bh.isHistory(e.history)&&yt.isEditor(e),isMerging:e=>Eh.get(e),isSaving:e=>wh.get(e),redo(e){e.redo()},undo(e){e.undo()},withoutMerging(e,t){var n=Dh.isMerging(e);Eh.set(e,!1),t(),Eh.set(e,n)},withoutSaving(e,t){var n=Dh.isSaving(e);wh.set(e,!1),t(),wh.set(e,n)}},Ch=function(){var e=qc(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},xh=jf.PROPER,Sh=RegExp.prototype,Ah=Sh.toString,Oh=sc(Ch),kh=kc((function(){return"/a/b"!=Ah.call({source:"a",flags:"b"})})),Bh=xh&&"toString"!=Ah.name;(kh||Bh)&&Nf(RegExp.prototype,"toString",(function(){var e=qc(this),t=Ap(e.source),n=e.flags;return"/"+t+"/"+Ap(void 0===n&&Yc(Sh,e)&&!("flags"in Sh)?Oh(e):n)}),{unsafe:!0});var Fh=Nc("unscopables"),_h=Array.prototype;null==_h[Fh]&&cf.f(_h,Fh,{configurable:!0,value:Vp(null)});var Th=function(e){_h[Fh][e]=!0},Ph=Id.includes;tp({target:"Array",proto:!0},{includes:function(e){return Ph(this,e,arguments.length>1?arguments[1]:void 0)}}),Th("includes");var jh=Nc("match"),Nh=function(e){var t;return Mc(e)&&(void 0!==(t=e[jh])?!!t:"RegExp"==Lf(e))},Ih=Ql.TypeError,Rh=function(e){if(Nh(e))throw Ih("The method doesn't accept regular expressions");return e},Lh=Nc("match"),Mh=function(e){var t=/./;try{"/./"[e](t)}catch(mG){try{return t[Lh]=!1,"/./"[e](t)}catch(n){}}return!1},zh=sc("".indexOf);tp({target:"String",proto:!0,forced:!Mh("includes")},{includes:function(e){return!!~zh(Ap(cc(this)),Ap(Rh(e)),arguments.length>1?arguments[1]:void 0)}});var $h=/"/g,Hh=sc("".replace);tp({target:"String",proto:!0,forced:("anchor",kc((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3})))},{anchor:function(e){return"a","name",t=e,n=Ap(cc(this)),r="<a",(r+=' name="'+Hh(Ap(t),$h,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var Vh,Uh=_d.f,Wh=sc("".endsWith),qh=sc("".slice),Gh=Math.min,Kh=Mh("endsWith"),Yh=!(Kh||(Vh=Uh(String.prototype,"endsWith"),!Vh||Vh.writable));tp({target:"String",proto:!0,forced:!Yh&&!Kh},{endsWith:function(e){var t=Ap(cc(this));Rh(e);var n=arguments.length>1?arguments[1]:void 0,r=t.length,o=void 0===n?r:Gh(rd(n),r),i=Ap(e);return Wh?Wh(t,i,o):qh(t,o-i.length,o)===i}});var Xh=sc([].join),Zh=Jf!=Object,Jh=wd("join",",");tp({target:"Array",proto:!0,forced:Zh||!Jh},{join:function(e){return Xh(Bd(this),void 0===e?",":e)}});var Qh,eg,tg=Ql.RegExp,ng=kc((function(){var e=tg("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),rg=ng||kc((function(){return!tg("a","y").sticky})),og={BROKEN_CARET:ng||kc((function(){var e=tg("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:rg,UNSUPPORTED_Y:ng},ig=Ql.RegExp,ag=kc((function(){var e=ig(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),ug=Ql.RegExp,sg=kc((function(){var e=ug("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),lg=Ff.get,cg=rc("native-string-replace",String.prototype.replace),fg=RegExp.prototype.exec,dg=fg,pg=sc("".charAt),hg=sc("".indexOf),gg=sc("".replace),vg=sc("".slice),yg=(eg=/b*/g,Kc(fg,Qh=/a/,"a"),Kc(fg,eg,"a"),0!==Qh.lastIndex||0!==eg.lastIndex),mg=og.BROKEN_CARET,bg=void 0!==/()??/.exec("")[1];(yg||bg||mg||ag||sg)&&(dg=function(e){var t,n,r,o,i,a,u,s=this,l=lg(s),c=Ap(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=Kc(dg,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=mg&&s.sticky,h=Kc(Ch,s),g=s.source,v=0,y=c;if(p&&(h=gg(h,"y",""),-1===hg(h,"g")&&(h+="g"),y=vg(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==pg(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),bg&&(n=new RegExp("^"+g+"$(?!\\s)",h)),yg&&(r=s.lastIndex),o=Kc(fg,p?n:s,y),p?o?(o.input=vg(o.input,v),o[0]=vg(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:yg&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),bg&&o&&o.length>1&&Kc(cg,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=Vp(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var wg=dg;tp({target:"RegExp",proto:!0,forced:/./.exec!==wg},{exec:wg});var Eg=Function.prototype,Dg=Eg.apply,Cg=Eg.bind,xg=Eg.call,Sg="object"==typeof Reflect&&Reflect.apply||(Cg?xg.bind(Dg):function(){return xg.apply(Dg,arguments)}),Ag=Nc("species"),Og=RegExp.prototype,kg=function(e,t,n,r){var o=Nc(e),i=!kc((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!kc((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[Ag]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=sc(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=sc(e),s=t.exec;return s===wg||s===Og.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));Nf(String.prototype,e,s[0]),Nf(Og,o,s[1])}r&&df(Og[o],"sham",!0)},Bg=_p.charAt,Fg=function(e,t,n){return t+(n?Bg(e,t).length:1)},_g=Math.floor,Tg=sc("".charAt),Pg=sc("".replace),jg=sc("".slice),Ng=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,Ig=/\$([$&'`]|\d{1,2})/g,Rg=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=Ig;return void 0!==o&&(o=dc(o),s=Ng),Pg(i,s,(function(i,s){var l;switch(Tg(s,0)){case"$":return"$";case"&":return e;case"`":return jg(t,0,n);case"'":return jg(t,a);case"<":l=o[jg(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=_g(c/10);return 0===f?i:f<=u?void 0===r[f-1]?Tg(s,1):r[f-1]+Tg(s,1):i}l=r[c-1]}return void 0===l?"":l}))},Lg=Ql.TypeError,Mg=function(e,t){var n=e.exec;if(bc(n)){var r=Kc(n,e,t);return null!==r&&qc(r),r}if("RegExp"===Lf(e))return Kc(wg,e,t);throw Lg("RegExp#exec called on incompatible receiver")},zg=Nc("replace"),$g=Math.max,Hg=Math.min,Vg=sc([].concat),Ug=sc([].push),Wg=sc("".indexOf),qg=sc("".slice),Gg="$0"==="a".replace(/./,"$0"),Kg=!!/./[zg]&&""===/./[zg]("a","$0");kg("replace",(function(e,t,n){var r=Kg?"$":"$0";return[function(e,n){var r=cc(this),o=null==e?void 0:nf(e,zg);return o?Kc(o,e,r,n):Kc(t,Ap(r),e,n)},function(e,o){var i=qc(this),a=Ap(e);if("string"==typeof o&&-1===Wg(o,r)&&-1===Wg(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=bc(o);s||(o=Ap(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=Mg(i,a);if(null===d)break;if(Ug(f,d),!l)break;""===Ap(d[0])&&(i.lastIndex=Fg(a,rd(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=Ap((d=f[v])[0]),m=$g(Hg(td(d.index),a.length),0),b=[],w=1;w<d.length;w++)Ug(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=Vg([y],b,m,a);void 0!==E&&Ug(D,E);var C=Ap(Sg(o,void 0,D))}else C=Rg(y,a,m,b,E,o);m>=g&&(h+=qg(a,g,m)+C,g=m+y.length)}return h+qg(a,g)}]}),!!kc((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!Gg||Kg);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var Yg=function(e,t){return(Yg=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function Xg(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Yg(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Zg=function(){return Zg=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Zg.apply(this,arguments)};function Jg(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function Qg(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function ev(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}var tv=0,nv=function(){this.id=""+tv++},rv=Ff.set,ov=Ff.getterFor("Array Iterator"),iv=ph(Array,"Array",(function(e,t){rv(this,{type:"Array Iterator",target:Bd(e),index:0,kind:t})}),(function(){var e=ov(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");sp.Arguments=sp.Array,Th("keys"),Th("values"),Th("entries");var av=function(e,t,n){for(var r in t)Nf(e,r,t[r],n);return e},uv=Ql.Array,sv=Math.max,lv=function(e,t,n){for(var r=od(e),o=jd(t,r),i=jd(void 0===n?r:n,r),a=uv(sv(i-o,0)),u=0;o<i;o++,u++)dp(a,u,e[o]);return a.length=u,a},cv=Hd.f,fv="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],dv={f:function(e){return fv&&"Window"==Lf(e)?function(e){try{return cv(e)}catch(t){return lv(fv)}}(e):cv(Bd(e))}},pv=kc((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),hv=Object.isExtensible,gv=kc((function(){hv(1)}))||pv?function(e){return!!Mc(e)&&(!pv||"ArrayBuffer"!=Lf(e))&&(!hv||hv(e))}:hv,vv=!kc((function(){return Object.isExtensible(Object.preventExtensions({}))})),yv=Yl((function(e){var t=cf.f,n=!1,r=mc("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=Hd.f,t=sc([].splice),o={};o[r]=1,e(o).length&&(Hd.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},tp({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:dv.f}))},fastKey:function(e,t){if(!Mc(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!hc(e,r)){if(!gv(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!hc(e,r)){if(!gv(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return vv&&n&&gv(e)&&!hc(e,r)&&i(e),e}};Df[r]=!0})),mv=Ql.TypeError,bv=function(e,t){this.stopped=e,this.result=t},wv=bv.prototype,Ev=function(e,t,n){var r,o,i,a,u,s,l,c=n&&n.that,f=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),p=!(!n||!n.INTERRUPTED),h=Yf(t,c),g=function(e){return r&&ap(r,"normal",e),new bv(!0,e)},v=function(e){return f?(qc(e),p?h(e[0],e[1],g):h(e[0],e[1])):p?h(e,g):h(e)};if(d)r=e;else{if(!(o=hp(e)))throw mv(Qc(e)+" is not iterable");if(fp(o)){for(i=0,a=od(e);a>i;i++)if((u=v(e[i]))&&Yc(wv,u))return u;return new bv(!1)}r=vp(e,o)}for(s=r.next;!(l=Kc(s,r)).done;){try{u=v(l.value)}catch(y){ap(r,"throw",y)}if("object"==typeof u&&u&&Yc(wv,u))return u}return new bv(!1)},Dv=Ql.TypeError,Cv=function(e,t){if(Yc(t,e))return e;throw Dv("Incorrect invocation")},xv=function(e,t,n){var r,o;return ah&&bc(r=t.constructor)&&r!==n&&Mc(o=r.prototype)&&o!==n.prototype&&ah(e,o),e},Sv=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=Ql[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=sc(u[e]);Nf(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!Mc(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!Mc(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!Mc(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(Qd(e,!bc(a)||!(o||u.forEach&&!kc((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),yv.enable();else if(Qd(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=kc((function(){f.has(1)})),h=Dp((function(e){new a(e)})),g=!o&&kc((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){Cv(e,u);var n=xv(new a,e,s);return null!=t&&Ev(t,n[i],{that:n,AS_ENTRIES:r}),n}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,tp({global:!0,forced:s!=a},l),th(s,e),o||n.setStrong(s,e,r),s},Av=yv.getWeakData,Ov=Ff.set,kv=Ff.getterFor,Bv=bd.find,Fv=bd.findIndex,_v=sc([].splice),Tv=0,Pv=function(e){return e.frozen||(e.frozen=new jv)},jv=function(){this.entries=[]},Nv=function(e,t){return Bv(e.entries,(function(e){return e[0]===t}))};jv.prototype={get:function(e){var t=Nv(this,e);if(t)return t[1]},has:function(e){return!!Nv(this,e)},set:function(e,t){var n=Nv(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=Fv(this.entries,(function(t){return t[0]===e}));return~t&&_v(this.entries,t,1),!!~t}};var Iv,Rv={getConstructor:function(e,t,n,r){var o=e((function(e,o){Cv(e,i),Ov(e,{type:t,id:Tv++,frozen:void 0}),null!=o&&Ev(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=kv(t),u=function(e,t,n){var r=a(e),o=Av(qc(t),!0);return!0===o?Pv(r).set(t,n):o[r.id]=n,e};return av(i,{delete:function(e){var t=a(this);if(!Mc(e))return!1;var n=Av(e);return!0===n?Pv(t).delete(e):n&&hc(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!Mc(e))return!1;var n=Av(e);return!0===n?Pv(t).has(e):n&&hc(n,t.id)}}),av(i,n?{get:function(e){var t=a(this);if(Mc(e)){var n=Av(e);return!0===n?Pv(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},Lv=Ff.enforce,Mv=!Ql.ActiveXObject&&"ActiveXObject"in Ql,zv=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},$v=Sv("WeakMap",zv,Rv);if(bf&&Mv){Iv=Rv.getConstructor(zv,"WeakMap",!0),yv.enable();var Hv=$v.prototype,Vv=sc(Hv.delete),Uv=sc(Hv.has),Wv=sc(Hv.get),qv=sc(Hv.set);av(Hv,{delete:function(e){if(Mc(e)&&!gv(e)){var t=Lv(this);return t.frozen||(t.frozen=new Iv),Vv(this,e)||t.frozen.delete(e)}return Vv(this,e)},has:function(e){if(Mc(e)&&!gv(e)){var t=Lv(this);return t.frozen||(t.frozen=new Iv),Uv(this,e)||t.frozen.has(e)}return Uv(this,e)},get:function(e){if(Mc(e)&&!gv(e)){var t=Lv(this);return t.frozen||(t.frozen=new Iv),Uv(this,e)?Wv(this,e):t.frozen.get(e)}return Wv(this,e)},set:function(e,t){if(Mc(e)&&!gv(e)){var n=Lv(this);n.frozen||(n.frozen=new Iv),Uv(this,e)?qv(this,e,t):n.frozen.set(e,t)}else qv(this,e,t);return this}})}var Gv=Nc("iterator"),Kv=Nc("toStringTag"),Yv=iv.values,Xv=function(e,t){if(e){if(e[Gv]!==Yv)try{df(e,Gv,Yv)}catch(r){e[Gv]=Yv}if(e[Kv]||df(e,Kv,t),Uf[t])for(var n in iv)if(e[n]!==iv[n])try{df(e,n,iv[n])}catch(r){e[n]=iv[n]}}};for(var Zv in Uf)Xv(Ql[Zv]&&Ql[Zv].prototype,Zv);Xv(Gf,"DOMTokenList");var Jv=new WeakMap,Qv=new WeakMap,ey=new WeakMap,ty=new WeakMap,ny=new WeakMap,ry=new WeakMap,oy=new WeakMap,iy=new WeakMap,ay=new WeakMap,uy=new WeakMap,sy=new WeakMap,ly=new WeakMap,cy=new WeakMap,fy=new WeakMap,dy=new WeakMap,py=new WeakMap,hy=new WeakMap,gy=new WeakMap,vy=new WeakMap,yy=new WeakMap,my=new WeakMap,by=new WeakMap,wy=new WeakMap,Ey=new WeakMap,Dy=new WeakMap,Cy=bd.find,xy=!0;"find"in[]&&Array(1).find((function(){xy=!1})),tp({target:"Array",proto:!0,forced:xy},{find:function(e){return Cy(this,e,arguments.length>1?arguments[1]:void 0)}}),Th("find"),tp({global:!0},{globalThis:Ql});const Sy=["area","base","basefont","bgsound","br","col","command","embed","frame","hr","image","img","input","isindex","keygen","link","menuitem","meta","nextid","param","source","track","wbr"];Wr&&(Fr.fn.css=Wr),Zr&&(Fr.fn.append=Zr),_r&&(Fr.fn.addClass=_r),Tr&&(Fr.fn.removeClass=Tr),Pr&&(Fr.fn.hasClass=Pr),Lr&&(Fr.fn.on=Lr),so&&(Fr.fn.focus=so),jr&&(Fr.fn.attr=jr),Nr&&(Fr.fn.removeAttr=Nr),Vr&&(Fr.fn.hide=Vr),Ur&&(Fr.fn.show=Ur),Hr&&(Fr.fn.offset=Hr),zr&&(Fr.fn.width=zr),$r&&(Fr.fn.height=$r),Qr&&(Fr.fn.parent=Qr),eo&&(Fr.fn.parents=eo),Xr&&(Fr.fn.is=Xr),Ir&&(Fr.fn.dataset=Ir),Rr&&(Fr.fn.val=Rr),Yr&&(Fr.fn.text=Yr),Kr&&(Fr.fn.html=Kr),no&&(Fr.fn.children=no),ro&&(Fr.fn.remove=ro),to&&(Fr.fn.find=to),qr&&(Fr.fn.each=qr),oo&&(Fr.fn.empty=oo);var Ay,Oy=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||null},ky=function(e){return By(e)&&1===e.nodeType},By=function(e){var t=Oy(e);return!!t&&e instanceof t.Node},Fy=function(e){var t=e&&e.anchorNode&&Oy(e.anchorNode);return!!t&&e instanceof t.Selection},_y=function(e){return By(e)&&3===e.nodeType},Ty=function(e){var t,n,r;return null!==(t=window.document.getElementById(e))&&void 0!==t?t:(null===(r=null===(n=window.document.activeElement)||void 0===n?void 0:n.shadowRoot)||void 0===r?void 0:r.getElementById(e))||null},Py=function(e,t,n){for(var r,o=e.childNodes,i=o[t],a=t,u=!1,s=!1;(By(r=i)&&8===r.nodeType||ky(i)&&0===i.childNodes.length||ky(i)&&"false"===i.getAttribute("contenteditable"))&&(!u||!s);)a>=o.length?(u=!0,a=t-1,n="backward"):a<0?(s=!0,a=t+1,n="forward"):(i=o[a],t=a,a+="forward"===n?1:-1);return[i,t]},jy=function(e,t,n){return Qg(Py(e,t,n),1)[0]},Ny=function e(t){var n,r,o="";if(_y(t)&&t.nodeValue)return t.nodeValue;if(ky(t)){try{for(var i=Jg(Array.from(t.childNodes)),a=i.next();!a.done;a=i.next())o+=e(a.value)}catch(Qh){n={error:Qh}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}var u=getComputedStyle(t).getPropertyValue("display");"block"!==u&&"list"!==u&&"table-row"!==u&&"BR"!==t.tagName||(o+="\n")}return o};function Iy(e,t){if(!(e instanceof HTMLElement&&"true"===e.dataset.slateVoid))for(var n=e.childNodes,r=n.length;r--;){var o=n[r],i=o.nodeType;3==i?t(o,e):1!=i&&9!=i&&11!=i||Iy(o,t)}}function Ry(e){if(0===e.length)return"";var t=e[0];return t.nodeType!==Ay.ELEMENT_NODE?"":t.tagName.toLowerCase()}!function(e){e[e.ELEMENT_NODE=1]="ELEMENT_NODE",e[e.TEXT_NODE=3]="TEXT_NODE",e[e.CDATA_SECTION_NODE=4]="CDATA_SECTION_NODE",e[e.PROCESSING_INSTRUCTION_NODE=7]="PROCESSING_INSTRUCTION_NODE",e[e.COMMENT_NODE=8]="COMMENT_NODE",e[e.DOCUMENT_NODE=9]="DOCUMENT_NODE",e[e.DOCUMENT_TYPE_NODE=10]="DOCUMENT_TYPE_NODE",e[e.DOCUMENT_FRAGMENT_NODE=11]="DOCUMENT_FRAGMENT_NODE"}(Ay||(Ay={})),void 0!==globalThis.navigator&&void 0!==globalThis.window&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&globalThis.window.MSStream;var Ly="undefined"!=typeof navigator&&/Mac OS X/.test(navigator.userAgent),My="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);"undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])(?:\.)).*/i.test(navigator.userAgent);var zy="undefined"!=typeof navigator&&/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),$y="undefined"!=typeof navigator&&/Edge?\/(?:[0-6][0-9]|[0-7][0-8])(?:\.)/i.test(navigator.userAgent),Hy="undefined"!=typeof navigator&&/Chrome?\/(?:[0-7][0-5]|[0-6][0-9])(?:\.)/i.test(navigator.userAgent),Vy="undefined"!=typeof navigator&&/Chrome/i.test(navigator.userAgent);"undefined"!=typeof navigator&&/.*QQBrowser/.test(navigator.userAgent);var Uy=!Hy&&!$y&&"undefined"!=typeof globalThis&&globalThis.InputEvent&&"function"==typeof globalThis.InputEvent.prototype.getTargetRanges,Wy={getWindow:function(e){var t=my.get(e);if(!t)throw new Error("Unable to find a host window element for this editor");return t},findKey:function(e,t){var n=yy.get(t);return n||(n=new nv,yy.set(t,n)),n},setNewKey:function(e){var t=new nv;yy.set(e,t)},findPath:function(e,t){for(var n=[],r=t;;){var o=dy.get(r);if(null==o){if(yt.isEditor(r))return n;break}var i=fy.get(r);if(null==i)break;n.unshift(i),r=o}throw new Error("Unable to find the path for Slate node: "+JSON.stringify(t))},findDocumentOrShadowRoot:function(e){if(e.isDestroyed)return window.document;var t=Wy.toDOMNode(e,e),n=t.getRootNode();return(n instanceof Document||n instanceof ShadowRoot)&&null!=n.getSelection?n:t.ownerDocument},getParentNode:function(e,t){return dy.get(t)||null},getParentsNodes:function(e,t){for(var n=[],r=t;r!==e&&null!=r;){var o=Wy.getParentNode(e,r);if(null==o)break;n.push(o),r=o}return n},getTopNode:function(e,t){var n=[Wy.findPath(e,t)[0]];return Dt.get(e,n)},toDOMNode:function(e,t){var n;if(yt.isEditor(t))n=py.get(e);else{var r=Wy.findKey(e,t);n=gy.get(r)}if(!n)throw new Error("Cannot resolve a DOM node from Slate node: "+JSON.stringify(t));return n},hasDOMNode:function(e,t,n){void 0===n&&(n={});var r,o=n.editable,i=void 0!==o&&o,a=Wy.toDOMNode(e,e);try{r=ky(t)?t:t.parentElement}catch(u){if(!u.message.includes('Permission denied to access property "nodeType"'))throw u}return!!r&&r.closest("[data-slate-editor]")===a&&(!i||r.isContentEditable||!!r.getAttribute("data-slate-zero-width"))},toDOMRange:function(e,t){var n=t.anchor,r=t.focus,o=jt.isBackward(t),i=Wy.toDOMPoint(e,n),a=jt.isCollapsed(t)?i:Wy.toDOMPoint(e,r),u=Wy.getWindow(e).document.createRange(),s=Qg(o?a:i,2),l=s[0],c=s[1],f=Qg(o?i:a,2),d=f[0],p=f[1],h=!!(ky(l)?l:l.parentElement).getAttribute("data-slate-zero-width"),g=!!(ky(d)?d:d.parentElement).getAttribute("data-slate-zero-width");return u.setStart(l,h?1:c),u.setEnd(d,g?1:p),u},toDOMPoint:function(e,t){var n,r,o,i=Qg(yt.node(e,t.path),1)[0],a=Wy.toDOMNode(e,i);yt.void(e,{at:t})&&(t={path:t.path,offset:0});var u=Array.from(a.querySelectorAll("[data-slate-string], [data-slate-zero-width]")),s=0;try{for(var l=Jg(u),c=l.next();!c.done;c=l.next()){var f=c.value,d=f.childNodes[0];if(null!=d&&null!=d.textContent){var p=d.textContent.length,h=f.getAttribute("data-slate-length"),g=s+(null==h?p:parseInt(h,10));if(t.offset<=g){o=[d,Math.min(p,Math.max(0,t.offset-s))];break}s=g}}}catch(Qh){n={error:Qh}}finally{try{c&&!c.done&&(r=l.return)&&r.call(l)}finally{if(n)throw n.error}}if(!o)throw new Error("Cannot resolve a DOM point from Slate point: "+JSON.stringify(t));return o},toSlateNode:function(e,t){var n=ky(t)?t:t.parentElement;n&&!n.hasAttribute("data-slate-node")&&(n=n.closest("[data-slate-node]"));var r=n?hy.get(n):null;if(!r)throw new Error("Cannot resolve a Slate node from DOM node: "+n);return r},findEventRange:function(e,t){"nativeEvent"in t&&(t=t.nativeEvent);var n=t.clientX,r=t.clientY,o=t.target;if(null==n||null==r)throw new Error("Cannot resolve a Slate range from a DOM event: "+t);var i,a=Wy.toSlateNode(e,t.target),u=Wy.findPath(e,a);if(yt.isVoid(e,a)){var s=o.getBoundingClientRect(),l=e.isInline(a)?n-s.left<s.left+s.width-n:r-s.top<s.top+s.height-r,c=yt.point(e,u,{edge:l?"start":"end"}),f=l?yt.before(e,c):yt.after(e,c);if(f)return yt.range(e,f)}var d=this.getWindow(e).document;if(d.caretRangeFromPoint)i=d.caretRangeFromPoint(n,r);else{var p=d.caretPositionFromPoint(n,r);p&&((i=d.createRange()).setStart(p.offsetNode,p.offset),i.setEnd(p.offsetNode,p.offset))}if(!i)throw new Error("Cannot resolve a Slate range from a DOM event: "+t);return Wy.toSlateRange(e,i,{exactMatch:!1,suppressThrow:!1})},toSlateRange:function(e,t,n){var r,o,i,a,u,s=n.exactMatch,l=n.suppressThrow;if((Fy(t)?t.anchorNode:t.startContainer)&&(Fy(t)?(r=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,u=Vy&&window.document.activeElement&&window.document.activeElement.shadowRoot?t.anchorNode===t.focusNode&&t.anchorOffset===t.focusOffset:t.isCollapsed):(r=t.startContainer,o=t.startOffset,i=t.endContainer,a=t.endOffset,u=t.collapsed)),null==r||null==i||null==o||null==a)throw new Error("Cannot resolve a Slate range from DOM range: "+t);var c=Wy.toSlatePoint(e,[r,o],{exactMatch:s,suppressThrow:l});if(!c)return null;var f=u?c:Wy.toSlatePoint(e,[i,a],{exactMatch:s,suppressThrow:l});if(!f)return null;var d={anchor:c,focus:f};return jt.isExpanded(d)&&jt.isForward(d)&&ky(i)&&yt.void(e,{at:d.focus,mode:"highest"})&&(d=yt.unhangRange(e,d,{voids:!0})),d},toSlatePoint:function(e,t,n){var r,o=n.exactMatch,i=n.suppressThrow,a=Qg(o?t:function(e){var t,n=Qg(e,2),r=n[0],o=n[1];if(ky(r)&&r.childNodes.length){var i=o===r.childNodes.length,a=i?o-1:o;for(r=(t=Qg(Py(r,a,i?"backward":"forward"),2))[0],i=(a=t[1])<o;ky(r)&&r.childNodes.length;){var u=i?r.childNodes.length-1:0;r=jy(r,u,i?"backward":"forward")}o=i&&null!=r.textContent?r.textContent.length:0}return[r,o]}(t),2),u=a[0],s=a[1],l=u.parentNode,c=null,f=0;if(l){var d=l.closest('[data-slate-void="true"]'),p=l.closest("[data-slate-leaf]"),h=null;if(p){c=p.closest('[data-slate-node="text"]');var g=Wy.getWindow(e).document.createRange();g.setStart(c,0),g.setEnd(u,s);var v=g.cloneContents();ev(ev([],Qg(gr(v.querySelectorAll("[data-slate-zero-width]")))),Qg(gr(v.querySelectorAll("[contenteditable=false]")))).forEach((function(e){e.parentNode.removeChild(e)})),f=v.textContent.length,h=c}else d&&((p=d.querySelector("[data-slate-leaf]"))?(c=p.closest('[data-slate-node="text"]'),f=(h=p).textContent.length,h.querySelectorAll("[data-slate-zero-width]").forEach((function(e){f-=e.textContent.length}))):f=1);h&&f===h.textContent.length&&(l.hasAttribute("data-slate-zero-width")||My&&(null===(r=h.textContent)||void 0===r?void 0:r.endsWith("\n")))&&f--}if(!c){if(i)return null;throw new Error("Cannot resolve a Slate point from DOM point: "+t)}var y=Wy.toSlateNode(e,c);return{path:Wy.findPath(e,y),offset:f}},hasRange:function(e,t){var n=t.anchor,r=t.focus;return yt.hasPath(e,n.path)&&yt.hasPath(e,r.path)},getNodeType:function(e){return ft.isElement(e)?e.type:""},checkNodeType:function(e,t){return this.getNodeType(e)===t},getNodesStr:function(e){return e.map((function(e){return Dt.string(e)})).join("")},getSelectedElems:function(e){var t,n,r=[],o=yt.nodes(e,{universal:!0});try{for(var i=Jg(o),a=i.next();!a.done;a=i.next()){var u=Qg(a.value,1)[0];ft.isElement(u)&&r.push(u)}}catch(Qh){t={error:Qh}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r},getSelectedNodeByType:function(e,t){var n=this,r=Qg(yt.nodes(e,{match:function(e){return n.checkNodeType(e,t)},universal:!0}),1),o=r[0];return null==o?null:o[0]},getSelectedTextNode:function(e){var t=Qg(yt.nodes(e,{match:function(e){return $t.isText(e)},universal:!0}),1),n=t[0];return null==n?null:n[0]},isNodeSelected:function(e,t){var n=Qg(yt.nodes(e,{match:function(e){return e===t},universal:!0}),1),r=n[0];return null!=r&&Qg(r,1)[0]===t},isSelectionAtLineEnd:function(e,t){var n=e.selection;return!!n&&(yt.isEnd(e,n.anchor,t)||yt.isEnd(e,n.focus,t))},getTextarea:function(e){var t=Jv.get(e);if(null==t)throw new Error("Cannot find textarea instance by editor");return t},getToolbar:function(e){return ty.get(e)||null},getHoverbar:function(e){return ry.get(e)||null},normalizeContent:function(e){e.children.forEach((function(t,n){e.normalizeNode([t,[n]])}))},getLeftLengthOfMaxLength:function(e){var t=e.getConfig(),n=t.maxLength,r=t.onMaxLength;if("number"!=typeof n||n<=0)return 1/0;var o=n-e.getText().replace(/\r|\n|(\r\n)/g,"").length;return o<=0&&r&&r(e),o},cleanExposedTexNodeInSelectionBlock:function(e){var t,n,r,o,i=Wy.getTextarea(e).$textArea,a=null==i?void 0:i[0].childNodes;if(a)try{for(var u=Jg(Array.from(a)),s=u.next();!s.done;s=u.next()){var l=s.value;if(3!==l.nodeType)break;l.remove()}}catch(Qh){t={error:Qh}}finally{try{s&&!s.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}var c=yt.nodes(e,{match:function(t){return!(!ft.isElement(t)||e.isInline(t))},universal:!0});try{for(var f=Jg(c),d=f.next();!d.done;d=f.next()){var p=d.value;if(null!=p){var h=p[0];Iy(Wy.toDOMNode(e,h),(function(e,t){var n=Fr(t);n.attr("data-slate-string")||n.attr("data-slate-zero-width")||t.removeChild(e)}))}}}catch(Qh){r={error:Qh}}finally{try{d&&!d.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}},isLastNode:function(e,t){var n=e.children||[];return n[n.length-1]===t},genEmptyParagraph:function(){return{type:"paragraph",children:[{text:""}]}}},qy=1,Gy={},Ky={};var Yy=Nc("species"),Xy=function(e){var t=Ec(e),n=cf.f;Lc&&t&&!t[Yy]&&n(t,Yy,{configurable:!0,get:function(){return this}})},Zy=cf.f,Jy=yv.fastKey,Qy=Ff.set,em=Ff.getterFor,tm={getConstructor:function(e,t,n,r){var o=e((function(e,o){Cv(e,i),Qy(e,{type:t,index:Vp(null),first:void 0,last:void 0,size:0}),Lc||(e.size=0),null!=o&&Ev(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=em(t),u=function(e,t,n){var r,o,i=a(e),u=s(e,t);return u?u.value=n:(i.last=u={index:o=Jy(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=u),r&&(r.next=u),Lc?i.size++:e.size++,"F"!==o&&(i.index[o]=u)),e},s=function(e,t){var n,r=a(e),o=Jy(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return av(i,{clear:function(){for(var e=a(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,Lc?e.size=0:this.size=0},delete:function(e){var t=this,n=a(t),r=s(t,e);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),Lc?n.size--:t.size--}return!!r},forEach:function(e){for(var t,n=a(this),r=Yf(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!s(this,e)}}),av(i,n?{get:function(e){var t=s(this,e);return t&&t.value},set:function(e,t){return u(this,0===e?0:e,t)}}:{add:function(e){return u(this,e=0===e?0:e,e)}}),Lc&&Zy(i,"size",{get:function(){return a(this).size}}),o},setStrong:function(e,t,n){var r=t+" Iterator",o=em(t),i=em(r);ph(e,t,(function(e,t){Qy(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),Xy(t)}};Sv("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),tm);var nm=bd.filter,rm=rp("filter");tp({target:"Array",proto:!0,forced:!rm},{filter:function(e){return nm(this,e,arguments.length>1?arguments[1]:void 0)}});var om="\t\n\v\f\r                　\u2028\u2029\ufeff",im=sc("".replace),am="["+om+"]",um=RegExp("^"+am+am+"*"),sm=RegExp(am+am+"*$"),lm=function(e){return function(t){var n=Ap(cc(t));return 1&e&&(n=im(n,um,"")),2&e&&(n=im(n,sm,"")),n}},cm={start:lm(1),end:lm(2),trim:lm(3)},fm=jf.PROPER,dm=cm.trim;tp({target:"String",proto:!0,forced:function(e){return kc((function(){return!!om[e]()||"​᠎"!=="​᠎"[e]()||fm&&om[e].name!==e}))}("trim")},{trim:function(){return dm(this)}});var pm=Ql.TypeError,hm=Nc("species"),gm=function(e,t){var n,r=qc(e).constructor;return void 0===r||null==(n=qc(r)[hm])?t:function(e){if(pd(e))return e;throw pm(Qc(e)+" is not a constructor")}(n)},vm=og.UNSUPPORTED_Y,ym=Math.min,mm=[].push,bm=sc(/./.exec),wm=sc(mm),Em=sc("".slice);kg("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=Ap(cc(this)),o=void 0===n?4294967295:n>>>0;if(0===o)return[];if(void 0===e)return[r];if(!Nh(e))return Kc(t,r,e,o);for(var i,a,u,s=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),c=0,f=new RegExp(e.source,l+"g");(i=Kc(wg,f,r))&&!((a=f.lastIndex)>c&&(wm(s,Em(r,c,i.index)),i.length>1&&i.index<r.length&&Sg(mm,s,lv(i,1)),u=i[0].length,c=a,s.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return c===r.length?!u&&bm(f,"")||wm(s,""):wm(s,Em(r,c)),s.length>o?lv(s,0,o):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:Kc(t,this,e,n)}:t,[function(t,n){var o=cc(this),i=null==t?void 0:nf(t,e);return i?Kc(i,t,o,n):Kc(r,Ap(o),t,n)},function(e,o){var i=qc(this),a=Ap(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=gm(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(vm?"g":"y"),f=new s(vm?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===Mg(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=vm?0:h;var v,y=Mg(f,vm?Em(a,h):a);if(null===y||(v=ym(rd(f.lastIndex+(vm?h:0)),a.length))===p)h=Fg(a,h,l);else{if(wm(g,Em(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(wm(g,y[m]),g.length===d)return g;h=p=v}}return wm(g,Em(a,p)),g}]}),!!kc((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),vm);var Dm=[];var Cm={};function xm(e,t,n){var r=n.isInline(e)?"span":"div";return"<"+r+">"+t+"</"+r+">"}var Sm,Am,Om,km,Bm=Ql.Promise,Fm=sc([].slice),_m=/(?:ipad|iphone|ipod).*applewebkit/i.test(Dc),Tm="process"==Lf(Ql.process),Pm=Ql.setImmediate,jm=Ql.clearImmediate,Nm=Ql.process,Im=Ql.Dispatch,Rm=Ql.Function,Lm=Ql.MessageChannel,Mm=Ql.String,zm=0,$m={};try{Sm=Ql.location}catch(Qh){}var Hm=function(e){if(hc($m,e)){var t=$m[e];delete $m[e],t()}},Vm=function(e){return function(){Hm(e)}},Um=function(e){Hm(e.data)},Wm=function(e){Ql.postMessage(Mm(e),Sm.protocol+"//"+Sm.host)};Pm&&jm||(Pm=function(e){var t=Fm(arguments,1);return $m[++zm]=function(){Sg(bc(e)?e:Rm(e),void 0,t)},Am(zm),zm},jm=function(e){delete $m[e]},Tm?Am=function(e){Nm.nextTick(Vm(e))}:Im&&Im.now?Am=function(e){Im.now(Vm(e))}:Lm&&!_m?(km=(Om=new Lm).port2,Om.port1.onmessage=Um,Am=Yf(km.postMessage,km)):Ql.addEventListener&&bc(Ql.postMessage)&&!Ql.importScripts&&Sm&&"file:"!==Sm.protocol&&!kc(Wm)?(Am=Wm,Ql.addEventListener("message",Um,!1)):Am="onreadystatechange"in Hc("script")?function(e){jp.appendChild(Hc("script")).onreadystatechange=function(){jp.removeChild(this),Hm(e)}}:function(e){setTimeout(Vm(e),0)});var qm,Gm,Km,Ym,Xm,Zm,Jm,Qm,eb={set:Pm,clear:jm},tb=/ipad|iphone|ipod/i.test(Dc)&&void 0!==Ql.Pebble,nb=/web0s(?!.*chrome)/i.test(Dc),rb=_d.f,ob=eb.set,ib=Ql.MutationObserver||Ql.WebKitMutationObserver,ab=Ql.document,ub=Ql.process,sb=Ql.Promise,lb=rb(Ql,"queueMicrotask"),cb=lb&&lb.value;cb||(qm=function(){var e,t;for(Tm&&(e=ub.domain)&&e.exit();Gm;){t=Gm.fn,Gm=Gm.next;try{t()}catch(n){throw Gm?Ym():Km=void 0,n}}Km=void 0,e&&e.enter()},_m||Tm||nb||!ib||!ab?!tb&&sb&&sb.resolve?((Jm=sb.resolve(void 0)).constructor=sb,Qm=Yf(Jm.then,Jm),Ym=function(){Qm(qm)}):Tm?Ym=function(){ub.nextTick(qm)}:(ob=Yf(ob,Ql),Ym=function(){ob(qm)}):(Xm=!0,Zm=ab.createTextNode(""),new ib(qm).observe(Zm,{characterData:!0}),Ym=function(){Zm.data=Xm=!Xm}));var fb,db,pb,hb,gb=cb||function(e){var t={fn:e,next:void 0};Km&&(Km.next=t),Gm||(Gm=t,Ym()),Km=t},vb=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=tf(t),this.reject=tf(n)},yb={f:function(e){return new vb(e)}},mb=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},bb="object"==typeof window,wb=eb.set,Eb=Nc("species"),Db="Promise",Cb=Ff.getterFor(Db),xb=Ff.set,Sb=Ff.getterFor(Db),Ab=Bm&&Bm.prototype,Ob=Bm,kb=Ab,Bb=Ql.TypeError,Fb=Ql.document,_b=Ql.process,Tb=yb.f,Pb=Tb,jb=!!(Fb&&Fb.createEvent&&Ql.dispatchEvent),Nb=bc(Ql.PromiseRejectionEvent),Ib=!1,Rb=Qd(Db,(function(){var e=yf(Ob),t=e!==String(Ob);if(!t&&66===Oc)return!0;if(Oc>=51&&/native code/.test(e))return!1;var n=new Ob((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[Eb]=r,!(Ib=n.then((function(){}))instanceof r)||!t&&bb&&!Nb})),Lb=Rb||!Dp((function(e){Ob.all(e).catch((function(){}))})),Mb=function(e){var t;return!(!Mc(e)||!bc(t=e.then))&&t},zb=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;gb((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&Ub(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(Bb("Promise-chain cycle")):(u=Mb(a))?Kc(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&Hb(e)}))}},$b=function(e,t,n){var r,o;jb?((r=Fb.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),Ql.dispatchEvent(r)):r={promise:t,reason:n},!Nb&&(o=Ql["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=Ql.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},Hb=function(e){Kc(wb,Ql,(function(){var t,n=e.facade,r=e.value;if(Vb(e)&&(t=mb((function(){Tm?_b.emit("unhandledRejection",r,n):$b("unhandledrejection",n,r)})),e.rejection=Tm||Vb(e)?2:1,t.error))throw t.value}))},Vb=function(e){return 1!==e.rejection&&!e.parent},Ub=function(e){Kc(wb,Ql,(function(){var t=e.facade;Tm?_b.emit("rejectionHandled",t):$b("rejectionhandled",t,e.value)}))},Wb=function(e,t,n){return function(r){e(t,r,n)}},qb=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,zb(e,!0))},Gb=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw Bb("Promise can't be resolved itself");var r=Mb(t);r?gb((function(){var n={done:!1};try{Kc(r,t,Wb(Gb,n,e),Wb(qb,n,e))}catch(o){qb(n,o,e)}})):(e.value=t,e.state=1,zb(e,!1))}catch(o){qb({done:!1},o,e)}}};if(Rb&&(kb=(Ob=function(e){Cv(this,kb),tf(e),Kc(fb,this);var t=Cb(this);try{e(Wb(Gb,t),Wb(qb,t))}catch(n){qb(t,n)}}).prototype,(fb=function(e){xb(this,{type:Db,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=av(kb,{then:function(e,t){var n=Sb(this),r=n.reactions,o=Tb(gm(this,Ob));return o.ok=!bc(e)||e,o.fail=bc(t)&&t,o.domain=Tm?_b.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&zb(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),db=function(){var e=new fb,t=Cb(e);this.promise=e,this.resolve=Wb(Gb,t),this.reject=Wb(qb,t)},yb.f=Tb=function(e){return e===Ob||e===pb?new db(e):Pb(e)},bc(Bm)&&Ab!==Object.prototype)){hb=Ab.then,Ib||(Nf(Ab,"then",(function(e,t){var n=this;return new Ob((function(e,t){Kc(hb,n,e,t)})).then(e,t)}),{unsafe:!0}),Nf(Ab,"catch",kb.catch,{unsafe:!0}));try{delete Ab.constructor}catch(Qh){}ah&&ah(Ab,kb)}function Kb(e){Promise.resolve().then(e)}function Yb(e,t){return ft.isElement(e)?function(e,t){var n=e.type,r=void 0===n?"":n,o=e.children,i=void 0===o?[]:o,a=yt.isVoid(t,e),u="";a||(u=i.map((function(e){return Yb(e,t)})).join(""));var s=function(e){return Cm[e]||xm}(r),l=s(e,u,t);return a||Dm.forEach((function(t){return l=t(e,l)})),l}(e,t):function(e,t){var n=e.text;if(null==n)throw new Error("Current node is not slate Text "+JSON.stringify(e));var r=n;r=r.replace(/ /g,"&nbsp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/®/g,"&reg;").replace(/©/g,"&copy;").replace(/™/g,"&trade;");var o=Wy.getParentsNodes(t,e).some((function(e){return"pre"===Wy.getNodeType(e)}));if(o||(r=r.replace(/\r\n|\r|\n/g,"<br>")),o&&(r=r.replace(/&nbsp;/g," ")),""===r){var i=Wy.getParentNode(null,e);if(!i||0!==i.children.length)return r;r="<br>"}return Dm.forEach((function(t){return r=t(e,r)})),r}(e,t)}function Xb(e){return"w-e-element-"+e}tp({global:!0,wrap:!0,forced:Rb},{Promise:Ob}),th(Ob,Db,!1),Xy(Db),pb=Ec(Db),tp({target:Db,stat:!0,forced:Rb},{reject:function(e){var t=Tb(this);return Kc(t.reject,void 0,e),t.promise}}),tp({target:Db,stat:!0,forced:Rb},{resolve:function(e){return function(e,t){if(qc(e),Mc(t)&&t.constructor===e)return t;var n=yb.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),tp({target:Db,stat:!0,forced:Lb},{all:function(e){var t=this,n=Tb(t),r=n.resolve,o=n.reject,i=mb((function(){var n=tf(t.resolve),i=[],a=0,u=1;Ev(e,(function(e){var s=a++,l=!1;u++,Kc(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=Tb(t),r=n.reject,o=mb((function(){var o=tf(t.resolve);Ev(e,(function(e){Kc(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var Zb=function(e,t){var n=(t.top+t.bottom)/2;return e.top<=n&&e.bottom>=n},Jb=function(e,t,n){var r=Wy.toDOMRange(e,t).getBoundingClientRect(),o=Wy.toDOMRange(e,n).getBoundingClientRect();return Zb(r,o)&&Zb(o,r)},Qb=["span","b","strong","i","em","s","strike","u","font","sub","sup"],ew=[];var tw=[];var nw={};var rw=cf.f,ow=Hd.f,iw=Ff.enforce,aw=Nc("match"),uw=Ql.RegExp,sw=uw.prototype,lw=Ql.SyntaxError,cw=sc(Ch),fw=sc(sw.exec),dw=sc("".charAt),pw=sc("".replace),hw=sc("".indexOf),gw=sc("".slice),vw=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,yw=/a/g,mw=/a/g,bw=new uw(yw)!==yw,ww=og.MISSED_STICKY,Ew=og.UNSUPPORTED_Y,Dw=Lc&&(!bw||ww||ag||sg||kc((function(){return mw[aw]=!1,uw(yw)!=yw||uw(mw)==mw||"/a/i"!=uw(yw,"i")})));if(Qd("RegExp",Dw)){for(var Cw=function(e,t){var n,r,o,i,a,u,s=Yc(sw,this),l=Nh(e),c=void 0===t,f=[],d=e;if(!s&&l&&c&&e.constructor===Cw)return e;if((l||Yc(sw,e))&&(e=e.source,c&&(t="flags"in d?d.flags:cw(d))),e=void 0===e?"":Ap(e),t=void 0===t?"":Ap(t),d=e,ag&&"dotAll"in yw&&(r=!!t&&hw(t,"s")>-1)&&(t=pw(t,/s/g,"")),n=t,ww&&"sticky"in yw&&(o=!!t&&hw(t,"y")>-1)&&Ew&&(t=pw(t,/y/g,"")),sg&&(e=(i=function(e){for(var t,n=e.length,r=0,o="",i=[],a={},u=!1,s=!1,l=0,c="";r<=n;r++){if("\\"===(t=dw(e,r)))t+=dw(e,++r);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:fw(vw,gw(e,r+1))&&(r+=2,s=!0),o+=t,l++;continue;case">"===t&&s:if(""===c||hc(a,c))throw new lw("Invalid capture group name");a[c]=!0,i[i.length]=[c,l],s=!1,c="";continue}s?c+=t:o+=t}return[o,i]}(e))[0],f=i[1]),a=xv(uw(e,t),s?this:sw,Cw),(r||o||f.length)&&(u=iw(a),r&&(u.dotAll=!0,u.raw=Cw(function(e){for(var t,n=e.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(t=dw(e,r))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+dw(e,++r);return o}(e),n)),o&&(u.sticky=!0),f.length&&(u.groups=f)),e!==d)try{df(a,"source",""===d?"(?:)":d)}catch(p){}return a},xw=function(e){e in Cw||rw(Cw,e,{configurable:!0,get:function(){return uw[e]},set:function(t){uw[e]=t}})},Sw=ow(uw),Aw=0;Sw.length>Aw;)xw(Sw[Aw++]);sw.constructor=Cw,Cw.prototype=sw,Nf(Ql,"RegExp",Cw)}Xy("RegExp");var Ow=new RegExp(String.fromCharCode(160),"g");function kw(e){return e.replace(Ow," ")}function Bw(e,t){var n=e.length;if(n){var r=e[n-1];if($t.isText(r)){var o=Object.keys(r);if(1===o.length&&"text"===o[0])return r.text=r.text+t,!0}}return!1}function Fw(e,t,n){return{type:"paragraph",children:[{text:Fr(e).text().replace(/\s+/gm," ")}]}}function _w(e,t){var n=function(e,t){var n=[];if(null!=e.attr("data-w-e-is-void"))return n;var r=e[0].childNodes;return 1===r.length&&"BR"===r[0].nodeName?(n.push({text:""}),n):(r.forEach((function(e){if(e.nodeType!==Ay.ELEMENT_NODE)if(e.nodeType!==Ay.TEXT_NODE);else{var r=e.textContent||"";if(""===r.trim()&&r.indexOf("\n")>=0)return;r&&(r=kw(r),Bw(n,r)||n.push({text:r}))}else{if("BR"===e.nodeName)return void(Bw(n,"\n")||n.push({text:"\n"}));var o=Fr(e);n.push(Pw(o,t))}})),n)}(e,t),r=function(e){for(var t in nw)if(e[0].matches(t))return nw[t];return Fw}(e),o=r(e[0],n,t);return yt.isVoid(t,o)||(0===n.length&&(o.children=[{text:e.text().replace(/\s+/gm," ")}]),tw.forEach((function(n){o=n(e[0],o,t)}))),o}function Tw(e,t){0===e.parents("pre").length&&(e[0].innerHTML=e[0].innerHTML.replace(/\s+/gm," ").replace(/<br>/g,"\n"));var n=e[0].textContent||"",r={text:n=kw(n=n.replace(/&nbsp;/g," ").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&reg;/g,"®").replace(/&copy;/g,"©").replace(/&trade;/g,"™"))};return tw.forEach((function(n){r=n(e[0],r,t)})),r}function Pw(e,t){ew.forEach((function(t){var n=t.selector,r=t.preParseHtml;e[0].matches(n)&&(e=Fr(r(e[0])))}));var n=Ry(e);return"span"===n?e.attr("data-w-e-type")?_w(e,t):Tw(e,t):"code"===n?"pre"===Ry(e.parent())?_w(e,t):Tw(e,t):Qb.includes(n)?Tw(e,t):_w(e,t)}var jw=new Set(["doctype","!doctype","meta","script","style","link","frame","iframe","title","svg"]),Nw=function(e){return null!=e},Iw={object:!0,function:!0,undefined:!0},Rw=/^\s*class[\s{/}]/,Lw=Function.prototype.toString,Mw=function(e){return!!function(e){if("function"!=typeof e)return!1;if(!hasOwnProperty.call(e,"length"))return!1;try{if("number"!=typeof e.length)return!1;if("function"!=typeof e.call)return!1;if("function"!=typeof e.apply)return!1}catch(t){return!1}return!function(e){if(!Nw(t=e)||!hasOwnProperty.call(Iw,typeof t))return!1;var t;try{return!!e.constructor&&e.constructor.prototype===e}catch(t){return!1}}(e)}(e)&&!Rw.test(Lw.call(e))},zw=function(e){return null!=e},$w=Object.keys,Hw=function(){try{return Object.keys("primitive"),!0}catch(Qh){return!1}}()?Object.keys:function(e){return $w(zw(e)?Object(e):e)},Vw=function(e){if(!zw(e))throw new TypeError("Cannot use null or undefined");return e},Uw=Math.max,Ww=function(){var e,t=Object.assign;return"function"==typeof t&&(t(e={foo:"raz"},{bar:"dwa"},{trzy:"trzy"}),e.foo+e.bar+e.trzy==="razdwatrzy")}()?Object.assign:function(e,t){var n,r,o,i=Uw(arguments.length,2);for(e=Object(Vw(e)),o=function(r){try{e[r]=t[r]}catch(o){n||(n=o)}},r=1;r<i;++r)Hw(t=arguments[r]).forEach(o);if(void 0!==n)throw n;return e},qw=Array.prototype.forEach,Gw=Object.create,Kw=function(e,t){var n;for(n in e)t[n]=e[n]},Yw=function(e){var t=Gw(null);return qw.call(arguments,(function(e){zw(e)&&Kw(Object(e),t)})),t},Xw="razdwatrzy",Zw=String.prototype.indexOf,Jw="function"==typeof Xw.contains&&!0===Xw.contains("dwa")&&!1===Xw.contains("foo")?String.prototype.contains:function(e){return Zw.call(this,e,arguments[1])>-1},Qw=Yl((function(e){var t=e.exports=function(e,t){var n,r,o,i,a;return arguments.length<2||"string"!=typeof e?(i=t,t=e,e=null):i=arguments[2],Nw(e)?(n=Jw.call(e,"c"),r=Jw.call(e,"e"),o=Jw.call(e,"w")):(n=o=!0,r=!1),a={value:t,configurable:n,enumerable:r,writable:o},i?Ww(Yw(i),a):a};t.gs=function(e,t,n){var r,o,i,a;return"string"!=typeof e?(i=n,n=t,t=e,e=null):i=arguments[3],Nw(t)?Mw(t)?Nw(n)?Mw(n)||(i=n,n=void 0):n=void 0:(i=t,t=n=void 0):t=void 0,Nw(e)?(r=Jw.call(e,"c"),o=Jw.call(e,"e")):(r=!0,o=!1),a={get:t,set:n,configurable:r,enumerable:o},i?Ww(Yw(i),a):a}})),eE=function(e){if("function"!=typeof e)throw new TypeError(e+" is not a function");return e},tE=Yl((function(e,t){var n,r,o,i,a,u,s,l=Function.prototype.apply,c=Function.prototype.call,f=Object.create,d=Object.defineProperty,p=Object.defineProperties,h=Object.prototype.hasOwnProperty,g={configurable:!0,enumerable:!1,writable:!0};r=function(e,t){var r,i;return eE(t),i=this,n.call(this,e,r=function(){o.call(i,e,r),l.call(t,this,arguments)}),r.__eeOnceListener__=t,this},i=function(e){var t,n,r,o,i;if(h.call(this,"__ee__")&&(o=this.__ee__[e]))if("object"==typeof o){for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];for(o=o.slice(),t=0;r=o[t];++t)l.call(r,this,i)}else switch(arguments.length){case 1:c.call(o,this);break;case 2:c.call(o,this,arguments[1]);break;case 3:c.call(o,this,arguments[1],arguments[2]);break;default:for(n=arguments.length,i=new Array(n-1),t=1;t<n;++t)i[t-1]=arguments[t];l.call(o,this,i)}},a={on:n=function(e,t){var n;return eE(t),h.call(this,"__ee__")?n=this.__ee__:(n=g.value=f(null),d(this,"__ee__",g),g.value=null),n[e]?"object"==typeof n[e]?n[e].push(t):n[e]=[n[e],t]:n[e]=t,this},once:r,off:o=function(e,t){var n,r,o,i;if(eE(t),!h.call(this,"__ee__"))return this;if(!(n=this.__ee__)[e])return this;if("object"==typeof(r=n[e]))for(i=0;o=r[i];++i)o!==t&&o.__eeOnceListener__!==t||(2===r.length?n[e]=r[i?0:1]:r.splice(i,1));else r!==t&&r.__eeOnceListener__!==t||delete n[e];return this},emit:i},u={on:Qw(n),once:Qw(r),off:Qw(o),emit:Qw(i)},s=p({},u),e.exports=t=function(e){return null==e?f(s):p(Object(e),u)},t.methods=a}));function nE(e){var t=Ey.get(e);return null==t&&(t=tE(),Ey.set(e,t)),t}var rE=new WeakMap;function oE(e,t){var n=rE.get(e);null==n&&(n=new Set,rE.set(e,n)),n.add(t)}function iE(e){return rE.get(e)||new Set}function aE(e){rE.set(e,new Set)}function uE(e){var t=Wy.getTextarea(e).$textAreaContainer,n=t.width(),r=t.height(),o=t.offset();return{top:o.top,left:o.left,width:n,height:r}}function sE(e){var t={top:"0",left:"0"},n=e.selection;if(null==n)return t;var r=uE(e);if(null==r)return t;var o=r.top,i=r.left,a=r.width,u=r.height,s=Wy.toDOMRange(e,n).getClientRects()[0];if(null==s)return t;s.width;var l=s.height,c={},f=s.top-o,d=s.left-i;if(d>a/2){var p=a-d;c.right=p+5+"px"}else c.left=d+5+"px";if(f>u/2){var h=u-f;c.bottom=h+5+"px"}else{var g=f+l;g<0&&(g=0),c.top=g+5+"px"}return c}function lE(e,t,n){void 0===n&&(n="modal");var r={top:"0",left:"0"};if(null==e.selection)return r;var o=ft.isElement(t)&&e.isVoid(t),i=ft.isElement(t)&&e.isInline(t),a=vy.get(t);if(null==a)return r;var u=a.getBoundingClientRect(),s=u.top,l=u.left,c=u.height,f=u.width;if(o){var d=function(e){var t=[];t.push(e);for(var n=0;t.length>0;){var r=t.pop();if(null==r)break;if(++n>1e4)break;var o=r.nodeName;if(1===r.nodeType){var i=o.toLowerCase();if(Sy.includes(i)||"iframe"===i||"video"===i)return r;var a=r.children||[],u=a.length;if(u)for(var s=u-1;s>=0;s--)t.push(a[s])}}return null}(a);if(null!=d){var p=d.getBoundingClientRect();s=p.top,c=p.height}}var h=uE(e);if(null==h)return r;var g,v=h.top,y=h.left,m=h.width,b=h.height,w={},E=s-v,D=l-y;if("bar"===n)return w.left=D+"px",E>40?w.bottom=b-E+5+"px":w.top=E+c+5+"px",w;if("modal"===n)return o?i?D>(m-f)/2?w.right=m-D+5+"px":w.left=D+f+5+"px":w.left="20px":w.left=D+"px",o?((g=E)<0&&(g=0),w.top=g+"px"):E>(b-c)/2?w.bottom=b-E+5+"px":((g=E+c)<0&&(g=0),w.top=g+5+"px"),w;throw new Error("type '"+n+"' is invalid")}function cE(e,t){Kb((function(){var n=uE(e);if(null!=n){var r,o=n.top,i=n.left,a=n.width,u=n.height,s=t.offset(),l=s.top,c=s.left,f=t.width(),d=t.height(),p=l-o,h=c-i,g=t.attr("style");if(g.indexOf("top")>=0&&(r=p+d-u)>0){var v=t.css("top"),y=parseInt(v.toString())-r;y<0&&(y=0),t.css("top",y+"px")}if(g.indexOf("bottom")>=0&&l<0){var m=t.css("bottom"),b=parseInt(m.toString())-Math.abs(l);t.css("bottom",b+"px")}if(g.indexOf("left")>=0&&(r=h+f-a)>0){var w=t.css("left"),E=parseInt(w.toString())-r;E<0&&(E=0),t.css("left",E+"px")}if(g.indexOf("right")>=0&&c<0){var D=t.css("right"),C=parseInt(D.toString())-Math.abs(c);t.css("right",C+"px")}}}))}var fE=rp("slice"),dE=Nc("species"),pE=Ql.Array,hE=Math.max;tp({target:"Array",proto:!0,forced:!fE},{slice:function(e,t){var n,r,o,i=Bd(this),a=od(i),u=jd(e,a),s=jd(void 0===t?a:t,a);if(id(i)&&(n=i.constructor,(pd(n)&&(n===pE||id(n.prototype))||Mc(n)&&null===(n=n[dE]))&&(n=void 0),n===pE||void 0===n))return Fm(i,u,s);for(r=new(void 0===n?pE:n)(hE(s-u,0)),o=0;u<s;u++,o++)u in i&&dp(r,o,i[u]);return r.length=o,r}});var gE=_d.f,vE=sc("".startsWith),yE=sc("".slice),mE=Math.min,bE=Mh("startsWith"),wE=!bE&&!!function(){var e=gE(String.prototype,"startsWith");return e&&!e.writable}();tp({target:"String",proto:!0,forced:!wE&&!bE},{startsWith:function(e){var t=Ap(cc(this));Rh(e);var n=rd(mE(arguments.length>1?arguments[1]:void 0,t.length)),r=Ap(e);return vE?vE(t,r,n):yE(t,n,n+r.length)===r}});var EE=Object.assign,DE=Object.defineProperty,CE=sc([].concat),xE=!EE||kc((function(){if(Lc&&1!==EE({b:1},EE(DE({},"a",{enumerable:!0,get:function(){DE(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=EE({},e)[n]||Tp(EE({},t)).join("")!=r}))?function(e,t){for(var n=dc(e),r=arguments.length,o=1,i=Vd.f,a=kd.f;r>o;)for(var u,s=Jf(arguments[o++]),l=i?CE(Tp(s),i(s)):Tp(s),c=l.length,f=0;c>f;)u=l[f++],Lc&&!Kc(a,s,u)||(n[u]=s[u]);return n}:EE;tp({target:"Object",stat:!0,forced:Object.assign!==xE},{assign:xE});var SE=["props","attrs","style","dataset","on","hook"];function AE(e){var t=e.data,n=void 0===t?{}:t,r=e.children,o=void 0===r?[]:r;Object.keys(n).forEach((function(t){var r,o,i=n[t];if("key"!==t){if(!SE.includes(t)){if(t.startsWith("data-")){var a=t.slice(5);return a=ga(a),function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.dataset&&(n.dataset={}),Object.assign(n.dataset,t)}(e,((r={})[a]=i,r)),void delete n[t]}!function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={}),Object.assign(n.props,t)}(e,(o={},o[t]=i,o)),delete n[t]}}else e.key=i})),o.length>0&&o.forEach((function(e){"string"!=typeof e&&AE(e)}))}var OE=[];var kE={};function BE(e,t,n){return Ci(n.isInline(e)?"span":"div",null,t)}function FE(e,t){return void 0===t&&(t=!1),Ci("span",{"data-slate-string":!0},t?e+"\n":e)}function _E(e,t){return void 0===e&&(e=0),void 0===t&&(t=!1),Ci("span",{"data-slate-zero-width":t?"n":"z","data-slate-length":e},"\ufeff",t?Ci("br",null):null)}function TE(e,t,n,r){return fy.set(e,t),dy.set(e,n),ft.isElement(e)?function(e,t){var n,r=Wy.findKey(t,e),o=t.isInline(e),i=yt.isVoid(t,e),a=Xb(r.id),u={id:a,key:r.id,"data-slate-node":"element","data-slate-inline":o},s=e.type,l=e.children,c=void 0===l?[]:l,f=function(e){return kE[e]||BE}(s);n=i?null:c.map((function(n,r){return TE(n,r,e,t)}));var d=f(e,n,t);if(i){u["data-slate-void"]=!0;var p=o?"span":"div",h=Qg(Dt.texts(e),1),g=Qg(h[0],1)[0],v=Ci(p,{"data-slate-spacer":!0,style:{height:"0",color:"transparent",outline:"none",position:"absolute"}},TE(g,0,e,t));d=Ci(p,{style:{position:"relative"}},d,v),fy.set(g,0),dy.set(g,e)}return null==d.data&&(d.data={}),Object.assign(d.data,u),i||o||(d=function(e,t){var n=t;return OE.forEach((function(r){n=r(e,t)})),n}(e,d)),Kb((function(){var t=Ty(a);null!=t&&(gy.set(r,t),vy.set(e,t),hy.set(t,e))})),d}(e,r):function(e,t,n){if(null==e.text)throw new Error("Current node is not slate Text "+JSON.stringify(e));var r=Wy.findKey(n,e),o=n.getConfig().decorate;if(null==o)throw new Error("Can not get config.decorate");var i=Wy.findPath(n,e),a=o([e,i]),u=$t.decorations(e,a),s=u.map((function(r,o){var i=function(e,t,n,r,o){void 0===t&&(t=!1);var i=e.text,a=Wy.findPath(o,n),u=At.parent(a);if(yt.isEditor(r))throw new Error("Text node "+JSON.stringify(n)+" parent is Editor");return o.isVoid(r)?_E(Dt.string(r).length):""!==i||r.children[r.children.length-1]!==n||o.isInline(r)||""!==yt.string(o,u)?""===i?_E():t&&"\n"===i.slice(-1)?FE(i,!0):FE(i):_E(0,!0)}(r,o===u.length-1,e,t,n);return i=function(e,t){var n=t;return OE.forEach((function(t){n=t(e,n)})),n}(r,i),Ci("span",{"data-slate-leaf":!0},i)})),l=function(e){return"w-e-text-"+e}(r.id),c=Ci("span",{"data-slate-node":"text",id:l,key:r.id},s);return Kb((function(){var t=Ty(l);null!=t&&(gy.set(r,t),vy.set(e,t),hy.set(t,e))})),c}(e,n,r)}function PE(e,t){var n,r=e.$scroll,o="w-e-textarea-"+e.id,i=t.getConfig(),a=i.readOnly,u=i.autoFocus,s=function(e,t){return void 0===t&&(t=!1),ii("div#"+e,{props:{contentEditable:!t}})}(o,a),l=t.children||[];s.children=l.map((function(e,n){var r=TE(e,n,t,t);return AE(r),r}));var c=sy.get(e);if(null==c&&(c=!0),c){var f=function(e,t){return Fr('<div\n        id="'+e+'"\n        data-slate-editor\n        data-slate-node="value"\n        suppressContentEditableWarning\n        role="textarea"\n        spellCheck="true"\n        autoCorrect="true"\n        autoCapitalize="true"\n    ></div>')}(o);r.append(f),e.$textArea=f,n=f[0],(p=ri([ui,vi,Ei,ci,hi]))(n,s),sy.set(e,!1),ly.set(e,p)}else{var d=cy.get(e),p=ly.get(e);if(null==d||null==p)return;n=d.elm,p(d,s)}if(null!=n||null!=(n=Ty(o))){if((c?u:t.isFocused())&&n.focus({preventScroll:!0}),c){var h=Oy(n);h&&my.set(t,h)}py.set(t,n),vy.set(t,n),hy.set(n,t),cy.set(e,s)}}function jE(e){return"object"==typeof e&&null!=e&&1===e.nodeType}function NE(e,t){return(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e}function IE(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var n=getComputedStyle(e,null);return NE(n.overflowY,t)||NE(n.overflowX,t)||!!(o=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(t){return null}}(r=e))&&(o.clientHeight<r.scrollHeight||o.clientWidth<r.scrollWidth)}var r,o;return!1}function RE(e,t,n,r,o,i,a,u){return i<e&&a>t||i>e&&a<t?0:i<=e&&u<=n||a>=t&&u>=n?i-e-r:a>t&&u<n||i<e&&u>n?a-t+o:0}function LE(e,t){var n=window,r=t.scrollMode,o=t.block,i=t.inline,a=t.boundary,u=t.skipOverflowHiddenElements,s="function"==typeof a?a:function(e){return e!==a};if(!jE(e))throw new TypeError("Invalid target");for(var l=document.scrollingElement||document.documentElement,c=[],f=e;jE(f)&&s(f);){if((f=f.parentElement)===l){c.push(f);break}null!=f&&f===document.body&&IE(f)&&!IE(document.documentElement)||null!=f&&IE(f,u)&&c.push(f)}for(var d=n.visualViewport?n.visualViewport.width:innerWidth,p=n.visualViewport?n.visualViewport.height:innerHeight,h=window.scrollX||pageXOffset,g=window.scrollY||pageYOffset,v=e.getBoundingClientRect(),y=v.height,m=v.width,b=v.top,w=v.right,E=v.bottom,D=v.left,C="start"===o||"nearest"===o?b:"end"===o?E:b+y/2,x="center"===i?D+m/2:"end"===i?w:D,S=[],A=0;A<c.length;A++){var O=c[A],k=O.getBoundingClientRect(),B=k.height,F=k.width,_=k.top,T=k.right,P=k.bottom,j=k.left;if("if-needed"===r&&b>=0&&D>=0&&E<=p&&w<=d&&b>=_&&E<=P&&D>=j&&w<=T)return S;var N=getComputedStyle(O),I=parseInt(N.borderLeftWidth,10),R=parseInt(N.borderTopWidth,10),L=parseInt(N.borderRightWidth,10),M=parseInt(N.borderBottomWidth,10),z=0,$=0,H="offsetWidth"in O?O.offsetWidth-O.clientWidth-I-L:0,V="offsetHeight"in O?O.offsetHeight-O.clientHeight-R-M:0;if(l===O)z="start"===o?C:"end"===o?C-p:"nearest"===o?RE(g,g+p,p,R,M,g+C,g+C+y,y):C-p/2,$="start"===i?x:"center"===i?x-d/2:"end"===i?x-d:RE(h,h+d,d,I,L,h+x,h+x+m,m),z=Math.max(0,z+g),$=Math.max(0,$+h);else{z="start"===o?C-_-R:"end"===o?C-P+M+V:"nearest"===o?RE(_,P,B,R,M+V,C,C+y,y):C-(_+B/2)+V/2,$="start"===i?x-j-I:"center"===i?x-(j+F/2)+H/2:"end"===i?x-T+L+H:RE(j,T,F,I,L+H,x,x+m,m);var U=O.scrollLeft,W=O.scrollTop;C+=W-(z=Math.max(0,Math.min(W+z,O.scrollHeight-B+V))),x+=U-($=Math.max(0,Math.min(U+$,O.scrollWidth-F+H)))}S.push({el:O,top:z,left:$})}return S}function ME(e){return e===Object(e)&&0!==Object.keys(e).length}function zE(e,t){return By(t)&&Wy.hasDOMNode(e,t,{editable:!0})}function $E(e,t){if(e.getConfig().readOnly)return!1;var n=HE(e,t)&&Wy.toSlateNode(e,t);return yt.isVoid(e,n)}function HE(e,t){return By(t)&&Wy.hasDOMNode(e,t)}var VE=new WeakMap,UE=new WeakMap,WE={bold:"mod+b",compose:["down","left","right","up","backspace","enter"],moveBackward:"left",moveForward:"right",moveWordBackward:"ctrl+left",moveWordForward:"ctrl+right",deleteBackward:"shift?+backspace",deleteForward:"shift?+delete",extendBackward:"shift+left",extendForward:"shift+right",italic:"mod+i",splitBlock:"shift?+enter",undo:"mod+z",tab:"tab",selectAll:"mod+a"},qE={moveLineBackward:"opt+up",moveLineForward:"opt+down",moveWordBackward:"opt+left",moveWordForward:"opt+right",deleteBackward:["ctrl+backspace","ctrl+h"],deleteForward:["ctrl+delete","ctrl+d"],deleteLineBackward:"cmd+shift?+backspace",deleteLineForward:["cmd+shift?+delete","ctrl+k"],deleteWordBackward:"opt+shift?+backspace",deleteWordForward:"opt+shift?+delete",extendLineBackward:"opt+shift+up",extendLineForward:"opt+shift+down",redo:"cmd+shift+z",transposeCharacter:"ctrl+t"},GE={deleteWordBackward:"ctrl+shift?+backspace",deleteWordForward:"ctrl+shift?+delete",redo:["ctrl+y","ctrl+shift+z"]},KE=function(e){var t=WE[e],n=qE[e],r=GE[e],o=t&&Sa(t),i=n&&Sa(n),a=r&&Sa(r);return function(e){return!(!o||!o(e))||!!(Ly&&i&&i(e))||!(Ly||!a||!a(e))}},YE={isBold:KE("bold"),isCompose:KE("compose"),isMoveBackward:KE("moveBackward"),isMoveForward:KE("moveForward"),isDeleteBackward:KE("deleteBackward"),isDeleteForward:KE("deleteForward"),isDeleteLineBackward:KE("deleteLineBackward"),isDeleteLineForward:KE("deleteLineForward"),isDeleteWordBackward:KE("deleteWordBackward"),isDeleteWordForward:KE("deleteWordForward"),isExtendBackward:KE("extendBackward"),isExtendForward:KE("extendForward"),isExtendLineBackward:KE("extendLineBackward"),isExtendLineForward:KE("extendLineForward"),isItalic:KE("italic"),isMoveLineBackward:KE("moveLineBackward"),isMoveLineForward:KE("moveLineForward"),isMoveWordBackward:KE("moveWordBackward"),isMoveWordForward:KE("moveWordForward"),isRedo:KE("redo"),isSplitBlock:KE("splitBlock"),isTransposeCharacter:KE("transposeCharacter"),isUndo:KE("undo"),isTab:KE("tab"),isSelectAll:KE("selectAll")};function XE(e){e.preventDefault()}var ZE={beforeinput:function(e,t,n){var r=e,o=n.getConfig().readOnly;if(Uy&&!o&&zE(n,r.target)){var i=n.selection,a=r.inputType,u=r.dataTransfer||r.data||void 0;if("insertCompositionText"!==a&&"deleteCompositionText"!==a){if(r.preventDefault(),!a.startsWith("delete")||a.startsWith("deleteBy")){var s=Qg(r.getTargetRanges(),1)[0];if(s){var l=Wy.toSlateRange(n,s,{exactMatch:!1,suppressThrow:!1});i&&jt.equals(i,l)||an.select(n,l)}}if(i&&jt.isExpanded(i)&&a.startsWith("delete")){var c=a.endsWith("Backward")?"backward":"forward";yt.deleteFragment(n,{direction:c})}else switch(a){case"deleteByComposition":case"deleteByCut":case"deleteByDrag":yt.deleteFragment(n);break;case"deleteContent":case"deleteContentForward":yt.deleteForward(n);break;case"deleteContentBackward":yt.deleteBackward(n);break;case"deleteEntireSoftLine":yt.deleteBackward(n,{unit:"line"}),yt.deleteForward(n,{unit:"line"});break;case"deleteHardLineBackward":yt.deleteBackward(n,{unit:"block"});break;case"deleteSoftLineBackward":yt.deleteBackward(n,{unit:"line"});break;case"deleteHardLineForward":yt.deleteForward(n,{unit:"block"});break;case"deleteSoftLineForward":yt.deleteForward(n,{unit:"line"});break;case"deleteWordBackward":yt.deleteBackward(n,{unit:"word"});break;case"deleteWordForward":yt.deleteForward(n,{unit:"word"});break;case"insertLineBreak":case"insertParagraph":yt.insertBreak(n);break;case"insertFromDrop":case"insertFromPaste":case"insertFromYank":case"insertReplacementText":case"insertText":if("insertFromPaste"===a&&!Dy.get(n))break;u instanceof DataTransfer?n.insertData(u):"string"==typeof u&&yt.insertText(n,u)}}}},blur:function(e,t,n){var r=e,o=t.isUpdatingSelection,i=t.latestElement;if(!n.getConfig().readOnly&&!o&&zE(n,r.target)){var a=Wy.findDocumentOrShadowRoot(n);if(i!==a.activeElement){var u=r.relatedTarget;if(!(u===Wy.toDOMNode(n,n)||ky(u)&&u.hasAttribute("data-slate-spacer"))){if(null!=u&&By(u)&&Wy.hasDOMNode(n,u)){var s=Wy.toSlateNode(n,u);if(ft.isElement(s)&&!n.isVoid(s))return}if(zy){var l=a.getSelection();null==l||l.removeAllRanges()}by.delete(n)}}}},focus:function(e,t,n){var r=Wy.toDOMNode(n,n),o=Wy.findDocumentOrShadowRoot(n);t.latestElement=o.activeElement,My&&e.target!==r?r.focus():by.set(n,!0)},click:function(e,t,n){if(!n.getConfig().readOnly&&HE(n,e.target)&&By(e.target)){var r=Wy.toSlateNode(n,e.target),o=Wy.findPath(n,r);if(yt.hasPath(n,o)&&Dt.get(n,o)===r){var i=yt.start(n,o),a=yt.end(n,o),u=yt.void(n,{at:i}),s=yt.void(n,{at:a});if(u&&s&&At.equals(u[1],s[1])){var l=yt.range(n,i);an.select(n,l)}}}},compositionstart:function(e,t,n){if(zE(n,e.target)){var r=n.selection;if(r&&jt.isExpanded(r)&&yt.deleteFragment(n),r&&jt.isCollapsed(r)){var o=Wy.toDOMRange(n,r).startContainer,i=o.textContent||"";VE.set(n,i),UE.set(n,o)}t.isComposing=!0,function(e,t){var n;t.getConfig().placeholder&&t.isEmpty()&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1)}(t,n)}},compositionend:function(e,t,n){var r=e;if(zE(n,r.target)){t.isComposing=!1;var o=n.selection;if(null!=o){(Vy||My)&&Wy.cleanExposedTexNodeInSelectionBlock(n);for(var i=jt.isBackward(o)?o.focus:o.anchor,a=Qg(yt.node(n,[i.path[0]]),1)[0],u=0;u<i.path.length;u++){var s=Qg(yt.node(n,i.path.slice(0,u+1)),1)[0];if(ft.isElement(s)&&((zy||My)&&"link"===s.type||"code"===s.type)){Wy.setNewKey(a);break}}var l=r.data;if(l){if(n.getConfig().maxLength){var c=Wy.getLeftLengthOfMaxLength(n);c<l.length?(Wy.toDOMRange(n,o).startContainer.textContent=VE.get(n)||"",c>0&&yt.insertText(n,l.slice(0,c)),t.changeViewState()):yt.insertText(n,l)}else yt.insertText(n,l);zy||setTimeout((function(){var e=n.selection;if(null!=e){var t=UE.get(n);null!=t&&Wy.toDOMRange(n,e).startContainer!==t&&(t.textContent=VE.get(n)||"")}}))}}}},compositionupdate:function(e,t,n){zE(n,e.target)&&(t.isComposing=!0)},keydown:function(e,t,n){var r=e,o=n.selection;if(!n.getConfig().readOnly&&!t.isComposing&&zE(n,r.target)){if(function(e,t){var n=ty.get(e),r=n&&n.getMenus(),o=ry.get(e),i=o&&o.getMenus(),a=Zg(Zg({},r),i);for(var u in a){var s=a[u],l=s.hotkey;if(l&&xa(l,t)&&!s.isDisabled(e)){var c=s.getValue(e);s.exec(e,c)}}}(n,r),YE.isTab(r))return XE(r),void n.handleTab();if(YE.isRedo(r))return XE(r),void("function"==typeof n.redo&&n.redo());if(YE.isUndo(r))return XE(r),void("function"==typeof n.undo&&n.undo());if(YE.isMoveLineBackward(r))return XE(r),void an.move(n,{unit:"line",reverse:!0});if(YE.isMoveLineForward(r))return XE(r),void an.move(n,{unit:"line"});if(YE.isExtendLineBackward(r))return XE(r),void an.move(n,{unit:"line",edge:"focus",reverse:!0});if(YE.isExtendLineForward(r))return XE(r),void an.move(n,{unit:"line",edge:"focus"});if(YE.isMoveBackward(r))return XE(r),void(o&&jt.isCollapsed(o)?an.move(n,{reverse:!0}):an.collapse(n,{edge:"start"}));if(YE.isMoveForward(r))return XE(r),void(o&&jt.isCollapsed(o)?an.move(n):an.collapse(n,{edge:"end"}));if(YE.isMoveWordBackward(r))return XE(r),o&&jt.isExpanded(o)&&an.collapse(n,{edge:"focus"}),void an.move(n,{unit:"word",reverse:!0});if(YE.isMoveWordForward(r))return XE(r),o&&jt.isExpanded(o)&&an.collapse(n,{edge:"focus"}),void an.move(n,{unit:"word"});if(YE.isSelectAll(r))return XE(r),void n.selectAll();if(Uy){if((Vy||zy)&&o&&(YE.isDeleteBackward(r)||YE.isDeleteForward(r))&&jt.isCollapsed(o)){var i=Dt.parent(n,o.anchor.path);if(ft.isElement(i)&&yt.isVoid(n,i)&&yt.isInline(n,i))return r.preventDefault(),void an.delete(n,{unit:"block"})}}else{if(YE.isBold(r)||YE.isItalic(r)||YE.isTransposeCharacter(r))return void XE(r);if(YE.isSplitBlock(r))return XE(r),void yt.insertBreak(n);if(YE.isDeleteBackward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"backward"}):yt.deleteBackward(n));if(YE.isDeleteForward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"forward"}):yt.deleteForward(n));if(YE.isDeleteLineBackward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"backward"}):yt.deleteBackward(n,{unit:"line"}));if(YE.isDeleteLineForward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"forward"}):yt.deleteForward(n,{unit:"line"}));if(YE.isDeleteWordBackward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"backward"}):yt.deleteBackward(n,{unit:"word"}));if(YE.isDeleteWordForward(r))return XE(r),void(o&&jt.isExpanded(o)?yt.deleteFragment(n,{direction:"forward"}):yt.deleteForward(n,{unit:"word"}))}}},keypress:function(e,t,n){if(!Uy&&!n.getConfig().readOnly&&zE(n,e.target)){e.preventDefault();var r=e.key;yt.insertText(n,r)}},copy:function(e,t,n){var r=e;if(zE(n,r.target)){r.preventDefault();var o=r.clipboardData;null!=o&&n.setFragmentData(o)}},cut:function(e,t,n){var r=e,o=n.selection;if(!n.getConfig().readOnly&&zE(n,r.target)){r.preventDefault();var i=r.clipboardData;if(null!=i&&(n.setFragmentData(i),o))if(jt.isExpanded(o))yt.deleteFragment(n);else{var a=Dt.parent(n,o.anchor.path);yt.isVoid(n,a)&&an.delete(n)}}},paste:function(e,t,n){Dy.set(n,!0);var r,o=e;if(!n.getConfig().readOnly&&zE(n,o.target)){var i=n.getConfig().customPaste;if(i&&!1===i(n,o))return void Dy.set(n,!1);if(!Uy||(r=o).clipboardData&&""!==r.clipboardData.getData("text/plain")&&1===r.clipboardData.types.length){o.preventDefault();var a=o.clipboardData;null!=a&&n.insertData(a)}}},dragover:function(e,t,n){if(HE(n,e.target)){var r=Wy.toSlateNode(n,e.target);yt.isVoid(n,r)&&e.preventDefault()}},dragstart:function(e,t,n){var r=e;if(HE(n,r.target)&&!n.getConfig().readOnly){var o=Wy.toSlateNode(n,r.target),i=Wy.findPath(n,o);if(yt.isVoid(n,o)||yt.void(n,{at:i,voids:!0})){var a=yt.range(n,i);an.select(n,a)}var u=r.dataTransfer;null!=u&&(t.isDraggingInternally=!0,n.setFragmentData(u))}},dragend:function(e,t,n){var r=e;n.getConfig().readOnly||t.isDraggingInternally&&HE(n,r.target)&&(t.isDraggingInternally=!1)},drop:function(e,t,n){var r=e,o=r.dataTransfer;if(!n.getConfig().readOnly&&HE(n,r.target)&&null!=o&&!(Uy&&zy&&o.files.length>0)){r.preventDefault();var i=n.selection,a=Wy.findEventRange(n,r);an.select(n,a),t.isDraggingInternally&&(i&&an.delete(n,{at:i}),t.isDraggingInternally=!1),n.insertData(o),n.isFocused()||n.focus()}}},JE=1,QE=function(){function e(e){var t=this;this.id=JE++,this.$textArea=null,this.$progressBar=Fr('<div class="w-e-progress-bar"></div>'),this.$maxLengthInfo=Fr('<div class="w-e-max-length-info"></div>'),this.isComposing=!1,this.isUpdatingSelection=!1,this.isDraggingInternally=!1,this.latestElement=null,this.showPlaceholder=!1,this.$placeholder=null,this.latestEditorSelection=null,this.onDOMSelectionChange=qo((function(){var e=t.editorInstance;!function(e,t){var n=e.isComposing,r=e.isUpdatingSelection,o=e.isDraggingInternally;if(!(t.getConfig().readOnly||n||r||o)){var i=Wy.findDocumentOrShadowRoot(t),a=i.activeElement,u=Wy.toDOMNode(t,t),s=i.getSelection();if(a===u?(e.latestElement=a,by.set(t,!0)):by.delete(t),!s)return an.deselect(t);var l=s.anchorNode,c=s.focusNode,f=zE(t,l)||$E(t,l),d=zE(t,c)||$E(t,c);if(f&&d){var p=Wy.toSlateRange(t,s,{exactMatch:!1,suppressThrow:!1});an.select(t,p)}else an.deselect(t)}}(t,e)}),100);var n=Fr(e);if(0===n.length)throw new Error("Cannot find textarea DOM by selector '"+e+"'");this.$box=n;var r=Fr('<div class="w-e-text-container"></div>');r.append(this.$progressBar),r.append(this.$maxLengthInfo),n.append(r);var o=Fr('<div class="w-e-scroll"></div>');r.append(o),this.$scroll=o,this.$textAreaContainer=r,Kb((function(){var e=t.editorInstance,n=Wy.getWindow(e);n.document.addEventListener("selectionchange",t.onDOMSelectionChange),e.on("destroyed",(function(){n.document.removeEventListener("selectionchange",t.onDOMSelectionChange)})),r.on("click",(function(){return e.hidePanelOrModal()})),e.on("change",t.changeViewState.bind(t));var o=e.getConfig().onChange;o&&e.on("change",(function(){return o(e)})),t.onFocusAndOnBlur(),e.on("change",t.changeMaxLengthInfo.bind(t)),t.bindEvent()}))}return Object.defineProperty(e.prototype,"editorInstance",{get:function(){var e=Qv.get(this);if(null==e)throw new Error("Can not get editor instance");return e},enumerable:!1,configurable:!0}),e.prototype.bindEvent=function(){var e=this,t=this.$textArea,n=this.$scroll,r=this.editorInstance;null!=t&&(Bo(ZE,(function(n,o){t.on(o,(function(t){n(t,e,r)}))})),r.getConfig().scroll&&(n.css("overflow-y","auto"),n.on("scroll",qo((function(){r.emit("scroll")}),100))))},e.prototype.onFocusAndOnBlur=function(){var e=this,t=this.editorInstance,n=t.getConfig(),r=n.onBlur,o=n.onFocus;this.latestEditorSelection=t.selection,t.on("change",(function(){null==e.latestEditorSelection&&null!=t.selection?o&&o(t):null!=e.latestEditorSelection&&null==t.selection&&r&&r(t),e.latestEditorSelection=t.selection}))},e.prototype.changeMaxLengthInfo=function(){var e=this.editorInstance,t=e.getConfig().maxLength;if(t){var n=t-Wy.getLeftLengthOfMaxLength(e);this.$maxLengthInfo[0].innerHTML=n+"/"+t}},e.prototype.changeProgress=function(e){var t=this.$progressBar;t.css("width",e+"%"),e>=100&&setTimeout((function(){t.hide(),t.css("width","0"),t.show()}),1e3)},e.prototype.changeViewState=function(){var e=this,t=this.editorInstance;PE(this,t),function(e,t){var n,r=t.getConfig().placeholder;if(r){var o=t.isEmpty();if(o&&!e.showPlaceholder&&!e.isComposing){if(null==e.$placeholder){var i=Fr('<div class="w-e-text-placeholder">'+r+"</div>");e.$textAreaContainer.append(i),e.$placeholder=i}return e.$placeholder.show(),void(e.showPlaceholder=!0)}!o&&e.showPlaceholder&&(null===(n=e.$placeholder)||void 0===n||n.hide(),e.showPlaceholder=!1)}}(this,t),Kb((function(){!function(e,t){var n=t.selection,r=Wy.findDocumentOrShadowRoot(t).getSelection();if(r&&!e.isComposing&&t.isFocused()){var o="None"!==r.type;if(n||o){var i=py.get(t),a=!1;if(i.contains(r.anchorNode)&&i.contains(r.focusNode)&&(a=!0),o&&a&&n){var u=Wy.toSlateRange(t,r,{exactMatch:!0,suppressThrow:!0});if(u&&jt.equals(u,n)){var s=!0;if(jt.isCollapsed(n)){var l=r.anchorNode,c=r.anchorOffset;if(l===i){var f=i.childNodes,d=void 0;(d=f[c])&&d.matches("table")&&(s=!1),(d=f[c-1])&&d.matches("table")&&(s=!1)}}if(s)return}}if(!n||Wy.hasRange(t,n)){e.isUpdatingSelection=!0;var p=n&&Wy.toDOMRange(t,n);if(p){jt.isBackward(n)?r.setBaseAndExtent(p.endContainer,p.endOffset,p.startContainer,p.startOffset):r.setBaseAndExtent(p.startContainer,p.startOffset,p.endContainer,p.endOffset);var h=p.startContainer.parentElement;h.closest("[data-slate-spacer]")||(h.getBoundingClientRect=p.getBoundingClientRect.bind(p),function(e,t){var n,r=!e.ownerDocument.documentElement.contains(e);if(ME(t)&&"function"==typeof t.behavior)return t.behavior(r?[]:LE(e,t));if(!r){var o=!1===(n=t)?{block:"end",inline:"nearest"}:ME(n)?n:{block:"start",inline:"nearest"};(function(e,t){void 0===t&&(t="auto");var n="scrollBehavior"in document.body.style;e.forEach((function(e){var r=e.el,o=e.top,i=e.left;r.scroll&&n?r.scroll({top:o,left:i,behavior:t}):(r.scrollTop=o,r.scrollLeft=i)}))})(LE(e,o),o.behavior)}}(h,{scrollMode:"if-needed",boundary:i.parentElement,block:"end",behavior:"smooth"}),delete h.getBoundingClientRect)}else r.removeAllRanges();setTimeout((function(){p&&My&&i.focus(),e.isUpdatingSelection=!1}))}else t.selection=Wy.toSlateRange(t,r,{exactMatch:!1,suppressThrow:!1})}}}(e,t)}))},e.prototype.destroy=function(){this.$textAreaContainer.remove()},e}();function eD(e){e.removeAttr("width"),e.removeAttr("height"),e.removeAttr("fill"),e.removeAttr("class"),e.removeAttr("t"),e.removeAttr("p-id");var t=e.children();t.length&&eD(t)}function tD(){return Fr('<svg viewBox="0 0 1024 1024"><path d="M498.7 655.8l-197.6-268c-8.1-10.9-0.3-26.4 13.3-26.4h395.2c13.6 0 21.4 15.4 13.3 26.4l-197.6 268c-6.6 9-20 9-26.6 0z"></path></svg>')}function nD(){return Fr('<div class="w-e-bar-divider"></div>')}function rD(e,t,n,r,o){if(void 0===o&&(o=!1),t){if(r){var i=Ly?"cmd":"ctrl";r=r.replace("mod",i)}if(o)r&&(e.attr("data-tooltip",r),e.addClass("w-e-menu-tooltip-v5"),e.addClass("tooltip-right"));else{var a=r?n+"\n"+r:n;e.attr("data-tooltip",a),e.addClass("w-e-menu-tooltip-v5")}}}kg("match",(function(e,t,n){return[function(t){var n=cc(this),r=null==t?void 0:nf(t,e);return r?Kc(r,t,n):new RegExp(t)[e](Ap(n))},function(e){var r=qc(this),o=Ap(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return Mg(r,o);var a=r.unicode;r.lastIndex=0;for(var u,s=[],l=0;null!==(u=Mg(r,o));){var c=Ap(u[0]);s[l]=c,""===c&&(r.lastIndex=Fg(o,rd(r.lastIndex),a)),l++}return 0===l?null:s}]}));var oD=function(){function e(e,t){var n=this;void 0===t&&(t=!1),this.$elem=Fr('<div class="w-e-bar-item"></div>'),this.$button=Fr('<button type="button"></button>'),this.disabled=!1,this.menu=e;var r=e.tag,o=e.width;if("button"!==r)throw new Error("Invalid tag '"+r+"', expected 'button'");var i=e.title,a=e.hotkey,u=void 0===a?"":a,s=e.iconSvg,l=void 0===s?"":s,c=this.$button;if(l){var f=Fr(l);eD(f),c.append(f)}else c.text(i);rD(c,l,i,u,t),t&&l&&c.append(Fr('<span class="title">'+i+"</span>")),o&&c.css("width",o+"px"),this.$elem.append(c),Kb((function(){return n.init()}))}return e.prototype.init=function(){var e=this;this.setActive(),this.setDisabled(),this.$button.on("click",(function(t){t.preventDefault(),yD(e).hidePanelOrModal(),e.disabled||(e.exec(),e.onButtonClick())}))},e.prototype.exec=function(){var e=yD(this),t=this.menu,n=t.getValue(e);t.exec(e,n)},e.prototype.setActive=function(){var e=yD(this),t=this.$button,n="active";this.menu.isActive(e)?t.addClass(n):t.removeClass(n)},e.prototype.setDisabled=function(){var e=yD(this),t=this.$button,n=this.menu.isDisabled(e);(null==e.selection||e.isDisabled())&&(n=!0),this.menu.alwaysEnable&&(n=!1);var r="disabled";n?t.addClass(r):t.removeClass(r),this.disabled=n},e.prototype.changeMenuState=function(){this.setActive(),this.setDisabled()},e}(),iD=function(e){function t(t,n){return void 0===n&&(n=!1),e.call(this,t,n)||this}return Xg(t,e),t.prototype.onButtonClick=function(){},t}(oD),aD=function(){function e(e){this.isShow=!1,this.showTime=0,this.record(e)}return e.prototype.record=function(e){var t=iy.get(e);null==t&&(t=new Set,iy.set(e,t)),t.add(this),ay.set(this,e)},e.prototype.renderContent=function(e){var t=this.$elem;t.empty(),t.append(e);var n=this.genSelfElem();n&&t.append(n)},e.prototype.appendTo=function(e){var t=this.$elem;e.append(t)},e.prototype.show=function(){if(!this.isShow){this.showTime=Date.now(),this.$elem.show(),this.isShow=!0;var e=ay.get(this);e&&e.emit("modalOrPanelShow",this)}},e.prototype.hide=function(){if(this.isShow&&!(Date.now()-this.showTime<200)){this.$elem.hide(),this.isShow=!1;var e=ay.get(this);e&&e.emit("modalOrPanelHide")}},e}(),uD=function(e){function t(t){var n=e.call(this,t)||this;return n.type="dropPanel",n.$elem=Fr('<div class="w-e-drop-panel"></div>'),n}return Xg(t,e),t.prototype.genSelfElem=function(){return null},t}(aD),sD=function(e){function t(t,n){void 0===n&&(n=!1);var r=e.call(this,t,n)||this;if(r.dropPanel=null,r.menu=t,t.showDropPanel){var o=tD();r.$button.append(o)}return r}return Xg(t,e),t.prototype.onButtonClick=function(){this.menu.showDropPanel&&this.handleDropPanel()},t.prototype.handleDropPanel=function(){var e=this.menu;if(null!=e.getPanelContentElem){var t=yD(this);if(null==this.dropPanel){var n=new uD(t),r=e.getPanelContentElem(t);n.renderContent(r),n.appendTo(this.$elem),n.show(),this.dropPanel=n}else{var o=this.dropPanel;o.isShow?o.hide():(r=e.getPanelContentElem(t),o.renderContent(r),o.show())}var i=this.dropPanel;if(i.isShow){var a=this.$elem,u=a.offset().left,s=a.parents(".w-e-bar");u-s.offset().left>=s.width()/2?i.$elem.css({left:"none",right:"0"}):i.$elem.css({left:"0",right:"none"})}}},t}(oD),lD=function(e){function t(t,n){void 0===n&&(n=0);var r=e.call(this,t)||this;r.type="modal",r.$elem=Fr('<div class="w-e-modal"></div>'),r.width=0,n&&(r.width=n);var o=r.$elem;return o.on("click",(function(e){return e.stopPropagation()})),o.on("keyup",(function(e){"Escape"===e.code&&(r.hide(),t.restoreSelection())})),r}return Xg(t,e),t.prototype.genSelfElem=function(){var e=this,t=Fr('<span class="btn-close"><svg viewBox="0 0 1024 1024"><path d="M1024 896.1024l-128 128L512 640 128 1024 0 896 384 512 0 128 128 0 512 384 896.1024 0l128 128L640 512z"></path></svg></span>'),n=ay.get(this);return t.on("click",(function(){e.hide(),null==n||n.restoreSelection()})),t},t.prototype.setStyle=function(e){var t=this.width,n=this.$elem;n.attr("style",""),t&&n.css("width",t+"px"),n.css(e)},t}(aD);function cD(e,t,n){var r=Fr('<label class="babel-container"></label>');r.append("<span>"+e+"</span>");var o=Fr('<input type="text" id="'+t+'" placeholder="'+(n||"")+'">');return r.append(o),[r[0],o[0]]}function fD(e,t){var n=Fr('<div class="button-container"></div>'),r=Fr('<button type="button" id="'+e+'">'+t+"</button>");return n.append(r),[n[0],r[0]]}var dD=function(e){function t(t,n){void 0===n&&(n=!1);var r=e.call(this,t,n)||this;return r.$body=Fr("body"),r.modal=null,r.menu=t,r}return Xg(t,e),t.prototype.onButtonClick=function(){this.menu.showModal&&this.handleModal()},t.prototype.getPosition=function(){var e=yD(this),t=this.menu.getModalPositionNode(e);return ft.isElement(t)?lE(e,t,"modal"):sE(e)},t.prototype.handleModal=function(){var e=yD(this),t=this.menu;if(null==this.modal){var n=new lD(e,t.modalWidth);this.renderAndShowModal(n,!0),this.modal=n}else(n=this.modal).isShow?n.hide():this.renderAndShowModal(n,!1)},t.prototype.renderAndShowModal=function(e,t){void 0===t&&(t=!1);var n=yD(this),r=this.menu;if(null!=r.getModalContentElem){var o=Wy.getTextarea(n),i=Wy.getToolbar(n),a=((null==i?void 0:i.getConfig())||{}).modalAppendToBody,u=r.getModalContentElem(n);if(e.renderContent(u),a)e.setStyle({left:"0",right:"0"});else{var s=this.getPosition();e.setStyle(s)}t&&(a?e.appendTo(this.$body):e.appendTo(o.$textAreaContainer)),e.show(),a||cE(n,e.$elem),setTimeout((function(){n.blur()}))}},t}(oD),pD=function(e){function t(t,n){var r=e.call(this,t)||this;return r.type="selectList",r.$elem=Fr('<div class="w-e-select-list"></div>'),n&&r.$elem.css("width",n+"px"),r.$elem.on("click",(function(e){e.stopPropagation()})),r}return Xg(t,e),t.prototype.renderList=function(e){var t=this.$elem;t.empty();var n=Fr("<ul></ul>");e.forEach((function(e){var t=e.value,r=e.text,o=e.selected,i=e.styleForRenderMenuList,a=Fr('<li data-value="'+t+'"></li>');if(i&&a.css(i),o){var u=Fr('<svg viewBox="0 0 1446 1024"><path d="M574.116299 786.736392 1238.811249 48.517862C1272.390222 11.224635 1329.414799 7.827718 1366.75664 41.450462 1403.840015 74.840484 1406.731043 132.084741 1373.10189 169.433699L655.118888 966.834607C653.072421 969.716875 650.835807 972.514337 648.407938 975.210759 615.017957 1012.29409 558.292155 1015.652019 521.195664 982.250188L72.778218 578.493306C35.910826 545.297758 32.859041 488.584019 66.481825 451.242134 99.871807 414.158803 156.597563 410.800834 193.694055 444.202665L574.116299 786.736392Z"></path></svg>');a.append(u),a.addClass("selected")}a.append(Fr('<span data-value="'+t+'">'+r+"</span>")),a.attr("title",r),n.append(a)})),t.append(n)},t.prototype.genSelfElem=function(){return null},t}(aD),hD=function(){function e(e,t){var n=this;void 0===t&&(t=!1),this.$elem=Fr('<div class="w-e-bar-item"></div>'),this.$button=Fr('<button type="button" class="select-button"></button>'),this.disabled=!1,this.selectList=null;var r=e.tag,o=e.title,i=e.width,a=e.iconSvg,u=void 0===a?"":a,s=e.hotkey,l=void 0===s?"":s;if("select"!==r)throw new Error("Invalid tag '"+r+"', expected 'select'");var c=this.$button;i&&c.css("width",i+"px"),rD(c,u,o,l,t),this.$elem.append(c),this.menu=e,Kb((function(){return n.init()}))}return e.prototype.init=function(){var e=this;this.setSelectedValue(),this.$button.on("click",(function(t){t.preventDefault(),yD(e).hidePanelOrModal(),e.trigger()}))},e.prototype.trigger=function(){var e=this,t=yD(this);if(!t.isDisabled()&&!this.disabled){var n=this.menu;if(null==this.selectList){this.selectList=new pD(t,n.selectPanelWidth);var r=this.selectList,o=n.getOptions(t);r.renderList(o),r.appendTo(this.$elem),r.show(),r.$elem.on("click","li",(function(t){var n=t.target;if(null!=n){t.preventDefault();var r=Fr(n).attr("data-value");e.onChange(r)}}))}else(r=this.selectList).isShow?r.hide():(o=n.getOptions(t),r.renderList(o),r.show())}},e.prototype.onChange=function(e){var t=yD(this),n=this.menu;n.exec&&n.exec(t,e)},e.prototype.setSelectedValue=function(){var e=yD(this),t=this.menu,n=t.getValue(e),r=function(e,t){for(var n=e.length,r="",o=0;o<n;o++){var i=e[o];if(i.value===t){r=i.text;break}}return r}(t.getOptions(e),n.toString()),o=this.$button,i=tD();o.empty(),o.text(r),o.append(i)},e.prototype.setDisabled=function(){var e=yD(this),t=this.menu.isDisabled(e),n=this.$button;(null==e.selection||e.isDisabled())&&(t=!0);var r="disabled";t?n.addClass(r):n.removeClass(r),this.disabled=t},e.prototype.changeMenuState=function(){this.setSelectedValue(),this.setDisabled()},e}(),gD=function(){function e(e){this.$elem=Fr('<div class="w-e-bar-item w-e-bar-item-group"></div>'),this.$container=Fr('<div class="w-e-bar-item-menus-container"></div>'),this.$button=Fr('<button type="button"></button>');var t=e.iconSvg,n=e.title,r=this.$elem,o=this.$button;if(t){var i=Fr(t);eD(i),o.append(i)}else o.text(n);var a=tD();o.append(a),r.append(o);var u=this.$container;r.append(u);var s=this.createObserver();this.observe(s)}return e.prototype.appendBarItem=function(e){var t=e.$elem;this.$container.append(t)},e.prototype.observe=function(e){var t=this.$container;e.observe(t[0],{childList:!0,subtree:!0,attributes:!0})},e.prototype.createObserver=function(){var e=this,t=this.$container,n=this.$button,r=new MutationObserver((function(){var o=t.find("button"),i=o.length;if(0!==i){var a=0;o.each((function(e){Fr(e).hasClass("disabled")&&a++})),r.disconnect(),a===i?n.addClass("disabled"):n.removeClass("disabled"),e.observe(r)}}));return r},e}(),vD=new WeakMap;function yD(e){var t=oy.get(e);if(null==t)throw new Error("Can not get editor instance");return t}function mD(e,t){void 0===t&&(t=!1);var n=vD.get(e);if(n)return n;var r=e.tag;if("button"===r){var o=e.showDropPanel,i=e.showModal;n=o?new sD(e,t):i?new dD(e,t):new iD(e,t)}if("select"===r&&(n=new hD(e,t)),null==n)throw new Error("Invalid tag in menu "+JSON.stringify(e));return vD.set(e,n),n}function bD(e,t){var n=e.selection;return null!=n&&!jt.isCollapsed(n)&&!Wy.getSelectedElems(e).some((function(t){if(e.isVoid(t))return!0;var n=t.type;return!!["pre","code","table"].includes(n)||void 0}))&&!!$t.isText(t)}var wD=function(){function e(){var e=this;this.$elem=Fr('<div class="w-e-bar w-e-bar-hidden w-e-hover-bar"></div>'),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null,this.isShow=!1,this.changeHoverbarState=$a((function(){var t=e.isShow,n=e.getSelectedNodeAndMenuKeys()||{},r=n.node,o=void 0===r?null:r,i=n.menuKeys,a=void 0===i?[]:i;null!=o&&e.changeItemsState(),o&&ft.isElement(o)&&t&&e.isSamePath(o,e.prevSelectedNode)||(e.hideAndClean(),null!=o&&(e.registerItems(a),e.setPosition(o),e.show()),e.prevSelectedNode=o)}),200),Kb((function(){var t=e.getEditorInstance(),n=e.$elem;n.on("mousedown",(function(e){return e.preventDefault()})),Wy.getTextarea(t).$textAreaContainer.append(n),t.on("change",e.changeHoverbarState);var r=e.hideAndClean.bind(e);t.on("scroll",r),t.on("fullScreen",r),t.on("unFullScreen",r)}))}return e.prototype.getMenus=function(){return this.menus},e.prototype.hideAndClean=function(){var e=this.$elem;e.removeClass("w-e-bar-show").addClass("w-e-bar-hidden"),this.hoverbarItems=[],e.empty(),this.isShow=!1},e.prototype.checkPositionBottom=function(){var e=this.$elem,t=!1,n=window.innerHeight;n&&n>=360&&n-e[0].getBoundingClientRect().bottom<360&&(t=!0),t?e.addClass("w-e-bar-bottom"):e.removeClass("w-e-bar-bottom")},e.prototype.show=function(){this.$elem.removeClass("w-e-bar-hidden").addClass("w-e-bar-show"),this.isShow=!0,this.checkPositionBottom()},e.prototype.changeItemsState=function(){var e=this;Kb((function(){e.hoverbarItems.forEach((function(e){e.changeMenuState()}))}))},e.prototype.registerItems=function(e){var t=this,n=this.$elem;e.forEach((function(e){if("|"!==e)t.registerSingleItem(e);else{var r=nD();n.append(r)}}))},e.prototype.registerSingleItem=function(e){var t=this.getEditorInstance(),n=this.menus,r=n[e];if(null==r){var o=Ky[e];if(null==o)throw new Error("Not found menu item factory by key '"+e+"'");if("function"!=typeof o)throw new Error("Menu item factory (key='"+e+"') is not a function");r=o(),n[e]=r}var i=mD(r);this.hoverbarItems.push(i),oy.set(i,t),this.$elem.append(i.$elem)},e.prototype.setPosition=function(e){var t=this.getEditorInstance(),n=this.$elem;if(n.attr("style",""),ft.isElement(e)){var r=lE(t,e,"bar");return n.css(r),void cE(t,n)}if($t.isText(e))return r=sE(t),n.css(r),void cE(t,n);throw new Error("hoverbar.setPosition error, current selected node is not elem nor text")},e.prototype.getSelectedNodeAndMenuKeys=function(){var e=this.getEditorInstance();if(null==e.selection)return null;var t=this.getHoverbarKeysConf(),n=null,r=[],o=function(o){var i=t[o],a=i.match,u=i.menuKeys,s=void 0===u?[]:u,l=a||function(e,t){return Wy.checkNodeType(t,o)},c=Qg(yt.nodes(e,{match:function(t){return l(e,t)},universal:!0}),1),f=c[0];if(null!=f)return n=f[0],r=s,"break"};for(var i in t)if("break"===o(i))break;return null==n||0===r.length?null:{node:n,menuKeys:r}},e.prototype.getEditorInstance=function(){var e=ny.get(this);if(null==e)throw new Error("Can not get editor instance");return e},e.prototype.getHoverbarKeysConf=function(){var e=this.getEditorInstance().getConfig().hoverbarKeys,t=void 0===e?{}:e,n=t.text;return n&&null==n.match&&(n.match=bD),t},e.prototype.isSamePath=function(e,t){if(null==e||null==t)return!1;var n=Wy.findPath(null,e),r=Wy.findPath(null,t);return At.equals(n,r)},e.prototype.destroy=function(){this.changeHoverbarState.cancel(),this.$elem.remove(),this.menus={},this.hoverbarItems=[],this.prevSelectedNode=null},e}();function ED(e,t,n){var r=Fr(n);return!!r.attr(t)||(r.attr(t,"true"),e.on("destroyed",(function(){r.removeAttr(t)})),!1)}function DD(e,t,n,r){if(fy.set(e,t),dy.set(e,n),ft.isElement(e)){var o=e.children;if((void 0===o?[]:o).forEach((function(t,n){return DD(t,n,e,r)})),yt.isVoid(r,e)){var i=Qg(Dt.texts(e),1),a=Qg(i[0],1)[0];fy.set(a,0),dy.set(a,e)}}}function CD(e){var t,n,r,o=e.selector,i=void 0===o?"":o,a=e.config,u=void 0===a?{}:a,s=e.content,l=e.html,c=e.plugins,f=void 0===c?[]:c,d=(e=>{var t=e,{apply:n}=t;return t.history={undos:[],redos:[]},t.redo=()=>{var{history:e}=t,{redos:n}=e;if(n.length>0){var r=n[n.length-1];Dh.withoutSaving(t,(()=>{yt.withoutNormalizing(t,(()=>{for(var e of r)t.apply(e)}))})),e.redos.pop(),e.undos.push(r)}},t.undo=()=>{var{history:e}=t,{undos:n}=e;if(n.length>0){var r=n[n.length-1];Dh.withoutSaving(t,(()=>{yt.withoutNormalizing(t,(()=>{var e=r.map(St.inverse).reverse();for(var n of e)t.apply(n)}))})),e.redos.push(r),e.undos.pop()}},t.apply=e=>{var{operations:r,history:o}=t,{undos:i}=o,a=i[i.length-1],u=a&&a[a.length-1],s=((e,t)=>!(!t||"set_selection"!==e.type||"set_selection"!==t.type))(e,u),l=Dh.isSaving(t),c=Dh.isMerging(t);if(null==l&&(l=((e,t)=>"set_selection"!==e.type||null!=e.properties&&null!=e.newProperties)(e)),l){if(null==c&&(c=null!=a&&(0!==r.length||((e,t)=>"set_selection"===e.type||!(!t||"insert_text"!==e.type||"insert_text"!==t.type||e.offset!==t.offset+t.text.length||!At.equals(e.path,t.path))||!(!t||"remove_text"!==e.type||"remove_text"!==t.type||e.offset+e.text.length!==t.offset||!At.equals(e.path,t.path)))(e,u)||s)),a&&c)s&&a.pop(),a.push(e);else{var f=[e];i.push(f)}for(;i.length>100;)i.shift();(e=>"set_selection"!==e.type)(e)&&(o.redos=[])}n(e)},t})(function(e){var t=e,n=t.insertText,r=t.insertNode,o=t.insertFragment;return t.insertText=function(e){if(t.getConfig().maxLength){var r=Wy.getLeftLengthOfMaxLength(t);r<=0||(r<e.length?n(e.slice(0,r)):n(e))}else n(e)},t.insertNode=function(e){if(t.getConfig().maxLength){var n=Wy.getLeftLengthOfMaxLength(t);n<=0||n<Dt.string(e).length||r(e)}else r(e)},t.insertFragment=function(e){t.getConfig().maxLength?e.forEach((function(e){t.insertNode(e)})):o(e)},t}(function(e){var t=e;return t.on=function(e,n){var r=nE(t);if(r.on(e,n),"destroyed"===e&&oE(t,n),"destroyed"!==e){var o=function(){return r.off(e,n)};r.on("destroyed",o),oE(t,o)}},t.once=function(e,n){nE(t).once(e,n)},t.off=function(e,n){nE(t).off(e,n)},t.emit=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];var o=nE(t);o.emit.apply(o,ev([e],Qg(n))),"destroyed"===e&&(iE(t).forEach((function(e){return o.off("destroyed",e)})),aE(t))},t}(function(e){var t=e;return t.select=function(e){an.select(t,e)},t.deselect=function(){var n=t.selection,r=Wy.findDocumentOrShadowRoot(t).getSelection();r&&r.rangeCount>0&&r.removeAllRanges(),n&&an.deselect(e)},t.move=function(t,n){void 0===n&&(n=!1),t&&(t<0||an.move(e,{distance:t,unit:"character",reverse:n}))},t.moveReverse=function(e){t.move(e,!0)},t.restoreSelection=function(){var e=wy.get(t);null!=e&&(t.focus(),an.select(t,e))},t.getSelectionPosition=function(){return sE(t)},t.getNodePosition=function(e){return lE(t,e)},t.isSelectedAll=function(){var e=t.selection;if(null==e)return!1;var n=Qg(jt.edges(e),2),r=n[0],o=n[1],i=Qg(yt.edges(t,[]),2),a=i[0],u=i[1];return!(!Ft.equals(r,a)||!Ft.equals(o,u))},t.selectAll=function(){var e=yt.start(t,[]),n=yt.end(t,[]);an.select(t,{anchor:e,focus:n})},t}(function(e){var t=e,n=t.onChange,r=t.insertText,o=t.apply,i=t.deleteBackward;return t.insertText=function(e){t.getConfig().readOnly||r(e)},t.apply=function(e){var n,r,i,a,u,s,l,c,f=[];switch(e.type){case"insert_text":case"remove_text":case"set_node":try{for(var d=Jg(yt.levels(t,{at:e.path})),p=d.next();!p.done;p=d.next()){var h=Qg(p.value,2),g=h[0],v=h[1],y=Wy.findKey(t,g);f.push([v,y])}}catch(Qh){n={error:Qh}}finally{try{p&&!p.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}break;case"insert_node":case"remove_node":case"merge_node":case"split_node":try{for(var m=Jg(yt.levels(t,{at:At.parent(e.path)})),b=m.next();!b.done;b=m.next()){var w=Qg(b.value,2);g=w[0],v=w[1],y=Wy.findKey(t,g),f.push([v,y])}}catch(Qh){i={error:Qh}}finally{try{b&&!b.done&&(a=m.return)&&a.call(m)}finally{if(i)throw i.error}}break;case"move_node":try{for(var E=Jg(yt.levels(t,{at:At.common(At.parent(e.path),At.parent(e.newPath))})),D=E.next();!D.done;D=E.next()){var C=Qg(D.value,2);g=C[0],v=C[1],y=Wy.findKey(t,g),f.push([v,y])}}catch(Qh){u={error:Qh}}finally{try{D&&!D.done&&(s=E.return)&&s.call(E)}finally{if(u)throw u.error}}}o(e);try{for(var x=Jg(f),S=x.next();!S.done;S=x.next()){var A=Qg(S.value,2);v=A[0],y=A[1],g=Qg(yt.node(t,v),1)[0],yy.set(g,y)}}catch(Qh){l={error:Qh}}finally{try{S&&!S.done&&(c=x.return)&&c.call(x)}finally{if(l)throw l.error}}},t.deleteBackward=function(n){if("line"!==n)return i(n);if(e.selection&&jt.isCollapsed(e.selection)){var r=yt.above(e,{match:function(t){return yt.isBlock(e,t)},at:e.selection});if(r){var o=Qg(r,2)[1],a=yt.range(e,o,e.selection.anchor),u=function(e,t){var n=yt.range(e,jt.end(t)),r=Array.from(yt.positions(e,{at:t})),o=0,i=r.length,a=Math.floor(i/2);if(Jb(e,yt.range(e,r[o]),n))return yt.range(e,r[o],n);if(r.length<2)return yt.range(e,r[r.length-1],n);for(;a!==r.length&&a!==o;)Jb(e,yt.range(e,r[a]),n)?i=a:o=a,a=Math.floor((o+i)/2);return yt.range(e,r[i],n)}(t,a);jt.isCollapsed(u)||an.delete(e,{at:u})}}},t.onChange=function(){var e=t.selection;null!=e&&wy.set(t,e),t.emit("change"),n()},t.handleTab=function(){t.insertText("    ")},t.getHtml=function(){var e=t.children;return(void 0===e?[]:e).map((function(e){return Yb(e,t)})).join("")},t.getText=function(){var e=t.children;return(void 0===e?[]:e).map((function(e){return Dt.string(e)})).join("\n")},t.getSelectionText=function(){var n=t.selection;return null==n?"":yt.string(e,n)},t.getElemsByType=function(e,n){var r,o;void 0===n&&(n=!1);var i=[],a=yt.nodes(t,{at:[],universal:!0});try{for(var u=Jg(a),s=u.next();!s.done;s=u.next()){var l=Qg(s.value,1)[0];if(ft.isElement(l)&&(n?l.type.indexOf(e)>=0:l.type===e)){var c=Xb(Wy.findKey(t,l).id);i.push(Zg(Zg({},l),{id:c}))}}}catch(Qh){r={error:Qh}}finally{try{s&&!s.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}return i},t.getElemsByTypePrefix=function(e){return t.getElemsByType(e,!0)},t.isEmpty=function(){var e=t.children,n=void 0===e?[]:e;if(n.length>1)return!1;var r=n[0];if(null==r)return!0;if(ft.isElement(r)&&"paragraph"===r.type){var o=r.children,i=void 0===o?[]:o;if(i.length>1)return!1;var a=i[0];if(null==a)return!0;if($t.isText(a)&&""===a.text)return!0}return!1},t.clear=function(){an.removeNodes(t,{at:{anchor:yt.start(t,[]),focus:yt.end(t,[])},mode:"highest"}),0===t.children.length&&an.insertNodes(t,[{type:"paragraph",children:[{text:""}]}])},t.getParentNode=function(e){return Wy.getParentNode(t,e)},t.dangerouslyInsertHtml=function(e){if(void 0===e&&(e=""),e){var n=Fr(e);if(0!==(n=n.filter((function(e){if(e.nodeType!==Ay.ELEMENT_NODE)return!1;var t=Ry(Fr(e));return!jw.has(t)}))).length){var r=Fr('<div hidden="true"></div>');r.append(n),Fr("body").append(r);var o=[];if(n.forEach((function(e){var n=!1;if(Qb.includes(e.tagName.toLowerCase()))n=!0;else for(var r in nw)if(e.matches(r)){n=!0;break}if(n){var i=Fr(e);o.push(Pw(i,t))}else{var a=Ny(e).trim();a&&a.split(/\r\n|\r|\n/).forEach((function(e,t){e.trim()&&o.push({type:"paragraph",children:[{text:e}]})}))}})),o.length)try{t.insertFragment(o)}catch(i){t.insertText(Ny(r[0]))}r.remove()}}},t.setHtml=function(n){if(void 0===n&&(n=""),n){var r=t.isDisabled(),o=t.isFocused(),i=JSON.stringify(t.selection);if(t.enable(),t.focus(),t.select([]),t.deleteFragment(),an.setNodes(e,{type:"paragraph"},{mode:"highest"}),t.dangerouslyInsertHtml(n),o||(t.deselect(),t.blur()),r&&(t.deselect(),t.disable()),t.isFocused())try{t.select(JSON.parse(i))}catch(a){t.select(yt.start(t,[]))}}},t}(function(e){var t=e;return t.getAllMenuKeys=function(){var e=[];for(var t in Ky)e.push(t);return e},t.getConfig=function(){var e=uy.get(t);if(null==e)throw new Error("Can not get editor config");return e},t.getMenuConfig=function(e){var n=t.getConfig().MENU_CONF;return(void 0===n?{}:n)[e]||{}},t.alert=function(e,n){void 0===n&&(n="info");var r=t.getConfig().customAlert;r&&r(e,n)},t}(function(e){var t=e;return t.id="wangEditor-"+qy++,t.isDestroyed=!1,t.isFullScreen=!1,t.focus=function(e){var n=Wy.toDOMNode(t,t),r=Wy.findDocumentOrShadowRoot(t);if(by.set(t,!0),e){var o=yt.end(t,[]);an.select(t,o)}r.activeElement!==n&&n.focus({preventScroll:!0})},t.isFocused=function(){return!!by.get(t)},t.blur=function(){var e=Wy.toDOMNode(t,t),n=Wy.findDocumentOrShadowRoot(t);by.set(t,!1),n.activeElement===e&&(e.blur(),an.deselect(t))},t.updateView=function(){Wy.getTextarea(t).changeViewState();var e=Wy.getToolbar(t);e&&e.changeToolbarState();var n=Wy.getHoverbar(t);n&&n.changeHoverbarState()},t.destroy=function(){if(!t.isDestroyed){var e=Wy.getTextarea(t);e.destroy(),Jv.delete(t),Qv.delete(e);var n=Wy.getToolbar(t);n&&(n.destroy(),ty.delete(t),ey.delete(n));var r=Wy.getHoverbar(t);r&&(r.destroy(),ry.delete(t),ny.delete(r)),t.isDestroyed=!0,t.emit("destroyed")}},t.scrollToElem=function(e){if(!t.getConfig().scroll){var n="编辑器禁用了 scroll ，编辑器内容无法滚动，请自行实现该功能";return n+="\nYou has disabled editor scroll, please do this yourself",void console.warn(n)}var r=Fr("#"+e);if(0!==r.length){var o=r[0];if(!Wy.hasDOMNode(t,o))return n="Element (found by id is '"+e+"') is not in editor DOM",n+="\n 通过 id '"+e+"' 找到的 element 不在 editor DOM 之内",void console.error(n,o);var i=Wy.getTextarea(t),a=i.$textAreaContainer,u=i.$scroll,s=r.offset().top,l=a.offset().top;u[0].scrollBy({top:s-l,behavior:"smooth"})}},t.showProgressBar=function(e){e<1||Wy.getTextarea(t).changeProgress(e)},t.hidePanelOrModal=function(){var e=iy.get(t);null!=e&&e.forEach((function(e){return e.hide()}))},t.enable=function(){t.getConfig().readOnly=!1,t.updateView()},t.disable=function(){t.getConfig().readOnly=!0,t.updateView()},t.isDisabled=function(){return t.getConfig().readOnly},t.toDOMNode=function(e){return Wy.toDOMNode(t,e)},t.fullScreen=function(){if(!t.isFullScreen){var e=null,n=Wy.getToolbar(t);n&&(e=n.$box);var r=Wy.getTextarea(t).$box.parent();if(e&&e.parent()[0]!==r[0])throw new Error("Can not set full screen, cause toolbar DOM parent is not equal to textarea DOM parent\n不能设置全屏，因为 toolbar DOM 父节点和 textarea DOM 父节点不一致");r.addClass("w-e-full-screen-container");var o=r.css("z-index");r.attr("data-z-index",o.toString()),t.isFullScreen=!0,t.emit("fullScreen")}},t.unFullScreen=function(){if(t.isFullScreen){var e=Wy.getTextarea(t).$box.parent();setTimeout((function(){e.removeClass("w-e-full-screen-container"),t.isFullScreen=!1,t.emit("unFullScreen")}),200)}},t.getEditableContainer=function(){return Wy.getTextarea(t).$textAreaContainer[0]},t}((t={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,onChange:()=>{},apply:e=>{for(var n of yt.pathRefs(t))Ot.transform(n,e);for(var r of yt.pointRefs(t))_t.transform(r,e);for(var o of yt.rangeRefs(t))Nt.transform(o,e);var i=new Set,a=[],u=e=>{if(e){var t=e.join(",");i.has(t)||(i.add(t),a.push(e))}},s=Ae.get(t)||[],l=je(e);for(var c of s)u(At.transform(c,e));for(var f of l)u(f);Ae.set(t,a),an.transform(t,e),t.operations.push(e),yt.normalize(t),"set_selection"===e.type&&(t.marks=null),Oe.get(t)||(Oe.set(t,!0),Promise.resolve().then((()=>{Oe.set(t,!1),t.onChange(),t.operations=[]})))},addMark:(e,n)=>{var{selection:r}=t;if(r)if(jt.isExpanded(r))an.setNodes(t,{[e]:n},{match:$t.isText,split:!0});else{var o=Pe(Pe({},yt.marks(t)||{}),{},{[e]:n});t.marks=o,Oe.get(t)||t.onChange()}},deleteBackward:e=>{var{selection:n}=t;n&&jt.isCollapsed(n)&&an.delete(t,{unit:e,reverse:!0})},deleteForward:e=>{var{selection:n}=t;n&&jt.isCollapsed(n)&&an.delete(t,{unit:e})},deleteFragment:e=>{var{selection:n}=t;n&&jt.isExpanded(n)&&an.delete(t,{reverse:"backward"===e})},getFragment:()=>{var{selection:e}=t;return e?Dt.fragment(t,e):[]},insertBreak:()=>{an.splitNodes(t,{always:!0})},insertFragment:e=>{an.insertFragment(t,e)},insertNode:e=>{an.insertNodes(t,e)},insertText:e=>{var{selection:n,marks:r}=t;if(n){if(r){var o=Pe({text:e},r);an.insertNodes(t,o)}else an.insertText(t,e);t.marks=null}},normalizeNode:e=>{var[n,r]=e;if(!$t.isText(n))if(ft.isElement(n)&&0===n.children.length)an.insertNodes(t,{text:""},{at:r.concat(0),voids:!0});else for(var o=!yt.isEditor(n)&&ft.isElement(n)&&(t.isInline(n)||0===n.children.length||$t.isText(n.children[0])||t.isInline(n.children[0])),i=0,a=0;a<n.children.length;a++,i++){var u=Dt.get(t,r);if(!$t.isText(u)){var s=n.children[a],l=u.children[i-1],c=a===n.children.length-1;($t.isText(s)||ft.isElement(s)&&t.isInline(s))!==o?(an.removeNodes(t,{at:r.concat(i),voids:!0}),i--):ft.isElement(s)?t.isInline(s)&&(null!=l&&$t.isText(l)?c&&(an.insertNodes(t,{text:""},{at:r.concat(i+1),voids:!0}),i++):(an.insertNodes(t,{text:""},{at:r.concat(i),voids:!0}),i++)):null!=l&&$t.isText(l)&&($t.equals(s,l,{loose:!0})?(an.mergeNodes(t,{at:r.concat(i),voids:!0}),i--):""===l.text?(an.removeNodes(t,{at:r.concat(i-1),voids:!0}),i--):""===s.text&&(an.removeNodes(t,{at:r.concat(i),voids:!0}),i--))}}},removeMark:e=>{var{selection:n}=t;if(n)if(jt.isExpanded(n))an.unsetNodes(t,e,{match:$t.isText,split:!0});else{var r=Pe({},yt.marks(t)||{});delete r[e],t.marks=r,Oe.get(t)||t.onChange()}}},r=(n=t).insertText,n.insertFragment,n.setFragmentData=function(e){var t=n.selection;if(t){var r=Qg(jt.edges(t),2),o=r[0],i=r[1],a=yt.void(n,{at:o.path}),u=yt.void(n,{at:i.path});if(!jt.isCollapsed(t)||a){var s=Wy.toDOMRange(n,t),l=s.cloneContents(),c=l.childNodes[0];if(l.childNodes.forEach((function(e){e.textContent&&""!==e.textContent.trim()&&(c=e)})),u){var f=Qg(u,1)[0],d=s.cloneRange(),p=Wy.toDOMNode(n,f);d.setEndAfter(p),l=d.cloneContents()}if(a&&(c=l.querySelector("[data-slate-spacer]")),Array.from(l.querySelectorAll("[data-slate-zero-width]")).forEach((function(e){var t="n"===e.getAttribute("data-slate-zero-width");e.textContent=t?"\n":""})),_y(c)){var h=c.ownerDocument.createElement("span");h.style.whiteSpace="pre",h.appendChild(c),l.appendChild(h),c=h}var g=n.getFragment(),v=JSON.stringify(g),y=window.btoa(encodeURIComponent(v));c.setAttribute("data-slate-fragment",y),e.setData("application/x-slate-fragment",y);var m=l.ownerDocument.createElement("div");return m.appendChild(l),m.setAttribute("hidden","true"),l.ownerDocument.body.appendChild(m),e.setData("text/html",m.innerHTML),e.setData("text/plain",Ny(m)),l.ownerDocument.body.removeChild(m),e}}},n.insertData=function(e){var t,o,i=e.getData("application/x-slate-fragment");if(i){var a=decodeURIComponent(window.atob(i)),u=JSON.parse(a);n.insertFragment(u)}else{var s=e.getData("text/plain"),l=e.getData("text/html");if(l)n.dangerouslyInsertHtml(l);else if(s){var c=s.split(/\r\n|\r|\n/),f=!1;try{for(var d=Jg(c),p=d.next();!p.done;p=d.next()){var h=p.value;f&&an.splitNodes(n,{always:!0}),r(h),f=!0}}catch(g){t={error:g}}finally{try{p&&!p.done&&(o=d.return)&&o.call(d)}finally{if(t)throw t.error}}}}},n))))))));if(i&&function(e,t){return ED(e,"data-w-e-textarea",t)}(d,i))throw new Error("Repeated create editor by selector '"+i+"'");var p=function(e){void 0===e&&(e={});var t=Ha(Gy),n={},r=e.MENU_CONF,o=void 0===r?{}:r;return Bo(t,(function(e,t){n[t]=Zg(Zg({},e),o[t]||{})})),delete e.MENU_CONF,Zg({scroll:!0,readOnly:!1,autoFocus:!0,decorate:function(){return[]},maxLength:0,MENU_CONF:n,hoverbarKeys:{},customAlert:function(e,t){window.alert(t+":\n"+e)}},e)}(u);uy.set(d,p);var h=p.hoverbarKeys,g=void 0===h?{}:h;if(f.forEach((function(e){d=e(d)})),l){var v=Fr("<div>"+l+"</div>");d.children=Array.from(v.children()).map((function(e){return Pw(Fr(e),d)}))}if(s&&s.length&&(d.children=s),0===d.children.length&&(d.children=[{type:"paragraph",children:[{text:""}]}]),Wy.normalizeContent(d),i){var y=new QE(i);Jv.set(d,y),Qv.set(y,d),y.changeViewState(),Kb((function(){var e=y.$scroll;null!=e&&e.height()<300&&console.warn("编辑区域高度 < 300px 这可能会导致 modal hoverbar 定位异常\nTextarea height < 300px . This may be cause modal and hoverbar position error",e)}));var m=void 0;Object.keys(g).length>0&&(m=new wD,ny.set(m,d),ry.set(d,m)),d.on("change",(function(){d.hidePanelOrModal()})),d.on("scroll",(function(){d.hidePanelOrModal()}))}else d.children.forEach((function(e,t){return DD(e,t,d,d)}));var b=p.onCreated,w=p.onDestroyed;return b&&d.on("created",(function(){return b(d)})),w&&d.on("destroyed",(function(){return w(d)})),Kb((function(){return d.emit("created")})),d}var xD=rp("splice"),SD=Ql.TypeError,AD=Math.max,OD=Math.min;tp({target:"Array",proto:!0,forced:!xD},{splice:function(e,t){var n,r,o,i,a,u,s=dc(this),l=od(s),c=jd(e,l),f=arguments.length;if(0===f?n=r=0:1===f?(n=0,r=l-c):(n=f-2,r=OD(AD(td(t),0),l-c)),l+n-r>9007199254740991)throw SD("Maximum allowed length exceeded");for(o=vd(s,r),i=0;i<r;i++)(a=c+i)in s&&dp(o,i,s[a]);if(o.length=r,n<r){for(i=c;i<l-r;i++)u=i+n,(a=i+r)in s?s[u]=s[a]:delete s[u];for(i=l;i>l-r+n;i--)delete s[i-1]}else if(n>r)for(i=l-r;i>c;i--)u=i+n-1,(a=i+r-1)in s?s[u]=s[a]:delete s[u];for(i=0;i<n;i++)s[i+c]=arguments[i+2];return s.length=l-r+n,o}});var kD=function(){function e(e,t){var n=this;this.$toolbar=Fr('<div class="w-e-bar w-e-bar-show w-e-toolbar"></div>'),this.menus={},this.toolbarItems=[],this.config={},this.changeToolbarState=$a((function(){n.toolbarItems.forEach((function(e){e.changeMenuState()}))}),200),this.config=t;var r=Fr(e);if(0===r.length)throw new Error("Cannot find toolbar DOM by selector '"+e+"'");this.$box=r;var o=this.$toolbar;o.on("mousedown",(function(e){return e.preventDefault()})),r.append(o),Kb((function(){n.registerItems(),n.changeToolbarState(),n.getEditorInstance().on("change",n.changeToolbarState)}))}return e.prototype.getMenus=function(){return this.menus},e.prototype.getConfig=function(){return this.config},e.prototype.registerItems=function(){var e=this,t="",n=this.$toolbar,r=this.config,o=r.toolbarKeys,i=void 0===o?[]:o,a=r.insertKeys,u=void 0===a?{index:0,keys:[]}:a,s=r.excludeKeys,l=void 0===s?[]:s,c=Ha(i);u.keys.length>0&&("string"==typeof u.keys&&(u.keys=[u.keys]),u.keys.forEach((function(e,t){c.splice(u.index+t,0,e)})));var f=c.filter((function(e){if("string"==typeof e){if(l.includes(e))return!1}else if(l.includes(e.key))return!1;return!0})),d=f.length;f.forEach((function(r,o){if("|"===r){if(0===o)return;if(o+1===d)return;if("|"===t)return;var i=nD();return n.append(i),void(t=r)}if("string"==typeof r)return e.registerSingleItem(r,e),void(t=r);e.registerGroup(r),t="group"}))},e.prototype.registerGroup=function(e){var t=this,n=this.$toolbar,r=new gD(e),o=e.menuKeys,i=void 0===o?[]:o,a=this.config.excludeKeys,u=void 0===a?[]:a;i.forEach((function(e){u.includes(e)||t.registerSingleItem(e,r)})),n.append(r.$elem)},e.prototype.registerSingleItem=function(e,t){var n=this.getEditorInstance(),r=t instanceof gD,o=this.menus,i=o[e];if(null==i){var a=Ky[e];if(null==a)throw new Error("Not found menu item factory by key '"+e+"'");if("function"!=typeof a)throw new Error("Menu item factory (key='"+e+"') is not a function");i=a(),o[e]=i}else console.warn("Duplicated toolbar menu key '"+e+"'\n重复注册了菜单栏 menu '"+e+"'");var u=mD(i,r);this.toolbarItems.push(u),oy.set(u,n),r?t.appendBarItem(u):t.$toolbar.append(u.$elem)},e.prototype.getEditorInstance=function(){var e=ey.get(this);if(null==e)throw new Error("Can not get editor instance");return e},e.prototype.destroy=function(){this.$toolbar.remove(),this.menus={},this.toolbarItems=[]},e}();var BD=jf.EXISTS,FD=cf.f,_D=Function.prototype,TD=sc(_D.toString),PD=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,jD=sc(PD.exec);function ND(e){var t=e.server,n=void 0===t?"":t,r=e.fieldName,o=void 0===r?"":r,i=e.maxFileSize,a=void 0===i?10485760:i,u=e.maxNumberOfFiles,s=void 0===u?100:u,l=e.meta,c=void 0===l?{}:l,f=e.metaWithUrl,d=void 0!==f&&f,p=e.headers,h=void 0===p?{}:p,g=e.withCredentials,v=void 0!==g&&g,y=e.timeout,m=void 0===y?1e4:y,b=e.onBeforeUpload,w=void 0===b?function(e){return e}:b,E=e.onSuccess,D=void 0===E?function(e,t){}:E,C=e.onError,x=void 0===C?function(e,t,n){console.error(e.name+" upload error",t,n)}:C,S=e.onProgress,A=void 0===S?function(e){}:S;if(!n)throw new Error("Cannot get upload server address\n没有配置上传地址");if(!o)throw new Error("Cannot get fieldName\n没有配置 fieldName");var O=n;d&&(O=function(e,t){var n=Qg(e.split("#"),2),r=n[0],o=n[1],i=[];Bo(t,(function(e,t){i.push(t+"="+e)}));var a=i.join("&");return r=r.indexOf("?")>0?r+"&"+a:r+"?"+a,o?r+"#"+o:r}(O,c));var k=new Ds({onBeforeUpload:w,restrictions:{maxFileSize:a,maxNumberOfFiles:s},meta:c}).use(Gl,{endpoint:O,headers:h,formData:!0,fieldName:o,bundle:!0,withCredentials:v,timeout:m});return k.on("upload-success",(function(e,t){var n=t.body;D(e,void 0===n?{}:n),k.removeFile(e.id)})),k.on("progress",(function(e){e<1||A(e)})),k.on("error",(function(e){console.error("wangEditor file upload error",e.stack)})),k.on("upload-error",(function(e,t,n){x(e,t,n),k.removeFile(e.id)})),k.on("restriction-failed",(function(e,t){x(e,t),k.removeFile(e.id)})),k}function ID(e){return(ID="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function RD(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function LD(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach((function(t){RD(e,t,n[t])}))}return e}function MD(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function zD(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function $D(e,t,n){return t&&zD(e.prototype,t),n&&zD(e,n),e}function HD(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function VD(e,t){if(t&&("object"===ID(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return HD(e)}function UD(e){return(UD=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function WD(e,t){return(WD=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function qD(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&WD(e,t)}Lc&&!BD&&FD(_D,"name",{configurable:!0,get:function(){try{return jD(PD,TD(this))[1]}catch(Qh){return""}}});var GD={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},KD=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};MD(this,e),this.init(t,n)}return $D(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||GD,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,LD({},{prefix:"".concat(this.prefix,":").concat(t,":")},this.options))}}]),e}()),YD=function(){function e(){MD(this,e),this.observers={}}return $D(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.observers[e]){var o=[].concat(this.observers[e]);o.forEach((function(e){e.apply(void 0,n)}))}if(this.observers["*"]){var i=[].concat(this.observers["*"]);i.forEach((function(t){t.apply(t,[e].concat(n))}))}}}]),e}();function XD(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function ZD(e){return null==e?"":""+e}function JD(e,t,n){e.forEach((function(e){t[e]&&(n[e]=t[e])}))}function QD(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function o(){return!e||"string"==typeof e}for(var i="string"!=typeof t?[].concat(t):t.split(".");i.length>1;){if(o())return{};var a=r(i.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{}}return o()?{}:{obj:e,k:r(i.shift())}}function eC(e,t,n){var r=QD(e,t,Object);r.obj[r.k]=n}function tC(e,t){var n=QD(e,t),r=n.obj,o=n.k;if(r)return r[o]}function nC(e,t,n){var r=tC(e,n);return void 0!==r?r:tC(t,n)}function rC(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):rC(e[r],t[r],n):e[r]=t[r]);return e}function oC(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var iC={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function aC(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return iC[e]})):e}var uC="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1;function sC(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var r=t.split(n),o=e,i=0;i<r.length;++i){if(!o)return;if("string"==typeof o[r[i]]&&i+1<r.length)return;if(void 0===o[r[i]]){for(var a=2,u=r.slice(i,i+a).join(n),s=o[u];void 0===s&&r.length>i+a;)a++,s=o[u=r.slice(i,i+a).join(n)];if(void 0===s)return;if("string"==typeof s)return s;if(u&&"string"==typeof s[u])return s[u];var l=r.slice(i+a).join(n);return l?sC(s,l,n):void 0}o=o[r[i]]}return o}}var lC=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return MD(this,t),n=VD(this,UD(t).call(this)),uC&&YD.call(HD(n)),n.data=e||{},n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),void 0===n.options.ignoreJSONStructure&&(n.options.ignoreJSONStructure=!0),n}return qD(t,YD),$D(t,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,i=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[e,t];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(a=e.split("."));var u=tC(this.data,a);return u||!i||"string"!=typeof n?u:sC(this.data&&this.data[e]&&this.data[e][t],n,o)}},{key:"addResource",value:function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=this.options.keySeparator;void 0===i&&(i=".");var a=[e,t];n&&(a=a.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(r=t,t=(a=e.split("."))[1]),this.addNamespaces(t),eC(this.data,a,r),o.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in n)"string"!=typeof n[o]&&"[object Array]"!==Object.prototype.toString.apply(n[o])||this.addResource(e,t,o,n[o],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(a=e.split("."))[1]),this.addNamespaces(t);var u=tC(this.data,a)||{};r?rC(u,n,o):u=LD({},u,n),eC(this.data,a,u),i.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?LD({},{},this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"toJSON",value:function(){return this.data}}]),t}(),cC={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,o){var i=this;return e.forEach((function(e){i.processors[e]&&(t=i.processors[e].process(t,n,r,o))})),t}},fC={},dC=function(e){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return MD(this,t),n=VD(this,UD(t).call(this)),uC&&YD.call(HD(n)),JD(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,HD(n)),n.options=r,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=KD.create("translator"),n}return qD(t,YD),$D(t,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,o=t.ns||this.options.defaultNS;if(n&&e.indexOf(n)>-1){var i=e.match(this.interpolator.nestingRegexp);if(i&&i.length>0)return{key:e,namespaces:o};var a=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(a[0])>-1)&&(o=a.shift()),e=a.join(r)}return"string"==typeof o&&(o=[o]),{key:e,namespaces:o}}},{key:"translate",value:function(e,n,r){var o=this;if("object"!==ID(n)&&this.options.overloadTranslationOptionHandler&&(n=this.options.overloadTranslationOptionHandler(arguments)),n||(n={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var i=void 0!==n.keySeparator?n.keySeparator:this.options.keySeparator,a=this.extractFromKey(e[e.length-1],n),u=a.key,s=a.namespaces,l=s[s.length-1],c=n.lng||this.language,f=n.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&"cimode"===c.toLowerCase()){if(f){var d=n.nsSeparator||this.options.nsSeparator;return l+d+u}return u}var p=this.resolve(e,n),h=p&&p.res,g=p&&p.usedKey||u,v=p&&p.exactUsedKey||u,y=Object.prototype.toString.apply(h),m=["[object Number]","[object Function]","[object RegExp]"],b=void 0!==n.joinArrays?n.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject,E="string"!=typeof h&&"boolean"!=typeof h&&"number"!=typeof h;if(w&&h&&E&&m.indexOf(y)<0&&("string"!=typeof b||"[object Array]"!==y)){if(!n.returnObjects&&!this.options.returnObjects)return this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(g,h,LD({},n,{ns:s})):"key '".concat(u," (").concat(this.language,")' returned an object instead of string.");if(i){var D="[object Array]"===y,C=D?[]:{},x=D?v:g;for(var S in h)if(Object.prototype.hasOwnProperty.call(h,S)){var A="".concat(x).concat(i).concat(S);C[S]=this.translate(A,LD({},n,{joinArrays:!1,ns:s})),C[S]===A&&(C[S]=h[S])}h=C}}else if(w&&"string"==typeof b&&"[object Array]"===y)(h=h.join(b))&&(h=this.extendTranslation(h,e,n,r));else{var O=!1,k=!1,B=void 0!==n.count&&"string"!=typeof n.count,F=t.hasDefaultValue(n),_=B?this.pluralResolver.getSuffix(c,n.count):"",T=n["defaultValue".concat(_)]||n.defaultValue;!this.isValidLookup(h)&&F&&(O=!0,h=T),this.isValidLookup(h)||(k=!0,h=u);var P=n.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,j=P&&k?void 0:h,N=F&&T!==h&&this.options.updateMissing;if(k||O||N){if(this.logger.log(N?"updateKey":"missingKey",c,l,u,N?T:h),i){var I=this.resolve(u,LD({},n,{keySeparator:!1}));I&&I.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var R=[],L=this.languageUtils.getFallbackCodes(this.options.fallbackLng,n.lng||this.language);if("fallback"===this.options.saveMissingTo&&L&&L[0])for(var M=0;M<L.length;M++)R.push(L[M]);else"all"===this.options.saveMissingTo?R=this.languageUtils.toResolveHierarchy(n.lng||this.language):R.push(n.lng||this.language);var z=function(e,t,r){o.options.missingKeyHandler?o.options.missingKeyHandler(e,l,t,N?r:j,N,n):o.backendConnector&&o.backendConnector.saveMissing&&o.backendConnector.saveMissing(e,l,t,N?r:j,N,n),o.emit("missingKey",e,l,t,h)};this.options.saveMissing&&(this.options.saveMissingPlurals&&B?R.forEach((function(e){o.pluralResolver.getSuffixes(e).forEach((function(t){z([e],u+t,n["defaultValue".concat(t)]||T)}))})):z(R,u,T))}h=this.extendTranslation(h,e,n,p,r),k&&h===u&&this.options.appendNamespaceToMissingKey&&(h="".concat(l,":").concat(u)),(k||O)&&this.options.parseMissingKeyHandler&&(h=this.options.parseMissingKeyHandler(h))}return h}},{key:"extendTranslation",value:function(e,t,n,r,o){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(LD({},n,{interpolation:LD({},this.options.interpolation,n.interpolation)}));var a,u=n.interpolation&&n.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;if(u){var s=e.match(this.interpolator.nestingRegexp);a=s&&s.length}var l=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(l=LD({},this.options.interpolation.defaultVariables,l)),e=this.interpolator.interpolate(e,l,n.lng||this.language,n),u){var c=e.match(this.interpolator.nestingRegexp);a<(c&&c.length)&&(n.nest=!1)}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return o&&o[0]===r[0]&&!n.context?(i.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):i.translate.apply(i,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var f=n.postProcess||this.options.postProcess,d="string"==typeof f?[f]:f;return null!=e&&d&&d.length&&!1!==n.applyPostProcessor&&(e=cC.handle(d,e,t,this.options&&this.options.postProcessPassResolved?LD({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,o,i,a=this,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var s=a.extractFromKey(e,u),l=s.key;n=l;var c=s.namespaces;a.options.fallbackNS&&(c=c.concat(a.options.fallbackNS));var f=void 0!==u.count&&"string"!=typeof u.count,d=void 0!==u.context&&("string"==typeof u.context||"number"==typeof u.context)&&""!==u.context,p=u.lngs?u.lngs:a.languageUtils.toResolveHierarchy(u.lng||a.language,u.fallbackLng);c.forEach((function(e){a.isValidLookup(t)||(i=e,!fC["".concat(p[0],"-").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(i)&&(fC["".concat(p[0],"-").concat(e)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(i,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(t)){o=n;var i,s,c=l,p=[c];for(a.i18nFormat&&a.i18nFormat.addLookupKeys?a.i18nFormat.addLookupKeys(p,l,n,e,u):(f&&(i=a.pluralResolver.getSuffix(n,u.count)),f&&d&&p.push(c+i),d&&p.push(c+="".concat(a.options.contextSeparator).concat(u.context)),f&&p.push(c+=i));s=p.pop();)a.isValidLookup(t)||(r=s,t=a.getResource(n,e,s,u))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:o,usedNS:i}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:"hasDefaultValue",value:function(e){var t="defaultValue";for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t===n.substring(0,t.length)&&void 0!==e[n])return!0;return!1}}]),t}();function pC(e){return e.charAt(0).toUpperCase()+e.slice(1)}var hC=function(){function e(t){MD(this,e),this.options=t,this.whitelist=this.options.supportedLngs||!1,this.supportedLngs=this.options.supportedLngs||!1,this.logger=KD.create("languageUtils")}return $D(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=pC(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=pC(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=pC(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isWhitelisted",value:function(e){return this.logger.deprecate("languageUtils.isWhitelisted",'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.'),this.isSupportedCode(e)}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(r))return e}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),o=[],i=function(e){e&&(n.isSupportedCode(e)?o.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(e))):"string"==typeof e&&i(this.formatLanguageCode(e)),r.forEach((function(e){o.indexOf(e)<0&&i(n.formatLanguageCode(e))})),o}}]),e}(),gC=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],vC={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};function yC(){var e={};return gC.forEach((function(t){t.lngs.forEach((function(n){e[n]={numbers:t.nr,plurals:vC[t.fc]}}))})),e}var mC=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};MD(this,e),this.languageUtils=t,this.options=n,this.logger=KD.create("pluralResolver"),this.rules=yC()}return $D(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=this.getRule(e);return t&&t.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){return this.getSuffixes(e).map((function(e){return t+e}))}},{key:"getSuffixes",value:function(e){var t=this,n=this.getRule(e);return n?n.numbers.map((function(n){return t.getSuffix(e,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=this,r=this.getRule(e);if(r){var o=r.noAbs?r.plurals(t):r.plurals(Math.abs(t)),i=r.numbers[o];this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]&&(2===i?i="plural":1===i&&(i=""));var a=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return"v1"===this.options.compatibilityJSON?1===i?"":"number"==typeof i?"_plural_".concat(i.toString()):a():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]?a():this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString()}return this.logger.warn("no plural rule found for: ".concat(e)),""}}]),e}(),bC=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};MD(this,e),this.logger=KD.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return $D(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:aC,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?oC(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?oC(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?oC(t.nestingPrefix):t.nestingPrefixEscaped||oC("$t("),this.nestingSuffix=t.nestingSuffix?oC(t.nestingSuffix):t.nestingSuffixEscaped||oC(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var o,i,a,u=this,s=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}var c=function(e){if(e.indexOf(u.formatSeparator)<0){var o=nC(t,s,e);return u.alwaysFormat?u.format(o,void 0,n,LD({},r,t,{interpolationkey:e})):o}var i=e.split(u.formatSeparator),a=i.shift().trim(),l=i.join(u.formatSeparator).trim();return u.format(nC(t,s,a),l,n,LD({},r,t,{interpolationkey:a}))};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,d=r&&r.interpolation&&r.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return l(e)}},{regex:this.regexp,safeValue:function(e){return u.escapeValue?l(u.escape(e)):l(e)}}].forEach((function(t){for(a=0;o=t.regex.exec(e);){if(void 0===(i=c(o[1].trim())))if("function"==typeof f){var n=f(e,o,r);i="string"==typeof n?n:""}else{if(d){i=o[0];continue}u.logger.warn("missed to pass in variable ".concat(o[1]," for interpolating ").concat(e)),i=""}else"string"==typeof i||u.useRawValueToEscape||(i=ZD(i));var s=t.safeValue(i);if(e=e.replace(o[0],s),d?(t.regex.lastIndex+=s.length,t.regex.lastIndex-=o[0].length):t.regex.lastIndex=0,++a>=u.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,o=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=LD({},i);function u(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),o="{".concat(r[1]);e=r[0],o=(o=this.interpolate(o,a)).replace(/'/g,'"');try{a=JSON.parse(o),t&&(a=LD({},t,a))}catch(i){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),i),"".concat(e).concat(n).concat(o)}return delete a.defaultValue,e}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(e);){var s=[],l=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var c=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=c.shift(),s=c,l=!0}if((r=t(u.call(this,n[1].trim(),a),a))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=ZD(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),l&&(r=s.reduce((function(e,t){return o.format(e,t,i.lng,LD({},i,{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}(),wC=function(e){function t(e,n,r){var o,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return MD(this,t),o=VD(this,UD(t).call(this)),uC&&YD.call(HD(o)),o.backend=e,o.store=n,o.services=r,o.languageUtils=r.languageUtils,o.options=i,o.logger=KD.create("backendConnector"),o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(r,i.backend,i),o}return qD(t,YD),$D(t,[{key:"queueLoad",value:function(e,t,n,r){var o=this,i=[],a=[],u=[],s=[];return e.forEach((function(e){var r=!0;t.forEach((function(t){var u="".concat(e,"|").concat(t);!n.reload&&o.store.hasResourceBundle(e,t)?o.state[u]=2:o.state[u]<0||(1===o.state[u]?a.indexOf(u)<0&&a.push(u):(o.state[u]=1,r=!1,a.indexOf(u)<0&&a.push(u),i.indexOf(u)<0&&i.push(u),s.indexOf(t)<0&&s.push(t)))})),r||u.push(e)})),(i.length||a.length)&&this.queue.push({pending:a,loaded:{},errors:[],callback:r}),{toLoad:i,pending:a,toLoadLanguages:u,toLoadNamespaces:s}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),o=r[0],i=r[1];t&&this.emit("failedLoading",o,i,t),n&&this.store.addResourceBundle(o,i,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){var r,u,s,l,c;r=n.loaded,u=i,s=QD(r,[o],Object),l=s.obj,c=s.k,l[c]=l[c]||[],l[c].push(u),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){a[e].indexOf(t)<0&&a[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,a=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(u,s){u&&s&&o<5?setTimeout((function(){r.read.call(r,e,t,n,o+1,2*i,a)}),i):a(u,s)})):a(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var i=this.queueLoad(e,t,r,o);if(!i.toLoad.length)return i.pending.length||o(),null;i.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),o=r[0],i=r[1];this.read(o,i,"read",void 0,void 0,(function(r,a){r&&t.logger.warn("".concat(n,"loading namespace ").concat(i," for language ").concat(o," failed"),r),!r&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(i," for language ").concat(o),a),t.loaded(e,r,a)}))}},{key:"saveMissing",value:function(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,r,null,LD({},i,{isUpdate:o})),e&&e[0]&&this.store.addResource(e[0],t,n,r))}}]),t}();function EC(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===ID(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===ID(e[2])||"object"===ID(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!1}}}function DC(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.whitelist&&(e.whitelist&&e.whitelist.indexOf("cimode")<0&&(e.whitelist=e.whitelist.concat(["cimode"])),e.supportedLngs=e.whitelist),e.nonExplicitWhitelist&&(e.nonExplicitSupportedLngs=e.nonExplicitWhitelist),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function CC(){}var xC=function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;if(MD(this,t),e=VD(this,UD(t).call(this)),uC&&YD.call(HD(e)),e.options=DC(n),e.services={},e.logger=KD,e.modules={external:[]},r&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,r),VD(e,HD(e));setTimeout((function(){e.init(n,r)}),0)}return e}return qD(t,YD),$D(t,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;function r(e){return e?"function"==typeof e?new e:e:null}if("function"==typeof t&&(n=t,t={}),t.whitelist&&!t.supportedLngs&&this.logger.deprecate("whitelist",'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.'),t.nonExplicitWhitelist&&!t.nonExplicitSupportedLngs&&this.logger.deprecate("whitelist",'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.'),this.options=LD({},EC(),this.options,DC(t)),this.format=this.options.interpolation.format,n||(n=CC),!this.options.isClone){this.modules.logger?KD.init(r(this.modules.logger),this.options):KD.init(null,this.options);var o=new hC(this.options);this.store=new lC(this.options.resources,this.options);var i=this.services;i.logger=KD,i.resourceStore=this.store,i.languageUtils=o,i.pluralResolver=new mC(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),i.interpolator=new bC(this.options),i.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},i.backendConnector=new wC(r(this.modules.backend),i.resourceStore,i,this.options),i.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(i.languageDetector=r(this.modules.languageDetector),i.languageDetector.init(i,this.options.detection,this.options)),this.modules.i18nFormat&&(i.i18nFormat=r(this.modules.i18nFormat),i.i18nFormat.init&&i.i18nFormat.init(this)),this.translator=new dC(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var a=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);a.length>0&&"dev"!==a[0]&&(this.options.lng=a[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var u=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];u.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}}));var s=["addResource","addResources","addResourceBundle","removeResourceBundle"];s.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var l=XD(),c=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),l.resolve(r),n(t,r)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?c():setTimeout(c,0),l}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:CC,r=n,o="string"==typeof e?e:this.language;if("function"==typeof e&&(r=e),!this.options.resources||this.options.partialBundledLanguages){if(o&&"cimode"===o.toLowerCase())return r();var i=[],a=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){i.indexOf(e)<0&&i.push(e)}))};if(o)a(o);else{var u=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);u.forEach((function(e){return a(e)}))}this.options.preload&&this.options.preload.forEach((function(e){return a(e)})),this.services.backendConnector.load(i,this.options.ns,r)}else r(null)}},{key:"reloadResources",value:function(e,t,n){var r=XD();return e||(e=this.languages),t||(t=this.options.ns),n||(n=CC),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&cC.addPostProcessor(e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=XD();this.emit("languageChanging",e);var o=function(o){e||o||!n.services.languageDetector||(o=[]);var i="string"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);i&&(n.language||(n.language=i,n.languages=n.services.languageUtils.toResolveHierarchy(i)),n.translator.language||n.translator.changeLanguage(i),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(i)),n.loadResources(i,(function(e){var o,a;o=e,(a=i)?(n.language=a,n.languages=n.services.languageUtils.toResolveHierarchy(a),n.translator.changeLanguage(a),n.isLanguageChangingTo=void 0,n.emit("languageChanged",a),n.logger.log("languageChanged",a)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(o,(function(){return n.t.apply(n,arguments)}))}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(e):o(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t,n){var r=this,o=function e(t,o){var i;if("object"!==ID(o)){for(var a=arguments.length,u=new Array(a>2?a-2:0),s=2;s<a;s++)u[s-2]=arguments[s];i=r.options.overloadTranslationOptionHandler([t,o].concat(u))}else i=LD({},o);i.lng=i.lng||e.lng,i.lngs=i.lngs||e.lngs,i.ns=i.ns||e.ns;var l=r.options.keySeparator||".",c=n?"".concat(n).concat(l).concat(t):t;return r.t(c,i)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=n,o}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=this.languages[0],o=!!this.options&&this.options.fallbackLng,i=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var u=n.precheck(this,a);if(void 0!==u)return u}return!!this.hasResourceBundle(r,e)||!this.services.backendConnector.backend||!(!a(r,e)||o&&!a(i,e))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=XD();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=XD();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],o=e.filter((function(e){return r.indexOf(e)<0}));return o.length?(this.options.preload=r.concat(o),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){return e||(e=this.languages&&this.languages.length>0?this.languages[0]:this.language),e?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>=0?"rtl":"ltr":"rtl"}},{key:"createInstance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new t(e,n)}},{key:"cloneInstance",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:CC,o=LD({},this.options,n,{isClone:!0}),i=new t(o),a=["store","services","language"];return a.forEach((function(t){i[t]=e[t]})),i.services=LD({},this.services),i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i.translator=new dC(i.services,i.options),i.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit.apply(i,[e].concat(n))})),i.init(o,r),i.translator.options=i.options,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages}}}]),t}(),SC=new xC;function AC(e,t){SC.addResourceBundle(e,"translation",t,!0,!0)}SC.init({lng:"zh-CN",resources:{}});var OC=SC.t.bind(SC);AC("en",{editor:{more:"More",justify:"Justify",indent:"Indent",image:"Image",video:"Video"}}),AC("zh-CN",{editor:{more:"更多",justify:"对齐",indent:"缩进",image:"图片",video:"视频"}}),AC("en",{common:{ok:"OK",delete:"Delete",enter:"Enter"},blockQuote:{title:"Quote"},codeBlock:{title:"Code block"},color:{color:"Font color",bgColor:"Back color",default:"Default color",clear:"Clear back color"},divider:{title:"Divider"},emotion:{title:"Emotion"},fontSize:{title:"Font size",default:"Default"},fontFamily:{title:"Font family",default:"Default"},fullScreen:{title:"Full screen"},header:{title:"Header",text:"Text"},image:{netImage:"Net image",delete:"Delete image",edit:"Edit image",viewLink:"View link",src:"Image src",desc:"Description",link:"Image link"},indent:{decrease:"Decrease",increase:"Increase"},justify:{left:"Left",right:"Right",center:"Center",justify:"Justify"},lineHeight:{title:"Line height",default:"Default"},link:{insert:"Insert link",text:"Link text",url:"Link source",unLink:"Unlink",edit:"Edit link",view:"View link"},textStyle:{bold:"Bold",clear:"Clear styles",code:"Inline code",italic:"Italic",sub:"Sub",sup:"Sup",through:"Through",underline:"Underline"},undo:{undo:"undo",redo:"Redo"},todo:{todo:"Todo"}}),AC("zh-CN",{common:{ok:"确定",delete:"删除",enter:"回车"},blockQuote:{title:"引用"},codeBlock:{title:"代码块"},color:{color:"文字颜色",bgColor:"背景色",default:"默认颜色",clear:"清除背景色"},divider:{title:"分割线"},emotion:{title:"表情"},fontSize:{title:"字号",default:"默认字号"},fontFamily:{title:"字体",default:"默认字体"},fullScreen:{title:"全屏"},header:{title:"标题",text:"正文"},image:{netImage:"网络图片",delete:"删除图片",edit:"编辑图片",viewLink:"查看链接",src:"图片地址",desc:"图片描述",link:"图片链接"},indent:{decrease:"减少缩进",increase:"增加缩进"},justify:{left:"左对齐",right:"右对齐",center:"居中对齐",justify:"两端对齐"},lineHeight:{title:"行高",default:"默认行高"},link:{insert:"插入链接",text:"链接文本",url:"链接地址",unLink:"取消链接",edit:"修改链接",view:"查看链接"},textStyle:{bold:"粗体",clear:"清除格式",code:"行内代码",italic:"斜体",sub:"下标",sup:"上标",through:"删除线",underline:"下划线"},undo:{undo:"撤销",redo:"重做"},todo:{todo:"待办"}});var kC={type:"paragraph",renderElem:function(e,t,n){return Ci("p",null,t)}},BC="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function FC(e){var t={exports:{}};return e(t,t.exports),t.exports}var _C,TC,PC=function(e){return e&&e.Math==Math&&e},jC=PC("object"==typeof globalThis&&globalThis)||PC("object"==typeof window&&window)||PC("object"==typeof self&&self)||PC("object"==typeof BC&&BC)||function(){return this}()||Function("return this")(),NC=function(e){try{return!!e()}catch(t){return!0}},IC=!NC((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),RC=Function.prototype.call,LC=RC.bind?RC.bind(RC):function(){return RC.apply(RC,arguments)},MC={}.propertyIsEnumerable,zC=Object.getOwnPropertyDescriptor,$C=zC&&!MC.call({1:2},1)?function(e){var t=zC(this,e);return!!t&&t.enumerable}:MC,HC={f:$C},VC=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},UC=Function.prototype,WC=UC.bind,qC=UC.call,GC=WC&&WC.bind(qC),KC=WC?function(e){return e&&GC(qC,e)}:function(e){return e&&function(){return qC.apply(e,arguments)}},YC=KC({}.toString),XC=KC("".slice),ZC=function(e){return XC(YC(e),8,-1)},JC=jC.Object,QC=KC("".split),ex=NC((function(){return!JC("z").propertyIsEnumerable(0)}))?function(e){return"String"==ZC(e)?QC(e,""):JC(e)}:JC,tx=jC.TypeError,nx=function(e){if(null==e)throw tx("Can't call method on "+e);return e},rx=function(e){return ex(nx(e))},ox=function(e){return"function"==typeof e},ix=function(e){return"object"==typeof e?null!==e:ox(e)},ax=function(e){return ox(e)?e:void 0},ux=function(e,t){return arguments.length<2?ax(jC[e]):jC[e]&&jC[e][t]},sx=KC({}.isPrototypeOf),lx=ux("navigator","userAgent")||"",cx=jC.process,fx=jC.Deno,dx=cx&&cx.versions||fx&&fx.version,px=dx&&dx.v8;px&&(TC=(_C=px.split("."))[0]>0&&_C[0]<4?1:+(_C[0]+_C[1])),!TC&&lx&&(!(_C=lx.match(/Edge\/(\d+)/))||_C[1]>=74)&&(_C=lx.match(/Chrome\/(\d+)/))&&(TC=+_C[1]);var hx=TC,gx=!!Object.getOwnPropertySymbols&&!NC((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&hx&&hx<41})),vx=gx&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,yx=jC.Object,mx=vx?function(e){return"symbol"==typeof e}:function(e){var t=ux("Symbol");return ox(t)&&sx(t.prototype,yx(e))},bx=jC.String,wx=function(e){try{return bx(e)}catch(t){return"Object"}},Ex=jC.TypeError,Dx=function(e){if(ox(e))return e;throw Ex(wx(e)+" is not a function")},Cx=function(e,t){var n=e[t];return null==n?void 0:Dx(n)},xx=jC.TypeError,Sx=Object.defineProperty,Ax=function(e,t){try{Sx(jC,e,{value:t,configurable:!0,writable:!0})}catch(mG){jC[e]=t}return t},Ox=jC["__core-js_shared__"]||Ax("__core-js_shared__",{}),kx=FC((function(e){(e.exports=function(e,t){return Ox[e]||(Ox[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),Bx=jC.Object,Fx=function(e){return Bx(nx(e))},_x=KC({}.hasOwnProperty),Tx=Object.hasOwn||function(e,t){return _x(Fx(e),t)},Px=0,jx=Math.random(),Nx=KC(1..toString),Ix=function(e){return"Symbol("+(void 0===e?"":e)+")_"+Nx(++Px+jx,36)},Rx=kx("wks"),Lx=jC.Symbol,Mx=Lx&&Lx.for,zx=vx?Lx:Lx&&Lx.withoutSetter||Ix,$x=function(e){if(!Tx(Rx,e)||!gx&&"string"!=typeof Rx[e]){var t="Symbol."+e;gx&&Tx(Lx,e)?Rx[e]=Lx[e]:Rx[e]=vx&&Mx?Mx(t):zx(t)}return Rx[e]},Hx=jC.TypeError,Vx=$x("toPrimitive"),Ux=function(e){var t=function(e,t){if(!ix(e)||mx(e))return e;var n,r=Cx(e,Vx);if(r){if(void 0===t&&(t="default"),n=LC(r,e,t),!ix(n)||mx(n))return n;throw Hx("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&ox(n=e.toString)&&!ix(r=LC(n,e)))return r;if(ox(n=e.valueOf)&&!ix(r=LC(n,e)))return r;if("string"!==t&&ox(n=e.toString)&&!ix(r=LC(n,e)))return r;throw xx("Can't convert object to primitive value")}(e,t)}(e,"string");return mx(t)?t:t+""},Wx=jC.document,qx=ix(Wx)&&ix(Wx.createElement),Gx=function(e){return qx?Wx.createElement(e):{}},Kx=!IC&&!NC((function(){return 7!=Object.defineProperty(Gx("div"),"a",{get:function(){return 7}}).a})),Yx=Object.getOwnPropertyDescriptor,Xx={f:IC?Yx:function(e,t){if(e=rx(e),t=Ux(t),Kx)try{return Yx(e,t)}catch(n){}if(Tx(e,t))return VC(!LC(HC.f,e,t),e[t])}},Zx=jC.String,Jx=jC.TypeError,Qx=function(e){if(ix(e))return e;throw Jx(Zx(e)+" is not an object")},eS=jC.TypeError,tS=Object.defineProperty,nS={f:IC?tS:function(e,t,n){if(Qx(e),t=Ux(t),Qx(n),Kx)try{return tS(e,t,n)}catch(r){}if("get"in n||"set"in n)throw eS("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},rS=IC?function(e,t,n){return nS.f(e,t,VC(1,n))}:function(e,t,n){return e[t]=n,e},oS=KC(Function.toString);ox(Ox.inspectSource)||(Ox.inspectSource=function(e){return oS(e)});var iS,aS,uS,sS=Ox.inspectSource,lS=jC.WeakMap,cS=ox(lS)&&/native code/.test(sS(lS)),fS=kx("keys"),dS=function(e){return fS[e]||(fS[e]=Ix(e))},pS={},hS=jC.TypeError,gS=jC.WeakMap;if(cS||Ox.state){var vS=Ox.state||(Ox.state=new gS),yS=KC(vS.get),mS=KC(vS.has),bS=KC(vS.set);iS=function(e,t){if(mS(vS,e))throw new hS("Object already initialized");return t.facade=e,bS(vS,e,t),t},aS=function(e){return yS(vS,e)||{}},uS=function(e){return mS(vS,e)}}else{var wS=dS("state");pS[wS]=!0,iS=function(e,t){if(Tx(e,wS))throw new hS("Object already initialized");return t.facade=e,rS(e,wS,t),t},aS=function(e){return Tx(e,wS)?e[wS]:{}},uS=function(e){return Tx(e,wS)}}var ES={set:iS,get:aS,has:uS,enforce:function(e){return uS(e)?aS(e):iS(e,{})},getterFor:function(e){return function(t){var n;if(!ix(t)||(n=aS(t)).type!==e)throw hS("Incompatible receiver, "+e+" required");return n}}},DS=Function.prototype,CS=IC&&Object.getOwnPropertyDescriptor,xS=Tx(DS,"name"),SS={EXISTS:xS,PROPER:xS&&"something"===function(){}.name,CONFIGURABLE:xS&&(!IC||IC&&CS(DS,"name").configurable)},AS=FC((function(e){var t=SS.CONFIGURABLE,n=ES.get,r=ES.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;ox(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!Tx(i,"name")||t&&i.name!==f)&&rS(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==jC?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:rS(e,n,i)):l?e[n]=i:Ax(n,i)})(Function.prototype,"toString",(function(){return ox(this)&&n(this).source||sS(this)}))})),OS=Math.ceil,kS=Math.floor,BS=function(e){var t=+e;return t!=t||0===t?0:(t>0?kS:OS)(t)},FS=Math.max,_S=Math.min,TS=function(e,t){var n=BS(e);return n<0?FS(n+t,0):_S(n,t)},PS=Math.min,jS=function(e){return e>0?PS(BS(e),9007199254740991):0},NS=function(e){return jS(e.length)},IS=function(e){return function(t,n,r){var o,i=rx(t),a=NS(i),u=TS(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},RS={includes:IS(!0),indexOf:IS(!1)},LS=RS.indexOf,MS=KC([].push),zS=function(e,t){var n,r=rx(e),o=0,i=[];for(n in r)!Tx(pS,n)&&Tx(r,n)&&MS(i,n);for(;t.length>o;)Tx(r,n=t[o++])&&(~LS(i,n)||MS(i,n));return i},$S=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],HS=$S.concat("length","prototype"),VS={f:Object.getOwnPropertyNames||function(e){return zS(e,HS)}},US={f:Object.getOwnPropertySymbols},WS=KC([].concat),qS=ux("Reflect","ownKeys")||function(e){var t=VS.f(Qx(e)),n=US.f;return n?WS(t,n(e)):t},GS=function(e,t){for(var n=qS(t),r=nS.f,o=Xx.f,i=0;i<n.length;i++){var a=n[i];Tx(e,a)||r(e,a,o(t,a))}},KS=/#|\.prototype\./,YS=function(e,t){var n=ZS[XS(e)];return n==QS||n!=JS&&(ox(t)?NC(t):!!t)},XS=YS.normalize=function(e){return String(e).replace(KS,".").toLowerCase()},ZS=YS.data={},JS=YS.NATIVE="N",QS=YS.POLYFILL="P",eA=YS,tA=Xx.f,nA=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?jC:l?jC[u]||Ax(u,{}):(jC[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=tA(n,r))&&a.value:n[r],!eA(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;GS(i,o)}(e.sham||o&&o.sham)&&rS(i,"sham",!0),AS(n,r,i,e)}},rA=KC(KC.bind),oA=Array.isArray||function(e){return"Array"==ZC(e)},iA={};iA[$x("toStringTag")]="z";var aA="[object z]"===String(iA),uA=$x("toStringTag"),sA=jC.Object,lA="Arguments"==ZC(function(){return arguments}()),cA=aA?ZC:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=sA(e),uA))?n:lA?ZC(t):"Object"==(r=ZC(t))&&ox(t.callee)?"Arguments":r},fA=function(){},dA=[],pA=ux("Reflect","construct"),hA=/^\s*(?:class|function)\b/,gA=KC(hA.exec),vA=!hA.exec(fA),yA=function(e){if(!ox(e))return!1;try{return pA(fA,dA,e),!0}catch(t){return!1}},mA=!pA||NC((function(){var e;return yA(yA.call)||!yA(Object)||!yA((function(){e=!0}))||e}))?function(e){if(!ox(e))return!1;switch(cA(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return vA||!!gA(hA,sS(e))}:yA,bA=$x("species"),wA=jC.Array,EA=function(e,t){return new(oA(n=e)&&(r=n.constructor,(mA(r)&&(r===wA||oA(r.prototype))||ix(r)&&null===(r=r[bA]))&&(r=void 0)),void 0===r?wA:r)(0===t?0:t);var n,r},DA=KC([].push),CA=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=Fx(s),g=ex(h),v=function(e,t){return Dx(e),void 0===t?e:rA?rA(e,t):function(){return e.apply(t,arguments)}}(l,c),y=NS(g),m=0,b=f||EA,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:DA(w,d)}else switch(e){case 4:return!1;case 7:DA(w,d)}return i?-1:r||o?o:w}},xA={forEach:CA(0),map:CA(1),filter:CA(2),some:CA(3),every:CA(4),find:CA(5),findIndex:CA(6),filterReject:CA(7)},SA=$x("species"),AA=function(e){return hx>=51||!NC((function(){var t=[];return(t.constructor={})[SA]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},OA=xA.filter;nA({target:"Array",proto:!0,forced:!AA("filter")},{filter:function(e){return OA(this,e,arguments.length>1?arguments[1]:void 0)}});var kA=aA?{}.toString:function(){return"[object "+cA(this)+"]"};aA||AS(Object.prototype,"toString",kA,{unsafe:!0});var BA,FA=jC.String,_A=function(e){if("Symbol"===cA(e))throw TypeError("Cannot convert a Symbol value to a string");return FA(e)},TA=function(){var e=Qx(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},PA=jC.RegExp,jA=NC((function(){var e=PA("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),NA=jA||NC((function(){return!PA("a","y").sticky})),IA={BROKEN_CARET:jA||NC((function(){var e=PA("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:NA,UNSUPPORTED_Y:jA},RA=Object.keys||function(e){return zS(e,$S)},LA=IC?Object.defineProperties:function(e,t){Qx(e);for(var n,r=rx(t),o=RA(t),i=o.length,a=0;i>a;)nS.f(e,n=o[a++],r[n]);return e},MA=ux("document","documentElement"),zA=dS("IE_PROTO"),$A=function(){},HA=function(e){return"<script>"+e+"<\/script>"},VA=function(e){e.write(HA("")),e.close();var t=e.parentWindow.Object;return e=null,t},UA=function(){try{BA=new ActiveXObject("htmlfile")}catch(r){}var e,t;UA="undefined"!=typeof document?document.domain&&BA?VA(BA):((t=Gx("iframe")).style.display="none",MA.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(HA("document.F=Object")),e.close(),e.F):VA(BA);for(var n=$S.length;n--;)delete UA.prototype[$S[n]];return UA()};pS[zA]=!0;var WA,qA,GA=Object.create||function(e,t){var n;return null!==e?($A.prototype=Qx(e),n=new $A,$A.prototype=null,n[zA]=e):n=UA(),void 0===t?n:LA(n,t)},KA=jC.RegExp,YA=NC((function(){var e=KA(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),XA=jC.RegExp,ZA=NC((function(){var e=XA("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),JA=ES.get,QA=kx("native-string-replace",String.prototype.replace),eO=RegExp.prototype.exec,tO=eO,nO=KC("".charAt),rO=KC("".indexOf),oO=KC("".replace),iO=KC("".slice),aO=(qA=/b*/g,LC(eO,WA=/a/,"a"),LC(eO,qA,"a"),0!==WA.lastIndex||0!==qA.lastIndex),uO=IA.BROKEN_CARET,sO=void 0!==/()??/.exec("")[1];(aO||sO||uO||YA||ZA)&&(tO=function(e){var t,n,r,o,i,a,u,s=this,l=JA(s),c=_A(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=LC(tO,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=uO&&s.sticky,h=LC(TA,s),g=s.source,v=0,y=c;if(p&&(h=oO(h,"y",""),-1===rO(h,"g")&&(h+="g"),y=iO(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==nO(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),sO&&(n=new RegExp("^"+g+"$(?!\\s)",h)),aO&&(r=s.lastIndex),o=LC(eO,p?n:s,y),p?o?(o.input=iO(o.input,v),o[0]=iO(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:aO&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),sO&&o&&o.length>1&&LC(QA,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=GA(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var lO=tO;nA({target:"RegExp",proto:!0,forced:/./.exec!==lO},{exec:lO});var cO=Function.prototype,fO=cO.apply,dO=cO.bind,pO=cO.call,hO="object"==typeof Reflect&&Reflect.apply||(dO?pO.bind(fO):function(){return pO.apply(fO,arguments)}),gO=$x("species"),vO=RegExp.prototype,yO=function(e,t,n,r){var o=$x(e),i=!NC((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!NC((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[gO]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=KC(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=KC(e),s=t.exec;return s===lO||s===vO.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));AS(String.prototype,e,s[0]),AS(vO,o,s[1])}r&&rS(vO[o],"sham",!0)},mO=KC("".charAt),bO=KC("".charCodeAt),wO=KC("".slice),EO=function(e){return function(t,n){var r,o,i=_A(nx(t)),a=BS(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=bO(i,a))<55296||r>56319||a+1===u||(o=bO(i,a+1))<56320||o>57343?e?mO(i,a):r:e?wO(i,a,a+2):o-56320+(r-55296<<10)+65536}},DO=(EO(!1),EO(!0)),CO=function(e,t,n){return t+(n?DO(e,t).length:1)},xO=Math.floor,SO=KC("".charAt),AO=KC("".replace),OO=KC("".slice),kO=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,BO=/\$([$&'`]|\d{1,2})/g,FO=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=BO;return void 0!==o&&(o=Fx(o),s=kO),AO(i,s,(function(i,s){var l;switch(SO(s,0)){case"$":return"$";case"&":return e;case"`":return OO(t,0,n);case"'":return OO(t,a);case"<":l=o[OO(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=xO(c/10);return 0===f?i:f<=u?void 0===r[f-1]?SO(s,1):r[f-1]+SO(s,1):i}l=r[c-1]}return void 0===l?"":l}))},_O=jC.TypeError,TO=function(e,t){var n=e.exec;if(ox(n)){var r=LC(n,e,t);return null!==r&&Qx(r),r}if("RegExp"===ZC(e))return LC(lO,e,t);throw _O("RegExp#exec called on incompatible receiver")},PO=$x("replace"),jO=Math.max,NO=Math.min,IO=KC([].concat),RO=KC([].push),LO=KC("".indexOf),MO=KC("".slice),zO="$0"==="a".replace(/./,"$0"),$O=!!/./[PO]&&""===/./[PO]("a","$0");yO("replace",(function(e,t,n){var r=$O?"$":"$0";return[function(e,n){var r=nx(this),o=null==e?void 0:Cx(e,PO);return o?LC(o,e,r,n):LC(t,_A(r),e,n)},function(e,o){var i=Qx(this),a=_A(e);if("string"==typeof o&&-1===LO(o,r)&&-1===LO(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=ox(o);s||(o=_A(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=TO(i,a);if(null===d)break;if(RO(f,d),!l)break;""===_A(d[0])&&(i.lastIndex=CO(a,jS(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=_A((d=f[v])[0]),m=jO(NO(BS(d.index),a.length),0),b=[],w=1;w<d.length;w++)RO(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=IO([y],b,m,a);void 0!==E&&RO(D,E);var C=_A(hO(o,void 0,D))}else C=FO(y,a,m,b,E,o);m>=g&&(h+=MO(a,g,m)+C,g=m+y.length)}return h+MO(a,g)}]}),!!NC((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!zO||$O);var HO=$x("unscopables"),VO=Array.prototype;null==VO[HO]&&nS.f(VO,HO,{configurable:!0,value:GA(null)});var UO=function(e){VO[HO][e]=!0},WO=xA.find,qO=!0;"find"in[]&&Array(1).find((function(){qO=!1})),nA({target:"Array",proto:!0,forced:qO},{find:function(e){return WO(this,e,arguments.length>1?arguments[1]:void 0)}}),UO("find");var GO=$x("match"),KO=function(e){var t;return ix(e)&&(void 0!==(t=e[GO])?!!t:"RegExp"==ZC(e))},YO=jC.TypeError,XO=$x("species"),ZO=function(e,t,n){var r=Ux(t);r in e?nS.f(e,r,VC(0,n)):e[r]=n},JO=jC.Array,QO=Math.max,ek=function(e,t,n){for(var r=NS(e),o=TS(t,r),i=TS(void 0===n?r:n,r),a=JO(QO(i-o,0)),u=0;o<i;o++,u++)ZO(a,u,e[o]);return a.length=u,a},tk=IA.UNSUPPORTED_Y,nk=Math.min,rk=[].push,ok=KC(/./.exec),ik=KC(rk),ak=KC("".slice);yO("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=_A(nx(this)),o=void 0===n?4294967295:n>>>0;if(0===o)return[];if(void 0===e)return[r];if(!KO(e))return LC(t,r,e,o);for(var i,a,u,s=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),c=0,f=new RegExp(e.source,l+"g");(i=LC(lO,f,r))&&!((a=f.lastIndex)>c&&(ik(s,ak(r,c,i.index)),i.length>1&&i.index<r.length&&hO(rk,s,ek(i,1)),u=i[0].length,c=a,s.length>=o));)f.lastIndex===i.index&&f.lastIndex++;return c===r.length?!u&&ok(f,"")||ik(s,""):ik(s,ak(r,c)),s.length>o?ek(s,0,o):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:LC(t,this,e,n)}:t,[function(t,n){var o=nx(this),i=null==t?void 0:Cx(t,e);return i?LC(i,t,o,n):LC(r,_A(o),t,n)},function(e,o){var i=Qx(this),a=_A(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=Qx(e).constructor;return void 0===r||null==(n=Qx(r)[XO])?t:function(e){if(mA(e))return e;throw YO(wx(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(tk?"g":"y"),f=new s(tk?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===TO(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=tk?0:h;var v,y=TO(f,tk?ak(a,h):a);if(null===y||(v=nk(jS(f.lastIndex+(tk?h:0)),a.length))===p)h=CO(a,h,l);else{if(ik(g,ak(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(ik(g,y[m]),g.length===d)return g;h=p=v}}return ik(g,ak(a,p)),g}]}),!!NC((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),tk);var uk="\t\n\v\f\r                　\u2028\u2029\ufeff",sk=KC("".replace),lk="["+uk+"]",ck=RegExp("^"+lk+lk+"*"),fk=RegExp(lk+lk+"*$"),dk=function(e){return function(t){var n=_A(nx(t));return 1&e&&(n=sk(n,ck,"")),2&e&&(n=sk(n,fk,"")),n}},pk={start:dk(1),end:dk(2),trim:dk(3)},hk=SS.PROPER,gk=pk.trim;function vk(e){return 0===Fr("<div>"+e+"</div>").children().filter((function(e){return"BR"!==e.tagName})).length}function yk(e){return 0===e.length?"":e[0].outerHTML}function mk(e){return e.length?e[0].tagName.toLowerCase():""}function bk(e,t){for(var n="",r=(e.attr("style")||"").split(";"),o=r.length,i=0;i<o;i++){var a=r[i];if(a){var u=a.split(":");u[0].trim()===t&&(n=u[1].trim())}}return n}nA({target:"String",proto:!0,forced:("trim",NC((function(){return!!uk.trim()||"​᠎"!=="​᠎".trim()||hk&&"trim"!==uk.trim.name})))},{trim:function(){return gk(this)}}),nA({global:!0},{globalThis:jC}),Wr&&(Fr.fn.css=Wr),Zr&&(Fr.fn.append=Zr),Jr&&(Fr.fn.prepend=Jr),_r&&(Fr.fn.addClass=_r),Tr&&(Fr.fn.removeClass=Tr),Pr&&(Fr.fn.hasClass=Pr),Lr&&(Fr.fn.on=Lr),Mr&&(Fr.fn.off=Mr),so&&(Fr.fn.focus=so),jr&&(Fr.fn.attr=jr),Nr&&(Fr.fn.removeAttr=Nr),Vr&&(Fr.fn.hide=Vr),Ur&&(Fr.fn.show=Ur),eo&&(Fr.fn.parents=eo),Ir&&(Fr.fn.dataset=Ir),Rr&&(Fr.fn.val=Rr),Yr&&(Fr.fn.text=Yr),Kr&&(Fr.fn.html=Kr),no&&(Fr.fn.children=no),ro&&(Fr.fn.remove=ro),to&&(Fr.fn.find=to),zr&&(Fr.fn.width=zr),$r&&(Fr.fn.height=$r),Gr&&(Fr.fn.filter=Gr),oo&&(Fr.fn.empty=oo);var wk={selector:"p",parseElemHtml:function(e,t,n){var r=Fr(e);return 0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"paragraph",children:t}}},Ek=function(e,t){return(Ek=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function Dk(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Ek(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var Ck=function(){return Ck=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ck.apply(this,arguments)};function xk(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function Sk(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function Ak(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function Ok(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function kk(e){var t=Ok(yt.nodes(e,{match:function(t){return e.children[0]===t},mode:"highest"}),1)[0];if(null==t)return!1;var n=t[0];if(!ft.isElement(n))return!1;if("paragraph"===n.type)return!1;if(""!==Dt.string(n))return!1;var r=n.children,o=void 0===r?[]:r;return!!$t.isText(o[0])&&(an.setNodes(e,{type:"paragraph"}),!0)}var Bk={renderElems:[kC],elemsToHtml:[{type:"paragraph",elemToHtml:function(e,t){return""===t?"<p><br></p>":"<p>"+t+"</p>"}}],parseElemsHtml:[wk],editorPlugin:function(e){var t=e.deleteBackward,n=e.deleteForward;e.insertText,e.insertBreak;var r=e;return r.deleteBackward=function(e){kk(r)||t(e)},r.deleteForward=function(e){kk(r)||n(e)},r}},Fk=/"/g,_k=KC("".replace),Tk=function(e,t,n,r){var o=_A(nx(e)),i="<"+t;return""!==n&&(i+=" "+n+'="'+_k(_A(r),Fk,"&quot;")+'"'),i+">"+o+"</"+t+">"},Pk=function(e){return NC((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))};function jk(e,t){var n=t,r=e,o=r.bold,i=r.italic,a=r.underline;return o&&(n="<strong>"+n+"</strong>"),r.code&&(n="<code>"+n+"</code>"),i&&(n="<em>"+n+"</em>"),a&&(n="<u>"+n+"</u>"),r.through&&(n="<s>"+n+"</s>"),r.sub&&(n="<sub>"+n+"</sub>"),r.sup&&(n="<sup>"+n+"</sup>"),n}function Nk(e,t){return 0!==e.length&&(!!e[0].matches(t)||e.find(t).length>0)}nA({target:"String",proto:!0,forced:Pk("bold")},{bold:function(){return Tk(this,"b","","")}}),nA({target:"String",proto:!0,forced:Pk("italics")},{italics:function(){return Tk(this,"i","","")}}),nA({target:"String",proto:!0,forced:Pk("sub")},{sub:function(){return Tk(this,"sub","","")}}),nA({target:"String",proto:!0,forced:Pk("sup")},{sup:function(){return Tk(this,"sup","","")}});var Ik={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Rk=Gx("span").classList,Lk=Rk&&Rk.constructor&&Rk.constructor.prototype,Mk=Lk===Object.prototype?void 0:Lk,zk=function(e,t){var n=[][e];return!!n&&NC((function(){n.call(null,t||function(){throw 1},1)}))},$k=xA.forEach,Hk=zk("forEach")?[].forEach:function(e){return $k(this,e,arguments.length>1?arguments[1]:void 0)},Vk=function(e){if(e&&e.forEach!==Hk)try{rS(e,"forEach",Hk)}catch(Qh){e.forEach=Hk}};for(var Uk in Ik)Ik[Uk]&&Vk(jC[Uk]&&jC[Uk].prototype);function Wk(e,t){return null==e.selection||!!Ok(yt.nodes(e,{match:function(t){return"pre"===Wy.getNodeType(t)||!!yt.isVoid(e,t)},universal:!0}),1)[0]}function qk(e,t){Object.keys(t).forEach((function(t){"text"!==t&&yt.removeMark(e,t)}))}Vk(Mk),nA({target:"Object",stat:!0,forced:NC((function(){RA(1)}))},{keys:function(e){return RA(Fx(e))}});var Gk=function(){function e(){this.marksNeedToRemove=[],this.tag="button"}return e.prototype.getValue=function(e){var t=this.mark,n=yt.marks(e);return n?n[t]:!!Ok(yt.nodes(e,{match:function(e){return!0===e[t]}}),1)[0]},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){return Wk(e,this.mark)},e.prototype.exec=function(e,t){var n=this.mark,r=this.marksNeedToRemove;t?e.removeMark(n):(e.addMark(n,!0),r&&r.forEach((function(t){return e.removeMark(t)})))},e}(),Kk='<svg viewBox="0 0 1024 1024"><path d="M707.872 484.64A254.88 254.88 0 0 0 768 320c0-141.152-114.848-256-256-256H192v896h384c141.152 0 256-114.848 256-256a256.096 256.096 0 0 0-124.128-219.36zM384 192h101.504c55.968 0 101.504 57.408 101.504 128s-45.536 128-101.504 128H384V192z m159.008 640H384v-256h159.008c58.464 0 106.016 57.408 106.016 128s-47.552 128-106.016 128z"></path></svg>',Yk='<svg viewBox="0 0 1024 1024"><path d="M704 64l128 0 0 416c0 159.072-143.264 288-320 288s-320-128.928-320-288l0-416 128 0 0 416c0 40.16 18.24 78.688 51.36 108.512 36.896 33.216 86.848 51.488 140.64 51.488s103.744-18.304 140.64-51.488c33.12-29.792 51.36-68.352 51.36-108.512l0-416zM192 832l640 0 0 128-640 0z"></path></svg>',Xk='<svg viewBox="0 0 1024 1024"><path d="M896 64v64h-128L448 896h128v64H128v-64h128L576 128h-128V64z"></path></svg>',Zk='<svg viewBox="0 0 1024 1024"><path d="M1024 512v64h-234.496c27.52 38.496 42.496 82.688 42.496 128 0 70.88-36.672 139.04-100.576 186.976C672.064 935.488 594.144 960 512 960s-160.064-24.512-219.424-69.024C228.64 843.04 192 774.88 192 704h128c0 69.376 87.936 128 192 128s192-58.624 192-128-87.936-128-192-128H0v-64h299.52a385.984 385.984 0 0 1-6.944-5.024C228.64 459.04 192 390.88 192 320s36.672-139.04 100.576-186.976C351.936 88.512 429.856 64 512 64s160.064 24.512 219.424 69.024C795.328 180.96 832 249.12 832 320h-128c0-69.376-87.936-128-192-128s-192 58.624-192 128 87.936 128 192 128c78.976 0 154.048 22.688 212.48 64H1024z"></path></svg>',Jk='<svg viewBox="0 0 1024 1024"><path d="M576 736l96 96 320-320L672 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224z"></path></svg>',Qk='<svg viewBox="0 0 1024 1024"><path d="M864 0a160 160 0 0 1 128 256l-64 64-224-224 64-64c26.752-20.096 59.968-32 96-32zM64 736l-64 288 288-64 592-592-224-224L64 736z m651.584-372.416l-448 448-55.168-55.168 448-448 55.168 55.168z"></path></svg>',eB='<svg viewBox="0 0 1024 1024"><path d="M924.402464 1023.068211H0.679665V99.345412h461.861399v98.909208H99.596867v725.896389h725.896389V561.206811h98.909208z" p-id="10909"></path><path d="M930.805104 22.977336l69.965436 69.965436-453.492405 453.492404-69.965435-69.901489z" p-id="10910"></path><path d="M1022.464381 304.030081h-98.917201V99.345412H709.230573V0.428211h313.233808z"></path></svg>',tB='<svg viewBox="0 0 1024 1024"><path d="M64 864h896v96H64zM360.58 576h302.85l81.53 224h102.16L579.24 64H444.77L176.89 800h102.16l81.53-224zM512 159.96L628.49 480H395.52L512 159.96z"></path></svg>',nB='<svg viewBox="0 0 1024 1024"><path d="M510.030769 315.076923l84.676923 196.923077h-177.230769l76.8-196.923077h15.753846zM945.230769 157.538462v708.923076c0 43.323077-35.446154 78.769231-78.769231 78.769231H157.538462c-43.323077 0-78.769231-35.446154-78.769231-78.769231V157.538462c0-43.323077 35.446154-78.769231 78.769231-78.769231h708.923076c43.323077 0 78.769231 35.446154 78.769231 78.769231z m-108.307692 643.938461L600.615385 216.615385c-5.907692-11.815385-15.753846-19.692308-29.538462-19.692308h-139.815385c-11.815385 0-23.630769 7.876923-27.56923 19.692308l-216.615385 584.861538c-3.938462 11.815385 3.938462 25.6 17.723077 25.6h80.738462c11.815385 0 23.630769-9.846154 27.56923-21.661538l63.015385-175.261539h263.876923l68.923077 175.261539c3.938462 11.815385 15.753846 21.661538 27.569231 21.661538h80.738461c13.784615 0 23.630769-13.784615 19.692308-25.6z"></path></svg>',rB='<svg viewBox="0 0 1024 1024"><path d="M64 512h384v128h-128V1024h-128V640h-128z m896-256H708.2496v768h-136.4992V256H320V128h640z"></path></svg>',oB='<svg viewBox="0 0 1024 1024"><path d="M956.788364 152.110545h-24.110546l23.924364 9.029819 0.186182 121.018181h-65.070546l-86.574545-130.048H566.551273v650.14691l130.048 64.977454v65.163636h-390.050909v-65.163636l129.954909-64.977454V152.110545H198.283636L111.429818 282.065455H46.545455V69.259636C46.545455 33.792 82.664727 22.062545 98.955636 22.062545h812.683637c23.738182 0 45.056 15.173818 45.056 41.053091V169.425455v-17.221819z"></path></svg>',iB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m256-512v384l-256-192z"></path></svg>',aB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>',uB='<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',sB='<svg viewBox="0 0 1024 1024"><path d="M972.8 793.6v102.4H256v-102.4h716.8z m0-230.4v102.4H51.2v-102.4h921.6z m0-230.4v102.4H256v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',lB='<svg viewBox="0 0 1024 1024"><path d="M870.4 793.6v102.4H153.6v-102.4h716.8z m102.4-230.4v102.4H51.2v-102.4h921.6z m-102.4-230.4v102.4H153.6v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',cB='<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z m0 192h1024v128H0z"></path></svg>',fB='<svg viewBox="0 0 1024 1024"><path d="M768 206.016v50.016h128v64h-192V174.016l128-60V64h-128V0h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>',dB='<svg viewBox="0 0 1024 1024"><path d="M768 910.016v50.016h128v64h-192v-146.016l128-60V768h-128v-64h192v146.016zM676 256h-136L352 444 164 256H28l256 256-256 256h136L352 580 540 768h136l-256-256z"></path></svg>',pB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="bold",t.title=OC("textStyle.bold"),t.iconSvg=Kk,t.hotkey="mod+b",t}return Dk(t,e),t}(Gk),hB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="code",t.title=OC("textStyle.code"),t.iconSvg=Jk,t.hotkey="mod+e",t}return Dk(t,e),t}(Gk),gB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="italic",t.title=OC("textStyle.italic"),t.iconSvg=Xk,t.hotkey="mod+i",t}return Dk(t,e),t}(Gk),vB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="through",t.title=OC("textStyle.through"),t.iconSvg=Zk,t.hotkey="mod+shift+x",t}return Dk(t,e),t}(Gk),yB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="underline",t.title=OC("textStyle.underline"),t.iconSvg=Yk,t.hotkey="mod+u",t}return Dk(t,e),t}(Gk),mB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="sub",t.marksNeedToRemove=["sup"],t.title=OC("textStyle.sub"),t.iconSvg=dB,t.hotkey="",t}return Dk(t,e),t}(Gk),bB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.mark="sup",t.marksNeedToRemove=["sub"],t.title=OC("textStyle.sup"),t.iconSvg=fB,t.hotkey="",t}return Dk(t,e),t}(Gk),wB=function(){function e(){this.title=OC("textStyle.clear"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M969.382408 288.738615l-319.401123-270.852152a67.074236 67.074236 0 0 0-96.459139 5.74922l-505.931379 574.922021a68.35184 68.35184 0 0 0-17.886463 47.910169 74.101061 74.101061 0 0 0 24.274486 47.910168l156.50655 132.232065h373.060512L975.131628 383.281347a67.074236 67.074236 0 0 0-5.74922-96.459139z m-440.134747 433.746725H264.144729l-90.071117-78.572676c-5.74922-5.74922-12.137243-12.137243-12.137243-17.886463a36.411728 36.411728 0 0 1 5.749221-24.274485l210.804741-240.828447 265.102932 228.691204z m-439.495945 180.781036h843.218964a60.047411 60.047411 0 1 1 0 120.733624H89.751716a60.047411 60.047411 0 1 1 0-120.733624z m0 0"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return Wk(e)},e.prototype.exec=function(e,t){var n,r,o=yt.nodes(e,{match:function(e){return $t.isText(e)},universal:!0});try{for(var i=Ak(o),a=i.next();!a.done;a=i.next())qk(e,a.value[0])}catch(u){n={error:u}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},e}(),EB={renderStyle:function(e,t){var n=e,r=n.bold,o=n.italic,i=n.underline,a=n.code,u=n.through,s=n.sub,l=n.sup,c=t;return r&&(c=Ci("strong",null,c)),a&&(c=Ci("code",null,c)),o&&(c=Ci("em",null,c)),i&&(c=Ci("u",null,c)),u&&(c=Ci("s",null,c)),s&&(c=Ci("sub",null,c)),l&&(c=Ci("sup",null,c)),c},menus:[{key:"bold",factory:function(){return new pB}},{key:"underline",factory:function(){return new yB}},{key:"italic",factory:function(){return new gB}},{key:"through",factory:function(){return new vB}},{key:"code",factory:function(){return new hB}},{key:"sub",factory:function(){return new mB}},{key:"sup",factory:function(){return new bB}},{key:"clearStyle",factory:function(){return new wB}}],styleToHtml:function(e,t){if(!$t.isText(e))return t;if(vk(t))return jk(e,t);var n=Fr(t);if("br"===mk(n))return jk(e,"<br>");var r=n.html();return r=jk(e,r),n.html(r),yk(n)},parseStyleHtml:function(e,t,n){var r=Fr(e);if(!$t.isText(t))return t;var o=t;return Nk(r,"b,strong")&&(o.bold=!0),Nk(r,"i,em")&&(o.italic=!0),Nk(r,"u")&&(o.underline=!0),Nk(r,"s,strike")&&(o.through=!0),Nk(r,"sub")&&(o.sub=!0),Nk(r,"sup")&&(o.sup=!0),Nk(r,"code")&&(o.code=!0),o}};function DB(e){return function(t,n,r){return Ci("h"+e,null,n)}}var CB={type:"header1",renderElem:DB(1)},xB={type:"header2",renderElem:DB(2)},SB={type:"header3",renderElem:DB(3)},AB={type:"header4",renderElem:DB(4)},OB={type:"header5",renderElem:DB(5)},kB=SS.PROPER,BB=RegExp.prototype,FB=BB.toString,_B=KC(TA),TB=NC((function(){return"/a/b"!=FB.call({source:"a",flags:"b"})})),PB=kB&&"toString"!=FB.name;(TB||PB)&&AS(RegExp.prototype,"toString",(function(){var e=Qx(this),t=_A(e.source),n=e.flags;return"/"+t+"/"+_A(void 0===n&&sx(BB,e)&&!("flags"in BB)?_B(e):n)}),{unsafe:!0});var jB,NB=jC.TypeError,IB=function(e){if(KO(e))throw NB("The method doesn't accept regular expressions");return e},RB=$x("match"),LB=function(e){var t=/./;try{"/./"[e](t)}catch(mG){try{return t[RB]=!1,"/./"[e](t)}catch(n){}}return!1},MB=Xx.f,zB=KC("".startsWith),$B=KC("".slice),HB=Math.min,VB=LB("startsWith");function UB(e){var t=Ok(yt.nodes(e,{match:function(e){return Wy.getNodeType(e).startsWith("header")},universal:!0}),1)[0];if(null==t)return"paragraph";var n=Ok(t,1)[0];return Wy.getNodeType(n)}function WB(e){return null==e.selection||!Ok(yt.nodes(e,{match:function(e){var t=Wy.getNodeType(e);return"paragraph"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0]}function qB(e,t){t&&an.setNodes(e,{type:t})}nA({target:"String",proto:!0,forced:!(!VB&&(jB=MB(String.prototype,"startsWith"),jB&&!jB.writable)||VB)},{startsWith:function(e){var t=_A(nx(this));IB(e);var n=jS(HB(arguments.length>1?arguments[1]:void 0,t.length)),r=_A(e);return zB?zB(t,r,n):$B(t,n,n+r.length)===r}});var GB=function(){function e(){this.title=OC("header.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M960 960c-51.2 0-102.4-3.2-153.6-3.2-51.2 0-99.2 3.2-150.4 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 57.6-28.8 86.4-48 19.2-12.8 19.2-60.8 19.2-80v-224-19.2c-9.6-3.2-19.2-3.2-28.8-3.2H320c-9.6 0-19.2 0-28.8 3.2V780.8c0 22.4 0 80 22.4 92.8 28.8 19.2 96-6.4 96 44.8 0 16-9.6 41.6-28.8 41.6-54.4 0-105.6-3.2-160-3.2-48 0-96 3.2-147.2 3.2-19.2 0-28.8-22.4-28.8-38.4 0-51.2 51.2-28.8 80-48 19.2-12.8 19.2-60.8 19.2-83.2V294.4c0-28.8 3.2-115.2-22.4-131.2-25.6-16-86.4 9.6-86.4-41.6 0-16 6.4-41.6 28.8-41.6 51.2 0 105.6 3.2 156.8 3.2 48 0 96-3.2 144-3.2 19.2 0 28.8 22.4 28.8 41.6 0 48-57.6 25.6-83.2 41.6-19.2 12.8-19.2 73.6-19.2 92.8v201.6c6.4 3.2 16 3.2 22.4 3.2h400c6.4 0 12.8 0 22.4-3.2V256c0-22.4 0-80-19.2-92.8-28.8-16-86.4 6.4-86.4-41.6 0-16 9.6-41.6 28.8-41.6 51.2 0 99.2 3.2 150.4 3.2 48 0 99.2-3.2 147.2-3.2 19.2 0 28.8 22.4 28.8 41.6 0 51.2-57.6 25.6-86.4 41.6-19.2 12.8-19.2 70.4-19.2 92.8v537.6c0 19.2 0 67.2 19.2 80 28.8 19.2 89.6-6.4 89.6 44.8 0 19.2-6.4 41.6-28.8 41.6z"></path></svg>',this.tag="select",this.width=60}return e.prototype.getOptions=function(e){var t=[{value:"header1",text:"H1",styleForRenderMenuList:{"font-size":"32px","font-weight":"bold"}},{value:"header2",text:"H2",styleForRenderMenuList:{"font-size":"24px","font-weight":"bold"}},{value:"header3",text:"H3",styleForRenderMenuList:{"font-size":"18px","font-weight":"bold"}},{value:"header4",text:"H4",styleForRenderMenuList:{"font-size":"16px","font-weight":"bold"}},{value:"header5",text:"H5",styleForRenderMenuList:{"font-size":"13px","font-weight":"bold"}},{value:"paragraph",text:OC("header.text")}],n=this.getValue(e).toString();return t.forEach((function(e){e.value===n?e.selected=!0:delete e.selected})),t},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){return UB(e)},e.prototype.isDisabled=function(e){return WB(e)},e.prototype.exec=function(e,t){qB(e,t.toString())},e}(),KB=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return UB(e)},e.prototype.isActive=function(e){return this.getValue(e)===this.type},e.prototype.isDisabled=function(e){return WB(e)},e.prototype.exec=function(e,t){var n=this.type;qB(e,t===n?"paragraph":n)},e}(),YB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H1",t.type="header1",t}return Dk(t,e),t}(KB),XB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H2",t.type="header2",t}return Dk(t,e),t}(KB),ZB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H3",t.type="header3",t}return Dk(t,e),t}(KB),JB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H4",t.type="header4",t}return Dk(t,e),t}(KB),QB=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="H5",t.type="header5",t}return Dk(t,e),t}(KB),eF={key:"headerSelect",factory:function(){return new GB}},tF={key:"header1",factory:function(){return new YB}},nF={key:"header2",factory:function(){return new XB}},rF={key:"header3",factory:function(){return new ZB}},oF={key:"header4",factory:function(){return new JB}},iF={key:"header5",factory:function(){return new QB}};function aF(e){return function(t,n){return"<h"+e+">"+n+"</h"+e+">"}}function uF(e){return function(t,n,r){var o=Fr(t);return 0===(n=n.filter((function(e){return!!$t.isText(e)||!!r.isInline(e)}))).length&&(n=[{text:o.text().replace(/\s+/gm," ")}]),{type:"header"+e,children:n}}}var sF={renderElems:[CB,xB,SB,AB,OB],elemsToHtml:[{type:"header1",elemToHtml:aF(1)},{type:"header2",elemToHtml:aF(2)},{type:"header3",elemToHtml:aF(3)},{type:"header4",elemToHtml:aF(4)},{type:"header5",elemToHtml:aF(5)}],parseElemsHtml:[{selector:"h1",parseElemHtml:uF(1)},{selector:"h2",parseElemHtml:uF(2)},{selector:"h3",parseElemHtml:uF(3)},{selector:"h4",parseElemHtml:uF(4)},{selector:"h5",parseElemHtml:uF(5)}],menus:[eF,tF,nF,rF,oF,iF],editorPlugin:function(e){var t=e.insertBreak;e.insertNode;var n=e;return n.insertBreak=function(){var r=Ok(yt.nodes(n,{match:function(e){return Wy.getNodeType(e).startsWith("header")},universal:!0}),1)[0];r&&Wy.isSelectionAtLineEnd(e,r[1])?an.insertNodes(n,{type:"paragraph",children:[{text:""}]},{mode:"highest"}):t()},n}},lF=Object.assign,cF=Object.defineProperty,fF=KC([].concat),dF=!lF||NC((function(){if(IC&&1!==lF({b:1},lF(cF({},"a",{enumerable:!0,get:function(){cF(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=lF({},e)[n]||RA(lF({},t)).join("")!=r}))?function(e,t){for(var n=Fx(e),r=arguments.length,o=1,i=US.f,a=HC.f;r>o;)for(var u,s=ex(arguments[o++]),l=i?fF(RA(s),i(s)):RA(s),c=l.length,f=0;c>f;)u=l[f++],IC&&!LC(a,s,u)||(n[u]=s[u]);return n}:lF;function pF(e,t){null==e.data&&(e.data={});var n=e.data;null==n.style&&(n.style={}),Object.assign(n.style,t)}nA({target:"Object",stat:!0,forced:Object.assign!==dF},{assign:dF});var hF={selector:"font",preParseHtml:function(e){var t=Fr(e);if("font"!==mk(t))return e;var n=t.attr("color")||"";return n&&(t.removeAttr("color"),t.css("color",n)),t[0]}},gF=function(){function e(){this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.exec=function(e,t){},e.prototype.getValue=function(e){var t=this.mark,n=yt.marks(e);return n&&n[t]?n[t]:""},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){return null==e.selection||!!Ok(yt.nodes(e,{match:function(t){return"pre"===Wy.getNodeType(t)||!!yt.isVoid(e,t)},universal:!0}),1)[0]},e.prototype.getPanelContentElem=function(e){var t=this.mark;if(null==this.$content){var n=Fr('<ul class="w-e-panel-content-color"></ul>');n.on("click","li",(function(n){var r=n.target;if(null!=r&&(n.preventDefault(),null!=e.selection)){var o=Fr(r).attr("data-value");"0"===o?yt.removeMark(e,t):yt.addMark(e,t,o)}})),this.$content=n}var r=this.$content;if(null==r)return document.createElement("ul");r.empty();var o=this.getValue(e),i=e.getMenuConfig(t).colors;(void 0===i?[]:i).forEach((function(e){var t=Fr('<div class="color-block" data-value="'+e+'"></div>');t.css("background-color",e);var n=Fr('<li data-value="'+e+'"></li>');o===e&&n.addClass("active"),n.append(t),r.append(n)}));var a="";"color"===t&&(a=OC("color.default")),"bgColor"===t&&(a=OC("color.clear"));var u=Fr('\n      <li data-value="0" class="clear">\n        <svg viewBox="0 0 1024 1024"><path d="M236.8 128L896 787.2V128H236.8z m614.4 704L192 172.8V832h659.2zM192 64h704c38.4 0 64 25.6 64 64v704c0 38.4-25.6 64-64 64H192c-38.4 0-64-25.6-64-64V128c0-38.4 25.6-64 64-64z"></path></svg>\n        '+a+"\n      </li>\n    ");return r.prepend(u),r[0]},e}(),vF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("color.color"),t.iconSvg=tB,t.mark="color",t}return Dk(t,e),t}(gF),yF=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("color.bgColor"),t.iconSvg=nB,t.mark="bgColor",t}return Dk(t,e),t}(gF),mF=["rgb(0, 0, 0)","rgb(38, 38, 38)","rgb(89, 89, 89)","rgb(140, 140, 140)","rgb(191, 191, 191)","rgb(217, 217, 217)","rgb(233, 233, 233)","rgb(245, 245, 245)","rgb(250, 250, 250)","rgb(255, 255, 255)","rgb(225, 60, 57)","rgb(231, 95, 51)","rgb(235, 144, 58)","rgb(245, 219, 77)","rgb(114, 192, 64)","rgb(89, 191, 192)","rgb(66, 144, 247)","rgb(54, 88, 226)","rgb(106, 57, 201)","rgb(216, 68, 147)","rgb(251, 233, 230)","rgb(252, 237, 225)","rgb(252, 239, 212)","rgb(252, 251, 207)","rgb(231, 246, 213)","rgb(218, 244, 240)","rgb(217, 237, 250)","rgb(224, 232, 250)","rgb(237, 225, 248)","rgb(246, 226, 234)","rgb(255, 163, 158)","rgb(255, 187, 150)","rgb(255, 213, 145)","rgb(255, 251, 143)","rgb(183, 235, 143)","rgb(135, 232, 222)","rgb(145, 213, 255)","rgb(173, 198, 255)","rgb(211, 173, 247)","rgb(255, 173, 210)","rgb(255, 77, 79)","rgb(255, 122, 69)","rgb(255, 169, 64)","rgb(255, 236, 61)","rgb(115, 209, 61)","rgb(54, 207, 201)","rgb(64, 169, 255)","rgb(89, 126, 247)","rgb(146, 84, 222)","rgb(247, 89, 171)","rgb(207, 19, 34)","rgb(212, 56, 13)","rgb(212, 107, 8)","rgb(212, 177, 6)","rgb(56, 158, 13)","rgb(8, 151, 156)","rgb(9, 109, 217)","rgb(29, 57, 196)","rgb(83, 29, 171)","rgb(196, 29, 127)","rgb(130, 0, 20)","rgb(135, 20, 0)","rgb(135, 56, 0)","rgb(97, 71, 0)","rgb(19, 82, 0)","rgb(0, 71, 79)","rgb(0, 58, 140)","rgb(6, 17, 120)","rgb(34, 7, 94)","rgb(120, 6, 80)"],bF={renderStyle:function(e,t){var n=e,r=n.color,o=n.bgColor,i=t;return r&&pF(i,{color:r}),o&&pF(i,{backgroundColor:o}),i},styleToHtml:function(e,t){if(!$t.isText(e))return t;var n,r=e,o=r.color,i=r.bgColor;return o||i?((vk(t)||"span"!==mk(n=Fr(t)))&&(n=Fr("<span>"+t+"</span>")),o&&n.css("color",o),i&&n.css("background-color",i),yk(n)):t},preParseHtml:[hF],parseStyleHtml:function(e,t,n){var r=Fr(e);if(!$t.isText(t))return t;var o=t,i=bk(r,"color");i&&(o.color=i);var a=bk(r,"background-color");return a&&(o.bgColor=a),o},menus:[{key:"color",factory:function(){return new vF},config:{colors:mF}},{key:"bgColor",factory:function(){return new yF},config:{colors:mF}}]},wF=/^(?:\w+:)?\/\/(\S+)$/,EF=/^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/,DF=/^[^\s\.]+\.\S{2,}$/,CF=RS.includes;function xF(e){return void 0===e&&(e="r"),e+"-"+Fo()}function SF(e){return e.replace(/</g,"&lt;").replace(/>/g,"&gt;")}function AF(e,t,n,r){return xk(this,void 0,void 0,(function(){var o,i;return Sk(this,(function(a){switch(a.label){case 0:return(o=t.getMenuConfig(e).checkLink)?[4,o(n,r)]:[3,2];case 1:if("string"==typeof(i=a.sent()))return t.alert(i,"error"),[2,!1];if(null==i)return[2,!1];a.label=2;case 2:return[2,!0]}}))}))}function OF(e,t,n){return xk(this,void 0,void 0,(function(){var r;return Sk(this,(function(o){switch(o.label){case 0:return(r=t.getMenuConfig(e).parseLinkUrl)?[4,r(n)]:[3,2];case 1:return[2,o.sent()];case 2:return[2,n]}}))}))}function kF(e){return null==e.selection||!!Wy.getSelectedElems(e).some((function(t){var n=t.type;return!!e.isVoid(t)||!!["pre","code","link"].includes(n)||void 0}))}function BF(e,t){return{type:"link",url:SF(e),children:t?[{text:t}]:[]}}function FF(e,t,n){return xk(this,void 0,void 0,(function(){var r,o,i;return Sk(this,(function(a){switch(a.label){case 0:return n?(t||(t=n),e.restoreSelection(),kF(e)?[2]:[4,AF("insertLink",e,t,n)]):[2];case 1:return a.sent()?[4,OF("insertLink",e,n)]:[2];case 2:return r=a.sent(),null==(o=e.selection)||(jt.isCollapsed(o)?(e.insertText(" "),i=BF(r,t),an.insertNodes(e,i),e.insertFragment([{text:" "}])):yt.string(e,o)!==t?(e.deleteFragment(),i=BF(r,t),an.insertNodes(e,i)):(i=BF(r),an.wrapNodes(e,i,{split:!0}),an.collapse(e,{edge:"end"}))),[2]}}))}))}nA({target:"Array",proto:!0},{includes:function(e){return CF(this,e,arguments.length>1?arguments[1]:void 0)}}),UO("includes");var _F={type:"link",renderElem:function(e,t,n){var r=e,o=r.url,i=r.target;return Ci("a",{href:o,target:void 0===i?"_blank":i},t)}},TF={selector:"a",parseElemHtml:function(e,t,n){var r=Fr(e);return 0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"link",url:r.attr("href")||"",target:r.attr("target")||"",children:t}}};function PF(){return xF("w-e-insert-link")}var jF=function(){function e(){this.title=OC("link.insert"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M440.224 635.776a51.84 51.84 0 0 1-36.768-15.232c-95.136-95.136-95.136-249.92 0-345.056l192-192C641.536 37.408 702.816 12.032 768 12.032s126.432 25.376 172.544 71.456c95.136 95.136 95.136 249.92 0 345.056l-87.776 87.776a51.968 51.968 0 1 1-73.536-73.536l87.776-87.776a140.16 140.16 0 0 0 0-197.984c-26.432-26.432-61.6-40.992-99.008-40.992s-72.544 14.56-99.008 40.992l-192 192a140.16 140.16 0 0 0 0 197.984 51.968 51.968 0 0 1-36.768 88.768z"></path><path d="M256 1012a242.4 242.4 0 0 1-172.544-71.456c-95.136-95.136-95.136-249.92 0-345.056l87.776-87.776a51.968 51.968 0 1 1 73.536 73.536l-87.776 87.776a140.16 140.16 0 0 0 0 197.984c26.432 26.432 61.6 40.992 99.008 40.992s72.544-14.56 99.008-40.992l192-192a140.16 140.16 0 0 0 0-197.984 51.968 51.968 0 1 1 73.536-73.536c95.136 95.136 95.136 249.92 0 345.056l-192 192A242.4 242.4 0 0 1 256 1012z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.textInputId=PF(),this.urlInputId=PF(),this.buttonId=PF()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return kF(e)},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=e.selection,n=this,r=n.textInputId,o=n.urlInputId,i=n.buttonId,a=Ok(cD(OC("link.text"),r),2),u=a[0],s=Fr(a[1]),l=Ok(cD(OC("link.url"),o),2),c=l[0],f=Fr(l[1]),d=Ok(fD(i,OC("common.ok")),1)[0];if(null==this.$content){var p=Fr("<div></div>");p.on("click","#"+i,(function(t){t.preventDefault();var n=p.find("#"+r).val(),i=p.find("#"+o).val();FF(e,n,i),e.hidePanelOrModal()})),this.$content=p}var h=this.$content;if(h.empty(),h.append(u),h.append(c),h.append(d),null==t||jt.isCollapsed(t))s.val("");else{var g=yt.string(e,t);s.val(g)}return f.val(""),setTimeout((function(){s.focus()})),h[0]},e}();function NF(){return xF("w-e-update-link")}var IF=function(){function e(){this.title=OC("link.edit"),this.iconSvg=Qk,this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.urlInputId=NF(),this.buttonId=NF()}return e.prototype.getSelectedLinkElem=function(e){var t=Wy.getSelectedNodeByType(e,"link");return null==t?null:t},e.prototype.getValue=function(e){var t=this.getSelectedLinkElem(e);return t&&t.url||""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedLinkElem(e)},e.prototype.getModalPositionNode=function(e){return Wy.getSelectedNodeByType(e,"link")},e.prototype.getModalContentElem=function(e){var t=this.urlInputId,n=this.buttonId,r=Ok(cD(OC("link.url"),t),2),o=r[0],i=Fr(r[1]),a=Ok(fD(n,OC("common.ok")),1)[0];if(null==this.$content){var u=Fr("<div></div>");u.on("click","button",(function(n){n.preventDefault(),e.restoreSelection();var r=Wy.getSelectedNodeByType(e,"link"),o=r?Dt.string(r):"",i=u.find("#"+t).val();!function(e,t,n){xk(this,void 0,void 0,(function(){var r,o;return Sk(this,(function(i){switch(i.label){case 0:return n?[4,AF("editLink",e,t,n)]:[2];case 1:return i.sent()?[4,OF("editLink",e,n)]:[2];case 2:return r=i.sent(),o={url:SF(r)},an.setNodes(e,o,{match:function(e){return Wy.checkNodeType(e,"link")}}),[2]}}))}))}(e,o,i),e.hidePanelOrModal()})),this.$content=u}var s=this.$content;s.empty(),s.append(o),s.append(a);var l=this.getValue(e);return i.val(l),setTimeout((function(){i.focus()})),s[0]},e}(),RF=function(){function e(){this.title=OC("link.unLink"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M608.16328 811.815036c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.347563 89.347564c-118.525421 118.523421-311.38448 118.531421-429.919901 0-118.527421-118.529421-118.527421-311.39048 0-429.917901l89.349564-89.349563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.195613 79.195613c9.371954 9.371954 9.371954 24.56788 0 33.941834l-89.349563 89.347564c-56.143726 56.145726-56.143726 147.49928 0 203.645005 56.143726 56.143726 147.49928 56.145726 203.647005 0l89.347564-89.347563c9.371954-9.371954 24.56788-9.371954 33.941834 0l79.193613 79.195613z m-113.135447-520.429459c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.347564-89.347564c56.143726-56.149726 147.49928-56.145726 203.647006 0 56.143726 56.145726 56.143726 147.49928 0 203.645006l-89.349564 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.195613 79.195613c9.371954 9.371954 24.56788 9.371954 33.941834 0l89.349564-89.349563c118.529421-118.529421 118.529421-311.38848 0-429.917901-118.531421-118.527421-311.38848-118.527421-429.919901 0l-89.347563 89.347564c-9.371954 9.371954-9.371954 24.56788 0 33.941834l79.193613 79.195613z m469.653707 718.556492l45.253779-45.253779c18.745908-18.745908 18.745908-49.13776 0-67.881669L127.195629 14.062931c-18.745908-18.745908-49.13776-18.745908-67.881669 0L14.058181 59.31871c-18.745908 18.745908-18.745908 49.13776 0 67.881669l882.74169 882.74169c18.745908 18.743908 49.13776 18.743908 67.881669 0z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==Wy.getSelectedNodeByType(e,"link")},e.prototype.exec=function(e,t){this.isDisabled(e)||an.unwrapNodes(e,{match:function(e){return Wy.checkNodeType(e,"link")}})},e}(),LF=function(){function e(){this.title=OC("link.view"),this.iconSvg=eB,this.tag="button"}return e.prototype.getSelectedLinkElem=function(e){var t=Wy.getSelectedNodeByType(e,"link");return null==t?null:t},e.prototype.getValue=function(e){var t=this.getSelectedLinkElem(e);return t&&t.url||""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedLinkElem(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){if(!t||"string"!=typeof t)throw new Error("View link failed, link url is '"+t+"'");window.open(t,"_blank")}},e}(),MF={checkLink:function(e,t){return!0},parseLinkUrl:function(e){return e}},zF={renderElems:[_F],elemsToHtml:[{type:"link",elemToHtml:function(e,t){var n=e,r=n.url,o=n.target;return'<a href="'+r+'" target="'+(void 0===o?"_blank":o)+'">'+t+"</a>"}}],parseElemsHtml:[TF],menus:[{key:"insertLink",factory:function(){return new jF},config:MF},{key:"editLink",factory:function(){return new IF},config:MF},{key:"unLink",factory:function(){return new RF}},{key:"viewLink",factory:function(){return new LF}}],editorPlugin:function(e){var t=e.isInline,n=e.insertData,r=e.normalizeNode;e.insertNode,e.insertText;var o=e;return o.isInline=function(e){return"link"===e.type||t(e)},o.insertData=function(e){var t=e.getData("text/plain");if(function(e){if("string"!=typeof e)return!1;var t=e.match(wF);if(!t)return!1;var n=t[1];return!(!n||!EF.test(n)&&!DF.test(n))}(t)){if(!kF(o)){var r=o.selection;if(null!=r){var i=yt.string(o,r);FF(o,i,t)}}}else n(e)},o.normalizeNode=function(e){var t=Ok(e,2),n=t[0],i=t[1];return"link"!==Wy.getNodeType(n)?r([n,i]):""===Dt.string(n)?an.removeNodes(o,{at:i}):r([n,i])},o}},$F=KC(1..valueOf),HF=jC.RangeError,VF=jC.RangeError,UF=jC.String,WF=Math.floor,qF=KC((function(e){var t=_A(nx(this)),n="",r=BS(e);if(r<0||r==1/0)throw HF("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(t+=t))1&r&&(n+=t);return n})),GF=KC("".slice),KF=KC(1..toFixed),YF=function(e,t,n){return 0===t?n:t%2==1?YF(e,t-1,n*e):YF(e*e,t/2,n)},XF=function(e,t,n){for(var r=-1,o=n;++r<6;)o+=t*e[r],e[r]=o%1e7,o=WF(o/1e7)},ZF=function(e,t){for(var n=6,r=0;--n>=0;)r+=e[n],e[n]=WF(r/t),r=r%t*1e7},JF=function(e){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==e[t]){var r=UF(e[t]);n=""===n?r:n+qF("0",7-r.length)+r}return n};function QF(e,t){return"w-e-image-container-"+Wy.findKey(e,t).id}function e_(e,t,n,r){var o=Fr("body"),i=QF(e,t),a=r.width,u=r.height,s=0,l=0,c=0,f=!1,d=null;var p=qo((function(e){e.preventDefault();var t=e.clientX,n=l+(f?s-t:t-s),r=c*(n/l);null!=d&&(n<=15||r<=15||(d.css("width",n+"px"),d.css("height",r+"px")))}),100);function h(n){if(o.off("mousemove",p),null!=d){var r=d.width().toFixed(2),i=d.height().toFixed(2),a={style:Ck(Ck({},t.style),{width:r+"px",height:i+"px"})};an.setNodes(e,a,{at:Wy.findPath(e,t)}),o.off("mouseup",h)}}var g={};return a&&(g.width=a),u&&(g.height=u),Ci("div",{id:i,style:g,className:"w-e-image-container w-e-selected-image-container",on:{mousedown:function(t){var n=Fr(t.target);n.hasClass("w-e-image-dragger")&&(t.preventDefault(),(n.hasClass("left-top")||n.hasClass("left-bottom"))&&(f=!0),function(t){d=function(){var e=Fr("#"+i);if(0===e.length)throw new Error("Cannot find image container elem");return e}(),s=t;var n=d.find("img");if(0===n.length)throw new Error("Cannot find image elem");l=n.width(),c=n.height(),o.on("mousemove",p),o.on("mouseup",h);var r=Wy.getHoverbar(e);r&&r.hideAndClean()}(t.clientX))}}},n,Ci("div",{className:"w-e-image-dragger left-top"}),Ci("div",{className:"w-e-image-dragger right-top"}),Ci("div",{className:"w-e-image-dragger left-bottom"}),Ci("div",{className:"w-e-image-dragger right-bottom"}))}nA({target:"Number",proto:!0,forced:NC((function(){return"0.000"!==KF(8e-5,3)||"1"!==KF(.9,0)||"1.25"!==KF(1.255,2)||"1000000000000000128"!==KF(0xde0b6b3a7640080,0)}))||!NC((function(){KF({})}))},{toFixed:function(e){var t,n,r,o,i=$F(this),a=BS(e),u=[0,0,0,0,0,0],s="",l="0";if(a<0||a>20)throw VF("Incorrect fraction digits");if(i!=i)return"NaN";if(i<=-1e21||i>=1e21)return UF(i);if(i<0&&(s="-",i=-i),i>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(i*YF(2,69,1))-69)<0?i*YF(2,-t,1):i/YF(2,t,1),n*=4503599627370496,(t=52-t)>0){for(XF(u,0,n),r=a;r>=7;)XF(u,1e7,0),r-=7;for(XF(u,YF(10,r,1),0),r=t-1;r>=23;)ZF(u,1<<23),r-=23;ZF(u,1<<r),XF(u,1,1),ZF(u,2),l=JF(u)}else XF(u,0,n),XF(u,1<<-t,0),l=JF(u)+qF("0",a);return a>0?s+((o=l.length)<=a?"0."+qF("0",a-o)+l:GF(l,0,o-a)+"."+GF(l,o-a)):s+l}});var t_={type:"image",renderElem:function(e,t,n){var r=e,o=r.src,i=r.alt,a=void 0===i?"":i,u=r.href,s=void 0===u?"":u,l=r.style,c=void 0===l?{}:l,f=c.width,d=void 0===f?"":f,p=c.height,h=void 0===p?"":p,g=Wy.isNodeSelected(n,e),v={};d&&(v.width="100%"),h&&(v.height="100%");var y=Ci("img",{style:v,src:o,alt:a,"data-href":s}),m=n.isDisabled();return g&&!m?e_(n,e,y,{width:d,height:h}):function(e,t,n,r){var o=r.width,i=r.height,a={};return o&&(a.width=o),i&&(a.height=i),Ci("div",{id:QF(e,t),style:a,className:"w-e-image-container"},n)}(n,e,y,{width:d,height:h})}},n_={selector:"img",parseElemHtml:function(e,t,n){var r=Fr(e),o=r.attr("data-href")||"";return o=decodeURIComponent(o),{type:"image",src:r.attr("src")||"",alt:r.attr("alt")||"",href:o,style:{width:bk(r,"width"),height:bk(r,"height")},children:[{text:""}]}}};function r_(e,t,n,r,o){return void 0===r&&(r=""),void 0===o&&(o=""),xk(this,void 0,void 0,(function(){var i,a;return Sk(this,(function(u){switch(u.label){case 0:return(i=t.getMenuConfig(e).checkImage)?[4,i(n,r,o)]:[3,2];case 1:if("string"==typeof(a=u.sent()))return t.alert(a,"error"),[2,!1];if(null==a)return[2,!1];u.label=2;case 2:return[2,!0]}}))}))}function o_(e,t,n){return xk(this,void 0,void 0,(function(){var r;return Sk(this,(function(o){switch(o.label){case 0:return(r=t.getMenuConfig(e).parseImageSrc)?[4,r(n)]:[3,2];case 1:return[2,o.sent()];case 2:return[2,n]}}))}))}function i_(e,t,n,r){return void 0===n&&(n=""),void 0===r&&(r=""),xk(this,void 0,void 0,(function(){var o,i,a;return Sk(this,(function(u){switch(u.label){case 0:return[4,r_("insertImage",e,t,n,r)];case 1:return u.sent()?[4,o_("insertImage",e,t)]:[2];case 2:return o=u.sent(),i={type:"image",src:SF(o),href:r,alt:n,style:{},children:[{text:""}]},null===e.selection&&e.restoreSelection(),Wy.getSelectedNodeByType(e,"image")&&e.move(1),a_(e)||(an.insertNodes(e,i),(a=e.getMenuConfig("insertImage").onInsertedImage)&&a(i)),[2]}}))}))}function a_(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||!!Ok(yt.nodes(e,{match:function(t){var n=Wy.getNodeType(t);return"code"===n||"pre"===n||"link"===n||"list-item"===n||!!n.startsWith("header")||"blockquote"===n||!!yt.isVoid(e,t)},universal:!0}),1)[0]}function u_(){return xF("w-e-insert-image")}var s_=function(){function e(){this.title=OC("image.netImage"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=u_(),this.altInputId=u_(),this.hrefInputId=u_(),this.buttonId=u_()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return a_(e)},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=this,n=this,r=n.srcInputId,o=n.altInputId,i=n.hrefInputId,a=n.buttonId,u=Ok(cD(OC("image.src"),r),2),s=u[0],l=Fr(u[1]),c=Ok(cD(OC("image.desc"),o),2),f=c[0],d=Fr(c[1]),p=Ok(cD(OC("image.link"),i),2),h=p[0],g=Fr(p[1]),v=Ok(fD(a,OC("common.ok")),1)[0];if(null==this.$content){var y=Fr("<div></div>");y.on("click","#"+a,(function(n){n.preventDefault();var a=y.find("#"+r).val().trim(),u=y.find("#"+o).val().trim(),s=y.find("#"+i).val().trim();t.insertImage(e,a,u,s),e.hidePanelOrModal()})),this.$content=y}var m=this.$content;return m.empty(),m.append(s),m.append(f),m.append(h),m.append(v),l.val(""),d.val(""),g.val(""),setTimeout((function(){l.focus()})),m[0]},e.prototype.insertImage=function(e,t,n,r){void 0===n&&(n=""),void 0===r&&(r=""),t&&(e.restoreSelection(),this.isDisabled(e)||i_(e,t,n,r))},e}(),l_=function(){function e(){this.title=OC("image.delete"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==Wy.getSelectedNodeByType(e,"image")},e.prototype.exec=function(e,t){this.isDisabled(e)||an.removeNodes(e,{match:function(e){return Wy.checkNodeType(e,"image")}})},e}();function c_(){return xF("w-e-edit-image")}var f_=function(){function e(){this.title=OC("image.edit"),this.iconSvg=Qk,this.tag="button",this.showModal=!0,this.modalWidth=300,this.$content=null,this.srcInputId=c_(),this.altInputId=c_(),this.hrefInputId=c_(),this.buttonId=c_()}return e.prototype.getValue=function(e){return""},e.prototype.getImageNode=function(e){return Wy.getSelectedNodeByType(e,"image")},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"image")},e.prototype.getModalPositionNode=function(e){return this.getImageNode(e)},e.prototype.getModalContentElem=function(e){var t=this,n=this,r=n.srcInputId,o=n.altInputId,i=n.hrefInputId,a=n.buttonId,u=this.getImageNode(e);if(null==u)throw new Error("Not found selected image node");var s=Ok(cD(OC("image.src"),r),2),l=s[0],c=Fr(s[1]),f=Ok(cD(OC("image.desc"),o),2),d=f[0],p=Fr(f[1]),h=Ok(cD(OC("image.link"),i),2),g=h[0],v=Fr(h[1]),y=Ok(fD(a,OC("common.ok")),1)[0];if(null==this.$content){var m=Fr("<div></div>");m.on("click","#"+a,(function(n){n.preventDefault();var a=m.find("#"+r).val(),u=m.find("#"+o).val(),s=m.find("#"+i).val();t.updateImage(e,a,u,s),e.hidePanelOrModal()})),this.$content=m}var b=this.$content;b.empty(),b.append(l),b.append(d),b.append(g),b.append(y);var w=u,E=w.src,D=w.alt,C=void 0===D?"":D,x=w.href,S=void 0===x?"":x;return c.val(E),p.val(C),v.val(S),setTimeout((function(){c.focus()})),b[0]},e.prototype.updateImage=function(e,t,n,r,o){void 0===n&&(n=""),void 0===r&&(r=""),void 0===o&&(o={}),t&&(e.restoreSelection(),this.isDisabled(e)||function(e,t,n,r,o){void 0===n&&(n=""),void 0===r&&(r=""),void 0===o&&(o={}),xk(this,void 0,void 0,(function(){var i,a,u,s,l,c;return Sk(this,(function(f){switch(f.label){case 0:return[4,r_("editImage",e,t,n,r)];case 1:return f.sent()?[4,o_("editImage",e,t)]:[2];case 2:return i=f.sent(),null==(a=Wy.getSelectedNodeByType(e,"image"))||(u=a.style,s={src:i,alt:n,href:r,style:Ck(Ck({},void 0===u?{}:u),o)},an.setNodes(e,s,{match:function(e){return Wy.checkNodeType(e,"image")}}),l=Wy.getSelectedNodeByType(e,"image"),(c=e.getMenuConfig("editImage").onUpdatedImage)&&c(l)),[2]}}))}))}(e,t,n,r,o))},e}(),d_=function(){function e(){this.title=OC("image.viewLink"),this.iconSvg=eB,this.tag="button"}return e.prototype.getValue=function(e){var t=Wy.getSelectedNodeByType(e,"image");return t&&t.href||""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!this.getValue(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){if(!t||"string"!=typeof t)throw new Error("View image link failed, image.href is '"+t+"'");window.open(t,"_blank")}},e}(),p_=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.getSelectedNode=function(e){return Wy.getSelectedNodeByType(e,"image")},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedNode(e)},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=this.getSelectedNode(e);if(null!=n){var r=Wy.getHoverbar(e);r&&r.hideAndClean();var o=n.style,i={style:Ck(Ck({},void 0===o?{}:o),{width:this.value,height:""})};an.setNodes(e,i,{match:function(e){return Wy.checkNodeType(e,"image")}})}}},e}(),h_=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="30%",t.value="30%",t}return Dk(t,e),t}(p_),g_=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="50%",t.value="50%",t}return Dk(t,e),t}(p_),v_=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title="100%",t.value="100%",t}return Dk(t,e),t}(p_),y_={onInsertedImage:function(e){},onUpdatedImage:function(e){},checkImage:function(e,t,n){return!0},parseImageSrc:function(e){return e}},m_={renderElems:[t_],elemsToHtml:[{type:"image",elemToHtml:function(e,t){var n=e,r=n.src,o=n.alt,i=void 0===o?"":o,a=n.href,u=void 0===a?"":a,s=n.style,l=void 0===s?{}:s,c=l.width,f=void 0===c?"":c,d=l.height,p=void 0===d?"":d,h="";return f&&(h+="width: "+f+";"),p&&(h+="height: "+p+";"),'<img src="'+r+'" alt="'+i+'" data-href="'+u+'" style="'+h+'"/>'}}],parseElemsHtml:[n_],menus:[{key:"insertImage",factory:function(){return new s_},config:y_},{key:"deleteImage",factory:function(){return new l_}},{key:"editImage",factory:function(){return new f_},config:y_},{key:"viewImageLink",factory:function(){return new d_}},{key:"imageWidth30",factory:function(){return new h_}},{key:"imageWidth50",factory:function(){return new g_}},{key:"imageWidth100",factory:function(){return new v_}}],editorPlugin:function(e){var t=e.isInline,n=e.isVoid;e.insertNode;var r=e;return r.isInline=function(e){return"image"===e.type||t(e)},r.isVoid=function(e){return"image"===e.type||n(e)},r}},b_={type:"todo",renderElem:function(e,t,n){var r=!1;return n.isDisabled()&&(r=!0),Ci("div",{style:{margin:"5px 0"}},Ci("span",{contentEditable:!1,style:{marginRight:"0.5em"}},Ci("input",{type:"checkbox",checked:e.checked,disabled:r,on:{change:function(t){var r=Wy.findPath(n,e),o={checked:t.target.checked};an.setNodes(n,o,{at:r})}}})),Ci("span",null,t))}},w_=function(){function e(){this.title=OC("todo.todo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M278.755556 403.911111l-79.644445 79.644445L455.111111 739.555556l568.888889-568.888889-79.644444-79.644445L455.111111 580.266667l-176.355555-176.355556zM910.222222 910.222222H113.777778V113.777778h568.888889V0H113.777778C51.2 0 0 51.2 0 113.777778v796.444444c0 62.577778 51.2 113.777778 113.777778 113.777778h796.444444c62.577778 0 113.777778-51.2 113.777778-113.777778V455.111111h-113.777778v455.111111z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!!Wy.getSelectedNodeByType(e,"todo")},e.prototype.isDisabled=function(e){return null==e.selection||!!Wy.getSelectedElems(e).some((function(t){if(yt.isVoid(e,t)&&yt.isBlock(e,t))return!0;var n=t.type;return!!["pre","table","bulleted-list","numbered-list"].includes(n)||void 0}))},e.prototype.exec=function(e,t){var n=this.isActive(e);an.setNodes(e,{type:n?"paragraph":"todo"})},e}(),E_={selector:'div[data-w-e-type="todo"]',parseElemHtml:function(e,t,n){var r=Fr(e);0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]);var o=!1;return null!=r.find('input[type="checkbox"]').attr("checked")&&(o=!0),{type:"todo",checked:o,children:t}}},D_={renderElems:[b_],elemsToHtml:[{type:"todo",elemToHtml:function(e,t){return'<div data-w-e-type="todo"><input type="checkbox" disabled '+(e.checked?"checked":"")+">"+t+"</div>"}}],preParseHtml:[{selector:"ul.w-e-todo",preParseHtml:function(e){var t=Fr(e).find("li"),n=Fr('<div data-w-e-type="todo"></div>'),r=t.find("input[type]");return n.append(r),t.children()[0].remove(),n[0].innerHTML=n[0].innerHTML+t[0].innerHTML,n[0]}}],parseElemsHtml:[E_],menus:[{key:"todo",factory:function(){return new w_}}],editorPlugin:function(e){var t=e.deleteBackward,n=e;return n.deleteBackward=function(n){var r=e.selection;if(r&&jt.isCollapsed(r)){var o=Wy.getSelectedNodeByType(e,"todo");if(o&&0===Dt.string(o).length)return void an.setNodes(e,{type:"paragraph"},{mode:"highest"})}t(n)},n}},C_={type:"blockquote",renderElem:function(e,t,n){return Ci("blockquote",null,t)}},x_={selector:"blockquote",parseElemHtml:function(e,t,n){var r=Fr(e);return 0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"blockquote",children:t}}},S_=function(){function e(){this.title=OC("blockQuote.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M894.6 907.1H605.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C752.7 180.4 711.3 315.8 711.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z m-472 0H133.4c-32.6 0-59-26.4-59-59V608.2l-4-14.9c0-315.9 125.5-485.1 376.5-507.5v59.8C280.7 180.4 239.3 315.8 239.3 442.4v41.2l31.5 12.3h151.8c32.6 0 59 26.4 59 59v293.2c0 32.5-26.4 59-59 59z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!!Wy.getSelectedNodeByType(e,"blockquote")},e.prototype.isDisabled=function(e){return null==e.selection||!Ok(yt.nodes(e,{match:function(e){var t=Wy.getNodeType(e);return"paragraph"===t||"blockquote"===t},universal:!0,mode:"highest"}),1)[0]},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=this.isActive(e)?"paragraph":"blockquote";an.setNodes(e,{type:n},{mode:"highest"})}},e}(),A_={key:"blockquote",factory:function(){return new S_}},O_=KC([].slice),k_=AA("slice"),B_=$x("species"),F_=jC.Array,__=Math.max;nA({target:"Array",proto:!0,forced:!k_},{slice:function(e,t){var n,r,o,i=rx(this),a=NS(i),u=TS(e,a),s=TS(void 0===t?a:t,a);if(oA(i)&&(n=i.constructor,(mA(n)&&(n===F_||oA(n.prototype))||ix(n)&&null===(n=n[B_]))&&(n=void 0),n===F_||void 0===n))return O_(i,u,s);for(r=new(void 0===n?F_:n)(__(s-u,0)),o=0;u<s;u++,o++)u in i&&ZO(r,o,i[u]);return r.length=o,r}});var T_={renderElems:[C_],elemsToHtml:[{type:"blockquote",elemToHtml:function(e,t){return"<blockquote>"+t+"</blockquote>"}}],parseElemsHtml:[x_],menus:[A_],editorPlugin:function(e){var t=e.insertBreak,n=e.insertText,r=e;return r.insertBreak=function(){var o=r.selection;if(null==o)return t();var i=Ok(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"blockquote")},universal:!0}),1)[0];if(!i)return t();var a=i[0],u=Wy.findPath(e,a),s=yt.end(e,u);if(Ft.equals(s,o.focus)){var l=Dt.string(a);if(l&&"\n"===l.slice(-1))return e.deleteBackward("character"),void an.insertNodes(r,{type:"paragraph",children:[{text:""}]},{mode:"highest"})}n("\n")},r}},P_=function(){function e(){this.title=OC("emotion.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M512 1024C230.4 1024 0 793.6 0 512S230.4 0 512 0s512 230.4 512 512-230.4 512-512 512z m0-102.4c226.742857 0 409.6-182.857143 409.6-409.6S738.742857 102.4 512 102.4 102.4 285.257143 102.4 512s182.857143 409.6 409.6 409.6z m-204.8-358.4h409.6c0 113.371429-91.428571 204.8-204.8 204.8s-204.8-91.428571-204.8-204.8z m0-102.4c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8 76.8 32.914286 76.8 76.8-32.914286 76.8-76.8 76.8z m409.6 0c-43.885714 0-76.8-32.914286-76.8-76.8s32.914286-76.8 76.8-76.8c43.885714 0 76.8 32.914286 76.8 76.8s-32.914286 76.8-76.8 76.8z"></path></svg>',this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.exec=function(e,t){},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!!Ok(yt.nodes(e,{match:function(t){return"pre"===Wy.getNodeType(t)||!!yt.isVoid(e,t)},universal:!0}),1)[0]},e.prototype.getPanelContentElem=function(e){if(null==this.$content){var t=Fr('<ul class="w-e-panel-content-emotion"></ul>');t.on("click","li",(function(t){var n=t.target;if(null!=n){t.preventDefault();var r=Fr(n).text();e.insertText(r)}})),this.$content=t}var n=this.$content;if(null==n)return document.createElement("ul");n.empty();var r=e.getMenuConfig("emotion").emotions;return(void 0===r?[]:r).forEach((function(e){var t=Fr("<li>"+e+"</li>");n.append(t)})),n[0]},e}(),j_={menus:[{key:"emotion",factory:function(){return new P_},config:{emotions:"😀 😃 😄 😁 😆 😅 😂 🤣 😊 😇 🙂 🙃 😉 😌 😍 😘 😗 😙 😚 😋 😛 😝 😜 🤓 😎 😏 😒 😞 😔 😟 😕 🙁 😣 😖 😫 😩 😢 😭 😤 😠 😡 😳 😱 😨 🤗 🤔 😶 😑 😬 🙄 😯 😴 😷 🤑 😈 🤡 💩 👻 💀 👀 👣 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🖕 ✍️ 🙏".split(" ")}}]},N_={1:"12px",2:"14px",3:"16px",4:"19px",5:"24px",6:"32px",7:"48px"},I_={selector:"font",preParseHtml:function(e){var t=Fr(e);if("font"!==mk(t))return e;var n=t.attr("size")||"";n&&(t.removeAttr("size"),t.css("font-size",N_[n]));var r=t.attr("face")||"";return r&&(t.removeAttr("face"),t.css("font-family",r)),t[0]}},R_=KC("".indexOf);nA({target:"String",proto:!0,forced:!LB("includes")},{includes:function(e){return!!~R_(_A(nx(this)),_A(IB(e)),arguments.length>1?arguments[1]:void 0)}});var L_,M_,z_=function(){function e(){this.tag="select",this.width=80}return e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.mark,n=yt.marks(e);return n&&n[t]?n[t]:""},e.prototype.isDisabled=function(e){return null==e.selection||(this.mark,!!Ok(yt.nodes(e,{match:function(t){return"pre"===Wy.getNodeType(t)||!!yt.isVoid(e,t)},universal:!0}),1)[0])},e.prototype.exec=function(e,t){var n=this.mark;t?e.addMark(n,t):e.removeMark(n)},e}(),$_=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("fontSize.title"),t.iconSvg=rB,t.mark="fontSize",t}return Dk(t,e),t.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig(this.mark).fontSizeList,r=void 0===n?[]:n;t.push({text:OC("fontSize.default"),value:""}),r.forEach((function(e){t.push({text:e,value:e})}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},t}(z_),H_=function(e){return e&&e.Math==Math&&e},V_=H_("object"==typeof globalThis&&globalThis)||H_("object"==typeof window&&window)||H_("object"==typeof self&&self)||H_("object"==typeof BC&&BC)||function(){return this}()||Function("return this")(),U_=Function.prototype,W_=U_.apply,q_=U_.bind,G_=U_.call,K_="object"==typeof Reflect&&Reflect.apply||(q_?G_.bind(W_):function(){return G_.apply(W_,arguments)}),Y_=Function.prototype,X_=Y_.bind,Z_=Y_.call,J_=X_&&X_.bind(Z_),Q_=X_?function(e){return e&&J_(Z_,e)}:function(e){return e&&function(){return Z_.apply(e,arguments)}},eT=function(e){return"function"==typeof e},tT=function(e){try{return!!e()}catch(t){return!0}},nT=!tT((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),rT=Function.prototype.call,oT=rT.bind?rT.bind(rT):function(){return rT.apply(rT,arguments)},iT={}.propertyIsEnumerable,aT=Object.getOwnPropertyDescriptor,uT=aT&&!iT.call({1:2},1)?function(e){var t=aT(this,e);return!!t&&t.enumerable}:iT,sT={f:uT},lT=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},cT=Q_({}.toString),fT=Q_("".slice),dT=function(e){return fT(cT(e),8,-1)},pT=V_.Object,hT=Q_("".split),gT=tT((function(){return!pT("z").propertyIsEnumerable(0)}))?function(e){return"String"==dT(e)?hT(e,""):pT(e)}:pT,vT=V_.TypeError,yT=function(e){if(null==e)throw vT("Can't call method on "+e);return e},mT=function(e){return gT(yT(e))},bT=function(e){return"object"==typeof e?null!==e:eT(e)},wT={},ET=function(e){return eT(e)?e:void 0},DT=function(e,t){return arguments.length<2?ET(wT[e])||ET(V_[e]):wT[e]&&wT[e][t]||V_[e]&&V_[e][t]},CT=Q_({}.isPrototypeOf),xT=DT("navigator","userAgent")||"",ST=V_.process,AT=V_.Deno,OT=ST&&ST.versions||AT&&AT.version,kT=OT&&OT.v8;kT&&(M_=(L_=kT.split("."))[0]>0&&L_[0]<4?1:+(L_[0]+L_[1])),!M_&&xT&&(!(L_=xT.match(/Edge\/(\d+)/))||L_[1]>=74)&&(L_=xT.match(/Chrome\/(\d+)/))&&(M_=+L_[1]);var BT=M_,FT=!!Object.getOwnPropertySymbols&&!tT((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&BT&&BT<41})),_T=FT&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,TT=V_.Object,PT=_T?function(e){return"symbol"==typeof e}:function(e){var t=DT("Symbol");return eT(t)&&CT(t.prototype,TT(e))},jT=V_.String,NT=V_.TypeError,IT=function(e){if(eT(e))return e;throw NT(function(e){try{return jT(e)}catch(t){return"Object"}}(e)+" is not a function")},RT=V_.TypeError,LT=Object.defineProperty,MT=V_["__core-js_shared__"]||function(e,t){try{LT(V_,e,{value:t,configurable:!0,writable:!0})}catch(mG){V_[e]=t}return t}("__core-js_shared__",{}),zT=FC((function(e){(e.exports=function(e,t){return MT[e]||(MT[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"pure",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),$T=V_.Object,HT=function(e){return $T(yT(e))},VT=Q_({}.hasOwnProperty),UT=Object.hasOwn||function(e,t){return VT(HT(e),t)},WT=0,qT=Math.random(),GT=Q_(1..toString),KT=function(e){return"Symbol("+(void 0===e?"":e)+")_"+GT(++WT+qT,36)},YT=zT("wks"),XT=V_.Symbol,ZT=XT&&XT.for,JT=_T?XT:XT&&XT.withoutSetter||KT,QT=function(e){if(!UT(YT,e)||!FT&&"string"!=typeof YT[e]){var t="Symbol."+e;FT&&UT(XT,e)?YT[e]=XT[e]:YT[e]=_T&&ZT?ZT(t):JT(t)}return YT[e]},eP=V_.TypeError,tP=QT("toPrimitive"),nP=function(e){var t=function(e,t){if(!bT(e)||PT(e))return e;var n,r,o=null==(n=e[tP])?void 0:IT(n);if(o){if(void 0===t&&(t="default"),r=oT(o,e,t),!bT(r)||PT(r))return r;throw eP("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&eT(n=e.toString)&&!bT(r=oT(n,e)))return r;if(eT(n=e.valueOf)&&!bT(r=oT(n,e)))return r;if("string"!==t&&eT(n=e.toString)&&!bT(r=oT(n,e)))return r;throw RT("Can't convert object to primitive value")}(e,t)}(e,"string");return PT(t)?t:t+""},rP=V_.document,oP=bT(rP)&&bT(rP.createElement),iP=function(e){return oP?rP.createElement(e):{}},aP=!nT&&!tT((function(){return 7!=Object.defineProperty(iP("div"),"a",{get:function(){return 7}}).a})),uP=Object.getOwnPropertyDescriptor,sP={f:nT?uP:function(e,t){if(e=mT(e),t=nP(t),aP)try{return uP(e,t)}catch(n){}if(UT(e,t))return lT(!oT(sT.f,e,t),e[t])}},lP=/#|\.prototype\./,cP=function(e,t){var n=dP[fP(e)];return n==hP||n!=pP&&(eT(t)?tT(t):!!t)},fP=cP.normalize=function(e){return String(e).replace(lP,".").toLowerCase()},dP=cP.data={},pP=cP.NATIVE="N",hP=cP.POLYFILL="P",gP=cP,vP=Q_(Q_.bind),yP=function(e,t){return IT(e),void 0===t?e:vP?vP(e,t):function(){return e.apply(t,arguments)}},mP=V_.String,bP=V_.TypeError,wP=function(e){if(bT(e))return e;throw bP(mP(e)+" is not an object")},EP=V_.TypeError,DP=Object.defineProperty,CP={f:nT?DP:function(e,t,n){if(wP(e),t=nP(t),wP(n),aP)try{return DP(e,t,n)}catch(r){}if("get"in n||"set"in n)throw EP("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},xP=nT?function(e,t,n){return CP.f(e,t,lT(1,n))}:function(e,t,n){return e[t]=n,e},SP=sP.f,AP=function(e){var t=function(n,r,o){if(this instanceof t){switch(arguments.length){case 0:return new e;case 1:return new e(n);case 2:return new e(n,r)}return new e(n,r,o)}return K_(e,this,arguments)};return t.prototype=e.prototype,t},OP=function(e,t){var n,r,o,i,a,u,s,l,c=e.target,f=e.global,d=e.stat,p=e.proto,h=f?V_:d?V_[c]:(V_[c]||{}).prototype,g=f?wT:wT[c]||xP(wT,c,{})[c],v=g.prototype;for(o in t)n=!gP(f?o:c+(d?".":"#")+o,e.forced)&&h&&UT(h,o),a=g[o],n&&(u=e.noTargetGet?(l=SP(h,o))&&l.value:h[o]),i=n&&u?u:t[o],n&&typeof a==typeof i||(s=e.bind&&n?yP(i,V_):e.wrap&&n?AP(i):p&&eT(i)?Q_(i):i,(e.sham||i&&i.sham||a&&a.sham)&&xP(s,"sham",!0),xP(g,o,s),p&&(UT(wT,r=c+"Prototype")||xP(wT,r,{}),xP(wT[r],o,i),e.real&&v&&!v[o]&&xP(v,o,i)))},kP=Array.isArray||function(e){return"Array"==dT(e)},BP=Math.ceil,FP=Math.floor,_P=function(e){var t=+e;return t!=t||0===t?0:(t>0?FP:BP)(t)},TP=Math.min,PP=function(e){return(t=e.length)>0?TP(_P(t),9007199254740991):0;var t},jP=function(e,t,n){var r=nP(t);r in e?CP.f(e,r,lT(0,n)):e[r]=n},NP={};NP[QT("toStringTag")]="z";var IP="[object z]"===String(NP),RP=QT("toStringTag"),LP=V_.Object,MP="Arguments"==dT(function(){return arguments}()),zP=IP?dT:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=LP(e),RP))?n:MP?dT(t):"Object"==(r=dT(t))&&eT(t.callee)?"Arguments":r},$P=Q_(Function.toString);eT(MT.inspectSource)||(MT.inspectSource=function(e){return $P(e)});var HP=MT.inspectSource,VP=function(){},UP=[],WP=DT("Reflect","construct"),qP=/^\s*(?:class|function)\b/,GP=Q_(qP.exec),KP=!qP.exec(VP),YP=function(e){if(!eT(e))return!1;try{return WP(VP,UP,e),!0}catch(t){return!1}},XP=!WP||tT((function(){var e;return YP(YP.call)||!YP(Object)||!YP((function(){e=!0}))||e}))?function(e){if(!eT(e))return!1;switch(zP(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return KP||!!GP(qP,HP(e))}:YP,ZP=QT("species"),JP=V_.Array,QP=function(e,t){return new(kP(n=e)&&(r=n.constructor,(XP(r)&&(r===JP||kP(r.prototype))||bT(r)&&null===(r=r[ZP]))&&(r=void 0)),void 0===r?JP:r)(0===t?0:t);var n,r},ej=QT("species"),tj=QT("isConcatSpreadable"),nj=V_.TypeError,rj=BT>=51||!tT((function(){var e=[];return e[tj]=!1,e.concat()[0]!==e})),oj=BT>=51||!tT((function(){var e=[];return(e.constructor={})[ej]=function(){return{foo:1}},1!==e.concat(Boolean).foo})),ij=function(e){if(!bT(e))return!1;var t=e[tj];return void 0!==t?!!t:kP(e)};OP({target:"Array",proto:!0,forced:!rj||!oj},{concat:function(e){var t,n,r,o,i,a=HT(this),u=QP(a,0),s=0;for(t=-1,r=arguments.length;t<r;t++)if(ij(i=-1===t?a:arguments[t])){if(s+(o=PP(i))>9007199254740991)throw nj("Maximum allowed index exceeded");for(n=0;n<o;n++,s++)n in i&&jP(u,s,i[n])}else{if(s>=9007199254740991)throw nj("Maximum allowed index exceeded");jP(u,s++,i)}return u.length=s,u}});var aj,uj=V_.String,sj=function(e){if("Symbol"===zP(e))throw TypeError("Cannot convert a Symbol value to a string");return uj(e)},lj=Math.max,cj=Math.min,fj=function(e,t){var n=_P(e);return n<0?lj(n+t,0):cj(n,t)},dj=function(e){return function(t,n,r){var o,i=mT(t),a=PP(i),u=fj(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},pj={includes:dj(!0),indexOf:dj(!1)},hj={},gj=pj.indexOf,vj=Q_([].push),yj=function(e,t){var n,r=mT(e),o=0,i=[];for(n in r)!UT(hj,n)&&UT(r,n)&&vj(i,n);for(;t.length>o;)UT(r,n=t[o++])&&(~gj(i,n)||vj(i,n));return i},mj=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],bj=Object.keys||function(e){return yj(e,mj)},wj=nT?Object.defineProperties:function(e,t){wP(e);for(var n,r=mT(t),o=bj(t),i=o.length,a=0;i>a;)CP.f(e,n=o[a++],r[n]);return e},Ej=DT("document","documentElement"),Dj=zT("keys"),Cj=function(e){return Dj[e]||(Dj[e]=KT(e))},xj=Cj("IE_PROTO"),Sj=function(){},Aj=function(e){return"<script>"+e+"<\/script>"},Oj=function(e){e.write(Aj("")),e.close();var t=e.parentWindow.Object;return e=null,t},kj=function(){try{aj=new ActiveXObject("htmlfile")}catch(r){}var e,t;kj="undefined"!=typeof document?document.domain&&aj?Oj(aj):((t=iP("iframe")).style.display="none",Ej.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Aj("document.F=Object")),e.close(),e.F):Oj(aj);for(var n=mj.length;n--;)delete kj.prototype[mj[n]];return kj()};hj[xj]=!0;var Bj,Fj,_j,Tj=Object.create||function(e,t){var n;return null!==e?(Sj.prototype=wP(e),n=new Sj,Sj.prototype=null,n[xj]=e):n=kj(),void 0===t?n:wj(n,t)},Pj=mj.concat("length","prototype"),jj={f:Object.getOwnPropertyNames||function(e){return yj(e,Pj)}},Nj=V_.Array,Ij=Math.max,Rj=jj.f,Lj="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],Mj={f:function(e){return Lj&&"Window"==dT(e)?function(e){try{return Rj(e)}catch(t){return function(e,t,n){for(var r=PP(e),o=fj(void 0,r),i=fj(r,r),a=Nj(Ij(i-o,0)),u=0;o<i;o++,u++)jP(a,u,e[o]);return a.length=u,a}(Lj)}}(e):Rj(mT(e))}},zj={f:Object.getOwnPropertySymbols},$j=Q_([].slice),Hj=function(e,t,n,r){r&&r.enumerable?e[t]=n:xP(e,t,n)},Vj={f:QT},Uj=CP.f,Wj=function(e){var t=wT.Symbol||(wT.Symbol={});UT(t,e)||Uj(t,e,{value:Vj.f(e)})},qj=IP?{}.toString:function(){return"[object "+zP(this)+"]"},Gj=CP.f,Kj=QT("toStringTag"),Yj=function(e,t,n,r){if(e){var o=n?e:e.prototype;UT(o,Kj)||Gj(o,Kj,{configurable:!0,value:t}),r&&!IP&&xP(o,"toString",qj)}},Xj=V_.WeakMap,Zj=eT(Xj)&&/native code/.test(HP(Xj)),Jj=V_.TypeError,Qj=V_.WeakMap;if(Zj||MT.state){var eN=MT.state||(MT.state=new Qj),tN=Q_(eN.get),nN=Q_(eN.has),rN=Q_(eN.set);Bj=function(e,t){if(nN(eN,e))throw new Jj("Object already initialized");return t.facade=e,rN(eN,e,t),t},Fj=function(e){return tN(eN,e)||{}},_j=function(e){return nN(eN,e)}}else{var oN=Cj("state");hj[oN]=!0,Bj=function(e,t){if(UT(e,oN))throw new Jj("Object already initialized");return t.facade=e,xP(e,oN,t),t},Fj=function(e){return UT(e,oN)?e[oN]:{}},_j=function(e){return UT(e,oN)}}var iN={set:Bj,get:Fj,has:_j,enforce:function(e){return _j(e)?Fj(e):Bj(e,{})},getterFor:function(e){return function(t){var n;if(!bT(t)||(n=Fj(t)).type!==e)throw Jj("Incompatible receiver, "+e+" required");return n}}},aN=Q_([].push),uN=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=HT(s),g=gT(h),v=yP(l,c),y=PP(g),m=0,b=f||QP,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:aN(w,d)}else switch(e){case 4:return!1;case 7:aN(w,d)}return i?-1:r||o?o:w}},sN=[uN(0),uN(1),uN(2),uN(3),uN(4),uN(5),uN(6),uN(7)][0],lN=Cj("hidden"),cN=QT("toPrimitive"),fN=iN.set,dN=iN.getterFor("Symbol"),pN=Object.prototype,hN=V_.Symbol,gN=hN&&hN.prototype,vN=V_.TypeError,yN=V_.QObject,mN=DT("JSON","stringify"),bN=sP.f,wN=CP.f,EN=Mj.f,DN=sT.f,CN=Q_([].push),xN=zT("symbols"),SN=zT("op-symbols"),AN=zT("string-to-symbol-registry"),ON=zT("symbol-to-string-registry"),kN=zT("wks"),BN=!yN||!yN.prototype||!yN.prototype.findChild,FN=nT&&tT((function(){return 7!=Tj(wN({},"a",{get:function(){return wN(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=bN(pN,t);r&&delete pN[t],wN(e,t,n),r&&e!==pN&&wN(pN,t,r)}:wN,_N=function(e,t){var n=xN[e]=Tj(gN);return fN(n,{type:"Symbol",tag:e,description:t}),nT||(n.description=t),n},TN=function(e,t,n){e===pN&&TN(SN,t,n),wP(e);var r=nP(t);return wP(n),UT(xN,r)?(n.enumerable?(UT(e,lN)&&e[lN][r]&&(e[lN][r]=!1),n=Tj(n,{enumerable:lT(0,!1)})):(UT(e,lN)||wN(e,lN,lT(1,{})),e[lN][r]=!0),FN(e,r,n)):wN(e,r,n)},PN=function(e,t){wP(e);var n=mT(t),r=bj(n).concat(RN(n));return sN(r,(function(t){nT&&!oT(jN,n,t)||TN(e,t,n[t])})),e},jN=function(e){var t=nP(e),n=oT(DN,this,t);return!(this===pN&&UT(xN,t)&&!UT(SN,t))&&(!(n||!UT(this,t)||!UT(xN,t)||UT(this,lN)&&this[lN][t])||n)},NN=function(e,t){var n=mT(e),r=nP(t);if(n!==pN||!UT(xN,r)||UT(SN,r)){var o=bN(n,r);return!o||!UT(xN,r)||UT(n,lN)&&n[lN][r]||(o.enumerable=!0),o}},IN=function(e){var t=EN(mT(e)),n=[];return sN(t,(function(e){UT(xN,e)||UT(hj,e)||CN(n,e)})),n},RN=function(e){var t=e===pN,n=EN(t?SN:mT(e)),r=[];return sN(n,(function(e){!UT(xN,e)||t&&!UT(pN,e)||CN(r,xN[e])})),r};if(FT||(gN=(hN=function(){if(CT(gN,this))throw vN("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?sj(arguments[0]):void 0,t=KT(e),n=function(e){this===pN&&oT(n,SN,e),UT(this,lN)&&UT(this[lN],t)&&(this[lN][t]=!1),FN(this,t,lT(1,e))};return nT&&BN&&FN(pN,t,{configurable:!0,set:n}),_N(t,e)}).prototype,Hj(gN,"toString",(function(){return dN(this).tag})),Hj(hN,"withoutSetter",(function(e){return _N(KT(e),e)})),sT.f=jN,CP.f=TN,sP.f=NN,jj.f=Mj.f=IN,zj.f=RN,Vj.f=function(e){return _N(QT(e),e)},nT&&wN(gN,"description",{configurable:!0,get:function(){return dN(this).description}})),OP({global:!0,wrap:!0,forced:!FT,sham:!FT},{Symbol:hN}),sN(bj(kN),(function(e){Wj(e)})),OP({target:"Symbol",stat:!0,forced:!FT},{for:function(e){var t=sj(e);if(UT(AN,t))return AN[t];var n=hN(t);return AN[t]=n,ON[n]=t,n},keyFor:function(e){if(!PT(e))throw vN(e+" is not a symbol");if(UT(ON,e))return ON[e]},useSetter:function(){BN=!0},useSimple:function(){BN=!1}}),OP({target:"Object",stat:!0,forced:!FT,sham:!nT},{create:function(e,t){return void 0===t?Tj(e):PN(Tj(e),t)},defineProperty:TN,defineProperties:PN,getOwnPropertyDescriptor:NN}),OP({target:"Object",stat:!0,forced:!FT},{getOwnPropertyNames:IN,getOwnPropertySymbols:RN}),OP({target:"Object",stat:!0,forced:tT((function(){zj.f(1)}))},{getOwnPropertySymbols:function(e){return zj.f(HT(e))}}),mN){var LN=!FT||tT((function(){var e=hN();return"[null]"!=mN([e])||"{}"!=mN({a:e})||"{}"!=mN(Object(e))}));OP({target:"JSON",stat:!0,forced:LN},{stringify:function(e,t,n){var r=$j(arguments),o=t;if((bT(t)||void 0!==e)&&!PT(e))return kP(t)||(t=function(e,t){if(eT(o)&&(t=oT(o,this,e,t)),!PT(t))return t}),r[1]=t,K_(mN,null,r)}})}if(!gN[cN]){var MN=gN.valueOf;Hj(gN,cN,(function(e){return oT(MN,this)}))}Yj(hN,"Symbol"),hj[lN]=!0,Wj("asyncIterator"),Wj("hasInstance"),Wj("isConcatSpreadable"),Wj("iterator"),Wj("match"),Wj("matchAll"),Wj("replace"),Wj("search"),Wj("species"),Wj("split"),Wj("toPrimitive"),Wj("toStringTag"),Wj("unscopables"),Yj(V_.JSON,"JSON",!0);var zN,$N,HN,VN=wT.Symbol,UN=Function.prototype,WN=nT&&Object.getOwnPropertyDescriptor,qN=UT(UN,"name"),GN={EXISTS:qN,PROPER:qN&&"something"===function(){}.name,CONFIGURABLE:qN&&(!nT||nT&&WN(UN,"name").configurable)},KN=!tT((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),YN=Cj("IE_PROTO"),XN=V_.Object,ZN=XN.prototype,JN=KN?XN.getPrototypeOf:function(e){var t=HT(e);if(UT(t,YN))return t[YN];var n=t.constructor;return eT(n)&&t instanceof n?n.prototype:t instanceof XN?ZN:null},QN=QT("iterator"),eI=!1;[].keys&&("next"in(HN=[].keys())?($N=JN(JN(HN)))!==Object.prototype&&(zN=$N):eI=!0);var tI=null==zN||tT((function(){var e={};return zN[QN].call(e)!==e}));zN=tI?{}:Tj(zN),eT(zN[QN])||Hj(zN,QN,(function(){return this}));var nI={IteratorPrototype:zN,BUGGY_SAFARI_ITERATORS:eI},rI=nI.IteratorPrototype;V_.String,V_.TypeError,Object.setPrototypeOf||"__proto__"in{}&&function(){var e={};try{Q_(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set)(e,[]),e instanceof Array}catch(t){}}();var oI=GN.PROPER,iI=nI.BUGGY_SAFARI_ITERATORS,aI=QT("iterator"),uI=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=Tj(rI,{next:lT(1,s)}),Yj(u,l,!1,!0);var c,f,d,p=function(e){if(e===o&&m)return m;if(!iI&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[aI]||v["@@iterator"]||o&&v[o],m=!iI&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=JN(b.call(new e)))!==Object.prototype&&c.next&&Yj(c,h,!0,!0),oI&&"values"==o&&y&&"values"!==y.name&&(g=!0,m=function(){return oT(y,this)}),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(iI||g||!(d in v))&&Hj(v,d,f[d]);else OP({target:t,proto:!0,forced:iI||g},f);return a&&v[aI]!==m&&Hj(v,aI,m,{name:o}),f},sI=iN.set,lI=iN.getterFor("Array Iterator");uI(Array,"Array",(function(e,t){sI(this,{type:"Array Iterator",target:mT(e),index:0,kind:t})}),(function(){var e=lI(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");var cI=QT("toStringTag");for(var fI in{CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}){var dI=V_[fI],pI=dI&&dI.prototype;pI&&zP(pI)!==cI&&xP(pI,cI,fI)}var hI=VN;Wj("asyncDispose"),Wj("dispose"),Wj("matcher"),Wj("metadata"),Wj("observable"),Wj("patternMatch"),Wj("replaceAll");var gI=hI,vI=Q_("".charAt),yI=Q_("".charCodeAt),mI=Q_("".slice),bI=function(e){return function(t,n){var r,o,i=sj(yT(t)),a=_P(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=yI(i,a))<55296||r>56319||a+1===u||(o=yI(i,a+1))<56320||o>57343?e?vI(i,a):r:e?mI(i,a,a+2):o-56320+(r-55296<<10)+65536}},wI=(bI(!1),bI(!0)),EI=iN.set,DI=iN.getterFor("String Iterator");uI(String,"String",(function(e){EI(this,{type:"String Iterator",string:sj(e),index:0})}),(function(){var e,t=DI(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=wI(n,r),t.index+=e.length,{value:e,done:!1})}));var CI=Vj.f("iterator"),xI=FC((function(e){function t(n){return"function"==typeof gI&&"symbol"==typeof CI?(e.exports=t=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=t=function(e){return e&&"function"==typeof gI&&e.constructor===gI&&e!==gI.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),t(n)}e.exports=t,e.exports.default=e.exports,e.exports.__esModule=!0})),SI=function(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}(xI),AI=SS.EXISTS,OI=nS.f,kI=Function.prototype,BI=KC(kI.toString),FI=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,_I=KC(FI.exec);IC&&!AI&&OI(kI,"name",{configurable:!0,get:function(){try{return _I(FI,BI(this))[1]}catch(eg){return""}}});var TI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("fontFamily.title"),t.iconSvg=oB,t.mark="fontFamily",t.selectPanelWidth=150,t}return Dk(t,e),t.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig(this.mark).fontFamilyList,r=void 0===n?[]:n;t.push({text:OC("fontFamily.default"),value:""}),r.forEach((function(e){if("string"==typeof e)t.push({text:e,value:e,styleForRenderMenuList:{"font-family":e}});else if("object"===SI(e)){var n=e.name,r=e.value;t.push({text:n,value:r,styleForRenderMenuList:{"font-family":r}})}}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},t}(z_),PI={renderStyle:function(e,t){var n=e,r=n.fontSize,o=n.fontFamily,i=t;return r&&pF(i,{fontSize:r}),o&&pF(i,{fontFamily:o}),i},styleToHtml:function(e,t){if(!$t.isText(e))return t;var n,r=e,o=r.fontSize,i=r.fontFamily;return o||i?((vk(t)||"span"!==mk(n=Fr(t)))&&(n=Fr("<span>"+t+"</span>")),o&&n.css("font-size",o),i&&n.css("font-family",i),yk(n)):t},preParseHtml:[I_],parseStyleHtml:function(e,t,n){var r=Fr(e);if(!$t.isText(t))return t;var o=t,i=n.getMenuConfig("fontSize").fontSizeList,a=void 0===i?[]:i,u=bk(r,"font-size");u&&a.includes(u)&&(o.fontSize=u);var s=n.getMenuConfig("fontFamily").fontFamilyList,l=void 0===s?[]:s,c=bk(r,"font-family");return c&&l.includes(c)&&(o.fontFamily=c),o},menus:[{key:"fontSize",factory:function(){return new $_},config:{fontSizeList:["12px","13px","14px","15px","16px","19px","22px","24px","29px","32px","40px","48px"]}},{key:"fontFamily",factory:function(){return new TI},config:{fontFamilyList:["黑体",{name:"仿宋",value:"仿宋"},"楷体","标楷体","华文仿宋","华文楷体",{name:"宋体",value:"宋体"},"微软雅黑","Arial","Tahoma","Verdana","Times New Roman","Courier New"]}}]},jI={selector:"p,h1,h2,h3,h4,h5",preParseHtml:function(e){var t=Fr(e),n=bk(t,"padding-left");return/\dem/.test(n)&&t.css("text-indent","2em"),/\dpx/.test(n)&&parseInt(n,10)%32==0&&t.css("text-indent","2em"),t[0]}},NI=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){var t=Ok(yt.nodes(e,{match:function(e){return!!e.indent},universal:!0}),1)[0];return null==t?"":Ok(t,1)[0].indent||""},e.prototype.isActive=function(e){return!1},e.prototype.getMatchNode=function(e){var t=Ok(yt.nodes(e,{match:function(e){var t=Wy.getNodeType(e);return"paragraph"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e}(),II=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("indent.decrease"),t.iconSvg=iB,t}return Dk(t,e),t.prototype.isDisabled=function(e){var t=this.getMatchNode(e);return null==t||!t.indent},t.prototype.exec=function(e,t){an.setNodes(e,{indent:null},{match:function(e){return ft.isElement(e)}})},t}(NI),RI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("indent.increase"),t.iconSvg=aB,t}return Dk(t,e),t.prototype.isDisabled=function(e){var t=this.getMatchNode(e);return null==t||!!t.indent},t.prototype.exec=function(e,t){an.setNodes(e,{indent:"2em"},{match:function(e){return ft.isElement(e)},mode:"highest"})},t}(NI),LI={renderStyle:function(e,t){if(!ft.isElement(e))return t;var n=e.indent,r=t;return n&&pF(r,{textIndent:n}),r},styleToHtml:function(e,t){if(!ft.isElement(e))return t;var n=e.indent;if(!n)return t;var r=Fr(t);return r.css("text-indent",n),yk(r)},preParseHtml:[jI],parseStyleHtml:function(e,t,n){var r=Fr(e);if(!ft.isElement(t))return t;var o=t,i=bk(r,"text-indent");return i&&(o.indent=i),o},menus:[{key:"indent",factory:function(){return new RI}},{key:"delIndent",factory:function(){return new II}}]},MI=function(){function e(){this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.getMatchNode=function(e){var t=Ok(yt.nodes(e,{match:function(e){var t=Wy.getNodeType(e);return"paragraph"===t||"blockquote"===t||!!t.startsWith("header")},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e.prototype.isDisabled=function(e){return null==e.selection||!!Wy.getSelectedElems(e).some((function(t){if(yt.isVoid(e,t)&&yt.isBlock(e,t))return!0;var n=t.type;return!!["pre","code"].includes(n)||void 0}))},e}(),zI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("justify.left"),t.iconSvg=uB,t}return Dk(t,e),t.prototype.exec=function(e,t){an.setNodes(e,{textAlign:"left"},{match:function(t){return ft.isElement(t)&&!e.isInline(t)}})},t}(MI),$I=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("justify.right"),t.iconSvg=sB,t}return Dk(t,e),t.prototype.exec=function(e,t){an.setNodes(e,{textAlign:"right"},{match:function(t){return ft.isElement(t)&&!e.isInline(t)}})},t}(MI),HI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("justify.center"),t.iconSvg=lB,t}return Dk(t,e),t.prototype.exec=function(e,t){an.setNodes(e,{textAlign:"center"},{match:function(t){return ft.isElement(t)&&!e.isInline(t)}})},t}(MI),VI=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.title=OC("justify.justify"),t.iconSvg=cB,t}return Dk(t,e),t.prototype.exec=function(e,t){an.setNodes(e,{textAlign:"justify"},{match:function(t){return ft.isElement(t)&&!e.isInline(t)}})},t}(MI),UI={renderStyle:function(e,t){if(!ft.isElement(e))return t;var n=e.textAlign,r=t;return n&&pF(r,{textAlign:n}),r},styleToHtml:function(e,t){if(!ft.isElement(e))return t;var n=e.textAlign;if(!n)return t;var r=Fr(t);return r.css("text-align",n),yk(r)},parseStyleHtml:function(e,t,n){var r=Fr(e);if(!ft.isElement(t))return t;var o=t,i=bk(r,"text-align");return i&&(o.textAlign=i),o},menus:[{key:"justifyLeft",factory:function(){return new zI}},{key:"justifyRight",factory:function(){return new $I}},{key:"justifyCenter",factory:function(){return new HI}},{key:"justifyJustify",factory:function(){return new VI}}]},WI=function(){function e(){this.title=OC("lineHeight.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M964 788a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526zM198.93 144.306c6.668-5.798 16.774-5.094 22.573 1.574l122.26 140.582a16 16 0 0 1 3.927 10.5c0 8.836-7.164 16-16 16h-61.8a8 8 0 0 0-8 8v390.077h69.819a16 16 0 0 1 10.502 3.928c6.666 5.8 7.37 15.906 1.57 22.573L221.476 878.123a16 16 0 0 1-1.57 1.57c-6.668 5.8-16.774 5.097-22.574-1.57L75.051 737.538a16 16 0 0 1-3.928-10.5c0-8.837 7.163-16 16-16h69.822V312.96H87.127a16 16 0 0 1-10.502-3.928c-6.666-5.8-7.37-15.906-1.57-22.573l122.303-140.582a16 16 0 0 1 1.572-1.572zM964 465a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z m0-323a8 8 0 0 1 8 8v98a8 8 0 0 1-8 8H438a8 8 0 0 1-8-8v-98a8 8 0 0 1 8-8h526z"></path></svg>',this.tag="select",this.width=80}return e.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig("lineHeight").lineHeightList,r=void 0===n?[]:n;t.push({text:OC("lineHeight.default"),value:""}),r.forEach((function(e){t.push({text:e,value:e})}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},e.prototype.getMatchNode=function(e){var t=Ok(yt.nodes(e,{match:function(e){var t=Wy.getNodeType(e);return!!t.startsWith("header")||!!["paragraph","blockquote","bulleted-list","numbered-list"].includes(t)},universal:!0,mode:"highest"}),1)[0];return null==t?null:t[0]},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.getMatchNode(e);return null==t?"":ft.isElement(t)&&t.lineHeight||""},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getMatchNode(e)},e.prototype.exec=function(e,t){an.setNodes(e,{lineHeight:t.toString()},{mode:"highest"})},e}(),qI={renderStyle:function(e,t){if(!ft.isElement(e))return t;var n=e.lineHeight,r=t;return n&&pF(r,{lineHeight:n}),r},styleToHtml:function(e,t){if(!ft.isElement(e))return t;var n=e.lineHeight;if(!n)return t;var r=Fr(t);return r.css("line-height",n),yk(r)},parseStyleHtml:function(e,t,n){var r=Fr(e);if(!ft.isElement(t))return t;var o=t,i=n.getMenuConfig("lineHeight").lineHeightList,a=void 0===i?[]:i,u=bk(r,"line-height");return u&&a.includes(u)&&(o.lineHeight=u),o},menus:[{key:"lineHeight",factory:function(){return new WI},config:{lineHeightList:["1","1.15","1.5","2","2.5","3"]}}]},GI=function(){function e(){this.title=OC("undo.redo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M0.00032 576a510.72 510.72 0 0 0 173.344 384l84.672-96A383.136 383.136 0 0 1 128.00032 576C128.00032 363.936 299.93632 192 512.00032 192c106.048 0 202.048 42.976 271.52 112.48L640.00032 448h384V64l-149.984 149.984A510.272 510.272 0 0 0 512.00032 64C229.21632 64 0.00032 293.216 0.00032 576z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection},e.prototype.exec=function(e,t){"function"==typeof e.redo&&e.redo()},e}(),KI=function(){function e(){this.title=OC("undo.undo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M512 64A510.272 510.272 0 0 0 149.984 213.984L0.032 64v384h384L240.512 304.48A382.784 382.784 0 0 1 512.032 192c212.064 0 384 171.936 384 384 0 114.688-50.304 217.632-130.016 288l84.672 96a510.72 510.72 0 0 0 173.344-384c0-282.784-229.216-512-512-512z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection},e.prototype.exec=function(e,t){"function"==typeof e.undo&&e.undo()},e}(),YI={menus:[{key:"redo",factory:function(){return new GI}},{key:"undo",factory:function(){return new KI}}]},XI={type:"divider",renderElem:function(e,t,n){return ii("div",{props:{contentEditable:!1,className:"w-e-textarea-divider"},dataset:{selected:Wy.isNodeSelected(n,e)?"true":""},style:{},on:{mousedown:function(e){return e.preventDefault()}}},[ii("hr")])}},ZI=function(){function e(){this.title=OC("divider.title"),this.iconSvg='<svg viewBox="0 0 1092 1024"><path d="M0 51.2m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M819.2 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M409.6 460.8m51.2 0l170.666667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-170.666667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path><path d="M0 870.4m51.2 0l989.866667 0q51.2 0 51.2 51.2l0 0q0 51.2-51.2 51.2l-989.866667 0q-51.2 0-51.2-51.2l0 0q0-51.2 51.2-51.2Z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||!!Wy.getSelectedElems(e).some((function(t){if(e.isVoid(t))return!0;var n=Wy.getNodeType(t);return"table"===n||"pre"===n||void 0}))},e.prototype.exec=function(e,t){an.insertNodes(e,{type:"divider",children:[{text:""}]},{mode:"highest"})},e}(),JI={renderElems:[XI],elemsToHtml:[{type:"divider",elemToHtml:function(e,t){return"<hr/>"}}],parseElemsHtml:[{selector:"hr",parseElemHtml:function(e,t,n){return{type:"divider",children:[{text:""}]}}}],menus:[{key:"divider",factory:function(){return new ZI}}],editorPlugin:function(e){var t=e.isVoid,n=e.normalizeNode,r=e;return r.isVoid=function(e){return"divider"===e.type||t(e)},r.normalizeNode=function(e){var t=Ok(e,2),o=t[0],i=t[1];if("divider"!==Wy.getNodeType(o))return n([o,i]);Wy.isLastNode(r,o)&&an.insertNodes(r,Wy.genEmptyParagraph(),{at:[i[0]+1]})},r}},QI=xA.map;nA({target:"Array",proto:!0,forced:!AA("map")},{map:function(e){return QI(this,e,arguments.length>1?arguments[1]:void 0)}});var eR=KC([].join),tR=ex!=Object,nR=zk("join",",");nA({target:"Array",proto:!0,forced:tR||!nR},{join:function(e){return eR(rx(this),void 0===e?",":e)}});var rR=function(){function e(){this.title=OC("codeBlock.title"),this.iconSvg='<svg viewBox="0 0 1280 1024"><path d="M832 736l96 96 320-320L928 192l-96 96 224 224zM448 288l-96-96L32 512l320 320 96-96-224-224zM701.312 150.528l69.472 18.944-192 704.032-69.472-18.944 192-704.032z"></path></svg>',this.tag="button"}return e.prototype.getSelectCodeElem=function(e){var t=Wy.getSelectedNodeByType(e,"code");if(null==t)return null;var n=Wy.getParentNode(e,t);return null==n||"pre"!==Wy.getNodeType(n)?null:t},e.prototype.getValue=function(e){var t=this.getSelectCodeElem(e);return null==t?"":t.language||""},e.prototype.isActive=function(e){return!!this.getSelectCodeElem(e)},e.prototype.isDisabled=function(e){if(null==e.selection)return!0;var t=Wy.getSelectedElems(e);return!!t.some((function(t){return e.isVoid(t)}))||!t.some((function(e){var t=Wy.getNodeType(e);if("pre"===t||"paragraph"===t)return!0}))},e.prototype.exec=function(e,t){this.isActive(e)?this.changeToPlainText(e):this.changeToCodeBlock(e,t.toString())},e.prototype.changeToPlainText=function(e){var t=this.getSelectCodeElem(e);if(null!=t){var n=Dt.string(t);an.removeNodes(e,{mode:"highest"});var r=n.split("\n").map((function(e){return{type:"paragraph",children:[{text:e}]}}));an.insertNodes(e,r,{mode:"highest"})}},e.prototype.changeToCodeBlock=function(e,t){var n,r,o=[],i=yt.nodes(e,{match:function(t){return e.children.includes(t)},universal:!0});try{for(var a=Ak(i),u=a.next();!u.done;u=a.next()){var s=Ok(u.value,1)[0];s&&o.push(Dt.string(s))}}catch(c){n={error:c}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}an.removeNodes(e,{mode:"highest"});var l={type:"pre",children:[{type:"code",language:t,children:[{text:o.join("\n")}]}]};an.insertNodes(e,l,{mode:"highest"})},e}(),oR={key:"codeBlock",factory:function(){return new rR}};nA({target:"String",proto:!0,forced:Pk("anchor")},{anchor:function(e){return Tk(this,"a","name",e)}}),yO("match",(function(e,t,n){return[function(t){var n=nx(this),r=null==t?void 0:Cx(t,e);return r?LC(r,t,n):new RegExp(t)[e](_A(n))},function(e){var r=Qx(this),o=_A(e),i=n(t,r,o);if(i.done)return i.value;if(!r.global)return TO(r,o);var a=r.unicode;r.lastIndex=0;for(var u,s=[],l=0;null!==(u=TO(r,o));){var c=_A(u[0]);s[l]=c,""===c&&(r.lastIndex=CO(o,jS(r.lastIndex),a)),l++}return 0===l?null:s}]}));var iR={type:"pre",renderElem:function(e,t,n){return Ci("pre",null,t)}},aR={type:"code",renderElem:function(e,t,n){return Ci("code",null,t)}},uR={selector:"pre",parseElemHtml:function(e,t,n){var r=Fr(e);return 0===(t=t.filter((function(e){return"code"===Wy.getNodeType(e)}))).length&&(t=[{type:"code",language:"",children:[{text:r[0].textContent||""}]}]),{type:"pre",children:t.filter((function(e){return"code"===Wy.getNodeType(e)}))}}},sR={menus:[oR],editorPlugin:function(e){var t=e.insertBreak,n=e.normalizeNode,r=e.insertData;e.insertNode;var o=e;return o.insertBreak=function(){var e=Wy.getSelectedNodeByType(o,"code");if(null!=e){var n=function(e,t){var n=t.selection;if(null==n)return"";var r=Dt.string(e),o=n.anchor.offset,i=r.slice(0,o).split("\n"),a=i.length;return 0===a?"":i[a-1]}(e,o);if(n){var r=n.match(/^\s+/);if(null!=r&&null!=r[0]){var i=r[0];return void o.insertText("\n"+i)}}o.insertText("\n")}else t()},o.normalizeNode=function(e){var t=Ok(e,2),r=t[0],i=t[1],a=Wy.getNodeType(r);return"code"===a&&i.length<=1&&an.setNodes(o,{type:"paragraph"},{at:i}),"pre"===a&&(Wy.isLastNode(o,r)&&an.insertNodes(o,Wy.genEmptyParagraph(),{at:[i[0]+1]}),"code"!==Wy.getNodeType(r.children[0])&&(an.unwrapNodes(o),an.setNodes(o,{type:"paragraph"},{mode:"highest"}))),n([r,i])},o.insertData=function(e){if(null!=Wy.getSelectedNodeByType(o,"code")){var t=e.getData("text/plain");yt.insertText(o,t)}else r(e)},o},renderElems:[iR,aR],elemsToHtml:[{type:"code",elemToHtml:function(e,t){return"<code>"+t+"</code>"}},{type:"pre",elemToHtml:function(e,t){return"<pre>"+t+"</pre>"}}],preParseHtml:[{selector:"pre>code",preParseHtml:function(e){var t=Fr(e);if("code"!==mk(t))return e;var n=t.find("xmp");if(0===n.length)return e;var r=n.text();return n.remove(),t.text(r),t[0]}}],parseElemsHtml:[{selector:"pre>code",parseElemHtml:function(e,t,n){return{type:"code",language:"",children:[{text:Fr(e)[0].textContent||""}]}}},uR]},lR=function(){function e(){this.title=OC("fullScreen.title"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M133.705143 335.433143V133.851429h201.581714a29.622857 29.622857 0 0 0 29.622857-29.549715V68.754286a29.622857 29.622857 0 0 0-29.622857-29.622857H61.732571A22.893714 22.893714 0 0 0 38.765714 62.025143V335.725714c0 16.310857 13.238857 29.622857 29.622857 29.622857h35.547429a29.842286 29.842286 0 0 0 29.696-29.842285zM690.980571 133.851429h201.581715v201.654857c0 16.310857 13.238857 29.549714 29.622857 29.549714h35.547428a29.622857 29.622857 0 0 0 29.549715-29.549714V61.952a22.893714 22.893714 0 0 0-22.820572-22.893714h-273.554285a29.622857 29.622857 0 0 0-29.549715 29.622857v35.547428c0 16.310857 13.238857 29.696 29.622857 29.696zM335.286857 892.781714H133.705143V691.2a29.622857 29.622857 0 0 0-29.622857-29.622857H68.534857a29.622857 29.622857 0 0 0-29.549714 29.622857v273.554286c0 12.653714 10.24 22.893714 22.820571 22.893714h273.554286a29.622857 29.622857 0 0 0 29.696-29.622857v-35.547429a29.769143 29.769143 0 0 0-29.769143-29.696z m557.348572-201.581714v201.581714H690.907429a29.622857 29.622857 0 0 0-29.622858 29.622857v35.547429c0 16.310857 13.238857 29.622857 29.622858 29.622857h273.554285c12.580571 0 22.893714-10.313143 22.893715-22.893714V691.2a29.622857 29.622857 0 0 0-29.622858-29.622857h-35.547428a29.622857 29.622857 0 0 0-29.696 29.622857z"></path></svg>',this.tag="button",this.alwaysEnable=!0}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return e.isFullScreen},e.prototype.isDisabled=function(e){return!1},e.prototype.exec=function(e,t){e.isFullScreen?e.unFullScreen():e.fullScreen()},e}(),cR={menus:[{key:"fullScreen",factory:function(){return new lR}}]},fR=function(){function e(){this.title=OC("common.enter"),this.iconSvg='<svg viewBox="0 0 1255 1024"><path d="M1095.111111 731.477333h-625.777778V1024L0 658.318222 469.333333 292.408889v292.636444h625.777778V0h156.444445v731.477333z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!!jt.isExpanded(t)},e.prototype.exec=function(e,t){var n=e.selection;if(null!=n){var r=[n.anchor.path[0]];an.insertNodes(e,{type:"paragraph",children:[{text:""}]},{at:r}),e.select(yt.start(e,r))}},e}(),dR=[EB,bF,PI,LI,UI,qI,m_,JI,j_,zF,sR,T_,sF,Bk,D_,YI,cR,{menus:[{key:"enter",factory:function(){return new fR}}]}];AC("en",{listModule:{unOrderedList:"Unordered list",orderedList:"Ordered list"}}),AC("zh-CN",{listModule:{unOrderedList:"无序列表",orderedList:"有序列表"}});var pR="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function hR(e){var t={exports:{}};return e(t,t.exports),t.exports}var gR,vR,yR=function(e){return e&&e.Math==Math&&e},mR=yR("object"==typeof globalThis&&globalThis)||yR("object"==typeof window&&window)||yR("object"==typeof self&&self)||yR("object"==typeof pR&&pR)||function(){return this}()||Function("return this")(),bR=function(e){try{return!!e()}catch(t){return!0}},wR=!bR((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),ER=Function.prototype.call,DR=ER.bind?ER.bind(ER):function(){return ER.apply(ER,arguments)},CR={}.propertyIsEnumerable,xR=Object.getOwnPropertyDescriptor,SR={f:xR&&!CR.call({1:2},1)?function(e){var t=xR(this,e);return!!t&&t.enumerable}:CR},AR=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},OR=Function.prototype,kR=OR.bind,BR=OR.call,FR=kR&&kR.bind(BR),_R=kR?function(e){return e&&FR(BR,e)}:function(e){return e&&function(){return BR.apply(e,arguments)}},TR=_R({}.toString),PR=_R("".slice),jR=function(e){return PR(TR(e),8,-1)},NR=mR.Object,IR=_R("".split),RR=bR((function(){return!NR("z").propertyIsEnumerable(0)}))?function(e){return"String"==jR(e)?IR(e,""):NR(e)}:NR,LR=mR.TypeError,MR=function(e){if(null==e)throw LR("Can't call method on "+e);return e},zR=function(e){return RR(MR(e))},$R=function(e){return"function"==typeof e},HR=function(e){return"object"==typeof e?null!==e:$R(e)},VR=function(e){return $R(e)?e:void 0},UR=function(e,t){return arguments.length<2?VR(mR[e]):mR[e]&&mR[e][t]},WR=_R({}.isPrototypeOf),qR=UR("navigator","userAgent")||"",GR=mR.process,KR=mR.Deno,YR=GR&&GR.versions||KR&&KR.version,XR=YR&&YR.v8;XR&&(vR=(gR=XR.split("."))[0]>0&&gR[0]<4?1:+(gR[0]+gR[1])),!vR&&qR&&(!(gR=qR.match(/Edge\/(\d+)/))||gR[1]>=74)&&(gR=qR.match(/Chrome\/(\d+)/))&&(vR=+gR[1]);var ZR=vR,JR=!!Object.getOwnPropertySymbols&&!bR((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&ZR&&ZR<41})),QR=JR&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,eL=mR.Object,tL=QR?function(e){return"symbol"==typeof e}:function(e){var t=UR("Symbol");return $R(t)&&WR(t.prototype,eL(e))},nL=mR.String,rL=mR.TypeError,oL=function(e){if($R(e))return e;throw rL(function(e){try{return nL(e)}catch(t){return"Object"}}(e)+" is not a function")},iL=function(e,t){var n=e[t];return null==n?void 0:oL(n)},aL=mR.TypeError,uL=Object.defineProperty,sL=function(e,t){try{uL(mR,e,{value:t,configurable:!0,writable:!0})}catch(n){mR[e]=t}return t},lL=mR["__core-js_shared__"]||sL("__core-js_shared__",{}),cL=hR((function(e){(e.exports=function(e,t){return lL[e]||(lL[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),fL=mR.Object,dL=function(e){return fL(MR(e))},pL=_R({}.hasOwnProperty),hL=Object.hasOwn||function(e,t){return pL(dL(e),t)},gL=0,vL=Math.random(),yL=_R(1..toString),mL=function(e){return"Symbol("+(void 0===e?"":e)+")_"+yL(++gL+vL,36)},bL=cL("wks"),wL=mR.Symbol,EL=wL&&wL.for,DL=QR?wL:wL&&wL.withoutSetter||mL,CL=function(e){if(!hL(bL,e)||!JR&&"string"!=typeof bL[e]){var t="Symbol."+e;JR&&hL(wL,e)?bL[e]=wL[e]:bL[e]=QR&&EL?EL(t):DL(t)}return bL[e]},xL=mR.TypeError,SL=CL("toPrimitive"),AL=function(e){var t=function(e,t){if(!HR(e)||tL(e))return e;var n,r=iL(e,SL);if(r){if(void 0===t&&(t="default"),n=DR(r,e,t),!HR(n)||tL(n))return n;throw xL("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&$R(n=e.toString)&&!HR(r=DR(n,e)))return r;if($R(n=e.valueOf)&&!HR(r=DR(n,e)))return r;if("string"!==t&&$R(n=e.toString)&&!HR(r=DR(n,e)))return r;throw aL("Can't convert object to primitive value")}(e,t)}(e,"string");return tL(t)?t:t+""},OL=mR.document,kL=HR(OL)&&HR(OL.createElement),BL=function(e){return kL?OL.createElement(e):{}},FL=!wR&&!bR((function(){return 7!=Object.defineProperty(BL("div"),"a",{get:function(){return 7}}).a})),_L=Object.getOwnPropertyDescriptor,TL={f:wR?_L:function(e,t){if(e=zR(e),t=AL(t),FL)try{return _L(e,t)}catch(n){}if(hL(e,t))return AR(!DR(SR.f,e,t),e[t])}},PL=mR.String,jL=mR.TypeError,NL=function(e){if(HR(e))return e;throw jL(PL(e)+" is not an object")},IL=mR.TypeError,RL=Object.defineProperty,LL={f:wR?RL:function(e,t,n){if(NL(e),t=AL(t),NL(n),FL)try{return RL(e,t,n)}catch(r){}if("get"in n||"set"in n)throw IL("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},ML=wR?function(e,t,n){return LL.f(e,t,AR(1,n))}:function(e,t,n){return e[t]=n,e},zL=_R(Function.toString);$R(lL.inspectSource)||(lL.inspectSource=function(e){return zL(e)});var $L,HL,VL,UL=lL.inspectSource,WL=mR.WeakMap,qL=$R(WL)&&/native code/.test(UL(WL)),GL=cL("keys"),KL=function(e){return GL[e]||(GL[e]=mL(e))},YL={},XL=mR.TypeError,ZL=mR.WeakMap;if(qL||lL.state){var JL=lL.state||(lL.state=new ZL),QL=_R(JL.get),eM=_R(JL.has),tM=_R(JL.set);$L=function(e,t){if(eM(JL,e))throw new XL("Object already initialized");return t.facade=e,tM(JL,e,t),t},HL=function(e){return QL(JL,e)||{}},VL=function(e){return eM(JL,e)}}else{var nM=KL("state");YL[nM]=!0,$L=function(e,t){if(hL(e,nM))throw new XL("Object already initialized");return t.facade=e,ML(e,nM,t),t},HL=function(e){return hL(e,nM)?e[nM]:{}},VL=function(e){return hL(e,nM)}}var rM,oM={set:$L,get:HL,has:VL,enforce:function(e){return VL(e)?HL(e):$L(e,{})},getterFor:function(e){return function(t){var n;if(!HR(t)||(n=HL(t)).type!==e)throw XL("Incompatible receiver, "+e+" required");return n}}},iM=Function.prototype,aM=wR&&Object.getOwnPropertyDescriptor,uM=hL(iM,"name"),sM={EXISTS:uM,PROPER:uM&&"something"===function(){}.name,CONFIGURABLE:uM&&(!wR||wR&&aM(iM,"name").configurable)},lM=hR((function(e){var t=sM.CONFIGURABLE,n=oM.get,r=oM.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;$R(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!hL(i,"name")||t&&i.name!==f)&&ML(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==mR?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:ML(e,n,i)):l?e[n]=i:sL(n,i)})(Function.prototype,"toString",(function(){return $R(this)&&n(this).source||UL(this)}))})),cM=Math.ceil,fM=Math.floor,dM=function(e){var t=+e;return t!=t||0===t?0:(t>0?fM:cM)(t)},pM=Math.max,hM=Math.min,gM=Math.min,vM=function(e){return e>0?gM(dM(e),9007199254740991):0},yM=function(e){return vM(e.length)},mM=function(e){return function(t,n,r){var o,i,a,u=zR(t),s=yM(u),l=(i=s,(a=dM(r))<0?pM(a+i,0):hM(a,i));if(e&&n!=n){for(;s>l;)if((o=u[l++])!=o)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}},bM={includes:mM(!0),indexOf:mM(!1)},wM=bM.indexOf,EM=_R([].push),DM=function(e,t){var n,r=zR(e),o=0,i=[];for(n in r)!hL(YL,n)&&hL(r,n)&&EM(i,n);for(;t.length>o;)hL(r,n=t[o++])&&(~wM(i,n)||EM(i,n));return i},CM=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],xM=CM.concat("length","prototype"),SM={f:Object.getOwnPropertyNames||function(e){return DM(e,xM)}},AM={f:Object.getOwnPropertySymbols},OM=_R([].concat),kM=UR("Reflect","ownKeys")||function(e){var t=SM.f(NL(e)),n=AM.f;return n?OM(t,n(e)):t},BM=function(e,t){for(var n=kM(t),r=LL.f,o=TL.f,i=0;i<n.length;i++){var a=n[i];hL(e,a)||r(e,a,o(t,a))}},FM=/#|\.prototype\./,_M=function(e,t){var n=PM[TM(e)];return n==NM||n!=jM&&($R(t)?bR(t):!!t)},TM=_M.normalize=function(e){return String(e).replace(FM,".").toLowerCase()},PM=_M.data={},jM=_M.NATIVE="N",NM=_M.POLYFILL="P",IM=_M,RM=TL.f,LM=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?mR:l?mR[u]||sL(u,{}):(mR[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=RM(n,r))&&a.value:n[r],!IM(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;BM(i,o)}(e.sham||o&&o.sham)&&ML(i,"sham",!0),lM(n,r,i,e)}},MM=Object.keys||function(e){return DM(e,CM)},zM=wR?Object.defineProperties:function(e,t){NL(e);for(var n,r=zR(t),o=MM(t),i=o.length,a=0;i>a;)LL.f(e,n=o[a++],r[n]);return e},$M=UR("document","documentElement"),HM=KL("IE_PROTO"),VM=function(){},UM=function(e){return"<script>"+e+"<\/script>"},WM=function(e){e.write(UM("")),e.close();var t=e.parentWindow.Object;return e=null,t},qM=function(){try{rM=new ActiveXObject("htmlfile")}catch(r){}var e,t;qM="undefined"!=typeof document?document.domain&&rM?WM(rM):((t=BL("iframe")).style.display="none",$M.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(UM("document.F=Object")),e.close(),e.F):WM(rM);for(var n=CM.length;n--;)delete qM.prototype[CM[n]];return qM()};YL[HM]=!0;var GM=Object.create||function(e,t){var n;return null!==e?(VM.prototype=NL(e),n=new VM,VM.prototype=null,n[HM]=e):n=qM(),void 0===t?n:zM(n,t)},KM=CL("unscopables"),YM=Array.prototype;null==YM[KM]&&LL.f(YM,KM,{configurable:!0,value:GM(null)});var XM=bM.includes;function ZM(e){if("bulleted-list"===e)return"ul";if("numbered-list"===e)return"ol";if("list-item"===e)return"li";throw new Error("list type '"+e+"' is invalid")}function JM(e){var t=Wy.getNodeType(e);return["bulleted-list","numbered-list"].includes(t)}function QM(e){return function(t,n,r){return Ci(ZM(e),null,n)}}LM({target:"Array",proto:!0},{includes:function(e){return XM(this,e,arguments.length>1?arguments[1]:void 0)}}),YM[KM].includes=!0;var ez={type:"bulleted-list",renderElem:QM("bulleted-list")},tz={type:"numbered-list",renderElem:QM("numbered-list")},nz={type:"list-item",renderElem:QM("list-item")};function rz(e){var t=ZM(e);return function(e,n){return"<"+t+">"+n+"</"+t+">"}}var oz={type:"bulleted-list",elemToHtml:rz("bulleted-list")},iz={type:"numbered-list",elemToHtml:rz("numbered-list")},az={type:"list-item",elemToHtml:rz("list-item")},uz=_R(_R.bind),sz=Array.isArray||function(e){return"Array"==jR(e)},lz={};lz[CL("toStringTag")]="z";var cz="[object z]"===String(lz),fz=CL("toStringTag"),dz=mR.Object,pz="Arguments"==jR(function(){return arguments}()),hz=cz?jR:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=dz(e),fz))?n:pz?jR(t):"Object"==(r=jR(t))&&$R(t.callee)?"Arguments":r},gz=function(){},vz=[],yz=UR("Reflect","construct"),mz=/^\s*(?:class|function)\b/,bz=_R(mz.exec),wz=!mz.exec(gz),Ez=function(e){if(!$R(e))return!1;try{return yz(gz,vz,e),!0}catch(t){return!1}},Dz=!yz||bR((function(){var e;return Ez(Ez.call)||!Ez(Object)||!Ez((function(){e=!0}))||e}))?function(e){if(!$R(e))return!1;switch(hz(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return wz||!!bz(mz,UL(e))}:Ez,Cz=CL("species"),xz=mR.Array,Sz=function(e,t){return new(sz(n=e)&&(r=n.constructor,(Dz(r)&&(r===xz||sz(r.prototype))||HR(r)&&null===(r=r[Cz]))&&(r=void 0)),void 0===r?xz:r)(0===t?0:t);var n,r},Az=_R([].push),Oz=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=dL(s),g=RR(h),v=function(e,t){return oL(e),void 0===t?e:uz?uz(e,t):function(){return e.apply(t,arguments)}}(l,c),y=yM(g),m=0,b=f||Sz,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:Az(w,d)}else switch(e){case 4:return!1;case 7:Az(w,d)}return i?-1:r||o?o:w}},kz={forEach:Oz(0),map:Oz(1),filter:Oz(2),some:Oz(3),every:Oz(4),find:Oz(5),findIndex:Oz(6),filterReject:Oz(7)},Bz=CL("species"),Fz=function(e){return ZR>=51||!bR((function(){var t=[];return(t.constructor={})[Bz]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},_z=kz.filter;LM({target:"Array",proto:!0,forced:!Fz("filter")},{filter:function(e){return _z(this,e,arguments.length>1?arguments[1]:void 0)}});var Tz=cz?{}.toString:function(){return"[object "+hz(this)+"]"};cz||lM(Object.prototype,"toString",Tz,{unsafe:!0});var Pz,jz,Nz=mR.String,Iz=function(e){if("Symbol"===hz(e))throw TypeError("Cannot convert a Symbol value to a string");return Nz(e)},Rz=function(){var e=NL(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},Lz=mR.RegExp,Mz=bR((function(){var e=Lz("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),zz=Mz||bR((function(){return!Lz("a","y").sticky})),$z={BROKEN_CARET:Mz||bR((function(){var e=Lz("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:zz,UNSUPPORTED_Y:Mz},Hz=mR.RegExp,Vz=bR((function(){var e=Hz(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),Uz=mR.RegExp,Wz=bR((function(){var e=Uz("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),qz=oM.get,Gz=cL("native-string-replace",String.prototype.replace),Kz=RegExp.prototype.exec,Yz=Kz,Xz=_R("".charAt),Zz=_R("".indexOf),Jz=_R("".replace),Qz=_R("".slice),e$=(jz=/b*/g,DR(Kz,Pz=/a/,"a"),DR(Kz,jz,"a"),0!==Pz.lastIndex||0!==jz.lastIndex),t$=$z.BROKEN_CARET,n$=void 0!==/()??/.exec("")[1];(e$||n$||t$||Vz||Wz)&&(Yz=function(e){var t,n,r,o,i,a,u,s=this,l=qz(s),c=Iz(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=DR(Yz,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=t$&&s.sticky,h=DR(Rz,s),g=s.source,v=0,y=c;if(p&&(h=Jz(h,"y",""),-1===Zz(h,"g")&&(h+="g"),y=Qz(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==Xz(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),n$&&(n=new RegExp("^"+g+"$(?!\\s)",h)),e$&&(r=s.lastIndex),o=DR(Kz,p?n:s,y),p?o?(o.input=Qz(o.input,v),o[0]=Qz(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:e$&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),n$&&o&&o.length>1&&DR(Gz,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=GM(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var r$=Yz;LM({target:"RegExp",proto:!0,forced:/./.exec!==r$},{exec:r$});var o$=Function.prototype,i$=o$.apply,a$=o$.bind,u$=o$.call,s$="object"==typeof Reflect&&Reflect.apply||(a$?u$.bind(i$):function(){return u$.apply(i$,arguments)}),l$=(CL("species"),RegExp.prototype),c$=_R("".charAt),f$=_R("".charCodeAt),d$=_R("".slice),p$=function(e){return function(t,n){var r,o,i=Iz(MR(t)),a=dM(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=f$(i,a))<55296||r>56319||a+1===u||(o=f$(i,a+1))<56320||o>57343?e?c$(i,a):r:e?d$(i,a,a+2):o-56320+(r-55296<<10)+65536}},h$=(p$(!1),p$(!0)),g$=function(e,t,n){return t+(n?h$(e,t).length:1)},v$=Math.floor,y$=_R("".charAt),m$=_R("".replace),b$=_R("".slice),w$=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,E$=/\$([$&'`]|\d{1,2})/g,D$=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=E$;return void 0!==o&&(o=dL(o),s=w$),m$(i,s,(function(i,s){var l;switch(y$(s,0)){case"$":return"$";case"&":return e;case"`":return b$(t,0,n);case"'":return b$(t,a);case"<":l=o[b$(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=v$(c/10);return 0===f?i:f<=u?void 0===r[f-1]?y$(s,1):r[f-1]+y$(s,1):i}l=r[c-1]}return void 0===l?"":l}))},C$=mR.TypeError,x$=function(e,t){var n=e.exec;if($R(n)){var r=DR(n,e,t);return null!==r&&NL(r),r}if("RegExp"===jR(e))return DR(r$,e,t);throw C$("RegExp#exec called on incompatible receiver")},S$=CL("replace"),A$=Math.max,O$=Math.min,k$=_R([].concat),B$=_R([].push),F$=_R("".indexOf),_$=_R("".slice),T$="$0"==="a".replace(/./,"$0"),P$=!!/./[S$]&&""===/./[S$]("a","$0");!function(e,t,n,r){var o=CL(e),i=!bR((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!bR((function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=_R(/./[o]),s=function(e,t,n){var r=P$?"$":"$0";return[function(e,n){var r=MR(this),o=null==e?void 0:iL(e,S$);return o?DR(o,e,r,n):DR(t,Iz(r),e,n)},function(e,o){var i=NL(this),a=Iz(e);if("string"==typeof o&&-1===F$(o,r)&&-1===F$(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=$R(o);s||(o=Iz(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=x$(i,a);if(null===d)break;if(B$(f,d),!l)break;""===Iz(d[0])&&(i.lastIndex=g$(a,vM(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=Iz((d=f[v])[0]),m=A$(O$(dM(d.index),a.length),0),b=[],w=1;w<d.length;w++)B$(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=k$([y],b,m,a);void 0!==E&&B$(D,E);var C=Iz(s$(o,void 0,D))}else C=D$(y,a,m,b,E,o);m>=g&&(h+=_$(a,g,m)+C,g=m+y.length)}return h+_$(a,g)}]}(0,""[e],(function(e,t,n,r,o){var a=_R(e),s=t.exec;return s===r$||s===l$.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));lM(String.prototype,e,s[0]),lM(l$,o,s[1])}}("replace",0,!!bR((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!T$||P$),LM({global:!0},{globalThis:mR});var j$={selector:"li",parseElemHtml:function(e,t,n){var r=Fr(e);return 0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]),{type:"list-item",children:t}}},N$={selector:"ul",parseElemHtml:function(e,t,n){return{type:"bulleted-list",children:t.filter((function(e){return"list-item"===Wy.getNodeType(e)}))}}},I$={selector:"ol",parseElemHtml:function(e,t,n){return{type:"numbered-list",children:t.filter((function(e){return"list-item"===Wy.getNodeType(e)}))}}},R$=function(e,t){return(R$=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function L$(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}R$(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function M$(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}var z$=function(){function e(){this.tag="button"}return e.prototype.getListNode=function(e){var t=this.type;return Wy.getSelectedNodeByType(e,t)},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!!this.getListNode(e)},e.prototype.isDisabled=function(e){return null==e.selection||!!Wy.getSelectedElems(e).some((function(t){if(yt.isVoid(e,t)&&yt.isBlock(e,t))return!0;var n=t.type;return!!["pre","code","table"].includes(n)||void 0}))},e.prototype.getMatchListType=function(e){var t=M$(yt.nodes(e,{match:function(e){return JM(e)},universal:!0}),1)[0];if(null==t)return"";var n=M$(t,1)[0];return Wy.getNodeType(n)},e.prototype.exec=function(e,t){var n=this.type,r=this.isActive(e);an.unwrapNodes(e,{match:function(e){return JM(e)},split:!0}),an.setNodes(e,{type:r?"paragraph":"list-item"});var o={type:n,children:[]};r||an.wrapNodes(e,o);var i=this.getMatchListType(e);""!=i&&i!==n&&an.wrapNodes(e,o)},e}(),$$='<svg viewBox="0 0 1024 1024"><path d="M384 64h640v128H384V64z m0 384h640v128H384v-128z m0 384h640v128H384v-128zM0 128a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z m0 384a128 128 0 1 1 256 0 128 128 0 0 1-256 0z"></path></svg>',H$='<svg viewBox="0 0 1024 1024"><path d="M384 832h640v128H384z m0-384h640v128H384z m0-384h640v128H384zM192 0v256H128V64H64V0zM128 526.016v50.016h128v64H64v-146.016l128-60V384H64v-64h192v146.016zM256 704v320H64v-64h128v-64H64v-64h128v-64H64v-64z"></path></svg>',V$=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="bulleted-list",t.title=OC("listModule.unOrderedList"),t.iconSvg=$$,t}return L$(t,e),t}(z$),U$=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="numbered-list",t.title=OC("listModule.orderedList"),t.iconSvg=H$,t}return L$(t,e),t}(z$),W$={key:"bulletedList",factory:function(){return new V$}},q$={key:"numberedList",factory:function(){return new U$}},G$=/"/g,K$=_R("".replace);LM({target:"String",proto:!0,forced:("anchor",bR((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3})))},{anchor:function(e){return"a","name",t=e,n=Iz(MR(this)),r="<a",(r+=' name="'+K$(Iz(t),G$,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var Y$=function(e,t,n){var r=AL(t);r in e?LL.f(e,r,AR(0,n)):e[r]=n},X$=CL("isConcatSpreadable"),Z$=mR.TypeError,J$=ZR>=51||!bR((function(){var e=[];return e[X$]=!1,e.concat()[0]!==e})),Q$=Fz("concat"),eH=function(e){if(!HR(e))return!1;var t=e[X$];return void 0!==t?!!t:sz(e)};LM({target:"Array",proto:!0,forced:!J$||!Q$},{concat:function(e){var t,n,r,o,i,a=dL(this),u=Sz(a,0),s=0;for(t=-1,r=arguments.length;t<r;t++)if(eH(i=-1===t?a:arguments[t])){if(s+(o=yM(i))>9007199254740991)throw Z$("Maximum allowed index exceeded");for(n=0;n<o;n++,s++)n in i&&Y$(u,s,i[n])}else{if(s>=9007199254740991)throw Z$("Maximum allowed index exceeded");Y$(u,s++,i)}return u.length=s,u}});var tH={renderElems:[ez,tz,nz],elemsToHtml:[oz,iz,az],parseElemsHtml:[j$,I$,N$],menus:[W$,q$],editorPlugin:function(e){var t=e.insertBreak,n=e.deleteBackward;e.insertNode;var r=e;return r.insertBreak=function(){var e=r.selection;if(null!=e){var n=Wy.getSelectedNodeByType(r,"list-item");if(null!=n){var o=Wy.getParentNode(r,n),i=(null==o?void 0:o.children)||[];if(n===i[i.length-1]&&""===Dt.string(n)){an.removeNodes(r,{match:function(e){return Wy.checkNodeType(e,"list-item")}});var a=[e.anchor.path[0]+1];return an.insertNodes(r,Wy.genEmptyParagraph(),{at:a}),void r.select({path:a.concat(0),offset:0})}t()}else t()}else t()},r.deleteBackward=function(e){(function(e){var t=M$(yt.nodes(e,{match:function(t){return e.children[0]===t},mode:"highest"}),1)[0];if(null==t)return!1;var n=t[0];return!(!ft.isElement(n)||Dt.string(n)||!JM(n)||(an.unwrapNodes(e,{match:function(e){return JM(e)},split:!0}),an.setNodes(e,{type:"paragraph"}),0))})(r)||n(e)},r}},nH=sn((function(e,t){var n="__lodash_hash_undefined__",r=9007199254740991,o="[object Arguments]",i="[object Array]",a="[object Boolean]",u="[object Date]",s="[object Error]",l="[object Function]",c="[object Map]",f="[object Number]",d="[object Object]",p="[object Promise]",h="[object RegExp]",g="[object Set]",v="[object String]",y="[object Symbol]",m="[object WeakMap]",b="[object ArrayBuffer]",w="[object DataView]",E=/^\[object .+?Constructor\]$/,D=/^(?:0|[1-9]\d*)$/,C={};C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C[o]=C[i]=C[b]=C[a]=C[w]=C[u]=C[s]=C[l]=C[c]=C[f]=C[d]=C[h]=C[g]=C[v]=C[m]=!1;var x="object"==typeof un&&un&&un.Object===Object&&un,S="object"==typeof self&&self&&self.Object===Object&&self,A=x||S||Function("return this")(),O=t&&!t.nodeType&&t,k=O&&e&&!e.nodeType&&e,B=k&&k.exports===O,F=B&&x.process,_=function(){try{return F&&F.binding&&F.binding("util")}catch(Qh){}}(),T=_&&_.isTypedArray;function P(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function j(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function N(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var I=Array.prototype,R=Function.prototype,L=Object.prototype,M=A["__core-js_shared__"],z=R.toString,$=L.hasOwnProperty,H=function(){var e=/[^.]+$/.exec(M&&M.keys&&M.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),V=L.toString,U=RegExp("^"+z.call($).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),W=B?A.Buffer:void 0,q=A.Symbol,G=A.Uint8Array,K=L.propertyIsEnumerable,Y=I.splice,X=q?q.toStringTag:void 0,Z=Object.getOwnPropertySymbols,J=W?W.isBuffer:void 0,Q=function(e,t){return function(n){return e(t(n))}}(Object.keys,Object),ee=ke(A,"DataView"),te=ke(A,"Map"),ne=ke(A,"Promise"),re=ke(A,"Set"),oe=ke(A,"WeakMap"),ie=ke(Object,"create"),ae=Te(ee),ue=Te(te),se=Te(ne),le=Te(re),ce=Te(oe),fe=q?q.prototype:void 0,de=fe?fe.valueOf:void 0;function pe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function he(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ve(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new ge;++t<n;)this.add(e[t])}function ye(e){var t=this.__data__=new he(e);this.size=t.size}function me(e,t){var n=Ne(e),r=!n&&je(e),o=!n&&!r&&Ie(e),i=!n&&!r&&!o&&$e(e),a=n||r||o||i,u=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],s=u.length;for(var l in e)!t&&!$.call(e,l)||a&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||_e(l,s))||u.push(l);return u}function be(e,t){for(var n=e.length;n--;)if(Pe(e[n][0],t))return n;return-1}function we(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":X&&X in Object(e)?function(e){var t=$.call(e,X),n=e[X];try{e[X]=void 0;var r=!0}catch(Qh){}var o=V.call(e);r&&(t?e[X]=n:delete e[X]);return o}(e):function(e){return V.call(e)}(e)}function Ee(e){return ze(e)&&we(e)==o}function De(e,t,n,r,l){return e===t||(null==e||null==t||!ze(e)&&!ze(t)?e!=e&&t!=t:function(e,t,n,r,l,p){var m=Ne(e),E=Ne(t),D=m?i:Fe(e),C=E?i:Fe(t),x=(D=D==o?d:D)==d,S=(C=C==o?d:C)==d,A=D==C;if(A&&Ie(e)){if(!Ie(t))return!1;m=!0,x=!1}if(A&&!x)return p||(p=new ye),m||$e(e)?Se(e,t,n,r,l,p):function(e,t,n,r,o,i,l){switch(n){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case b:return!(e.byteLength!=t.byteLength||!i(new G(e),new G(t)));case a:case u:case f:return Pe(+e,+t);case s:return e.name==t.name&&e.message==t.message;case h:case v:return e==t+"";case c:var d=j;case g:var p=1&r;if(d||(d=N),e.size!=t.size&&!p)return!1;var m=l.get(e);if(m)return m==t;r|=2,l.set(e,t);var E=Se(d(e),d(t),r,o,i,l);return l.delete(e),E;case y:if(de)return de.call(e)==de.call(t)}return!1}(e,t,D,n,r,l,p);if(!(1&n)){var O=x&&$.call(e,"__wrapped__"),k=S&&$.call(t,"__wrapped__");if(O||k){var B=O?e.value():e,F=k?t.value():t;return p||(p=new ye),l(B,F,n,r,p)}}if(!A)return!1;return p||(p=new ye),function(e,t,n,r,o,i){var a=1&n,u=Ae(e),s=u.length,l=Ae(t).length;if(s!=l&&!a)return!1;var c=s;for(;c--;){var f=u[c];if(!(a?f in t:$.call(t,f)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var p=!0;i.set(e,t),i.set(t,e);var h=a;for(;++c<s;){var g=e[f=u[c]],v=t[f];if(r)var y=a?r(v,g,f,t,e,i):r(g,v,f,e,t,i);if(!(void 0===y?g===v||o(g,v,n,r,i):y)){p=!1;break}h||(h="constructor"==f)}if(p&&!h){var m=e.constructor,b=t.constructor;m==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(p=!1)}return i.delete(e),i.delete(t),p}(e,t,n,r,l,p)}(e,t,n,r,De,l))}function Ce(e){return!(!Me(e)||function(e){return!!H&&H in e}(e))&&(Re(e)?U:E).test(Te(e))}function xe(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||L,t!==r)return Q(e);var t,n,r,o=[];for(var i in Object(e))$.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Se(e,t,n,r,o,i){var a=1&n,u=e.length,s=t.length;if(u!=s&&!(a&&s>u))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var c=-1,f=!0,d=2&n?new ve:void 0;for(i.set(e,t),i.set(t,e);++c<u;){var p=e[c],h=t[c];if(r)var g=a?r(h,p,c,t,e,i):r(p,h,c,e,t,i);if(void 0!==g){if(g)continue;f=!1;break}if(d){if(!P(t,(function(e,t){if(a=t,!d.has(a)&&(p===e||o(p,e,n,r,i)))return d.push(t);var a}))){f=!1;break}}else if(p!==h&&!o(p,h,n,r,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function Ae(e){return function(e,t,n){var r=t(e);return Ne(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,He,Be)}function Oe(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function ke(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Ce(n)?n:void 0}pe.prototype.clear=function(){this.__data__=ie?ie(null):{},this.size=0},pe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},pe.prototype.get=function(e){var t=this.__data__;if(ie){var r=t[e];return r===n?void 0:r}return $.call(t,e)?t[e]:void 0},pe.prototype.has=function(e){var t=this.__data__;return ie?void 0!==t[e]:$.call(t,e)},pe.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=ie&&void 0===t?n:t,this},he.prototype.clear=function(){this.__data__=[],this.size=0},he.prototype.delete=function(e){var t=this.__data__,n=be(t,e);return!(n<0)&&(n==t.length-1?t.pop():Y.call(t,n,1),--this.size,!0)},he.prototype.get=function(e){var t=this.__data__,n=be(t,e);return n<0?void 0:t[n][1]},he.prototype.has=function(e){return be(this.__data__,e)>-1},he.prototype.set=function(e,t){var n=this.__data__,r=be(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},ge.prototype.clear=function(){this.size=0,this.__data__={hash:new pe,map:new(te||he),string:new pe}},ge.prototype.delete=function(e){var t=Oe(this,e).delete(e);return this.size-=t?1:0,t},ge.prototype.get=function(e){return Oe(this,e).get(e)},ge.prototype.has=function(e){return Oe(this,e).has(e)},ge.prototype.set=function(e,t){var n=Oe(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},ve.prototype.add=ve.prototype.push=function(e){return this.__data__.set(e,n),this},ve.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.clear=function(){this.__data__=new he,this.size=0},ye.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},ye.prototype.get=function(e){return this.__data__.get(e)},ye.prototype.has=function(e){return this.__data__.has(e)},ye.prototype.set=function(e,t){var n=this.__data__;if(n instanceof he){var r=n.__data__;if(!te||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new ge(r)}return n.set(e,t),this.size=n.size,this};var Be=Z?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var a=e[n];t(a,n,e)&&(i[o++]=a)}return i}(Z(e),(function(t){return K.call(e,t)})))}:function(){return[]},Fe=we;function _e(e,t){return!!(t=null==t?r:t)&&("number"==typeof e||D.test(e))&&e>-1&&e%1==0&&e<t}function Te(e){if(null!=e){try{return z.call(e)}catch(Qh){}try{return e+""}catch(Qh){}}return""}function Pe(e,t){return e===t||e!=e&&t!=t}(ee&&Fe(new ee(new ArrayBuffer(1)))!=w||te&&Fe(new te)!=c||ne&&Fe(ne.resolve())!=p||re&&Fe(new re)!=g||oe&&Fe(new oe)!=m)&&(Fe=function(e){var t=we(e),n=t==d?e.constructor:void 0,r=n?Te(n):"";if(r)switch(r){case ae:return w;case ue:return c;case se:return p;case le:return g;case ce:return m}return t});var je=Ee(function(){return arguments}())?Ee:function(e){return ze(e)&&$.call(e,"callee")&&!K.call(e,"callee")},Ne=Array.isArray;var Ie=J||function(){return!1};function Re(e){if(!Me(e))return!1;var t=we(e);return t==l||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Le(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=r}function Me(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ze(e){return null!=e&&"object"==typeof e}var $e=T?function(e){return function(t){return e(t)}}(T):function(e){return ze(e)&&Le(e.length)&&!!C[we(e)]};function He(e){return null!=(t=e)&&Le(t.length)&&!Re(t)?me(e):xe(e);var t}e.exports=function(e,t){return De(e,t)}}));AC("en",{tableModule:{deleteCol:"Delete column",deleteRow:"Delete row",deleteTable:"Delete table",widthAuto:"Width auto",insertCol:"Insert column",insertRow:"Insert row",insertTable:"Insert table",header:"Header"}}),AC("zh-CN",{tableModule:{deleteCol:"删除列",deleteRow:"删除行",deleteTable:"删除表格",widthAuto:"宽度自适应",insertCol:"插入列",insertRow:"插入行",insertTable:"插入表格",header:"表头"}});var rH="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function oH(e){var t={exports:{}};return e(t,t.exports),t.exports}var iH,aH,uH=function(e){return e&&e.Math==Math&&e},sH=uH("object"==typeof globalThis&&globalThis)||uH("object"==typeof window&&window)||uH("object"==typeof self&&self)||uH("object"==typeof rH&&rH)||function(){return this}()||Function("return this")(),lH=function(e){try{return!!e()}catch(t){return!0}},cH=!lH((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),fH=Function.prototype.call,dH=fH.bind?fH.bind(fH):function(){return fH.apply(fH,arguments)},pH={}.propertyIsEnumerable,hH=Object.getOwnPropertyDescriptor,gH={f:hH&&!pH.call({1:2},1)?function(e){var t=hH(this,e);return!!t&&t.enumerable}:pH},vH=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},yH=Function.prototype,mH=yH.bind,bH=yH.call,wH=mH&&mH.bind(bH),EH=mH?function(e){return e&&wH(bH,e)}:function(e){return e&&function(){return bH.apply(e,arguments)}},DH=EH({}.toString),CH=EH("".slice),xH=function(e){return CH(DH(e),8,-1)},SH=sH.Object,AH=EH("".split),OH=lH((function(){return!SH("z").propertyIsEnumerable(0)}))?function(e){return"String"==xH(e)?AH(e,""):SH(e)}:SH,kH=sH.TypeError,BH=function(e){if(null==e)throw kH("Can't call method on "+e);return e},FH=function(e){return OH(BH(e))},_H=function(e){return"function"==typeof e},TH=function(e){return"object"==typeof e?null!==e:_H(e)},PH=function(e){return _H(e)?e:void 0},jH=function(e,t){return arguments.length<2?PH(sH[e]):sH[e]&&sH[e][t]},NH=EH({}.isPrototypeOf),IH=jH("navigator","userAgent")||"",RH=sH.process,LH=sH.Deno,MH=RH&&RH.versions||LH&&LH.version,zH=MH&&MH.v8;zH&&(aH=(iH=zH.split("."))[0]>0&&iH[0]<4?1:+(iH[0]+iH[1])),!aH&&IH&&(!(iH=IH.match(/Edge\/(\d+)/))||iH[1]>=74)&&(iH=IH.match(/Chrome\/(\d+)/))&&(aH=+iH[1]);var $H=aH,HH=!!Object.getOwnPropertySymbols&&!lH((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&$H&&$H<41})),VH=HH&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,UH=sH.Object,WH=VH?function(e){return"symbol"==typeof e}:function(e){var t=jH("Symbol");return _H(t)&&NH(t.prototype,UH(e))},qH=sH.String,GH=function(e){try{return qH(e)}catch(t){return"Object"}},KH=sH.TypeError,YH=function(e){if(_H(e))return e;throw KH(GH(e)+" is not a function")},XH=function(e,t){var n=e[t];return null==n?void 0:YH(n)},ZH=sH.TypeError,JH=Object.defineProperty,QH=function(e,t){try{JH(sH,e,{value:t,configurable:!0,writable:!0})}catch(mG){sH[e]=t}return t},eV=sH["__core-js_shared__"]||QH("__core-js_shared__",{}),tV=oH((function(e){(e.exports=function(e,t){return eV[e]||(eV[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),nV=sH.Object,rV=function(e){return nV(BH(e))},oV=EH({}.hasOwnProperty),iV=Object.hasOwn||function(e,t){return oV(rV(e),t)},aV=0,uV=Math.random(),sV=EH(1..toString),lV=function(e){return"Symbol("+(void 0===e?"":e)+")_"+sV(++aV+uV,36)},cV=tV("wks"),fV=sH.Symbol,dV=fV&&fV.for,pV=VH?fV:fV&&fV.withoutSetter||lV,hV=function(e){if(!iV(cV,e)||!HH&&"string"!=typeof cV[e]){var t="Symbol."+e;HH&&iV(fV,e)?cV[e]=fV[e]:cV[e]=VH&&dV?dV(t):pV(t)}return cV[e]},gV=sH.TypeError,vV=hV("toPrimitive"),yV=function(e){var t=function(e,t){if(!TH(e)||WH(e))return e;var n,r=XH(e,vV);if(r){if(void 0===t&&(t="default"),n=dH(r,e,t),!TH(n)||WH(n))return n;throw gV("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&_H(n=e.toString)&&!TH(r=dH(n,e)))return r;if(_H(n=e.valueOf)&&!TH(r=dH(n,e)))return r;if("string"!==t&&_H(n=e.toString)&&!TH(r=dH(n,e)))return r;throw ZH("Can't convert object to primitive value")}(e,t)}(e,"string");return WH(t)?t:t+""},mV=sH.document,bV=TH(mV)&&TH(mV.createElement),wV=function(e){return bV?mV.createElement(e):{}},EV=!cH&&!lH((function(){return 7!=Object.defineProperty(wV("div"),"a",{get:function(){return 7}}).a})),DV=Object.getOwnPropertyDescriptor,CV={f:cH?DV:function(e,t){if(e=FH(e),t=yV(t),EV)try{return DV(e,t)}catch(n){}if(iV(e,t))return vH(!dH(gH.f,e,t),e[t])}},xV=sH.String,SV=sH.TypeError,AV=function(e){if(TH(e))return e;throw SV(xV(e)+" is not an object")},OV=sH.TypeError,kV=Object.defineProperty,BV={f:cH?kV:function(e,t,n){if(AV(e),t=yV(t),AV(n),EV)try{return kV(e,t,n)}catch(r){}if("get"in n||"set"in n)throw OV("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},FV=cH?function(e,t,n){return BV.f(e,t,vH(1,n))}:function(e,t,n){return e[t]=n,e},_V=EH(Function.toString);_H(eV.inspectSource)||(eV.inspectSource=function(e){return _V(e)});var TV,PV,jV,NV=eV.inspectSource,IV=sH.WeakMap,RV=_H(IV)&&/native code/.test(NV(IV)),LV=tV("keys"),MV=function(e){return LV[e]||(LV[e]=lV(e))},zV={},$V=sH.TypeError,HV=sH.WeakMap;if(RV||eV.state){var VV=eV.state||(eV.state=new HV),UV=EH(VV.get),WV=EH(VV.has),qV=EH(VV.set);TV=function(e,t){if(WV(VV,e))throw new $V("Object already initialized");return t.facade=e,qV(VV,e,t),t},PV=function(e){return UV(VV,e)||{}},jV=function(e){return WV(VV,e)}}else{var GV=MV("state");zV[GV]=!0,TV=function(e,t){if(iV(e,GV))throw new $V("Object already initialized");return t.facade=e,FV(e,GV,t),t},PV=function(e){return iV(e,GV)?e[GV]:{}},jV=function(e){return iV(e,GV)}}var KV={set:TV,get:PV,has:jV,enforce:function(e){return jV(e)?PV(e):TV(e,{})},getterFor:function(e){return function(t){var n;if(!TH(t)||(n=PV(t)).type!==e)throw $V("Incompatible receiver, "+e+" required");return n}}},YV=Function.prototype,XV=cH&&Object.getOwnPropertyDescriptor,ZV=iV(YV,"name"),JV={EXISTS:ZV,PROPER:ZV&&"something"===function(){}.name,CONFIGURABLE:ZV&&(!cH||cH&&XV(YV,"name").configurable)},QV=oH((function(e){var t=JV.CONFIGURABLE,n=KV.get,r=KV.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;_H(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!iV(i,"name")||t&&i.name!==f)&&FV(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==sH?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:FV(e,n,i)):l?e[n]=i:QH(n,i)})(Function.prototype,"toString",(function(){return _H(this)&&n(this).source||NV(this)}))})),eU=Math.ceil,tU=Math.floor,nU=function(e){var t=+e;return t!=t||0===t?0:(t>0?tU:eU)(t)},rU=Math.max,oU=Math.min,iU=function(e,t){var n=nU(e);return n<0?rU(n+t,0):oU(n,t)},aU=Math.min,uU=function(e){return e>0?aU(nU(e),9007199254740991):0},sU=function(e){return uU(e.length)},lU=function(e){return function(t,n,r){var o,i=FH(t),a=sU(i),u=iU(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},cU=(lU(!0),lU(!1)),fU=EH([].push),dU=function(e,t){var n,r=FH(e),o=0,i=[];for(n in r)!iV(zV,n)&&iV(r,n)&&fU(i,n);for(;t.length>o;)iV(r,n=t[o++])&&(~cU(i,n)||fU(i,n));return i},pU=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],hU=pU.concat("length","prototype"),gU={f:Object.getOwnPropertyNames||function(e){return dU(e,hU)}},vU={f:Object.getOwnPropertySymbols},yU=EH([].concat),mU=jH("Reflect","ownKeys")||function(e){var t=gU.f(AV(e)),n=vU.f;return n?yU(t,n(e)):t},bU=function(e,t){for(var n=mU(t),r=BV.f,o=CV.f,i=0;i<n.length;i++){var a=n[i];iV(e,a)||r(e,a,o(t,a))}},wU=/#|\.prototype\./,EU=function(e,t){var n=CU[DU(e)];return n==SU||n!=xU&&(_H(t)?lH(t):!!t)},DU=EU.normalize=function(e){return String(e).replace(wU,".").toLowerCase()},CU=EU.data={},xU=EU.NATIVE="N",SU=EU.POLYFILL="P",AU=EU,OU=CV.f,kU=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?sH:l?sH[u]||QH(u,{}):(sH[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=OU(n,r))&&a.value:n[r],!AU(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;bU(i,o)}(e.sham||o&&o.sham)&&FV(i,"sham",!0),QV(n,r,i,e)}},BU={};BU[hV("toStringTag")]="z";var FU="[object z]"===String(BU),_U=hV("toStringTag"),TU=sH.Object,PU="Arguments"==xH(function(){return arguments}()),jU=FU?xH:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=TU(e),_U))?n:PU?xH(t):"Object"==(r=xH(t))&&_H(t.callee)?"Arguments":r},NU=sH.String,IU=function(e){if("Symbol"===jU(e))throw TypeError("Cannot convert a Symbol value to a string");return NU(e)},RU=/"/g,LU=EH("".replace);kU({target:"String",proto:!0,forced:("anchor",lH((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3})))},{anchor:function(e){return"a","name",t=e,n=IU(BH(this)),r="<a",(r+=' name="'+LU(IU(t),RU,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var MU,zU=function(){var e=AV(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},$U=sH.RegExp,HU=lH((function(){var e=$U("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),VU=HU||lH((function(){return!$U("a","y").sticky})),UU={BROKEN_CARET:HU||lH((function(){var e=$U("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:VU,UNSUPPORTED_Y:HU},WU=Object.keys||function(e){return dU(e,pU)},qU=cH?Object.defineProperties:function(e,t){AV(e);for(var n,r=FH(t),o=WU(t),i=o.length,a=0;i>a;)BV.f(e,n=o[a++],r[n]);return e},GU=jH("document","documentElement"),KU=MV("IE_PROTO"),YU=function(){},XU=function(e){return"<script>"+e+"<\/script>"},ZU=function(e){e.write(XU("")),e.close();var t=e.parentWindow.Object;return e=null,t},JU=function(){try{MU=new ActiveXObject("htmlfile")}catch(r){}var e,t;JU="undefined"!=typeof document?document.domain&&MU?ZU(MU):((t=wV("iframe")).style.display="none",GU.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(XU("document.F=Object")),e.close(),e.F):ZU(MU);for(var n=pU.length;n--;)delete JU.prototype[pU[n]];return JU()};zV[KU]=!0;var QU,eW,tW=Object.create||function(e,t){var n;return null!==e?(YU.prototype=AV(e),n=new YU,YU.prototype=null,n[KU]=e):n=JU(),void 0===t?n:qU(n,t)},nW=sH.RegExp,rW=lH((function(){var e=nW(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),oW=sH.RegExp,iW=lH((function(){var e=oW("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),aW=KV.get,uW=tV("native-string-replace",String.prototype.replace),sW=RegExp.prototype.exec,lW=sW,cW=EH("".charAt),fW=EH("".indexOf),dW=EH("".replace),pW=EH("".slice),hW=(eW=/b*/g,dH(sW,QU=/a/,"a"),dH(sW,eW,"a"),0!==QU.lastIndex||0!==eW.lastIndex),gW=UU.BROKEN_CARET,vW=void 0!==/()??/.exec("")[1];(hW||vW||gW||rW||iW)&&(lW=function(e){var t,n,r,o,i,a,u,s=this,l=aW(s),c=IU(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=dH(lW,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=gW&&s.sticky,h=dH(zU,s),g=s.source,v=0,y=c;if(p&&(h=dW(h,"y",""),-1===fW(h,"g")&&(h+="g"),y=pW(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==cW(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),vW&&(n=new RegExp("^"+g+"$(?!\\s)",h)),hW&&(r=s.lastIndex),o=dH(sW,p?n:s,y),p?o?(o.input=pW(o.input,v),o[0]=pW(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:hW&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),vW&&o&&o.length>1&&dH(uW,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=tW(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var yW=lW;kU({target:"RegExp",proto:!0,forced:/./.exec!==yW},{exec:yW});var mW=Array.isArray||function(e){return"Array"==xH(e)},bW=function(){},wW=[],EW=jH("Reflect","construct"),DW=/^\s*(?:class|function)\b/,CW=EH(DW.exec),xW=!DW.exec(bW),SW=function(e){if(!_H(e))return!1;try{return EW(bW,wW,e),!0}catch(t){return!1}},AW=!EW||lH((function(){var e;return SW(SW.call)||!SW(Object)||!SW((function(){e=!0}))||e}))?function(e){if(!_H(e))return!1;switch(jU(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return xW||!!CW(DW,NV(e))}:SW,OW=function(e,t,n){var r=yV(t);r in e?BV.f(e,r,vH(0,n)):e[r]=n},kW=hV("species"),BW=function(e){return $H>=51||!lH((function(){var t=[];return(t.constructor={})[kW]=function(){return{foo:1}},1!==t[e](Boolean).foo}))},FW=EH([].slice),_W=BW("slice"),TW=hV("species"),PW=sH.Array,jW=Math.max;function NW(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function IW(e){var t=e.selection;if(null==t)return!1;var n=NW(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"table-cell")}}),1)[0];if(n){var r=NW(n,2)[1],o=yt.start(e,r);if(Ft.equals(t.anchor,o))return!0}return!1}function RW(e,t){var n,r,o=yt.nodes(e,{at:t,match:function(e){return"table"===Wy.getNodeType(e)}}),i=!1;try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(o),u=a.next();!u.done;u=a.next())u.value,i=!0}catch(s){n={error:s}}finally{try{u&&!u.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}return i}kU({target:"Array",proto:!0,forced:!_W},{slice:function(e,t){var n,r,o,i=FH(this),a=sU(i),u=iU(e,a),s=iU(void 0===t?a:t,a);if(mW(i)&&(n=i.constructor,(AW(n)&&(n===PW||mW(n.prototype))||TH(n)&&null===(n=n[TW]))&&(n=void 0),n===PW||void 0===n))return FW(i,u,s);for(r=new(void 0===n?PW:n)(jW(s-u,0)),o=0;u<s;u++,o++)u in i&&OW(r,o,i[u]);return r.length=o,r}});var LW=EH(EH.bind),MW=hV("species"),zW=sH.Array,$W=function(e,t){return new(mW(n=e)&&(r=n.constructor,(AW(r)&&(r===zW||mW(r.prototype))||TH(r)&&null===(r=r[MW]))&&(r=void 0)),void 0===r?zW:r)(0===t?0:t);var n,r},HW=EH([].push),VW=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=rV(s),g=OH(h),v=function(e,t){return YH(e),void 0===t?e:LW?LW(e,t):function(){return e.apply(t,arguments)}}(l,c),y=sU(g),m=0,b=f||$W,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:HW(w,d)}else switch(e){case 4:return!1;case 7:HW(w,d)}return i?-1:r||o?o:w}},UW={forEach:VW(0),map:VW(1),filter:VW(2),some:VW(3),every:VW(4),find:VW(5),findIndex:VW(6),filterReject:VW(7)},WW=UW.map;kU({target:"Array",proto:!0,forced:!BW("map")},{map:function(e){return WW(this,e,arguments.length>1?arguments[1]:void 0)}});var qW=FU?{}.toString:function(){return"[object "+jU(this)+"]"};function GW(e){var t=e.children||[];return 0===t.length?[]:(t[0]||{}).children||[]}function KW(e){return GW(e).every((function(e){return!!e.isHeader}))}FU||QV(Object.prototype,"toString",qW,{unsafe:!0});var YW=JV.PROPER,XW=RegExp.prototype,ZW=XW.toString,JW=EH(zU),QW=lH((function(){return"/a/b"!=ZW.call({source:"a",flags:"b"})})),eq=YW&&"toString"!=ZW.name;(QW||eq)&&QV(RegExp.prototype,"toString",(function(){var e=AV(this),t=IU(e.source),n=e.flags;return"/"+t+"/"+IU(void 0===n&&NH(XW,e)&&!("flags"in XW)?JW(e):n)}),{unsafe:!0});var tq=hV("unscopables"),nq=Array.prototype;null==nq[tq]&&BV.f(nq,tq,{configurable:!0,value:tW(null)});var rq=UW.find,oq=!0;"find"in[]&&Array(1).find((function(){oq=!1})),kU({target:"Array",proto:!0,forced:oq},{find:function(e){return rq(this,e,arguments.length>1?arguments[1]:void 0)}}),nq[tq].find=!0;var iq=Function.prototype,aq=iq.apply,uq=iq.bind,sq=iq.call,lq="object"==typeof Reflect&&Reflect.apply||(uq?sq.bind(aq):function(){return sq.apply(aq,arguments)}),cq=hV("species"),fq=RegExp.prototype,dq=function(e,t,n,r){var o=hV(e),i=!lH((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!lH((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[cq]=function(){return n},n.flags="",n[o]=/./[o]),n.exec=function(){return t=!0,null},n[o](""),!t}));if(!i||!a||n){var u=EH(/./[o]),s=t(o,""[e],(function(e,t,n,r,o){var a=EH(e),s=t.exec;return s===yW||s===fq.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));QV(String.prototype,e,s[0]),QV(fq,o,s[1])}r&&FV(fq[o],"sham",!0)},pq=hV("match"),hq=sH.TypeError,gq=hV("species"),vq=EH("".charAt),yq=EH("".charCodeAt),mq=EH("".slice),bq=function(e){return function(t,n){var r,o,i=IU(BH(t)),a=nU(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=yq(i,a))<55296||r>56319||a+1===u||(o=yq(i,a+1))<56320||o>57343?e?vq(i,a):r:e?mq(i,a,a+2):o-56320+(r-55296<<10)+65536}},wq=(bq(!1),bq(!0)),Eq=function(e,t,n){return t+(n?wq(e,t).length:1)},Dq=sH.Array,Cq=Math.max,xq=function(e,t,n){for(var r=sU(e),o=iU(t,r),i=iU(void 0===n?r:n,r),a=Dq(Cq(i-o,0)),u=0;o<i;o++,u++)OW(a,u,e[o]);return a.length=u,a},Sq=sH.TypeError,Aq=function(e,t){var n=e.exec;if(_H(n)){var r=dH(n,e,t);return null!==r&&AV(r),r}if("RegExp"===xH(e))return dH(yW,e,t);throw Sq("RegExp#exec called on incompatible receiver")},Oq=UU.UNSUPPORTED_Y,kq=Math.min,Bq=[].push,Fq=EH(/./.exec),_q=EH(Bq),Tq=EH("".slice);dq("split",(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=IU(BH(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!TH(r=e)||!(void 0!==(o=r[pq])?o:"RegExp"==xH(r)))return dH(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=dH(yW,p,i))&&!((s=p.lastIndex)>d&&(_q(c,Tq(i,d,u.index)),u.length>1&&u.index<i.length&&lq(Bq,c,xq(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&Fq(p,"")||_q(c,""):_q(c,Tq(i,d)),c.length>a?xq(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:dH(t,this,e,n)}:t,[function(t,n){var o=BH(this),i=null==t?void 0:XH(t,e);return i?dH(i,t,o,n):dH(r,IU(o),t,n)},function(e,o){var i=AV(this),a=IU(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=AV(e).constructor;return void 0===r||null==(n=AV(r)[gq])?t:function(e){if(AW(e))return e;throw hq(GH(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(Oq?"g":"y"),f=new s(Oq?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===Aq(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=Oq?0:h;var v,y=Aq(f,Oq?Tq(a,h):a);if(null===y||(v=kq(uU(f.lastIndex+(Oq?h:0)),a.length))===p)h=Eq(a,h,l);else{if(_q(g,Tq(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(_q(g,y[m]),g.length===d)return g;h=p=v}}return _q(g,Tq(a,p)),g}]}),!!lH((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),Oq);var Pq="\t\n\v\f\r                　\u2028\u2029\ufeff",jq=EH("".replace),Nq="["+Pq+"]",Iq=RegExp("^"+Nq+Nq+"*"),Rq=RegExp(Nq+Nq+"*$"),Lq=function(e){return function(t){var n=IU(BH(t));return 1&e&&(n=jq(n,Iq,"")),2&e&&(n=jq(n,Rq,"")),n}},Mq={start:Lq(1),end:Lq(2),trim:Lq(3)},zq=JV.PROPER,$q=Mq.trim;function Hq(e){return e.length?e[0].tagName.toLowerCase():""}kU({target:"String",proto:!0,forced:function(e){return lH((function(){return!!Pq[e]()||"​᠎"!=="​᠎"[e]()||zq&&Pq[e].name!==e}))}("trim")},{trim:function(){return $q(this)}}),kU({global:!0},{globalThis:sH}),Zr&&(Fr.fn.append=Zr),Lr&&(Fr.fn.on=Lr),so&&(Fr.fn.focus=so),jr&&(Fr.fn.attr=jr),Rr&&(Fr.fn.val=Rr),Kr&&(Fr.fn.html=Kr),Ir&&(Fr.fn.dataset=Ir),_r&&(Fr.fn.addClass=_r),Tr&&(Fr.fn.removeClass=Tr),no&&(Fr.fn.children=no),qr&&(Fr.fn.each=qr),to&&(Fr.fn.find=to);var Vq=!1,Uq=0,Wq=0,qq=null,Gq=null,Kq=Fr("body");function Yq(e){Vq=!1,Gq=null,qq=null,Kq.off("mousemove",Xq),Kq.off("mouseup",Yq)}Kq.on("mousedown",(function(e){var t=e.target;if(("TH"===t.tagName||"TD"===t.tagName)&&"col-resize"===t.style.cursor){t.style.cursor="auto",e.preventDefault(),Vq=!0;var n=e.clientX;Uq=n;var r=t.getBoundingClientRect().width;Wq=r,Kq.on("mousemove",Xq),Kq.on("mouseup",Yq)}}));var Xq=qo((function(e){if(Vq&&null!=Gq&&null!=qq){e.preventDefault();var t=e.clientX,n=Wq+(t-Uq);(n=Math.floor(100*n)/100)<30&&(n=30),an.setNodes(Gq,{width:n.toString()},{at:qq})}}),100),Zq={type:"table",renderElem:function(e,t,n){var r=function(e,t){if(e.isDisabled())return!1;var n=e.selection;if(null==n)return!0;if(jt.isCollapsed(n))return!0;var r=n.anchor,o=n.focus,i=Wy.findPath(e,t),a=yt.start(e,i),u=yt.end(e,i),s=Ft.compare(r,u)<=0&&Ft.compare(r,a)>=0,l=Ft.compare(o,u)<=0&&Ft.compare(o,a)>=0;return!!(s&&l&&At.equals(r.path.slice(0,3),o.path.slice(0,3)))}(n,e),o=e.width,i=void 0===o?"auto":o,a=Ci("div",{className:"table-container","data-selected":Wy.isNodeSelected(n,e),on:{mousedown:function(t){"DIV"===t.target.tagName&&t.preventDefault();var r=Wy.findPath(n,e),o=yt.start(n,r),i=n.selection;null!=i?i.anchor.path[0]!==r[0]&&n.select(o):n.select(o)}}},Ci("table",{width:i,contentEditable:r},Ci("colgroup",null,GW(e).map((function(e){var t=e.width;return Ci("col",{width:void 0===t?"auto":t})}))),Ci("tbody",null,t)));return a}},Jq={type:"table-row",renderElem:function(e,t,n){return Ci("tr",null,t)}},Qq={type:"table-cell",renderElem:function(e,t,n){var r=function(e,t){var n=Wy.getParentNode(e,t);if(null==n)return!1;var r=Wy.getParentNode(e,n);return null!=r&&GW(r).some((function(e){return e===t}))}(n,e),o=e,i=o.colSpan,a=void 0===i?1:i,u=o.rowSpan,s=void 0===u?1:u,l=o.isHeader;return r?Ci(void 0!==l&&l?"th":"td",{colSpan:a,rowSpan:s,style:{borderRightWidth:"3px"},on:{mousemove:qo((function(t){var r=this.elm;if(null!=r){var o=r.getBoundingClientRect(),i=o.left,a=o.width,u=o.top,s=o.height,l=t.clientX,c=t.clientY;Vq||(l>i+a-5&&l<i+a&&c>u&&c<u+s?(r.style.cursor="col-resize",Gq=n,qq=Wy.findPath(n,e)):Vq||(r.style.cursor="auto",Gq=null,qq=null))}}),100)}},t):Ci("td",{colSpan:a,rowSpan:s},t)}},eG={selector:"table",preParseHtml:function(e){var t=Fr(e);if("table"!==Hq(t))return e;var n=t.find("tbody");if(0===n.length)return e;var r=t.find("tr");return t.append(r),n.remove(),t[0]}},tG=UW.filter;kU({target:"Array",proto:!0,forced:!BW("filter")},{filter:function(e){return tG(this,e,arguments.length>1?arguments[1]:void 0)}});var nG=Math.floor,rG=EH("".charAt),oG=EH("".replace),iG=EH("".slice),aG=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,uG=/\$([$&'`]|\d{1,2})/g,sG=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=uG;return void 0!==o&&(o=rV(o),s=aG),oG(i,s,(function(i,s){var l;switch(rG(s,0)){case"$":return"$";case"&":return e;case"`":return iG(t,0,n);case"'":return iG(t,a);case"<":l=o[iG(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=nG(c/10);return 0===f?i:f<=u?void 0===r[f-1]?rG(s,1):r[f-1]+rG(s,1):i}l=r[c-1]}return void 0===l?"":l}))},lG=hV("replace"),cG=Math.max,fG=Math.min,dG=EH([].concat),pG=EH([].push),hG=EH("".indexOf),gG=EH("".slice),vG="$0"==="a".replace(/./,"$0"),yG=!!/./[lG]&&""===/./[lG]("a","$0");dq("replace",(function(e,t,n){var r=yG?"$":"$0";return[function(e,n){var r=BH(this),o=null==e?void 0:XH(e,lG);return o?dH(o,e,r,n):dH(t,IU(r),e,n)},function(e,o){var i=AV(this),a=IU(e);if("string"==typeof o&&-1===hG(o,r)&&-1===hG(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=_H(o);s||(o=IU(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=Aq(i,a);if(null===d)break;if(pG(f,d),!l)break;""===IU(d[0])&&(i.lastIndex=Eq(a,uU(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=IU((d=f[v])[0]),m=cG(fG(nU(d.index),a.length),0),b=[],w=1;w<d.length;w++)pG(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=dG([y],b,m,a);void 0!==E&&pG(D,E);var C=IU(lq(o,void 0,D))}else C=sG(y,a,m,b,E,o);m>=g&&(h+=gG(a,g,m)+C,g=m+y.length)}return h+gG(a,g)}]}),!!lH((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!vG||yG);var mG,bG={selector:"td,th",parseElemHtml:function(e,t,n){var r=Fr(e);0===(t=t.filter((function(e){return!!$t.isText(e)||!!n.isInline(e)}))).length&&(t=[{text:r.text().replace(/\s+/gm," ")}]);var o=parseInt(r.attr("colSpan")||"1"),i=parseInt(r.attr("rowSpan")||"1"),a=r.attr("width")||"auto";return{type:"table-cell",isHeader:"th"===Hq(r),colSpan:o,rowSpan:i,width:a,children:t}}},wG={selector:"tr",parseElemHtml:function(e,t,n){return{type:"table-row",children:t.filter((function(e){return"table-cell"===Wy.getNodeType(e)}))}}},EG={selector:"table",parseElemHtml:function(e,t,n){var r=Fr(e),o="auto";return"100%"===function(e,t){for(var n="",r=(e.attr("style")||"").split(";"),o=r.length,i=0;i<o;i++){var a=r[i];if(a){var u=a.split(":");"width"===u[0].trim()&&(n=u[1].trim())}}return n}(r)&&(o="100%"),"100%"===r.attr("width")&&(o="100%"),{type:"table",width:o,children:t.filter((function(e){return"table-row"===Wy.getNodeType(e)}))}}},DG=function(){function e(){this.title=OC("tableModule.insertTable"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M0 64v896h1024V64H0z m384 576v-192h256v192h-256z m256 64v192h-256v-192h256z m0-512v192h-256V192h256zM320 192v192H64V192h256z m-256 256h256v192H64v-192z m640 0h256v192h-256v-192z m0-64V192h256v192h-256zM64 704h256v192H64v-192z m640 192v-192h256v192h-256z"></path></svg>',this.tag="button",this.showDropPanel=!0,this.$content=null}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||!!Wy.getSelectedElems(e).some((function(t){var n=Wy.getNodeType(t);return"pre"===n||"table"===n||!!e.isVoid(t)}))},e.prototype.getPanelContentElem=function(e){var t=this;if(this.$content)return this.$content[0];for(var n=Fr('<div class="w-e-panel-content-table"></div>'),r=Fr("<span>0 &times; 0</span>"),o=Fr("<table></table>"),i=0;i<10;i++){for(var a=Fr("<tr></tr>"),u=0;u<10;u++){var s=Fr("<td></td>");s.attr("data-x",u.toString()),s.attr("data-y",i.toString()),a.append(s),s.on("mouseenter",(function(e){var t=e.target;if(null!=t){var n=Fr(t).dataset(),i=n.x,a=n.y;r[0].innerHTML=i+1+" &times; "+(a+1),o.children().each((function(e){Fr(e).children().each((function(e){var t=Fr(e),n=t.dataset(),r=n.x,o=n.y;r<=i&&o<=a?t.addClass("active"):t.removeClass("active")}))}))}})),s.on("click",(function(n){n.preventDefault();var r=n.target;if(null!=r){var o=Fr(r).dataset(),i=o.x,a=o.y;t.insertTable(e,a+1,i+1)}}))}o.append(a)}return n.append(o),n.append(r),this.$content=n,n[0]},e.prototype.insertTable=function(e,t,n){var r=parseInt(t,10),o=parseInt(n,10);if(r&&o&&!(r<=0||o<=0)){var i=Wy.getSelectedNodeByType(e,"paragraph");i&&""===Dt.string(i)&&an.removeNodes(e,{mode:"highest"});var a=function(e,t){for(var n=[],r=0;r<e;r++){for(var o=[],i=0;i<t;i++){var a={type:"table-cell",children:[{text:""}]};0===r&&(a.isHeader=!0),o.push(a)}n.push({type:"table-row",children:o})}return{type:"table",width:"auto",children:n}}(r,o);an.insertNodes(e,a,{mode:"highest"})}},e}(),CG=function(){function e(){this.title=OC("tableModule.deleteTable"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M826.8032 356.5312c-19.328 0-36.3776 15.6928-36.3776 35.0464v524.2624c0 19.328-16 34.56-35.328 34.56H264.9344c-19.328 0-35.5072-15.3088-35.5072-34.56V390.0416c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.6928-33.5104 35.0464V915.712c0 57.9328 44.6208 108.288 102.528 108.288H755.2c57.9328 0 108.0832-50.4576 108.0832-108.288V391.4752c-0.1024-19.2512-17.1264-34.944-36.48-34.944z" p-id="9577"></path><path d="M437.1712 775.7568V390.6048c0-19.328-14.1568-35.0464-33.5104-35.0464s-33.5104 15.616-33.5104 35.0464v385.152c0 19.328 14.1568 35.0464 33.5104 35.0464s33.5104-15.7184 33.5104-35.0464zM649.7024 775.7568V390.6048c0-19.328-17.0496-35.0464-36.3776-35.0464s-36.3776 15.616-36.3776 35.0464v385.152c0 19.328 17.0496 35.0464 36.3776 35.0464s36.3776-15.7184 36.3776-35.0464zM965.0432 217.0368h-174.6176V145.5104c0-57.9328-47.2064-101.76-104.6528-101.76h-350.976c-57.8304 0-105.3952 43.8528-105.3952 101.76v71.5264H54.784c-19.4304 0-35.0464 14.1568-35.0464 33.5104 0 19.328 15.616 33.5104 35.0464 33.5104h910.3616c19.328 0 35.0464-14.1568 35.0464-33.5104 0-19.3536-15.6928-33.5104-35.1488-33.5104z m-247.3728 0H297.3952V145.5104c0-19.328 18.2016-34.7648 37.4272-34.7648h350.976c19.1488 0 31.872 15.1296 31.872 34.7648v71.5264z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return null==e.selection||null==Wy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){this.isDisabled(e)||an.removeNodes(e,{mode:"highest"})},e}(),xG=function(){function e(){this.title=OC("tableModule.insertRow"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M707.7888 521.0112h-147.456v-147.456H488.2432v147.456h-147.456v68.8128h147.456v147.456h72.0896v-147.456h147.456zM0 917.504V0h1048.576v917.504H0zM327.68 65.536H65.536v196.608H327.68V65.536z m327.68 0H393.216v196.608h262.144V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 258.8672H65.536v462.0288H983.04V324.4032z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=NW(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"table-cell")},universal:!0}),1),r=NW(n[0],2),o=r[0],i=r[1],a=Wy.getParentNode(e,o),u=(null==a?void 0:a.children.length)||0;if(0!==u){for(var s={type:"table-row",children:[]},l=0;l<u;l++)s.children.push({type:"table-cell",children:[{text:""}]});var c=At.parent(i),f=At.next(c);an.insertNodes(e,s,{at:f})}}},e}(),SG=function(){function e(){this.title=OC("tableModule.deleteRow"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M907.6736 586.5472L747.1104 425.984l163.84-163.84-78.6432-78.6432-163.84 163.84L507.904 186.7776 429.2608 262.144l163.84 163.84-167.1168 167.1168 78.6432 78.6432 167.1168-167.1168 160.5632 160.5632 75.3664-78.6432zM0 917.504V0h1048.576v917.504H0z m983.04-327.68h-22.9376l-65.536-65.536H983.04V327.68h-91.7504l65.536-65.536h26.2144V65.536H65.536v196.608h317.8496l65.536 65.536H65.536v196.608h380.1088l-65.536 65.536H65.536v196.608H983.04v-196.608z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table-row")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=NW(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"table-row")},universal:!0}),1),r=NW(n[0],2),o=r[0],i=r[1],a=Wy.getParentNode(e,o);((null==a?void 0:a.children.length)||0)<=1?an.removeNodes(e,{mode:"highest"}):an.removeNodes(e,{at:i})}},e}(),AG={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},OG=wV("span").classList,kG=OG&&OG.constructor&&OG.constructor.prototype,BG=kG===Object.prototype?void 0:kG,FG=UW.forEach,_G=!!(mG=[].forEach)&&lH((function(){mG.call(null,(function(){throw 1}),1)}))?[].forEach:function(e){return FG(this,e,arguments.length>1?arguments[1]:void 0)},TG=function(e){if(e&&e.forEach!==_G)try{FV(e,"forEach",_G)}catch(Qh){e.forEach=_G}};for(var PG in AG)AG[PG]&&TG(sH[PG]&&sH[PG].prototype);TG(BG);var jG=function(){function e(){this.title=OC("tableModule.insertCol"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M327.68 193.3312v186.7776H140.9024v91.7504H327.68v186.7776h88.4736V471.8592h190.0544V380.1088H416.1536V193.3312zM0 917.504V0h1048.576v917.504H0zM655.36 65.536H65.536v720.896H655.36V65.536z m327.68 0h-262.144v196.608h262.144V65.536z m0 262.144h-262.144v196.608h262.144V327.68z m0 262.144h-262.144v196.608h262.144v-196.608z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=NW(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"table-cell")},universal:!0}),1),r=NW(n[0],2),o=r[0],i=r[1],a=Wy.getParentNode(e,o);if(null!=a){var u=Wy.getParentNode(e,a);null!=u&&(u.children||[]).forEach((function(t,n){ft.isElement(t)&&(t.children||[]).forEach((function(t){var r=Wy.findPath(e,t);if(r.length===i.length&&nH(r.slice(-1),i.slice(-1))){var o={type:"table-cell",children:[{text:""}]};0===n&&KW(u)&&(o.isHeader=!0),an.insertNodes(e,o,{at:r})}}))}))}}},e}(),NG=function(){function e(){this.title=OC("tableModule.deleteCol"),this.iconSvg='<svg viewBox="0 0 1048 1024"><path d="M327.68 510.976L393.216 445.44v-13.1072L327.68 366.7968V510.976z m327.68-78.4384l65.536-65.536V507.904L655.36 442.368v-9.8304z m393.216 484.9664V0H0v917.504h1048.576z m-65.536-131.072h-262.144v-52.4288l-13.1072 13.1072-52.4288-52.4288v91.7504H393.216v-91.7504l-52.4288 52.4288-13.1072-13.1072v52.4288H65.536V65.536H327.68v121.2416l36.0448-36.0448 29.4912 29.4912V62.2592h262.144V180.224l49.152-49.152 16.384 16.384V62.2592h262.144V786.432z m-294.912-108.1344l-160.5632-160.5632-167.1168 167.1168-78.6432-78.6432 167.1168-167.1168L288.3584 278.528l78.6432-78.6432 160.5632 160.5632 163.84-163.84 78.6432 78.6432-163.84 163.84 160.5632 160.5632-78.6432 78.6432z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table-cell")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=NW(yt.nodes(e,{match:function(e){return Wy.checkNodeType(e,"table-cell")},universal:!0}),1),r=NW(n[0],2),o=r[0],i=r[1],a=Wy.getParentNode(e,o),u=(null==a?void 0:a.children.length)||0;if(!a||u<=1)an.removeNodes(e,{mode:"highest"});else{var s=Wy.getParentNode(e,a);null!=s&&(s.children||[]).forEach((function(t){ft.isElement(t)&&(t.children||[]).forEach((function(t){var n=Wy.findPath(e,t);n.length===i.length&&nH(n.slice(-1),i.slice(-1))&&an.removeNodes(e,{at:n})}))}))}}},e}(),IG=function(){function e(){this.title=OC("tableModule.header"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M704 128l-64 0L384 128 320 128 0 128l0 256 0 64 0 192 0 64 0 256 320 0 64 0 256 0 64 0 320 0 0-256 0-64L1024 448 1024 384 1024 128 704 128zM640 640 384 640 384 448l256 0L640 640zM64 448l256 0 0 192L64 640 64 448zM320 896 64 896l0-192 256 0L320 896zM640 896 384 896l0-192 256 0L640 896zM960 896l-256 0 0-192 256 0L960 896zM960 640l-256 0L704 448l256 0L960 640z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){var t=Wy.getSelectedNodeByType(e,"table");return null!=t&&KW(t)},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n=!t,r=Wy.getSelectedNodeByType(e,"table");null!=r&&GW(r).forEach((function(t){return an.setNodes(e,{isHeader:n},{at:Wy.findPath(e,t)})}))}},e}(),RG=function(){function e(){this.title=OC("tableModule.widthAuto"),this.iconSvg='<svg viewBox="0 0 1228 1024"><path d="M862.514337 563.200461H404.581995v121.753478a13.311987 13.311987 0 0 1-6.655993 11.468789 10.23999 10.23999 0 0 1-12.083188-1.433599l-204.799795-179.199821a13.721586 13.721586 0 0 1 0-20.479979l204.799795-179.302221a10.23999 10.23999 0 0 1 12.185588-1.535998 13.209587 13.209587 0 0 1 6.553593 11.673588v115.097485h457.932342V319.693504a11.571188 11.571188 0 0 1 18.841582-10.239989l204.799795 179.19982a13.721586 13.721586 0 0 1 0 20.47998l-204.799795 179.199821a10.23999 10.23999 0 0 1-12.185588 1.535998 13.311987 13.311987 0 0 1-6.655994-11.571188V563.200461zM136.499064 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785H15.155185A15.155185 15.155185 0 0 1 0 1008.844815V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086294a15.155185 15.155185 0 0 1 15.257585 15.155185zM1228.798771 14.951409v993.893406a15.257585 15.257585 0 0 1-15.155185 15.052785h-106.188693a15.155185 15.155185 0 0 1-15.155185-15.052785V14.951409a15.257585 15.257585 0 0 1 15.155185-15.052785h106.086293A15.155185 15.155185 0 0 1 1228.798771 15.053809z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){var t=Wy.getSelectedNodeByType(e,"table");return null!=t&&"100%"===t.width},e.prototype.isActive=function(e){return!!this.getValue(e)},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||null==Wy.getSelectedNodeByType(e,"table")},e.prototype.exec=function(e,t){if(!this.isDisabled(e)){var n={width:t?"auto":"100%"};an.setNodes(e,n,{mode:"highest"})}},e}(),LG={renderElems:[Zq,Jq,Qq],elemsToHtml:[{type:"table",elemToHtml:function(e,t){var n=e.width;return'<table style="width: '+(void 0===n?"auto":n)+';"><tbody>'+t+"</tbody></table>"}},{type:"table-row",elemToHtml:function(e,t){return"<tr>"+t+"</tr>"}},{type:"table-cell",elemToHtml:function(e,t){var n=e,r=n.colSpan,o=void 0===r?1:r,i=n.rowSpan,a=void 0===i?1:i,u=n.isHeader,s=void 0!==u&&u,l=n.width,c=s?"th":"td";return"<"+c+' colSpan="'+o+'" rowSpan="'+a+'" width="'+(void 0===l?"auto":l)+'">'+t+"</"+c+">"}}],preParseHtml:[eG],parseElemsHtml:[bG,wG,EG],menus:[{key:"insertTable",factory:function(){return new DG}},{key:"deleteTable",factory:function(){return new CG}},{key:"insertTableRow",factory:function(){return new xG}},{key:"deleteTableRow",factory:function(){return new SG}},{key:"insertTableCol",factory:function(){return new jG}},{key:"deleteTableCol",factory:function(){return new NG}},{key:"tableHeader",factory:function(){return new IG}},{key:"tableFullWidth",factory:function(){return new RG}}],editorPlugin:function(e){var t=e.insertBreak,n=e.deleteBackward,r=e.deleteForward,o=e.normalizeNode,i=e.insertData,a=e.handleTab,u=e.selectAll,s=e;return s.insertBreak=function(){null==Wy.getSelectedNodeByType(s,"table")?t():s.insertText("\n")},s.deleteBackward=function(e){if(!IW(s)){var t=s.selection;if(t){var r=yt.before(s,t);if(r){var o=RW(s,r),i=RW(s,t);if(o&&!i)return}}n(e)}},s.handleTab=function(){var t;if(Wy.getSelectedNodeByType(s,"table")){var n=yt.above(e);Wy.checkNodeType(n[0],"table-cell")&&an.select(e,n[1]);var r=yt.next(e);if(r)r[0]&&r[0].text&&(r=null!==(t=yt.above(e,{at:r[1]}))&&void 0!==t?t:r),an.select(e,r[1]);else{var o=s.children||[],i=o.length;if(Wy.checkNodeType(o[i-1],"table")){var u=Wy.genEmptyParagraph();an.insertNodes(s,u,{at:[i]}),s.handleTab()}}}else a()},s.deleteForward=function(e){IW(s)||r(e)},s.normalizeNode=function(e){var t=NW(e,2),n=t[0],r=t[1];if("table"!==Wy.getNodeType(n))return o([n,r]);if(Wy.isLastNode(s,n)){var i=Wy.genEmptyParagraph();an.insertNodes(s,i,{at:[r[0]+1]})}},s.insertData=function(e){if(null!=Wy.getSelectedNodeByType(s,"table")){var t=e.getData("text/plain");"\n"===t||/<img[^>]+>/.test(e.getData("text/html"))?i(e):yt.insertText(s,t)}else i(e)},s.selectAll=function(){var e=s.selection;if(null!=e){var t=Wy.getSelectedNodeByType(s,"table-cell");if(null!=t){var n=e.anchor,r=e.focus;if(At.equals(n.path.slice(0,3),r.path.slice(0,3)))if(0!==Dt.string(t).length){var o=Wy.findPath(s,t),i={anchor:yt.start(s,o),focus:yt.end(s,o)};s.select(i)}else u();else u()}else u()}else u()},s}};AC("en",{videoModule:{delete:"Delete",uploadVideo:"Upload video",insertVideo:"Insert video",videoSrc:"video source",insertPlaceHolder:"video file url, or third-party <iframe>",ok:"Ok",editSize:"Edit size",width:"Width",height:"Height"}}),AC("zh-CN",{videoModule:{delete:"删除视频",uploadVideo:"上传视频",insertVideo:"插入视频",videoSrc:"视频地址",insertPlaceHolder:"视频文件 url 或第三方 <iframe>",ok:"确定",editSize:"修改尺寸",width:"宽度",height:"高度"}});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var MG=function(){return MG=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},MG.apply(this,arguments)};function zG(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function $G(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function HG(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function VG(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){var i,a,u,s;i=r,a=o,u=(t=e[n](t)).done,s=t.value,Promise.resolve(s).then((function(e){i({value:e,done:u})}),a)}))}}}var UG="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function WG(e){var t={exports:{}};return e(t,t.exports),t.exports}var qG,GG,KG=function(e){return e&&e.Math==Math&&e},YG=KG("object"==typeof globalThis&&globalThis)||KG("object"==typeof window&&window)||KG("object"==typeof self&&self)||KG("object"==typeof UG&&UG)||function(){return this}()||Function("return this")(),XG=function(e){try{return!!e()}catch(t){return!0}},ZG=!XG((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),JG=Function.prototype.call,QG=JG.bind?JG.bind(JG):function(){return JG.apply(JG,arguments)},eK={}.propertyIsEnumerable,tK=Object.getOwnPropertyDescriptor,nK={f:tK&&!eK.call({1:2},1)?function(e){var t=tK(this,e);return!!t&&t.enumerable}:eK},rK=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},oK=Function.prototype,iK=oK.bind,aK=oK.call,uK=iK&&iK.bind(aK),sK=iK?function(e){return e&&uK(aK,e)}:function(e){return e&&function(){return aK.apply(e,arguments)}},lK=sK({}.toString),cK=sK("".slice),fK=function(e){return cK(lK(e),8,-1)},dK=YG.Object,pK=sK("".split),hK=XG((function(){return!dK("z").propertyIsEnumerable(0)}))?function(e){return"String"==fK(e)?pK(e,""):dK(e)}:dK,gK=YG.TypeError,vK=function(e){if(null==e)throw gK("Can't call method on "+e);return e},yK=function(e){return hK(vK(e))},mK=function(e){return"function"==typeof e},bK=function(e){return"object"==typeof e?null!==e:mK(e)},wK=function(e){return mK(e)?e:void 0},EK=function(e,t){return arguments.length<2?wK(YG[e]):YG[e]&&YG[e][t]},DK=sK({}.isPrototypeOf),CK=EK("navigator","userAgent")||"",xK=YG.process,SK=YG.Deno,AK=xK&&xK.versions||SK&&SK.version,OK=AK&&AK.v8;OK&&(GG=(qG=OK.split("."))[0]>0&&qG[0]<4?1:+(qG[0]+qG[1])),!GG&&CK&&(!(qG=CK.match(/Edge\/(\d+)/))||qG[1]>=74)&&(qG=CK.match(/Chrome\/(\d+)/))&&(GG=+qG[1]);var kK=GG,BK=!!Object.getOwnPropertySymbols&&!XG((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&kK&&kK<41})),FK=BK&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,_K=YG.Object,TK=FK?function(e){return"symbol"==typeof e}:function(e){var t=EK("Symbol");return mK(t)&&DK(t.prototype,_K(e))},PK=YG.String,jK=function(e){try{return PK(e)}catch(t){return"Object"}},NK=YG.TypeError,IK=function(e){if(mK(e))return e;throw NK(jK(e)+" is not a function")},RK=function(e,t){var n=e[t];return null==n?void 0:IK(n)},LK=YG.TypeError,MK=Object.defineProperty,zK=function(e,t){try{MK(YG,e,{value:t,configurable:!0,writable:!0})}catch(mG){YG[e]=t}return t},$K=YG["__core-js_shared__"]||zK("__core-js_shared__",{}),HK=WG((function(e){(e.exports=function(e,t){return $K[e]||($K[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),VK=YG.Object,UK=function(e){return VK(vK(e))},WK=sK({}.hasOwnProperty),qK=Object.hasOwn||function(e,t){return WK(UK(e),t)},GK=0,KK=Math.random(),YK=sK(1..toString),XK=function(e){return"Symbol("+(void 0===e?"":e)+")_"+YK(++GK+KK,36)},ZK=HK("wks"),JK=YG.Symbol,QK=JK&&JK.for,eY=FK?JK:JK&&JK.withoutSetter||XK,tY=function(e){if(!qK(ZK,e)||!BK&&"string"!=typeof ZK[e]){var t="Symbol."+e;BK&&qK(JK,e)?ZK[e]=JK[e]:ZK[e]=FK&&QK?QK(t):eY(t)}return ZK[e]},nY=YG.TypeError,rY=tY("toPrimitive"),oY=function(e){var t=function(e,t){if(!bK(e)||TK(e))return e;var n,r=RK(e,rY);if(r){if(void 0===t&&(t="default"),n=QG(r,e,t),!bK(n)||TK(n))return n;throw nY("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&mK(n=e.toString)&&!bK(r=QG(n,e)))return r;if(mK(n=e.valueOf)&&!bK(r=QG(n,e)))return r;if("string"!==t&&mK(n=e.toString)&&!bK(r=QG(n,e)))return r;throw LK("Can't convert object to primitive value")}(e,t)}(e,"string");return TK(t)?t:t+""},iY=YG.document,aY=bK(iY)&&bK(iY.createElement),uY=function(e){return aY?iY.createElement(e):{}},sY=!ZG&&!XG((function(){return 7!=Object.defineProperty(uY("div"),"a",{get:function(){return 7}}).a})),lY=Object.getOwnPropertyDescriptor,cY={f:ZG?lY:function(e,t){if(e=yK(e),t=oY(t),sY)try{return lY(e,t)}catch(n){}if(qK(e,t))return rK(!QG(nK.f,e,t),e[t])}},fY=YG.String,dY=YG.TypeError,pY=function(e){if(bK(e))return e;throw dY(fY(e)+" is not an object")},hY=YG.TypeError,gY=Object.defineProperty,vY={f:ZG?gY:function(e,t,n){if(pY(e),t=oY(t),pY(n),sY)try{return gY(e,t,n)}catch(r){}if("get"in n||"set"in n)throw hY("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},yY=ZG?function(e,t,n){return vY.f(e,t,rK(1,n))}:function(e,t,n){return e[t]=n,e},mY=sK(Function.toString);mK($K.inspectSource)||($K.inspectSource=function(e){return mY(e)});var bY,wY,EY,DY=$K.inspectSource,CY=YG.WeakMap,xY=mK(CY)&&/native code/.test(DY(CY)),SY=HK("keys"),AY=function(e){return SY[e]||(SY[e]=XK(e))},OY={},kY=YG.TypeError,BY=YG.WeakMap;if(xY||$K.state){var FY=$K.state||($K.state=new BY),_Y=sK(FY.get),TY=sK(FY.has),PY=sK(FY.set);bY=function(e,t){if(TY(FY,e))throw new kY("Object already initialized");return t.facade=e,PY(FY,e,t),t},wY=function(e){return _Y(FY,e)||{}},EY=function(e){return TY(FY,e)}}else{var jY=AY("state");OY[jY]=!0,bY=function(e,t){if(qK(e,jY))throw new kY("Object already initialized");return t.facade=e,yY(e,jY,t),t},wY=function(e){return qK(e,jY)?e[jY]:{}},EY=function(e){return qK(e,jY)}}var NY={set:bY,get:wY,has:EY,enforce:function(e){return EY(e)?wY(e):bY(e,{})},getterFor:function(e){return function(t){var n;if(!bK(t)||(n=wY(t)).type!==e)throw kY("Incompatible receiver, "+e+" required");return n}}},IY=Function.prototype,RY=ZG&&Object.getOwnPropertyDescriptor,LY=qK(IY,"name"),MY={EXISTS:LY,PROPER:LY&&"something"===function(){}.name,CONFIGURABLE:LY&&(!ZG||ZG&&RY(IY,"name").configurable)},zY=WG((function(e){var t=MY.CONFIGURABLE,n=NY.get,r=NY.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;mK(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!qK(i,"name")||t&&i.name!==f)&&yY(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==YG?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:yY(e,n,i)):l?e[n]=i:zK(n,i)})(Function.prototype,"toString",(function(){return mK(this)&&n(this).source||DY(this)}))})),$Y=Math.ceil,HY=Math.floor,VY=function(e){var t=+e;return t!=t||0===t?0:(t>0?HY:$Y)(t)},UY=Math.max,WY=Math.min,qY=function(e,t){var n=VY(e);return n<0?UY(n+t,0):WY(n,t)},GY=Math.min,KY=function(e){return e>0?GY(VY(e),9007199254740991):0},YY=function(e){return KY(e.length)},XY=function(e){return function(t,n,r){var o,i=yK(t),a=YY(i),u=qY(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},ZY={includes:XY(!0),indexOf:XY(!1)},JY=ZY.indexOf,QY=sK([].push),eX=function(e,t){var n,r=yK(e),o=0,i=[];for(n in r)!qK(OY,n)&&qK(r,n)&&QY(i,n);for(;t.length>o;)qK(r,n=t[o++])&&(~JY(i,n)||QY(i,n));return i},tX=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],nX=tX.concat("length","prototype"),rX={f:Object.getOwnPropertyNames||function(e){return eX(e,nX)}},oX={f:Object.getOwnPropertySymbols},iX=sK([].concat),aX=EK("Reflect","ownKeys")||function(e){var t=rX.f(pY(e)),n=oX.f;return n?iX(t,n(e)):t},uX=function(e,t){for(var n=aX(t),r=vY.f,o=cY.f,i=0;i<n.length;i++){var a=n[i];qK(e,a)||r(e,a,o(t,a))}},sX=/#|\.prototype\./,lX=function(e,t){var n=fX[cX(e)];return n==pX||n!=dX&&(mK(t)?XG(t):!!t)},cX=lX.normalize=function(e){return String(e).replace(sX,".").toLowerCase()},fX=lX.data={},dX=lX.NATIVE="N",pX=lX.POLYFILL="P",hX=lX,gX=cY.f,vX=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?YG:l?YG[u]||zK(u,{}):(YG[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=gX(n,r))&&a.value:n[r],!hX(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;uX(i,o)}(e.sham||o&&o.sham)&&yY(i,"sham",!0),zY(n,r,i,e)}},yX={};yX[tY("toStringTag")]="z";var mX="[object z]"===String(yX),bX=tY("toStringTag"),wX=YG.Object,EX="Arguments"==fK(function(){return arguments}()),DX=mX?fK:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=wX(e),bX))?n:EX?fK(t):"Object"==(r=fK(t))&&mK(t.callee)?"Arguments":r},CX=YG.String,xX=function(e){if("Symbol"===DX(e))throw TypeError("Cannot convert a Symbol value to a string");return CX(e)},SX="\t\n\v\f\r                　\u2028\u2029\ufeff",AX=sK("".replace),OX="["+SX+"]",kX=RegExp("^"+OX+OX+"*"),BX=RegExp(OX+OX+"*$"),FX=function(e){return function(t){var n=xX(vK(t));return 1&e&&(n=AX(n,kX,"")),2&e&&(n=AX(n,BX,"")),n}},_X={start:FX(1),end:FX(2),trim:FX(3)},TX=MY.PROPER,PX=_X.trim;function jX(e){return e.length?e[0].tagName.toLowerCase():""}function NX(e,t,n){void 0===t&&(t="auto"),void 0===n&&(n="auto");var r=Fr(e);return r.attr("width",t),r.attr("height",n),r[0].outerHTML}vX({target:"String",proto:!0,forced:("trim",XG((function(){return!!SX.trim()||"​᠎"!=="​᠎".trim()||TX&&"trim"!==SX.trim.name})))},{trim:function(){return PX(this)}}),vX({global:!0},{globalThis:YG}),Zr&&(Fr.fn.append=Zr),Lr&&(Fr.fn.on=Lr),so&&(Fr.fn.focus=so),jr&&(Fr.fn.attr=jr),Rr&&(Fr.fn.val=Rr),Kr&&(Fr.fn.html=Kr),Qr&&(Fr.fn.parent=Qr),Pr&&(Fr.fn.hasClass=Pr),oo&&(Fr.fn.empty=oo);var IX,RX={type:"video",renderElem:function(e,t,n){var r,o=e,i=o.src,a=void 0===i?"":i,u=o.width,s=void 0===u?"auto":u,l=o.height,c=void 0===l?"auto":l,f=Wy.isNodeSelected(n,e);if(0===a.trim().indexOf("<iframe ")){r=Ci("div",{className:"w-e-textarea-video-container","data-selected":f?"true":"",innerHTML:NX(a,s,c)})}else{var d=Ci("video",{controls:!0},Ci("source",{src:a,type:"video/mp4"}),"Sorry, your browser doesn't support embedded videos.\n 抱歉，浏览器不支持 video 视频");"auto"!==s&&(d.data.width=s),"auto"!==c&&(d.data.height=c),r=Ci("div",{className:"w-e-textarea-video-container","data-selected":f?"true":""},d)}return ii("div",{props:{contentEditable:!1},on:{mousedown:function(e){return e.preventDefault()}}},r)}},LX={type:"video",elemToHtml:function(e,t){var n=e,r=n.src,o=void 0===r?"":r,i=n.width,a=void 0===i?"auto":i,u=n.height,s=void 0===u?"auto":u,l='<div data-w-e-type="video" data-w-e-is-void>\n';return 0===o.trim().indexOf("<iframe ")?l+=NX(o,a,s):l+='<video controls="true" width="'+a+'" height="'+s+'"><source src="'+o+'" type="video/mp4"/></video>',l+"\n</div>"}},MX=Object.keys||function(e){return eX(e,tX)},zX=ZG?Object.defineProperties:function(e,t){pY(e);for(var n,r=yK(t),o=MX(t),i=o.length,a=0;i>a;)vY.f(e,n=o[a++],r[n]);return e},$X=EK("document","documentElement"),HX=AY("IE_PROTO"),VX=function(){},UX=function(e){return"<script>"+e+"<\/script>"},WX=function(e){e.write(UX("")),e.close();var t=e.parentWindow.Object;return e=null,t},qX=function(){try{IX=new ActiveXObject("htmlfile")}catch(r){}var e,t;qX="undefined"!=typeof document?document.domain&&IX?WX(IX):((t=uY("iframe")).style.display="none",$X.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(UX("document.F=Object")),e.close(),e.F):WX(IX);for(var n=tX.length;n--;)delete qX.prototype[tX[n]];return qX()};OY[HX]=!0;var GX=Object.create||function(e,t){var n;return null!==e?(VX.prototype=pY(e),n=new VX,VX.prototype=null,n[HX]=e):n=qX(),void 0===t?n:zX(n,t)},KX=tY("unscopables"),YX=Array.prototype;null==YX[KX]&&vY.f(YX,KX,{configurable:!0,value:GX(null)});var XX=function(e){YX[KX][e]=!0},ZX=ZY.includes;vX({target:"Array",proto:!0},{includes:function(e){return ZX(this,e,arguments.length>1?arguments[1]:void 0)}}),XX("includes");var JX={selector:"iframe,video,p",preParseHtml:function(e){var t=Fr(e),n=t;if("p"===jX(t)){var r=t.children();if(1===r.length){var o=r[0],i=o.tagName.toLowerCase();["iframe","video"].includes(i)&&(n=Fr(o))}}var a=jX(n);if("iframe"!==a&&"video"!==a)return n[0];if("video"===n.parent().attr("data-w-e-type"))return n[0];var u=Fr('<div data-w-e-type="video" data-w-e-is-void></div>');return u.append(n),u[0]}},QX=sK(sK.bind),eZ=function(e,t){return IK(e),void 0===t?e:QX?QX(e,t):function(){return e.apply(t,arguments)}},tZ=Array.isArray||function(e){return"Array"==fK(e)},nZ=function(){},rZ=[],oZ=EK("Reflect","construct"),iZ=/^\s*(?:class|function)\b/,aZ=sK(iZ.exec),uZ=!iZ.exec(nZ),sZ=function(e){if(!mK(e))return!1;try{return oZ(nZ,rZ,e),!0}catch(t){return!1}},lZ=!oZ||XG((function(){var e;return sZ(sZ.call)||!sZ(Object)||!sZ((function(){e=!0}))||e}))?function(e){if(!mK(e))return!1;switch(DX(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return uZ||!!aZ(iZ,DY(e))}:sZ,cZ=tY("species"),fZ=YG.Array,dZ=function(e,t){return new(tZ(n=e)&&(r=n.constructor,(lZ(r)&&(r===fZ||tZ(r.prototype))||bK(r)&&null===(r=r[cZ]))&&(r=void 0)),void 0===r?fZ:r)(0===t?0:t);var n,r},pZ=sK([].push),hZ=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=UK(s),g=hK(h),v=eZ(l,c),y=YY(g),m=0,b=f||dZ,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:pZ(w,d)}else switch(e){case 4:return!1;case 7:pZ(w,d)}return i?-1:r||o?o:w}},gZ={forEach:hZ(0),map:hZ(1),filter:hZ(2),some:hZ(3),every:hZ(4),find:hZ(5),findIndex:hZ(6),filterReject:hZ(7)},vZ=gZ.find,yZ=!0;"find"in[]&&Array(1).find((function(){yZ=!1})),vX({target:"Array",proto:!0,forced:yZ},{find:function(e){return vZ(this,e,arguments.length>1?arguments[1]:void 0)}}),XX("find");var mZ=mX?{}.toString:function(){return"[object "+DX(this)+"]"};function bZ(e,t,n){return void 0===t&&(t="auto"),void 0===n&&(n="auto"),{type:"video",src:e,width:t,height:n,children:[{text:""}]}}mX||zY(Object.prototype,"toString",mZ,{unsafe:!0});var wZ,EZ,DZ={selector:'div[data-w-e-type="video"]',parseElemHtml:function(e,t,n){var r=Fr(e),o="",i="auto",a="auto",u=r.find("iframe");if(u.length>0)return i=u.attr("width")||"auto",a=u.attr("height")||"auto",bZ(o=u[0].outerHTML,i,a);var s=r.find("video");return(o=s.attr("src")||"")||s.length>0&&(o=s.find("source").attr("src")||""),bZ(o,i=s.attr("width")||"auto",a=s.attr("height")||"auto")}},CZ=function(){var e=pY(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},xZ=YG.RegExp,SZ=XG((function(){var e=xZ("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),AZ=SZ||XG((function(){return!xZ("a","y").sticky})),OZ={BROKEN_CARET:SZ||XG((function(){var e=xZ("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:AZ,UNSUPPORTED_Y:SZ},kZ=YG.RegExp,BZ=XG((function(){var e=kZ(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),FZ=YG.RegExp,_Z=XG((function(){var e=FZ("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),TZ=NY.get,PZ=HK("native-string-replace",String.prototype.replace),jZ=RegExp.prototype.exec,NZ=jZ,IZ=sK("".charAt),RZ=sK("".indexOf),LZ=sK("".replace),MZ=sK("".slice),zZ=(EZ=/b*/g,QG(jZ,wZ=/a/,"a"),QG(jZ,EZ,"a"),0!==wZ.lastIndex||0!==EZ.lastIndex),$Z=OZ.BROKEN_CARET,HZ=void 0!==/()??/.exec("")[1];(zZ||HZ||$Z||BZ||_Z)&&(NZ=function(e){var t,n,r,o,i,a,u,s=this,l=TZ(s),c=xX(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=QG(NZ,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=$Z&&s.sticky,h=QG(CZ,s),g=s.source,v=0,y=c;if(p&&(h=LZ(h,"y",""),-1===RZ(h,"g")&&(h+="g"),y=MZ(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==IZ(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),HZ&&(n=new RegExp("^"+g+"$(?!\\s)",h)),zZ&&(r=s.lastIndex),o=QG(jZ,p?n:s,y),p?o?(o.input=MZ(o.input,v),o[0]=MZ(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:zZ&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),HZ&&o&&o.length>1&&QG(PZ,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=GX(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var VZ=NZ;vX({target:"RegExp",proto:!0,forced:/./.exec!==VZ},{exec:VZ});var UZ=Function.prototype,WZ=UZ.apply,qZ=UZ.bind,GZ=UZ.call,KZ="object"==typeof Reflect&&Reflect.apply||(qZ?GZ.bind(WZ):function(){return GZ.apply(WZ,arguments)}),YZ=(tY("species"),RegExp.prototype),XZ=sK("".charAt),ZZ=sK("".charCodeAt),JZ=sK("".slice),QZ=function(e){return function(t,n){var r,o,i=xX(vK(t)),a=VY(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=ZZ(i,a))<55296||r>56319||a+1===u||(o=ZZ(i,a+1))<56320||o>57343?e?XZ(i,a):r:e?JZ(i,a,a+2):o-56320+(r-55296<<10)+65536}},eJ={codeAt:QZ(!1),charAt:QZ(!0)},tJ=eJ.charAt,nJ=function(e,t,n){return t+(n?tJ(e,t).length:1)},rJ=Math.floor,oJ=sK("".charAt),iJ=sK("".replace),aJ=sK("".slice),uJ=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,sJ=/\$([$&'`]|\d{1,2})/g,lJ=function(e,t,n,r,o,i){var a=n+e.length,u=r.length,s=sJ;return void 0!==o&&(o=UK(o),s=uJ),iJ(i,s,(function(i,s){var l;switch(oJ(s,0)){case"$":return"$";case"&":return e;case"`":return aJ(t,0,n);case"'":return aJ(t,a);case"<":l=o[aJ(s,1,-1)];break;default:var c=+s;if(0===c)return i;if(c>u){var f=rJ(c/10);return 0===f?i:f<=u?void 0===r[f-1]?oJ(s,1):r[f-1]+oJ(s,1):i}l=r[c-1]}return void 0===l?"":l}))},cJ=YG.TypeError,fJ=function(e,t){var n=e.exec;if(mK(n)){var r=QG(n,e,t);return null!==r&&pY(r),r}if("RegExp"===fK(e))return QG(VZ,e,t);throw cJ("RegExp#exec called on incompatible receiver")},dJ=tY("replace"),pJ=Math.max,hJ=Math.min,gJ=sK([].concat),vJ=sK([].push),yJ=sK("".indexOf),mJ=sK("".slice),bJ="$0"==="a".replace(/./,"$0"),wJ=!!/./[dJ]&&""===/./[dJ]("a","$0");function EJ(e){return void 0===e&&(e="r"),e+"-"+Fo()}!function(e,t,n,r){var o=tY(e),i=!XG((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!XG((function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=sK(/./[o]),s=function(e,t,n){var r=wJ?"$":"$0";return[function(e,n){var r=vK(this),o=null==e?void 0:RK(e,dJ);return o?QG(o,e,r,n):QG(t,xX(r),e,n)},function(e,o){var i=pY(this),a=xX(e);if("string"==typeof o&&-1===yJ(o,r)&&-1===yJ(o,"$<")){var u=n(t,i,a,o);if(u.done)return u.value}var s=mK(o);s||(o=xX(o));var l=i.global;if(l){var c=i.unicode;i.lastIndex=0}for(var f=[];;){var d=fJ(i,a);if(null===d)break;if(vJ(f,d),!l)break;""===xX(d[0])&&(i.lastIndex=nJ(a,KY(i.lastIndex),c))}for(var p,h="",g=0,v=0;v<f.length;v++){for(var y=xX((d=f[v])[0]),m=pJ(hJ(VY(d.index),a.length),0),b=[],w=1;w<d.length;w++)vJ(b,void 0===(p=d[w])?p:String(p));var E=d.groups;if(s){var D=gJ([y],b,m,a);void 0!==E&&vJ(D,E);var C=xX(KZ(o,void 0,D))}else C=lJ(y,a,m,b,E,o);m>=g&&(h+=mJ(a,g,m)+C,g=m+y.length)}return h+mJ(a,g)}]}(0,""[e],(function(e,t,n,r,o){var a=sK(e),s=t.exec;return s===VZ||s===YZ.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));zY(String.prototype,e,s[0]),zY(YZ,o,s[1])}}("replace",0,!!XG((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!bJ||wJ);var DJ=YG.Promise,CJ=function(e,t,n){for(var r in t)zY(e,r,t[r],n);return e},xJ=YG.String,SJ=YG.TypeError,AJ=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=sK(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return pY(n),function(e){if("object"==typeof e||mK(e))return e;throw SJ("Can't set "+xJ(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),OJ=vY.f,kJ=tY("toStringTag"),BJ=function(e,t,n){e&&!qK(e=n?e:e.prototype,kJ)&&OJ(e,kJ,{configurable:!0,value:t})},FJ=tY("species"),_J=YG.TypeError,TJ=function(e,t){if(DK(t,e))return e;throw _J("Incorrect invocation")},PJ={},jJ=tY("iterator"),NJ=Array.prototype,IJ=tY("iterator"),RJ=function(e){if(null!=e)return RK(e,IJ)||RK(e,"@@iterator")||PJ[DX(e)]},LJ=YG.TypeError,MJ=function(e,t,n){var r,o;pY(e);try{if(!(r=RK(e,"return"))){if("throw"===t)throw n;return n}r=QG(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return pY(r),n},zJ=YG.TypeError,$J=function(e,t){this.stopped=e,this.result=t},HJ=$J.prototype,VJ=function(e,t,n){var r,o,i,a,u,s,l,c,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),g=eZ(t,f),v=function(e){return r&&MJ(r,"normal",e),new $J(!0,e)},y=function(e){return d?(pY(e),h?g(e[0],e[1],v):g(e[0],e[1])):h?g(e,v):g(e)};if(p)r=e;else{if(!(o=RJ(e)))throw zJ(jK(e)+" is not iterable");if(void 0!==(c=o)&&(PJ.Array===c||NJ[jJ]===c)){for(i=0,a=YY(e);a>i;i++)if((u=y(e[i]))&&DK(HJ,u))return u;return new $J(!1)}r=function(e,t){var n=arguments.length<2?RJ(e):t;if(IK(n))return pY(QG(n,e));throw LJ(jK(e)+" is not iterable")}(e,o)}for(s=r.next;!(l=QG(s,r)).done;){try{u=y(l.value)}catch(m){MJ(r,"throw",m)}if("object"==typeof u&&u&&DK(HJ,u))return u}return new $J(!1)},UJ=tY("iterator"),WJ=!1;try{var qJ=0,GJ={next:function(){return{done:!!qJ++}},return:function(){WJ=!0}};GJ[UJ]=function(){return this},Array.from(GJ,(function(){throw 2}))}catch(eg){}var KJ,YJ,XJ,ZJ,JJ=function(e,t){if(!t&&!WJ)return!1;var n=!1;try{var r={};r[UJ]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},QJ=YG.TypeError,eQ=tY("species"),tQ=sK([].slice),nQ=/(?:ipad|iphone|ipod).*applewebkit/i.test(CK),rQ="process"==fK(YG.process),oQ=YG.setImmediate,iQ=YG.clearImmediate,aQ=YG.process,uQ=YG.Dispatch,sQ=YG.Function,lQ=YG.MessageChannel,cQ=YG.String,fQ=0,dQ={};try{KJ=YG.location}catch(eg){}var pQ=function(e){if(qK(dQ,e)){var t=dQ[e];delete dQ[e],t()}},hQ=function(e){return function(){pQ(e)}},gQ=function(e){pQ(e.data)},vQ=function(e){YG.postMessage(cQ(e),KJ.protocol+"//"+KJ.host)};oQ&&iQ||(oQ=function(e){var t=tQ(arguments,1);return dQ[++fQ]=function(){KZ(mK(e)?e:sQ(e),void 0,t)},YJ(fQ),fQ},iQ=function(e){delete dQ[e]},rQ?YJ=function(e){aQ.nextTick(hQ(e))}:uQ&&uQ.now?YJ=function(e){uQ.now(hQ(e))}:lQ&&!nQ?(ZJ=(XJ=new lQ).port2,XJ.port1.onmessage=gQ,YJ=eZ(ZJ.postMessage,ZJ)):YG.addEventListener&&mK(YG.postMessage)&&!YG.importScripts&&KJ&&"file:"!==KJ.protocol&&!XG(vQ)?(YJ=vQ,YG.addEventListener("message",gQ,!1)):YJ="onreadystatechange"in uY("script")?function(e){$X.appendChild(uY("script")).onreadystatechange=function(){$X.removeChild(this),pQ(e)}}:function(e){setTimeout(hQ(e),0)});var yQ,mQ,bQ,wQ,EQ,DQ,CQ,xQ,SQ={set:oQ,clear:iQ},AQ=/ipad|iphone|ipod/i.test(CK)&&void 0!==YG.Pebble,OQ=/web0s(?!.*chrome)/i.test(CK),kQ=cY.f,BQ=SQ.set,FQ=YG.MutationObserver||YG.WebKitMutationObserver,_Q=YG.document,TQ=YG.process,PQ=YG.Promise,jQ=kQ(YG,"queueMicrotask"),NQ=jQ&&jQ.value;NQ||(yQ=function(){var e,t;for(rQ&&(e=TQ.domain)&&e.exit();mQ;){t=mQ.fn,mQ=mQ.next;try{t()}catch(n){throw mQ?wQ():bQ=void 0,n}}bQ=void 0,e&&e.enter()},nQ||rQ||OQ||!FQ||!_Q?!AQ&&PQ&&PQ.resolve?((CQ=PQ.resolve(void 0)).constructor=PQ,xQ=eZ(CQ.then,CQ),wQ=function(){xQ(yQ)}):rQ?wQ=function(){TQ.nextTick(yQ)}:(BQ=eZ(BQ,YG),wQ=function(){BQ(yQ)}):(EQ=!0,DQ=_Q.createTextNode(""),new FQ(yQ).observe(DQ,{characterData:!0}),wQ=function(){DQ.data=EQ=!EQ}));var IQ,RQ,LQ,MQ,zQ=NQ||function(e){var t={fn:e,next:void 0};bQ&&(bQ.next=t),mQ||(mQ=t,wQ()),bQ=t},$Q=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=IK(t),this.reject=IK(n)},HQ={f:function(e){return new $Q(e)}},VQ=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},UQ="object"==typeof window,WQ=SQ.set,qQ=tY("species"),GQ="Promise",KQ=NY.getterFor(GQ),YQ=NY.set,XQ=NY.getterFor(GQ),ZQ=DJ&&DJ.prototype,JQ=DJ,QQ=ZQ,e0=YG.TypeError,t0=YG.document,n0=YG.process,r0=HQ.f,o0=r0,i0=!!(t0&&t0.createEvent&&YG.dispatchEvent),a0=mK(YG.PromiseRejectionEvent),u0=!1,s0=hX(GQ,(function(){var e=DY(JQ),t=e!==String(JQ);if(!t&&66===kK)return!0;if(kK>=51&&/native code/.test(e))return!1;var n=new JQ((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[qQ]=r,!(u0=n.then((function(){}))instanceof r)||!t&&UQ&&!a0})),l0=s0||!JJ((function(e){JQ.all(e).catch((function(){}))})),c0=function(e){var t;return!(!bK(e)||!mK(t=e.then))&&t},f0=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;zQ((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&g0(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(e0("Promise-chain cycle")):(u=c0(a))?QG(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&p0(e)}))}},d0=function(e,t,n){var r,o;i0?((r=t0.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),YG.dispatchEvent(r)):r={promise:t,reason:n},!a0&&(o=YG["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=YG.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},p0=function(e){QG(WQ,YG,(function(){var t,n=e.facade,r=e.value;if(h0(e)&&(t=VQ((function(){rQ?n0.emit("unhandledRejection",r,n):d0("unhandledrejection",n,r)})),e.rejection=rQ||h0(e)?2:1,t.error))throw t.value}))},h0=function(e){return 1!==e.rejection&&!e.parent},g0=function(e){QG(WQ,YG,(function(){var t=e.facade;rQ?n0.emit("rejectionHandled",t):d0("rejectionhandled",t,e.value)}))},v0=function(e,t,n){return function(r){e(t,r,n)}},y0=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,f0(e,!0))},m0=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw e0("Promise can't be resolved itself");var r=c0(t);r?zQ((function(){var n={done:!1};try{QG(r,t,v0(m0,n,e),v0(y0,n,e))}catch(o){y0(n,o,e)}})):(e.value=t,e.state=1,f0(e,!1))}catch(o){y0({done:!1},o,e)}}};if(s0&&(QQ=(JQ=function(e){TJ(this,QQ),IK(e),QG(IQ,this);var t=KQ(this);try{e(v0(m0,t),v0(y0,t))}catch(n){y0(t,n)}}).prototype,(IQ=function(e){YQ(this,{type:GQ,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=CJ(QQ,{then:function(e,t){var n=XQ(this),r=n.reactions,o=r0(function(e,t){var n,r=pY(e).constructor;return void 0===r||null==(n=pY(r)[eQ])?t:function(e){if(lZ(e))return e;throw QJ(jK(e)+" is not a constructor")}(n)}(this,JQ));return o.ok=!mK(e)||e,o.fail=mK(t)&&t,o.domain=rQ?n0.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&f0(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),RQ=function(){var e=new IQ,t=KQ(e);this.promise=e,this.resolve=v0(m0,t),this.reject=v0(y0,t)},HQ.f=r0=function(e){return e===JQ||e===LQ?new RQ(e):o0(e)},mK(DJ)&&ZQ!==Object.prototype)){MQ=ZQ.then,u0||(zY(ZQ,"then",(function(e,t){var n=this;return new JQ((function(e,t){QG(MQ,n,e,t)})).then(e,t)}),{unsafe:!0}),zY(ZQ,"catch",QQ.catch,{unsafe:!0}));try{delete ZQ.constructor}catch(eg){}AJ&&AJ(ZQ,QQ)}function b0(e,t){return zG(this,void 0,void 0,(function(){var n,r,o,i,a,u,s;return $G(this,(function(l){switch(l.label){case 0:return t?(e.restoreSelection(),n=e.getMenuConfig("insertVideo"),r=n.onInsertedVideo,o=n.checkVideo,i=n.parseVideoSrc,[4,o(t)]):[2];case 1:return"string"==typeof(a=l.sent())?(e.alert(a,"error"),[2]):null==a?[2]:[4,i(t)];case 2:return 0!==(u=l.sent()).trim().indexOf("<iframe ")&&(u=u.replace(/</g,"&lt;").replace(/>/g,"&gt;")),s={type:"video",src:u,children:[{text:""}]},Promise.resolve().then((function(){an.insertNodes(e,s)})),r(s),[2]}}))}))}function w0(){return EJ("w-e-insert-video")}vX({global:!0,wrap:!0,forced:s0},{Promise:JQ}),BJ(JQ,GQ,!1),function(e){var t=EK("Promise"),n=vY.f;ZG&&t&&!t[FJ]&&n(t,FJ,{configurable:!0,get:function(){return this}})}(),LQ=EK(GQ),vX({target:GQ,stat:!0,forced:s0},{reject:function(e){var t=r0(this);return QG(t.reject,void 0,e),t.promise}}),vX({target:GQ,stat:!0,forced:s0},{resolve:function(e){return function(e,t){if(pY(e),bK(t)&&t.constructor===e)return t;var n=HQ.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),vX({target:GQ,stat:!0,forced:l0},{all:function(e){var t=this,n=r0(t),r=n.resolve,o=n.reject,i=VQ((function(){var n=IK(t.resolve),i=[],a=0,u=1;VJ(e,(function(e){var s=a++,l=!1;u++,QG(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=r0(t),r=n.reject,o=VQ((function(){var o=IK(t.resolve);VJ(e,(function(e){QG(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var E0=function(){function e(){this.title=OC("videoModule.insertVideo"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>',this.tag="button",this.showModal=!0,this.modalWidth=320,this.$content=null,this.srcInputId=w0(),this.buttonId=w0()}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||!!Wy.getSelectedElems(e).some((function(t){return"pre"===Wy.getNodeType(t)||!!e.isVoid(t)}))},e.prototype.getModalPositionNode=function(e){return null},e.prototype.getModalContentElem=function(e){var t=this,n=this.srcInputId,r=this.buttonId,o=HG(cD(OC("videoModule.videoSrc"),n,OC("videoModule.insertPlaceHolder")),2),i=o[0],a=Fr(o[1]),u=HG(fD(r,OC("videoModule.ok")),1)[0];if(null==this.$content){var s=Fr("<div></div>");s.on("click","#"+r,(function(r){return zG(t,void 0,void 0,(function(){var t;return $G(this,(function(o){switch(o.label){case 0:return r.preventDefault(),t=s.find("#"+n).val().trim(),[4,b0(e,t)];case 1:return o.sent(),e.hidePanelOrModal(),[2]}}))}))})),this.$content=s}var l=this.$content;return l.empty(),l.append(i),l.append(u),a.val(""),setTimeout((function(){a.focus()})),l[0]},e}(),D0=sK([].join),C0=hK!=Object,x0=function(e,t){var n=[].join;return!!n&&XG((function(){n.call(null,",",1)}))}();vX({target:"Array",proto:!0,forced:C0||!x0},{join:function(e){return D0(yK(this),void 0===e?",":e)}});var S0,A0,O0,k0=!XG((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),B0=AY("IE_PROTO"),F0=YG.Object,_0=F0.prototype,T0=k0?F0.getPrototypeOf:function(e){var t=UK(e);if(qK(t,B0))return t[B0];var n=t.constructor;return mK(n)&&t instanceof n?n.prototype:t instanceof F0?_0:null},P0=tY("iterator"),j0=!1;[].keys&&("next"in(O0=[].keys())?(A0=T0(T0(O0)))!==Object.prototype&&(S0=A0):j0=!0);var N0=null==S0||XG((function(){var e={};return S0[P0].call(e)!==e}));N0&&(S0={}),mK(S0[P0])||zY(S0,P0,(function(){return this}));var I0={IteratorPrototype:S0,BUGGY_SAFARI_ITERATORS:j0},R0=I0.IteratorPrototype,L0=function(){return this},M0=MY.PROPER,z0=MY.CONFIGURABLE,$0=I0.IteratorPrototype,H0=I0.BUGGY_SAFARI_ITERATORS,V0=tY("iterator"),U0=function(){return this},W0=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=GX(R0,{next:rK(1,s)}),BJ(u,l,!1),PJ[l]=L0;var c,f,d,p=function(e){if(e===o&&m)return m;if(!H0&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[V0]||v["@@iterator"]||o&&v[o],m=!H0&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=T0(b.call(new e)))!==Object.prototype&&c.next&&(T0(c)!==$0&&(AJ?AJ(c,$0):mK(c[V0])||zY(c,V0,U0)),BJ(c,h,!0)),M0&&"values"==o&&y&&"values"!==y.name&&(z0?yY(v,"name","values"):(g=!0,m=function(){return QG(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(H0||g||!(d in v))&&zY(v,d,f[d]);else vX({target:t,proto:!0,forced:H0||g},f);return v[V0]!==m&&zY(v,V0,m,{name:o}),PJ[t]=m,f},q0=NY.set,G0=NY.getterFor("Array Iterator"),K0=W0(Array,"Array",(function(e,t){q0(this,{type:"Array Iterator",target:yK(e),index:0,kind:t})}),(function(){var e=G0(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");PJ.Arguments=PJ.Array,XX("keys"),XX("values"),XX("entries");var Y0=eJ.charAt,X0=NY.set,Z0=NY.getterFor("String Iterator");W0(String,"String",(function(e){X0(this,{type:"String Iterator",string:xX(e),index:0})}),(function(){var e,t=Z0(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=Y0(n,r),t.index+=e.length,{value:e,done:!1})}));var J0=function(e,t,n){var r=oY(t);r in e?vY.f(e,r,rK(0,n)):e[r]=n},Q0=YG.Array,e1=Math.max,t1=rX.f,n1="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],r1={f:function(e){return n1&&"Window"==fK(e)?function(e){try{return t1(e)}catch(t){return function(e,t,n){for(var r=YY(e),o=qY(void 0,r),i=qY(r,r),a=Q0(e1(i-o,0)),u=0;o<i;o++,u++)J0(a,u,e[o]);return a.length=u,a}(n1)}}(e):t1(yK(e))}},o1=XG((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),i1=Object.isExtensible,a1=XG((function(){i1(1)}))||o1?function(e){return!!bK(e)&&(!o1||"ArrayBuffer"!=fK(e))&&(!i1||i1(e))}:i1,u1=!XG((function(){return Object.isExtensible(Object.preventExtensions({}))})),s1=WG((function(e){var t=vY.f,n=!1,r=XK("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=rX.f,t=sK([].splice),o={};o[r]=1,e(o).length&&(rX.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},vX({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:r1.f}))},fastKey:function(e,t){if(!bK(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!qK(e,r)){if(!a1(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!qK(e,r)){if(!a1(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return u1&&n&&a1(e)&&!qK(e,r)&&i(e),e}};OY[r]=!0})),l1=s1.getWeakData,c1=NY.set,f1=NY.getterFor,d1=gZ.find,p1=gZ.findIndex,h1=sK([].splice),g1=0,v1=function(e){return e.frozen||(e.frozen=new y1)},y1=function(){this.entries=[]},m1=function(e,t){return d1(e.entries,(function(e){return e[0]===t}))};y1.prototype={get:function(e){var t=m1(this,e);if(t)return t[1]},has:function(e){return!!m1(this,e)},set:function(e,t){var n=m1(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=p1(this.entries,(function(t){return t[0]===e}));return~t&&h1(this.entries,t,1),!!~t}};var b1,w1={getConstructor:function(e,t,n,r){var o=e((function(e,o){TJ(e,i),c1(e,{type:t,id:g1++,frozen:void 0}),null!=o&&VJ(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=f1(t),u=function(e,t,n){var r=a(e),o=l1(pY(t),!0);return!0===o?v1(r).set(t,n):o[r.id]=n,e};return CJ(i,{delete:function(e){var t=a(this);if(!bK(e))return!1;var n=l1(e);return!0===n?v1(t).delete(e):n&&qK(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!bK(e))return!1;var n=l1(e);return!0===n?v1(t).has(e):n&&qK(n,t.id)}}),CJ(i,n?{get:function(e){var t=a(this);if(bK(e)){var n=l1(e);return!0===n?v1(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},E1=NY.enforce,D1=!YG.ActiveXObject&&"ActiveXObject"in YG,C1=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},x1=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=YG[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=sK(u[e]);zY(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!bK(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!bK(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!bK(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(hX(e,!mK(a)||!(o||u.forEach&&!XG((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),s1.enable();else if(hX(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=XG((function(){f.has(1)})),h=JJ((function(e){new a(e)})),g=!o&&XG((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){TJ(e,u);var n,o,l,c,f,d=(n=new a,o=e,l=s,AJ&&mK(c=o.constructor)&&c!==l&&bK(f=c.prototype)&&f!==l.prototype&&AJ(n,f),n);return null!=t&&VJ(t,d[i],{that:d,AS_ENTRIES:r}),d}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,vX({global:!0,forced:s!=a},l),BJ(s,e),o||n.setStrong(s,e,r),s}("WeakMap",C1,w1);if(xY&&D1){b1=w1.getConstructor(C1,"WeakMap",!0),s1.enable();var S1=x1.prototype,A1=sK(S1.delete),O1=sK(S1.has),k1=sK(S1.get),B1=sK(S1.set);CJ(S1,{delete:function(e){if(bK(e)&&!a1(e)){var t=E1(this);return t.frozen||(t.frozen=new b1),A1(this,e)||t.frozen.delete(e)}return A1(this,e)},has:function(e){if(bK(e)&&!a1(e)){var t=E1(this);return t.frozen||(t.frozen=new b1),O1(this,e)||t.frozen.has(e)}return O1(this,e)},get:function(e){if(bK(e)&&!a1(e)){var t=E1(this);return t.frozen||(t.frozen=new b1),O1(this,e)?k1(this,e):t.frozen.get(e)}return k1(this,e)},set:function(e,t){if(bK(e)&&!a1(e)){var n=E1(this);n.frozen||(n.frozen=new b1),O1(this,e)?B1(this,e,t):n.frozen.set(e,t)}else B1(this,e,t);return this}})}var F1={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},_1=uY("span").classList,T1=_1&&_1.constructor&&_1.constructor.prototype,P1=T1===Object.prototype?void 0:T1,j1=tY("iterator"),N1=tY("toStringTag"),I1=K0.values,R1=function(e,t){if(e){if(e[j1]!==I1)try{yY(e,j1,I1)}catch(r){e[j1]=I1}if(e[N1]||yY(e,N1,t),F1[t])for(var n in K0)if(e[n]!==K0[n])try{yY(e,n,K0[n])}catch(r){e[n]=K0[n]}}};for(var L1 in F1)R1(YG[L1]&&YG[L1].prototype,L1);R1(P1,"DOMTokenList");var M1=MY.EXISTS,z1=vY.f,$1=Function.prototype,H1=sK($1.toString),V1=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,U1=sK(V1.exec);ZG&&!M1&&z1($1,"name",{configurable:!0,get:function(){try{return U1(V1,H1(this))[1]}catch(eg){return""}}});var W1=tY("species"),q1=kK>=51||!XG((function(){var e=[];return(e.constructor={})[W1]=function(){return{foo:1}},1!==e.slice(Boolean).foo})),G1=tY("species"),K1=YG.Array,Y1=Math.max;function X1(e){return e.getMenuConfig("uploadVideo")}vX({target:"Array",proto:!0,forced:!q1},{slice:function(e,t){var n,r,o,i=yK(this),a=YY(i),u=qY(e,a),s=qY(void 0===t?a:t,a);if(tZ(i)&&(n=i.constructor,(lZ(n)&&(n===K1||tZ(n.prototype))||bK(n)&&null===(n=n[G1]))&&(n=void 0),n===K1||void 0===n))return tQ(i,u,s);for(r=new(void 0===n?K1:n)(Y1(s-u,0)),o=0;u<s;u++,o++)u in i&&J0(r,o,i[u]);return r.length=o,r}});var Z1=new WeakMap;function J1(e,t){return zG(this,void 0,void 0,(function(){var n,r,o,i;return $G(this,(function(a){switch(a.label){case 0:return n=function(e){var t=Z1.get(e);if(null!=t)return t;var n=X1(e),r=n.onSuccess,o=n.onProgress,i=n.onFailed,a=n.customInsert,u=n.onError;return t=ND(MG(MG({},n),{onProgress:function(t){e.showProgressBar(t),o&&o(t)},onSuccess:function(t,n){if(a)a(n,(function(t){return b0(e,t)}));else{var o=n.errno,u=void 0===o?1:o,s=n.data,l=void 0===s?{}:s;if(0!==u)return console.error("'"+t.name+"' upload failed",n),void i(t,n);var c=l.url;b0(e,void 0===c?"":c),r(t,n)}},onError:function(e,t,n){var r=e.name;console.error("'"+r+" upload error",t,n),u&&u(e,t,n)}})),Z1.set(e,t),t}(e),r=t.name,o=t.type,i=t.size,n.addFile({name:r,type:o,size:i,data:t}),[4,n.upload()];case 1:return a.sent(),[2]}}))}))}var Q1=function(){function e(){this.title=OC("videoModule.uploadVideo"),this.iconSvg='<svg viewBox="0 0 1056 1024"><path d="M805.902261 521.819882a251.441452 251.441452 0 0 0-251.011972 246.600033 251.051015 251.051015 0 1 0 502.023944 8.823877 253.237463 253.237463 0 0 0-251.011972-255.42391z m59.463561 240.001647v129.898403h-116.701631v-129.898403h-44.041298l101.279368-103.504859 101.279368 103.504859z" p-id="6802"></path><path d="M788.254507 0.000781H99.094092A98.663439 98.663439 0 0 0 0.001171 99.093701v590.067495a98.663439 98.663439 0 0 0 99.092921 99.092921h411.7549a266.434235 266.434235 0 0 1-2.186448-41.815807 275.843767 275.843767 0 0 1 275.180024-270.729042 270.650955 270.650955 0 0 1 103.504859 19.834201V99.093701A101.51363 101.51363 0 0 0 788.254507 0.000781zM295.054441 640.747004V147.507894l394.146189 246.600033z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){var n=this.getMenuConfig(e),r=n.allowedFileTypes,o=void 0===r?[]:r,i=n.customBrowseAndUpload;if(i)i((function(t){return b0(e,t)}));else{var a="";o.length>0&&(a='accept="'+o.join(", ")+'"');var u=Fr("body"),s=Fr('<input type="file" '+a+" multiple/>");s.hide(),u.append(s),s.click(),s.on("change",(function(){var t=s[0].files;!function(e,t){var n,r;zG(this,void 0,void 0,(function(){var o,i,a,u,s,l;return $G(this,(function(c){switch(c.label){case 0:if(null==t)return[2];o=Array.prototype.slice.call(t),i=X1(e).customUpload,c.label=1;case 1:c.trys.push([1,9,10,15]),a=VG(o),c.label=2;case 2:return[4,a.next()];case 3:return(u=c.sent()).done?[3,8]:(s=u.value,i?[4,i(s,(function(t){return b0(e,t)}))]:[3,5]);case 4:return c.sent(),[3,7];case 5:return[4,J1(e,s)];case 6:c.sent(),c.label=7;case 7:return[3,2];case 8:return[3,15];case 9:return l=c.sent(),n={error:l},[3,15];case 10:return c.trys.push([10,,13,14]),u&&!u.done&&(r=a.return)?[4,r.call(a)]:[3,12];case 11:c.sent(),c.label=12;case 12:return[3,14];case 13:if(n)throw n.error;return[7];case 14:return[7];case 15:return[2]}}))}))}(e,t)}))}},e.prototype.isDisabled=function(e){var t=e.selection;return null==t||!jt.isCollapsed(t)||!!Wy.getSelectedElems(e).some((function(t){return"pre"===Wy.getNodeType(t)||!!e.isVoid(t)}))},e.prototype.getMenuConfig=function(e){return e.getMenuConfig("uploadVideo")},e}(),e2=MY.PROPER,t2=RegExp.prototype,n2=t2.toString,r2=sK(CZ),o2=XG((function(){return"/a/b"!=n2.call({source:"a",flags:"b"})})),i2=e2&&"toString"!=n2.name;function a2(){return EJ("w-e-insert-video")}(o2||i2)&&zY(RegExp.prototype,"toString",(function(){var e=pY(this),t=xX(e.source),n=e.flags;return"/"+t+"/"+xX(void 0===n&&DK(t2,e)&&!("flags"in t2)?r2(e):n)}),{unsafe:!0});var u2=function(){function e(){this.title=OC("videoModule.editSize"),this.tag="button",this.showModal=!0,this.modalWidth=320,this.$content=null,this.widthInputId=a2(),this.heightInputId=a2(),this.buttonId=a2()}return e.prototype.getSelectedVideoNode=function(e){return Wy.getSelectedNodeByType(e,"video")},e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.exec=function(e,t){},e.prototype.isDisabled=function(e){return null==e.selection||null==this.getSelectedVideoNode(e)},e.prototype.getModalPositionNode=function(e){return this.getSelectedVideoNode(e)},e.prototype.getModalContentElem=function(e){var t=this,n=t.widthInputId,r=t.heightInputId,o=t.buttonId,i=HG(cD(OC("videoModule.width"),n,"auto"),2),a=i[0],u=Fr(i[1]),s=HG(cD(OC("videoModule.height"),r,"auto"),2),l=s[0],c=Fr(s[1]),f=HG(fD(o,OC("videoModule.ok")),1)[0];if(null==this.$content){var d=Fr("<div></div>");d.on("click","#"+o,(function(t){t.preventDefault();var o=d.find("#"+n).val().trim(),i=d.find("#"+r).val().trim(),a=parseInt(o),u=parseInt(i),s=a?a.toString():"auto",l=u?u.toString():"auto";e.restoreSelection(),an.setNodes(e,{width:s,height:l},{match:function(e){return Wy.checkNodeType(e,"video")}}),e.hidePanelOrModal()})),this.$content=d}var p=this.$content;p.empty(),p.append(a),p.append(l),p.append(f);var h=this.getSelectedVideoNode(e);if(null==h)return p[0];var g=h.width,v=void 0===g?"auto":g,y=h.height,m=void 0===y?"auto":y;return u.val(v),c.val(m),setTimeout((function(){u.focus()})),p[0]},e}(),s2={renderElems:[RX],elemsToHtml:[LX],preParseHtml:[JX],parseElemsHtml:[DZ],menus:[{key:"insertVideo",factory:function(){return new E0},config:{onInsertedVideo:function(e){},checkVideo:function(e){return!0},parseVideoSrc:function(e){return e}}},{key:"uploadVideo",factory:function(){return new Q1},config:{server:"",fieldName:"wangeditor-uploaded-video",maxFileSize:10485760,maxNumberOfFiles:5,allowedFileTypes:["video/*"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:3e4,onBeforeUpload:function(e){return e},onProgress:function(e){},onSuccess:function(e,t){},onFailed:function(e,t){},onError:function(e,t,n){}}},{key:"editVideoSize",factory:function(){return new u2}}],editorPlugin:function(e){var t=e.isVoid,n=e.normalizeNode,r=e;return r.isVoid=function(e){return"video"===e.type||t(e)},r.normalizeNode=function(e){var t=HG(e,2),o=t[0],i=t[1];return"video"===Wy.getNodeType(o)&&Wy.isLastNode(r,o)&&an.insertNodes(r,Wy.genEmptyParagraph(),{at:[i[0]+1]}),n([o,i])},r}};AC("en",{uploadImgModule:{uploadImage:"Upload Image",uploadError:"{{fileName}} upload error"}}),AC("zh-CN",{uploadImgModule:{uploadImage:"上传图片",uploadError:"{{fileName}} 上传出错"}});var l2="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function c2(e){var t={exports:{}};return e(t,t.exports),t.exports}var f2,d2,p2=function(e){return e&&e.Math==Math&&e},h2=p2("object"==typeof globalThis&&globalThis)||p2("object"==typeof window&&window)||p2("object"==typeof self&&self)||p2("object"==typeof l2&&l2)||function(){return this}()||Function("return this")(),g2=function(e){try{return!!e()}catch(t){return!0}},v2=!g2((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),y2=Function.prototype.call,m2=y2.bind?y2.bind(y2):function(){return y2.apply(y2,arguments)},b2={}.propertyIsEnumerable,w2=Object.getOwnPropertyDescriptor,E2={f:w2&&!b2.call({1:2},1)?function(e){var t=w2(this,e);return!!t&&t.enumerable}:b2},D2=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},C2=Function.prototype,x2=C2.bind,S2=C2.call,A2=x2&&x2.bind(S2),O2=x2?function(e){return e&&A2(S2,e)}:function(e){return e&&function(){return S2.apply(e,arguments)}},k2=O2({}.toString),B2=O2("".slice),F2=function(e){return B2(k2(e),8,-1)},_2=h2.Object,T2=O2("".split),P2=g2((function(){return!_2("z").propertyIsEnumerable(0)}))?function(e){return"String"==F2(e)?T2(e,""):_2(e)}:_2,j2=h2.TypeError,N2=function(e){if(null==e)throw j2("Can't call method on "+e);return e},I2=function(e){return P2(N2(e))},R2=function(e){return"function"==typeof e},L2=function(e){return"object"==typeof e?null!==e:R2(e)},M2=function(e){return R2(e)?e:void 0},z2=function(e,t){return arguments.length<2?M2(h2[e]):h2[e]&&h2[e][t]},$2=O2({}.isPrototypeOf),H2=z2("navigator","userAgent")||"",V2=h2.process,U2=h2.Deno,W2=V2&&V2.versions||U2&&U2.version,q2=W2&&W2.v8;q2&&(d2=(f2=q2.split("."))[0]>0&&f2[0]<4?1:+(f2[0]+f2[1])),!d2&&H2&&(!(f2=H2.match(/Edge\/(\d+)/))||f2[1]>=74)&&(f2=H2.match(/Chrome\/(\d+)/))&&(d2=+f2[1]);var G2=d2,K2=!!Object.getOwnPropertySymbols&&!g2((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&G2&&G2<41})),Y2=K2&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,X2=h2.Object,Z2=Y2?function(e){return"symbol"==typeof e}:function(e){var t=z2("Symbol");return R2(t)&&$2(t.prototype,X2(e))},J2=h2.String,Q2=function(e){try{return J2(e)}catch(t){return"Object"}},e4=h2.TypeError,t4=function(e){if(R2(e))return e;throw e4(Q2(e)+" is not a function")},n4=function(e,t){var n=e[t];return null==n?void 0:t4(n)},r4=h2.TypeError,o4=Object.defineProperty,i4=function(e,t){try{o4(h2,e,{value:t,configurable:!0,writable:!0})}catch(mG){h2[e]=t}return t},a4=h2["__core-js_shared__"]||i4("__core-js_shared__",{}),u4=c2((function(e){(e.exports=function(e,t){return a4[e]||(a4[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),s4=h2.Object,l4=function(e){return s4(N2(e))},c4=O2({}.hasOwnProperty),f4=Object.hasOwn||function(e,t){return c4(l4(e),t)},d4=0,p4=Math.random(),h4=O2(1..toString),g4=function(e){return"Symbol("+(void 0===e?"":e)+")_"+h4(++d4+p4,36)},v4=u4("wks"),y4=h2.Symbol,m4=y4&&y4.for,b4=Y2?y4:y4&&y4.withoutSetter||g4,w4=function(e){if(!f4(v4,e)||!K2&&"string"!=typeof v4[e]){var t="Symbol."+e;K2&&f4(y4,e)?v4[e]=y4[e]:v4[e]=Y2&&m4?m4(t):b4(t)}return v4[e]},E4=h2.TypeError,D4=w4("toPrimitive"),C4=function(e){var t=function(e,t){if(!L2(e)||Z2(e))return e;var n,r=n4(e,D4);if(r){if(void 0===t&&(t="default"),n=m2(r,e,t),!L2(n)||Z2(n))return n;throw E4("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&R2(n=e.toString)&&!L2(r=m2(n,e)))return r;if(R2(n=e.valueOf)&&!L2(r=m2(n,e)))return r;if("string"!==t&&R2(n=e.toString)&&!L2(r=m2(n,e)))return r;throw r4("Can't convert object to primitive value")}(e,t)}(e,"string");return Z2(t)?t:t+""},x4=h2.document,S4=L2(x4)&&L2(x4.createElement),A4=function(e){return S4?x4.createElement(e):{}},O4=!v2&&!g2((function(){return 7!=Object.defineProperty(A4("div"),"a",{get:function(){return 7}}).a})),k4=Object.getOwnPropertyDescriptor,B4={f:v2?k4:function(e,t){if(e=I2(e),t=C4(t),O4)try{return k4(e,t)}catch(n){}if(f4(e,t))return D2(!m2(E2.f,e,t),e[t])}},F4=h2.String,_4=h2.TypeError,T4=function(e){if(L2(e))return e;throw _4(F4(e)+" is not an object")},P4=h2.TypeError,j4=Object.defineProperty,N4={f:v2?j4:function(e,t,n){if(T4(e),t=C4(t),T4(n),O4)try{return j4(e,t,n)}catch(r){}if("get"in n||"set"in n)throw P4("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},I4=v2?function(e,t,n){return N4.f(e,t,D2(1,n))}:function(e,t,n){return e[t]=n,e},R4=O2(Function.toString);R2(a4.inspectSource)||(a4.inspectSource=function(e){return R4(e)});var L4,M4,z4,$4=a4.inspectSource,H4=h2.WeakMap,V4=R2(H4)&&/native code/.test($4(H4)),U4=u4("keys"),W4=function(e){return U4[e]||(U4[e]=g4(e))},q4={},G4=h2.TypeError,K4=h2.WeakMap;if(V4||a4.state){var Y4=a4.state||(a4.state=new K4),X4=O2(Y4.get),Z4=O2(Y4.has),J4=O2(Y4.set);L4=function(e,t){if(Z4(Y4,e))throw new G4("Object already initialized");return t.facade=e,J4(Y4,e,t),t},M4=function(e){return X4(Y4,e)||{}},z4=function(e){return Z4(Y4,e)}}else{var Q4=W4("state");q4[Q4]=!0,L4=function(e,t){if(f4(e,Q4))throw new G4("Object already initialized");return t.facade=e,I4(e,Q4,t),t},M4=function(e){return f4(e,Q4)?e[Q4]:{}},z4=function(e){return f4(e,Q4)}}var e6={set:L4,get:M4,has:z4,enforce:function(e){return z4(e)?M4(e):L4(e,{})},getterFor:function(e){return function(t){var n;if(!L2(t)||(n=M4(t)).type!==e)throw G4("Incompatible receiver, "+e+" required");return n}}},t6=Function.prototype,n6=v2&&Object.getOwnPropertyDescriptor,r6=f4(t6,"name"),o6={EXISTS:r6,PROPER:r6&&"something"===function(){}.name,CONFIGURABLE:r6&&(!v2||v2&&n6(t6,"name").configurable)},i6=c2((function(e){var t=o6.CONFIGURABLE,n=e6.get,r=e6.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;R2(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!f4(i,"name")||t&&i.name!==f)&&I4(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==h2?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:I4(e,n,i)):l?e[n]=i:i4(n,i)})(Function.prototype,"toString",(function(){return R2(this)&&n(this).source||$4(this)}))})),a6=Math.ceil,u6=Math.floor,s6=function(e){var t=+e;return t!=t||0===t?0:(t>0?u6:a6)(t)},l6=Math.max,c6=Math.min,f6=function(e,t){var n=s6(e);return n<0?l6(n+t,0):c6(n,t)},d6=Math.min,p6=function(e){return e>0?d6(s6(e),9007199254740991):0},h6=function(e){return p6(e.length)},g6=function(e){return function(t,n,r){var o,i=I2(t),a=h6(i),u=f6(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},v6=(g6(!0),g6(!1)),y6=O2([].push),m6=function(e,t){var n,r=I2(e),o=0,i=[];for(n in r)!f4(q4,n)&&f4(r,n)&&y6(i,n);for(;t.length>o;)f4(r,n=t[o++])&&(~v6(i,n)||y6(i,n));return i},b6=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],w6=b6.concat("length","prototype"),E6={f:Object.getOwnPropertyNames||function(e){return m6(e,w6)}},D6={f:Object.getOwnPropertySymbols},C6=O2([].concat),x6=z2("Reflect","ownKeys")||function(e){var t=E6.f(T4(e)),n=D6.f;return n?C6(t,n(e)):t},S6=function(e,t){for(var n=x6(t),r=N4.f,o=B4.f,i=0;i<n.length;i++){var a=n[i];f4(e,a)||r(e,a,o(t,a))}},A6=/#|\.prototype\./,O6=function(e,t){var n=B6[k6(e)];return n==_6||n!=F6&&(R2(t)?g2(t):!!t)},k6=O6.normalize=function(e){return String(e).replace(A6,".").toLowerCase()},B6=O6.data={},F6=O6.NATIVE="N",_6=O6.POLYFILL="P",T6=O6,P6=B4.f,j6=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?h2:l?h2[u]||i4(u,{}):(h2[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=P6(n,r))&&a.value:n[r],!T6(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;S6(i,o)}(e.sham||o&&o.sham)&&I4(i,"sham",!0),i6(n,r,i,e)}},N6=Array.isArray||function(e){return"Array"==F2(e)},I6={};I6[w4("toStringTag")]="z";var R6="[object z]"===String(I6),L6=w4("toStringTag"),M6=h2.Object,z6="Arguments"==F2(function(){return arguments}()),$6=R6?F2:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=M6(e),L6))?n:z6?F2(t):"Object"==(r=F2(t))&&R2(t.callee)?"Arguments":r},H6=function(){},V6=[],U6=z2("Reflect","construct"),W6=/^\s*(?:class|function)\b/,q6=O2(W6.exec),G6=!W6.exec(H6),K6=function(e){if(!R2(e))return!1;try{return U6(H6,V6,e),!0}catch(t){return!1}},Y6=!U6||g2((function(){var e;return K6(K6.call)||!K6(Object)||!K6((function(){e=!0}))||e}))?function(e){if(!R2(e))return!1;switch($6(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return G6||!!q6(W6,$4(e))}:K6,X6=function(e,t,n){var r=C4(t);r in e?N4.f(e,r,D2(0,n)):e[r]=n},Z6=w4("species"),J6=O2([].slice),Q6=("slice",G2>=51||!g2((function(){var e=[];return(e.constructor={})[Z6]=function(){return{foo:1}},1!==e.slice(Boolean).foo}))),e3=w4("species"),t3=h2.Array,n3=Math.max;j6({target:"Array",proto:!0,forced:!Q6},{slice:function(e,t){var n,r,o,i=I2(this),a=h6(i),u=f6(e,a),s=f6(void 0===t?a:t,a);if(N6(i)&&(n=i.constructor,(Y6(n)&&(n===t3||N6(n.prototype))||L2(n)&&null===(n=n[e3]))&&(n=void 0),n===t3||void 0===n))return J6(i,u,s);for(r=new(void 0===n?t3:n)(n3(s-u,0)),o=0;u<s;u++,o++)u in i&&X6(r,o,i[u]);return r.length=o,r}});var r3=R6?{}.toString:function(){return"[object "+$6(this)+"]"};R6||i6(Object.prototype,"toString",r3,{unsafe:!0});var o3,i3=h2.String,a3=function(e){if("Symbol"===$6(e))throw TypeError("Cannot convert a Symbol value to a string");return i3(e)},u3=function(){var e=T4(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},s3=h2.RegExp,l3=g2((function(){var e=s3("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),c3=l3||g2((function(){return!s3("a","y").sticky})),f3={BROKEN_CARET:l3||g2((function(){var e=s3("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:c3,UNSUPPORTED_Y:l3},d3=Object.keys||function(e){return m6(e,b6)},p3=v2?Object.defineProperties:function(e,t){T4(e);for(var n,r=I2(t),o=d3(t),i=o.length,a=0;i>a;)N4.f(e,n=o[a++],r[n]);return e},h3=z2("document","documentElement"),g3=W4("IE_PROTO"),v3=function(){},y3=function(e){return"<script>"+e+"<\/script>"},m3=function(e){e.write(y3("")),e.close();var t=e.parentWindow.Object;return e=null,t},b3=function(){try{o3=new ActiveXObject("htmlfile")}catch(r){}var e,t;b3="undefined"!=typeof document?document.domain&&o3?m3(o3):((t=A4("iframe")).style.display="none",h3.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(y3("document.F=Object")),e.close(),e.F):m3(o3);for(var n=b6.length;n--;)delete b3.prototype[b6[n]];return b3()};q4[g3]=!0;var w3,E3,D3=Object.create||function(e,t){var n;return null!==e?(v3.prototype=T4(e),n=new v3,v3.prototype=null,n[g3]=e):n=b3(),void 0===t?n:p3(n,t)},C3=h2.RegExp,x3=g2((function(){var e=C3(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),S3=h2.RegExp,A3=g2((function(){var e=S3("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),O3=e6.get,k3=u4("native-string-replace",String.prototype.replace),B3=RegExp.prototype.exec,F3=B3,_3=O2("".charAt),T3=O2("".indexOf),P3=O2("".replace),j3=O2("".slice),N3=(E3=/b*/g,m2(B3,w3=/a/,"a"),m2(B3,E3,"a"),0!==w3.lastIndex||0!==E3.lastIndex),I3=f3.BROKEN_CARET,R3=void 0!==/()??/.exec("")[1];(N3||R3||I3||x3||A3)&&(F3=function(e){var t,n,r,o,i,a,u,s=this,l=O3(s),c=a3(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=m2(F3,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=I3&&s.sticky,h=m2(u3,s),g=s.source,v=0,y=c;if(p&&(h=P3(h,"y",""),-1===T3(h,"g")&&(h+="g"),y=j3(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==_3(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),R3&&(n=new RegExp("^"+g+"$(?!\\s)",h)),N3&&(r=s.lastIndex),o=m2(B3,p?n:s,y),p?o?(o.input=j3(o.input,v),o[0]=j3(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:N3&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),R3&&o&&o.length>1&&m2(k3,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=D3(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var L3=F3;j6({target:"RegExp",proto:!0,forced:/./.exec!==L3},{exec:L3});var M3=Function.prototype,z3=M3.apply,$3=M3.bind,H3=M3.call,V3="object"==typeof Reflect&&Reflect.apply||($3?H3.bind(z3):function(){return H3.apply(z3,arguments)}),U3=w4("species"),W3=RegExp.prototype,q3=w4("match"),G3=h2.TypeError,K3=w4("species"),Y3=function(e,t){var n,r=T4(e).constructor;return void 0===r||null==(n=T4(r)[K3])?t:function(e){if(Y6(e))return e;throw G3(Q2(e)+" is not a constructor")}(n)},X3=O2("".charAt),Z3=O2("".charCodeAt),J3=O2("".slice),Q3=function(e){return function(t,n){var r,o,i=a3(N2(t)),a=s6(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=Z3(i,a))<55296||r>56319||a+1===u||(o=Z3(i,a+1))<56320||o>57343?e?X3(i,a):r:e?J3(i,a,a+2):o-56320+(r-55296<<10)+65536}},e5={codeAt:Q3(!1),charAt:Q3(!0)},t5=e5.charAt,n5=function(e,t,n){return t+(n?t5(e,t).length:1)},r5=h2.Array,o5=Math.max,i5=function(e,t,n){for(var r=h6(e),o=f6(t,r),i=f6(void 0===n?r:n,r),a=r5(o5(i-o,0)),u=0;o<i;o++,u++)X6(a,u,e[o]);return a.length=u,a},a5=h2.TypeError,u5=function(e,t){var n=e.exec;if(R2(n)){var r=m2(n,e,t);return null!==r&&T4(r),r}if("RegExp"===F2(e))return m2(L3,e,t);throw a5("RegExp#exec called on incompatible receiver")},s5=f3.UNSUPPORTED_Y,l5=Math.min,c5=[].push,f5=O2(/./.exec),d5=O2(c5),p5=O2("".slice);!function(e,t,n,r){var o=w4(e),i=!g2((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!g2((function(){var e=!1,t=/a/;return(t={}).constructor={},t.constructor[U3]=function(){return t},t.flags="",t[o]=/./[o],t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=O2(/./[o]),s=function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=a3(N2(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!L2(r=e)||!(void 0!==(o=r[q3])?o:"RegExp"==F2(r)))return m2(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=m2(L3,p,i))&&!((s=p.lastIndex)>d&&(d5(c,p5(i,d,u.index)),u.length>1&&u.index<i.length&&V3(c5,c,i5(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&f5(p,"")||d5(c,""):d5(c,p5(i,d)),c.length>a?i5(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:m2(t,this,e,n)}:t,[function(t,n){var o=N2(this),i=null==t?void 0:n4(t,e);return i?m2(i,t,o,n):m2(r,a3(o),t,n)},function(e,o){var i=T4(this),a=a3(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=Y3(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(s5?"g":"y"),f=new s(s5?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===u5(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=s5?0:h;var v,y=u5(f,s5?p5(a,h):a);if(null===y||(v=l5(p6(f.lastIndex+(s5?h:0)),a.length))===p)h=n5(a,h,l);else{if(d5(g,p5(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(d5(g,y[m]),g.length===d)return g;h=p=v}}return d5(g,p5(a,p)),g}]}(o,""[e],(function(e,t,n,r,o){var a=O2(e),s=t.exec;return s===L3||s===W3.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));i6(String.prototype,e,s[0]),i6(W3,o,s[1])}r&&I4(W3[o],"sham",!0)}("split",0,!!g2((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),s5);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var h5=function(){return h5=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},h5.apply(this,arguments)};function g5(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(t){i(t)}}function u(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,u)}s((r=r.apply(e,t||[])).next())}))}function v5(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(u){i=[6,u],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function y5(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){var i,a,u,s;i=r,a=o,u=(t=e[n](t)).done,s=t.value,Promise.resolve(s).then((function(e){i({value:e,done:u})}),a)}))}}}var m5=w4("unscopables"),b5=Array.prototype;null==b5[m5]&&N4.f(b5,m5,{configurable:!0,value:D3(null)});var w5,E5,D5,C5=function(e){b5[m5][e]=!0},x5={},S5=!g2((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),A5=W4("IE_PROTO"),O5=h2.Object,k5=O5.prototype,B5=S5?O5.getPrototypeOf:function(e){var t=l4(e);if(f4(t,A5))return t[A5];var n=t.constructor;return R2(n)&&t instanceof n?n.prototype:t instanceof O5?k5:null},F5=w4("iterator"),_5=!1;[].keys&&("next"in(D5=[].keys())?(E5=B5(B5(D5)))!==Object.prototype&&(w5=E5):_5=!0);var T5=null==w5||g2((function(){var e={};return w5[F5].call(e)!==e}));T5&&(w5={}),R2(w5[F5])||i6(w5,F5,(function(){return this}));var P5={IteratorPrototype:w5,BUGGY_SAFARI_ITERATORS:_5},j5=N4.f,N5=w4("toStringTag"),I5=function(e,t,n){e&&!f4(e=n?e:e.prototype,N5)&&j5(e,N5,{configurable:!0,value:t})},R5=P5.IteratorPrototype,L5=function(){return this},M5=h2.String,z5=h2.TypeError,$5=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=O2(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(r){}return function(n,r){return T4(n),function(e){if("object"==typeof e||R2(e))return e;throw z5("Can't set "+M5(e)+" as a prototype")}(r),t?e(n,r):n.__proto__=r,n}}():void 0),H5=o6.PROPER,V5=o6.CONFIGURABLE,U5=P5.IteratorPrototype,W5=P5.BUGGY_SAFARI_ITERATORS,q5=w4("iterator"),G5=function(){return this},K5=function(e,t,n,r,o,i,a){var u,s,l;s=r,l=t+" Iterator",(u=n).prototype=D3(R5,{next:D2(1,s)}),I5(u,l,!1),x5[l]=L5;var c,f,d,p=function(e){if(e===o&&m)return m;if(!W5&&e in v)return v[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},h=t+" Iterator",g=!1,v=e.prototype,y=v[q5]||v["@@iterator"]||o&&v[o],m=!W5&&y||p(o),b="Array"==t&&v.entries||y;if(b&&(c=B5(b.call(new e)))!==Object.prototype&&c.next&&(B5(c)!==U5&&($5?$5(c,U5):R2(c[q5])||i6(c,q5,G5)),I5(c,h,!0)),H5&&"values"==o&&y&&"values"!==y.name&&(V5?I4(v,"name","values"):(g=!0,m=function(){return m2(y,this)})),o)if(f={values:p("values"),keys:i?m:p("keys"),entries:p("entries")},a)for(d in f)(W5||g||!(d in v))&&i6(v,d,f[d]);else j6({target:t,proto:!0,forced:W5||g},f);return v[q5]!==m&&i6(v,q5,m,{name:o}),x5[t]=m,f},Y5=e6.set,X5=e6.getterFor("Array Iterator"),Z5=K5(Array,"Array",(function(e,t){Y5(this,{type:"Array Iterator",target:I2(e),index:0,kind:t})}),(function(){var e=X5(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values");x5.Arguments=x5.Array,C5("keys"),C5("values"),C5("entries");var J5=e5.charAt,Q5=e6.set,e8=e6.getterFor("String Iterator");K5(String,"String",(function(e){Q5(this,{type:"String Iterator",string:a3(e),index:0})}),(function(){var e,t=e8(this),n=t.string,r=t.index;return r>=n.length?{value:void 0,done:!0}:(e=J5(n,r),t.index+=e.length,{value:e,done:!1})}));var t8=function(e,t,n){for(var r in t)i6(e,r,t[r],n);return e},n8=E6.f,r8="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],o8={f:function(e){return r8&&"Window"==F2(e)?function(e){try{return n8(e)}catch(t){return i5(r8)}}(e):n8(I2(e))}},i8=g2((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}})),a8=Object.isExtensible,u8=g2((function(){a8(1)}))||i8?function(e){return!!L2(e)&&(!i8||"ArrayBuffer"!=F2(e))&&(!a8||a8(e))}:a8,s8=!g2((function(){return Object.isExtensible(Object.preventExtensions({}))})),l8=c2((function(e){var t=N4.f,n=!1,r=g4("meta"),o=0,i=function(e){t(e,r,{value:{objectID:"O"+o++,weakData:{}}})},a=e.exports={enable:function(){a.enable=function(){},n=!0;var e=E6.f,t=O2([].splice),o={};o[r]=1,e(o).length&&(E6.f=function(n){for(var o=e(n),i=0,a=o.length;i<a;i++)if(o[i]===r){t(o,i,1);break}return o},j6({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:o8.f}))},fastKey:function(e,t){if(!L2(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!f4(e,r)){if(!u8(e))return"F";if(!t)return"E";i(e)}return e[r].objectID},getWeakData:function(e,t){if(!f4(e,r)){if(!u8(e))return!0;if(!t)return!1;i(e)}return e[r].weakData},onFreeze:function(e){return s8&&n&&u8(e)&&!f4(e,r)&&i(e),e}};q4[r]=!0})),c8=O2(O2.bind),f8=function(e,t){return t4(e),void 0===t?e:c8?c8(e,t):function(){return e.apply(t,arguments)}},d8=w4("iterator"),p8=Array.prototype,h8=w4("iterator"),g8=function(e){if(null!=e)return n4(e,h8)||n4(e,"@@iterator")||x5[$6(e)]},v8=h2.TypeError,y8=function(e,t,n){var r,o;T4(e);try{if(!(r=n4(e,"return"))){if("throw"===t)throw n;return n}r=m2(r,e)}catch(i){o=!0,r=i}if("throw"===t)throw n;if(o)throw r;return T4(r),n},m8=h2.TypeError,b8=function(e,t){this.stopped=e,this.result=t},w8=b8.prototype,E8=function(e,t,n){var r,o,i,a,u,s,l,c,f=n&&n.that,d=!(!n||!n.AS_ENTRIES),p=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),g=f8(t,f),v=function(e){return r&&y8(r,"normal",e),new b8(!0,e)},y=function(e){return d?(T4(e),h?g(e[0],e[1],v):g(e[0],e[1])):h?g(e,v):g(e)};if(p)r=e;else{if(!(o=g8(e)))throw m8(Q2(e)+" is not iterable");if(void 0!==(c=o)&&(x5.Array===c||p8[d8]===c)){for(i=0,a=h6(e);a>i;i++)if((u=y(e[i]))&&$2(w8,u))return u;return new b8(!1)}r=function(e,t){var n=arguments.length<2?g8(e):t;if(t4(n))return T4(m2(n,e));throw v8(Q2(e)+" is not iterable")}(e,o)}for(s=r.next;!(l=m2(s,r)).done;){try{u=y(l.value)}catch(m){y8(r,"throw",m)}if("object"==typeof u&&u&&$2(w8,u))return u}return new b8(!1)},D8=h2.TypeError,C8=function(e,t){if($2(t,e))return e;throw D8("Incorrect invocation")},x8=w4("iterator"),S8=!1;try{var A8=0,O8={next:function(){return{done:!!A8++}},return:function(){S8=!0}};O8[x8]=function(){return this},Array.from(O8,(function(){throw 2}))}catch(eg){}var k8=function(e,t){if(!t&&!S8)return!1;var n=!1;try{var r={};r[x8]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(o){}return n},B8=w4("species"),F8=h2.Array,_8=function(e,t){return new(N6(n=e)&&(r=n.constructor,(Y6(r)&&(r===F8||N6(r.prototype))||L2(r)&&null===(r=r[B8]))&&(r=void 0)),void 0===r?F8:r)(0===t?0:t);var n,r},T8=O2([].push),P8=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=l4(s),g=P2(h),v=f8(l,c),y=h6(g),m=0,b=f||_8,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:T8(w,d)}else switch(e){case 4:return!1;case 7:T8(w,d)}return i?-1:r||o?o:w}},j8={forEach:P8(0),map:P8(1),filter:P8(2),some:P8(3),every:P8(4),find:P8(5),findIndex:P8(6),filterReject:P8(7)},N8=l8.getWeakData,I8=e6.set,R8=e6.getterFor,L8=j8.find,M8=j8.findIndex,z8=O2([].splice),$8=0,H8=function(e){return e.frozen||(e.frozen=new V8)},V8=function(){this.entries=[]},U8=function(e,t){return L8(e.entries,(function(e){return e[0]===t}))};V8.prototype={get:function(e){var t=U8(this,e);if(t)return t[1]},has:function(e){return!!U8(this,e)},set:function(e,t){var n=U8(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=M8(this.entries,(function(t){return t[0]===e}));return~t&&z8(this.entries,t,1),!!~t}};var W8,q8={getConstructor:function(e,t,n,r){var o=e((function(e,o){C8(e,i),I8(e,{type:t,id:$8++,frozen:void 0}),null!=o&&E8(o,e[r],{that:e,AS_ENTRIES:n})})),i=o.prototype,a=R8(t),u=function(e,t,n){var r=a(e),o=N8(T4(t),!0);return!0===o?H8(r).set(t,n):o[r.id]=n,e};return t8(i,{delete:function(e){var t=a(this);if(!L2(e))return!1;var n=N8(e);return!0===n?H8(t).delete(e):n&&f4(n,t.id)&&delete n[t.id]},has:function(e){var t=a(this);if(!L2(e))return!1;var n=N8(e);return!0===n?H8(t).has(e):n&&f4(n,t.id)}}),t8(i,n?{get:function(e){var t=a(this);if(L2(e)){var n=N8(e);return!0===n?H8(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return u(this,e,t)}}:{add:function(e){return u(this,e,!0)}}),o}},G8=e6.enforce,K8=!h2.ActiveXObject&&"ActiveXObject"in h2,Y8=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},X8=function(e,t,n){var r=-1!==e.indexOf("Map"),o=-1!==e.indexOf("Weak"),i=r?"set":"add",a=h2[e],u=a&&a.prototype,s=a,l={},c=function(e){var t=O2(u[e]);i6(u,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(o&&!L2(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return o&&!L2(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(o&&!L2(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(T6(e,!R2(a)||!(o||u.forEach&&!g2((function(){(new a).entries().next()})))))s=n.getConstructor(t,e,r,i),l8.enable();else if(T6(e,!0)){var f=new s,d=f[i](o?{}:-0,1)!=f,p=g2((function(){f.has(1)})),h=k8((function(e){new a(e)})),g=!o&&g2((function(){for(var e=new a,t=5;t--;)e[i](t,t);return!e.has(-0)}));h||((s=t((function(e,t){C8(e,u);var n,o,l,c,f,d=(n=new a,o=e,l=s,$5&&R2(c=o.constructor)&&c!==l&&L2(f=c.prototype)&&f!==l.prototype&&$5(n,f),n);return null!=t&&E8(t,d[i],{that:d,AS_ENTRIES:r}),d}))).prototype=u,u.constructor=s),(p||g)&&(c("delete"),c("has"),r&&c("get")),(g||d)&&c(i),o&&u.clear&&delete u.clear}return l[e]=s,j6({global:!0,forced:s!=a},l),I5(s,e),o||n.setStrong(s,e,r),s}("WeakMap",Y8,q8);if(V4&&K8){W8=q8.getConstructor(Y8,"WeakMap",!0),l8.enable();var Z8=X8.prototype,J8=O2(Z8.delete),Q8=O2(Z8.has),e7=O2(Z8.get),t7=O2(Z8.set);t8(Z8,{delete:function(e){if(L2(e)&&!u8(e)){var t=G8(this);return t.frozen||(t.frozen=new W8),J8(this,e)||t.frozen.delete(e)}return J8(this,e)},has:function(e){if(L2(e)&&!u8(e)){var t=G8(this);return t.frozen||(t.frozen=new W8),Q8(this,e)||t.frozen.has(e)}return Q8(this,e)},get:function(e){if(L2(e)&&!u8(e)){var t=G8(this);return t.frozen||(t.frozen=new W8),Q8(this,e)?e7(this,e):t.frozen.get(e)}return e7(this,e)},set:function(e,t){if(L2(e)&&!u8(e)){var n=G8(this);n.frozen||(n.frozen=new W8),Q8(this,e)?t7(this,e,t):n.frozen.set(e,t)}else t7(this,e,t);return this}})}var n7={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},r7=A4("span").classList,o7=r7&&r7.constructor&&r7.constructor.prototype,i7=o7===Object.prototype?void 0:o7,a7=w4("iterator"),u7=w4("toStringTag"),s7=Z5.values,l7=function(e,t){if(e){if(e[a7]!==s7)try{I4(e,a7,s7)}catch(r){e[a7]=s7}if(e[u7]||I4(e,u7,t),n7[t])for(var n in Z5)if(e[n]!==Z5[n])try{I4(e,n,Z5[n])}catch(r){e[n]=Z5[n]}}};for(var c7 in n7)l7(h2[c7]&&h2[c7].prototype,c7);l7(i7,"DOMTokenList");var f7=o6.EXISTS,d7=N4.f,p7=Function.prototype,h7=O2(p7.toString),g7=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,v7=O2(g7.exec);v2&&!f7&&d7(p7,"name",{configurable:!0,get:function(){try{return v7(g7,h7(this))[1]}catch(eg){return""}}});var y7=function(e,t){var n=[][e];return!!n&&g2((function(){n.call(null,t||function(){throw 1},1)}))},m7=j8.forEach,b7=y7("forEach")?[].forEach:function(e){return m7(this,e,arguments.length>1?arguments[1]:void 0)},w7=function(e){if(e&&e.forEach!==b7)try{I4(e,"forEach",b7)}catch(Qh){e.forEach=b7}};for(var E7 in n7)n7[E7]&&w7(h2[E7]&&h2[E7].prototype);w7(i7);var D7,C7,x7,S7,A7=h2.Promise,O7=w4("species"),k7=/(?:ipad|iphone|ipod).*applewebkit/i.test(H2),B7="process"==F2(h2.process),F7=h2.setImmediate,_7=h2.clearImmediate,T7=h2.process,P7=h2.Dispatch,j7=h2.Function,N7=h2.MessageChannel,I7=h2.String,R7=0,L7={};try{D7=h2.location}catch(eg){}var M7=function(e){if(f4(L7,e)){var t=L7[e];delete L7[e],t()}},z7=function(e){return function(){M7(e)}},$7=function(e){M7(e.data)},H7=function(e){h2.postMessage(I7(e),D7.protocol+"//"+D7.host)};F7&&_7||(F7=function(e){var t=J6(arguments,1);return L7[++R7]=function(){V3(R2(e)?e:j7(e),void 0,t)},C7(R7),R7},_7=function(e){delete L7[e]},B7?C7=function(e){T7.nextTick(z7(e))}:P7&&P7.now?C7=function(e){P7.now(z7(e))}:N7&&!k7?(S7=(x7=new N7).port2,x7.port1.onmessage=$7,C7=f8(S7.postMessage,S7)):h2.addEventListener&&R2(h2.postMessage)&&!h2.importScripts&&D7&&"file:"!==D7.protocol&&!g2(H7)?(C7=H7,h2.addEventListener("message",$7,!1)):C7="onreadystatechange"in A4("script")?function(e){h3.appendChild(A4("script")).onreadystatechange=function(){h3.removeChild(this),M7(e)}}:function(e){setTimeout(z7(e),0)});var V7,U7,W7,q7,G7,K7,Y7,X7,Z7={set:F7,clear:_7},J7=/ipad|iphone|ipod/i.test(H2)&&void 0!==h2.Pebble,Q7=/web0s(?!.*chrome)/i.test(H2),e9=B4.f,t9=Z7.set,n9=h2.MutationObserver||h2.WebKitMutationObserver,r9=h2.document,o9=h2.process,i9=h2.Promise,a9=e9(h2,"queueMicrotask"),u9=a9&&a9.value;u9||(V7=function(){var e,t;for(B7&&(e=o9.domain)&&e.exit();U7;){t=U7.fn,U7=U7.next;try{t()}catch(n){throw U7?q7():W7=void 0,n}}W7=void 0,e&&e.enter()},k7||B7||Q7||!n9||!r9?!J7&&i9&&i9.resolve?((Y7=i9.resolve(void 0)).constructor=i9,X7=f8(Y7.then,Y7),q7=function(){X7(V7)}):B7?q7=function(){o9.nextTick(V7)}:(t9=f8(t9,h2),q7=function(){t9(V7)}):(G7=!0,K7=r9.createTextNode(""),new n9(V7).observe(K7,{characterData:!0}),q7=function(){K7.data=G7=!G7}));var s9,l9,c9,f9,d9=u9||function(e){var t={fn:e,next:void 0};W7&&(W7.next=t),U7||(U7=t,q7()),W7=t},p9=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=t4(t),this.reject=t4(n)},h9={f:function(e){return new p9(e)}},g9=function(e){try{return{error:!1,value:e()}}catch(t){return{error:!0,value:t}}},v9="object"==typeof window,y9=Z7.set,m9=w4("species"),b9="Promise",w9=e6.getterFor(b9),E9=e6.set,D9=e6.getterFor(b9),C9=A7&&A7.prototype,x9=A7,S9=C9,A9=h2.TypeError,O9=h2.document,k9=h2.process,B9=h9.f,F9=B9,_9=!!(O9&&O9.createEvent&&h2.dispatchEvent),T9=R2(h2.PromiseRejectionEvent),P9=!1,j9=T6(b9,(function(){var e=$4(x9),t=e!==String(x9);if(!t&&66===G2)return!0;if(G2>=51&&/native code/.test(e))return!1;var n=new x9((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};return(n.constructor={})[m9]=r,!(P9=n.then((function(){}))instanceof r)||!t&&v9&&!T9})),N9=j9||!k8((function(e){x9.all(e).catch((function(){}))})),I9=function(e){var t;return!(!L2(e)||!R2(t=e.then))&&t},R9=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;d9((function(){for(var r=e.value,o=1==e.state,i=0;n.length>i;){var a,u,s,l=n[i++],c=o?l.ok:l.fail,f=l.resolve,d=l.reject,p=l.domain;try{c?(o||(2===e.rejection&&$9(e),e.rejection=1),!0===c?a=r:(p&&p.enter(),a=c(r),p&&(p.exit(),s=!0)),a===l.promise?d(A9("Promise-chain cycle")):(u=I9(a))?m2(u,a,f,d):f(a)):d(r)}catch(h){p&&!s&&p.exit(),d(h)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&M9(e)}))}},L9=function(e,t,n){var r,o;_9?((r=O9.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),h2.dispatchEvent(r)):r={promise:t,reason:n},!T9&&(o=h2["on"+e])?o(r):"unhandledrejection"===e&&function(e,t){var n=h2.console;n&&n.error&&(1==arguments.length?n.error(e):n.error(e,t))}("Unhandled promise rejection",n)},M9=function(e){m2(y9,h2,(function(){var t,n=e.facade,r=e.value;if(z9(e)&&(t=g9((function(){B7?k9.emit("unhandledRejection",r,n):L9("unhandledrejection",n,r)})),e.rejection=B7||z9(e)?2:1,t.error))throw t.value}))},z9=function(e){return 1!==e.rejection&&!e.parent},$9=function(e){m2(y9,h2,(function(){var t=e.facade;B7?k9.emit("rejectionHandled",t):L9("rejectionhandled",t,e.value)}))},H9=function(e,t,n){return function(r){e(t,r,n)}},V9=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,R9(e,!0))},U9=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw A9("Promise can't be resolved itself");var r=I9(t);r?d9((function(){var n={done:!1};try{m2(r,t,H9(U9,n,e),H9(V9,n,e))}catch(o){V9(n,o,e)}})):(e.value=t,e.state=1,R9(e,!1))}catch(o){V9({done:!1},o,e)}}};if(j9&&(S9=(x9=function(e){C8(this,S9),t4(e),m2(s9,this);var t=w9(this);try{e(H9(U9,t),H9(V9,t))}catch(n){V9(t,n)}}).prototype,(s9=function(e){E9(this,{type:b9,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=t8(S9,{then:function(e,t){var n=D9(this),r=n.reactions,o=B9(Y3(this,x9));return o.ok=!R2(e)||e,o.fail=R2(t)&&t,o.domain=B7?k9.domain:void 0,n.parent=!0,r[r.length]=o,0!=n.state&&R9(n,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),l9=function(){var e=new s9,t=w9(e);this.promise=e,this.resolve=H9(U9,t),this.reject=H9(V9,t)},h9.f=B9=function(e){return e===x9||e===c9?new l9(e):F9(e)},R2(A7)&&C9!==Object.prototype)){f9=C9.then,P9||(i6(C9,"then",(function(e,t){var n=this;return new x9((function(e,t){m2(f9,n,e,t)})).then(e,t)}),{unsafe:!0}),i6(C9,"catch",S9.catch,{unsafe:!0}));try{delete C9.constructor}catch(eg){}$5&&$5(C9,S9)}j6({global:!0,wrap:!0,forced:j9},{Promise:x9}),I5(x9,b9,!1),function(e){var t=z2("Promise"),n=N4.f;v2&&t&&!t[O7]&&n(t,O7,{configurable:!0,get:function(){return this}})}(),c9=z2(b9),j6({target:b9,stat:!0,forced:j9},{reject:function(e){var t=B9(this);return m2(t.reject,void 0,e),t.promise}}),j6({target:b9,stat:!0,forced:j9},{resolve:function(e){return function(e,t){if(T4(e),L2(t)&&t.constructor===e)return t;var n=h9.f(e);return(0,n.resolve)(t),n.promise}(this,e)}}),j6({target:b9,stat:!0,forced:N9},{all:function(e){var t=this,n=B9(t),r=n.resolve,o=n.reject,i=g9((function(){var n=t4(t.resolve),i=[],a=0,u=1;E8(e,(function(e){var s=a++,l=!1;u++,m2(n,t,e).then((function(e){l||(l=!0,i[s]=e,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),n.promise},race:function(e){var t=this,n=B9(t),r=n.reject,o=g9((function(){var o=t4(t.resolve);E8(e,(function(e){m2(o,t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}});var W9=o6.PROPER,q9=RegExp.prototype,G9=q9.toString,K9=O2(u3),Y9=g2((function(){return"/a/b"!=G9.call({source:"a",flags:"b"})})),X9=W9&&"toString"!=G9.name;(Y9||X9)&&i6(RegExp.prototype,"toString",(function(){var e=T4(this),t=a3(e.source),n=e.flags;return"/"+t+"/"+a3(void 0===n&&$2(q9,e)&&!("flags"in q9)?K9(e):n)}),{unsafe:!0});var Z9=new WeakMap;function J9(e){return e.getMenuConfig("uploadImage")}function Q9(e,t){return g5(this,void 0,void 0,(function(){return v5(this,(function(n){return[2,new Promise((function(n){var r=new FileReader;r.readAsDataURL(t),r.onload=function(){var o=r.result;if(o){var i=o.toString(),a=0===i.indexOf("data:image")?"":i;i_(e,i,t.name,a),n("ok")}}}))]}))}))}function eee(e,t){return g5(this,void 0,void 0,(function(){var n,r,o,i;return v5(this,(function(a){switch(a.label){case 0:return n=function(e){var t=Z9.get(e);if(null!=t)return t;var n=J9(e),r=n.onSuccess,o=n.onProgress,i=n.onFailed,a=n.customInsert,u=n.onError;return t=ND(h5(h5({},n),{onProgress:function(t){e.showProgressBar(t),o&&o(t)},onSuccess:function(t,n){if(a)a(n,(function(t,n,r){return i_(e,t,n,r)}));else{var o=n.errno,u=void 0===o?1:o,s=n.data,l=void 0===s?{}:s;if(0!==u)return console.error("'"+t.name+"' upload failed",n),void i(t,n);if(Array.isArray(l))l.forEach((function(t){var n=t.url,r=void 0===n?"":n,o=t.alt,i=void 0===o?"":o,a=t.href;i_(e,r,i,void 0===a?"":a)}));else{var c=l.url,f=void 0===c?"":c,d=l.alt,p=void 0===d?"":d,h=l.href;i_(e,f,p,void 0===h?"":h)}r(t,n)}},onError:function(e,t,n){var r=e.name;console.error("'"+r+" upload error",t,n),u&&u(e,t,n)}})),Z9.set(e,t),t}(e),r=t.name,o=t.type,i=t.size,n.addFile({name:r,type:o,size:i,data:t}),[4,n.upload()];case 1:return a.sent(),[2]}}))}))}function tee(e,t){var n,r;return g5(this,void 0,void 0,(function(){var o,i,a,u,s,l,c,f,d;return v5(this,(function(p){switch(p.label){case 0:if(null==t)return[2];o=Array.prototype.slice.call(t),i=J9(e),a=i.customUpload,u=i.base64LimitSize,p.label=1;case 1:p.trys.push([1,11,12,17]),s=y5(o),p.label=2;case 2:return[4,s.next()];case 3:return(l=p.sent()).done?[3,10]:(c=l.value,f=c.size,u&&f<=u?[4,Q9(e,c)]:[3,5]);case 4:return p.sent(),[3,9];case 5:return a?[4,a(c,(function(t,n,r){return i_(e,t,n,r)}))]:[3,7];case 6:return p.sent(),[3,9];case 7:return[4,eee(e,c)];case 8:p.sent(),p.label=9;case 9:return[3,2];case 10:return[3,17];case 11:return d=p.sent(),n={error:d},[3,17];case 12:return p.trys.push([12,,15,16]),l&&!l.done&&(r=s.return)?[4,r.call(s)]:[3,14];case 13:p.sent(),p.label=14;case 14:return[3,16];case 15:if(n)throw n.error;return[7];case 16:return[7];case 17:return[2]}}))}))}var nee=O2([].join),ree=P2!=Object,oee=y7("join",",");j6({target:"Array",proto:!0,forced:ree||!oee},{join:function(e){return nee(I2(this),void 0===e?",":e)}}),Zr&&(Fr.fn.append=Zr),Lr&&(Fr.fn.on=Lr),ro&&(Fr.fn.remove=ro),Rr&&(Fr.fn.val=Rr),uo&&(Fr.fn.click=uo),Vr&&(Fr.fn.hide=Vr);var iee=function(){function e(){this.title=OC("uploadImgModule.uploadImage"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M828.708571 585.045333a48.761905 48.761905 0 0 0-48.737523 48.761905v18.529524l-72.143238-72.167619a135.972571 135.972571 0 0 0-191.585524 0l-34.133334 34.133333-120.880762-120.953905a138.898286 138.898286 0 0 0-191.585523 0l-72.167619 72.167619V292.400762a48.786286 48.786286 0 0 1 48.761904-48.761905h341.23581a48.737524 48.737524 0 0 0 34.474667-83.285333 48.737524 48.737524 0 0 0-34.474667-14.287238H146.236952A146.212571 146.212571 0 0 0 0 292.400762v585.289143A146.358857 146.358857 0 0 0 146.236952 1024h584.996572a146.212571 146.212571 0 0 0 146.236952-146.310095V633.807238a48.786286 48.786286 0 0 0-48.761905-48.761905zM146.261333 926.45181a48.737524 48.737524 0 0 1-48.761904-48.761905v-174.128762l141.409523-141.458286a38.497524 38.497524 0 0 1 53.126096 0l154.526476 154.624 209.627428 209.724953H146.236952z m633.734096-48.761905c-0.073143 9.337905-3.145143 18.383238-8.777143 25.843809l-219.843048-220.94019 34.133333-34.133334a37.546667 37.546667 0 0 1 53.613715 0l140.873143 141.897143V877.714286zM1009.615238 160.231619L863.329524 13.897143a48.737524 48.737524 0 0 0-16.091429-10.24c-11.849143-4.87619-25.161143-4.87619-37.059047 0a48.761905 48.761905 0 0 0-16.067048 10.24l-146.236952 146.334476a49.005714 49.005714 0 0 0 69.217523 69.241905l62.902858-63.390476v272.627809a48.761905 48.761905 0 1 0 97.475047 0V166.083048l62.902857 63.390476a48.737524 48.737524 0 0 0 69.217524 0 48.761905 48.761905 0 0 0 0-69.241905z"></path></svg>',this.tag="button"}return e.prototype.getValue=function(e){return""},e.prototype.isActive=function(e){return!1},e.prototype.isDisabled=function(e){return a_(e)},e.prototype.getMenuConfig=function(e){return e.getMenuConfig("uploadImage")},e.prototype.exec=function(e,t){var n=this.getMenuConfig(e),r=n.allowedFileTypes,o=void 0===r?[]:r,i=n.customBrowseAndUpload;if(i)i((function(t,n,r){return i_(e,t,n,r)}));else{var a="";o.length>0&&(a='accept="'+o.join(", ")+'"');var u=Fr("body"),s=Fr('<input type="file" '+a+" multiple/>");s.hide(),u.append(s),s.click(),s.on("change",(function(){var t=s[0].files;tee(e,t)}))}},e}(),aee={menus:[{key:"uploadImage",factory:function(){return new iee},config:{server:"",fieldName:"wangeditor-uploaded-image",maxFileSize:2097152,maxNumberOfFiles:100,allowedFileTypes:["image/*"],meta:{},metaWithUrl:!1,withCredentials:!1,timeout:1e4,onBeforeUpload:function(e){return e},onProgress:function(e){},onSuccess:function(e,t){},onFailed:function(e,t){},onError:function(e,t,n){},base64LimitSize:0}}],editorPlugin:function(e){var t=e.insertData,n=e;return n.insertData=function(r){if(a_(n))t(r);else if(r.getData("text/plain"))t(r);else{var o=r.files;o.length<=0?t(r):Array.prototype.slice.call(o).some((function(e){return"image"===function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}(e.type.split("/"),1)[0]}))?tee(e,o):t(r)}},n}};AC("en",{highLightModule:{selectLang:"Language"}}),AC("zh-CN",{highLightModule:{selectLang:"选择语言"}});var uee="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function see(e){var t={exports:{}};return e(t,t.exports),t.exports}var lee,cee,fee=function(e){return e&&e.Math==Math&&e},dee=fee("object"==typeof globalThis&&globalThis)||fee("object"==typeof window&&window)||fee("object"==typeof self&&self)||fee("object"==typeof uee&&uee)||function(){return this}()||Function("return this")(),pee=Object.defineProperty,hee=function(e,t){try{pee(dee,e,{value:t,configurable:!0,writable:!0})}catch(mG){dee[e]=t}return t},gee=dee["__core-js_shared__"]||hee("__core-js_shared__",{}),vee=see((function(e){(e.exports=function(e,t){return gee[e]||(gee[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.3",mode:"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})})),yee=Function.prototype,mee=yee.bind,bee=yee.call,wee=mee&&mee.bind(bee),Eee=mee?function(e){return e&&wee(bee,e)}:function(e){return e&&function(){return bee.apply(e,arguments)}},Dee=dee.TypeError,Cee=function(e){if(null==e)throw Dee("Can't call method on "+e);return e},xee=dee.Object,See=function(e){return xee(Cee(e))},Aee=Eee({}.hasOwnProperty),Oee=Object.hasOwn||function(e,t){return Aee(See(e),t)},kee=0,Bee=Math.random(),Fee=Eee(1..toString),_ee=function(e){return"Symbol("+(void 0===e?"":e)+")_"+Fee(++kee+Bee,36)},Tee=function(e){return"function"==typeof e},Pee=function(e){return Tee(e)?e:void 0},jee=function(e,t){return arguments.length<2?Pee(dee[e]):dee[e]&&dee[e][t]},Nee=jee("navigator","userAgent")||"",Iee=dee.process,Ree=dee.Deno,Lee=Iee&&Iee.versions||Ree&&Ree.version,Mee=Lee&&Lee.v8;Mee&&(cee=(lee=Mee.split("."))[0]>0&&lee[0]<4?1:+(lee[0]+lee[1])),!cee&&Nee&&(!(lee=Nee.match(/Edge\/(\d+)/))||lee[1]>=74)&&(lee=Nee.match(/Chrome\/(\d+)/))&&(cee=+lee[1]);var zee=cee,$ee=function(e){try{return!!e()}catch(t){return!0}},Hee=!!Object.getOwnPropertySymbols&&!$ee((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&zee&&zee<41})),Vee=Hee&&!Symbol.sham&&"symbol"==typeof Symbol.iterator,Uee=vee("wks"),Wee=dee.Symbol,qee=Wee&&Wee.for,Gee=Vee?Wee:Wee&&Wee.withoutSetter||_ee,Kee=function(e){if(!Oee(Uee,e)||!Hee&&"string"!=typeof Uee[e]){var t="Symbol."+e;Hee&&Oee(Wee,e)?Uee[e]=Wee[e]:Uee[e]=Vee&&qee?qee(t):Gee(t)}return Uee[e]},Yee={};Yee[Kee("toStringTag")]="z";var Xee="[object z]"===String(Yee),Zee=!$ee((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})),Jee=function(e){return"object"==typeof e?null!==e:Tee(e)},Qee=dee.document,ete=Jee(Qee)&&Jee(Qee.createElement),tte=function(e){return ete?Qee.createElement(e):{}},nte=!Zee&&!$ee((function(){return 7!=Object.defineProperty(tte("div"),"a",{get:function(){return 7}}).a})),rte=dee.String,ote=dee.TypeError,ite=function(e){if(Jee(e))return e;throw ote(rte(e)+" is not an object")},ate=Function.prototype.call,ute=ate.bind?ate.bind(ate):function(){return ate.apply(ate,arguments)},ste=Eee({}.isPrototypeOf),lte=dee.Object,cte=Vee?function(e){return"symbol"==typeof e}:function(e){var t=jee("Symbol");return Tee(t)&&ste(t.prototype,lte(e))},fte=dee.String,dte=function(e){try{return fte(e)}catch(t){return"Object"}},pte=dee.TypeError,hte=function(e){if(Tee(e))return e;throw pte(dte(e)+" is not a function")},gte=function(e,t){var n=e[t];return null==n?void 0:hte(n)},vte=dee.TypeError,yte=dee.TypeError,mte=Kee("toPrimitive"),bte=function(e){var t=function(e,t){if(!Jee(e)||cte(e))return e;var n,r=gte(e,mte);if(r){if(void 0===t&&(t="default"),n=ute(r,e,t),!Jee(n)||cte(n))return n;throw yte("Can't convert object to primitive value")}return void 0===t&&(t="number"),function(e,t){var n,r;if("string"===t&&Tee(n=e.toString)&&!Jee(r=ute(n,e)))return r;if(Tee(n=e.valueOf)&&!Jee(r=ute(n,e)))return r;if("string"!==t&&Tee(n=e.toString)&&!Jee(r=ute(n,e)))return r;throw vte("Can't convert object to primitive value")}(e,t)}(e,"string");return cte(t)?t:t+""},wte=dee.TypeError,Ete=Object.defineProperty,Dte={f:Zee?Ete:function(e,t,n){if(ite(e),t=bte(t),ite(n),nte)try{return Ete(e,t,n)}catch(r){}if("get"in n||"set"in n)throw wte("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},Cte=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},xte=Zee?function(e,t,n){return Dte.f(e,t,Cte(1,n))}:function(e,t,n){return e[t]=n,e},Ste=Eee(Function.toString);Tee(gee.inspectSource)||(gee.inspectSource=function(e){return Ste(e)});var Ate,Ote,kte,Bte=gee.inspectSource,Fte=dee.WeakMap,_te=Tee(Fte)&&/native code/.test(Bte(Fte)),Tte=vee("keys"),Pte=function(e){return Tte[e]||(Tte[e]=_ee(e))},jte={},Nte=dee.TypeError,Ite=dee.WeakMap;if(_te||gee.state){var Rte=gee.state||(gee.state=new Ite),Lte=Eee(Rte.get),Mte=Eee(Rte.has),zte=Eee(Rte.set);Ate=function(e,t){if(Mte(Rte,e))throw new Nte("Object already initialized");return t.facade=e,zte(Rte,e,t),t},Ote=function(e){return Lte(Rte,e)||{}},kte=function(e){return Mte(Rte,e)}}else{var $te=Pte("state");jte[$te]=!0,Ate=function(e,t){if(Oee(e,$te))throw new Nte("Object already initialized");return t.facade=e,xte(e,$te,t),t},Ote=function(e){return Oee(e,$te)?e[$te]:{}},kte=function(e){return Oee(e,$te)}}var Hte={set:Ate,get:Ote,has:kte,enforce:function(e){return kte(e)?Ote(e):Ate(e,{})},getterFor:function(e){return function(t){var n;if(!Jee(t)||(n=Ote(t)).type!==e)throw Nte("Incompatible receiver, "+e+" required");return n}}},Vte=Function.prototype,Ute=Zee&&Object.getOwnPropertyDescriptor,Wte=Oee(Vte,"name"),qte={EXISTS:Wte,PROPER:Wte&&"something"===function(){}.name,CONFIGURABLE:Wte&&(!Zee||Zee&&Ute(Vte,"name").configurable)},Gte=see((function(e){var t=qte.CONFIGURABLE,n=Hte.get,r=Hte.enforce,o=String(String).split("String");(e.exports=function(e,n,i,a){var u,s=!!a&&!!a.unsafe,l=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet,f=a&&void 0!==a.name?a.name:n;Tee(i)&&("Symbol("===String(f).slice(0,7)&&(f="["+String(f).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!Oee(i,"name")||t&&i.name!==f)&&xte(i,"name",f),(u=r(i)).source||(u.source=o.join("string"==typeof f?f:""))),e!==dee?(s?!c&&e[n]&&(l=!0):delete e[n],l?e[n]=i:xte(e,n,i)):l?e[n]=i:hee(n,i)})(Function.prototype,"toString",(function(){return Tee(this)&&n(this).source||Bte(this)}))})),Kte=Eee({}.toString),Yte=Eee("".slice),Xte=function(e){return Yte(Kte(e),8,-1)},Zte=Kee("toStringTag"),Jte=dee.Object,Qte="Arguments"==Xte(function(){return arguments}()),ene=Xee?Xte:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(n){}}(t=Jte(e),Zte))?n:Qte?Xte(t):"Object"==(r=Xte(t))&&Tee(t.callee)?"Arguments":r},tne=Xee?{}.toString:function(){return"[object "+ene(this)+"]"};Xee||Gte(Object.prototype,"toString",tne,{unsafe:!0});var nne,rne={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},one=tte("span").classList,ine=one&&one.constructor&&one.constructor.prototype,ane=ine===Object.prototype?void 0:ine,une=Eee(Eee.bind),sne=dee.Object,lne=Eee("".split),cne=$ee((function(){return!sne("z").propertyIsEnumerable(0)}))?function(e){return"String"==Xte(e)?lne(e,""):sne(e)}:sne,fne=Math.ceil,dne=Math.floor,pne=function(e){var t=+e;return t!=t||0===t?0:(t>0?dne:fne)(t)},hne=Math.min,gne=function(e){return e>0?hne(pne(e),9007199254740991):0},vne=function(e){return gne(e.length)},yne=Array.isArray||function(e){return"Array"==Xte(e)},mne=function(){},bne=[],wne=jee("Reflect","construct"),Ene=/^\s*(?:class|function)\b/,Dne=Eee(Ene.exec),Cne=!Ene.exec(mne),xne=function(e){if(!Tee(e))return!1;try{return wne(mne,bne,e),!0}catch(t){return!1}},Sne=!wne||$ee((function(){var e;return xne(xne.call)||!xne(Object)||!xne((function(){e=!0}))||e}))?function(e){if(!Tee(e))return!1;switch(ene(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return Cne||!!Dne(Ene,Bte(e))}:xne,Ane=Kee("species"),One=dee.Array,kne=function(e,t){return new(yne(n=e)&&(r=n.constructor,(Sne(r)&&(r===One||yne(r.prototype))||Jee(r)&&null===(r=r[Ane]))&&(r=void 0)),void 0===r?One:r)(0===t?0:t);var n,r},Bne=Eee([].push),Fne=function(e){var t=1==e,n=2==e,r=3==e,o=4==e,i=6==e,a=7==e,u=5==e||i;return function(s,l,c,f){for(var d,p,h=See(s),g=cne(h),v=function(e,t){return hte(e),void 0===t?e:une?une(e,t):function(){return e.apply(t,arguments)}}(l,c),y=vne(g),m=0,b=f||kne,w=t?b(s,y):n||a?b(s,0):void 0;y>m;m++)if((u||m in g)&&(p=v(d=g[m],m,h),e))if(t)w[m]=p;else if(p)switch(e){case 3:return!0;case 5:return d;case 6:return m;case 2:Bne(w,d)}else switch(e){case 4:return!1;case 7:Bne(w,d)}return i?-1:r||o?o:w}},_ne=[Fne(0),Fne(1),Fne(2),Fne(3),Fne(4),Fne(5),Fne(6),Fne(7)][0],Tne=(nne=[].forEach)&&$ee((function(){nne.call(null,(function(){throw 1}),1)}))?[].forEach:function(e){return _ne(this,e,arguments.length>1?arguments[1]:void 0)},Pne=function(e){if(e&&e.forEach!==Tne)try{xte(e,"forEach",Tne)}catch(eg){e.forEach=Tne}};for(var jne in rne)rne[jne]&&Pne(dee[jne]&&dee[jne].prototype);Pne(ane);var Nne={}.propertyIsEnumerable,Ine=Object.getOwnPropertyDescriptor,Rne={f:Ine&&!Nne.call({1:2},1)?function(e){var t=Ine(this,e);return!!t&&t.enumerable}:Nne},Lne=function(e){return cne(Cee(e))},Mne=Object.getOwnPropertyDescriptor,zne={f:Zee?Mne:function(e,t){if(e=Lne(e),t=bte(t),nte)try{return Mne(e,t)}catch(n){}if(Oee(e,t))return Cte(!ute(Rne.f,e,t),e[t])}},$ne=Math.max,Hne=Math.min,Vne=function(e,t){var n=pne(e);return n<0?$ne(n+t,0):Hne(n,t)},Une=function(e){return function(t,n,r){var o,i=Lne(t),a=vne(i),u=Vne(r,a);if(e&&n!=n){for(;a>u;)if((o=i[u++])!=o)return!0}else for(;a>u;u++)if((e||u in i)&&i[u]===n)return e||u||0;return!e&&-1}},Wne=(Une(!0),Une(!1)),qne=Eee([].push),Gne=function(e,t){var n,r=Lne(e),o=0,i=[];for(n in r)!Oee(jte,n)&&Oee(r,n)&&qne(i,n);for(;t.length>o;)Oee(r,n=t[o++])&&(~Wne(i,n)||qne(i,n));return i},Kne=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],Yne=Kne.concat("length","prototype"),Xne={f:Object.getOwnPropertyNames||function(e){return Gne(e,Yne)}},Zne={f:Object.getOwnPropertySymbols},Jne=Eee([].concat),Qne=jee("Reflect","ownKeys")||function(e){var t=Xne.f(ite(e)),n=Zne.f;return n?Jne(t,n(e)):t},ere=function(e,t){for(var n=Qne(t),r=Dte.f,o=zne.f,i=0;i<n.length;i++){var a=n[i];Oee(e,a)||r(e,a,o(t,a))}},tre=/#|\.prototype\./,nre=function(e,t){var n=ore[rre(e)];return n==are||n!=ire&&(Tee(t)?$ee(t):!!t)},rre=nre.normalize=function(e){return String(e).replace(tre,".").toLowerCase()},ore=nre.data={},ire=nre.NATIVE="N",are=nre.POLYFILL="P",ure=nre,sre=zne.f,lre=function(e,t){var n,r,o,i,a,u=e.target,s=e.global,l=e.stat;if(n=s?dee:l?dee[u]||hee(u,{}):(dee[u]||{}).prototype)for(r in t){if(i=t[r],o=e.noTargetGet?(a=sre(n,r))&&a.value:n[r],!ure(s?r:u+(l?".":"#")+r,e.forced)&&void 0!==o){if(typeof i==typeof o)continue;ere(i,o)}(e.sham||o&&o.sham)&&xte(i,"sham",!0),Gte(n,r,i,e)}},cre=Object.keys||function(e){return Gne(e,Kne)},fre=Object.assign,dre=Object.defineProperty,pre=Eee([].concat),hre=!fre||$ee((function(){if(Zee&&1!==fre({b:1},fre(dre({},"a",{enumerable:!0,get:function(){dre(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=fre({},e)[n]||cre(fre({},t)).join("")!=r}))?function(e,t){for(var n=See(e),r=arguments.length,o=1,i=Zne.f,a=Rne.f;r>o;)for(var u,s=cne(arguments[o++]),l=i?pre(cre(s),i(s)):cre(s),c=l.length,f=0;c>f;)u=l[f++],Zee&&!ute(a,s,u)||(n[u]=s[u]);return n}:fre;lre({target:"Object",stat:!0,forced:Object.assign!==hre},{assign:hre});var gre=see((function(e){var t=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,n=0,r={},o={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function e(t){return t instanceof i?new i(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function e(t,n){var r,i;switch(n=n||{},o.util.type(t)){case"Object":if(i=o.util.objId(t),n[i])return n[i];for(var a in r={},n[i]=r,t)t.hasOwnProperty(a)&&(r[a]=e(t[a],n));return r;case"Array":return i=o.util.objId(t),n[i]?n[i]:(r=[],n[i]=r,t.forEach((function(t,o){r[o]=e(t,n)})),r);default:return t}},getLanguage:function(e){for(;e&&!t.test(e.className);)e=e.parentElement;return e?(e.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if("undefined"==typeof document)return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var e=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack)||[])[1];if(e){var t=document.getElementsByTagName("script");for(var n in t)if(t[n].src==e)return t[n]}return null}},isActive:function(e,t,n){for(var r="no-"+t;e;){var o=e.classList;if(o.contains(t))return!0;if(o.contains(r))return!1;e=e.parentElement}return!!n}},languages:{plain:r,plaintext:r,text:r,txt:r,extend:function(e,t){var n=o.util.clone(o.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var i=(r=r||o.languages)[e],a={};for(var u in i)if(i.hasOwnProperty(u)){if(u==t)for(var s in n)n.hasOwnProperty(s)&&(a[s]=n[s]);n.hasOwnProperty(u)||(a[u]=i[u])}var l=r[e];return r[e]=a,o.languages.DFS(o.languages,(function(t,n){n===l&&t!=e&&(this[t]=a)})),a},DFS:function e(t,n,r,i){i=i||{};var a=o.util.objId;for(var u in t)if(t.hasOwnProperty(u)){n.call(t,u,t[u],r||u);var s=t[u],l=o.util.type(s);"Object"!==l||i[a(s)]?"Array"!==l||i[a(s)]||(i[a(s)]=!0,e(s,n,u,i)):(i[a(s)]=!0,e(s,n,null,i))}}},plugins:{},highlightAll:function(e,t){o.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,container:e,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};o.hooks.run("before-highlightall",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),o.hooks.run("before-all-elements-highlight",r);for(var i,a=0;i=r.elements[a++];)o.highlightElement(i,!0===t,r.callback)},highlightElement:function(n,r,i){var a=o.util.getLanguage(n),u=o.languages[a];n.className=n.className.replace(t,"").replace(/\s+/g," ")+" language-"+a;var s=n.parentElement;s&&"pre"===s.nodeName.toLowerCase()&&(s.className=s.className.replace(t,"").replace(/\s+/g," ")+" language-"+a);var l={element:n,language:a,grammar:u,code:n.textContent};function c(e){l.highlightedCode=e,o.hooks.run("before-insert",l),l.element.innerHTML=l.highlightedCode,o.hooks.run("after-highlight",l),o.hooks.run("complete",l),i&&i.call(l.element)}if(o.hooks.run("before-sanity-check",l),(s=l.element.parentElement)&&"pre"===s.nodeName.toLowerCase()&&!s.hasAttribute("tabindex")&&s.setAttribute("tabindex","0"),!l.code)return o.hooks.run("complete",l),void(i&&i.call(l.element));if(o.hooks.run("before-highlight",l),l.grammar)if(r&&e.Worker){var f=new Worker(o.filename);f.onmessage=function(e){c(e.data)},f.postMessage(JSON.stringify({language:l.language,code:l.code,immediateClose:!0}))}else c(o.highlight(l.code,l.grammar,l.language));else c(o.util.encode(l.code))},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};return o.hooks.run("before-tokenize",r),r.tokens=o.tokenize(r.code,r.grammar),o.hooks.run("after-tokenize",r),i.stringify(o.util.encode(r.tokens),r.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var r in n)t[r]=n[r];delete t.rest}var o=new s;return l(o,o.head,e),u(e,o,t,o.head,0),function(e){for(var t=[],n=e.head.next;n!==e.tail;)t.push(n.value),n=n.next;return t}(o)},hooks:{all:{},add:function(e,t){var n=o.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=o.hooks.all[e];if(n&&n.length)for(var r,i=0;r=n[i++];)r(t)}},Token:i};function i(e,t,n,r){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length}function a(e,t,n,r){e.lastIndex=t;var o=e.exec(n);if(o&&r&&o[1]){var i=o[1].length;o.index+=i,o[0]=o[0].slice(i)}return o}function u(e,t,n,r,s,f){for(var d in n)if(n.hasOwnProperty(d)&&n[d]){var p=n[d];p=Array.isArray(p)?p:[p];for(var h=0;h<p.length;++h){if(f&&f.cause==d+","+h)return;var g=p[h],v=g.inside,y=!!g.lookbehind,m=!!g.greedy,b=g.alias;if(m&&!g.pattern.global){var w=g.pattern.toString().match(/[imsuy]*$/)[0];g.pattern=RegExp(g.pattern.source,w+"g")}for(var E=g.pattern||g,D=r.next,C=s;D!==t.tail&&!(f&&C>=f.reach);C+=D.value.length,D=D.next){var x=D.value;if(t.length>e.length)return;if(!(x instanceof i)){var S,A=1;if(m){if(!(S=a(E,C,e,y)))break;var O=S.index,k=S.index+S[0].length,B=C;for(B+=D.value.length;O>=B;)B+=(D=D.next).value.length;if(C=B-=D.value.length,D.value instanceof i)continue;for(var F=D;F!==t.tail&&(B<k||"string"==typeof F.value);F=F.next)A++,B+=F.value.length;A--,x=e.slice(C,B),S.index-=C}else if(!(S=a(E,0,x,y)))continue;O=S.index;var _=S[0],T=x.slice(0,O),P=x.slice(O+_.length),j=C+x.length;f&&j>f.reach&&(f.reach=j);var N=D.prev;if(T&&(N=l(t,N,T),C+=T.length),c(t,N,A),D=l(t,N,new i(d,v?o.tokenize(_,v):_,b,_)),P&&l(t,D,P),A>1){var I={cause:d+","+h,reach:j};u(e,t,n,D.prev,C,I),f&&I.reach>f.reach&&(f.reach=I.reach)}}}}}}function s(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function l(e,t,n){var r=t.next,o={value:n,prev:t,next:r};return t.next=o,r.prev=o,e.length++,o}function c(e,t,n){for(var r=t.next,o=0;o<n&&r!==e.tail;o++)r=r.next;t.next=r,r.prev=t,e.length-=o}if(e.Prism=o,i.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var r="";return t.forEach((function(t){r+=e(t,n)})),r}var i={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},a=t.alias;a&&(Array.isArray(a)?Array.prototype.push.apply(i.classes,a):i.classes.push(a)),o.hooks.run("wrap",i);var u="";for(var s in i.attributes)u+=" "+s+'="'+(i.attributes[s]||"").replace(/"/g,"&quot;")+'"';return"<"+i.tag+' class="'+i.classes.join(" ")+'"'+u+">"+i.content+"</"+i.tag+">"},!e.document)return e.addEventListener?(o.disableWorkerMessageHandler||e.addEventListener("message",(function(t){var n=JSON.parse(t.data),r=n.language,i=n.code,a=n.immediateClose;e.postMessage(o.highlight(i,o.languages[r],r)),a&&e.close()}),!1),o):o;var f=o.util.currentScript();function d(){o.manual||o.highlightAll()}if(f&&(o.filename=f.src,f.hasAttribute("data-manual")&&(o.manual=!0)),!o.manual){var p=document.readyState;"loading"===p||"interactive"===p&&f&&f.defer?document.addEventListener("DOMContentLoaded",d):window.requestAnimationFrame?window.requestAnimationFrame(d):window.setTimeout(d,16)}return o}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});
/**
   * Prism: Lightweight, robust, elegant syntax highlighting
   *
   * @license MIT <https://opensource.org/licenses/MIT>
   * @author Lea Verou <https://lea.verou.me>
   * @namespace
   * @public
   */e.exports&&(e.exports=t),void 0!==uee&&(uee.Prism=t),t.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},t.languages.markup.tag.inside["attr-value"].inside.entity=t.languages.markup.entity,t.languages.markup.doctype.inside["internal-subset"].inside=t.languages.markup,t.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(t.languages.markup.tag,"addInlined",{value:function(e,n){var r={};r["language-"+n]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:t.languages[n]},r.cdata=/^<!\[CDATA\[|\]\]>$/i;var o={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:r}};o["language-"+n]={pattern:/[\s\S]+/,inside:t.languages[n]};var i={};i[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:o},t.languages.insertBefore("markup","cdata",i)}}),Object.defineProperty(t.languages.markup.tag,"addAttribute",{value:function(e,n){t.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[n,"language-"+n],inside:t.languages[n]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),t.languages.html=t.languages.markup,t.languages.mathml=t.languages.markup,t.languages.svg=t.languages.markup,t.languages.xml=t.languages.extend("markup",{}),t.languages.ssml=t.languages.xml,t.languages.atom=t.languages.xml,t.languages.rss=t.languages.xml,function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(t),t.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},t.languages.javascript=t.languages.extend("clike",{"class-name":[t.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),t.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,t.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:t.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:t.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:t.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:t.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:t.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),t.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:t.languages.javascript}},string:/[\s\S]+/}}}),t.languages.markup&&(t.languages.markup.tag.addInlined("script","javascript"),t.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),t.languages.js=t.languages.javascript,function(){if(void 0!==t&&"undefined"!=typeof document){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"},n="data-src-status",r='pre[data-src]:not([data-src-status="loaded"]):not([data-src-status="loading"])',o=/\blang(?:uage)?-([\w-]+)\b/i;t.hooks.add("before-highlightall",(function(e){e.selector+=", "+r})),t.hooks.add("before-sanity-check",(function(o){var i=o.element;if(i.matches(r)){o.code="",i.setAttribute(n,"loading");var u=i.appendChild(document.createElement("CODE"));u.textContent="Loading…";var s=i.getAttribute("data-src"),l=o.language;if("none"===l){var c=(/\.(\w+)$/.exec(s)||[,"none"])[1];l=e[c]||c}a(u,l),a(i,l);var f=t.plugins.autoloader;f&&f.loadLanguages(l);var d=new XMLHttpRequest;d.open("GET",s,!0),d.onreadystatechange=function(){4==d.readyState&&(d.status<400&&d.responseText?(i.setAttribute(n,"loaded"),u.textContent=d.responseText,t.highlightElement(u)):(i.setAttribute(n,"failed"),d.status>=400?u.textContent="✖ Error "+d.status+" while fetching file: "+d.statusText:u.textContent="✖ Error: File does not exist or is empty"))},d.send(null)}})),t.plugins.fileHighlight={highlight:function(e){for(var n,o=(e||document).querySelectorAll(r),i=0;n=o[i++];)t.highlightElement(n)}};var i=!1;t.fileHighlight=function(){i||(console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."),i=!0),t.plugins.fileHighlight.highlight.apply(this,arguments)}}function a(e,t){var n=e.className;n=n.replace(o," ")+" language-"+t,e.className=n.replace(/\s+/g," ").trim()}}()}));!function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,r=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,o=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function i(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return r})).replace(/<SPREAD>/g,(function(){return o})),RegExp(e,t)}o=i(o).source,e.languages.jsx=e.languages.extend("markup",t),e.languages.jsx.tag.pattern=i(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/i,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:i(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:i(/=<BRACES>/.source),inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx},alias:"language-javascript"}},e.languages.jsx.tag);var a=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(a).join(""):""},u=function(t){for(var n=[],r=0;r<t.length;r++){var o=t[r],i=!1;if("string"!=typeof o&&("tag"===o.type&&o.content[0]&&"tag"===o.content[0].type?"</"===o.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===a(o.content[0].content[1])&&n.pop():"/>"===o.content[o.content.length-1].content||n.push({tagName:a(o.content[0].content[1]),openedBraces:0}):n.length>0&&"punctuation"===o.type&&"{"===o.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&"punctuation"===o.type&&"}"===o.content?n[n.length-1].openedBraces--:i=!0),(i||"string"==typeof o)&&n.length>0&&0===n[n.length-1].openedBraces){var s=a(o);r<t.length-1&&("string"==typeof t[r+1]||"plain-text"===t[r+1].type)&&(s+=a(t[r+1]),t.splice(r+1,1)),r>0&&("string"==typeof t[r-1]||"plain-text"===t[r-1].type)&&(s=a(t[r-1])+s,t.splice(r-1,1),r--),t[r]=new e.Token("plain-text",s,null,s)}o.content&&"string"!=typeof o.content&&u(o.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||u(e.tokens)}))}(Prism),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|as|declare|implements|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter;var t=e.languages.extend("typescript",{});delete t["class-name"],e.languages.typescript["class-name"].inside=t,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:t}}}}),e.languages.ts=e.languages.typescript}(Prism),Prism.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.languages.markup.doctype.inside["internal-subset"].inside=Prism.languages.markup,Prism.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(Prism.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:Prism.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};r["language-"+t]={pattern:/[\s\S]+/,inside:Prism.languages[t]};var o={};o[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:r},Prism.languages.insertBefore("markup","cdata",o)}}),Object.defineProperty(Prism.languages.markup.tag,"addAttribute",{value:function(e,t){Prism.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:Prism.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup,Prism.languages.xml=Prism.languages.extend("markup",{}),Prism.languages.ssml=Prism.languages.xml,Prism.languages.atom=Prism.languages.xml,Prism.languages.rss=Prism.languages.xml,Prism.languages.go=Prism.languages.extend("clike",{string:{pattern:/(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|iota|nil|true|false)\b/,number:/(?:\b0x[a-f\d]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[-+]?\d+)?)i?/i,operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\b/}),delete Prism.languages.go["class-name"],function(e){var t=/\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/,n=[{pattern:/\b(?:false|true)\b/i,alias:"boolean"},{pattern:/(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,greedy:!0,lookbehind:!0},{pattern:/(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,greedy:!0,lookbehind:!0},/\b(?:null)\b/i,/\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/],r=/\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i,o=/<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/,i=/[{}\[\](),:;]/;e.languages.php={delimiter:{pattern:/\?>$|^<\?(?:php(?=\s)|=)?/i,alias:"important"},comment:t,variable:/\$+(?:\w+\b|(?=\{))/i,package:{pattern:/(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,lookbehind:!0,inside:{punctuation:/\\/}},"class-name-definition":{pattern:/(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,lookbehind:!0,alias:"class-name"},"function-definition":{pattern:/(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,lookbehind:!0,alias:"function"},keyword:[{pattern:/(\(\s*)\b(?:bool|boolean|int|integer|float|string|object|array)\b(?=\s*\))/i,alias:"type-casting",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*)\b(?:bool|int|float|string|object|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*[\w|]\|\s*)(?:null|false)\b(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?)\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?[\w|]\|\s*)(?:null|false)\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|iterable|(?:null|false)(?=\s*\|))\b/i,alias:"type-declaration",greedy:!0},{pattern:/(\|\s*)(?:null|false)\b/i,alias:"type-declaration",greedy:!0,lookbehind:!0},{pattern:/\b(?:parent|self|static)(?=\s*::)/i,alias:"static-context",greedy:!0},{pattern:/(\byield\s+)from\b/i,lookbehind:!0},/\bclass\b/i,{pattern:/((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i,lookbehind:!0}],"argument-name":{pattern:/([(,]\s+)\b[a-z_]\w*(?=\s*:(?!:))/i,lookbehind:!0},"class-name":[{pattern:/(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,greedy:!0,lookbehind:!0},{pattern:/(\|\s*)\b[a-z_]\w*(?!\\)\b/i,greedy:!0,lookbehind:!0},{pattern:/\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,greedy:!0},{pattern:/(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,alias:"class-name-fully-qualified",greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,alias:"class-name-fully-qualified",greedy:!0,inside:{punctuation:/\\/}},{pattern:/(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,alias:"class-name-fully-qualified",greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/\b[a-z_]\w*(?=\s*\$)/i,alias:"type-declaration",greedy:!0},{pattern:/(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,alias:["class-name-fully-qualified","type-declaration"],greedy:!0,inside:{punctuation:/\\/}},{pattern:/\b[a-z_]\w*(?=\s*::)/i,alias:"static-context",greedy:!0},{pattern:/(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,alias:["class-name-fully-qualified","static-context"],greedy:!0,inside:{punctuation:/\\/}},{pattern:/([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,alias:"type-hint",greedy:!0,lookbehind:!0},{pattern:/([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,alias:["class-name-fully-qualified","type-hint"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}},{pattern:/(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,alias:"return-type",greedy:!0,lookbehind:!0},{pattern:/(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,alias:["class-name-fully-qualified","return-type"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}}],constant:n,function:{pattern:/(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,lookbehind:!0,inside:{punctuation:/\\/}},property:{pattern:/(->\s*)\w+/,lookbehind:!0},number:r,operator:o,punctuation:i};var a={pattern:/\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,lookbehind:!0,inside:e.languages.php},u=[{pattern:/<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,alias:"nowdoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<<'[^']+'|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<'?|[';]$/}}}},{pattern:/<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,alias:"symbol",inside:{punctuation:/^<<<"?|[";]$/}},interpolation:a}},{pattern:/`(?:\\[\s\S]|[^\\`])*`/,alias:"backtick-quoted-string",greedy:!0},{pattern:/'(?:\\[\s\S]|[^\\'])*'/,alias:"single-quoted-string",greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,alias:"double-quoted-string",greedy:!0,inside:{interpolation:a}}];e.languages.insertBefore("php","variable",{string:u,attribute:{pattern:/#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,greedy:!0,inside:{"attribute-content":{pattern:/^(#\[)[\s\S]+(?=\]$)/,lookbehind:!0,inside:{comment:t,string:u,"attribute-class-name":[{pattern:/([^:]|^)\b[a-z_]\w*(?!\\)\b/i,alias:"class-name",greedy:!0,lookbehind:!0},{pattern:/([^:]|^)(?:\\?\b[a-z_]\w*)+/i,alias:["class-name","class-name-fully-qualified"],greedy:!0,lookbehind:!0,inside:{punctuation:/\\/}}],constant:n,number:r,operator:o,punctuation:i}},delimiter:{pattern:/^#\[|\]$/,alias:"punctuation"}}}}),e.hooks.add("before-tokenize",(function(t){/<\?/.test(t.code)&&e.languages["markup-templating"].buildPlaceholders(t,"php",/<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/gi)})),e.hooks.add("after-tokenize",(function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"php")}))}(Prism),Prism.languages.c=Prism.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),Prism.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},Prism.languages.c.string],comment:Prism.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:Prism.languages.c}}},constant:/\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\b/}),delete Prism.languages.c.boolean,Prism.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"string-interpolation":{pattern:/(?:f|rf|fr)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|rb|br)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/im,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python,function(e){var t=/\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/,n=/(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source,r={pattern:RegExp(n+/[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,inside:{punctuation:/\./}},punctuation:/\./}};e.languages.java=e.languages.extend("clike",{"class-name":[r,{pattern:RegExp(n+/[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source),lookbehind:!0,inside:r.inside}],keyword:t,function:[e.languages.clike.function,{pattern:/(::\s*)[a-z_]\w*/,lookbehind:!0}],number:/\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore("java","string",{"triple-quoted-string":{pattern:/"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,greedy:!0,alias:"string"}}),e.languages.insertBefore("java","class-name",{annotation:{pattern:/(^|[^.])@\w+(?:\s*\.\s*\w+)*/,lookbehind:!0,alias:"punctuation"},generics:{pattern:/<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,inside:{"class-name":r,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}},namespace:{pattern:RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0,inside:{punctuation:/\./}}})}(Prism),function(e){var t=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char8_t|char16_t|char32_t|class|compl|concept|const|consteval|constexpr|constinit|const_cast|continue|co_await|co_return|co_yield|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,n=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:t,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:true|false)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:module|import)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(Prism),function(e){function t(e,t){return e.replace(/<<(\d+)>>/g,(function(e,n){return"(?:"+t[+n]+")"}))}function n(e,n,r){return RegExp(t(e,n),r||"")}function r(e,t){for(var n=0;n<t;n++)e=e.replace(/<<self>>/g,(function(){return"(?:"+e+")"}));return e.replace(/<<self>>/g,"[^\\s\\S]")}var o="bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void",i="class enum interface record struct",a="add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)",u="abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield";function s(e){return"\\b(?:"+e.trim().replace(/ /g,"|")+")\\b"}var l=s(i),c=RegExp(s(o+" "+i+" "+a+" "+u)),f=s(i+" "+a+" "+u),d=s(o+" "+i+" "+u),p=r(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source,2),h=r(/\((?:[^()]|<<self>>)*\)/.source,2),g=/@?\b[A-Za-z_]\w*\b/.source,v=t(/<<0>>(?:\s*<<1>>)?/.source,[g,p]),y=t(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source,[f,v]),m=/\[\s*(?:,\s*)*\]/.source,b=t(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source,[y,m]),w=t(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,[p,h,m]),E=t(/\(<<0>>+(?:,<<0>>+)+\)/.source,[w]),D=t(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source,[E,y,m]),C={keyword:c,punctuation:/[<>()?,.:[\]]/},x=/'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source,S=/"(?:\\.|[^\\"\r\n])*"/.source,A=/@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;e.languages.csharp=e.languages.extend("clike",{string:[{pattern:n(/(^|[^$\\])<<0>>/.source,[A]),lookbehind:!0,greedy:!0},{pattern:n(/(^|[^@$\\])<<0>>/.source,[S]),lookbehind:!0,greedy:!0},{pattern:RegExp(x),greedy:!0,alias:"character"}],"class-name":[{pattern:n(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source,[y]),lookbehind:!0,inside:C},{pattern:n(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source,[g,D]),lookbehind:!0,inside:C},{pattern:n(/(\busing\s+)<<0>>(?=\s*=)/.source,[g]),lookbehind:!0},{pattern:n(/(\b<<0>>\s+)<<1>>/.source,[l,v]),lookbehind:!0,inside:C},{pattern:n(/(\bcatch\s*\(\s*)<<0>>/.source,[y]),lookbehind:!0,inside:C},{pattern:n(/(\bwhere\s+)<<0>>/.source,[g]),lookbehind:!0},{pattern:n(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source,[b]),lookbehind:!0,inside:C},{pattern:n(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source,[D,d,g]),inside:C}],keyword:c,number:/(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:ul|lu|[dflmu])?\b/i,operator:/>>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,punctuation:/\?\.?|::|[{}[\];(),.:]/}),e.languages.insertBefore("csharp","number",{range:{pattern:/\.\./,alias:"operator"}}),e.languages.insertBefore("csharp","punctuation",{"named-parameter":{pattern:n(/([(,]\s*)<<0>>(?=\s*:)/.source,[g]),lookbehind:!0,alias:"punctuation"}}),e.languages.insertBefore("csharp","class-name",{namespace:{pattern:n(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source,[g]),lookbehind:!0,inside:{punctuation:/\./}},"type-expression":{pattern:n(/(\b(?:default|typeof|sizeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source,[h]),lookbehind:!0,alias:"class-name",inside:C},"return-type":{pattern:n(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source,[D,y]),inside:C,alias:"class-name"},"constructor-invocation":{pattern:n(/(\bnew\s+)<<0>>(?=\s*[[({])/.source,[D]),lookbehind:!0,inside:C,alias:"class-name"},"generic-method":{pattern:n(/<<0>>\s*<<1>>(?=\s*\()/.source,[g,p]),inside:{function:n(/^<<0>>/.source,[g]),generic:{pattern:RegExp(p),alias:"class-name",inside:C}}},"type-list":{pattern:n(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source,[l,v,g,D,c.source,h,/\bnew\s*\(\s*\)/.source]),lookbehind:!0,inside:{"record-arguments":{pattern:n(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source,[v,h]),lookbehind:!0,greedy:!0,inside:e.languages.csharp},keyword:c,"class-name":{pattern:RegExp(D),greedy:!0,inside:C},punctuation:/[,()]/}},preprocessor:{pattern:/(^[\t ]*)#.*/m,lookbehind:!0,alias:"property",inside:{directive:{pattern:/(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,lookbehind:!0,alias:"keyword"}}}});var O=S+"|"+x,k=t(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source,[O]),B=r(t(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[k]),2),F=/\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source,_=t(/<<0>>(?:\s*\(<<1>>*\))?/.source,[y,B]);e.languages.insertBefore("csharp","class-name",{attribute:{pattern:n(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source,[F,_]),lookbehind:!0,greedy:!0,inside:{target:{pattern:n(/^<<0>>(?=\s*:)/.source,[F]),alias:"keyword"},"attribute-arguments":{pattern:n(/\(<<0>>*\)/.source,[B]),inside:e.languages.csharp},"class-name":{pattern:RegExp(y),inside:{punctuation:/\./}},punctuation:/[:,]/}}});var T=/:[^}\r\n]+/.source,P=r(t(/[^"'/()]|<<0>>|\(<<self>>*\)/.source,[k]),2),j=t(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[P,T]),N=r(t(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source,[O]),2),I=t(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source,[N,T]);function R(t,r){return{interpolation:{pattern:n(/((?:^|[^{])(?:\{\{)*)<<0>>/.source,[t]),lookbehind:!0,inside:{"format-string":{pattern:n(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source,[r,T]),lookbehind:!0,inside:{punctuation:/^:/}},punctuation:/^\{|\}$/,expression:{pattern:/[\s\S]+/,alias:"language-csharp",inside:e.languages.csharp}}},string:/[\s\S]+/}}e.languages.insertBefore("csharp","string",{"interpolation-string":[{pattern:n(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source,[j]),lookbehind:!0,greedy:!0,inside:R(j,P)},{pattern:n(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source,[I]),lookbehind:!0,greedy:!0,inside:R(I,N)}]})}(Prism),Prism.languages.dotnet=Prism.languages.cs=Prism.languages.csharp,Prism.languages["visual-basic"]={comment:{pattern:/(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,inside:{keyword:/^REM/i}},directive:{pattern:/#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:[^\S\r\n]_[^\S\r\n]*(?:\r\n?|\n)|.)+/i,alias:"comment",greedy:!0},string:{pattern:/\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,greedy:!0},date:{pattern:/#[^\S\r\n]*(?:\d+([/-])\d+\1\d+(?:[^\S\r\n]+(?:\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?))?|\d+[^\S\r\n]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[^\S\r\n]*(?:AM|PM))?)[^\S\r\n]*#/i,alias:"builtin"},number:/(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:U?[ILS]|[FRD])?/i,boolean:/\b(?:True|False|Nothing)\b/i,keyword:/\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Until|Xor)\b/i,operator:[/[+\-*/\\^<=>&#@$%!]/,{pattern:/([^\S\r\n])_(?=[^\S\r\n]*[\r\n])/,lookbehind:!0}],punctuation:/[{}().,:?]/},Prism.languages.vb=Prism.languages["visual-basic"],Prism.languages.vba=Prism.languages["visual-basic"],Prism.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:S|ING)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:TRUE|FALSE|NULL)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|IN|ILIKE|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){e.languages.ruby=e.languages.extend("clike",{comment:[/#.*/,{pattern:/^=begin\s[\s\S]*?^=end/m,greedy:!0}],"class-name":{pattern:/(\b(?:class)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/});var t={pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"tag"},rest:e.languages.ruby}};delete e.languages.ruby.function,e.languages.insertBefore("ruby","keyword",{regex:[{pattern:RegExp(/%r/.source+"(?:"+[/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,/\((?:[^()\\]|\\[\s\S])*\)/.source,/\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source,/\[(?:[^\[\]\\]|\\[\s\S])*\]/.source,/<(?:[^<>\\]|\\[\s\S])*>/.source].join("|")+")"+/[egimnosux]{0,6}/.source),greedy:!0,inside:{interpolation:t}},{pattern:/(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,lookbehind:!0,greedy:!0,inside:{interpolation:t}}],variable:/[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,symbol:{pattern:/(^|[^:]):[a-zA-Z_]\w*(?:[?!]|\b)/,lookbehind:!0},"method-definition":{pattern:/(\bdef\s+)[\w.]+/,lookbehind:!0,inside:{function:/\w+$/,rest:e.languages.ruby}}}),e.languages.insertBefore("ruby","number",{builtin:/\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\b/,constant:/\b[A-Z]\w*(?:[?!]|\b)/}),e.languages.ruby.string=[{pattern:RegExp(/%[qQiIwWxs]?/.source+"(?:"+[/([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,/\((?:[^()\\]|\\[\s\S])*\)/.source,/\{(?:[^#{}\\]|#(?:\{[^}]+\})?|\\[\s\S])*\}/.source,/\[(?:[^\[\]\\]|\\[\s\S])*\]/.source,/<(?:[^<>\\]|\\[\s\S])*>/.source].join("|")+")"),greedy:!0,inside:{interpolation:t}},{pattern:/("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,greedy:!0,inside:{interpolation:t}},{pattern:/<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?[a-z_]\w*|[a-z_]\w*$/i,alias:"symbol",inside:{punctuation:/^<<[-~]?/}},interpolation:t}},{pattern:/<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,alias:"heredoc-string",greedy:!0,inside:{delimiter:{pattern:/^<<[-~]?'[a-z_]\w*'|[a-z_]\w*$/i,alias:"symbol",inside:{punctuation:/^<<[-~]?'|'$/}}}}],e.languages.rb=e.languages.ruby}(Prism),Prism.languages.swift={comment:{pattern:/(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,lookbehind:!0,greedy:!0},"string-literal":[{pattern:RegExp(/(^|[^"#])/.source+"(?:"+/"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source+"|"+/"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source+")"+/(?!["#])/.source),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\\($/,alias:"punctuation"},punctuation:/\\(?=[\r\n])/,string:/[\s\S]+/}},{pattern:RegExp(/(^|[^"#])(#+)/.source+"(?:"+/"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source+"|"+/"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source+")\\2"),lookbehind:!0,greedy:!0,inside:{interpolation:{pattern:/(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,lookbehind:!0,inside:null},"interpolation-punctuation":{pattern:/^\)|\\#+\($/,alias:"punctuation"},string:/[\s\S]+/}}],directive:{pattern:RegExp(/#/.source+"(?:"+/(?:elseif|if)\b/.source+"(?:[ \t]*"+/(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source+")+|"+/(?:else|endif)\b/.source+")"),alias:"property",inside:{"directive-name":/^#\w+/,boolean:/\b(?:true|false)\b/,number:/\b\d+(?:\.\d+)*\b/,operator:/!|&&|\|\||[<>]=?/,punctuation:/[(),]/}},literal:{pattern:/#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,alias:"constant"},"other-directive":{pattern:/#\w+\b/,alias:"property"},attribute:{pattern:/@\w+/,alias:"atrule"},"function-definition":{pattern:/(\bfunc\s+)\w+/,lookbehind:!0,alias:"function"},label:{pattern:/\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,lookbehind:!0,alias:"important"},keyword:/\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,boolean:/\b(?:true|false)\b/,nil:{pattern:/\bnil\b/,alias:"constant"},"short-argument":/\$\d+\b/,omit:{pattern:/\b_\b/,alias:"keyword"},number:/\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,"class-name":/\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,function:/\b[a-z_]\w*(?=\s*\()/i,constant:/\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,operator:/[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,punctuation:/[{}[\]();,.:\\]/},Prism.languages.swift["string-literal"].forEach((function(e){e.inside.interpolation.inside=Prism.languages.swift})),function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},r={bash:n,environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:r},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:r},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:r.entity}}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:r.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var o=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],i=r.variable[1].inside,a=0;a<o.length;a++)i[o[a]]=e.languages.bash[o[a]];e.languages.shell=e.languages.bash}(Prism),function(e){var t=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var r=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,o=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return r})),i=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"font-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+o+i+"(?:"+o+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+o+i+")(?:"+o+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(r),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+o+")"+i+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+o+"$"),inside:{"table-header":{pattern:RegExp(r),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:n(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike","code-snippet"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,r=t.length;n<r;n++){var o=t[n];if("code"===o.type){var i=o.content[1],a=o.content[3];if(i&&a&&"code-language"===i.type&&"code-block"===a.type&&"string"==typeof i.content){var u=i.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),s="language-"+(u=(/[a-z][\w-]*/i.exec(u)||[""])[0].toLowerCase());a.alias?"string"==typeof a.alias?a.alias=[a.alias,s]:a.alias.push(s):a.alias=[s]}}else e(o.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",r=0,o=t.classes.length;r<o;r++){var i=t.classes[r],l=/language-(.+)/.exec(i);if(l){n=l[1];break}}var c=e.languages[n];if(c)t.content=e.highlight((d=t.content,d.replace(a,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,t){var n;return"#"===(t=t.toLowerCase())[0]?(n="x"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),s(n)):u[t]||e}))),c,n);else if(n&&"none"!==n&&e.plugins.autoloader){var f="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=f,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(f);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}var d}));var a=RegExp(e.languages.markup.tag.pattern.source,"gi"),u={amp:"&",lt:"<",gt:">",quot:'"'},s=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(Prism);var vre=["comment","prolog","doctype","cdata","punctuation","namespace","property","tag","boolean","number","constant","symbol","deleted","selector","attr-name","string","builtin","inserted","operator","entity","url","string","atrule","attr-value","keyword","function","class-name","regex","important","variable","bold","italic","entity","char"];function yre(e){return"string"==typeof e?e.length:"string"==typeof e.content?e.content.length:e.content.reduce((function(e,t){return e+yre(t)}),0)}var mre,bre=dee.String,wre=function(e){if("Symbol"===ene(e))throw TypeError("Cannot convert a Symbol value to a string");return bre(e)},Ere=function(){var e=ite(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},Dre=dee.RegExp,Cre=$ee((function(){var e=Dre("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),xre=Cre||$ee((function(){return!Dre("a","y").sticky})),Sre={BROKEN_CARET:Cre||$ee((function(){var e=Dre("^r","gy");return e.lastIndex=2,null!=e.exec("str")})),MISSED_STICKY:xre,UNSUPPORTED_Y:Cre},Are=Zee?Object.defineProperties:function(e,t){ite(e);for(var n,r=Lne(t),o=cre(t),i=o.length,a=0;i>a;)Dte.f(e,n=o[a++],r[n]);return e},Ore=jee("document","documentElement"),kre=Pte("IE_PROTO"),Bre=function(){},Fre=function(e){return"<script>"+e+"<\/script>"},_re=function(e){e.write(Fre("")),e.close();var t=e.parentWindow.Object;return e=null,t},Tre=function(){try{mre=new ActiveXObject("htmlfile")}catch(r){}var e,t;Tre="undefined"!=typeof document?document.domain&&mre?_re(mre):((t=tte("iframe")).style.display="none",Ore.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(Fre("document.F=Object")),e.close(),e.F):_re(mre);for(var n=Kne.length;n--;)delete Tre.prototype[Kne[n]];return Tre()};jte[kre]=!0;var Pre,jre,Nre=Object.create||function(e,t){var n;return null!==e?(Bre.prototype=ite(e),n=new Bre,Bre.prototype=null,n[kre]=e):n=Tre(),void 0===t?n:Are(n,t)},Ire=dee.RegExp,Rre=$ee((function(){var e=Ire(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)})),Lre=dee.RegExp,Mre=$ee((function(){var e=Lre("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")})),zre=Hte.get,$re=vee("native-string-replace",String.prototype.replace),Hre=RegExp.prototype.exec,Vre=Hre,Ure=Eee("".charAt),Wre=Eee("".indexOf),qre=Eee("".replace),Gre=Eee("".slice),Kre=(jre=/b*/g,ute(Hre,Pre=/a/,"a"),ute(Hre,jre,"a"),0!==Pre.lastIndex||0!==jre.lastIndex),Yre=Sre.BROKEN_CARET,Xre=void 0!==/()??/.exec("")[1];(Kre||Xre||Yre||Rre||Mre)&&(Vre=function(e){var t,n,r,o,i,a,u,s=this,l=zre(s),c=wre(e),f=l.raw;if(f)return f.lastIndex=s.lastIndex,t=ute(Vre,f,c),s.lastIndex=f.lastIndex,t;var d=l.groups,p=Yre&&s.sticky,h=ute(Ere,s),g=s.source,v=0,y=c;if(p&&(h=qre(h,"y",""),-1===Wre(h,"g")&&(h+="g"),y=Gre(c,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&"\n"!==Ure(c,s.lastIndex-1))&&(g="(?: "+g+")",y=" "+y,v++),n=new RegExp("^(?:"+g+")",h)),Xre&&(n=new RegExp("^"+g+"$(?!\\s)",h)),Kre&&(r=s.lastIndex),o=ute(Hre,p?n:s,y),p?o?(o.input=Gre(o.input,v),o[0]=Gre(o[0],v),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:Kre&&o&&(s.lastIndex=s.global?o.index+o[0].length:r),Xre&&o&&o.length>1&&ute($re,o[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)})),o&&d)for(o.groups=a=Nre(null),i=0;i<d.length;i++)a[(u=d[i])[0]]=o[u[1]];return o});var Zre=Vre;lre({target:"RegExp",proto:!0,forced:/./.exec!==Zre},{exec:Zre});var Jre=Function.prototype,Qre=Jre.apply,eoe=Jre.bind,toe=Jre.call,noe="object"==typeof Reflect&&Reflect.apply||(eoe?toe.bind(Qre):function(){return toe.apply(Qre,arguments)}),roe=Kee("species"),ooe=RegExp.prototype,ioe=Kee("match"),aoe=dee.TypeError,uoe=Kee("species"),soe=Eee("".charAt),loe=Eee("".charCodeAt),coe=Eee("".slice),foe=function(e){return function(t,n){var r,o,i=wre(Cee(t)),a=pne(n),u=i.length;return a<0||a>=u?e?"":void 0:(r=loe(i,a))<55296||r>56319||a+1===u||(o=loe(i,a+1))<56320||o>57343?e?soe(i,a):r:e?coe(i,a,a+2):o-56320+(r-55296<<10)+65536}},doe=(foe(!1),foe(!0)),poe=function(e,t,n){return t+(n?doe(e,t).length:1)},hoe=dee.Array,goe=Math.max,voe=function(e,t,n){for(var r,o,i,a,u=vne(e),s=Vne(t,u),l=Vne(void 0===n?u:n,u),c=hoe(goe(l-s,0)),f=0;s<l;s++,f++)r=c,o=f,i=e[s],void 0,(a=bte(o))in r?Dte.f(r,a,Cte(0,i)):r[a]=i;return c.length=f,c},yoe=dee.TypeError,moe=function(e,t){var n=e.exec;if(Tee(n)){var r=ute(n,e,t);return null!==r&&ite(r),r}if("RegExp"===Xte(e))return ute(Zre,e,t);throw yoe("RegExp#exec called on incompatible receiver")},boe=Sre.UNSUPPORTED_Y,woe=Math.min,Eoe=[].push,Doe=Eee(/./.exec),Coe=Eee(Eoe),xoe=Eee("".slice);!function(e,t,n,r){var o=Kee(e),i=!$ee((function(){var t={};return t[o]=function(){return 7},7!=""[e](t)})),a=i&&!$ee((function(){var e=!1,t=/a/;return(t={}).constructor={},t.constructor[roe]=function(){return t},t.flags="",t[o]=/./[o],t.exec=function(){return e=!0,null},t[o](""),!e}));if(!i||!a||n){var u=Eee(/./[o]),s=function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r,o,i=wre(Cee(this)),a=void 0===n?4294967295:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!Jee(r=e)||!(void 0!==(o=r[ioe])?o:"RegExp"==Xte(r)))return ute(t,i,e,a);for(var u,s,l,c=[],f=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),d=0,p=new RegExp(e.source,f+"g");(u=ute(Zre,p,i))&&!((s=p.lastIndex)>d&&(Coe(c,xoe(i,d,u.index)),u.length>1&&u.index<i.length&&noe(Eoe,c,voe(u,1)),l=u[0].length,d=s,c.length>=a));)p.lastIndex===u.index&&p.lastIndex++;return d===i.length?!l&&Doe(p,"")||Coe(c,""):Coe(c,xoe(i,d)),c.length>a?voe(c,0,a):c}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:ute(t,this,e,n)}:t,[function(t,n){var o=Cee(this),i=null==t?void 0:gte(t,e);return i?ute(i,t,o,n):ute(r,wre(o),t,n)},function(e,o){var i=ite(this),a=wre(e),u=n(r,i,a,o,r!==t);if(u.done)return u.value;var s=function(e,t){var n,r=ite(e).constructor;return void 0===r||null==(n=ite(r)[uoe])?t:function(e){if(Sne(e))return e;throw aoe(dte(e)+" is not a constructor")}(n)}(i,RegExp),l=i.unicode,c=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.unicode?"u":"")+(boe?"g":"y"),f=new s(boe?"^(?:"+i.source+")":i,c),d=void 0===o?4294967295:o>>>0;if(0===d)return[];if(0===a.length)return null===moe(f,a)?[a]:[];for(var p=0,h=0,g=[];h<a.length;){f.lastIndex=boe?0:h;var v,y=moe(f,boe?xoe(a,h):a);if(null===y||(v=woe(gne(f.lastIndex+(boe?h:0)),a.length))===p)h=poe(a,h,l);else{if(Coe(g,xoe(a,p,h)),g.length===d)return g;for(var m=1;m<=y.length-1;m++)if(Coe(g,y[m]),g.length===d)return g;h=p=v}}return Coe(g,xoe(a,p)),g}]}(o,""[e],(function(e,t,n,r,o){var a=Eee(e),s=t.exec;return s===Zre||s===ooe.exec?i&&!o?{done:!0,value:u(t,n,r)}:{done:!0,value:a(n,t,r)}:{done:!1}}));Gte(String.prototype,e,s[0]),Gte(ooe,o,s[1])}r&&xte(ooe[o],"sham",!0)}("split",0,!!$ee((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]})),boe),lre({global:!0},{globalThis:dee}),jr&&(Fr.fn.attr=jr);var Soe=qte.PROPER,Aoe=RegExp.prototype,Ooe=Aoe.toString,koe=Eee(Ere),Boe=$ee((function(){return"/a/b"!=Ooe.call({source:"a",flags:"b"})})),Foe=Soe&&"toString"!=Ooe.name;(Boe||Foe)&&Gte(RegExp.prototype,"toString",(function(){var e=ite(this),t=wre(e.source),n=e.flags;return"/"+t+"/"+wre(void 0===n&&ste(Aoe,e)&&!("flags"in Aoe)?koe(e):n)}),{unsafe:!0});var _oe=function(){function e(){this.title=OC("highLightModule.selectLang"),this.iconSvg='<svg viewBox="0 0 1024 1024"><path d="M64 64v896h896V64H64z m487.6 698.8c0 87.2-51.2 127-125.8 127-67.4 0-106.4-34.8-126.4-77l68.6-41.4c13.2 23.4 25.2 43.2 54.2 43.2 27.6 0 45.2-10.8 45.2-53V475.4h84.2v287.4z m199.2 127c-78.2 0-128.8-37.2-153.4-86l68.6-39.6c18 29.4 41.6 51.2 83 51.2 34.8 0 57.2-17.4 57.2-41.6 0-28.8-22.8-39-61.4-56l-21-9c-60.8-25.8-101-58.4-101-127 0-63.2 48.2-111.2 123.2-111.2 53.6 0 92 18.6 119.6 67.4L800 580c-14.4-25.8-30-36-54.2-36-24.6 0-40.2 15.6-40.2 36 0 25.2 15.6 35.4 51.8 51.2l21 9c71.6 30.6 111.8 62 111.8 132.4 0 75.6-59.6 117.2-139.4 117.2z"></path></svg>',this.tag="select",this.width=95,this.selectPanelWidth=115}return e.prototype.getOptions=function(e){var t=[],n=e.getMenuConfig("codeSelectLang").codeLangs,r=void 0===n?[]:n;t.push({text:"plain text",value:""}),r.forEach((function(e){var n=e.text,r=e.value;t.push({text:n,value:r})}));var o=this.getValue(e);return t.forEach((function(e){e.value===o?e.selected=!0:delete e.selected})),t},e.prototype.isActive=function(e){return!1},e.prototype.getValue=function(e){var t=this.getSelectCodeElem(e);if(null==t)return"";if(!ft.isElement(t))return"";var n=t.language.toString(),r=e.getMenuConfig("codeSelectLang").codeLangs;return(void 0===r?[]:r).some((function(e){return e.value===n}))?n:""},e.prototype.isDisabled=function(e){return null==e.selection||!this.getSelectCodeElem(e)},e.prototype.exec=function(e,t){if(null!=this.getSelectCodeElem(e)){var n={language:t.toString()};an.setNodes(e,n,{match:function(e){return Wy.checkNodeType(e,"code")}})}},e.prototype.getSelectCodeElem=function(e){var t=Wy.getSelectedNodeByType(e,"code");if(null==t)return null;var n=Wy.getParentNode(e,t);return ft.isElement(n)?"pre"!==n.type?null:t:null},e}(),Toe={renderStyle:function(e,t){var n=e,r=t,o="";return vre.forEach((function(e){n[e]&&(o=e)})),o&&function(e,t){null==e.data&&(e.data={});var n=e.data;null==n.props&&(n.props={}),Object.assign(n.props,{className:t})}(r,o="token "+o),r},parseStyleHtml:function(e,t,n){var r=Fr(e);if(!ft.isElement(t))return t;if("code"!==Wy.getNodeType(t))return t;var o=t,i=r.attr("class")||"";return 0===i.indexOf("language-")?o.language=i.split("-")[1]||"":o.language=i.toLowerCase(),o},menus:[{key:"codeSelectLang",factory:function(){return new _oe},config:{codeLangs:[{text:"CSS",value:"css"},{text:"HTML",value:"html"},{text:"XML",value:"xml"},{text:"Javascript",value:"javascript"},{text:"Typescript",value:"typescript"},{text:"JSX",value:"jsx"},{text:"Go",value:"go"},{text:"PHP",value:"php"},{text:"C",value:"c"},{text:"Python",value:"python"},{text:"Java",value:"java"},{text:"C++",value:"cpp"},{text:"C#",value:"csharp"},{text:"Visual Basic",value:"visual-basic"},{text:"SQL",value:"sql"},{text:"Ruby",value:"ruby"},{text:"Swift",value:"swift"},{text:"Bash",value:"bash"},{text:"Markdown",value:"markdown"}]}}],elemsToHtml:[{type:"code",elemToHtml:function(e,t){var n=e.language,r=void 0===n?"":n;return"<code "+(r?'class="language-'+r+'"':"")+">"+t+"</code>"}}]},Poe=/"/g,joe=Eee("".replace);lre({target:"String",proto:!0,forced:$ee((function(){var e="".anchor('"');return e!==e.toLowerCase()||e.split('"').length>3}))},{anchor:function(e){return"a","name",t=e,n=wre(Cee(this)),r="<a",(r+=' name="'+joe(wre(t),Poe,"&quot;")+'"')+">"+n+"</a>";var t,n,r}});var Noe=function(e){var t,n,r,o=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(u){o={error:u}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}(e,2),i=o[0],a=o[1],u=[],s=function(e){if(!$t.isText(e))return null;var t=Wy.getParentNode(null,e);if(t&&"code"===Wy.getNodeType(t)){var n=Wy.getParentNode(null,t);if(n&&"pre"===Wy.getNodeType(n))return t}return null}(i);if(null==s)return u;var l=s.language,c=void 0===l?"":l;if(!c)return u;var f=function(e,t){if(!t)return[];var n=gre.languages[t];return n?gre.tokenize(e.text,n):[]}(i,c),d=0;try{for(var p=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(f),h=p.next();!h.done;h=p.next()){var g=h.value,v=d+yre(g);"string"!=typeof g&&u.push(((r={})[g.type]=!0,r.anchor={path:a,offset:d},r.focus={path:a,offset:v},r)),d=v}}catch(y){t={error:y}}finally{try{h&&!h.done&&(n=p.return)&&n.call(p)}finally{if(t)throw t.error}}return u},Ioe=function(){return Ioe=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Ioe.apply(this,arguments)},Roe=function(){function e(){throw new Error("不能实例化\nCan not construct a instance")}return e.setEditorConfig=function(e){void 0===e&&(e={}),this.editorConfig=Ioe(Ioe({},this.editorConfig),e)},e.setSimpleEditorConfig=function(e){void 0===e&&(e={}),this.simpleEditorConfig=Ioe(Ioe({},this.simpleEditorConfig),e)},e.setToolbarConfig=function(e){void 0===e&&(e={}),this.toolbarConfig=Ioe(Ioe({},this.toolbarConfig),e)},e.setSimpleToolbarConfig=function(e){void 0===e&&(e={}),this.simpleToolbarConfig=Ioe(Ioe({},this.simpleToolbarConfig),e)},e.registerPlugin=function(e){this.plugins.push(e)},e.registerMenu=function(e,t){!function(e,t){var n,r,o=e.key,i=e.factory,a=e.config,u=Zg(Zg({},a),t||{});if(null!=Ky[o])throw new Error("Duplicated key '"+o+"' in menu items");Ky[o]=i,n=o,null!=(r=u)&&(Gy[n]=r)}(e,t)},e.registerRenderElem=function(e){!function(e){var t=e.type,n=e.renderElem;kE[t||""]=n}(e)},e.registerRenderStyle=function(e){!function(e){OE.push(e)}(e)},e.registerElemToHtml=function(e){!function(e){var t=e.type,n=e.elemToHtml;Cm[t||""]=n}(e)},e.registerStyleToHtml=function(e){!function(e){Dm.push(e)}(e)},e.registerPreParseHtml=function(e){!function(e){ew.push(e)}(e)},e.registerParseElemHtml=function(e){!function(e){var t=e.selector,n=e.parseElemHtml;nw[t]=n}(e)},e.registerParseStyleHtml=function(e){!function(e){tw.push(e)}(e)},e.registerModule=function(e){Loe(e)},e.editorConfig={},e.simpleEditorConfig={},e.toolbarConfig={},e.simpleToolbarConfig={},e.plugins=[],e}();
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function Loe(e){var t=e.menus,n=e.renderElems,r=e.renderStyle,o=e.elemsToHtml,i=e.styleToHtml,a=e.preParseHtml,u=e.parseElemsHtml,s=e.parseStyleHtml,l=e.editorPlugin;t&&t.forEach((function(e){return Roe.registerMenu(e)})),n&&n.forEach((function(e){return Roe.registerRenderElem(e)})),r&&Roe.registerRenderStyle(r),o&&o.forEach((function(e){return Roe.registerElemToHtml(e)})),i&&Roe.registerStyleToHtml(i),a&&a.forEach((function(e){return Roe.registerPreParseHtml(e)})),u&&u.forEach((function(e){return Roe.registerParseElemHtml(e)})),s&&Roe.registerParseStyleHtml(s),l&&Roe.registerPlugin(l)}dR.forEach((function(e){return Loe(e)})),Loe(tH),Loe(LG),Loe(s2),Loe(aee),Loe(Toe);var Moe='<svg viewBox="0 0 1024 1024"><path d="M959.877 128l0.123 0.123v767.775l-0.123 0.122H64.102l-0.122-0.122V128.123l0.122-0.123h895.775zM960 64H64C28.795 64 0 92.795 0 128v768c0 35.205 28.795 64 64 64h896c35.205 0 64-28.795 64-64V128c0-35.205-28.795-64-64-64zM832 288.01c0 53.023-42.988 96.01-96.01 96.01s-96.01-42.987-96.01-96.01S682.967 192 735.99 192 832 234.988 832 288.01zM896 832H128V704l224.01-384 256 320h64l224.01-192z"></path></svg>';var zoe={link:{menuKeys:["editLink","unLink","viewLink"]},image:{menuKeys:["imageWidth30","imageWidth50","imageWidth100","editImage","viewImageLink","deleteImage"]},pre:{menuKeys:["enter","codeBlock","codeSelectLang"]},table:{menuKeys:["enter","tableHeader","tableFullWidth","insertTableRow","deleteTableRow","insertTableCol","deleteTableCol","deleteTable"]},divider:{menuKeys:["enter"]},video:{menuKeys:["enter","editVideoSize"]}};var $oe={hoverbarKeys:Ioe(Ioe({},zoe),{text:{menuKeys:["headerSelect","insertLink","bulletedList","|","bold","through","color","bgColor","clearStyle"]}})};Roe.setEditorConfig(Ioe(Ioe({},$oe),{decorate:Noe}));var Hoe={hoverbarKeys:zoe};Roe.setSimpleEditorConfig(Ioe(Ioe({},Hoe),{decorate:Noe}));var Voe={toolbarKeys:["headerSelect","blockquote","|","bold","underline","italic",{key:"group-more-style",title:OC("editor.more"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M204.8 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M505.6 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path><path d="M806.4 505.6m-76.8 0a76.8 76.8 0 1 0 153.6 0 76.8 76.8 0 1 0-153.6 0Z"></path></svg>',menuKeys:["through","code","sup","sub","clearStyle"]},"color","bgColor","|","fontSize","fontFamily","lineHeight","|","bulletedList","numberedList","todo",{key:"group-justify",title:OC("editor.justify"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M768 793.6v102.4H51.2v-102.4h716.8z m204.8-230.4v102.4H51.2v-102.4h921.6z m-204.8-230.4v102.4H51.2v-102.4h716.8zM972.8 102.4v102.4H51.2V102.4h921.6z"></path></svg>',menuKeys:["justifyLeft","justifyRight","justifyCenter","justifyJustify"]},{key:"group-indent",title:OC("editor.indent"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M0 64h1024v128H0z m384 192h640v128H384z m0 192h640v128H384z m0 192h640v128H384zM0 832h1024v128H0z m0-128V320l256 192z"></path></svg>',menuKeys:["indent","delIndent"]},"|","emotion","insertLink",{key:"group-image",title:OC("editor.image"),iconSvg:Moe,menuKeys:["insertImage","uploadImage"]},{key:"group-video",title:OC("editor.video"),iconSvg:'<svg viewBox="0 0 1024 1024"><path d="M981.184 160.096C837.568 139.456 678.848 128 512 128S186.432 139.456 42.816 160.096C15.296 267.808 0 386.848 0 512s15.264 244.16 42.816 351.904C186.464 884.544 345.152 896 512 896s325.568-11.456 469.184-32.096C1008.704 756.192 1024 637.152 1024 512s-15.264-244.16-42.816-351.904zM384 704V320l320 192-320 192z"></path></svg>',menuKeys:["insertVideo","uploadVideo"]},"insertTable","codeBlock","divider","|","undo","redo","|","fullScreen"]};Roe.setToolbarConfig(Voe);var Uoe={toolbarKeys:["blockquote","header1","header2","header3","|","bold","underline","italic","through","color","bgColor","clearStyle","|","bulletedList","numberedList","todo","justifyLeft","justifyRight","justifyCenter","|","insertLink",{key:"group-image",title:OC("editor.image"),iconSvg:Moe,menuKeys:["insertImage","uploadImage"]},"insertVideo","insertTable","codeBlock","|","undo","redo","|","fullScreen"]};function Woe(e){var t=e.selector,n=e.editor,r=e.config,o=void 0===r?{}:r,i=e.mode,a=void 0===i?"default":i;if(!t)throw new Error("Cannot find 'selector' when create toolbar");var u="simple"===a?Roe.simpleToolbarConfig:Roe.toolbarConfig,s=function(e,t){if(null==e)throw new Error("Cannot create toolbar, because editor is null");var n=t.selector,r=t.config,o=void 0===r?{}:r;if(ED(e,"data-w-e-toolbar",n))throw new Error("Repeated create toolbar by selector '"+n+"'");var i=Zg({toolbarKeys:[],excludeKeys:[],insertKeys:{index:0,keys:[]},modalAppendToBody:!1},o||{}),a=new kD(n,i);return ey.set(a,e),ty.set(e,a),a}(n,{selector:t,config:Ioe(Ioe({},u),o)});return s}Roe.setSimpleToolbarConfig(Uoe);var qoe=Object.defineProperty,Goe=Object.defineProperties,Koe=Object.getOwnPropertyDescriptors,Yoe=Object.getOwnPropertySymbols,Xoe=Object.prototype.hasOwnProperty,Zoe=Object.prototype.propertyIsEnumerable,Joe=(e,t,n)=>t in e?qoe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,Qoe=(e,t)=>{for(var n in t||(t={}))Xoe.call(t,n)&&Joe(e,n,t[n]);if(Yoe)for(var n of Yoe(t))Zoe.call(t,n)&&Joe(e,n,t[n]);return e};function eie(e){let t=`请使用 '@${e}' 事件，不要放在 props 中`;return t+=`\nPlease use '@${e}' event instead of props`,t}var tie=(e,t)=>{for(const[n,r]of t)e[n]=r;return e};const nie=e({props:{mode:{type:String,default:"default"},defaultContent:{type:Array,default:[]},defaultHtml:{type:String,default:""},defaultConfig:{type:Object,default:{}},modelValue:{type:String,default:""}},setup(e,i){const u=t(null),s=n(null),l=t(""),c=()=>{if(!u.value)return;const t=a(e.defaultContent);var n,r;!function(e){void 0===e&&(e={});var t=e.selector,n=void 0===t?"":t,r=e.content,o=void 0===r?[]:r,i=e.html,a=e.config,u=void 0===a?{}:a,s=e.mode,l="simple"===(void 0===s?"default":s)?Roe.simpleEditorConfig:Roe.editorConfig,c=Ioe(Ioe({},l.hoverbarKeys||{}),u.hoverbarKeys||{});CD({selector:n,config:Ioe(Ioe(Ioe({},l),u),{hoverbarKeys:c}),content:o,html:i,plugins:Roe.plugins})}({selector:u.value,mode:e.mode,content:t||[],html:e.defaultHtml||e.modelValue||"",config:(n=Qoe({},e.defaultConfig),r={onCreated(t){if(s.value=t,i.emit("onCreated",t),e.defaultConfig.onCreated){const e=eie("onCreated");throw new Error(e)}},onChange(t){const n=t.getHtml();if(l.value=n,i.emit("update:modelValue",n),i.emit("onChange",t),e.defaultConfig.onChange){const e=eie("onChange");throw new Error(e)}},onDestroyed(t){if(i.emit("onDestroyed",t),e.defaultConfig.onDestroyed){const e=eie("onDestroyed");throw new Error(e)}},onMaxLength(t){if(i.emit("onMaxLength",t),e.defaultConfig.onMaxLength){const e=eie("onMaxLength");throw new Error(e)}},onFocus(t){if(i.emit("onFocus",t),e.defaultConfig.onFocus){const e=eie("onFocus");throw new Error(e)}},onBlur(t){if(i.emit("onBlur",t),e.defaultConfig.onBlur){const e=eie("onBlur");throw new Error(e)}},customAlert(t,n){if(i.emit("customAlert",t,n),e.defaultConfig.customAlert){const e=eie("customAlert");throw new Error(e)}},customPaste:(t,n)=>{if(e.defaultConfig.customPaste){const e=eie("customPaste");throw new Error(e)}let r;return i.emit("customPaste",t,n,(e=>{r=e})),r}},Goe(n,Koe(r)))})};return r((()=>{c()})),o((()=>e.modelValue),(e=>{e!==l.value&&function(e){const t=s.value;null!=t&&t.setHtml(e)}(e)})),{box:u}}}),rie={ref:"box",style:{height:"100%"}};var oie=tie(nie,[["render",function(e,t,n,r,o,i){return u(),s("div",rie,null,512)}]]);const iie=e({props:{editor:{type:Object},mode:{type:String,default:"default"},defaultConfig:{type:Object,default:{}}},setup(e){const n=t(null);return i((()=>{const{editor:t}=e;null!=t&&(t=>{if(n.value){if(null==t)throw new Error("Not found instance of Editor when create <Toolbar/> component");Wy.getToolbar(t)||Woe({editor:t,selector:n.value||"<div></div>",mode:e.mode,config:e.defaultConfig})}})(t)})),{selector:n}}}),aie={ref:"selector"};var uie=tie(iie,[["render",function(e,t,n,r,o,i){return u(),s("div",aie,null,512)}]]);const sie={class:"border-1 border-solid border-[var(--tags-view-border-color)]"},lie=e({__name:"Editor",props:{editorId:l.string.def("wangeEditor-1"),height:l.oneOfType([Number,String]).def("500px"),editorConfig:{type:Object,default:()=>{}},modelValue:l.string.def("")},emits:["change","update:modelValue"],setup(e,{expose:r,emit:i}){const a=e,l=c(),w=f((()=>l.getCurrentLocale));!function(e){SC.changeLanguage(e)}(d(w).lang);const E=n(),D=t("");o((()=>a.modelValue),(e=>{e!==d(D)&&(D.value=e)}),{immediate:!0}),o((()=>D.value),(e=>{i("update:modelValue",e)}));const C=e=>{E.value=e},x=f((()=>Object.assign({readOnly:!1,customAlert:(e,t)=>{switch(t){case"success":m.success(e);break;case"info":default:m.info(e);break;case"warning":m.warning(e);break;case"error":m.error(e)}},autoFocus:!1,scroll:!0,uploadImgShowBase64:!0},a.editorConfig||{}))),S=f((()=>({height:b(a.height)?`${a.height}px`:a.height}))),A=e=>{i("change",e)};p((()=>{const e=d(E.value);null!==e&&(null==e||e.destroy())}));return r({getEditorRef:async()=>(await y(),d(E.value))}),(t,n)=>(u(),s("div",sie,[h(" 工具栏 "),g(d(uie),{editor:d(E),editorId:e.editorId,class:"border-bottom-1 border-solid border-[var(--tags-view-border-color)]"},null,8,["editor","editorId"]),h(" 编辑器 "),g(d(oie),{modelValue:D.value,"onUpdate:modelValue":n[0]||(n[0]=e=>D.value=e),editorId:e.editorId,defaultConfig:d(x),style:v(d(S)),onOnChange:A,onOnCreated:C},null,8,["modelValue","editorId","defaultConfig","style"])]))}});export{lie as _};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
