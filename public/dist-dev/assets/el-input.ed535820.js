import{D as e,bE as a,aI as t,r as o,az as n,Q as l,aj as s,R as i,b6 as r,V as u,d as p,X as d,aW as c,aq as f,aB as v,Y as m,aR as y,bc as x,bF as b,bG as g,aN as h,v as w,ab as S,an as $,$ as k,b1 as z,aX as I,av as C,aQ as E,o as F,c as P,at as j,G as V,n as A,a as B,a2 as M,e as N,k as R,w as _,as as W,a0 as O,a6 as H,g as T,ai as K,a8 as q,U as L,t as X,a4 as D,aa as G,P as Q,W as U,ae as Y}from"./index.701681eb.js";import{m as Z}from"./typescript2.0e462989.js";import{U as J}from"./event2.1741f333.js";import{u as ee,a as ae}from"./index2.bc62f99f.js";import{i as te}from"./el-popper.e9e2fc16.js";const oe=e=>/([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(e),ne=["class","style"],le=/^on[A-Z]/,se=(o={})=>{const{excludeListeners:n=!1,excludeKeys:l}=o,s=e((()=>((null==l?void 0:l.value)||[]).concat(ne))),i=t();return e(i?()=>{var e;return a(Object.entries(null==(e=i.proxy)?void 0:e.$attrs).filter((([e])=>!(s.value.includes(e)||n&&le.test(e)))))}:()=>({}))};let ie;const re=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing"];function ue(e,a=1,t){var o;ie||(ie=document.createElement("textarea"),document.body.appendChild(ie));const{paddingSize:l,borderSize:s,boxSizing:i,contextStyle:r}=function(e){const a=window.getComputedStyle(e),t=a.getPropertyValue("box-sizing"),o=Number.parseFloat(a.getPropertyValue("padding-bottom"))+Number.parseFloat(a.getPropertyValue("padding-top")),n=Number.parseFloat(a.getPropertyValue("border-bottom-width"))+Number.parseFloat(a.getPropertyValue("border-top-width"));return{contextStyle:re.map((e=>`${e}:${a.getPropertyValue(e)}`)).join(";"),paddingSize:o,borderSize:n,boxSizing:t}}(e);ie.setAttribute("style",`${r};\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`),ie.value=e.value||e.placeholder||"";let u=ie.scrollHeight;const p={};"border-box"===i?u+=s:"content-box"===i&&(u-=l),ie.value="";const d=ie.scrollHeight-l;if(n(a)){let e=d*a;"border-box"===i&&(e=e+l+s),u=Math.max(e,u),p.minHeight=`${e}px`}if(n(t)){let e=d*t;"border-box"===i&&(e=e+l+s),u=Math.min(e,u)}return p.height=`${u}px`,null==(o=ie.parentNode)||o.removeChild(ie),ie=void 0,p}const pe=l({id:{type:String,default:void 0},size:s,disabled:Boolean,modelValue:{type:i([String,Number,Object]),default:""},type:{type:String,default:"text"},resize:{type:String,values:["none","both","horizontal","vertical"]},autosize:{type:i([Boolean,Object]),default:!1},autocomplete:{type:String,default:"off"},formatter:{type:Function},parser:{type:Function},placeholder:{type:String},form:{type:String,default:""},readonly:{type:Boolean,default:!1},clearable:{type:Boolean,default:!1},showPassword:{type:Boolean,default:!1},showWordLimit:{type:Boolean,default:!1},suffixIcon:{type:r,default:""},prefixIcon:{type:r,default:""},containerRole:{type:String,default:void 0},label:{type:String,default:void 0},tabindex:{type:[String,Number],default:0},validateEvent:{type:Boolean,default:!0},inputStyle:{type:i([Object,Array,String]),default:()=>Z({})}}),de=["role"],ce=["id","type","disabled","formatter","parser","readonly","autocomplete","tabindex","aria-label","placeholder"],fe=["id","tabindex","disabled","readonly","autocomplete","aria-label","placeholder"];const ve=Y(G(p({name:"ElInput",inheritAttrs:!1,props:pe,emits:{[J]:e=>u(e),input:e=>u(e),change:e=>u(e),focus:e=>e instanceof FocusEvent,blur:e=>e instanceof FocusEvent,clear:()=>!0,mouseleave:e=>e instanceof MouseEvent,mouseenter:e=>e instanceof MouseEvent,keydown:e=>e instanceof Event,compositionstart:e=>e instanceof CompositionEvent,compositionupdate:e=>e instanceof CompositionEvent,compositionend:e=>e instanceof CompositionEvent},setup(a,{expose:n,emit:l}){const s=a,i={suffix:"append",prefix:"prepend"},r=t(),u=d(),p=c(),G=e((()=>{const e={};return"combobox"===s.containerRole&&(e["aria-haspopup"]=u["aria-haspopup"],e["aria-owns"]=u["aria-owns"],e["aria-expanded"]=u["aria-expanded"]),e})),Y=se({excludeKeys:e((()=>Object.keys(G.value)))}),{form:Z,formItem:ne}=ee(),{inputId:le}=ae(s,{formItemContext:ne}),ie=f(),re=v(),pe=m("input"),ve=m("textarea"),me=y(),ye=y(),xe=o(!1),be=o(!1),ge=o(!1),he=o(!1),we=o(),Se=y(s.inputStyle),$e=e((()=>me.value||ye.value)),ke=e((()=>{var e;return null!=(e=null==Z?void 0:Z.statusIcon)&&e})),ze=e((()=>(null==ne?void 0:ne.validateState)||"")),Ie=e((()=>ze.value&&x[ze.value])),Ce=e((()=>he.value?b:g)),Ee=e((()=>[u.style,s.inputStyle])),Fe=e((()=>[s.inputStyle,Se.value,{resize:s.resize}])),Pe=e((()=>te(s.modelValue)?"":String(s.modelValue))),je=e((()=>s.clearable&&!re.value&&!s.readonly&&!!Pe.value&&(xe.value||be.value))),Ve=e((()=>s.showPassword&&!re.value&&!s.readonly&&!!Pe.value&&(!!Pe.value||xe.value))),Ae=e((()=>s.showWordLimit&&!!Y.value.maxlength&&("text"===s.type||"textarea"===s.type)&&!re.value&&!s.readonly&&!s.showPassword)),Be=e((()=>Array.from(Pe.value).length)),Me=e((()=>!!Ae.value&&Be.value>Number(Y.value.maxlength))),Ne=e((()=>!!p.suffix||!!s.suffixIcon||je.value||s.showPassword||Ae.value||!!ze.value&&ke.value)),[Re,_e]=function(e){const a=o();return[function(){if(null==e.value)return;const{selectionStart:t,selectionEnd:o,value:n}=e.value;if(null==t||null==o)return;const l=n.slice(0,Math.max(0,t)),s=n.slice(Math.max(0,o));a.value={selectionStart:t,selectionEnd:o,value:n,beforeTxt:l,afterTxt:s}},function(){if(null==e.value||null==a.value)return;const{value:t}=e.value,{beforeTxt:o,afterTxt:n,selectionStart:l}=a.value;if(null==o||null==n||null==l)return;let s=t.length;if(t.endsWith(n))s=t.length-n.length;else if(t.startsWith(o))s=o.length;else{const e=o[l-1],a=t.indexOf(e,l-1);-1!==a&&(s=a+1)}e.value.setSelectionRange(s,s)}]}(me);h(ye,(e=>{if(!Ae.value||"both"!==s.resize)return;const a=e[0],{width:t}=a.contentRect;we.value={right:`calc(100% - ${t+15+6}px)`}}));const We=()=>{const{type:e,autosize:a}=s;if(Q&&"textarea"===e)if(a){const e=U(a)?a.minRows:void 0,t=U(a)?a.maxRows:void 0;Se.value={...ue(ye.value,e,t)}}else Se.value={minHeight:ue(ye.value).minHeight}},Oe=()=>{const e=$e.value;e&&e.value!==Pe.value&&(e.value=Pe.value)},He=e=>{const{el:a}=r.vnode;if(!a)return;const t=Array.from(a.querySelectorAll(`.${pe.e(e)}`)).find((e=>e.parentNode===a));if(!t)return;const o=i[e];p[o]?t.style.transform=`translateX(${"suffix"===e?"-":""}${a.querySelector(`.${pe.be("group",o)}`).offsetWidth}px)`:t.removeAttribute("style")},Te=()=>{He("prefix"),He("suffix")},Ke=async e=>{Re();let{value:a}=e.target;s.formatter&&(a=s.parser?s.parser(a):a,a=s.formatter(a)),ge.value||a!==Pe.value&&(l(J,a),l("input",a),await S(),Oe(),_e())},qe=e=>{l("change",e.target.value)},Le=e=>{l("compositionstart",e),ge.value=!0},Xe=e=>{var a;l("compositionupdate",e);const t=null==(a=e.target)?void 0:a.value,o=t[t.length-1]||"";ge.value=!oe(o)},De=e=>{l("compositionend",e),ge.value&&(ge.value=!1,Ke(e))},Ge=()=>{he.value=!he.value,Qe()},Qe=async()=>{var e;await S(),null==(e=$e.value)||e.focus()},Ue=e=>{xe.value=!0,l("focus",e)},Ye=e=>{var a;xe.value=!1,l("blur",e),s.validateEvent&&(null==(a=null==ne?void 0:ne.validate)||a.call(ne,"blur").catch((e=>$())))},Ze=e=>{be.value=!1,l("mouseleave",e)},Je=e=>{be.value=!0,l("mouseenter",e)},ea=e=>{l("keydown",e)},aa=()=>{l(J,""),l("change",""),l("clear"),l("input","")};return w((()=>s.modelValue),(()=>{var e;S((()=>We())),s.validateEvent&&(null==(e=null==ne?void 0:ne.validate)||e.call(ne,"change").catch((e=>$())))})),w(Pe,(()=>Oe())),w((()=>s.type),(async()=>{await S(),Oe(),We(),Te()})),k((async()=>{!s.formatter&&s.parser,Oe(),Te(),await S(),We()})),z((async()=>{await S(),Te()})),n({input:me,textarea:ye,ref:$e,textareaStyle:Fe,autosize:I(s,"autosize"),focus:Qe,blur:()=>{var e;return null==(e=$e.value)?void 0:e.blur()},select:()=>{var e;null==(e=$e.value)||e.select()},clear:aa,resizeTextarea:We}),(e,a)=>C((F(),P("div",H(B(G),{class:["textarea"===e.type?B(ve).b():B(pe).b(),B(pe).m(B(ie)),B(pe).is("disabled",B(re)),B(pe).is("exceed",B(Me)),{[B(pe).b("group")]:e.$slots.prepend||e.$slots.append,[B(pe).bm("group","append")]:e.$slots.append,[B(pe).bm("group","prepend")]:e.$slots.prepend,[B(pe).m("prefix")]:e.$slots.prefix||e.prefixIcon,[B(pe).m("suffix")]:e.$slots.suffix||e.suffixIcon||e.clearable||e.showPassword,[B(pe).bm("suffix","password-clear")]:B(je)&&B(Ve)},e.$attrs.class],style:B(Ee),role:e.containerRole,onMouseenter:Je,onMouseleave:Ze}),[j(" input "),"textarea"!==e.type?(F(),P(V,{key:0},[j(" prepend slot "),e.$slots.prepend?(F(),P("div",{key:0,class:A(B(pe).be("group","prepend"))},[M(e.$slots,"prepend")],2)):j("v-if",!0),N("div",{class:A([B(pe).e("wrapper"),B(pe).is("focus",xe.value)])},[j(" prefix slot "),e.$slots.prefix||e.prefixIcon?(F(),P("span",{key:0,class:A(B(pe).e("prefix"))},[N("span",{class:A(B(pe).e("prefix-inner"))},[M(e.$slots,"prefix"),e.prefixIcon?(F(),R(B(O),{key:0,class:A(B(pe).e("icon"))},{default:_((()=>[(F(),R(W(e.prefixIcon)))])),_:1},8,["class"])):j("v-if",!0)],2)],2)):j("v-if",!0),N("input",H({id:B(le),ref_key:"input",ref:me,class:B(pe).e("inner")},B(Y),{type:e.showPassword?he.value?"text":"password":e.type,disabled:B(re),formatter:e.formatter,parser:e.parser,readonly:e.readonly,autocomplete:e.autocomplete,tabindex:e.tabindex,"aria-label":e.label,placeholder:e.placeholder,style:e.inputStyle,onCompositionstart:Le,onCompositionupdate:Xe,onCompositionend:De,onInput:Ke,onFocus:Ue,onBlur:Ye,onChange:qe,onKeydown:ea}),null,16,ce),j(" suffix slot "),B(Ne)?(F(),P("span",{key:1,class:A(B(pe).e("suffix"))},[N("span",{class:A(B(pe).e("suffix-inner"))},[B(je)&&B(Ve)&&B(Ae)?j("v-if",!0):(F(),P(V,{key:0},[M(e.$slots,"suffix"),e.suffixIcon?(F(),R(B(O),{key:0,class:A(B(pe).e("icon"))},{default:_((()=>[(F(),R(W(e.suffixIcon)))])),_:1},8,["class"])):j("v-if",!0)],64)),B(je)?(F(),R(B(O),{key:1,class:A([B(pe).e("icon"),B(pe).e("clear")]),onMousedown:q(B(L),["prevent"]),onClick:aa},{default:_((()=>[T(B(K))])),_:1},8,["class","onMousedown"])):j("v-if",!0),B(Ve)?(F(),R(B(O),{key:2,class:A([B(pe).e("icon"),B(pe).e("password")]),onClick:Ge},{default:_((()=>[(F(),R(W(B(Ce))))])),_:1},8,["class"])):j("v-if",!0),B(Ae)?(F(),P("span",{key:3,class:A(B(pe).e("count"))},[N("span",{class:A(B(pe).e("count-inner"))},X(B(Be))+" / "+X(B(Y).maxlength),3)],2)):j("v-if",!0),B(ze)&&B(Ie)&&B(ke)?(F(),R(B(O),{key:4,class:A([B(pe).e("icon"),B(pe).e("validateIcon"),B(pe).is("loading","validating"===B(ze))])},{default:_((()=>[(F(),R(W(B(Ie))))])),_:1},8,["class"])):j("v-if",!0)],2)],2)):j("v-if",!0)],2),j(" append slot "),e.$slots.append?(F(),P("div",{key:1,class:A(B(pe).be("group","append"))},[M(e.$slots,"append")],2)):j("v-if",!0)],64)):(F(),P(V,{key:1},[j(" textarea "),N("textarea",H({id:B(le),ref_key:"textarea",ref:ye,class:B(ve).e("inner")},B(Y),{tabindex:e.tabindex,disabled:B(re),readonly:e.readonly,autocomplete:e.autocomplete,style:B(Fe),"aria-label":e.label,placeholder:e.placeholder,onCompositionstart:Le,onCompositionupdate:Xe,onCompositionend:De,onInput:Ke,onFocus:Ue,onBlur:Ye,onChange:qe,onKeydown:ea}),null,16,fe),B(Ae)?(F(),P("span",{key:0,style:D(we.value),class:A(B(pe).e("count"))},X(B(Be))+" / "+X(B(Y).maxlength),7)):j("v-if",!0)],64))],16,de)),[[E,"hidden"!==e.type]])}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/input/src/input.vue"]]));export{ve as E,oe as i,se as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
