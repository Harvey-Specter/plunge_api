import{bn as e,bo as l,bp as t,bq as a,br as n,K as o,bs as s,bt as i,bu as r,bv as u,M as c,bw as d,P as p,bx as v,aj as b,ak as m,al as h,am as f,D as g,V as y,az as x,aA as C,ac as S,r as k,aq as O,by as w,ab as L,v as I,an as B,aI as E,d as V,aW as z,Y as F,o as _,k as T,w as D,e as M,av as P,bz as A,a as j,c as q,a9 as W,n as R,a2 as G,G as K,x as $,t as H,at as N,as as Q,aa as U,a4 as Y,ar as J,aD as X,ae as Z,aE as ee,bb as le,bA as te,s as ae,b0 as ne,aQ as oe,a8 as se,$ as ie,aN as re,aR as ue,bB as ce,bC as de,W as pe,au as ve,a3 as be,a0 as me,ai as he,aw as fe,E as ge,aO as ye,g as xe,F as Ce,h as Se,a7 as ke,aP as Oe,a5 as we,bD as Le}from"./index.701681eb.js";import{a as Ie}from"./index2.bc62f99f.js";import{U as Be,C as Ee}from"./event2.1741f333.js";import{i as Ve,E as ze}from"./el-input.ed535820.js";import{E as Fe,u as _e}from"./el-popper.e9e2fc16.js";import{E as Te,t as De}from"./el-tag.ddbbcdb2.js";import{u as Me}from"./index2.411e8ed3.js";import{s as Pe}from"./scroll2.58f9a7d9.js";import{d as Ae}from"./debounce.96a7db81.js";import{i as je}from"./validator2.d2a80b6f.js";function qe(l){var t=-1,a=null==l?0:l.length;for(this.__data__=new e;++t<a;)this.add(l[t])}function We(e,l){for(var t=-1,a=null==e?0:e.length;++t<a;)if(l(e[t],t,e))return!0;return!1}function Re(e,l){return e.has(l)}qe.prototype.add=qe.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},qe.prototype.has=function(e){return this.__data__.has(e)};function Ge(e,l,t,a,n,o){var s=1&t,i=e.length,r=l.length;if(i!=r&&!(s&&r>i))return!1;var u=o.get(e),c=o.get(l);if(u&&c)return u==l&&c==e;var d=-1,p=!0,v=2&t?new qe:void 0;for(o.set(e,l),o.set(l,e);++d<i;){var b=e[d],m=l[d];if(a)var h=s?a(m,b,d,l,e,o):a(b,m,d,e,l,o);if(void 0!==h){if(h)continue;p=!1;break}if(v){if(!We(l,(function(e,l){if(!Re(v,l)&&(b===e||n(b,e,t,a,o)))return v.push(l)}))){p=!1;break}}else if(b!==m&&!n(b,m,t,a,o)){p=!1;break}}return o.delete(e),o.delete(l),p}function Ke(e){var l=-1,t=Array(e.size);return e.forEach((function(e,a){t[++l]=[a,e]})),t}function $e(e){var l=-1,t=Array(e.size);return e.forEach((function(e){t[++l]=e})),t}var He=l?l.prototype:void 0,Ne=He?He.valueOf:void 0;var Qe=Object.prototype.hasOwnProperty;var Ue="[object Object]",Ye=Object.prototype.hasOwnProperty;function Je(e,l,c,d,p,v){var b=o(e),m=o(l),h=b?"[object Array]":s(e),f=m?"[object Array]":s(l),g=(h="[object Arguments]"==h?Ue:h)==Ue,y=(f="[object Arguments]"==f?Ue:f)==Ue,x=h==f;if(x&&i(e)){if(!i(l))return!1;b=!0,g=!1}if(x&&!g)return v||(v=new r),b||u(e)?Ge(e,l,c,d,p,v):function(e,l,n,o,s,i,r){switch(n){case"[object DataView]":if(e.byteLength!=l.byteLength||e.byteOffset!=l.byteOffset)return!1;e=e.buffer,l=l.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=l.byteLength||!i(new a(e),new a(l)));case"[object Boolean]":case"[object Date]":case"[object Number]":return t(+e,+l);case"[object Error]":return e.name==l.name&&e.message==l.message;case"[object RegExp]":case"[object String]":return e==l+"";case"[object Map]":var u=Ke;case"[object Set]":var c=1&o;if(u||(u=$e),e.size!=l.size&&!c)return!1;var d=r.get(e);if(d)return d==l;o|=2,r.set(e,l);var p=Ge(u(e),u(l),o,s,i,r);return r.delete(e),p;case"[object Symbol]":if(Ne)return Ne.call(e)==Ne.call(l)}return!1}(e,l,h,c,d,p,v);if(!(1&c)){var C=g&&Ye.call(e,"__wrapped__"),S=y&&Ye.call(l,"__wrapped__");if(C||S){var k=C?e.value():e,O=S?l.value():l;return v||(v=new r),p(k,O,c,d,v)}}return!!x&&(v||(v=new r),function(e,l,t,a,o,s){var i=1&t,r=n(e),u=r.length;if(u!=n(l).length&&!i)return!1;for(var c=u;c--;){var d=r[c];if(!(i?d in l:Qe.call(l,d)))return!1}var p=s.get(e),v=s.get(l);if(p&&v)return p==l&&v==e;var b=!0;s.set(e,l),s.set(l,e);for(var m=i;++c<u;){var h=e[d=r[c]],f=l[d];if(a)var g=i?a(f,h,d,l,e,s):a(h,f,d,e,l,s);if(!(void 0===g?h===f||o(h,f,t,a,s):g)){b=!1;break}m||(m="constructor"==d)}if(b&&!m){var y=e.constructor,x=l.constructor;y==x||!("constructor"in e)||!("constructor"in l)||"function"==typeof y&&y instanceof y&&"function"==typeof x&&x instanceof x||(b=!1)}return s.delete(e),s.delete(l),b}(e,l,c,d,p,v))}function Xe(e,l,t,a,n){return e===l||(null==e||null==l||!c(e)&&!c(l)?e!=e&&l!=l:Je(e,l,t,a,Xe,n))}function Ze(e,l){return Xe(e,l)}const el=new Map;let ll;function tl(e,l){let t=[];return Array.isArray(l.arg)?t=l.arg:v(l.arg)&&t.push(l.arg),function(a,n){const o=l.instance.popperRef,s=a.target,i=null==n?void 0:n.target,r=!l||!l.instance,u=!s||!i,c=e.contains(s)||e.contains(i),d=e===s,p=t.length&&t.some((e=>null==e?void 0:e.contains(s)))||t.length&&t.includes(i),v=o&&(o.contains(s)||o.contains(i));r||u||c||d||p||v||l.value(a,n)}}p&&(document.addEventListener("mousedown",(e=>ll=e)),document.addEventListener("mouseup",(e=>{for(const l of el.values())for(const{documentHandler:t}of l)t(e,ll)})));const al={beforeMount(e,l){el.has(e)||el.set(e,[]),el.get(e).push({documentHandler:tl(e,l),bindingFn:l.value})},updated(e,l){el.has(e)||el.set(e,[]);const t=el.get(e),a=t.findIndex((e=>e.bindingFn===l.oldValue)),n={documentHandler:tl(e,l),bindingFn:l.value};a>=0?t.splice(a,1,n):t.push(n)},unmounted(e){el.delete(e)}},nl={modelValue:{type:Array,default:()=>[]},disabled:Boolean,min:{type:Number,default:void 0},max:{type:Number,default:void 0},size:b,id:{type:String,default:void 0},label:{type:String,default:void 0},fill:{type:String,default:void 0},textColor:{type:String,default:void 0},tag:{type:String,default:"div"}},ol={modelValue:{type:[Number,String,Boolean],default:()=>{}},label:{type:[String,Boolean,Number,Object]},indeterminate:Boolean,disabled:Boolean,checked:Boolean,name:{type:String,default:void 0},trueLabel:{type:[String,Number],default:void 0},falseLabel:{type:[String,Number],default:void 0},id:{type:String,default:void 0},controls:{type:String,default:void 0},border:Boolean,size:b,tabindex:[String,Number]},sl=()=>{const e=m(h,{}),l=m(f,{}),t=m("CheckboxGroup",{}),a=g((()=>t&&"ElCheckboxGroup"===(null==t?void 0:t.name))),n=g((()=>l.size));return{isGroup:a,checkboxGroup:t,elForm:e,elFormItemSize:n,elFormItem:l}},il=(e,{model:l,isLimitExceeded:t,hasOwnLabel:a,isDisabled:n,isLabeledByFormItem:o})=>{const{elFormItem:s}=sl(),{emit:i}=E();function r(l){var t,a;return l===e.trueLabel||!0===l?null==(t=e.trueLabel)||t:null!=(a=e.falseLabel)&&a}return I((()=>e.modelValue),(()=>{var e;null==(e=null==s?void 0:s.validate)||e.call(s,"change").catch((e=>B()))})),{handleChange:function(e){if(t.value)return;const l=e.target;i("change",r(l.checked),e)},onClickRoot:async function(s){t.value||a.value||n.value||!o.value||(l.value=r([!1,e.falseLabel].includes(l.value)),await L(),function(e,l){i("change",r(e),l)}(l.value,s))}}},rl={[Be]:e=>y(e)||x(e)||C(e),change:e=>y(e)||x(e)||C(e)},ul={[Be]:e=>S(e),change:e=>S(e)},cl=(e,l)=>{const{model:t,isGroup:a,isLimitExceeded:n,elFormItem:o}=(e=>{const l=k(!1),{emit:t}=E(),{isGroup:a,checkboxGroup:n,elFormItem:o}=sl(),s=k(!1);return{model:g({get(){var t,o;return a.value?null==(t=n.modelValue)?void 0:t.value:null!=(o=e.modelValue)?o:l.value},set(e){var o;a.value&&Array.isArray(e)?(s.value=void 0!==n.max&&e.length>n.max.value,!1===s.value&&(null==(o=null==n?void 0:n.changeEvent)||o.call(n,e))):(t(Be,e),l.value=e)}}),isGroup:a,isLimitExceeded:s,elFormItem:o}})(e),{focus:s,size:i,isChecked:r,checkboxSize:u,hasOwnLabel:c}=((e,l,{model:t})=>{const{isGroup:a,checkboxGroup:n}=sl(),o=k(!1),s=O(null==n?void 0:n.checkboxGroupSize,{prop:!0});return{isChecked:g((()=>{const l=t.value;return"[object Boolean]"===w(l)?l:Array.isArray(l)?l.includes(e.label):null!=l?l===e.trueLabel:!!l})),focus:o,size:s,checkboxSize:O(g((()=>{var e;return a.value?null==(e=null==n?void 0:n.checkboxGroupSize)?void 0:e.value:void 0}))),hasOwnLabel:g((()=>!(!l.default&&!e.label)))}})(e,l,{model:t}),{isDisabled:d}=((e,{model:l,isChecked:t})=>{const{elForm:a,isGroup:n,checkboxGroup:o}=sl(),s=g((()=>{var e,a;const n=null==(e=o.max)?void 0:e.value,s=null==(a=o.min)?void 0:a.value;return!(!n&&!s)&&l.value.length>=n&&!t.value||l.value.length<=s&&t.value}));return{isDisabled:g((()=>{var l,t;const i=e.disabled||(null==a?void 0:a.disabled);return null!=(t=n.value?(null==(l=o.disabled)?void 0:l.value)||i||s.value:i)&&t})),isLimitDisabled:s}})(e,{model:t,isChecked:r}),{inputId:p,isLabeledByFormItem:v}=Ie(e,{formItemContext:o,disableIdGeneration:c,disableIdManagement:a}),{handleChange:b,onClickRoot:m}=il(e,{model:t,isLimitExceeded:n,hasOwnLabel:c,isDisabled:d,isLabeledByFormItem:v});return((e,{model:l})=>{e.checked&&(Array.isArray(l.value)&&!l.value.includes(e.label)?l.value.push(e.label):l.value=e.trueLabel||!0)})(e,{model:t}),{elFormItem:o,inputId:p,isLabeledByFormItem:v,isChecked:r,isDisabled:d,isGroup:a,checkboxSize:u,hasOwnLabel:c,model:t,handleChange:b,onClickRoot:m,focus:s,size:i}},dl=["tabindex","role","aria-checked"],pl=["id","aria-hidden","name","tabindex","disabled","true-value","false-value"],vl=["id","aria-hidden","disabled","value","name","tabindex"];var bl=U(V({name:"ElCheckbox",props:ol,emits:rl,setup(e){const l=e,t=z(),{inputId:a,isLabeledByFormItem:n,isChecked:o,isDisabled:s,checkboxSize:i,hasOwnLabel:r,model:u,handleChange:c,onClickRoot:d,focus:p}=cl(l,t),v=F("checkbox");return(e,l)=>(_(),T(Q(!j(r)&&j(n)?"span":"label"),{class:R([j(v).b(),j(v).m(j(i)),j(v).is("disabled",j(s)),j(v).is("bordered",e.border),j(v).is("checked",j(o))]),"aria-controls":e.indeterminate?e.controls:null,onClick:j(d)},{default:D((()=>[M("span",{class:R([j(v).e("input"),j(v).is("disabled",j(s)),j(v).is("checked",j(o)),j(v).is("indeterminate",e.indeterminate),j(v).is("focus",j(p))]),tabindex:e.indeterminate?0:void 0,role:e.indeterminate?"checkbox":void 0,"aria-checked":e.indeterminate?"mixed":void 0},[e.trueLabel||e.falseLabel?P((_(),q("input",{key:0,id:j(a),"onUpdate:modelValue":l[0]||(l[0]=e=>W(u)?u.value=e:null),class:R(j(v).e("original")),type:"checkbox","aria-hidden":e.indeterminate?"true":"false",name:e.name,tabindex:e.tabindex,disabled:j(s),"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:l[1]||(l[1]=(...e)=>j(c)&&j(c)(...e)),onFocus:l[2]||(l[2]=e=>p.value=!0),onBlur:l[3]||(l[3]=e=>p.value=!1)},null,42,pl)),[[A,j(u)]]):P((_(),q("input",{key:1,id:j(a),"onUpdate:modelValue":l[4]||(l[4]=e=>W(u)?u.value=e:null),class:R(j(v).e("original")),type:"checkbox","aria-hidden":e.indeterminate?"true":"false",disabled:j(s),value:e.label,name:e.name,tabindex:e.tabindex,onChange:l[5]||(l[5]=(...e)=>j(c)&&j(c)(...e)),onFocus:l[6]||(l[6]=e=>p.value=!0),onBlur:l[7]||(l[7]=e=>p.value=!1)},null,42,vl)),[[A,j(u)]]),M("span",{class:R(j(v).e("inner"))},null,2)],10,dl),j(r)?(_(),q("span",{key:0,class:R(j(v).e("label"))},[G(e.$slots,"default"),e.$slots.default?N("v-if",!0):(_(),q(K,{key:0},[$(H(e.label),1)],64))],2)):N("v-if",!0)])),_:3},8,["class","aria-controls","onClick"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox.vue"]]);const ml=["name","tabindex","disabled","true-value","false-value"],hl=["name","tabindex","disabled","value"];var fl=U(V({name:"ElCheckboxButton",props:ol,emits:rl,setup(e){const l=e,t=z(),{focus:a,isChecked:n,isDisabled:o,size:s,model:i,handleChange:r}=cl(l,t),{checkboxGroup:u}=sl(),c=F("checkbox"),d=g((()=>{var e,l,t,a;const n=null!=(l=null==(e=null==u?void 0:u.fill)?void 0:e.value)?l:"";return{backgroundColor:n,borderColor:n,color:null!=(a=null==(t=null==u?void 0:u.textColor)?void 0:t.value)?a:"",boxShadow:n?`-1px 0 0 0 ${n}`:void 0}}));return(e,l)=>(_(),q("label",{class:R([j(c).b("button"),j(c).bm("button",j(s)),j(c).is("disabled",j(o)),j(c).is("checked",j(n)),j(c).is("focus",j(a))])},[e.trueLabel||e.falseLabel?P((_(),q("input",{key:0,"onUpdate:modelValue":l[0]||(l[0]=e=>W(i)?i.value=e:null),class:R(j(c).be("button","original")),type:"checkbox",name:e.name,tabindex:e.tabindex,disabled:j(o),"true-value":e.trueLabel,"false-value":e.falseLabel,onChange:l[1]||(l[1]=(...e)=>j(r)&&j(r)(...e)),onFocus:l[2]||(l[2]=e=>a.value=!0),onBlur:l[3]||(l[3]=e=>a.value=!1)},null,42,ml)),[[A,j(i)]]):P((_(),q("input",{key:1,"onUpdate:modelValue":l[4]||(l[4]=e=>W(i)?i.value=e:null),class:R(j(c).be("button","original")),type:"checkbox",name:e.name,tabindex:e.tabindex,disabled:j(o),value:e.label,onChange:l[5]||(l[5]=(...e)=>j(r)&&j(r)(...e)),onFocus:l[6]||(l[6]=e=>a.value=!0),onBlur:l[7]||(l[7]=e=>a.value=!1)},null,42,hl)),[[A,j(i)]]),e.$slots.default||e.label?(_(),q("span",{key:2,class:R(j(c).be("button","inner")),style:Y(j(n)?j(d):void 0)},[G(e.$slots,"default",{},(()=>[$(H(e.label),1)]))],6)):N("v-if",!0)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue"]]);var gl=U(V({name:"ElCheckboxGroup",props:nl,emits:ul,setup(e,{emit:l}){const t=e,{elFormItem:a}=sl(),{groupId:n,isLabeledByFormItem:o}=((e,{elFormItem:l})=>{const{inputId:t,isLabeledByFormItem:a}=Ie(e,{formItemContext:l});return{isLabeledByFormItem:a,groupId:t}})(t,{elFormItem:a}),s=O(),i=F("checkbox"),r=e=>{l(Be,e),L((()=>{l("change",e)}))},u=g({get:()=>t.modelValue,set(e){r(e)}});return J("CheckboxGroup",{name:"ElCheckboxGroup",modelValue:u,...X(t),checkboxGroupSize:s,changeEvent:r}),I((()=>t.modelValue),(()=>{var e;null==(e=a.validate)||e.call(a,"change").catch((e=>B()))})),(e,l)=>(_(),T(Q(e.tag),{id:j(n),class:R(j(i).b("group")),role:"group","aria-label":j(o)?void 0:e.label||"checkbox-group","aria-labelledby":j(o)?j(a).labelId:void 0},{default:D((()=>[G(e.$slots,"default")])),_:3},8,["id","class","aria-label","aria-labelledby"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue"]]);const yl=Z(bl,{CheckboxButton:fl,CheckboxGroup:gl}),xl=ee(fl),Cl=ee(gl);var Sl=U(V({name:"ElOption",componentName:"ElOption",props:{value:{required:!0,type:[String,Number,Boolean,Object]},label:[String,Number],created:Boolean,disabled:{type:Boolean,default:!1}},setup(e){const l=F("select"),t=ae({index:-1,groupDisabled:!1,visible:!0,hitState:!1,hover:!1}),{currentLabel:a,itemSelected:n,isDisabled:o,select:s,hoverItem:i}=function(e,l){const t=m("ElSelect"),a=m("ElSelectGroup",{disabled:!1}),n=g((()=>"[object object]"===Object.prototype.toString.call(e.value).toLowerCase())),o=g((()=>t.props.multiple?d(t.props.modelValue,e.value):p(e.value,t.props.modelValue))),s=g((()=>{if(t.props.multiple){const e=t.props.modelValue||[];return!o.value&&e.length>=t.props.multipleLimit&&t.props.multipleLimit>0}return!1})),i=g((()=>e.label||(n.value?"":e.value))),r=g((()=>e.value||e.label||"")),u=g((()=>e.disabled||l.groupDisabled||s.value)),c=E(),d=(e=[],l)=>{if(n.value){const a=t.props.valueKey;return e&&e.some((e=>le(e,a)===le(l,a)))}return e&&e.includes(l)},p=(e,l)=>{if(n.value){const{valueKey:a}=t.props;return le(e,a)===le(l,a)}return e===l};I((()=>i.value),(()=>{e.created||t.props.remote||t.setSelected()})),I((()=>e.value),((l,a)=>{const{remote:n,valueKey:o}=t.props;if(!e.created&&!n){if(o&&"object"==typeof l&&"object"==typeof a&&l[o]===a[o])return;t.setSelected()}})),I((()=>a.disabled),(()=>{l.groupDisabled=a.disabled}),{immediate:!0});const{queryChange:v}=te(t);return I(v,(a=>{const{query:n}=j(a),o=new RegExp(((e="")=>e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d"))(n),"i");l.visible=o.test(i.value)||e.created,l.visible||t.filteredOptionsCount--})),{select:t,currentLabel:i,currentValue:r,itemSelected:o,isDisabled:u,hoverItem:()=>{e.disabled||a.disabled||(t.hoverIndex=t.optionsArray.indexOf(c.proxy))}}}(e,t),{visible:r,hover:u}=X(t),c=E().proxy,d=c.value;return s.onOptionCreate(c),ne((()=>{const{selected:e}=s,l=(s.props.multiple?e:[e]).some((e=>e.value===c.value));s.cachedOptions.get(d)!==c||l||L((()=>{s.cachedOptions.delete(d)})),s.onOptionDestroy(d,c)})),{ns:l,currentLabel:a,itemSelected:n,isDisabled:o,select:s,hoverItem:i,visible:r,hover:u,selectOptionClick:function(){!0!==e.disabled&&!0!==t.groupDisabled&&s.handleOptionSelect(c,!0)},states:t}}}),[["render",function(e,l,t,a,n,o){return P((_(),q("li",{class:R([e.ns.be("dropdown","item"),e.ns.is("disabled",e.isDisabled),{selected:e.itemSelected,hover:e.hover}]),onMouseenter:l[0]||(l[0]=(...l)=>e.hoverItem&&e.hoverItem(...l)),onClick:l[1]||(l[1]=se(((...l)=>e.selectOptionClick&&e.selectOptionClick(...l)),["stop"]))},[G(e.$slots,"default",{},(()=>[M("span",null,H(e.currentLabel),1)]))],34)),[[oe,e.visible]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/option.vue"]]);const kl=V({name:"ElSelectDropdown",componentName:"ElSelectDropdown",setup(){const e=m("ElSelect"),l=F("select"),t=g((()=>e.props.popperClass)),a=g((()=>e.props.multiple)),n=g((()=>e.props.fitInputWidth)),o=k("");function s(){var l;o.value=`${null==(l=e.selectWrapper)?void 0:l.getBoundingClientRect().width}px`}return ie((()=>{s(),re(e.selectWrapper,s)})),{ns:l,minWidth:o,popperClass:t,isMultiple:a,isFitInputWidth:n}}});const Ol=(e,l,t)=>{const{t:a}=Me(),n=F("select"),o=k(null),s=k(null),i=k(null),r=k(null),u=k(null),c=k(null),v=k(-1),b=ue({query:""}),y=ue(""),x=m(h,{}),C=m(f,{}),S=g((()=>!e.filterable||e.multiple||!l.visible)),w=g((()=>e.disabled||x.disabled)),E=g((()=>{const t=e.multiple?Array.isArray(e.modelValue)&&e.modelValue.length>0:void 0!==e.modelValue&&null!==e.modelValue&&""!==e.modelValue;return e.clearable&&!w.value&&l.inputHovering&&t})),V=g((()=>e.remote&&e.filterable?"":e.suffixIcon)),z=g((()=>n.is("reverse",V.value&&l.visible))),_=g((()=>e.remote?300:0)),T=g((()=>e.loading?e.loadingText||a("el.select.loading"):(!e.remote||""!==l.query||0!==l.options.size)&&(e.filterable&&l.query&&l.options.size>0&&0===l.filteredOptionsCount?e.noMatchText||a("el.select.noMatch"):0===l.options.size?e.noDataText||a("el.select.noData"):null))),D=g((()=>Array.from(l.options.values()))),M=g((()=>Array.from(l.cachedOptions.values()))),P=g((()=>{const t=D.value.filter((e=>!e.created)).some((e=>e.currentLabel===l.query));return e.filterable&&e.allowCreate&&""!==l.query&&!t})),A=O(),j=g((()=>["small"].includes(A.value)?"small":"default")),q=g({get:()=>l.visible&&!1!==T.value,set(e){l.visible=e}});I([()=>w.value,()=>A.value,()=>x.size],(()=>{L((()=>{W()}))})),I((()=>e.placeholder),(e=>{l.cachedPlaceHolder=l.currentPlaceholder=e})),I((()=>e.modelValue),((t,a)=>{var n;e.multiple&&(W(),t&&t.length>0||s.value&&""!==l.query?l.currentPlaceholder="":l.currentPlaceholder=l.cachedPlaceHolder,e.filterable&&!e.reserveKeyword&&(l.query="",R(l.query))),$(),e.filterable&&!e.multiple&&(l.inputLength=20),Ze(t,a)||null==(n=C.validate)||n.call(C,"change").catch((e=>B()))}),{flush:"post",deep:!0}),I((()=>l.visible),(a=>{var n,o,r;a?(null==(o=null==(n=i.value)?void 0:n.updatePopper)||o.call(n),e.filterable&&(l.filteredOptionsCount=l.optionsCount,l.query=e.remote?"":l.selectedLabel,e.multiple?null==(r=s.value)||r.focus():l.selectedLabel&&(l.currentPlaceholder=`${l.selectedLabel}`,l.selectedLabel=""),R(l.query),e.multiple||e.remote||(b.value.query="",ce(b),ce(y)))):(s.value&&s.value.blur(),l.query="",l.previousQuery=null,l.selectedLabel="",l.inputLength=20,l.menuVisibleOnFocus=!1,N(),L((()=>{s.value&&""===s.value.value&&0===l.selected.length&&(l.currentPlaceholder=l.cachedPlaceHolder)})),e.multiple||(l.selected&&(e.filterable&&e.allowCreate&&l.createdSelected&&l.createdLabel?l.selectedLabel=l.createdLabel:l.selectedLabel=l.selected.currentLabel,e.filterable&&(l.query=l.selectedLabel)),e.filterable&&(l.currentPlaceholder=l.cachedPlaceHolder))),t.emit("visible-change",a)})),I((()=>l.options.entries()),(()=>{var t,a,n;if(!p)return;null==(a=null==(t=i.value)?void 0:t.updatePopper)||a.call(t),e.multiple&&W();const o=(null==(n=u.value)?void 0:n.querySelectorAll("input"))||[];Array.from(o).includes(document.activeElement)||$(),e.defaultFirstOption&&(e.filterable||e.remote)&&l.filteredOptionsCount&&K()}),{flush:"post"}),I((()=>l.hoverIndex),(e=>{"number"==typeof e&&e>-1&&(v.value=D.value[e]||{}),D.value.forEach((e=>{e.hover=v.value===e}))}));const W=()=>{e.collapseTags&&!e.filterable||L((()=>{var e,t;if(!o.value)return;const a=o.value.$el.querySelector("input"),n=r.value,s=(u=A.value||x.size,d[u||"default"]);var u;a.style.height=`${0===l.selected.length?s:Math.max(n?n.clientHeight+(n.clientHeight>s?6:0):0,s)-2}px`,l.tagInMultiLine=Number.parseFloat(a.style.height)>=s,l.visible&&!1!==T.value&&(null==(t=null==(e=i.value)?void 0:e.updatePopper)||t.call(e))}))},R=t=>{l.previousQuery===t||l.isOnComposition||(null!==l.previousQuery||"function"!=typeof e.filterMethod&&"function"!=typeof e.remoteMethod?(l.previousQuery=t,L((()=>{var e,t;l.visible&&(null==(t=null==(e=i.value)?void 0:e.updatePopper)||t.call(e))})),l.hoverIndex=-1,e.multiple&&e.filterable&&L((()=>{const t=15*s.value.value.length+20;l.inputLength=e.collapseTags?Math.min(50,t):t,G(),W()})),e.remote&&"function"==typeof e.remoteMethod?(l.hoverIndex=-1,e.remoteMethod(t)):"function"==typeof e.filterMethod?(e.filterMethod(t),ce(y)):(l.filteredOptionsCount=l.optionsCount,b.value.query=t,ce(b),ce(y)),e.defaultFirstOption&&(e.filterable||e.remote)&&l.filteredOptionsCount&&K()):l.previousQuery=t)},G=()=>{""!==l.currentPlaceholder&&(l.currentPlaceholder=s.value.value?"":l.cachedPlaceHolder)},K=()=>{const e=D.value.filter((e=>e.visible&&!e.disabled&&!e.states.groupDisabled)),t=e.find((e=>e.created)),a=e[0];l.hoverIndex=ee(D.value,t||a)},$=()=>{var t;if(!e.multiple){const a=H(e.modelValue);return(null==(t=a.props)?void 0:t.created)?(l.createdLabel=a.props.value,l.createdSelected=!0):l.createdSelected=!1,l.selectedLabel=a.currentLabel,l.selected=a,void(e.filterable&&(l.query=l.selectedLabel))}l.selectedLabel="";const a=[];Array.isArray(e.modelValue)&&e.modelValue.forEach((e=>{a.push(H(e))})),l.selected=a,L((()=>{W()}))},H=t=>{let a;const n="object"===de(t).toLowerCase(),o="null"===de(t).toLowerCase(),s="undefined"===de(t).toLowerCase();for(let r=l.cachedOptions.size-1;r>=0;r--){const l=M.value[r];if(n?le(l.value,e.valueKey)===le(t,e.valueKey):l.value===t){a={value:t,currentLabel:l.currentLabel,isDisabled:l.isDisabled};break}}if(a)return a;const i={value:t,currentLabel:n?t.label:o||s?"":t};return e.multiple&&(i.hitState=!1),i},N=()=>{setTimeout((()=>{const t=e.valueKey;e.multiple?l.selected.length>0?l.hoverIndex=Math.min.apply(null,l.selected.map((e=>D.value.findIndex((l=>le(l,t)===le(e,t)))))):l.hoverIndex=-1:l.hoverIndex=D.value.findIndex((e=>se(e)===se(l.selected)))}),300)},Q=()=>{var e;l.inputWidth=null==(e=o.value)?void 0:e.$el.getBoundingClientRect().width},U=Ae((()=>{e.filterable&&l.query!==l.selectedLabel&&(l.query=l.selectedLabel,R(l.query))}),_.value),Y=Ae((e=>{R(e.target.value)}),_.value),J=l=>{Ze(e.modelValue,l)||t.emit(Ee,l)},X=a=>{a.stopPropagation();const n=e.multiple?[]:"";if("string"!=typeof n)for(const e of l.selected)e.isDisabled&&n.push(e.value);t.emit(Be,n),J(n),l.visible=!1,t.emit("clear")},Z=(a,n)=>{var o;if(e.multiple){const n=(e.modelValue||[]).slice(),i=ee(n,a.value);i>-1?n.splice(i,1):(e.multipleLimit<=0||n.length<e.multipleLimit)&&n.push(a.value),t.emit(Be,n),J(n),a.created&&(l.query="",R(""),l.inputLength=20),e.filterable&&(null==(o=s.value)||o.focus())}else t.emit(Be,a.value),J(a.value),l.visible=!1;l.isSilentBlur=n,te(),l.visible||L((()=>{ae(a)}))},ee=(l=[],t)=>{if(!pe(t))return l.indexOf(t);const a=e.valueKey;let n=-1;return l.some(((e,l)=>le(e,a)===le(t,a)&&(n=l,!0))),n},te=()=>{l.softFocus=!0;const e=s.value||o.value;e&&(null==e||e.focus())},ae=e=>{var l,t,a,o,s;const r=Array.isArray(e)?e[0]:e;let u=null;if(null==r?void 0:r.value){const e=D.value.filter((e=>e.value===r.value));e.length>0&&(u=e[0].$el)}if(i.value&&u){const e=null==(o=null==(a=null==(t=null==(l=i.value)?void 0:l.popperRef)?void 0:t.contentRef)?void 0:a.querySelector)?void 0:o.call(a,`.${n.be("dropdown","wrap")}`);e&&Pe(e,u)}null==(s=c.value)||s.handleScroll()},ne=e=>{if(!Array.isArray(l.selected))return;const t=l.selected[l.selected.length-1];return t?!0===e||!1===e?(t.hitState=e,e):(t.hitState=!t.hitState,t.hitState):void 0},oe=()=>{var t;e.automaticDropdown||w.value||(l.menuVisibleOnFocus?l.menuVisibleOnFocus=!1:l.visible=!l.visible,l.visible&&(null==(t=s.value||o.value)||t.focus()))},se=l=>pe(l.value)?le(l.value,e.valueKey):l.value,ie=g((()=>D.value.filter((e=>e.visible)).every((e=>e.disabled)))),re=e=>{if(l.visible){if(0!==l.options.size&&0!==l.filteredOptionsCount&&!l.isOnComposition&&!ie.value){"next"===e?(l.hoverIndex++,l.hoverIndex===l.options.size&&(l.hoverIndex=0)):"prev"===e&&(l.hoverIndex--,l.hoverIndex<0&&(l.hoverIndex=l.options.size-1));const t=D.value[l.hoverIndex];!0!==t.disabled&&!0!==t.states.groupDisabled&&t.visible||re(e),L((()=>ae(v.value)))}}else l.visible=!0};return{optionsArray:D,selectSize:A,handleResize:()=>{var l,t;Q(),null==(t=null==(l=i.value)?void 0:l.updatePopper)||t.call(l),e.multiple&&!e.filterable&&W()},debouncedOnInputChange:U,debouncedQueryChange:Y,deletePrevTag:a=>{if(a.target.value.length<=0&&!ne()){const l=e.modelValue.slice();l.pop(),t.emit(Be,l),J(l)}1===a.target.value.length&&0===e.modelValue.length&&(l.currentPlaceholder=l.cachedPlaceHolder)},deleteTag:(a,n)=>{const o=l.selected.indexOf(n);if(o>-1&&!w.value){const l=e.modelValue.slice();l.splice(o,1),t.emit(Be,l),J(l),t.emit("remove-tag",n.value)}a.stopPropagation()},deleteSelected:X,handleOptionSelect:Z,scrollToOption:ae,readonly:S,resetInputHeight:W,showClose:E,iconComponent:V,iconReverse:z,showNewOption:P,collapseTagSize:j,setSelected:$,managePlaceholder:G,selectDisabled:w,emptyText:T,toggleLastOptionHitState:ne,resetInputState:e=>{e.code!==ve.backspace&&ne(!1),l.inputLength=15*s.value.value.length+20,W()},handleComposition:e=>{const t=e.target.value;if("compositionend"===e.type)l.isOnComposition=!1,L((()=>R(t)));else{const e=t[t.length-1]||"";l.isOnComposition=!Ve(e)}},onOptionCreate:e=>{l.optionsCount++,l.filteredOptionsCount++,l.options.set(e.value,e),l.cachedOptions.set(e.value,e)},onOptionDestroy:(e,t)=>{l.options.get(e)===t&&(l.optionsCount--,l.filteredOptionsCount--,l.options.delete(e))},handleMenuEnter:()=>{L((()=>ae(l.selected)))},handleFocus:a=>{l.softFocus?l.softFocus=!1:((e.automaticDropdown||e.filterable)&&(e.filterable&&!l.visible&&(l.menuVisibleOnFocus=!0),l.visible=!0),t.emit("focus",a))},blur:()=>{var e;l.visible=!1,null==(e=o.value)||e.blur()},handleBlur:e=>{L((()=>{l.isSilentBlur?l.isSilentBlur=!1:t.emit("blur",e)})),l.softFocus=!1},handleClearClick:e=>{X(e)},handleClose:()=>{l.visible=!1},handleKeydownEscape:e=>{l.visible&&(e.preventDefault(),e.stopPropagation(),l.visible=!1)},toggleMenu:oe,selectOption:()=>{l.visible?D.value[l.hoverIndex]&&Z(D.value[l.hoverIndex],void 0):oe()},getValueKey:se,navigateOptions:re,dropMenuVisible:q,queryChange:b,groupQueryChange:y,reference:o,input:s,tooltipRef:i,tags:r,selectWrapper:u,scrollbar:c}},wl=V({name:"ElSelect",componentName:"ElSelect",components:{ElInput:ze,ElSelectMenu:U(kl,[["render",function(e,l,t,a,n,o){return _(),q("div",{class:R([e.ns.b("dropdown"),e.ns.is("multiple",e.isMultiple),e.popperClass]),style:Y({[e.isFitInputWidth?"width":"minWidth"]:e.minWidth})},[G(e.$slots,"default")],6)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/select-dropdown.vue"]]),ElOption:Sl,ElTag:Te,ElScrollbar:be,ElTooltip:Fe,ElIcon:me},directives:{ClickOutside:al},props:{name:String,id:String,modelValue:{type:[Array,String,Number,Boolean,Object],default:void 0},autocomplete:{type:String,default:"off"},automaticDropdown:Boolean,size:{type:String,validator:je},effect:{type:String,default:"light"},disabled:Boolean,clearable:Boolean,filterable:Boolean,allowCreate:Boolean,loading:Boolean,popperClass:{type:String,default:""},remote:Boolean,loadingText:String,noMatchText:String,noDataText:String,remoteMethod:Function,filterMethod:Function,multiple:Boolean,multipleLimit:{type:Number,default:0},placeholder:{type:String},defaultFirstOption:Boolean,reserveKeyword:{type:Boolean,default:!0},valueKey:{type:String,default:"value"},collapseTags:Boolean,collapseTagsTooltip:{type:Boolean,default:!1},teleported:_e.teleported,persistent:{type:Boolean,default:!0},clearIcon:{type:[String,Object],default:he},fitInputWidth:{type:Boolean,default:!1},suffixIcon:{type:[String,Object],default:fe},tagType:{...De.type,default:"info"}},emits:[Be,Ee,"remove-tag","clear","visible-change","focus","blur"],setup(e,l){const t=F("select"),a=F("input"),{t:n}=Me(),o=function(e){const{t:l}=Me();return ae({options:new Map,cachedOptions:new Map,createdLabel:null,createdSelected:!1,selected:e.multiple?[]:{},inputLength:20,inputWidth:0,optionsCount:0,filteredOptionsCount:0,visible:!1,softFocus:!1,selectedLabel:"",hoverIndex:-1,query:"",previousQuery:null,inputHovering:!1,cachedPlaceHolder:"",currentPlaceholder:l("el.select.placeholder"),menuVisibleOnFocus:!1,isOnComposition:!1,isSilentBlur:!1,prefixWidth:11,tagInMultiLine:!1})}(e),{optionsArray:s,selectSize:i,readonly:r,handleResize:u,collapseTagSize:c,debouncedOnInputChange:d,debouncedQueryChange:p,deletePrevTag:v,deleteTag:b,deleteSelected:m,handleOptionSelect:h,scrollToOption:f,setSelected:y,resetInputHeight:x,managePlaceholder:C,showClose:S,selectDisabled:k,iconComponent:O,iconReverse:w,showNewOption:I,emptyText:B,toggleLastOptionHitState:E,resetInputState:V,handleComposition:z,onOptionCreate:_,onOptionDestroy:T,handleMenuEnter:D,handleFocus:M,blur:P,handleBlur:A,handleClearClick:q,handleClose:W,handleKeydownEscape:R,toggleMenu:G,selectOption:K,getValueKey:$,navigateOptions:H,dropMenuVisible:N,reference:Q,input:U,tooltipRef:Y,tags:Z,selectWrapper:ee,scrollbar:le,queryChange:te,groupQueryChange:ne}=Ol(e,o,l),{focus:oe}=(se=Q,{focus:()=>{var e,l;null==(l=null==(e=se.value)?void 0:e.focus)||l.call(e)}});var se;const{inputWidth:ue,selected:ce,inputLength:de,filteredOptionsCount:pe,visible:ve,softFocus:be,selectedLabel:me,hoverIndex:he,query:fe,inputHovering:ge,currentPlaceholder:ye,menuVisibleOnFocus:xe,isOnComposition:Ce,isSilentBlur:Se,options:ke,cachedOptions:Oe,optionsCount:we,prefixWidth:Le,tagInMultiLine:Ie}=X(o),Ee=g((()=>{const l=[t.b()],a=j(i);return a&&l.push(t.m(a)),e.disabled&&l.push(t.m("disabled")),l})),Ve=g((()=>({maxWidth:j(ue)-32+"px",width:"100%"})));J("ElSelect",ae({props:e,options:ke,optionsArray:s,cachedOptions:Oe,optionsCount:we,filteredOptionsCount:pe,hoverIndex:he,handleOptionSelect:h,onOptionCreate:_,onOptionDestroy:T,selectWrapper:ee,selected:ce,setSelected:y,queryChange:te,groupQueryChange:ne})),ie((()=>{o.cachedPlaceHolder=ye.value=e.placeholder||n("el.select.placeholder"),e.multiple&&Array.isArray(e.modelValue)&&e.modelValue.length>0&&(ye.value=""),re(ee,u),e.remote&&e.multiple&&x(),L((()=>{const e=Q.value&&Q.value.$el;if(e&&(ue.value=e.getBoundingClientRect().width,l.slots.prefix)){const l=e.querySelector(`.${a.e("prefix")}`);Le.value=Math.max(l.getBoundingClientRect().width+5,30)}})),y()})),e.multiple&&!Array.isArray(e.modelValue)&&l.emit(Be,[]),!e.multiple&&Array.isArray(e.modelValue)&&l.emit(Be,"");const ze=g((()=>{var e,l;return null==(l=null==(e=Y.value)?void 0:e.popperRef)?void 0:l.contentRef}));return{tagInMultiLine:Ie,prefixWidth:Le,selectSize:i,readonly:r,handleResize:u,collapseTagSize:c,debouncedOnInputChange:d,debouncedQueryChange:p,deletePrevTag:v,deleteTag:b,deleteSelected:m,handleOptionSelect:h,scrollToOption:f,inputWidth:ue,selected:ce,inputLength:de,filteredOptionsCount:pe,visible:ve,softFocus:be,selectedLabel:me,hoverIndex:he,query:fe,inputHovering:ge,currentPlaceholder:ye,menuVisibleOnFocus:xe,isOnComposition:Ce,isSilentBlur:Se,options:ke,resetInputHeight:x,managePlaceholder:C,showClose:S,selectDisabled:k,iconComponent:O,iconReverse:w,showNewOption:I,emptyText:B,toggleLastOptionHitState:E,resetInputState:V,handleComposition:z,handleMenuEnter:D,handleFocus:M,blur:P,handleBlur:A,handleClearClick:q,handleClose:W,handleKeydownEscape:R,toggleMenu:G,selectOption:K,getValueKey:$,navigateOptions:H,dropMenuVisible:N,focus:oe,reference:Q,input:U,tooltipRef:Y,popperPaneRef:ze,tags:Z,selectWrapper:ee,scrollbar:le,wrapperKls:Ee,selectTagsStyle:Ve,nsSelect:t}}}),Ll={class:"select-trigger"},Il=["disabled","autocomplete"],Bl={style:{height:"100%",display:"flex","justify-content":"center","align-items":"center"}};var El=U(wl,[["render",function(e,l,t,a,n,o){const s=ge("el-tag"),i=ge("el-tooltip"),r=ge("el-icon"),u=ge("el-input"),c=ge("el-option"),d=ge("el-scrollbar"),p=ge("el-select-menu"),v=ye("click-outside");return P((_(),q("div",{ref:"selectWrapper",class:R(e.wrapperKls),onClick:l[23]||(l[23]=se(((...l)=>e.toggleMenu&&e.toggleMenu(...l)),["stop"]))},[xe(i,{ref:"tooltipRef",visible:e.dropMenuVisible,"onUpdate:visible":l[22]||(l[22]=l=>e.dropMenuVisible=l),placement:"bottom-start",teleported:e.teleported,"popper-class":[e.nsSelect.e("popper"),e.popperClass],"fallback-placements":["bottom-start","top-start","right","left"],effect:e.effect,pure:"",trigger:"click",transition:`${e.nsSelect.namespace.value}-zoom-in-top`,"stop-popper-mouse-event":!1,"gpu-acceleration":!1,persistent:e.persistent,onShow:e.handleMenuEnter},{default:D((()=>[M("div",Ll,[e.multiple?(_(),q("div",{key:0,ref:"tags",class:R(e.nsSelect.e("tags")),style:Y(e.selectTagsStyle)},[e.collapseTags&&e.selected.length?(_(),q("span",{key:0,class:R([e.nsSelect.b("tags-wrapper"),{"has-prefix":e.prefixWidth&&e.selected.length}])},[xe(s,{closable:!e.selectDisabled&&!e.selected[0].isDisabled,size:e.collapseTagSize,hit:e.selected[0].hitState,type:e.tagType,"disable-transitions":"",onClose:l[0]||(l[0]=l=>e.deleteTag(l,e.selected[0]))},{default:D((()=>[M("span",{class:R(e.nsSelect.e("tags-text")),style:Y({maxWidth:e.inputWidth-123+"px"})},H(e.selected[0].currentLabel),7)])),_:1},8,["closable","size","hit","type"]),e.selected.length>1?(_(),T(s,{key:0,closable:!1,size:e.collapseTagSize,type:e.tagType,"disable-transitions":""},{default:D((()=>[e.collapseTagsTooltip?(_(),T(i,{key:0,disabled:e.dropMenuVisible,"fallback-placements":["bottom","top","right","left"],effect:e.effect,placement:"bottom",teleported:!1},{default:D((()=>[M("span",{class:R(e.nsSelect.e("tags-text"))},"+ "+H(e.selected.length-1),3)])),content:D((()=>[M("div",{class:R(e.nsSelect.e("collapse-tags"))},[(_(!0),q(K,null,Ce(e.selected,((l,t)=>(_(),q("div",{key:t,class:R(e.nsSelect.e("collapse-tag"))},[(_(),T(s,{key:e.getValueKey(l),class:"in-tooltip",closable:!e.selectDisabled&&!l.isDisabled,size:e.collapseTagSize,hit:l.hitState,type:e.tagType,"disable-transitions":"",style:{margin:"2px"},onClose:t=>e.deleteTag(t,l)},{default:D((()=>[M("span",{class:R(e.nsSelect.e("tags-text")),style:Y({maxWidth:e.inputWidth-75+"px"})},H(l.currentLabel),7)])),_:2},1032,["closable","size","hit","type","onClose"]))],2)))),128))],2)])),_:1},8,["disabled","effect"])):(_(),q("span",{key:1,class:R(e.nsSelect.e("tags-text"))},"+ "+H(e.selected.length-1),3))])),_:1},8,["size","type"])):N("v-if",!0)],2)):N("v-if",!0),N(" <div> "),e.collapseTags?N("v-if",!0):(_(),T(Se,{key:1,onAfterLeave:e.resetInputHeight},{default:D((()=>[M("span",{class:R([e.nsSelect.b("tags-wrapper"),{"has-prefix":e.prefixWidth&&e.selected.length}])},[(_(!0),q(K,null,Ce(e.selected,(l=>(_(),T(s,{key:e.getValueKey(l),closable:!e.selectDisabled&&!l.isDisabled,size:e.collapseTagSize,hit:l.hitState,type:e.tagType,"disable-transitions":"",onClose:t=>e.deleteTag(t,l)},{default:D((()=>[M("span",{class:R(e.nsSelect.e("tags-text")),style:Y({maxWidth:e.inputWidth-75+"px"})},H(l.currentLabel),7)])),_:2},1032,["closable","size","hit","type","onClose"])))),128))],2)])),_:1},8,["onAfterLeave"])),N(" </div> "),e.filterable?P((_(),q("input",{key:2,ref:"input","onUpdate:modelValue":l[1]||(l[1]=l=>e.query=l),type:"text",class:R([e.nsSelect.e("input"),e.nsSelect.is(e.selectSize)]),disabled:e.selectDisabled,autocomplete:e.autocomplete,style:Y({marginLeft:e.prefixWidth&&!e.selected.length||e.tagInMultiLine?`${e.prefixWidth}px`:"",flexGrow:1,width:e.inputLength/(e.inputWidth-32)+"%",maxWidth:e.inputWidth-42+"px"}),onFocus:l[2]||(l[2]=(...l)=>e.handleFocus&&e.handleFocus(...l)),onBlur:l[3]||(l[3]=(...l)=>e.handleBlur&&e.handleBlur(...l)),onKeyup:l[4]||(l[4]=(...l)=>e.managePlaceholder&&e.managePlaceholder(...l)),onKeydown:[l[5]||(l[5]=(...l)=>e.resetInputState&&e.resetInputState(...l)),l[6]||(l[6]=ke(se((l=>e.navigateOptions("next")),["prevent"]),["down"])),l[7]||(l[7]=ke(se((l=>e.navigateOptions("prev")),["prevent"]),["up"])),l[8]||(l[8]=ke(((...l)=>e.handleKeydownEscape&&e.handleKeydownEscape(...l)),["esc"])),l[9]||(l[9]=ke(se(((...l)=>e.selectOption&&e.selectOption(...l)),["stop","prevent"]),["enter"])),l[10]||(l[10]=ke(((...l)=>e.deletePrevTag&&e.deletePrevTag(...l)),["delete"])),l[11]||(l[11]=ke((l=>e.visible=!1),["tab"]))],onCompositionstart:l[12]||(l[12]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onCompositionupdate:l[13]||(l[13]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onCompositionend:l[14]||(l[14]=(...l)=>e.handleComposition&&e.handleComposition(...l)),onInput:l[15]||(l[15]=(...l)=>e.debouncedQueryChange&&e.debouncedQueryChange(...l))},null,46,Il)),[[Oe,e.query]]):N("v-if",!0)],6)):N("v-if",!0),xe(u,{id:e.id,ref:"reference",modelValue:e.selectedLabel,"onUpdate:modelValue":l[16]||(l[16]=l=>e.selectedLabel=l),type:"text",placeholder:e.currentPlaceholder,name:e.name,autocomplete:e.autocomplete,size:e.selectSize,disabled:e.selectDisabled,readonly:e.readonly,"validate-event":!1,class:R([e.nsSelect.is("focus",e.visible)]),tabindex:e.multiple&&e.filterable?-1:void 0,onFocus:e.handleFocus,onBlur:e.handleBlur,onInput:e.debouncedOnInputChange,onPaste:e.debouncedOnInputChange,onCompositionstart:e.handleComposition,onCompositionupdate:e.handleComposition,onCompositionend:e.handleComposition,onKeydown:[l[17]||(l[17]=ke(se((l=>e.navigateOptions("next")),["stop","prevent"]),["down"])),l[18]||(l[18]=ke(se((l=>e.navigateOptions("prev")),["stop","prevent"]),["up"])),ke(se(e.selectOption,["stop","prevent"]),["enter"]),ke(e.handleKeydownEscape,["esc"]),l[19]||(l[19]=ke((l=>e.visible=!1),["tab"]))],onMouseenter:l[20]||(l[20]=l=>e.inputHovering=!0),onMouseleave:l[21]||(l[21]=l=>e.inputHovering=!1)},we({suffix:D((()=>[e.iconComponent&&!e.showClose?(_(),T(r,{key:0,class:R([e.nsSelect.e("caret"),e.nsSelect.e("icon"),e.iconReverse])},{default:D((()=>[(_(),T(Q(e.iconComponent)))])),_:1},8,["class"])):N("v-if",!0),e.showClose&&e.clearIcon?(_(),T(r,{key:1,class:R([e.nsSelect.e("caret"),e.nsSelect.e("icon")]),onClick:e.handleClearClick},{default:D((()=>[(_(),T(Q(e.clearIcon)))])),_:1},8,["class","onClick"])):N("v-if",!0)])),_:2},[e.$slots.prefix?{name:"prefix",fn:D((()=>[M("div",Bl,[G(e.$slots,"prefix")])]))}:void 0]),1032,["id","modelValue","placeholder","name","autocomplete","size","disabled","readonly","class","tabindex","onFocus","onBlur","onInput","onPaste","onCompositionstart","onCompositionupdate","onCompositionend","onKeydown"])])])),content:D((()=>[xe(p,null,{default:D((()=>[P(xe(d,{ref:"scrollbar",tag:"ul","wrap-class":e.nsSelect.be("dropdown","wrap"),"view-class":e.nsSelect.be("dropdown","list"),class:R([e.nsSelect.is("empty",!e.allowCreate&&Boolean(e.query)&&0===e.filteredOptionsCount)])},{default:D((()=>[e.showNewOption?(_(),T(c,{key:0,value:e.query,created:!0},null,8,["value"])):N("v-if",!0),G(e.$slots,"default")])),_:3},8,["wrap-class","view-class","class"]),[[oe,e.options.size>0&&!e.loading]]),e.emptyText&&(!e.allowCreate||e.loading||e.allowCreate&&0===e.options.size)?(_(),q(K,{key:0},[e.$slots.empty?G(e.$slots,"empty",{key:0}):(_(),q("p",{key:1,class:R(e.nsSelect.be("dropdown","empty"))},H(e.emptyText),3))],64)):N("v-if",!0)])),_:3})])),_:3},8,["visible","teleported","popper-class","effect","transition","persistent","onShow"])],2)),[[v,e.handleClose,e.popperPaneRef]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/select.vue"]]);var Vl=U(V({name:"ElOptionGroup",componentName:"ElOptionGroup",props:{label:String,disabled:{type:Boolean,default:!1}},setup(e){const l=F("select"),t=k(!0),a=E(),n=k([]);J("ElSelectGroup",ae({...X(e)}));const o=m("ElSelect");ie((()=>{n.value=s(a.subTree)}));const s=e=>{const l=[];return Array.isArray(e.children)&&e.children.forEach((e=>{var t;e.type&&"ElOption"===e.type.name&&e.component&&e.component.proxy?l.push(e.component.proxy):(null==(t=e.children)?void 0:t.length)&&l.push(...s(e))})),l},{groupQueryChange:i}=te(o);return I(i,(()=>{t.value=n.value.some((e=>!0===e.visible))})),{visible:t,ns:l}}}),[["render",function(e,l,t,a,n,o){return P((_(),q("ul",{class:R(e.ns.be("group","wrap"))},[M("li",{class:R(e.ns.be("group","title"))},H(e.label),3),M("li",null,[M("ul",{class:R(e.ns.b("group"))},[G(e.$slots,"default")],2)])],2)),[[oe,e.visible]])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/select/src/option-group.vue"]]);const zl=Z(El,{Option:Sl,OptionGroup:Vl}),Fl=ee(Sl),_l=ee(Vl);const Tl=(e,l="default",t)=>{if(!e||!Reflect.has(e,l))return null;if(!Le(e[l]))return console.error(`${l} is not a function!`),null;const a=e[l];return a?a(t):null};export{al as C,yl as E,qe as S,zl as a,Cl as b,Re as c,Fl as d,_l as e,xl as f,Tl as g,Ze as i,$e as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
