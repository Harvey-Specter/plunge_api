import{b9 as e,R as t,D as n,aJ as o,v as r,$ as a,aI as i,P as s,aA as l,bI as u,b0 as p,au as f,bJ as c,Q as d,a as v,ar as m,a9 as g,d as h,r as y,a2 as b,Y as w,ak as x,o as E,c as O,n as A,U as T,av as k,bK as C,W as R,G as S,bm as L,bL as B,g as M,bM as P,bx as j,h as D,w as F,a6 as I,at as _,aa as H,V as N,am as W,bN as $,aD as K,a4 as q,ae as z,Z as V,E as U,aQ as X,i as Y,bO as G,ab as J,aX as Q,ay as Z,bH as ee,t as te}from"./index.f2e05143.js";import{u as ne}from"./index2.bac0fa94.js";function oe(e){return null==e}const re=(e,t,n,o=!1)=>{e&&t&&n&&(null==e||e.addEventListener(t,n,o))},ae=(e,t,n,o=!1)=>{e&&t&&n&&(null==e||e.removeEventListener(t,n,o))},ie=(e,t,n)=>{const o=function(...r){n&&n.apply(this,r),ae(e,t,o)};re(e,t,o)},se=(e,t,{checkForDefaultPrevented:n=!0}={})=>o=>{const r=null==e?void 0:e(o);if(!1===n||!r)return null==t?void 0:t(o)},le=e=>t=>"mouse"===t.pointerType?e(t):void 0,ue=()=>Math.floor(1e4*Math.random()),pe=Symbol("popper"),fe=Symbol("popperContent"),ce=e({type:t(Boolean),default:null}),de=e({type:t(Function)});let ve=[];let me;const ge=`el-popper-container-${ue()}`,he=`#${ge}`,ye=()=>{c((()=>{s&&(me&&document.body.querySelector(he)||(me=(()=>{const e=document.createElement("div");return e.id=ge,document.body.appendChild(e),e})()))}))},be=d({showAfter:{type:Number,default:0},hideAfter:{type:Number,default:200}}),we=({showAfter:e,hideAfter:t,open:n,close:o})=>{const{registerTimeout:r}=function(){let e;const t=()=>window.clearTimeout(e);return u((()=>t())),{registerTimeout:(n,o)=>{t(),e=window.setTimeout(n,o)},cancelTimeout:t}}();return{onOpen:t=>{r((()=>{n(t)}),v(e))},onClose:e=>{r((()=>{o(e)}),v(t))}}},xe=Symbol("elForwardRef"),Ee={LIGHT:"light",DARK:"dark"},Oe=d({role:{type:String,default:"tooltip"}});var Ae=g(h({name:"ElPopperRoot",inheritAttrs:!1,props:Oe,setup(e,{expose:t}){const o=e,r={triggerRef:y(),popperInstanceRef:y(),contentRef:y(),referenceRef:y(),role:n((()=>o.role))};return t(r),m(pe,r),(e,t)=>b(e.$slots,"default")}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/popper.vue"]]);const Te=d({arrowOffset:{type:Number,default:5}});var ke=g(h({name:"ElPopperArrow",inheritAttrs:!1,props:Te,setup(e,{expose:t}){const n=e,o=w("popper"),{arrowOffset:a,arrowRef:i}=x(fe,void 0);return r((()=>n.arrowOffset),(e=>{a.value=e})),p((()=>{i.value=void 0})),t({arrowRef:i}),(e,t)=>(E(),O("span",{ref_key:"arrowRef",ref:i,class:A(v(o).e("arrow")),"data-popper-arrow":""},null,2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue"]]);const Ce=h({name:"ElOnlyChild",setup(e,{slots:t,attrs:n}){var o;const r=x(xe),a=(i=null!=(o=null==r?void 0:r.setForwardRef)?o:T,{mounted(e){i(e)},updated(e){i(e)},unmounted(){i(null)}});var i;return()=>{var e;const o=null==(e=t.default)?void 0:e.call(t,n);if(!o)return null;if(o.length>1)return null;const r=Re(o);return r?k(C(r,n),[[a]]):null}}});function Re(e){if(!e)return null;const t=e;for(const n of t){if(R(n))switch(n.type){case B:continue;case L:case"svg":return Se(n);case S:return Re(n.children);default:return n}return Se(n)}return null}function Se(e){return M("span",{class:"el-only-child__content"},[e])}const Le=d({virtualRef:{type:t(Object)},virtualTriggering:Boolean,onMouseenter:Function,onMouseleave:Function,onClick:Function,onKeydown:Function,onFocus:Function,onBlur:Function,onContextmenu:Function,id:String,open:Boolean});var Be=g(h({name:"ElPopperTrigger",inheritAttrs:!1,props:Le,setup(e,{expose:t}){const o=e,{role:i,triggerRef:s}=x(pe,void 0);var l;l=s,m(xe,{setForwardRef:e=>{l.value=e}});const u=n((()=>c.value?o.id:void 0)),f=n((()=>{if(i&&"tooltip"===i.value)return o.open&&o.id?o.id:void 0})),c=n((()=>{if(i&&"tooltip"!==i.value)return i.value})),d=n((()=>c.value?`${o.open}`:void 0));let g;return a((()=>{r((()=>o.virtualRef),(e=>{e&&(s.value=P(e))}),{immediate:!0}),r((()=>s.value),((e,t)=>{null==g||g(),g=void 0,j(e)&&(["onMouseenter","onMouseleave","onClick","onKeydown","onFocus","onBlur","onContextmenu"].forEach((n=>{var r;const a=o[n];a&&(e.addEventListener(n.slice(2).toLowerCase(),a),null==(r=null==t?void 0:t.removeEventListener)||r.call(t,n.slice(2).toLowerCase(),a))})),g=r([u,f,c,d],(t=>{["aria-controls","aria-describedby","aria-haspopup","aria-expanded"].forEach(((n,o)=>{oe(t[o])?e.removeAttribute(n):e.setAttribute(n,t[o])}))}),{immediate:!0})),j(t)&&["aria-controls","aria-describedby","aria-haspopup","aria-expanded"].forEach((e=>t.removeAttribute(e)))}),{immediate:!0})})),p((()=>{null==g||g(),g=void 0})),t({triggerRef:s}),(e,t)=>e.virtualTriggering?_("v-if",!0):(E(),D(v(Ce),I({key:0},e.$attrs,{"aria-controls":v(u),"aria-describedby":v(f),"aria-expanded":v(d),"aria-haspopup":v(c)}),{default:F((()=>[b(e.$slots,"default")])),_:3},16,["aria-controls","aria-describedby","aria-expanded","aria-haspopup"]))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/trigger.vue"]]),Me="top",Pe="bottom",je="right",De="left",Fe="auto",Ie=[Me,Pe,je,De],_e="start",He="end",Ne="viewport",We="popper",$e=Ie.reduce((function(e,t){return e.concat([t+"-"+_e,t+"-"+He])}),[]),Ke=[].concat(Ie,[Fe]).reduce((function(e,t){return e.concat([t,t+"-"+_e,t+"-"+He])}),[]),qe=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function ze(e){return e?(e.nodeName||"").toLowerCase():null}function Ve(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Ue(e){return e instanceof Ve(e).Element||e instanceof Element}function Xe(e){return e instanceof Ve(e).HTMLElement||e instanceof HTMLElement}function Ye(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Ve(e).ShadowRoot||e instanceof ShadowRoot)}var Ge={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},o=t.attributes[e]||{},r=t.elements[e];!Xe(r)||!ze(r)||(Object.assign(r.style,n),Object.keys(o).forEach((function(e){var t=o[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var o=t.elements[e],r=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});!Xe(o)||!ze(o)||(Object.assign(o.style,a),Object.keys(r).forEach((function(e){o.removeAttribute(e)})))}))}},requires:["computeStyles"]};function Je(e){return e.split("-")[0]}var Qe=Math.max,Ze=Math.min,et=Math.round;function tt(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),o=1,r=1;if(Xe(e)&&t){var a=e.offsetHeight,i=e.offsetWidth;i>0&&(o=et(n.width)/i||1),a>0&&(r=et(n.height)/a||1)}return{width:n.width/o,height:n.height/r,top:n.top/r,right:n.right/o,bottom:n.bottom/r,left:n.left/o,x:n.left/o,y:n.top/r}}function nt(e){var t=tt(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}function ot(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&Ye(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}function rt(e){return Ve(e).getComputedStyle(e)}function at(e){return["table","td","th"].indexOf(ze(e))>=0}function it(e){return((Ue(e)?e.ownerDocument:e.document)||window.document).documentElement}function st(e){return"html"===ze(e)?e:e.assignedSlot||e.parentNode||(Ye(e)?e.host:null)||it(e)}function lt(e){return Xe(e)&&"fixed"!==rt(e).position?e.offsetParent:null}function ut(e){for(var t=Ve(e),n=lt(e);n&&at(n)&&"static"===rt(n).position;)n=lt(n);return n&&("html"===ze(n)||"body"===ze(n)&&"static"===rt(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&Xe(e)&&"fixed"===rt(e).position)return null;var n=st(e);for(Ye(n)&&(n=n.host);Xe(n)&&["html","body"].indexOf(ze(n))<0;){var o=rt(n);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return n;n=n.parentNode}return null}(e)||t}function pt(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function ft(e,t,n){return Qe(e,Ze(t,n))}function ct(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function dt(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}var vt={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,o=e.name,r=e.options,a=n.elements.arrow,i=n.modifiersData.popperOffsets,s=Je(n.placement),l=pt(s),u=[De,je].indexOf(s)>=0?"height":"width";if(a&&i){var p=function(e,t){return ct("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:dt(e,Ie))}(r.padding,n),f=nt(a),c="y"===l?Me:De,d="y"===l?Pe:je,v=n.rects.reference[u]+n.rects.reference[l]-i[l]-n.rects.popper[u],m=i[l]-n.rects.reference[l],g=ut(a),h=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,y=v/2-m/2,b=p[c],w=h-f[u]-p[d],x=h/2-f[u]/2+y,E=ft(b,x,w),O=l;n.modifiersData[o]=((t={})[O]=E,t.centerOffset=E-x,t)}},effect:function(e){var t=e.state,n=e.options.element,o=void 0===n?"[data-popper-arrow]":n;null!=o&&("string"==typeof o&&!(o=t.elements.popper.querySelector(o))||!ot(t.elements.popper,o)||(t.elements.arrow=o))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function mt(e){return e.split("-")[1]}var gt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ht(e){var t,n=e.popper,o=e.popperRect,r=e.placement,a=e.variation,i=e.offsets,s=e.position,l=e.gpuAcceleration,u=e.adaptive,p=e.roundOffsets,f=e.isFixed,c=i.x,d=void 0===c?0:c,v=i.y,m=void 0===v?0:v,g="function"==typeof p?p({x:d,y:m}):{x:d,y:m};d=g.x,m=g.y;var h=i.hasOwnProperty("x"),y=i.hasOwnProperty("y"),b=De,w=Me,x=window;if(u){var E=ut(n),O="clientHeight",A="clientWidth";if(E===Ve(n)&&("static"!==rt(E=it(n)).position&&"absolute"===s&&(O="scrollHeight",A="scrollWidth")),r===Me||(r===De||r===je)&&a===He)w=Pe,m-=(f&&E===x&&x.visualViewport?x.visualViewport.height:E[O])-o.height,m*=l?1:-1;if(r===De||(r===Me||r===Pe)&&a===He)b=je,d-=(f&&E===x&&x.visualViewport?x.visualViewport.width:E[A])-o.width,d*=l?1:-1}var T,k=Object.assign({position:s},u&&gt),C=!0===p?function(e){var t=e.x,n=e.y,o=window.devicePixelRatio||1;return{x:et(t*o)/o||0,y:et(n*o)/o||0}}({x:d,y:m}):{x:d,y:m};return d=C.x,m=C.y,l?Object.assign({},k,((T={})[w]=y?"0":"",T[b]=h?"0":"",T.transform=(x.devicePixelRatio||1)<=1?"translate("+d+"px, "+m+"px)":"translate3d("+d+"px, "+m+"px, 0)",T)):Object.assign({},k,((t={})[w]=y?m+"px":"",t[b]=h?d+"px":"",t.transform="",t))}var yt={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,o=n.gpuAcceleration,r=void 0===o||o,a=n.adaptive,i=void 0===a||a,s=n.roundOffsets,l=void 0===s||s,u={placement:Je(t.placement),variation:mt(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ht(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ht(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},bt={passive:!0};var wt={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,o=e.options,r=o.scroll,a=void 0===r||r,i=o.resize,s=void 0===i||i,l=Ve(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&u.forEach((function(e){e.addEventListener("scroll",n.update,bt)})),s&&l.addEventListener("resize",n.update,bt),function(){a&&u.forEach((function(e){e.removeEventListener("scroll",n.update,bt)})),s&&l.removeEventListener("resize",n.update,bt)}},data:{}},xt={left:"right",right:"left",bottom:"top",top:"bottom"};function Et(e){return e.replace(/left|right|bottom|top/g,(function(e){return xt[e]}))}var Ot={start:"end",end:"start"};function At(e){return e.replace(/start|end/g,(function(e){return Ot[e]}))}function Tt(e){var t=Ve(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function kt(e){return tt(it(e)).left+Tt(e).scrollLeft}function Ct(e){var t=rt(e),n=t.overflow,o=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+o)}function Rt(e){return["html","body","#document"].indexOf(ze(e))>=0?e.ownerDocument.body:Xe(e)&&Ct(e)?e:Rt(st(e))}function St(e,t){var n;void 0===t&&(t=[]);var o=Rt(e),r=o===(null==(n=e.ownerDocument)?void 0:n.body),a=Ve(o),i=r?[a].concat(a.visualViewport||[],Ct(o)?o:[]):o,s=t.concat(i);return r?s:s.concat(St(st(i)))}function Lt(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Bt(e,t){return t===Ne?Lt(function(e){var t=Ve(e),n=it(e),o=t.visualViewport,r=n.clientWidth,a=n.clientHeight,i=0,s=0;return o&&(r=o.width,a=o.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(i=o.offsetLeft,s=o.offsetTop)),{width:r,height:a,x:i+kt(e),y:s}}(e)):Ue(t)?function(e){var t=tt(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):Lt(function(e){var t,n=it(e),o=Tt(e),r=null==(t=e.ownerDocument)?void 0:t.body,a=Qe(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),i=Qe(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),s=-o.scrollLeft+kt(e),l=-o.scrollTop;return"rtl"===rt(r||n).direction&&(s+=Qe(n.clientWidth,r?r.clientWidth:0)-a),{width:a,height:i,x:s,y:l}}(it(e)))}function Mt(e,t,n){var o="clippingParents"===t?function(e){var t=St(st(e)),n=["absolute","fixed"].indexOf(rt(e).position)>=0&&Xe(e)?ut(e):e;return Ue(n)?t.filter((function(e){return Ue(e)&&ot(e,n)&&"body"!==ze(e)})):[]}(e):[].concat(t),r=[].concat(o,[n]),a=r[0],i=r.reduce((function(t,n){var o=Bt(e,n);return t.top=Qe(o.top,t.top),t.right=Ze(o.right,t.right),t.bottom=Ze(o.bottom,t.bottom),t.left=Qe(o.left,t.left),t}),Bt(e,a));return i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}function Pt(e){var t,n=e.reference,o=e.element,r=e.placement,a=r?Je(r):null,i=r?mt(r):null,s=n.x+n.width/2-o.width/2,l=n.y+n.height/2-o.height/2;switch(a){case Me:t={x:s,y:n.y-o.height};break;case Pe:t={x:s,y:n.y+n.height};break;case je:t={x:n.x+n.width,y:l};break;case De:t={x:n.x-o.width,y:l};break;default:t={x:n.x,y:n.y}}var u=a?pt(a):null;if(null!=u){var p="y"===u?"height":"width";switch(i){case _e:t[u]=t[u]-(n[p]/2-o[p]/2);break;case He:t[u]=t[u]+(n[p]/2-o[p]/2)}}return t}function jt(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=void 0===o?e.placement:o,a=n.boundary,i=void 0===a?"clippingParents":a,s=n.rootBoundary,l=void 0===s?Ne:s,u=n.elementContext,p=void 0===u?We:u,f=n.altBoundary,c=void 0!==f&&f,d=n.padding,v=void 0===d?0:d,m=ct("number"!=typeof v?v:dt(v,Ie)),g=p===We?"reference":We,h=e.rects.popper,y=e.elements[c?g:p],b=Mt(Ue(y)?y:y.contextElement||it(e.elements.popper),i,l),w=tt(e.elements.reference),x=Pt({reference:w,element:h,strategy:"absolute",placement:r}),E=Lt(Object.assign({},h,x)),O=p===We?E:w,A={top:b.top-O.top+m.top,bottom:O.bottom-b.bottom+m.bottom,left:b.left-O.left+m.left,right:O.right-b.right+m.right},T=e.modifiersData.offset;if(p===We&&T){var k=T[r];Object.keys(A).forEach((function(e){var t=[je,Pe].indexOf(e)>=0?1:-1,n=[Me,Pe].indexOf(e)>=0?"y":"x";A[e]+=k[n]*t}))}return A}var Dt={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name;if(!t.modifiersData[o]._skip){for(var r=n.mainAxis,a=void 0===r||r,i=n.altAxis,s=void 0===i||i,l=n.fallbackPlacements,u=n.padding,p=n.boundary,f=n.rootBoundary,c=n.altBoundary,d=n.flipVariations,v=void 0===d||d,m=n.allowedAutoPlacements,g=t.options.placement,h=Je(g),y=l||(h===g||!v?[Et(g)]:function(e){if(Je(e)===Fe)return[];var t=Et(e);return[At(e),t,At(t)]}(g)),b=[g].concat(y).reduce((function(e,n){return e.concat(Je(n)===Fe?function(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=n.boundary,a=n.rootBoundary,i=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?Ke:l,p=mt(o),f=p?s?$e:$e.filter((function(e){return mt(e)===p})):Ie,c=f.filter((function(e){return u.indexOf(e)>=0}));0===c.length&&(c=f);var d=c.reduce((function(t,n){return t[n]=jt(e,{placement:n,boundary:r,rootBoundary:a,padding:i})[Je(n)],t}),{});return Object.keys(d).sort((function(e,t){return d[e]-d[t]}))}(t,{placement:n,boundary:p,rootBoundary:f,padding:u,flipVariations:v,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,x=t.rects.popper,E=new Map,O=!0,A=b[0],T=0;T<b.length;T++){var k=b[T],C=Je(k),R=mt(k)===_e,S=[Me,Pe].indexOf(C)>=0,L=S?"width":"height",B=jt(t,{placement:k,boundary:p,rootBoundary:f,altBoundary:c,padding:u}),M=S?R?je:De:R?Pe:Me;w[L]>x[L]&&(M=Et(M));var P=Et(M),j=[];if(a&&j.push(B[C]<=0),s&&j.push(B[M]<=0,B[P]<=0),j.every((function(e){return e}))){A=k,O=!1;break}E.set(k,j)}if(O)for(var D=function(e){var t=b.find((function(t){var n=E.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return A=t,"break"},F=v?3:1;F>0;F--){if("break"===D(F))break}t.placement!==A&&(t.modifiersData[o]._skip=!0,t.placement=A,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function Ft(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function It(e){return[Me,je,Pe,De].some((function(t){return e[t]>=0}))}var _t={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,o=t.rects.reference,r=t.rects.popper,a=t.modifiersData.preventOverflow,i=jt(t,{elementContext:"reference"}),s=jt(t,{altBoundary:!0}),l=Ft(i,o),u=Ft(s,r,a),p=It(l),f=It(u);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:u,isReferenceHidden:p,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":p,"data-popper-escaped":f})}};var Ht={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.offset,a=void 0===r?[0,0]:r,i=Ke.reduce((function(e,n){return e[n]=function(e,t,n){var o=Je(e),r=[De,Me].indexOf(o)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,i=a[0],s=a[1];return i=i||0,s=(s||0)*r,[De,je].indexOf(o)>=0?{x:s,y:i}:{x:i,y:s}}(n,t.rects,a),e}),{}),s=i[t.placement],l=s.x,u=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=u),t.modifiersData[o]=i}};var Nt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Pt({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var Wt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.mainAxis,a=void 0===r||r,i=n.altAxis,s=void 0!==i&&i,l=n.boundary,u=n.rootBoundary,p=n.altBoundary,f=n.padding,c=n.tether,d=void 0===c||c,v=n.tetherOffset,m=void 0===v?0:v,g=jt(t,{boundary:l,rootBoundary:u,padding:f,altBoundary:p}),h=Je(t.placement),y=mt(t.placement),b=!y,w=pt(h),x=function(e){return"x"===e?"y":"x"}(w),E=t.modifiersData.popperOffsets,O=t.rects.reference,A=t.rects.popper,T="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,k="number"==typeof T?{mainAxis:T,altAxis:T}:Object.assign({mainAxis:0,altAxis:0},T),C=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,R={x:0,y:0};if(E){if(a){var S,L="y"===w?Me:De,B="y"===w?Pe:je,M="y"===w?"height":"width",P=E[w],j=P+g[L],D=P-g[B],F=d?-A[M]/2:0,I=y===_e?O[M]:A[M],_=y===_e?-A[M]:-O[M],H=t.elements.arrow,N=d&&H?nt(H):{width:0,height:0},W=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},$=W[L],K=W[B],q=ft(0,O[M],N[M]),z=b?O[M]/2-F-q-$-k.mainAxis:I-q-$-k.mainAxis,V=b?-O[M]/2+F+q+K+k.mainAxis:_+q+K+k.mainAxis,U=t.elements.arrow&&ut(t.elements.arrow),X=U?"y"===w?U.clientTop||0:U.clientLeft||0:0,Y=null!=(S=null==C?void 0:C[w])?S:0,G=P+V-Y,J=ft(d?Ze(j,P+z-Y-X):j,P,d?Qe(D,G):D);E[w]=J,R[w]=J-P}if(s){var Q,Z="x"===w?Me:De,ee="x"===w?Pe:je,te=E[x],ne="y"===x?"height":"width",oe=te+g[Z],re=te-g[ee],ae=-1!==[Me,De].indexOf(h),ie=null!=(Q=null==C?void 0:C[x])?Q:0,se=ae?oe:te-O[ne]-A[ne]-ie+k.altAxis,le=ae?te+O[ne]+A[ne]-ie-k.altAxis:re,ue=d&&ae?function(e,t,n){var o=ft(e,t,n);return o>n?n:o}(se,te,le):ft(d?se:oe,te,d?le:re);E[x]=ue,R[x]=ue-te}t.modifiersData[o]=R}},requiresIfExists:["offset"]};function $t(e,t,n){void 0===n&&(n=!1);var o=Xe(t),r=Xe(t)&&function(e){var t=e.getBoundingClientRect(),n=et(t.width)/e.offsetWidth||1,o=et(t.height)/e.offsetHeight||1;return 1!==n||1!==o}(t),a=it(t),i=tt(e,r),s={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(o||!o&&!n)&&(("body"!==ze(t)||Ct(a))&&(s=function(e){return e!==Ve(e)&&Xe(e)?function(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}(e):Tt(e)}(t)),Xe(t)?((l=tt(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):a&&(l.x=kt(a))),{x:i.left+s.scrollLeft-l.x,y:i.top+s.scrollTop-l.y,width:i.width,height:i.height}}function Kt(e){var t=new Map,n=new Set,o=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var o=t.get(e);o&&r(o)}})),o.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),o}function qt(e){var t;return function(){return t||(t=new Promise((function(n){Promise.resolve().then((function(){t=void 0,n(e())}))}))),t}}var zt={placement:"bottom",modifiers:[],strategy:"absolute"};function Vt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Ut(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,o=void 0===n?[]:n,r=t.defaultOptions,a=void 0===r?zt:r;return function(e,t,n){void 0===n&&(n=a);var r={placement:"bottom",orderedModifiers:[],options:Object.assign({},zt,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},i=[],s=!1,l={state:r,setOptions:function(n){var s="function"==typeof n?n(r.options):n;u(),r.options=Object.assign({},a,r.options,s),r.scrollParents={reference:Ue(e)?St(e):e.contextElement?St(e.contextElement):[],popper:St(t)};var p=function(e){var t=Kt(e);return qe.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}(function(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(o,r.options.modifiers)));return r.orderedModifiers=p.filter((function(e){return e.enabled})),r.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,o=void 0===n?{}:n,a=e.effect;if("function"==typeof a){var s=a({state:r,name:t,instance:l,options:o}),u=function(){};i.push(s||u)}})),l.update()},forceUpdate:function(){if(!s){var e=r.elements,t=e.reference,n=e.popper;if(Vt(t,n)){r.rects={reference:$t(t,ut(n),"fixed"===r.options.strategy),popper:nt(n)},r.reset=!1,r.placement=r.options.placement,r.orderedModifiers.forEach((function(e){return r.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<r.orderedModifiers.length;o++)if(!0!==r.reset){var a=r.orderedModifiers[o],i=a.fn,u=a.options,p=void 0===u?{}:u,f=a.name;"function"==typeof i&&(r=i({state:r,options:p,name:f,instance:l})||r)}else r.reset=!1,o=-1}}},update:qt((function(){return new Promise((function(e){l.forceUpdate(),e(r)}))})),destroy:function(){u(),s=!0}};if(!Vt(e,t))return l;function u(){i.forEach((function(e){return e()})),i=[]}return l.setOptions(n).then((function(e){!s&&n.onFirstUpdate&&n.onFirstUpdate(e)})),l}}Ut(),Ut({defaultModifiers:[wt,Nt,yt,Ge]});var Xt=Ut({defaultModifiers:[wt,Nt,yt,Ge,Ht,Dt,Wt,vt,_t]});const Yt=e=>{const t=[],n=document.createTreeWalker(e,NodeFilter.SHOW_ELEMENT,{acceptNode:e=>{const t="INPUT"===e.tagName&&"hidden"===e.type;return e.disabled||e.hidden||t?NodeFilter.FILTER_SKIP:e.tabIndex>=0||e===document.activeElement?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_SKIP}});for(;n.nextNode();)t.push(n.currentNode);return t},Gt=(e,t)=>{for(const n of e)if(!Jt(n,t))return n},Jt=(e,t)=>{if("hidden"===getComputedStyle(e).visibility)return!0;for(;e;){if(t&&e===t)return!1;if("none"===getComputedStyle(e).display)return!0;e=e.parentElement}return!1},Qt=(e,t)=>{if(e&&e.focus){const n=document.activeElement;e.focus({preventScroll:!0}),e!==n&&(e=>e instanceof HTMLInputElement&&"select"in e)(e)&&t&&e.select()}};function Zt(e,t){const n=[...e],o=e.indexOf(t);return-1!==o&&n.splice(o,1),n}const en=(()=>{let e=[];return{push:t=>{const n=e[0];n&&t!==n&&n.pause(),e=Zt(e,t),e.unshift(t)},remove:t=>{var n,o;e=Zt(e,t),null==(o=null==(n=e[0])?void 0:n.resume)||o.call(n)}}})(),tn={cancelable:!0,bubbles:!1},nn=Symbol("elFocusTrap");var on=g(h({name:"ElFocusTrap",inheritAttrs:!1,props:{loop:Boolean,trapped:Boolean,focusTrapEl:Object,focusStartEl:{type:[Object,String],default:"first"}},emits:["focusAfterTrapped","focusAfterReleased","focusin","focusout","focusout-prevented","release-requested"],setup(e,{emit:t}){const n=y();let o,i;(e=>{const t=e=>{const t=e;t.key===f.esc&&ve.forEach((e=>e(t)))};a((()=>{0===ve.length&&document.addEventListener("keydown",t),s&&ve.push(e)})),p((()=>{ve=ve.filter((t=>t!==e)),0===ve.length&&s&&document.removeEventListener("keydown",t)}))})((n=>{e.trapped&&!l.paused&&t("release-requested",n)}));const l={paused:!1,pause(){this.paused=!0},resume(){this.paused=!1}},u=n=>{if(!e.loop&&!e.trapped)return;if(l.paused)return;const{key:o,altKey:r,ctrlKey:a,metaKey:i,currentTarget:s,shiftKey:u}=n,{loop:p}=e,c=o===f.tab&&!r&&!a&&!i,d=document.activeElement;if(c&&d){const e=s,[o,r]=(e=>{const t=Yt(e);return[Gt(t,e),Gt(t.reverse(),e)]})(e);o&&r?u||d!==r?u&&[o,e].includes(d)&&(n.preventDefault(),p&&Qt(r,!0),t("focusout-prevented")):(n.preventDefault(),p&&Qt(o,!0),t("focusout-prevented")):d===e&&(n.preventDefault(),t("focusout-prevented"))}};m(nn,{focusTrapRef:n,onKeydown:u}),r((()=>e.focusTrapEl),(e=>{e&&(n.value=e)}),{immediate:!0}),r([n],(([e],[t])=>{e&&(e.addEventListener("keydown",u),e.addEventListener("focusin",g),e.addEventListener("focusout",h)),t&&(t.removeEventListener("keydown",u),t.removeEventListener("focusin",g),t.removeEventListener("focusout",h))}));const c=e=>{t("focusAfterTrapped",e)},d=e=>t("focusAfterReleased",e),g=o=>{const r=v(n);if(!r)return;const a=o.target,s=a&&r.contains(a);s&&t("focusin",o),l.paused||e.trapped&&(s?i=a:Qt(i,!0))},h=o=>{const r=v(n);if(!l.paused&&r)if(e.trapped){const t=o.relatedTarget;oe(t)||r.contains(t)||setTimeout((()=>{!l.paused&&e.trapped&&Qt(i,!0)}),0)}else{const e=o.target;e&&r.contains(e)||t("focusout",o)}};async function b(){await H();const t=v(n);if(t){en.push(l);const n=document.activeElement;o=n;if(!t.contains(n)){const o=new Event("focus-trap.focus-after-trapped",tn);t.addEventListener("focus-trap.focus-after-trapped",c),t.dispatchEvent(o),o.defaultPrevented||H((()=>{let o=e.focusStartEl;N(o)||(Qt(o),document.activeElement!==o&&(o="first")),"first"===o&&((e,t=!1)=>{const n=document.activeElement;for(const o of e)if(Qt(o,t),document.activeElement!==n)return})(Yt(t),!0),document.activeElement!==n&&"container"!==o||Qt(t)}))}}}function w(){const e=v(n);if(e){e.removeEventListener("focus-trap.focus-after-trapped",c);const t=new Event("focus-trap.focus-after-released",tn);e.addEventListener("focus-trap.focus-after-released",d),e.dispatchEvent(t),t.defaultPrevented||Qt(null!=o?o:document.body,!0),e.removeEventListener("focus-trap.focus-after-released",c),en.remove(l)}}return a((()=>{e.trapped&&b(),r((()=>e.trapped),(e=>{e?b():w()}))})),p((()=>{e.trapped&&w()})),{onKeydown:u}}}),[["render",function(e,t,n,o,r,a){return b(e.$slots,"default",{handleKeydown:e.onKeydown})}],["__file","/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue"]]);const rn=d({boundariesPadding:{type:Number,default:0},fallbackPlacements:{type:t(Array),default:()=>[]},gpuAcceleration:{type:Boolean,default:!0},offset:{type:Number,default:12},placement:{type:String,values:Ke,default:"bottom"},popperOptions:{type:t(Object),default:()=>({})},strategy:{type:String,values:["fixed","absolute"],default:"absolute"}}),an=d({...rn,id:String,style:{type:t([String,Array,Object])},className:{type:t([String,Array,Object])},effect:{type:String,default:"dark"},visible:Boolean,enterable:{type:Boolean,default:!0},pure:Boolean,focusOnShow:{type:Boolean,default:!1},trapping:{type:Boolean,default:!1},popperClass:{type:t([String,Array,Object])},popperStyle:{type:t([String,Array,Object])},referenceEl:{type:t(Object)},triggerTargetEl:{type:t(Object)},stopPopperMouseEvent:{type:Boolean,default:!0},ariaLabel:{type:String,default:void 0},virtualTriggering:Boolean,zIndex:Number}),sn=(e,t)=>{const{placement:n,strategy:o,popperOptions:r}=e,a={placement:n,strategy:o,...r,modifiers:ln(e)};return function(e,{arrowEl:t,arrowOffset:n}){e.modifiers.push({name:"arrow",options:{element:t,padding:null!=n?n:5}})}(a,t),function(e,t){t&&(e.modifiers=[...e.modifiers,...null!=t?t:[]])}(a,null==r?void 0:r.modifiers),a};function ln(e){const{offset:t,gpuAcceleration:n,fallbackPlacements:o}=e;return[{name:"offset",options:{offset:[0,null!=t?t:12]}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5,fallbackPlacements:null!=o?o:[]}},{name:"computeStyles",options:{gpuAcceleration:n,adaptive:n}}]}var un=g(h({name:"ElPopperContent",props:an,emits:["mouseenter","mouseleave","focus","blur","close"],setup(e,{expose:t,emit:o}){const i=e,{popperInstanceRef:l,contentRef:u,triggerRef:f,role:c}=x(pe,void 0),d=x(W,void 0),{nextZIndex:g}=$(),h=w("popper"),k=y(),C=y("first"),R=y(),S=y();m(fe,{arrowRef:R,arrowOffset:S}),d&&(d.addInputId||d.removeInputId)&&m(W,{...d,addInputId:T,removeInputId:T});const L=y(i.zIndex||g()),B=y(!1);let D;const I=n((()=>(e=>{if(s)return P(e)})(i.referenceEl)||v(f))),_=n((()=>[{zIndex:v(L)},i.popperStyle])),H=n((()=>[h.b(),h.is("pure",i.pure),h.is(i.effect),i.popperClass])),N=n((()=>c&&"dialog"===c.value?"false":void 0)),z=(e=!0)=>{var t;null==(t=v(l))||t.update(),e&&(L.value=i.zIndex||g())},V=()=>{var e,t;const n={name:"eventListeners",enabled:i.visible};null==(t=null==(e=v(l))?void 0:e.setOptions)||t.call(e,(e=>({...e,modifiers:[...e.modifiers||[],n]}))),z(!1),i.visible&&i.focusOnShow?B.value=!0:!1===i.visible&&(B.value=!1)},U=()=>{o("focus")},X=()=>{C.value="first",o("blur")},Y=e=>{var t;i.visible&&!B.value&&(e.relatedTarget&&(null==(t=e.relatedTarget)||t.focus()),e.target&&(C.value=e.target),B.value=!0)},G=()=>{i.trapping||(B.value=!1)},J=()=>{B.value=!1,o("close")};return a((()=>{let e;r(I,(t=>{var n;null==e||e();const o=v(l);if(null==(n=null==o?void 0:o.destroy)||n.call(o),t){const n=v(k);u.value=n,l.value=(({referenceEl:e,popperContentEl:t,arrowEl:n})=>{const o=sn(i,{arrowEl:n,arrowOffset:v(S)});return Xt(e,t,o)})({referenceEl:t,popperContentEl:n,arrowEl:v(R)}),e=r((()=>t.getBoundingClientRect()),(()=>z()),{immediate:!0})}else l.value=void 0}),{immediate:!0}),r((()=>i.triggerTargetEl),((e,t)=>{null==D||D(),D=void 0;const n=v(e||k.value),o=v(t||k.value);if(j(n)){const{ariaLabel:e,id:t}=K(i);D=r([c,e,N,t],(e=>{["role","aria-label","aria-modal","id"].forEach(((t,o)=>{oe(e[o])?n.removeAttribute(t):n.setAttribute(t,e[o])}))}),{immediate:!0})}j(o)&&["role","aria-label","aria-modal","id"].forEach((e=>{o.removeAttribute(e)}))}),{immediate:!0}),r((()=>i.visible),V,{immediate:!0}),r((()=>sn(i,{arrowEl:v(R),arrowOffset:v(S)})),(e=>{var t;return null==(t=l.value)?void 0:t.setOptions(e)}))})),p((()=>{null==D||D(),D=void 0})),t({popperContentRef:k,popperInstanceRef:l,updatePopper:z,contentStyle:_}),(e,t)=>(E(),O("div",{ref_key:"popperContentRef",ref:k,style:q(v(_)),class:A(v(H)),tabindex:"-1",onMouseenter:t[0]||(t[0]=t=>e.$emit("mouseenter",t)),onMouseleave:t[1]||(t[1]=t=>e.$emit("mouseleave",t))},[M(v(on),{trapped:B.value,"trap-on-focus-in":!0,"focus-trap-el":k.value,"focus-start-el":C.value,onFocusAfterTrapped:U,onFocusAfterReleased:X,onFocusin:Y,onFocusoutPrevented:G,onReleaseRequested:J},{default:F((()=>[b(e.$slots,"default")])),_:3},8,["trapped","focus-trap-el","focus-start-el"])],38))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue"]]);const pn=z(Ae),fn=w("tooltip"),cn=d({...be,...an,appendTo:{type:t([String,Object]),default:he},content:{type:String,default:""},rawContent:{type:Boolean,default:!1},persistent:Boolean,ariaLabel:String,visible:{type:t(Boolean),default:null},transition:{type:String,default:`${fn.namespace.value}-fade-in-linear`},teleported:{type:Boolean,default:!0},disabled:{type:Boolean}}),dn=d({...Le,disabled:Boolean,trigger:{type:t([String,Array]),default:"hover"},triggerKeys:{type:t(Array),default:()=>[f.enter,f.space]}}),vn=d({openDelay:{type:Number},visibleArrow:{type:Boolean,default:void 0},hideAfter:{type:Number,default:200},showArrow:{type:Boolean,default:!0}}),mn=Symbol("elTooltip");var gn=g(h({name:"ElTooltipContent",components:{ElPopperContent:un},inheritAttrs:!1,props:cn,setup(e){const t=y(null),o=y(!1),a=y(!1),i=y(!1),s=y(!1),{controlled:l,id:u,open:f,trigger:c,onClose:d,onOpen:m,onShow:g,onHide:h,onBeforeShow:b,onBeforeHide:w}=x(mn,void 0),E=n((()=>e.persistent));p((()=>{s.value=!0}));const O=n((()=>!!v(E)||v(f))),A=n((()=>!e.disabled&&v(f))),T=n((()=>{var t;return null!=(t=e.style)?t:{}})),k=n((()=>!v(f))),C=()=>{if(v(l))return!0},R=se(C,(()=>{e.enterable&&"hover"===v(c)&&m()})),S=se(C,(()=>{"hover"===v(c)&&d()}));let L;return r((()=>v(f)),(e=>{e||null==L||L()}),{flush:"post"}),{ariaHidden:k,entering:a,leaving:i,id:u,intermediateOpen:o,contentStyle:T,contentRef:t,destroyed:s,shouldRender:O,shouldShow:A,onClose:d,open:f,onAfterShow:()=>{g(),L=V(n((()=>{var e;return null==(e=t.value)?void 0:e.popperContentRef})),(()=>{if(v(l))return;"hover"!==v(c)&&d()}))},onBeforeEnter:()=>{var e,n;null==(n=null==(e=t.value)?void 0:e.updatePopper)||n.call(e),null==b||b()},onBeforeLeave:()=>{null==w||w()},onContentEnter:R,onContentLeave:S,onTransitionLeave:()=>{h()},onBlur:()=>{e.virtualTriggering||d()}}}}),[["render",function(e,t,n,o,r,a){const i=U("el-popper-content");return E(),D(G,{disabled:!e.teleported,to:e.appendTo},[M(Y,{name:e.transition,onAfterLeave:e.onTransitionLeave,onBeforeEnter:e.onBeforeEnter,onAfterEnter:e.onAfterShow,onBeforeLeave:e.onBeforeLeave},{default:F((()=>[e.shouldRender?k((E(),D(i,I({key:0,id:e.id,ref:"contentRef"},e.$attrs,{"aria-label":e.ariaLabel,"aria-hidden":e.ariaHidden,"boundaries-padding":e.boundariesPadding,"fallback-placements":e.fallbackPlacements,"gpu-acceleration":e.gpuAcceleration,offset:e.offset,placement:e.placement,"popper-options":e.popperOptions,strategy:e.strategy,effect:e.effect,enterable:e.enterable,pure:e.pure,"popper-class":e.popperClass,"popper-style":[e.popperStyle,e.contentStyle],"reference-el":e.referenceEl,"trigger-target-el":e.triggerTargetEl,visible:e.shouldShow,"z-index":e.zIndex,onMouseenter:e.onContentEnter,onMouseleave:e.onContentLeave,onBlur:e.onBlur,onClose:e.onClose}),{default:F((()=>[_(" Workaround bug #6378 "),e.destroyed?_("v-if",!0):b(e.$slots,"default",{key:0})])),_:3},16,["id","aria-label","aria-hidden","boundaries-padding","fallback-placements","gpu-acceleration","offset","placement","popper-options","strategy","effect","enterable","pure","popper-class","popper-style","reference-el","trigger-target-el","visible","z-index","onMouseenter","onMouseleave","onBlur","onClose"])),[[X,e.shouldShow]]):_("v-if",!0)])),_:3},8,["name","onAfterLeave","onBeforeEnter","onAfterEnter","onBeforeLeave"])],8,["disabled","to"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue"]]);const hn=(e,t,n)=>o=>{((e,t)=>J(e)?e.includes(t):e===t)(v(e),t)&&n(o)};var yn=g(h({name:"ElTooltipTrigger",components:{ElPopperTrigger:Be},props:dn,setup(e){const t=w("tooltip"),{controlled:n,id:o,open:r,onOpen:a,onClose:i,onToggle:s}=x(mn,void 0),l=y(null),u=()=>{if(v(n)||e.disabled)return!0},p=Q(e,"trigger"),f=se(u,hn(p,"hover",a)),c=se(u,hn(p,"hover",i)),d=se(u,hn(p,"click",(e=>{0===e.button&&s(e)}))),m=se(u,hn(p,"focus",a));return{onBlur:se(u,hn(p,"focus",i)),onContextMenu:se(u,hn(p,"contextmenu",(e=>{e.preventDefault(),s(e)}))),onFocus:m,onMouseenter:f,onMouseleave:c,onClick:d,onKeydown:se(u,(t=>{const{code:n}=t;e.triggerKeys.includes(n)&&(t.preventDefault(),s(t))})),open:r,id:o,triggerRef:l,ns:t}}}),[["render",function(e,t,n,o,r,a){const i=U("el-popper-trigger");return E(),D(i,{id:e.id,"virtual-ref":e.virtualRef,open:e.open,"virtual-triggering":e.virtualTriggering,class:A(e.ns.e("trigger")),onBlur:e.onBlur,onClick:e.onClick,onContextmenu:e.onContextMenu,onFocus:e.onFocus,onMouseenter:e.onMouseenter,onMouseleave:e.onMouseleave,onKeydown:e.onKeydown},{default:F((()=>[b(e.$slots,"default")])),_:3},8,["id","virtual-ref","open","virtual-triggering","class","onBlur","onClick","onContextmenu","onFocus","onMouseenter","onMouseleave","onKeydown"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/trigger.vue"]]);const{useModelToggleProps:bn,useModelToggle:wn,useModelToggleEmits:xn}=(e=>{const t=`update:${e}`,u=`onUpdate:${e}`;return{useModelToggle:({indicator:p,toggleReason:f,shouldHideWhenRouteChanges:c,shouldProceed:d,onShow:v,onHide:m})=>{const g=i(),{emit:h}=g,y=g.props,b=n((()=>o(y[u]))),w=n((()=>null===y[e])),x=e=>{!0!==p.value&&(p.value=!0,f&&(f.value=e),o(v)&&v(e))},E=e=>{!1!==p.value&&(p.value=!1,f&&(f.value=e),o(m)&&m(e))},O=e=>{if(!0===y.disabled||o(d)&&!d())return;const n=b.value&&s;n&&h(t,!0),!w.value&&n||x(e)},A=e=>{if(!0===y.disabled||!s)return;const n=b.value&&s;n&&h(t,!1),!w.value&&n||E(e)},T=e=>{l(e)&&(y.disabled&&e?b.value&&h(t,!1):p.value!==e&&(e?x():E()))};return r((()=>y[e]),T),c&&void 0!==g.appContext.config.globalProperties.$route&&r((()=>({...g.proxy.$route})),(()=>{c.value&&p.value&&A()})),a((()=>{T(y[e])})),{hide:A,show:O,toggle:()=>{p.value?A():O()}}},useModelToggleProps:{[e]:ce,[u]:de},useModelToggleEmits:[t]}})("visible"),En=h({name:"ElTooltip",components:{ElPopper:pn,ElPopperArrow:ke,ElTooltipContent:gn,ElTooltipTrigger:yn},props:{...Oe,...bn,...cn,...dn,...Te,...vn},emits:[...xn,"before-show","before-hide","show","hide","open","close"],setup(e,{emit:t}){ye();const o=n((()=>(Z(e.openDelay),e.openDelay||e.showAfter))),a=n((()=>(Z(e.visibleArrow),l(e.visibleArrow)?e.visibleArrow:e.showArrow))),i=ne(),s=y(null),u=y(null),p=()=>{var e;const t=v(s);t&&(null==(e=t.popperInstanceRef)||e.update())},f=y(!1),c=y(void 0),{show:d,hide:g}=wn({indicator:f,toggleReason:c}),{onOpen:h,onClose:b}=we({showAfter:o,hideAfter:Q(e,"hideAfter"),open:d,close:g}),w=n((()=>l(e.visible)));m(mn,{controlled:w,id:i,open:ee(f),trigger:Q(e,"trigger"),onOpen:e=>{h(e)},onClose:e=>{b(e)},onToggle:e=>{v(f)?b(e):h(e)},onShow:()=>{t("show",c.value)},onHide:()=>{t("hide",c.value)},onBeforeShow:()=>{t("before-show",c.value)},onBeforeHide:()=>{t("before-hide",c.value)},updatePopper:p}),r((()=>e.disabled),(e=>{e&&f.value&&(f.value=!1)}));return{compatShowAfter:o,compatShowArrow:a,popperRef:s,contentRef:u,open:f,hide:g,isFocusInsideContent:()=>{var e,t;const n=null==(t=null==(e=u.value)?void 0:e.contentRef)?void 0:t.popperContentRef;return n&&n.contains(document.activeElement)},updatePopper:p,onOpen:h,onClose:b}}}),On=["innerHTML"],An={key:1};const Tn=z(g(En,[["render",function(e,t,n,o,r,a){const i=U("el-tooltip-trigger"),s=U("el-popper-arrow"),l=U("el-tooltip-content"),u=U("el-popper");return E(),D(u,{ref:"popperRef",role:e.role},{default:F((()=>[M(i,{disabled:e.disabled,trigger:e.trigger,"trigger-keys":e.triggerKeys,"virtual-ref":e.virtualRef,"virtual-triggering":e.virtualTriggering},{default:F((()=>[e.$slots.default?b(e.$slots,"default",{key:0}):_("v-if",!0)])),_:3},8,["disabled","trigger","trigger-keys","virtual-ref","virtual-triggering"]),M(l,{ref:"contentRef","aria-label":e.ariaLabel,"boundaries-padding":e.boundariesPadding,content:e.content,disabled:e.disabled,effect:e.effect,enterable:e.enterable,"fallback-placements":e.fallbackPlacements,"hide-after":e.hideAfter,"gpu-acceleration":e.gpuAcceleration,offset:e.offset,persistent:e.persistent,"popper-class":e.popperClass,"popper-style":e.popperStyle,placement:e.placement,"popper-options":e.popperOptions,pure:e.pure,"raw-content":e.rawContent,"reference-el":e.referenceEl,"trigger-target-el":e.triggerTargetEl,"show-after":e.compatShowAfter,strategy:e.strategy,teleported:e.teleported,transition:e.transition,"virtual-triggering":e.virtualTriggering,"z-index":e.zIndex,"append-to":e.appendTo},{default:F((()=>[b(e.$slots,"content",{},(()=>[e.rawContent?(E(),O("span",{key:0,innerHTML:e.content},null,8,On)):(E(),O("span",An,te(e.content),1))])),e.compatShowArrow?(E(),D(s,{key:0,"arrow-offset":e.arrowOffset},null,8,["arrow-offset"])):_("v-if",!0)])),_:3},8,["aria-label","boundaries-padding","content","disabled","effect","enterable","fallback-placements","hide-after","gpu-acceleration","offset","persistent","popper-class","popper-style","placement","popper-options","pure","raw-content","reference-el","trigger-target-el","show-after","strategy","teleported","transition","virtual-triggering","z-index","append-to"])])),_:3},8,["role"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue"]]));export{Tn as E,nn as F,Ce as O,mn as T,ae as a,dn as b,se as c,ie as d,on as e,Ee as f,ue as g,oe as i,re as o,cn as u,le as w,Xt as y};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
