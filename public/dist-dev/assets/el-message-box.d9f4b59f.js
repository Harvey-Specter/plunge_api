import{v as e,a8 as a,aa as n,au as o,d as t,a0 as s,ca as l,Y as r,r as i,bN as c,s as u,D as d,cb as p,aq as f,$ as m,b0 as v,aD as g,a9 as b,E as h,o as y,h as C,w as x,av as E,aQ as w,g as B,e as k,n as M,a4 as I,ac as T,c as S,as as _,at as R,t as A,a7 as P,a2 as j,x as z,i as V,P as $,V as O,bk as L,cc as D,aS as H,W as K,ay as q,aF as F}from"./index.1a68aef2.js";import{E as U}from"./el-button.a6b8d6fa.js";import{E as W}from"./el-input.b19e074f.js";import{E as N,u as Q,a as Y,b as Z}from"./el-overlay.ca865d5d.js";import{o as G}from"./aria2.b5095a02.js";import{o as J,a as X,e as ee}from"./el-popper.dbb2fbab.js";import{i as ae}from"./validator2.597f6af8.js";import{u as ne}from"./index2.246c69ad.js";import{u as oe}from"./index2.1b075999.js";const te=[],se=e=>{if(0===te.length)return;const a=te[te.length-1]["_trap-focus-children"];if(a.length>0&&e.code===o.tab){if(1===a.length)return e.preventDefault(),void(document.activeElement!==a[0]&&a[0].focus());const n=e.shiftKey,o=e.target===a[0],t=e.target===a[a.length-1];o&&n&&(e.preventDefault(),a[a.length-1].focus()),t&&!n&&(e.preventDefault(),a[0].focus())}},le=t({name:"ElMessageBox",directives:{TrapFocus:{beforeMount(e){e["_trap-focus-children"]=G(e),te.push(e),te.length<=1&&J(document,"keydown",se)},updated(e){n((()=>{e["_trap-focus-children"]=G(e)}))},unmounted(){te.shift(),0===te.length&&X(document,"keydown",se)}}},components:{ElButton:U,ElFocusTrap:ee,ElInput:W,ElOverlay:N,ElIcon:s,...l},inheritAttrs:!1,props:{buttonSize:{type:String,validator:ae},modal:{type:Boolean,default:!0},lockScroll:{type:Boolean,default:!0},showClose:{type:Boolean,default:!0},closeOnClickModal:{type:Boolean,default:!0},closeOnPressEscape:{type:Boolean,default:!0},closeOnHashChange:{type:Boolean,default:!0},center:Boolean,draggable:Boolean,roundButton:{default:!1,type:Boolean},container:{type:String,default:"body"},boxType:{type:String,default:""}},emits:["vanish","action"],setup(o,{emit:t}){const{t:s}=ne(),l=r("message-box"),b=i(!1),{nextZIndex:h}=c(),y=u({beforeClose:null,callback:null,cancelButtonText:"",cancelButtonClass:"",confirmButtonText:"",confirmButtonClass:"",customClass:"",customStyle:{},dangerouslyUseHTMLString:!1,distinguishCancelAndClose:!1,icon:"",inputPattern:null,inputPlaceholder:"",inputType:"text",inputValue:null,inputValidator:null,inputErrorMessage:"",message:null,modalFade:!0,modalClass:"",showCancelButton:!1,showConfirmButton:!0,type:"",title:void 0,showInput:!1,action:"",confirmButtonLoading:!1,cancelButtonLoading:!1,confirmButtonDisabled:!1,editorErrorMessage:"",validateError:!1,zIndex:h()}),C=d((()=>{const e=y.type;return{[l.bm("icon",e)]:e&&p[e]}})),x=oe(),E=oe(),w=f(d((()=>o.buttonSize)),{prop:!0,form:!0,formItem:!0}),B=d((()=>y.icon||p[y.type]||"")),k=d((()=>!!y.message)),M=i(),I=i(),T=i(),S=i(),_=i(),R=d((()=>y.confirmButtonClass));e((()=>y.inputValue),(async e=>{await n(),"prompt"===o.boxType&&null!==e&&$()}),{immediate:!0}),e((()=>b.value),(e=>{var a,t;e&&("alert"!==o.boxType&&"confirm"!==o.boxType||(T.value=null!=(t=null==(a=_.value)?void 0:a.$el)?t:M.value),y.zIndex=h()),"prompt"===o.boxType&&(e?n().then((()=>{var e;S.value&&S.value.$el&&(T.value=null!=(e=O())?e:M.value)})):(y.editorErrorMessage="",y.validateError=!1))}));const A=d((()=>o.draggable));function P(){b.value&&(b.value=!1,n((()=>{y.action&&t("action",y.action)})))}Q(M,I,A),m((async()=>{await n(),o.closeOnHashChange&&J(window,"hashchange",P)})),v((()=>{o.closeOnHashChange&&X(window,"hashchange",P)}));const j=()=>{o.closeOnClickModal&&V(y.distinguishCancelAndClose?"close":"cancel")},z=Z(j),V=e=>{var a;("prompt"!==o.boxType||"confirm"!==e||$())&&(y.action=e,y.beforeClose?null==(a=y.beforeClose)||a.call(y,e,y,P):P())},$=()=>{if("prompt"===o.boxType){const e=y.inputPattern;if(e&&!e.test(y.inputValue||""))return y.editorErrorMessage=y.inputErrorMessage||s("el.messagebox.error"),y.validateError=!0,!1;const a=y.inputValidator;if("function"==typeof a){const e=a(y.inputValue);if(!1===e)return y.editorErrorMessage=y.inputErrorMessage||s("el.messagebox.error"),y.validateError=!0,!1;if("string"==typeof e)return y.editorErrorMessage=e,y.validateError=!0,!1}}return y.editorErrorMessage="",y.validateError=!1,!0},O=()=>{const e=S.value.$refs;return e.input||e.textarea},L=()=>{V("close")};return o.lockScroll&&Y(b),((n,o)=>{let t;e((()=>n.value),(e=>{var n,s;e?(t=document.activeElement,a(o)&&(null==(s=(n=o.value).focus)||s.call(n))):t.focus()}))})(b),{...g(y),ns:l,overlayEvent:z,visible:b,hasMessage:k,typeClass:C,contentId:x,inputId:E,btnSize:w,iconComponent:B,confirmButtonClasses:R,rootRef:M,focusStartRef:T,headerRef:I,inputRef:S,confirmRef:_,doClose:P,handleClose:L,onCloseRequested:()=>{o.closeOnPressEscape&&L()},handleWrapperClick:j,handleInputEnter:e=>{if("textarea"!==y.inputType)return e.preventDefault(),V("confirm")},handleAction:V,t:s}}}),re=["aria-label","aria-describedby"],ie=["aria-label"],ce=["id"];var ue=b(le,[["render",function(e,a,n,o,t,s){const l=h("el-icon"),r=h("close"),i=h("el-input"),c=h("el-button"),u=h("el-focus-trap"),d=h("el-overlay");return y(),C(V,{name:"fade-in-linear",onAfterLeave:a[11]||(a[11]=a=>e.$emit("vanish")),persisted:""},{default:x((()=>[E(B(d,{"z-index":e.zIndex,"overlay-class":[e.ns.is("message-box"),e.modalClass],mask:e.modal},{default:x((()=>[k("div",{role:"dialog","aria-label":e.title,"aria-modal":"true","aria-describedby":e.showInput?void 0:e.contentId,class:M(`${e.ns.namespace.value}-overlay-message-box`),onClick:a[8]||(a[8]=(...a)=>e.overlayEvent.onClick&&e.overlayEvent.onClick(...a)),onMousedown:a[9]||(a[9]=(...a)=>e.overlayEvent.onMousedown&&e.overlayEvent.onMousedown(...a)),onMouseup:a[10]||(a[10]=(...a)=>e.overlayEvent.onMouseup&&e.overlayEvent.onMouseup(...a))},[B(u,{loop:"",trapped:e.visible,"focus-trap-el":e.rootRef,"focus-start-el":e.focusStartRef,onReleaseRequested:e.onCloseRequested},{default:x((()=>[k("div",{ref:"rootRef",class:M([e.ns.b(),e.customClass,e.ns.is("draggable",e.draggable),{[e.ns.m("center")]:e.center}]),style:I(e.customStyle),tabindex:"-1",onClick:a[7]||(a[7]=T((()=>{}),["stop"]))},[null!==e.title&&void 0!==e.title?(y(),S("div",{key:0,ref:"headerRef",class:M(e.ns.e("header"))},[k("div",{class:M(e.ns.e("title"))},[e.iconComponent&&e.center?(y(),C(l,{key:0,class:M([e.ns.e("status"),e.typeClass])},{default:x((()=>[(y(),C(_(e.iconComponent)))])),_:1},8,["class"])):R("v-if",!0),k("span",null,A(e.title),1)],2),e.showClose?(y(),S("button",{key:0,type:"button",class:M(e.ns.e("headerbtn")),"aria-label":e.t("el.messagebox.close"),onClick:a[0]||(a[0]=a=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),onKeydown:a[1]||(a[1]=P(T((a=>e.handleAction(e.distinguishCancelAndClose?"close":"cancel")),["prevent"]),["enter"]))},[B(l,{class:M(e.ns.e("close"))},{default:x((()=>[B(r)])),_:1},8,["class"])],42,ie)):R("v-if",!0)],2)):R("v-if",!0),k("div",{id:e.contentId,class:M(e.ns.e("content"))},[k("div",{class:M(e.ns.e("container"))},[e.iconComponent&&!e.center&&e.hasMessage?(y(),C(l,{key:0,class:M([e.ns.e("status"),e.typeClass])},{default:x((()=>[(y(),C(_(e.iconComponent)))])),_:1},8,["class"])):R("v-if",!0),e.hasMessage?(y(),S("div",{key:1,class:M(e.ns.e("message"))},[j(e.$slots,"default",{},(()=>[e.dangerouslyUseHTMLString?(y(),C(_(e.showInput?"label":"p"),{key:1,for:e.showInput?e.inputId:void 0,innerHTML:e.message},null,8,["for","innerHTML"])):(y(),C(_(e.showInput?"label":"p"),{key:0,for:e.showInput?e.inputId:void 0},{default:x((()=>[z(A(e.dangerouslyUseHTMLString?"":e.message),1)])),_:1},8,["for"]))]))],2)):R("v-if",!0)],2),E(k("div",{class:M(e.ns.e("input"))},[B(i,{id:e.inputId,ref:"inputRef",modelValue:e.inputValue,"onUpdate:modelValue":a[2]||(a[2]=a=>e.inputValue=a),type:e.inputType,placeholder:e.inputPlaceholder,"aria-invalid":e.validateError,class:M({invalid:e.validateError}),onKeydown:P(e.handleInputEnter,["enter"])},null,8,["id","modelValue","type","placeholder","aria-invalid","class","onKeydown"]),k("div",{class:M(e.ns.e("errormsg")),style:I({visibility:e.editorErrorMessage?"visible":"hidden"})},A(e.editorErrorMessage),7)],2),[[w,e.showInput]])],10,ce),k("div",{class:M(e.ns.e("btns"))},[e.showCancelButton?(y(),C(c,{key:0,loading:e.cancelButtonLoading,class:M([e.cancelButtonClass]),round:e.roundButton,size:e.btnSize,onClick:a[3]||(a[3]=a=>e.handleAction("cancel")),onKeydown:a[4]||(a[4]=P(T((a=>e.handleAction("cancel")),["prevent"]),["enter"]))},{default:x((()=>[z(A(e.cancelButtonText||e.t("el.messagebox.cancel")),1)])),_:1},8,["loading","class","round","size"])):R("v-if",!0),E(B(c,{ref:"confirmRef",type:"primary",loading:e.confirmButtonLoading,class:M([e.confirmButtonClasses]),round:e.roundButton,disabled:e.confirmButtonDisabled,size:e.btnSize,onClick:a[5]||(a[5]=a=>e.handleAction("confirm")),onKeydown:a[6]||(a[6]=P(T((a=>e.handleAction("confirm")),["prevent"]),["enter"]))},{default:x((()=>[z(A(e.confirmButtonText||e.t("el.messagebox.confirm")),1)])),_:1},8,["loading","class","round","disabled","size"]),[[w,e.showConfirmButton]])],2)],6)])),_:3},8,["trapped","focus-trap-el","focus-start-el","onReleaseRequested"])],42,re)])),_:3},8,["z-index","overlay-class","mask"]),[[w,e.visible]])])),_:3})}],["__file","/home/runner/work/element-plus/element-plus/packages/components/message-box/src/index.vue"]]);const de=new Map,pe=(a,n)=>{const o=document.createElement("div");a.onVanish=()=>{D(null,o),de.delete(s)},a.onAction=e=>{const n=de.get(s);let o;o=a.showInput?{value:s.inputValue,action:e}:e,a.callback?a.callback(o,t.proxy):"cancel"===e||"close"===e?a.distinguishCancelAndClose&&"cancel"!==e?n.reject("close"):n.reject("cancel"):n.resolve(o)};const t=((e,a,n=null)=>{const o=F(ue,e);return o.appContext=n,D(o,a),document.body.appendChild(a.firstElementChild),o.component})(a,o,n),s=t.proxy;for(const e in a)H(a,e)&&!H(s.$props,e)&&(s[e]=a[e]);return e((()=>s.message),((e,a)=>{L(e)?t.slots.default=()=>[e]:L(a)&&!L(e)&&delete t.slots.default}),{immediate:!0}),s.visible=!0,s};function fe(e,a=null){if(!$)return Promise.reject();let n;return O(e)||L(e)?e={message:e}:n=e.callback,new Promise(((o,t)=>{const s=pe(e,null!=a?a:fe._context);de.set(s,{options:e,callback:n,resolve:o,reject:t})}))}const me={alert:{closeOnPressEscape:!1,closeOnClickModal:!1},confirm:{showCancelButton:!0},prompt:{showCancelButton:!0,showInput:!0}};["alert","confirm","prompt"].forEach((e=>{fe[e]=function(e){return(a,n,o,t)=>{let s;return K(n)?(o=n,s=""):s=q(n)?"":n,fe(Object.assign({title:s,message:a,type:"",...me[e]},o,{boxType:e}),t)}}(e)})),fe.close=()=>{de.forEach(((e,a)=>{a.doClose()})),de.clear()},fe._context=null;const ve=fe;ve.install=e=>{ve._context=e._context,e.config.globalProperties.$msgbox=ve,e.config.globalProperties.$messageBox=ve,e.config.globalProperties.$alert=ve.alert,e.config.globalProperties.$confirm=ve.confirm,e.config.globalProperties.$prompt=ve.prompt};const ge=ve;export{ge as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWwtbWVzc2FnZS1ib3guZDlmNGI1OWYuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWdpc3RyeS5ucG1taXJyb3IuY29tK2VsZW1lbnQtcGx1c0AyLjIuNl92dWVAMy4yLjM3L25vZGVfbW9kdWxlcy9lbGVtZW50LXBsdXMvZXMvaG9va3MvdXNlLXJlc3RvcmUtYWN0aXZlL2luZGV4Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2RpcmVjdGl2ZXMvdHJhcC1mb2N1cy9pbmRleDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lc3NhZ2UtYm94L3NyYy9pbmRleDIubWpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlZ2lzdHJ5Lm5wbW1pcnJvci5jb20rZWxlbWVudC1wbHVzQDIuMi42X3Z1ZUAzLjIuMzcvbm9kZV9tb2R1bGVzL2VsZW1lbnQtcGx1cy9lcy9jb21wb25lbnRzL21lc3NhZ2UtYm94L3NyYy9tZXNzYWdlQm94Mi5tanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVnaXN0cnkubnBtbWlycm9yLmNvbStlbGVtZW50LXBsdXNAMi4yLjZfdnVlQDMuMi4zNy9ub2RlX21vZHVsZXMvZWxlbWVudC1wbHVzL2VzL2NvbXBvbmVudHMvbWVzc2FnZS1ib3gvaW5kZXgyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YXRjaCwgaXNSZWYgfSBmcm9tICd2dWUnO1xuXG5jb25zdCB1c2VSZXN0b3JlQWN0aXZlID0gKHRvZ2dsZSwgaW5pdGlhbEZvY3VzKSA9PiB7XG4gIGxldCBwcmV2aW91c0FjdGl2ZTtcbiAgd2F0Y2goKCkgPT4gdG9nZ2xlLnZhbHVlLCAodmFsKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAodmFsKSB7XG4gICAgICBwcmV2aW91c0FjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICBpZiAoaXNSZWYoaW5pdGlhbEZvY3VzKSkge1xuICAgICAgICAoX2IgPSAoX2EgPSBpbml0aWFsRm9jdXMudmFsdWUpLmZvY3VzKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIpIHtcbiAgICAgICAgcHJldmlvdXNBY3RpdmUuZm9jdXMuY2FsbChwcmV2aW91c0FjdGl2ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0FjdGl2ZS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnQgeyB1c2VSZXN0b3JlQWN0aXZlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIiwiaW1wb3J0IHsgbmV4dFRpY2sgfSBmcm9tICd2dWUnO1xuaW1wb3J0ICcuLi8uLi91dGlscy9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vY29uc3RhbnRzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRVZFTlRfQ09ERSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9hcmlhMi5tanMnO1xuaW1wb3J0IHsgb2J0YWluQWxsRm9jdXNhYmxlRWxlbWVudHMgfSBmcm9tICcuLi8uLi91dGlscy9kb20vYXJpYTIubWpzJztcbmltcG9ydCB7IG9uLCBvZmYgfSBmcm9tICcuLi8uLi91dGlscy9kb20vZXZlbnQyLm1qcyc7XG5cbmNvbnN0IEZPQ1VTQUJMRV9DSElMRFJFTiA9IFwiX3RyYXAtZm9jdXMtY2hpbGRyZW5cIjtcbmNvbnN0IFRSQVBfRk9DVVNfSEFORExFUiA9IFwiX3RyYXAtZm9jdXMtaGFuZGxlclwiO1xuY29uc3QgRk9DVVNfU1RBQ0sgPSBbXTtcbmNvbnN0IEZPQ1VTX0hBTkRMRVIgPSAoZSkgPT4ge1xuICB2YXIgX2E7XG4gIGlmIChGT0NVU19TVEFDSy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuO1xuICBjb25zdCBmb2N1c2FibGVFbGVtZW50ID0gRk9DVVNfU1RBQ0tbRk9DVVNfU1RBQ0subGVuZ3RoIC0gMV1bRk9DVVNBQkxFX0NISUxEUkVOXTtcbiAgaWYgKGZvY3VzYWJsZUVsZW1lbnQubGVuZ3RoID4gMCAmJiBlLmNvZGUgPT09IEVWRU5UX0NPREUudGFiKSB7XG4gICAgaWYgKGZvY3VzYWJsZUVsZW1lbnQubGVuZ3RoID09PSAxKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZm9jdXNhYmxlRWxlbWVudFswXSkge1xuICAgICAgICBmb2N1c2FibGVFbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGdvaW5nQmFja3dhcmQgPSBlLnNoaWZ0S2V5O1xuICAgIGNvbnN0IGlzRmlyc3QgPSBlLnRhcmdldCA9PT0gZm9jdXNhYmxlRWxlbWVudFswXTtcbiAgICBjb25zdCBpc0xhc3QgPSBlLnRhcmdldCA9PT0gZm9jdXNhYmxlRWxlbWVudFtmb2N1c2FibGVFbGVtZW50Lmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc0ZpcnN0ICYmIGdvaW5nQmFja3dhcmQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGZvY3VzYWJsZUVsZW1lbnRbZm9jdXNhYmxlRWxlbWVudC5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgIH1cbiAgICBpZiAoaXNMYXN0ICYmICFnb2luZ0JhY2t3YXJkKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBmb2N1c2FibGVFbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJ0ZXN0XCIpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gZm9jdXNhYmxlRWxlbWVudC5pbmRleE9mKGUudGFyZ2V0KTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgKF9hID0gZm9jdXNhYmxlRWxlbWVudFtnb2luZ0JhY2t3YXJkID8gaW5kZXggLSAxIDogaW5kZXggKyAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuY29uc3QgVHJhcEZvY3VzID0ge1xuICBiZWZvcmVNb3VudChlbCkge1xuICAgIGVsW0ZPQ1VTQUJMRV9DSElMRFJFTl0gPSBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cyhlbCk7XG4gICAgRk9DVVNfU1RBQ0sucHVzaChlbCk7XG4gICAgaWYgKEZPQ1VTX1NUQUNLLmxlbmd0aCA8PSAxKSB7XG4gICAgICBvbihkb2N1bWVudCwgXCJrZXlkb3duXCIsIEZPQ1VTX0hBTkRMRVIpO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlZChlbCkge1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGVsW0ZPQ1VTQUJMRV9DSElMRFJFTl0gPSBvYnRhaW5BbGxGb2N1c2FibGVFbGVtZW50cyhlbCk7XG4gICAgfSk7XG4gIH0sXG4gIHVubW91bnRlZCgpIHtcbiAgICBGT0NVU19TVEFDSy5zaGlmdCgpO1xuICAgIGlmIChGT0NVU19TVEFDSy5sZW5ndGggPT09IDApIHtcbiAgICAgIG9mZihkb2N1bWVudCwgXCJrZXlkb3duXCIsIEZPQ1VTX0hBTkRMRVIpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgRk9DVVNBQkxFX0NISUxEUkVOLCBUUkFQX0ZPQ1VTX0hBTkRMRVIsIFRyYXBGb2N1cyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIiwiaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCByZWYsIHJlYWN0aXZlLCBjb21wdXRlZCwgd2F0Y2gsIG5leHRUaWNrLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgdG9SZWZzLCByZXNvbHZlQ29tcG9uZW50LCBvcGVuQmxvY2ssIGNyZWF0ZUJsb2NrLCBUcmFuc2l0aW9uLCB3aXRoQ3R4LCB3aXRoRGlyZWN0aXZlcywgY3JlYXRlVk5vZGUsIGNyZWF0ZUVsZW1lbnRWTm9kZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlLCB3aXRoTW9kaWZpZXJzLCBjcmVhdGVFbGVtZW50QmxvY2ssIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCBjcmVhdGVDb21tZW50Vk5vZGUsIHRvRGlzcGxheVN0cmluZywgd2l0aEtleXMsIHJlbmRlclNsb3QsIGNyZWF0ZVRleHRWTm9kZSwgdlNob3cgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgRWxCdXR0b24gfSBmcm9tICcuLi8uLi9idXR0b24vaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2RpcmVjdGl2ZXMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2hvb2tzL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRWxJbnB1dCB9IGZyb20gJy4uLy4uL2lucHV0L2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgRWxPdmVybGF5IH0gZnJvbSAnLi4vLi4vb3ZlcmxheS9pbmRleDIubWpzJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBFbEljb24gfSBmcm9tICcuLi8uLi9pY29uL2luZGV4Mi5tanMnO1xuaW1wb3J0ICcuLi8uLi9mb2N1cy10cmFwL2luZGV4Mi5tanMnO1xuaW1wb3J0IF9leHBvcnRfc2ZjIGZyb20gJy4uLy4uLy4uL192aXJ0dWFsL3BsdWdpbi12dWVfZXhwb3J0LWhlbHBlci5tanMnO1xuaW1wb3J0IFRyYXBGb2N1cyBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL3RyYXAtZm9jdXMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgRWxGb2N1c1RyYXAgZnJvbSAnLi4vLi4vZm9jdXMtdHJhcC9zcmMvZm9jdXMtdHJhcDIubWpzJztcbmltcG9ydCB7IFR5cGVDb21wb25lbnRzLCBUeXBlQ29tcG9uZW50c01hcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Z1ZS9pY29uMi5tanMnO1xuaW1wb3J0IHsgaXNWYWxpZENvbXBvbmVudFNpemUgfSBmcm9tICcuLi8uLi8uLi91dGlscy92dWUvdmFsaWRhdG9yMi5tanMnO1xuaW1wb3J0IHsgdXNlTG9jYWxlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWxvY2FsZS9pbmRleDIubWpzJztcbmltcG9ydCB7IHVzZU5hbWVzcGFjZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1uYW1lc3BhY2UvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB1c2VaSW5kZXggfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2Utei1pbmRleC9pbmRleDIubWpzJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWlkL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgdXNlU2l6ZSB9IGZyb20gJy4uLy4uLy4uL2hvb2tzL3VzZS1jb21tb24tcHJvcHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB1c2VEcmFnZ2FibGUgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2UtZHJhZ2dhYmxlL2luZGV4Mi5tanMnO1xuaW1wb3J0IHsgb24sIG9mZiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS9ldmVudDIubWpzJztcbmltcG9ydCB7IHVzZVNhbWVUYXJnZXQgfSBmcm9tICcuLi8uLi8uLi9ob29rcy91c2Utc2FtZS10YXJnZXQvaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB1c2VMb2Nrc2NyZWVuIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLWxvY2tzY3JlZW4vaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyB1c2VSZXN0b3JlQWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vaG9va3MvdXNlLXJlc3RvcmUtYWN0aXZlL2luZGV4Mi5tanMnO1xuXG5jb25zdCBfc2ZjX21haW4gPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiBcIkVsTWVzc2FnZUJveFwiLFxuICBkaXJlY3RpdmVzOiB7XG4gICAgVHJhcEZvY3VzXG4gIH0sXG4gIGNvbXBvbmVudHM6IHtcbiAgICBFbEJ1dHRvbixcbiAgICBFbEZvY3VzVHJhcCxcbiAgICBFbElucHV0LFxuICAgIEVsT3ZlcmxheSxcbiAgICBFbEljb24sXG4gICAgLi4uVHlwZUNvbXBvbmVudHNcbiAgfSxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICBidXR0b25TaXplOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICB2YWxpZGF0b3I6IGlzVmFsaWRDb21wb25lbnRTaXplXG4gICAgfSxcbiAgICBtb2RhbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGxvY2tTY3JvbGw6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBzaG93Q2xvc2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBjbG9zZU9uQ2xpY2tNb2RhbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNsb3NlT25QcmVzc0VzY2FwZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNsb3NlT25IYXNoQ2hhbmdlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgY2VudGVyOiBCb29sZWFuLFxuICAgIGRyYWdnYWJsZTogQm9vbGVhbixcbiAgICByb3VuZEJ1dHRvbjoge1xuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfSxcbiAgICBjb250YWluZXI6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwiYm9keVwiXG4gICAgfSxcbiAgICBib3hUeXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfVxuICB9LFxuICBlbWl0czogW1widmFuaXNoXCIsIFwiYWN0aW9uXCJdLFxuICBzZXR1cChwcm9wcywgeyBlbWl0IH0pIHtcbiAgICBjb25zdCB7IHQgfSA9IHVzZUxvY2FsZSgpO1xuICAgIGNvbnN0IG5zID0gdXNlTmFtZXNwYWNlKFwibWVzc2FnZS1ib3hcIik7XG4gICAgY29uc3QgdmlzaWJsZSA9IHJlZihmYWxzZSk7XG4gICAgY29uc3QgeyBuZXh0WkluZGV4IH0gPSB1c2VaSW5kZXgoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHJlYWN0aXZlKHtcbiAgICAgIGJlZm9yZUNsb3NlOiBudWxsLFxuICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIlwiLFxuICAgICAgY2FuY2VsQnV0dG9uQ2xhc3M6IFwiXCIsXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJcIixcbiAgICAgIGNvbmZpcm1CdXR0b25DbGFzczogXCJcIixcbiAgICAgIGN1c3RvbUNsYXNzOiBcIlwiLFxuICAgICAgY3VzdG9tU3R5bGU6IHt9LFxuICAgICAgZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nOiBmYWxzZSxcbiAgICAgIGRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2U6IGZhbHNlLFxuICAgICAgaWNvbjogXCJcIixcbiAgICAgIGlucHV0UGF0dGVybjogbnVsbCxcbiAgICAgIGlucHV0UGxhY2Vob2xkZXI6IFwiXCIsXG4gICAgICBpbnB1dFR5cGU6IFwidGV4dFwiLFxuICAgICAgaW5wdXRWYWx1ZTogbnVsbCxcbiAgICAgIGlucHV0VmFsaWRhdG9yOiBudWxsLFxuICAgICAgaW5wdXRFcnJvck1lc3NhZ2U6IFwiXCIsXG4gICAgICBtZXNzYWdlOiBudWxsLFxuICAgICAgbW9kYWxGYWRlOiB0cnVlLFxuICAgICAgbW9kYWxDbGFzczogXCJcIixcbiAgICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLFxuICAgICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgICB0eXBlOiBcIlwiLFxuICAgICAgdGl0bGU6IHZvaWQgMCxcbiAgICAgIHNob3dJbnB1dDogZmFsc2UsXG4gICAgICBhY3Rpb246IFwiXCIsXG4gICAgICBjb25maXJtQnV0dG9uTG9hZGluZzogZmFsc2UsXG4gICAgICBjYW5jZWxCdXR0b25Mb2FkaW5nOiBmYWxzZSxcbiAgICAgIGNvbmZpcm1CdXR0b25EaXNhYmxlZDogZmFsc2UsXG4gICAgICBlZGl0b3JFcnJvck1lc3NhZ2U6IFwiXCIsXG4gICAgICB2YWxpZGF0ZUVycm9yOiBmYWxzZSxcbiAgICAgIHpJbmRleDogbmV4dFpJbmRleCgpXG4gICAgfSk7XG4gICAgY29uc3QgdHlwZUNsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IHN0YXRlLnR5cGU7XG4gICAgICByZXR1cm4geyBbbnMuYm0oXCJpY29uXCIsIHR5cGUpXTogdHlwZSAmJiBUeXBlQ29tcG9uZW50c01hcFt0eXBlXSB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNvbnRlbnRJZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgaW5wdXRJZCA9IHVzZUlkKCk7XG4gICAgY29uc3QgYnRuU2l6ZSA9IHVzZVNpemUoY29tcHV0ZWQoKCkgPT4gcHJvcHMuYnV0dG9uU2l6ZSksIHsgcHJvcDogdHJ1ZSwgZm9ybTogdHJ1ZSwgZm9ybUl0ZW06IHRydWUgfSk7XG4gICAgY29uc3QgaWNvbkNvbXBvbmVudCA9IGNvbXB1dGVkKCgpID0+IHN0YXRlLmljb24gfHwgVHlwZUNvbXBvbmVudHNNYXBbc3RhdGUudHlwZV0gfHwgXCJcIik7XG4gICAgY29uc3QgaGFzTWVzc2FnZSA9IGNvbXB1dGVkKCgpID0+ICEhc3RhdGUubWVzc2FnZSk7XG4gICAgY29uc3Qgcm9vdFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGhlYWRlclJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGZvY3VzU3RhcnRSZWYgPSByZWYoKTtcbiAgICBjb25zdCBpbnB1dFJlZiA9IHJlZigpO1xuICAgIGNvbnN0IGNvbmZpcm1SZWYgPSByZWYoKTtcbiAgICBjb25zdCBjb25maXJtQnV0dG9uQ2xhc3NlcyA9IGNvbXB1dGVkKCgpID0+IHN0YXRlLmNvbmZpcm1CdXR0b25DbGFzcyk7XG4gICAgd2F0Y2goKCkgPT4gc3RhdGUuaW5wdXRWYWx1ZSwgYXN5bmMgKHZhbCkgPT4ge1xuICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgIGlmIChwcm9wcy5ib3hUeXBlID09PSBcInByb21wdFwiICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgICB2YWxpZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sIHsgaW1tZWRpYXRlOiB0cnVlIH0pO1xuICAgIHdhdGNoKCgpID0+IHZpc2libGUudmFsdWUsICh2YWwpID0+IHtcbiAgICAgIHZhciBfYSwgX2I7XG4gICAgICBpZiAodmFsKSB7XG4gICAgICAgIGlmIChwcm9wcy5ib3hUeXBlID09PSBcImFsZXJ0XCIgfHwgcHJvcHMuYm94VHlwZSA9PT0gXCJjb25maXJtXCIpIHtcbiAgICAgICAgICBmb2N1c1N0YXJ0UmVmLnZhbHVlID0gKF9iID0gKF9hID0gY29uZmlybVJlZi52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLiRlbCkgIT0gbnVsbCA/IF9iIDogcm9vdFJlZi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS56SW5kZXggPSBuZXh0WkluZGV4KCk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuYm94VHlwZSAhPT0gXCJwcm9tcHRcIilcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICBuZXh0VGljaygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHZhciBfYTI7XG4gICAgICAgICAgaWYgKGlucHV0UmVmLnZhbHVlICYmIGlucHV0UmVmLnZhbHVlLiRlbCkge1xuICAgICAgICAgICAgZm9jdXNTdGFydFJlZi52YWx1ZSA9IChfYTIgPSBnZXRJbnB1dEVsZW1lbnQoKSkgIT0gbnVsbCA/IF9hMiA6IHJvb3RSZWYudmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmVkaXRvckVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgICAgIHN0YXRlLnZhbGlkYXRlRXJyb3IgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBkcmFnZ2FibGUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5kcmFnZ2FibGUpO1xuICAgIHVzZURyYWdnYWJsZShyb290UmVmLCBoZWFkZXJSZWYsIGRyYWdnYWJsZSk7XG4gICAgb25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICBpZiAocHJvcHMuY2xvc2VPbkhhc2hDaGFuZ2UpIHtcbiAgICAgICAgb24od2luZG93LCBcImhhc2hjaGFuZ2VcIiwgZG9DbG9zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5jbG9zZU9uSGFzaENoYW5nZSkge1xuICAgICAgICBvZmYod2luZG93LCBcImhhc2hjaGFuZ2VcIiwgZG9DbG9zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZG9DbG9zZSgpIHtcbiAgICAgIGlmICghdmlzaWJsZS52YWx1ZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgdmlzaWJsZS52YWx1ZSA9IGZhbHNlO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUuYWN0aW9uKVxuICAgICAgICAgIGVtaXQoXCJhY3Rpb25cIiwgc3RhdGUuYWN0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVXcmFwcGVyQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBpZiAocHJvcHMuY2xvc2VPbkNsaWNrTW9kYWwpIHtcbiAgICAgICAgaGFuZGxlQWN0aW9uKHN0YXRlLmRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UgPyBcImNsb3NlXCIgOiBcImNhbmNlbFwiKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG92ZXJsYXlFdmVudCA9IHVzZVNhbWVUYXJnZXQoaGFuZGxlV3JhcHBlckNsaWNrKTtcbiAgICBjb25zdCBoYW5kbGVJbnB1dEVudGVyID0gKGUpID0+IHtcbiAgICAgIGlmIChzdGF0ZS5pbnB1dFR5cGUgIT09IFwidGV4dGFyZWFcIikge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybiBoYW5kbGVBY3Rpb24oXCJjb25maXJtXCIpO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlQWN0aW9uID0gKGFjdGlvbikgPT4ge1xuICAgICAgdmFyIF9hO1xuICAgICAgaWYgKHByb3BzLmJveFR5cGUgPT09IFwicHJvbXB0XCIgJiYgYWN0aW9uID09PSBcImNvbmZpcm1cIiAmJiAhdmFsaWRhdGUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzdGF0ZS5hY3Rpb24gPSBhY3Rpb247XG4gICAgICBpZiAoc3RhdGUuYmVmb3JlQ2xvc2UpIHtcbiAgICAgICAgKF9hID0gc3RhdGUuYmVmb3JlQ2xvc2UpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKHN0YXRlLCBhY3Rpb24sIHN0YXRlLCBkb0Nsb3NlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvQ2xvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHZhbGlkYXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmJveFR5cGUgPT09IFwicHJvbXB0XCIpIHtcbiAgICAgICAgY29uc3QgaW5wdXRQYXR0ZXJuID0gc3RhdGUuaW5wdXRQYXR0ZXJuO1xuICAgICAgICBpZiAoaW5wdXRQYXR0ZXJuICYmICFpbnB1dFBhdHRlcm4udGVzdChzdGF0ZS5pbnB1dFZhbHVlIHx8IFwiXCIpKSB7XG4gICAgICAgICAgc3RhdGUuZWRpdG9yRXJyb3JNZXNzYWdlID0gc3RhdGUuaW5wdXRFcnJvck1lc3NhZ2UgfHwgdChcImVsLm1lc3NhZ2Vib3guZXJyb3JcIik7XG4gICAgICAgICAgc3RhdGUudmFsaWRhdGVFcnJvciA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlucHV0VmFsaWRhdG9yID0gc3RhdGUuaW5wdXRWYWxpZGF0b3I7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXRWYWxpZGF0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIGNvbnN0IHZhbGlkYXRlUmVzdWx0ID0gaW5wdXRWYWxpZGF0b3Ioc3RhdGUuaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgaWYgKHZhbGlkYXRlUmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RhdGUuZWRpdG9yRXJyb3JNZXNzYWdlID0gc3RhdGUuaW5wdXRFcnJvck1lc3NhZ2UgfHwgdChcImVsLm1lc3NhZ2Vib3guZXJyb3JcIik7XG4gICAgICAgICAgICBzdGF0ZS52YWxpZGF0ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWxpZGF0ZVJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgc3RhdGUuZWRpdG9yRXJyb3JNZXNzYWdlID0gdmFsaWRhdGVSZXN1bHQ7XG4gICAgICAgICAgICBzdGF0ZS52YWxpZGF0ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YXRlLmVkaXRvckVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgICBzdGF0ZS52YWxpZGF0ZUVycm9yID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGdldElucHV0RWxlbWVudCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0UmVmcyA9IGlucHV0UmVmLnZhbHVlLiRyZWZzO1xuICAgICAgcmV0dXJuIGlucHV0UmVmcy5pbnB1dCB8fCBpbnB1dFJlZnMudGV4dGFyZWE7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVDbG9zZSA9ICgpID0+IHtcbiAgICAgIGhhbmRsZUFjdGlvbihcImNsb3NlXCIpO1xuICAgIH07XG4gICAgY29uc3Qgb25DbG9zZVJlcXVlc3RlZCA9ICgpID0+IHtcbiAgICAgIGlmIChwcm9wcy5jbG9zZU9uUHJlc3NFc2NhcGUpIHtcbiAgICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChwcm9wcy5sb2NrU2Nyb2xsKSB7XG4gICAgICB1c2VMb2Nrc2NyZWVuKHZpc2libGUpO1xuICAgIH1cbiAgICB1c2VSZXN0b3JlQWN0aXZlKHZpc2libGUpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi50b1JlZnMoc3RhdGUpLFxuICAgICAgbnMsXG4gICAgICBvdmVybGF5RXZlbnQsXG4gICAgICB2aXNpYmxlLFxuICAgICAgaGFzTWVzc2FnZSxcbiAgICAgIHR5cGVDbGFzcyxcbiAgICAgIGNvbnRlbnRJZCxcbiAgICAgIGlucHV0SWQsXG4gICAgICBidG5TaXplLFxuICAgICAgaWNvbkNvbXBvbmVudCxcbiAgICAgIGNvbmZpcm1CdXR0b25DbGFzc2VzLFxuICAgICAgcm9vdFJlZixcbiAgICAgIGZvY3VzU3RhcnRSZWYsXG4gICAgICBoZWFkZXJSZWYsXG4gICAgICBpbnB1dFJlZixcbiAgICAgIGNvbmZpcm1SZWYsXG4gICAgICBkb0Nsb3NlLFxuICAgICAgaGFuZGxlQ2xvc2UsXG4gICAgICBvbkNsb3NlUmVxdWVzdGVkLFxuICAgICAgaGFuZGxlV3JhcHBlckNsaWNrLFxuICAgICAgaGFuZGxlSW5wdXRFbnRlcixcbiAgICAgIGhhbmRsZUFjdGlvbixcbiAgICAgIHRcbiAgICB9O1xuICB9XG59KTtcbmNvbnN0IF9ob2lzdGVkXzEgPSBbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1kZXNjcmliZWRieVwiXTtcbmNvbnN0IF9ob2lzdGVkXzIgPSBbXCJhcmlhLWxhYmVsXCJdO1xuY29uc3QgX2hvaXN0ZWRfMyA9IFtcImlkXCJdO1xuZnVuY3Rpb24gX3NmY19yZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfaWNvbiA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1pY29uXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2Nsb3NlID0gcmVzb2x2ZUNvbXBvbmVudChcImNsb3NlXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2VsX2lucHV0ID0gcmVzb2x2ZUNvbXBvbmVudChcImVsLWlucHV0XCIpO1xuICBjb25zdCBfY29tcG9uZW50X2VsX2J1dHRvbiA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1idXR0b25cIik7XG4gIGNvbnN0IF9jb21wb25lbnRfZWxfZm9jdXNfdHJhcCA9IHJlc29sdmVDb21wb25lbnQoXCJlbC1mb2N1cy10cmFwXCIpO1xuICBjb25zdCBfY29tcG9uZW50X2VsX292ZXJsYXkgPSByZXNvbHZlQ29tcG9uZW50KFwiZWwtb3ZlcmxheVwiKTtcbiAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhUcmFuc2l0aW9uLCB7XG4gICAgbmFtZTogXCJmYWRlLWluLWxpbmVhclwiLFxuICAgIG9uQWZ0ZXJMZWF2ZTogX2NhY2hlWzExXSB8fCAoX2NhY2hlWzExXSA9ICgkZXZlbnQpID0+IF9jdHguJGVtaXQoXCJ2YW5pc2hcIikpLFxuICAgIHBlcnNpc3RlZDogXCJcIlxuICB9LCB7XG4gICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICB3aXRoRGlyZWN0aXZlcyhjcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX292ZXJsYXksIHtcbiAgICAgICAgXCJ6LWluZGV4XCI6IF9jdHguekluZGV4LFxuICAgICAgICBcIm92ZXJsYXktY2xhc3NcIjogW19jdHgubnMuaXMoXCJtZXNzYWdlLWJveFwiKSwgX2N0eC5tb2RhbENsYXNzXSxcbiAgICAgICAgbWFzazogX2N0eC5tb2RhbFxuICAgICAgfSwge1xuICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgcm9sZTogXCJkaWFsb2dcIixcbiAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBfY3R4LnRpdGxlLFxuICAgICAgICAgICAgXCJhcmlhLW1vZGFsXCI6IFwidHJ1ZVwiLFxuICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6ICFfY3R4LnNob3dJbnB1dCA/IF9jdHguY29udGVudElkIDogdm9pZCAwLFxuICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKGAke19jdHgubnMubmFtZXNwYWNlLnZhbHVlfS1vdmVybGF5LW1lc3NhZ2UtYm94YCksXG4gICAgICAgICAgICBvbkNsaWNrOiBfY2FjaGVbOF0gfHwgKF9jYWNoZVs4XSA9ICguLi5hcmdzKSA9PiBfY3R4Lm92ZXJsYXlFdmVudC5vbkNsaWNrICYmIF9jdHgub3ZlcmxheUV2ZW50Lm9uQ2xpY2soLi4uYXJncykpLFxuICAgICAgICAgICAgb25Nb3VzZWRvd246IF9jYWNoZVs5XSB8fCAoX2NhY2hlWzldID0gKC4uLmFyZ3MpID0+IF9jdHgub3ZlcmxheUV2ZW50Lm9uTW91c2Vkb3duICYmIF9jdHgub3ZlcmxheUV2ZW50Lm9uTW91c2Vkb3duKC4uLmFyZ3MpKSxcbiAgICAgICAgICAgIG9uTW91c2V1cDogX2NhY2hlWzEwXSB8fCAoX2NhY2hlWzEwXSA9ICguLi5hcmdzKSA9PiBfY3R4Lm92ZXJsYXlFdmVudC5vbk1vdXNldXAgJiYgX2N0eC5vdmVybGF5RXZlbnQub25Nb3VzZXVwKC4uLmFyZ3MpKVxuICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgIGNyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfZm9jdXNfdHJhcCwge1xuICAgICAgICAgICAgICBsb29wOiBcIlwiLFxuICAgICAgICAgICAgICB0cmFwcGVkOiBfY3R4LnZpc2libGUsXG4gICAgICAgICAgICAgIFwiZm9jdXMtdHJhcC1lbFwiOiBfY3R4LnJvb3RSZWYsXG4gICAgICAgICAgICAgIFwiZm9jdXMtc3RhcnQtZWxcIjogX2N0eC5mb2N1c1N0YXJ0UmVmLFxuICAgICAgICAgICAgICBvblJlbGVhc2VSZXF1ZXN0ZWQ6IF9jdHgub25DbG9zZVJlcXVlc3RlZFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgcmVmOiBcInJvb3RSZWZcIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbXG4gICAgICAgICAgICAgICAgICAgIF9jdHgubnMuYigpLFxuICAgICAgICAgICAgICAgICAgICBfY3R4LmN1c3RvbUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICBfY3R4Lm5zLmlzKFwiZHJhZ2dhYmxlXCIsIF9jdHguZHJhZ2dhYmxlKSxcbiAgICAgICAgICAgICAgICAgICAgeyBbX2N0eC5ucy5tKFwiY2VudGVyXCIpXTogX2N0eC5jZW50ZXIgfVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBzdHlsZTogbm9ybWFsaXplU3R5bGUoX2N0eC5jdXN0b21TdHlsZSksXG4gICAgICAgICAgICAgICAgICB0YWJpbmRleDogXCItMVwiLFxuICAgICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzddIHx8IChfY2FjaGVbN10gPSB3aXRoTW9kaWZpZXJzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIH0sIFtcInN0b3BcIl0pKVxuICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jdHgudGl0bGUgIT09IG51bGwgJiYgX2N0eC50aXRsZSAhPT0gdm9pZCAwID8gKG9wZW5CbG9jaygpLCBjcmVhdGVFbGVtZW50QmxvY2soXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICBrZXk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJlZjogXCJoZWFkZXJSZWZcIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImhlYWRlclwiKSlcbiAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudFZOb2RlKFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwidGl0bGVcIikpXG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBfY3R4Lmljb25Db21wb25lbnQgJiYgX2N0eC5jZW50ZXIgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKF9jb21wb25lbnRfZWxfaWNvbiwge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtfY3R4Lm5zLmUoXCJzdGF0dXNcIiksIF9jdHgudHlwZUNsYXNzXSlcbiAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhyZXNvbHZlRHluYW1pY0NvbXBvbmVudChfY3R4Lmljb25Db21wb25lbnQpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcInNwYW5cIiwgbnVsbCwgdG9EaXNwbGF5U3RyaW5nKF9jdHgudGl0bGUpLCAxKVxuICAgICAgICAgICAgICAgICAgICBdLCAyKSxcbiAgICAgICAgICAgICAgICAgICAgX2N0eC5zaG93Q2xvc2UgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImJ1dHRvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAga2V5OiAwLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImhlYWRlcmJ0blwiKSksXG4gICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IF9jdHgudChcImVsLm1lc3NhZ2Vib3guY2xvc2VcIiksXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAoJGV2ZW50KSA9PiBfY3R4LmhhbmRsZUFjdGlvbihfY3R4LmRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UgPyBcImNsb3NlXCIgOiBcImNhbmNlbFwiKSksXG4gICAgICAgICAgICAgICAgICAgICAgb25LZXlkb3duOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IHdpdGhLZXlzKHdpdGhNb2RpZmllcnMoKCRldmVudCkgPT4gX2N0eC5oYW5kbGVBY3Rpb24oX2N0eC5kaXN0aW5ndWlzaENhbmNlbEFuZENsb3NlID8gXCJjbG9zZVwiIDogXCJjYW5jZWxcIiksIFtcInByZXZlbnRcIl0pLCBbXCJlbnRlclwiXSkpXG4gICAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVWTm9kZShfY29tcG9uZW50X2VsX2ljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJjbG9zZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9jbG9zZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgIH0sIDgsIFtcImNsYXNzXCJdKVxuICAgICAgICAgICAgICAgICAgICBdLCA0MiwgX2hvaXN0ZWRfMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgXSwgMikpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBfY3R4LmNvbnRlbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImNvbnRlbnRcIikpXG4gICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKF9jdHgubnMuZShcImNvbnRhaW5lclwiKSlcbiAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jdHguaWNvbkNvbXBvbmVudCAmJiAhX2N0eC5jZW50ZXIgJiYgX2N0eC5oYXNNZXNzYWdlID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2ljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbX2N0eC5ucy5lKFwic3RhdHVzXCIpLCBfY3R4LnR5cGVDbGFzc10pXG4gICAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2socmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoX2N0eC5pY29uQ29tcG9uZW50KSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF86IDFcbiAgICAgICAgICAgICAgICAgICAgICB9LCA4LCBbXCJjbGFzc1wiXSkpIDogY3JlYXRlQ29tbWVudFZOb2RlKFwidi1pZlwiLCB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICBfY3R4Lmhhc01lc3NhZ2UgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUVsZW1lbnRCbG9jayhcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwibWVzc2FnZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgICB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJTbG90KF9jdHguJHNsb3RzLCBcImRlZmF1bHRcIiwge30sICgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIV9jdHguZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhyZXNvbHZlRHluYW1pY0NvbXBvbmVudChfY3R4LnNob3dJbnB1dCA/IFwibGFiZWxcIiA6IFwicFwiKSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3I6IF9jdHguc2hvd0lucHV0ID8gX2N0eC5pbnB1dElkIDogdm9pZCAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB3aXRoQ3R4KCgpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVRleHRWTm9kZSh0b0Rpc3BsYXlTdHJpbmcoIV9jdHguZGFuZ2Vyb3VzbHlVc2VIVE1MU3RyaW5nID8gX2N0eC5tZXNzYWdlIDogXCJcIiksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA4LCBbXCJmb3JcIl0pKSA6IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2socmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoX2N0eC5zaG93SW5wdXQgPyBcImxhYmVsXCIgOiBcInBcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yOiBfY3R4LnNob3dJbnB1dCA/IF9jdHguaW5wdXRJZCA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lckhUTUw6IF9jdHgubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCA4LCBbXCJmb3JcIiwgXCJpbm5lckhUTUxcIl0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICBdLCAyKSkgOiBjcmVhdGVDb21tZW50Vk5vZGUoXCJ2LWlmXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIF0sIDIpLFxuICAgICAgICAgICAgICAgICAgICB3aXRoRGlyZWN0aXZlcyhjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhfY3R4Lm5zLmUoXCJpbnB1dFwiKSlcbiAgICAgICAgICAgICAgICAgICAgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfaW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBfY3R4LmlucHV0SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY6IFwiaW5wdXRSZWZcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsVmFsdWU6IF9jdHguaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9ICgkZXZlbnQpID0+IF9jdHguaW5wdXRWYWx1ZSA9ICRldmVudCksXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBfY3R4LmlucHV0VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBfY3R4LmlucHV0UGxhY2Vob2xkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtaW52YWxpZFwiOiBfY3R4LnZhbGlkYXRlRXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoeyBpbnZhbGlkOiBfY3R4LnZhbGlkYXRlRXJyb3IgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBvbktleWRvd246IHdpdGhLZXlzKF9jdHguaGFuZGxlSW5wdXRFbnRlciwgW1wiZW50ZXJcIl0pXG4gICAgICAgICAgICAgICAgICAgICAgfSwgbnVsbCwgOCwgW1wiaWRcIiwgXCJtb2RlbFZhbHVlXCIsIFwidHlwZVwiLCBcInBsYWNlaG9sZGVyXCIsIFwiYXJpYS1pbnZhbGlkXCIsIFwiY2xhc3NcIiwgXCJvbktleWRvd25cIl0pLFxuICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnRWTm9kZShcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiZXJyb3Jtc2dcIikpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IG5vcm1hbGl6ZVN0eWxlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogISFfY3R4LmVkaXRvckVycm9yTWVzc2FnZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICB9LCB0b0Rpc3BsYXlTdHJpbmcoX2N0eC5lZGl0b3JFcnJvck1lc3NhZ2UpLCA3KVxuICAgICAgICAgICAgICAgICAgICBdLCAyKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIFt2U2hvdywgX2N0eC5zaG93SW5wdXRdXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICBdLCAxMCwgX2hvaXN0ZWRfMyksXG4gICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50Vk5vZGUoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogbm9ybWFsaXplQ2xhc3MoX2N0eC5ucy5lKFwiYnRuc1wiKSlcbiAgICAgICAgICAgICAgICAgIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2N0eC5zaG93Q2FuY2VsQnV0dG9uID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhfY29tcG9uZW50X2VsX2J1dHRvbiwge1xuICAgICAgICAgICAgICAgICAgICAgIGtleTogMCxcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBfY3R4LmNhbmNlbEJ1dHRvbkxvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IG5vcm1hbGl6ZUNsYXNzKFtfY3R4LmNhbmNlbEJ1dHRvbkNsYXNzXSksXG4gICAgICAgICAgICAgICAgICAgICAgcm91bmQ6IF9jdHgucm91bmRCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgICAgc2l6ZTogX2N0eC5idG5TaXplLFxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s6IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gKCRldmVudCkgPT4gX2N0eC5oYW5kbGVBY3Rpb24oXCJjYW5jZWxcIikpLFxuICAgICAgICAgICAgICAgICAgICAgIG9uS2V5ZG93bjogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSB3aXRoS2V5cyh3aXRoTW9kaWZpZXJzKCgkZXZlbnQpID0+IF9jdHguaGFuZGxlQWN0aW9uKFwiY2FuY2VsXCIpLCBbXCJwcmV2ZW50XCJdKSwgW1wiZW50ZXJcIl0pKVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogd2l0aEN0eCgoKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVUZXh0Vk5vZGUodG9EaXNwbGF5U3RyaW5nKF9jdHguY2FuY2VsQnV0dG9uVGV4dCB8fCBfY3R4LnQoXCJlbC5tZXNzYWdlYm94LmNhbmNlbFwiKSksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICB9LCA4LCBbXCJsb2FkaW5nXCIsIFwiY2xhc3NcIiwgXCJyb3VuZFwiLCBcInNpemVcIl0pKSA6IGNyZWF0ZUNvbW1lbnRWTm9kZShcInYtaWZcIiwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIHdpdGhEaXJlY3RpdmVzKGNyZWF0ZVZOb2RlKF9jb21wb25lbnRfZWxfYnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVmOiBcImNvbmZpcm1SZWZcIixcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nOiBfY3R4LmNvbmZpcm1CdXR0b25Mb2FkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBub3JtYWxpemVDbGFzcyhbX2N0eC5jb25maXJtQnV0dG9uQ2xhc3Nlc10pLFxuICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiBfY3R4LnJvdW5kQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfY3R4LmNvbmZpcm1CdXR0b25EaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgICBzaXplOiBfY3R4LmJ0blNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX2NhY2hlWzVdIHx8IChfY2FjaGVbNV0gPSAoJGV2ZW50KSA9PiBfY3R4LmhhbmRsZUFjdGlvbihcImNvbmZpcm1cIikpLFxuICAgICAgICAgICAgICAgICAgICAgIG9uS2V5ZG93bjogX2NhY2hlWzZdIHx8IChfY2FjaGVbNl0gPSB3aXRoS2V5cyh3aXRoTW9kaWZpZXJzKCgkZXZlbnQpID0+IF9jdHguaGFuZGxlQWN0aW9uKFwiY29uZmlybVwiKSwgW1wicHJldmVudFwiXSksIFtcImVudGVyXCJdKSlcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHdpdGhDdHgoKCkgPT4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlVGV4dFZOb2RlKHRvRGlzcGxheVN0cmluZyhfY3R4LmNvbmZpcm1CdXR0b25UZXh0IHx8IF9jdHgudChcImVsLm1lc3NhZ2Vib3guY29uZmlybVwiKSksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgXzogMVxuICAgICAgICAgICAgICAgICAgICB9LCA4LCBbXCJsb2FkaW5nXCIsIFwiY2xhc3NcIiwgXCJyb3VuZFwiLCBcImRpc2FibGVkXCIsIFwic2l6ZVwiXSksIFtcbiAgICAgICAgICAgICAgICAgICAgICBbdlNob3csIF9jdHguc2hvd0NvbmZpcm1CdXR0b25dXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICBdLCAyKVxuICAgICAgICAgICAgICAgIF0sIDYpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfOiAzXG4gICAgICAgICAgICB9LCA4LCBbXCJ0cmFwcGVkXCIsIFwiZm9jdXMtdHJhcC1lbFwiLCBcImZvY3VzLXN0YXJ0LWVsXCIsIFwib25SZWxlYXNlUmVxdWVzdGVkXCJdKVxuICAgICAgICAgIF0sIDQyLCBfaG9pc3RlZF8xKVxuICAgICAgICBdKSxcbiAgICAgICAgXzogM1xuICAgICAgfSwgOCwgW1wiei1pbmRleFwiLCBcIm92ZXJsYXktY2xhc3NcIiwgXCJtYXNrXCJdKSwgW1xuICAgICAgICBbdlNob3csIF9jdHgudmlzaWJsZV1cbiAgICAgIF0pXG4gICAgXSksXG4gICAgXzogM1xuICB9KTtcbn1cbnZhciBNZXNzYWdlQm94Q29uc3RydWN0b3IgPSAvKiBAX19QVVJFX18gKi8gX2V4cG9ydF9zZmMoX3NmY19tYWluLCBbW1wicmVuZGVyXCIsIF9zZmNfcmVuZGVyXSwgW1wiX19maWxlXCIsIFwiL2hvbWUvcnVubmVyL3dvcmsvZWxlbWVudC1wbHVzL2VsZW1lbnQtcGx1cy9wYWNrYWdlcy9jb21wb25lbnRzL21lc3NhZ2UtYm94L3NyYy9pbmRleC52dWVcIl1dKTtcblxuZXhwb3J0IHsgTWVzc2FnZUJveENvbnN0cnVjdG9yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Mi5tanMubWFwXG4iLCJpbXBvcnQgeyBoLCByZW5kZXIsIHdhdGNoLCBpc1ZOb2RlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGlzQ2xpZW50IH0gZnJvbSAnQHZ1ZXVzZS9jb3JlJztcbmltcG9ydCAnLi4vLi4vLi4vdXRpbHMvaW5kZXgyLm1qcyc7XG5pbXBvcnQgTWVzc2FnZUJveENvbnN0cnVjdG9yIGZyb20gJy4vaW5kZXgyLm1qcyc7XG5pbXBvcnQgeyBoYXNPd24sIGlzU3RyaW5nLCBpc09iamVjdCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcbmltcG9ydCB7IGlzVW5kZWZpbmVkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdHlwZXMyLm1qcyc7XG5cbmNvbnN0IG1lc3NhZ2VJbnN0YW5jZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5jb25zdCBpbml0SW5zdGFuY2UgPSAocHJvcHMsIGNvbnRhaW5lciwgYXBwQ29udGV4dCA9IG51bGwpID0+IHtcbiAgY29uc3Qgdm5vZGUgPSBoKE1lc3NhZ2VCb3hDb25zdHJ1Y3RvciwgcHJvcHMpO1xuICB2bm9kZS5hcHBDb250ZXh0ID0gYXBwQ29udGV4dDtcbiAgcmVuZGVyKHZub2RlLCBjb250YWluZXIpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZCk7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnQ7XG59O1xuY29uc3QgZ2VuQ29udGFpbmVyID0gKCkgPT4ge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbn07XG5jb25zdCBzaG93TWVzc2FnZSA9IChvcHRpb25zLCBhcHBDb250ZXh0KSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGdlbkNvbnRhaW5lcigpO1xuICBvcHRpb25zLm9uVmFuaXNoID0gKCkgPT4ge1xuICAgIHJlbmRlcihudWxsLCBjb250YWluZXIpO1xuICAgIG1lc3NhZ2VJbnN0YW5jZS5kZWxldGUodm0pO1xuICB9O1xuICBvcHRpb25zLm9uQWN0aW9uID0gKGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRNc2cgPSBtZXNzYWdlSW5zdGFuY2UuZ2V0KHZtKTtcbiAgICBsZXQgcmVzb2x2ZTtcbiAgICBpZiAob3B0aW9ucy5zaG93SW5wdXQpIHtcbiAgICAgIHJlc29sdmUgPSB7IHZhbHVlOiB2bS5pbnB1dFZhbHVlLCBhY3Rpb24gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZSA9IGFjdGlvbjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuY2FsbGJhY2spIHtcbiAgICAgIG9wdGlvbnMuY2FsbGJhY2socmVzb2x2ZSwgaW5zdGFuY2UucHJveHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYWN0aW9uID09PSBcImNhbmNlbFwiIHx8IGFjdGlvbiA9PT0gXCJjbG9zZVwiKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UgJiYgYWN0aW9uICE9PSBcImNhbmNlbFwiKSB7XG4gICAgICAgICAgY3VycmVudE1zZy5yZWplY3QoXCJjbG9zZVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50TXNnLnJlamVjdChcImNhbmNlbFwiKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudE1zZy5yZXNvbHZlKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgaW5zdGFuY2UgPSBpbml0SW5zdGFuY2Uob3B0aW9ucywgY29udGFpbmVyLCBhcHBDb250ZXh0KTtcbiAgY29uc3Qgdm0gPSBpbnN0YW5jZS5wcm94eTtcbiAgZm9yIChjb25zdCBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICBpZiAoaGFzT3duKG9wdGlvbnMsIHByb3ApICYmICFoYXNPd24odm0uJHByb3BzLCBwcm9wKSkge1xuICAgICAgdm1bcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgfVxuICB3YXRjaCgoKSA9PiB2bS5tZXNzYWdlLCAobmV3VmFsLCBvbGRWYWwpID0+IHtcbiAgICBpZiAoaXNWTm9kZShuZXdWYWwpKSB7XG4gICAgICBpbnN0YW5jZS5zbG90cy5kZWZhdWx0ID0gKCkgPT4gW25ld1ZhbF07XG4gICAgfSBlbHNlIGlmIChpc1ZOb2RlKG9sZFZhbCkgJiYgIWlzVk5vZGUobmV3VmFsKSkge1xuICAgICAgZGVsZXRlIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQ7XG4gICAgfVxuICB9LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuICB2bS52aXNpYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIHZtO1xufTtcbmZ1bmN0aW9uIE1lc3NhZ2VCb3gob3B0aW9ucywgYXBwQ29udGV4dCA9IG51bGwpIHtcbiAgaWYgKCFpc0NsaWVudClcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoKTtcbiAgbGV0IGNhbGxiYWNrO1xuICBpZiAoaXNTdHJpbmcob3B0aW9ucykgfHwgaXNWTm9kZShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBtZXNzYWdlOiBvcHRpb25zXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2s7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCB2bSA9IHNob3dNZXNzYWdlKG9wdGlvbnMsIGFwcENvbnRleHQgIT0gbnVsbCA/IGFwcENvbnRleHQgOiBNZXNzYWdlQm94Ll9jb250ZXh0KTtcbiAgICBtZXNzYWdlSW5zdGFuY2Uuc2V0KHZtLCB7XG4gICAgICBvcHRpb25zLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICByZXNvbHZlLFxuICAgICAgcmVqZWN0XG4gICAgfSk7XG4gIH0pO1xufVxuY29uc3QgTUVTU0FHRV9CT1hfVkFSSUFOVFMgPSBbXCJhbGVydFwiLCBcImNvbmZpcm1cIiwgXCJwcm9tcHRcIl07XG5jb25zdCBNRVNTQUdFX0JPWF9ERUZBVUxUX09QVFMgPSB7XG4gIGFsZXJ0OiB7IGNsb3NlT25QcmVzc0VzY2FwZTogZmFsc2UsIGNsb3NlT25DbGlja01vZGFsOiBmYWxzZSB9LFxuICBjb25maXJtOiB7IHNob3dDYW5jZWxCdXR0b246IHRydWUgfSxcbiAgcHJvbXB0OiB7IHNob3dDYW5jZWxCdXR0b246IHRydWUsIHNob3dJbnB1dDogdHJ1ZSB9XG59O1xuTUVTU0FHRV9CT1hfVkFSSUFOVFMuZm9yRWFjaCgoYm94VHlwZSkgPT4ge1xuICBNZXNzYWdlQm94W2JveFR5cGVdID0gbWVzc2FnZUJveEZhY3RvcnkoYm94VHlwZSk7XG59KTtcbmZ1bmN0aW9uIG1lc3NhZ2VCb3hGYWN0b3J5KGJveFR5cGUpIHtcbiAgcmV0dXJuIChtZXNzYWdlLCB0aXRsZU9yT3B0cywgb3B0aW9ucywgYXBwQ29udGV4dCkgPT4ge1xuICAgIGxldCB0aXRsZTtcbiAgICBpZiAoaXNPYmplY3QodGl0bGVPck9wdHMpKSB7XG4gICAgICBvcHRpb25zID0gdGl0bGVPck9wdHM7XG4gICAgICB0aXRsZSA9IFwiXCI7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmaW5lZCh0aXRsZU9yT3B0cykpIHtcbiAgICAgIHRpdGxlID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGUgPSB0aXRsZU9yT3B0cztcbiAgICB9XG4gICAgcmV0dXJuIE1lc3NhZ2VCb3goT2JqZWN0LmFzc2lnbih7XG4gICAgICB0aXRsZSxcbiAgICAgIG1lc3NhZ2UsXG4gICAgICB0eXBlOiBcIlwiLFxuICAgICAgLi4uTUVTU0FHRV9CT1hfREVGQVVMVF9PUFRTW2JveFR5cGVdXG4gICAgfSwgb3B0aW9ucywge1xuICAgICAgYm94VHlwZVxuICAgIH0pLCBhcHBDb250ZXh0KTtcbiAgfTtcbn1cbk1lc3NhZ2VCb3guY2xvc2UgPSAoKSA9PiB7XG4gIG1lc3NhZ2VJbnN0YW5jZS5mb3JFYWNoKChfLCB2bSkgPT4ge1xuICAgIHZtLmRvQ2xvc2UoKTtcbiAgfSk7XG4gIG1lc3NhZ2VJbnN0YW5jZS5jbGVhcigpO1xufTtcbk1lc3NhZ2VCb3guX2NvbnRleHQgPSBudWxsO1xuXG5leHBvcnQgeyBNZXNzYWdlQm94IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VCb3gyLm1qcy5tYXBcbiIsImltcG9ydCBNZXNzYWdlQm94IGZyb20gJy4vc3JjL21lc3NhZ2VCb3gyLm1qcyc7XG5pbXBvcnQgJy4vc3JjL21lc3NhZ2UtYm94LnR5cGUyLm1qcyc7XG5cbmNvbnN0IF9NZXNzYWdlQm94ID0gTWVzc2FnZUJveDtcbl9NZXNzYWdlQm94Lmluc3RhbGwgPSAoYXBwKSA9PiB7XG4gIF9NZXNzYWdlQm94Ll9jb250ZXh0ID0gYXBwLl9jb250ZXh0O1xuICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJG1zZ2JveCA9IF9NZXNzYWdlQm94O1xuICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJG1lc3NhZ2VCb3ggPSBfTWVzc2FnZUJveDtcbiAgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLiRhbGVydCA9IF9NZXNzYWdlQm94LmFsZXJ0O1xuICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJGNvbmZpcm0gPSBfTWVzc2FnZUJveC5jb25maXJtO1xuICBhcHAuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMuJHByb21wdCA9IF9NZXNzYWdlQm94LnByb21wdDtcbn07XG5jb25zdCBFbE1lc3NhZ2VCb3ggPSBfTWVzc2FnZUJveDtcblxuZXhwb3J0IHsgRWxNZXNzYWdlQm94LCBfTWVzc2FnZUJveCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleDIubWpzLm1hcFxuIl0sIm5hbWVzIjpbIkZPQ1VTX1NUQUNLIiwiRk9DVVNfSEFORExFUiIsImUiLCJsZW5ndGgiLCJmb2N1c2FibGVFbGVtZW50IiwiY29kZSIsIkVWRU5UX0NPREUiLCJ0YWIiLCJwcmV2ZW50RGVmYXVsdCIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImZvY3VzIiwiZ29pbmdCYWNrd2FyZCIsInNoaWZ0S2V5IiwiaXNGaXJzdCIsInRhcmdldCIsImlzTGFzdCIsIl9zZmNfbWFpbiIsImRlZmluZUNvbXBvbmVudCIsIm5hbWUiLCJkaXJlY3RpdmVzIiwiVHJhcEZvY3VzIiwiYmVmb3JlTW91bnQiLCJlbCIsIm9idGFpbkFsbEZvY3VzYWJsZUVsZW1lbnRzIiwicHVzaCIsIm9uIiwidXBkYXRlZCIsIm5leHRUaWNrIiwidW5tb3VudGVkIiwic2hpZnQiLCJvZmYiLCJjb21wb25lbnRzIiwiRWxCdXR0b24iLCJFbEZvY3VzVHJhcCIsIkVsSW5wdXQiLCJFbE92ZXJsYXkiLCJFbEljb24iLCJUeXBlQ29tcG9uZW50cyIsImluaGVyaXRBdHRycyIsInByb3BzIiwiYnV0dG9uU2l6ZSIsInR5cGUiLCJTdHJpbmciLCJ2YWxpZGF0b3IiLCJpc1ZhbGlkQ29tcG9uZW50U2l6ZSIsIm1vZGFsIiwiQm9vbGVhbiIsImRlZmF1bHQiLCJsb2NrU2Nyb2xsIiwic2hvd0Nsb3NlIiwiY2xvc2VPbkNsaWNrTW9kYWwiLCJjbG9zZU9uUHJlc3NFc2NhcGUiLCJjbG9zZU9uSGFzaENoYW5nZSIsImNlbnRlciIsImRyYWdnYWJsZSIsInJvdW5kQnV0dG9uIiwiY29udGFpbmVyIiwiYm94VHlwZSIsImVtaXRzIiwic2V0dXAiLCJlbWl0IiwidCIsInVzZUxvY2FsZSIsIm5zIiwidXNlTmFtZXNwYWNlIiwidmlzaWJsZSIsInJlZiIsIm5leHRaSW5kZXgiLCJ1c2VaSW5kZXgiLCJzdGF0ZSIsInJlYWN0aXZlIiwiYmVmb3JlQ2xvc2UiLCJjYWxsYmFjayIsImNhbmNlbEJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25DbGFzcyIsImNvbmZpcm1CdXR0b25UZXh0IiwiY29uZmlybUJ1dHRvbkNsYXNzIiwiY3VzdG9tQ2xhc3MiLCJjdXN0b21TdHlsZSIsImRhbmdlcm91c2x5VXNlSFRNTFN0cmluZyIsImRpc3Rpbmd1aXNoQ2FuY2VsQW5kQ2xvc2UiLCJpY29uIiwiaW5wdXRQYXR0ZXJuIiwiaW5wdXRQbGFjZWhvbGRlciIsImlucHV0VHlwZSIsImlucHV0VmFsdWUiLCJpbnB1dFZhbGlkYXRvciIsImlucHV0RXJyb3JNZXNzYWdlIiwibWVzc2FnZSIsIm1vZGFsRmFkZSIsIm1vZGFsQ2xhc3MiLCJzaG93Q2FuY2VsQnV0dG9uIiwic2hvd0NvbmZpcm1CdXR0b24iLCJ0aXRsZSIsInNob3dJbnB1dCIsImFjdGlvbiIsImNvbmZpcm1CdXR0b25Mb2FkaW5nIiwiY2FuY2VsQnV0dG9uTG9hZGluZyIsImNvbmZpcm1CdXR0b25EaXNhYmxlZCIsImVkaXRvckVycm9yTWVzc2FnZSIsInZhbGlkYXRlRXJyb3IiLCJ6SW5kZXgiLCJ0eXBlQ2xhc3MiLCJjb21wdXRlZCIsImJtIiwiVHlwZUNvbXBvbmVudHNNYXAiLCJjb250ZW50SWQiLCJ1c2VJZCIsImlucHV0SWQiLCJidG5TaXplIiwidXNlU2l6ZSIsInByb3AiLCJmb3JtIiwiZm9ybUl0ZW0iLCJpY29uQ29tcG9uZW50IiwiaGFzTWVzc2FnZSIsInJvb3RSZWYiLCJoZWFkZXJSZWYiLCJmb2N1c1N0YXJ0UmVmIiwiaW5wdXRSZWYiLCJjb25maXJtUmVmIiwiY29uZmlybUJ1dHRvbkNsYXNzZXMiLCJ3YXRjaCIsImFzeW5jIiwidmFsIiwiaW1tZWRpYXRlIiwidmFsdWUiLCJfYSIsIl9iIiwiJGVsIiwidGhlbiIsIl9hMiIsImdldElucHV0RWxlbWVudCIsImRvQ2xvc2UiLCJ1c2VEcmFnZ2FibGUiLCJvbk1vdW50ZWQiLCJ3aW5kb3ciLCJvbkJlZm9yZVVubW91bnQiLCJoYW5kbGVXcmFwcGVyQ2xpY2siLCJoYW5kbGVBY3Rpb24iLCJvdmVybGF5RXZlbnQiLCJ1c2VTYW1lVGFyZ2V0IiwidmFsaWRhdGUiLCJjYWxsIiwidGVzdCIsInZhbGlkYXRlUmVzdWx0IiwiaW5wdXRSZWZzIiwiJHJlZnMiLCJpbnB1dCIsInRleHRhcmVhIiwiaGFuZGxlQ2xvc2UiLCJ1c2VMb2Nrc2NyZWVuIiwidG9nZ2xlIiwiaW5pdGlhbEZvY3VzIiwicHJldmlvdXNBY3RpdmUiLCJpc1JlZiIsInVzZVJlc3RvcmVBY3RpdmUiLCJ0b1JlZnMiLCJvbkNsb3NlUmVxdWVzdGVkIiwiaGFuZGxlSW5wdXRFbnRlciIsIl9ob2lzdGVkXzEiLCJfaG9pc3RlZF8yIiwiX2hvaXN0ZWRfMyIsIk1lc3NhZ2VCb3hDb25zdHJ1Y3RvciIsIl9leHBvcnRfc2ZjIiwiX2N0eCIsIl9jYWNoZSIsIiRwcm9wcyIsIiRzZXR1cCIsIiRkYXRhIiwiJG9wdGlvbnMiLCJfY29tcG9uZW50X2VsX2ljb24iLCJyZXNvbHZlQ29tcG9uZW50IiwiX2NvbXBvbmVudF9jbG9zZSIsIl9jb21wb25lbnRfZWxfaW5wdXQiLCJfY29tcG9uZW50X2VsX2J1dHRvbiIsIl9jb21wb25lbnRfZWxfZm9jdXNfdHJhcCIsIl9jb21wb25lbnRfZWxfb3ZlcmxheSIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwiVHJhbnNpdGlvbiIsIm9uQWZ0ZXJMZWF2ZSIsIiRldmVudCIsIiRlbWl0IiwicGVyc2lzdGVkIiwid2l0aEN0eCIsIndpdGhEaXJlY3RpdmVzIiwiY3JlYXRlVk5vZGUiLCJpcyIsIm1hc2siLCJjcmVhdGVFbGVtZW50Vk5vZGUiLCJyb2xlIiwiY2xhc3MiLCJub3JtYWxpemVDbGFzcyIsIm5hbWVzcGFjZSIsIm9uQ2xpY2siLCJhcmdzIiwib25Nb3VzZWRvd24iLCJvbk1vdXNldXAiLCJsb29wIiwidHJhcHBlZCIsIm9uUmVsZWFzZVJlcXVlc3RlZCIsImIiLCJtIiwic3R5bGUiLCJub3JtYWxpemVTdHlsZSIsInRhYmluZGV4Iiwid2l0aE1vZGlmaWVycyIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImtleSIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwiXyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsInRvRGlzcGxheVN0cmluZyIsIm9uS2V5ZG93biIsIndpdGhLZXlzIiwiaWQiLCJyZW5kZXJTbG90IiwiJHNsb3RzIiwiZm9yIiwiaW5uZXJIVE1MIiwiY3JlYXRlVGV4dFZOb2RlIiwibW9kZWxWYWx1ZSIsInBsYWNlaG9sZGVyIiwiaW52YWxpZCIsInZpc2liaWxpdHkiLCJ2U2hvdyIsImxvYWRpbmciLCJyb3VuZCIsInNpemUiLCJkaXNhYmxlZCIsIm1lc3NhZ2VJbnN0YW5jZSIsIk1hcCIsInNob3dNZXNzYWdlIiwib3B0aW9ucyIsImFwcENvbnRleHQiLCJjcmVhdGVFbGVtZW50Iiwib25WYW5pc2giLCJyZW5kZXIiLCJkZWxldGUiLCJ2bSIsIm9uQWN0aW9uIiwiY3VycmVudE1zZyIsImdldCIsInJlc29sdmUiLCJpbnN0YW5jZSIsInByb3h5IiwicmVqZWN0Iiwidm5vZGUiLCJoIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjb21wb25lbnQiLCJpbml0SW5zdGFuY2UiLCJoYXNPd24iLCJuZXdWYWwiLCJvbGRWYWwiLCJpc1ZOb2RlIiwic2xvdHMiLCJNZXNzYWdlQm94IiwiaXNDbGllbnQiLCJQcm9taXNlIiwiaXNTdHJpbmciLCJfY29udGV4dCIsInNldCIsIk1FU1NBR0VfQk9YX0RFRkFVTFRfT1BUUyIsImFsZXJ0IiwiY29uZmlybSIsInByb21wdCIsImZvckVhY2giLCJ0aXRsZU9yT3B0cyIsImlzT2JqZWN0IiwiaXNVbmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJtZXNzYWdlQm94RmFjdG9yeSIsImNsb3NlIiwiY2xlYXIiLCJfTWVzc2FnZUJveCIsImluc3RhbGwiLCJhcHAiLCJjb25maWciLCJnbG9iYWxQcm9wZXJ0aWVzIiwiJG1zZ2JveCIsIiRtZXNzYWdlQm94IiwiJGFsZXJ0IiwiJGNvbmZpcm0iLCIkcHJvbXB0IiwiRWxNZXNzYWdlQm94Il0sIm1hcHBpbmdzIjoia3ZCQUVBLE1DT01BLEdBQWMsR0FDZEMsR0FBaUJDLElBRXJCLEdBQTJCLElBQXZCRixHQUFZRyxPQUNkLE9BQ0YsTUFBTUMsRUFBbUJKLEdBQVlBLEdBQVlHLE9BQVMsR0FQakMsd0JBUXpCLEdBQUlDLEVBQWlCRCxPQUFTLEdBQUtELEVBQUVHLE9BQVNDLEVBQVdDLElBQUssQ0FDeEQsR0FBNEIsSUFBNUJILEVBQWlCRCxPQUtuQixPQUpBRCxFQUFFTSxzQkFDRUMsU0FBU0MsZ0JBQWtCTixFQUFpQixJQUM5Q0EsRUFBaUIsR0FBR08sU0FJeEIsTUFBTUMsRUFBZ0JWLEVBQUVXLFNBQ2xCQyxFQUFVWixFQUFFYSxTQUFXWCxFQUFpQixHQUN4Q1ksRUFB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
