import{r as e,$ as a,v as t,Q as s,d as l,Y as n,o,c as r,h as u,a as i,cu as p,at as c,n as m,a9 as d,aX as k,G as v,F as f,a2 as y,g,a6 as h,bd as w,ae as b,aE as x}from"./index.1a68aef2.js";const $=s({animated:{type:Boolean,default:!1},count:{type:Number,default:1},rows:{type:Number,default:3},loading:{type:Boolean,default:!0},throttle:{type:Number}});var E=d(l({name:"ElSkeletonItem",props:s({variant:{type:String,values:["circle","rect","h1","h3","text","caption","p","image","button"],default:"text"}}),setup(e){const a=n("skeleton");return(e,t)=>(o(),r("div",{class:m([i(a).e("item"),i(a).e(e.variant)])},["image"===e.variant?(o(),u(i(p),{key:0})):c("v-if",!0)],2))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton-item.vue"]]);const S=b(d(l({name:"ElSkeleton",props:$,setup(s,{expose:l}){const p=s,d=n("skeleton"),b=((s,l=0)=>{if(0===l)return s;const n=e(!1);let o=0;const r=()=>{o&&clearTimeout(o),o=window.setTimeout((()=>{n.value=s.value}),l)};return a(r),t((()=>s.value),(e=>{e?r():n.value=e})),n})(k(p,"loading"),p.throttle);return l({uiLoading:b}),(e,a)=>i(b)?(o(),r("div",h({key:0,class:[i(d).b(),i(d).is("animated",e.animated)]},e.$attrs),[(o(!0),r(v,null,f(e.count,(a=>(o(),r(v,{key:a},[e.loading?y(e.$slots,"template",{key:a},(()=>[g(E,{class:m(i(d).is("first")),variant:"p"},null,8,["class"]),(o(!0),r(v,null,f(e.rows,(a=>(o(),u(E,{key:a,class:m([i(d).e("paragraph"),i(d).is("last",a===e.rows&&e.rows>1)]),variant:"p"},null,8,["class"])))),128))])):c("v-if",!0)],64)))),128))],16)):y(e.$slots,"default",w(h({key:1},e.$attrs)))}}),[["__file","/home/runner/work/element-plus/element-plus/packages/components/skeleton/src/skeleton.vue"]]),{SkeletonItem:E});x(E);export{S as E};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
