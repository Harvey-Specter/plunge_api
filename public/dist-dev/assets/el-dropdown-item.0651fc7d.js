import{E as e}from"./el-button.c85984df.js";import{o,a as n,c as t,b as l,u as r,E as a,O as i,w as s,F as u}from"./el-popper.7090df9f.js";import{a9 as d,a2 as c,r as p,ar as f,ak as m,$ as v,a as g,b0 as b,Q as w,R as h,au as y,d as I,D as E,bH as C,aX as k,v as F,E as _,o as T,h as R,w as S,g as x,bd as O,be as D,aa as M,b6 as B,a3 as K,a0 as P,ax as N,Y as G,b3 as $,aq as L,aI as A,c as z,a5 as H,a6 as j,n as Y,at as J,e as U,as as q,G as V,a4 as W,ae as Q,aE as X}from"./index.f2e05143.js";import{u as Z}from"./index2.309e467b.js";import{u as ee}from"./index2.bac0fa94.js";import{c as oe}from"./refs2.9b43771e.js";var ne=d({inheritAttrs:!1},[["render",function(e,o,n,t,l,r){return c(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection.vue"]]);var te=d({name:"ElCollectionItem",inheritAttrs:!1},[["render",function(e,o,n,t,l,r){return c(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/collection/src/collection-item.vue"]]);const le=e=>{const o=`El${e}Collection`,n=`${o}Item`,t=Symbol(o),l=Symbol(n),r={...ne,name:o,setup(){const e=p(null),o=new Map;f(t,{itemMap:o,getItems:()=>{const n=g(e);if(!n)return[];const t=Array.from(n.querySelectorAll("[data-el-collection-item]"));return[...o.values()].sort(((e,o)=>t.indexOf(e.ref)-t.indexOf(o.ref)))},collectionRef:e})}},a={...te,name:n,setup(e,{attrs:o}){const n=p(null),r=m(t,void 0);f(l,{collectionItemRef:n}),v((()=>{const e=g(n);e&&r.itemMap.set(e,{ref:e,...o})})),b((()=>{const e=g(n);r.itemMap.delete(e)}))}};return{COLLECTION_INJECTION_KEY:t,COLLECTION_ITEM_INJECTION_KEY:l,ElCollection:r,ElCollectionItem:a}},re=w({style:{type:h([String,Array,Object])},currentTabId:{type:h(String)},defaultCurrentTabId:String,loop:Boolean,dir:{type:String,values:["ltr","rtl"],default:"ltr"},orientation:{type:h(String)},onBlur:Function,onFocus:Function,onMousedown:Function}),{ElCollection:ae,ElCollectionItem:ie,COLLECTION_INJECTION_KEY:se,COLLECTION_ITEM_INJECTION_KEY:ue}=le("RovingFocusGroup"),de=Symbol("elRovingFocusGroup"),ce=Symbol("elRovingFocusGroupItem"),pe={ArrowLeft:"prev",ArrowUp:"prev",ArrowRight:"next",ArrowDown:"next",PageUp:"first",Home:"first",PageDown:"last",End:"last"},fe=(e,o,n)=>{const t=((e,o)=>{if("rtl"!==o)return e;switch(e){case y.right:return y.left;case y.left:return y.right;default:return e}})(e.key,n);if(!("vertical"===o&&[y.left,y.right].includes(t)||"horizontal"===o&&[y.up,y.down].includes(t)))return pe[t]},me=e=>{const{activeElement:o}=document;for(const n of e){if(n===o)return;if(n.focus(),o!==document.activeElement)return}},ve={bubbles:!1,cancelable:!0},ge=I({name:"ElRovingFocusGroupImpl",inheritAttrs:!1,props:re,emits:["currentTabIdChange","entryFocus"],setup(e,{emit:l}){var r;const a=p(null!=(r=e.currentTabId||e.defaultCurrentTabId)?r:null),i=p(!1),s=p(!1),u=p(null),{getItems:d}=m(se,void 0),c=E((()=>[{outline:"none"},e.style])),w=t((o=>{var n;null==(n=e.onMousedown)||n.call(e,o)}),(()=>{s.value=!0})),h=t((o=>{var n;null==(n=e.onFocus)||n.call(e,o)}),(e=>{const o=!g(s),{target:n,currentTarget:t}=e;if(n===t&&o&&!g(i)){const e=new Event("rovingFocusGroup.entryFocus",ve);if(null==t||t.dispatchEvent(e),!e.defaultPrevented){const e=d().filter((e=>e.focusable)),o=[e.find((e=>e.active)),e.find((e=>e.id===g(a))),...e].filter(Boolean).map((e=>e.ref));me(o)}}s.value=!1})),y=t((o=>{var n;null==(n=e.onBlur)||n.call(e,o)}),(()=>{i.value=!1})),I=(...e)=>{l("entryFocus",...e)};f(de,{currentTabbedId:C(a),loop:k(e,"loop"),tabIndex:E((()=>g(i)?-1:0)),rovingFocusGroupRef:u,rovingFocusGroupRootStyle:c,orientation:k(e,"orientation"),dir:k(e,"dir"),onItemFocus:e=>{l("currentTabIdChange",e)},onItemShiftTab:()=>{i.value=!0},onBlur:y,onFocus:h,onMousedown:w}),F((()=>e.currentTabId),(e=>{a.value=null!=e?e:null})),v((()=>{const e=g(u);o(e,"rovingFocusGroup.entryFocus",I)})),b((()=>{const e=g(u);n(e,"rovingFocusGroup.entryFocus",I)}))}});var be=d(I({name:"ElRovingFocusGroup",components:{ElFocusGroupCollection:ae,ElRovingFocusGroupImpl:d(ge,[["render",function(e,o,n,t,l,r){return c(e.$slots,"default")}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group-impl.vue"]])}}),[["render",function(e,o,n,t,l,r){const a=_("el-roving-focus-group-impl"),i=_("el-focus-group-collection");return T(),R(i,null,{default:S((()=>[x(a,O(D(e.$attrs)),{default:S((()=>[c(e.$slots,"default")])),_:3},16)])),_:3})}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-group.vue"]]);var we=d(I({components:{ElRovingFocusCollectionItem:ie},props:{focusable:{type:Boolean,default:!0},active:{type:Boolean,default:!1}},emits:["mousedown","focus","keydown"],setup(e,{emit:o}){const{currentTabbedId:n,loop:l,onItemFocus:r,onItemShiftTab:a}=m(de,void 0),{getItems:i}=m(se,void 0),s=ee(),u=p(null),d=t((e=>{o("mousedown",e)}),(o=>{e.focusable?r(g(s)):o.preventDefault()})),c=t((e=>{o("focus",e)}),(()=>{r(g(s))})),v=t((e=>{o("keydown",e)}),(e=>{const{key:o,shiftKey:n,target:t,currentTarget:r}=e;if(o===y.tab&&n)return void a();if(t!==r)return;const s=fe(e);if(s){e.preventDefault();let o=i().filter((e=>e.focusable)).map((e=>e.ref));switch(s){case"last":o.reverse();break;case"prev":case"next":{"prev"===s&&o.reverse();const e=o.indexOf(r);o=l.value?(d=e+1,(u=o).map(((e,o)=>u[(o+d)%u.length]))):o.slice(e+1);break}}M((()=>{me(o)}))}var u,d})),b=E((()=>n.value===g(s)));return f(ce,{rovingFocusGroupItemRef:u,tabIndex:E((()=>g(b)?0:-1)),handleMousedown:d,handleFocus:c,handleKeydown:v}),{id:s,handleKeydown:v,handleFocus:c,handleMousedown:d}}}),[["render",function(e,o,n,t,l,r){const a=_("el-roving-focus-collection-item");return T(),R(a,{id:e.id,focusable:e.focusable,active:e.active},{default:S((()=>[c(e.$slots,"default")])),_:3},8,["id","focusable","active"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/roving-focus-group/src/roving-focus-item.vue"]]);const he=w({trigger:l.trigger,effect:{...r.effect,default:"light"},type:{type:h(String)},placement:{type:h(String),default:"bottom"},popperOptions:{type:h(Object),default:()=>({})},id:String,size:{type:String,default:""},splitButton:Boolean,hideOnClick:{type:Boolean,default:!0},loop:{type:Boolean,default:!0},showTimeout:{type:Number,default:150},hideTimeout:{type:Number,default:150},tabindex:{type:h([Number,String]),default:0},maxHeight:{type:h([Number,String]),default:""},popperClass:{type:String,default:""},disabled:{type:Boolean,default:!1},role:{type:String,default:"menu"},buttonProps:{type:h(Object)}}),ye=w({command:{type:[Object,String,Number],default:()=>({})},disabled:Boolean,divided:Boolean,textValue:String,icon:{type:B}}),Ie=w({onKeydown:{type:h(Function)}}),Ee=[y.down,y.pageDown,y.home],Ce=[y.up,y.pageUp,y.end],ke=[...Ee,...Ce],{ElCollection:Fe,ElCollectionItem:_e,COLLECTION_INJECTION_KEY:Te,COLLECTION_ITEM_INJECTION_KEY:Re}=le("Dropdown"),Se=Symbol("elDropdown"),{ButtonGroup:xe}=e;var Oe=d(I({name:"ElDropdown",components:{ElButton:e,ElButtonGroup:xe,ElScrollbar:K,ElDropdownCollection:Fe,ElTooltip:a,ElRovingFocusGroup:be,ElOnlyChild:i,ElIcon:P,ArrowDown:N},props:he,emits:["visible-change","click","command"],setup(e,{emit:o}){const n=A(),t=G("dropdown"),{t:l}=Z(),r=p(),a=p(),i=p(null),s=p(null),u=p(null),d=p(null),c=p(!1),m=[y.enter,y.space,y.down],v=E((()=>({maxHeight:$(e.maxHeight)}))),b=E((()=>[t.m(C.value)])),w=ee().value,h=E((()=>e.id||w));function I(){var e;null==(e=i.value)||e.onClose()}const C=L();f(Se,{contentRef:s,role:E((()=>e.role)),triggerId:h,isUsingKeyboard:c,onItemEnter:function(){},onItemLeave:function(){const e=g(s);null==e||e.focus(),d.value=null}}),f("elDropdown",{instance:n,dropdownSize:C,handleClick:function(){I()},commandHandler:function(...e){o("command",...e)},trigger:k(e,"trigger"),hideOnClick:k(e,"hideOnClick")});return{t:l,ns:t,scrollbar:u,wrapStyle:v,dropdownTriggerKls:b,dropdownSize:C,triggerId:h,triggerKeys:m,currentTabId:d,handleCurrentTabIdChange:function(e){d.value=e},handlerMainButtonClick:e=>{o("click",e)},handleEntryFocus:function(e){c.value||(e.preventDefault(),e.stopImmediatePropagation())},handleClose:I,handleOpen:function(){var e;null==(e=i.value)||e.onOpen()},handleShowTooltip:function(e){"keydown"===(null==e?void 0:e.type)&&s.value.focus(),o("visible-change",!0)},handleHideTooltip:function(){o("visible-change",!1)},onFocusAfterTrapped:e=>{var o,n;e.preventDefault(),null==(n=null==(o=s.value)?void 0:o.focus)||n.call(o,{preventScroll:!0})},popperRef:i,contentRef:s,triggeringElementRef:r,referenceElementRef:a}}}),[["render",function(e,o,n,t,l,r){var a;const i=_("el-dropdown-collection"),s=_("el-roving-focus-group"),u=_("el-scrollbar"),d=_("el-only-child"),p=_("el-tooltip"),f=_("el-button"),m=_("arrow-down"),v=_("el-icon"),g=_("el-button-group");return T(),z("div",{class:Y([e.ns.b(),e.ns.is("disabled",e.disabled)])},[x(p,{ref:"popperRef",role:e.role,effect:e.effect,"fallback-placements":["bottom","top"],"popper-options":e.popperOptions,"gpu-acceleration":!1,"hide-after":"hover"===e.trigger?e.hideTimeout:0,"manual-mode":!0,placement:e.placement,"popper-class":[e.ns.e("popper"),e.popperClass],"reference-element":null==(a=e.referenceElementRef)?void 0:a.$el,trigger:e.trigger,"trigger-keys":e.triggerKeys,"trigger-target-el":e.contentRef,"show-after":"hover"===e.trigger?e.showTimeout:0,"stop-popper-mouse-event":!1,"virtual-ref":e.triggeringElementRef,"virtual-triggering":e.splitButton,disabled:e.disabled,transition:`${e.ns.namespace.value}-zoom-in-top`,teleported:"",pure:"",persistent:"",onShow:e.handleShowTooltip,onHide:e.handleHideTooltip},H({content:S((()=>[x(u,{ref:"scrollbar","wrap-style":e.wrapStyle,tag:"div","view-class":e.ns.e("list")},{default:S((()=>[x(s,{loop:e.loop,"current-tab-id":e.currentTabId,orientation:"horizontal",onCurrentTabIdChange:e.handleCurrentTabIdChange,onEntryFocus:e.handleEntryFocus},{default:S((()=>[x(i,null,{default:S((()=>[c(e.$slots,"dropdown")])),_:3})])),_:3},8,["loop","current-tab-id","onCurrentTabIdChange","onEntryFocus"])])),_:3},8,["wrap-style","view-class"])])),_:2},[e.splitButton?void 0:{name:"default",fn:S((()=>[x(d,{id:e.triggerId,role:"button",tabindex:e.tabindex},{default:S((()=>[c(e.$slots,"default")])),_:3},8,["id","tabindex"])]))}]),1032,["role","effect","popper-options","hide-after","placement","popper-class","reference-element","trigger","trigger-keys","trigger-target-el","show-after","virtual-ref","virtual-triggering","disabled","transition","onShow","onHide"]),e.splitButton?(T(),R(g,{key:0},{default:S((()=>[x(f,j({ref:"referenceElementRef"},e.buttonProps,{size:e.dropdownSize,type:e.type,disabled:e.disabled,tabindex:e.tabindex,onClick:e.handlerMainButtonClick}),{default:S((()=>[c(e.$slots,"default")])),_:3},16,["size","type","disabled","tabindex","onClick"]),x(f,j({id:e.triggerId,ref:"triggeringElementRef"},e.buttonProps,{role:"button",size:e.dropdownSize,type:e.type,class:e.ns.e("caret-button"),disabled:e.disabled,tabindex:e.tabindex,"aria-label":e.t("el.dropdown.toggleDropdown")}),{default:S((()=>[x(v,{class:Y(e.ns.e("icon"))},{default:S((()=>[x(m)])),_:1},8,["class"])])),_:1},16,["id","size","type","class","disabled","tabindex","aria-label"])])),_:3})):J("v-if",!0)],2)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown.vue"]]);const De=I({name:"DropdownItemImpl",components:{ElIcon:P},props:ye,emits:["pointermove","pointerleave","click","clickimpl"],setup(e,{emit:o}){const n=G("dropdown"),{role:l}=m(Se,void 0),{collectionItemRef:r}=m(Re,void 0),{collectionItemRef:a}=m(ue,void 0),{rovingFocusGroupItemRef:i,tabIndex:s,handleFocus:u,handleKeydown:d,handleMousedown:c}=m(ce,void 0);return{ns:n,itemRef:oe(r,a,i),dataset:{"data-el-collection-item":""},role:E((()=>"menu"===l.value?"menuitem":"navigation"===l.value?"link":"button")),tabIndex:s,handleFocus:u,handleKeydown:t((e=>{const{code:n}=e;if(n===y.enter||n===y.space)return e.preventDefault(),e.stopImmediatePropagation(),o("clickimpl",e),!0}),d),handleMousedown:c}}}),Me=["aria-disabled","tabindex","role"];const Be=()=>{const e=m("elDropdown",{}),o=E((()=>null==e?void 0:e.dropdownSize));return{elDropdown:e,_elDropdownSize:o}};var Ke=d(I({name:"ElDropdownItem",components:{ElDropdownCollectionItem:_e,ElRovingFocusItem:we,ElDropdownItemImpl:d(De,[["render",function(e,o,n,t,l,r){const a=_("el-icon");return T(),z(V,null,[e.divided?(T(),z("li",j({key:0,role:"separator",class:e.ns.bem("menu","item","divided")},e.$attrs),null,16)):J("v-if",!0),U("li",j({ref:e.itemRef},{...e.dataset,...e.$attrs},{"aria-disabled":e.disabled,class:[e.ns.be("menu","item"),e.ns.is("disabled",e.disabled)],tabindex:e.tabIndex,role:e.role,onClick:o[0]||(o[0]=o=>e.$emit("clickimpl",o)),onFocus:o[1]||(o[1]=(...o)=>e.handleFocus&&e.handleFocus(...o)),onKeydown:o[2]||(o[2]=(...o)=>e.handleKeydown&&e.handleKeydown(...o)),onMousedown:o[3]||(o[3]=(...o)=>e.handleMousedown&&e.handleMousedown(...o)),onPointermove:o[4]||(o[4]=o=>e.$emit("pointermove",o)),onPointerleave:o[5]||(o[5]=o=>e.$emit("pointerleave",o))}),[e.icon?(T(),R(a,{key:0},{default:S((()=>[(T(),R(q(e.icon)))])),_:1})):J("v-if",!0),c(e.$slots,"default")],16,Me)],64)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item-impl.vue"]])},inheritAttrs:!1,props:ye,emits:["pointermove","pointerleave","click"],setup(e,{emit:o,attrs:n}){const{elDropdown:l}=Be(),r=A(),a=p(null),i=E((()=>{var e,o;return null!=(o=null==(e=g(a))?void 0:e.textContent)?o:""})),{onItemEnter:u,onItemLeave:d}=m(Se,void 0),c=t((e=>(o("pointermove",e),e.defaultPrevented)),s((o=>{var n;e.disabled?d(o):(u(o),o.defaultPrevented||null==(n=o.currentTarget)||n.focus())}))),f=t((e=>(o("pointerleave",e),e.defaultPrevented)),s((e=>{d(e)})));return{handleClick:t((e=>(o("click",e),"keydown"!==e.type&&e.defaultPrevented)),(o=>{var n,t,a;e.disabled?o.stopImmediatePropagation():((null==(n=null==l?void 0:l.hideOnClick)?void 0:n.value)&&(null==(t=l.handleClick)||t.call(l)),null==(a=l.commandHandler)||a.call(l,e.command,r,o))})),handlePointerMove:c,handlePointerLeave:f,textContent:i,propsAndAttrs:E((()=>({...e,...n})))}}}),[["render",function(e,o,n,t,l,r){var a;const i=_("el-dropdown-item-impl"),s=_("el-roving-focus-item"),u=_("el-dropdown-collection-item");return T(),R(u,{disabled:e.disabled,"text-value":null!=(a=e.textValue)?a:e.textContent},{default:S((()=>[x(s,{focusable:!e.disabled},{default:S((()=>[x(i,j(e.propsAndAttrs,{onPointerleave:e.handlePointerLeave,onPointermove:e.handlePointerMove,onClickimpl:e.handleClick}),{default:S((()=>[c(e.$slots,"default")])),_:3},16,["onPointerleave","onPointermove","onClickimpl"])])),_:3},8,["focusable"])])),_:3},8,["disabled","text-value"])}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-item.vue"]]);const Pe=I({name:"ElDropdownMenu",props:Ie,setup(e){const o=G("dropdown"),{_elDropdownSize:n}=Be(),l=n.value,{focusTrapRef:r,onKeydown:a}=m(u,void 0),{contentRef:i,role:s,triggerId:d}=m(Se,void 0),{collectionRef:c,getItems:p}=m(Te,void 0),{rovingFocusGroupRef:f,rovingFocusGroupRootStyle:v,tabIndex:b,onBlur:w,onFocus:h,onMousedown:I}=m(de,void 0),{collectionRef:C}=m(se,void 0),k=E((()=>[o.b("menu"),o.bm("menu",null==l?void 0:l.value)])),F=oe(i,c,r,f,C),_=t((o=>{var n;null==(n=e.onKeydown)||n.call(e,o)}),(e=>{const{currentTarget:o,code:n,target:t}=e;if(o.contains(t),y.tab===n&&e.stopImmediatePropagation(),e.preventDefault(),t!==g(i))return;if(!ke.includes(n))return;const l=p().filter((e=>!e.disabled)).map((e=>e.ref));Ce.includes(n)&&l.reverse(),me(l)}));return{size:l,rovingFocusGroupRootStyle:v,tabIndex:b,dropdownKls:k,role:s,triggerId:d,dropdownListWrapperRef:F,handleKeydown:e=>{_(e),a(e)},onBlur:w,onFocus:h,onMousedown:I}}}),Ne=["role","aria-labelledby"];var Ge=d(Pe,[["render",function(e,o,n,t,l,r){return T(),z("ul",{ref:e.dropdownListWrapperRef,class:Y(e.dropdownKls),style:W(e.rovingFocusGroupRootStyle),tabindex:-1,role:e.role,"aria-labelledby":e.triggerId,onBlur:o[0]||(o[0]=(...o)=>e.onBlur&&e.onBlur(...o)),onFocus:o[1]||(o[1]=(...o)=>e.onFocus&&e.onFocus(...o)),onKeydown:o[2]||(o[2]=(...o)=>e.handleKeydown&&e.handleKeydown(...o)),onMousedown:o[3]||(o[3]=(...o)=>e.onMousedown&&e.onMousedown(...o))},[c(e.$slots,"default")],46,Ne)}],["__file","/home/runner/work/element-plus/element-plus/packages/components/dropdown/src/dropdown-menu.vue"]]);const $e=Q(Oe,{DropdownItem:Ke,DropdownMenu:Ge}),Le=X(Ke),Ae=X(Ge);export{$e as E,Ae as a,Le as b};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
